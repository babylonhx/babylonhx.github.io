(function (console, $hx_exports) { "use strict";
$hx_exports.openfl = $hx_exports.openfl || {};
$hx_exports.lime = $hx_exports.lime || {};
$hx_exports.BABYLON = $hx_exports.BABYLON || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.config = null;
ApplicationMain.preloader = null;
ApplicationMain.create = function() {
	var app = new openfl_display_Application();
	app.create(ApplicationMain.config);
	var display = new NMEPreloader();
	ApplicationMain.preloader = new openfl_display_Preloader(display);
	app.setPreloader(ApplicationMain.preloader);
	ApplicationMain.preloader.onComplete.add(ApplicationMain.init);
	ApplicationMain.preloader.create(ApplicationMain.config);
	var urls = [];
	var types = [];
	urls.push("../assets/sounds/beep.mp3");
	types.push("MUSIC");
	urls.push("../assets/sounds/flixel.mp3");
	types.push("MUSIC");
	urls.push("../assets/sounds/beep.ogg");
	types.push("SOUND");
	urls.push("../assets/sounds/flixel.ogg");
	types.push("SOUND");
	urls.push("Nokia Cellphone FC Small");
	types.push("FONT");
	urls.push("Arial");
	types.push("FONT");
	urls.push("../assets/fonts/OpenSans-Semibold-webfont.eot");
	types.push("BINARY");
	urls.push("../assets/fonts/OpenSansRegular.eot");
	types.push("BINARY");
	urls.push("Open Sans");
	types.push("FONT");
	urls.push("../assets/fonts/OpenSansRegular.woff");
	types.push("BINARY");
	urls.push("../assets/img/amiga.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/cloud.png");
	types.push("IMAGE");
	urls.push("../assets/img/crate.png");
	types.push("IMAGE");
	urls.push("../assets/img/DiffuseMap.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/disp2.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/flare.png");
	types.push("IMAGE");
	urls.push("../assets/img/grass.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/graygrad.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/ground.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/heightmap.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/heightMap.png");
	types.push("IMAGE");
	urls.push("../assets/img/heightmap2.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/lens4.png");
	types.push("IMAGE");
	urls.push("../assets/img/lens5.png");
	types.push("IMAGE");
	urls.push("../assets/img/materialspack/dirty.png");
	types.push("IMAGE");
	urls.push("../assets/img/materialspack/grassTop.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/materialspack/lava.gif");
	types.push("IMAGE");
	urls.push("../assets/img/materialspack/stone.mat");
	types.push("BINARY");
	urls.push("../assets/img/materialspack/stone.png");
	types.push("IMAGE");
	urls.push("../assets/img/misc.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/nebula.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/NormalMap.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/refMap.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/rust.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/night_nx.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/night_ny.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/night_nz.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/night_px.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/night_py.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/night_pz.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/README.TXT");
	types.push("TEXT");
	urls.push("../assets/img/skybox/Sky_FantasySky_Fire_Cam_nx.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/Sky_FantasySky_Fire_Cam_ny.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/Sky_FantasySky_Fire_Cam_nz.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/Sky_FantasySky_Fire_Cam_px.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/Sky_FantasySky_Fire_Cam_py.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/Sky_FantasySky_Fire_Cam_pz.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/Sky_Space_Nebula_DeepBlack_nx.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/Sky_Space_Nebula_DeepBlack_ny.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/Sky_Space_Nebula_DeepBlack_nz.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/Sky_Space_Nebula_DeepBlack_px.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/Sky_Space_Nebula_DeepBlack_py.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/Sky_Space_Nebula_DeepBlack_pz.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/skybox_nx.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/skybox_nx.png");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/skybox_ny.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/skybox_ny.png");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/skybox_ny_.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/skybox_ny__.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/skybox_nz.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/skybox_nz.png");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/skybox_px.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/skybox_px.png");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/skybox_py.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/skybox_py.png");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/skybox_pz.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/skybox_pz.png");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/snow_nx.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/snow_ny.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/snow_nz.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/snow_px.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/snow_py.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/snow_pz.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/treeskin.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/TropicalSunnyDay_nx.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/TropicalSunnyDay_ny.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/TropicalSunnyDay_nz.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/TropicalSunnyDay_px.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/TropicalSunnyDay_py.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/skybox/TropicalSunnyDay_pz.jpg");
	types.push("IMAGE");
	urls.push("../assets/img/sun.png");
	types.push("IMAGE");
	urls.push("../assets/img/terrain.png");
	types.push("IMAGE");
	urls.push("../assets/img/terrain_.png");
	types.push("IMAGE");
	urls.push("../assets/img/tree.png");
	types.push("IMAGE");
	urls.push("../assets/img/treeskin (1).jpg");
	types.push("IMAGE");
	urls.push("../assets/img/wood.jpg");
	types.push("IMAGE");
	urls.push("../assets/models/alientree.mtl");
	types.push("TEXT");
	urls.push("../assets/models/alientree.obj");
	types.push("TEXT");
	urls.push("../assets/models/shadows.babylon");
	types.push("TEXT");
	urls.push("../assets/models/skull.babylon");
	types.push("TEXT");
	urls.push("../assets/models/SSAOcat.babylon");
	types.push("TEXT");
	urls.push("../assets/models/star.ply");
	types.push("TEXT");
	urls.push("../assets/models/suzanne.obj");
	types.push("TEXT");
	if(ApplicationMain.config.assetsPrefix != null) {
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(types[i] != "FONT") urls[i] = ApplicationMain.config.assetsPrefix + urls[i];
		}
	}
	ApplicationMain.preloader.load(urls,types);
	var result = app.exec();
};
ApplicationMain.init = function() {
	var loaded = 0;
	var total = 0;
	var library_onLoad = function(__) {
		loaded++;
		if(loaded == total) ApplicationMain.start();
	};
	ApplicationMain.preloader = null;
	if(total == 0) ApplicationMain.start();
};
ApplicationMain.main = function() {
	ApplicationMain.config = { build : "2", company : "Krtolica Vujadin", file : "MainOpenflGame", fps : 60, name : "BabylonHX", orientation : "", packageName : "com.babylonhx", version : "1.0.0", windows : [{ antialiasing : 0, background : 16777215, borderless : false, depthBuffer : true, display : 0, fullscreen : false, hardware : true, height : 0, parameters : "{}", resizable : true, stencilBuffer : true, title : "BabylonHX", vsync : false, width : 0, x : null, y : null}]};
};
ApplicationMain.start = function() {
	var hasMain = false;
	var entryPoint = Type.resolveClass("MainOpenflGame");
	var _g = 0;
	var _g1 = Type.getClassFields(entryPoint);
	while(_g < _g1.length) {
		var methodName = _g1[_g];
		++_g;
		if(methodName == "main") {
			hasMain = true;
			break;
		}
	}
	lime_Assets.initialize();
	if(hasMain) Reflect.callMethod(entryPoint,Reflect.field(entryPoint,"main"),[]); else {
		var instance = Type.createInstance(DocumentClass,[]);
	}
	if(openfl_Lib.current.stage.window.__fullscreen) openfl_Lib.current.stage.dispatchEvent(new openfl_events_FullScreenEvent(openfl_events_FullScreenEvent.FULL_SCREEN,false,false,true,true));
	openfl_Lib.current.stage.dispatchEvent(new openfl_events_Event(openfl_events_Event.RESIZE,false,false));
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
openfl_events_IEventDispatcher.prototype = {
	addEventListener: null
	,dispatchEvent: null
	,hasEventListener: null
	,removeEventListener: null
	,willTrigger: null
	,__class__: openfl_events_IEventDispatcher
};
var openfl_events_EventDispatcher = function(target) {
	if(target != null) this.__targetDispatcher = target;
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.__sortByPriority = function(l1,l2) {
	if(l1.priority == l2.priority) return 0; else if(l1.priority > l2.priority) return -1; else return 1;
};
openfl_events_EventDispatcher.prototype = {
	__dispatching: null
	,__targetDispatcher: null
	,__eventMap: null
	,__newEventMap: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		if(this.__eventMap == null) {
			this.__dispatching = new haxe_ds_StringMap();
			this.__eventMap = new haxe_ds_StringMap();
			this.__newEventMap = new haxe_ds_StringMap();
		}
		if(!this.__eventMap.exists(type)) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			this.__eventMap.set(type,list);
		} else {
			var list1;
			if(this.__dispatching.get(type) == true) {
				if(!this.__newEventMap.exists(type)) {
					var _this = this.__eventMap.get(type);
					list1 = _this.slice();
					this.__newEventMap.set(type,list1);
				} else list1 = this.__newEventMap.get(type);
			} else list1 = this.__eventMap.get(type);
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(Reflect.compareMethods(list1[i].callback,listener)) return;
			}
			list1.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			list1.sort(openfl_events_EventDispatcher.__sortByPriority);
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) event.target = this.__targetDispatcher; else event.target = this;
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) return false;
		if(this.__dispatching.get(type) == true && this.__newEventMap.exists(type)) return this.__newEventMap.get(type).length > 0; else return this.__eventMap.exists(type);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		if(this.__eventMap == null) return;
		var list = this.__eventMap.get(type);
		if(list == null) return;
		var dispatching = this.__dispatching.get(type) == true;
		if(dispatching) {
			if(!this.__newEventMap.exists(type)) {
				var _this = this.__eventMap.get(type);
				list = _this.slice();
				this.__newEventMap.set(type,list);
			} else list = this.__newEventMap.get(type);
		}
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,useCapture)) {
				list.splice(i,1);
				break;
			}
		}
		if(!dispatching) {
			if(list.length == 0) this.__eventMap.remove(type);
			if(!this.__eventMap.iterator().hasNext()) {
				this.__eventMap = null;
				this.__newEventMap = null;
			}
		}
	}
	,toString: function() {
		var full = Type.getClassName(js_Boot.getClass(this));
		var $short = full.split(".").pop();
		return "[object " + $short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) return false;
		var type = event.type;
		var list;
		if(this.__dispatching.get(type) == true) {
			list = this.__newEventMap.get(type);
			if(list == null) return false;
			list = list.slice();
		} else {
			list = this.__eventMap.get(type);
			if(list == null) return false;
			this.__dispatching.set(type,true);
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) event.target = this.__targetDispatcher; else event.target = this;
		}
		event.currentTarget = this;
		var capture = event.eventPhase == openfl_events_EventPhase.CAPTURING_PHASE;
		var index = 0;
		var listener;
		while(index < list.length) {
			listener = list[index];
			if(listener.useCapture == capture) {
				listener.callback(event);
				if(event.__isCanceledNow) break;
			}
			if(listener == list[index]) index++;
		}
		if(this.__newEventMap != null && this.__newEventMap.exists(type)) {
			var list1 = this.__newEventMap.get(type);
			if(list1.length > 0) this.__eventMap.set(type,list1); else this.__eventMap.remove(type);
			if(!this.__eventMap.iterator().hasNext()) {
				this.__eventMap = null;
				this.__newEventMap = null;
			} else this.__newEventMap.remove(type);
		}
		this.__dispatching.set(event.type,false);
		return true;
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl_display_IBitmapDrawable.prototype = {
	__worldTransform: null
	,__worldColorTransform: null
	,__blendMode: null
	,__cacheAsBitmap: null
	,__renderCairo: null
	,__renderCairoMask: null
	,__renderCanvas: null
	,__renderCanvasMask: null
	,__renderGL: null
	,__updateChildren: null
	,__updateTransforms: null
	,__updateMask: null
	,__class__: openfl_display_IBitmapDrawable
};
var openfl_display_DisplayObject = function() {
	this.__cacheAsBitmapSmooth = true;
	this.__cacheAsBitmap = false;
	this.__maskCached = false;
	openfl_events_EventDispatcher.call(this);
	this.__alpha = 1;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__renderTransform = new openfl_geom_Matrix();
	this.__offset = new openfl_geom_Point();
	this.__worldOffset = new openfl_geom_Point();
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	blendMode: null
	,cacheAsBitmapBounds: null
	,loaderInfo: null
	,mouseX: null
	,mouseY: null
	,opaqueBackground: null
	,parent: null
	,root: null
	,scale9Grid: null
	,shader: null
	,stage: null
	,__renderTransform: null
	,__worldColorTransform: null
	,__worldOffset: null
	,__worldTransform: null
	,__alpha: null
	,__blendMode: null
	,__cairo: null
	,__children: null
	,__filters: null
	,__graphics: null
	,__interactive: null
	,__isMask: null
	,__mask: null
	,__maskGraphics: null
	,__maskCached: null
	,__name: null
	,__objectTransform: null
	,__offset: null
	,__renderable: null
	,__renderDirty: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scrollRect: null
	,__shader: null
	,__transform: null
	,__transformDirty: null
	,__visible: null
	,__worldAlpha: null
	,__worldAlphaChanged: null
	,__worldClip: null
	,__worldClipChanged: null
	,__worldTransformCache: null
	,__worldTransformChanged: null
	,__worldVisible: null
	,__worldVisibleChanged: null
	,__worldZ: null
	,__cacheAsBitmap: null
	,__cacheAsBitmapMatrix: null
	,__cacheAsBitmapSmooth: null
	,__forceCacheAsBitmap: null
	,__updateCachedBitmap: null
	,__cachedBitmap: null
	,__cachedBitmapBounds: null
	,__cachedFilterBounds: null
	,__cacheGLMatrix: null
	,__updateFilters: null
	,__canvas: null
	,__context: null
	,__style: null
	,getBounds: function(targetCoordinateSpace) {
		var matrix;
		if(targetCoordinateSpace != null) {
			matrix = this.__getWorldTransform().clone();
			matrix.concat(targetCoordinateSpace.__getWorldTransform().clone().invert());
		} else {
			matrix = openfl_geom_Matrix.__temp;
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		pos = pos.clone();
		this.__getWorldTransform().__transformInversePoint(pos);
		return pos;
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		if(this.parent != null) {
			var bounds = new openfl_geom_Rectangle();
			this.__getBounds(bounds,this.__getWorldTransform());
			return bounds.containsPoint(new openfl_geom_Point(x,y));
		}
		return false;
	}
	,localToGlobal: function(point) {
		return this.__getWorldTransform().transformPoint(point);
	}
	,__broadcast: function(event,notifyChilden) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCanceled) return true;
			return result;
		}
		return false;
	}
	,__dispatchEvent: function(event) {
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCanceled) return true;
		if(event.bubbles && this.parent != null && this.parent != this) {
			event.eventPhase = openfl_events_EventPhase.BUBBLING_PHASE;
			if(event.target == null) event.target = this;
			this.parent.__dispatchEvent(event);
		}
		return result;
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) this.__graphics.__getBounds(rect,matrix);
	}
	,__getCursor: function() {
		return null;
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getBounds(rect,this.__transform);
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect == null) this.__getBounds(rect,matrix); else {
			var r = openfl_geom_Rectangle.__temp;
			r.copyFrom(this.__scrollRect);
			r.__transform(r,matrix);
			rect.__expand(matrix.tx,matrix.ty,r.width,r.height);
		}
	}
	,__getWorldTransform: function() {
		if(this.__transformDirty || openfl_display_DisplayObject.__worldTransformDirty > 0) {
			var list = [];
			var current = this;
			var transformDirty = this.__transformDirty;
			if(this.parent == null) {
				if(transformDirty) this.__update(true,false);
			} else while(current.parent != null) {
				list.push(current);
				current = current.parent;
				if(current.__transformDirty) transformDirty = true;
			}
			if(transformDirty) {
				var i = list.length;
				while(--i >= 0) list[i].__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.__graphics != null) {
			if(!hitObject.get_visible() || this.__isMask) return false;
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getWorldTransform())) {
				if(stack != null && !interactiveOnly) stack.push(hitObject);
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getWorldTransform())) return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoShape.render(this,renderSession);
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
	}
	,__renderCanvas: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasShape.render(this,renderSession);
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
	}
	,__renderDOM: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_dom_DOMShape.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.__cacheAsBitmap) {
			this.__cacheGL(renderSession);
			return;
		}
		if(this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
		if(this.__graphics != null) {
			if(this.__graphics.__hardware) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this,renderSession); else {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics,renderSession);
				openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession);
			}
		}
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
		if(this.__scrollRect != null) renderSession.maskManager.popRect();
	}
	,__drawGraphicsGL: function(renderSession) {
		if(this.__graphics != null) {
			if(this.__graphics.__hardware) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this,renderSession); else {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics,renderSession);
				openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession);
			}
		}
	}
	,__preRenderGL: function(renderSession) {
		if(this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
	}
	,__postRenderGL: function(renderSession) {
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
		if(this.__scrollRect != null) renderSession.maskManager.popRect();
	}
	,__cacheGL: function(renderSession) {
		var hasCacheMatrix = this.__cacheAsBitmapMatrix != null;
		var x = this.__cachedBitmapBounds.x;
		var y = this.__cachedBitmapBounds.y;
		var w = this.__cachedBitmapBounds.width;
		var h = this.__cachedBitmapBounds.height;
		if(this.__cacheGLMatrix == null) this.__cacheGLMatrix = new openfl_geom_Matrix();
		if(hasCacheMatrix) {
			var bmpBounds = openfl_geom_Rectangle.__temp;
			this.__cachedBitmapBounds.__transform(bmpBounds,this.__cacheAsBitmapMatrix);
			x = bmpBounds.x;
			y = bmpBounds.y;
			w = bmpBounds.width;
			h = bmpBounds.height;
			this.__cacheGLMatrix = this.__cacheAsBitmapMatrix.clone();
		} else this.__cacheGLMatrix.identity();
		if(w <= 0 && h <= 0) throw new js__$Boot_HaxeError("Error creating a cached bitmap. The texture size is " + w + "x" + h);
		if(this.__updateCachedBitmap || this.__updateFilters) {
			if(this.__cachedFilterBounds != null) {
				w += Math.abs(this.__cachedFilterBounds.x) + Math.abs(this.__cachedFilterBounds.width);
				h += Math.abs(this.__cachedFilterBounds.y) + Math.abs(this.__cachedFilterBounds.height);
			}
			if(this.__cachedBitmap == null) this.__cachedBitmap = openfl_display_BitmapData.__asRenderTexture();
			this.__cachedBitmap.__resize(Math.ceil(w),Math.ceil(h));
			var m = this.__cacheGLMatrix.clone();
			m.translate(-x,-y);
			var shader = this.__shader;
			this.__shader = null;
			this.__cachedBitmap.__drawGL(renderSession,this,m,null,null,null,true,false,true);
			this.__shader = shader;
			this.__updateCachedBitmap = false;
		}
		if(this.__updateFilters) {
			openfl_filters_BitmapFilter.__applyFilters(this.__filters,renderSession,this.__cachedBitmap,this.__cachedBitmap,null,null);
			this.__updateFilters = false;
		}
		this.__cacheGLMatrix.invert();
		this.__cacheGLMatrix.__translateTransformed(x,y);
		this.__cacheGLMatrix.concat(this.__renderTransform);
		this.__cacheGLMatrix.translate(this.__offset.x,this.__offset.y);
		renderSession.spriteBatch.renderBitmapData(this.__cachedBitmap,this.__cacheAsBitmapSmooth,this.__cacheGLMatrix,this.__worldColorTransform,this.__worldAlpha,this.blendMode,this.__shader,openfl_display_PixelSnapping.ALWAYS);
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) {
				if(this.stage.get_focus() == this) this.stage.set_focus(null);
				this.dispatchEvent(new openfl_events_Event(openfl_events_Event.REMOVED_FROM_STAGE,false,false));
			}
			this.stage = stage;
			if(stage != null) this.dispatchEvent(new openfl_events_Event(openfl_events_Event.ADDED_TO_STAGE,false,false));
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__updateCachedBitmap = true;
			this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl_display_DisplayObject.__worldTransformDirty++;
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		this.__updateTransforms();
		if(this.parent != null && this.__isMask) this.__maskCached = false;
		if(updateChildren && this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
		if(!transformOnly && this.__mask != null && !this.__mask.__maskCached) {
			if(this.__maskGraphics == null) this.__maskGraphics = new openfl_display_Graphics();
			this.__maskGraphics.clear();
			this.__mask.__update(true,true,this.__maskGraphics);
			this.__mask.__maskCached = true;
		}
		if(maskGraphics != null) this.__updateMask(maskGraphics);
		if(!transformOnly && this.__cacheAsBitmap) {
			if(this.__updateCachedBitmap || this.__updateFilters) {
				if(this.__cachedBitmapBounds == null) this.__cachedBitmapBounds = new openfl_geom_Rectangle();
				if(this.cacheAsBitmapBounds != null) this.__cachedBitmapBounds.copyFrom(this.cacheAsBitmapBounds); else {
					this.__cachedBitmapBounds.setEmpty();
					this.__getRenderBounds(this.__cachedBitmapBounds,openfl_geom_Matrix.__identity);
				}
				if(this.__filters != null) {
					if(this.__cachedFilterBounds == null) this.__cachedFilterBounds = new openfl_geom_Rectangle();
					this.__cachedFilterBounds.setEmpty();
					openfl_filters_BitmapFilter.__expandBounds(this.__filters,this.__cachedFilterBounds,openfl_geom_Matrix.__identity);
					this.__cachedBitmapBounds.x += this.__cachedFilterBounds.x;
					this.__cachedBitmapBounds.y += this.__cachedFilterBounds.y;
				}
			}
		}
		if(!transformOnly) {
			if(!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) this.__worldColorTransform = this.get_transform().get_colorTransform().__clone();
			if(this.parent != null) {
				this.__worldAlpha = this.get_alpha() * this.parent.__worldAlpha;
				this.__worldColorTransform.__combine(this.parent.__worldColorTransform);
				if(this.blendMode == null || this.blendMode == openfl_display_BlendMode.NORMAL) this.__blendMode = this.parent.__blendMode;
				if(this.shader == null) this.__shader = this.parent.__shader;
			} else this.__worldAlpha = this.get_alpha();
			if(updateChildren && this.__renderDirty) this.__renderDirty = false;
		}
	}
	,__updateChildren: function(transformOnly) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(!this.__renderable && !this.__isMask) return;
		this.__worldAlpha = this.get_alpha();
		if(this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
	}
	,__updateMask: function(maskGraphics) {
		if(this.__graphics != null) {
			maskGraphics.__commands.overrideMatrix(this.__worldTransform);
			maskGraphics.__commands.append(this.__graphics.__commands);
			maskGraphics.set___dirty(true);
			maskGraphics.__visible = true;
			if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl_geom_Rectangle();
			this.__graphics.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		var overrided = overrideTransform != null;
		var local;
		if(overrided) local = new openfl_geom_Matrix(overrideTransform.a,overrideTransform.b,overrideTransform.c,overrideTransform.d,overrideTransform.tx,overrideTransform.ty); else local = this.__transform;
		if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
		if(!overrided && this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			this.__worldTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
			this.__worldTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
			this.__worldTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
			this.__worldTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
			this.__worldTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			this.__worldTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
			this.__worldOffset.copyFrom(this.parent.__worldOffset);
		} else {
			this.__worldTransform.copyFrom(local);
			this.__worldOffset.setTo(0,0);
		}
		if(this.__scrollRect != null) {
			this.__offset = this.__worldTransform.deltaTransformPoint(this.__scrollRect.get_topLeft());
			this.__worldOffset.offset(this.__offset.x,this.__offset.y);
		} else this.__offset.setTo(0,0);
		this.__renderTransform.copyFrom(this.__worldTransform);
		this.__renderTransform.translate(-this.__worldOffset.x,-this.__worldOffset.y);
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) value = 1.0;
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__alpha = value;
	}
	,set_blendMode: function(value) {
		this.__blendMode = value;
		return this.blendMode = value;
	}
	,set_shader: function(value) {
		this.__shader = value;
		return this.shader = value;
	}
	,get_cacheAsBitmap: function() {
		return this.__cacheAsBitmap;
	}
	,set_cacheAsBitmap: function(value) {
		if(!this.__renderDirty) {
			this.__updateCachedBitmap = true;
			this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return this.__forceCacheAsBitmap?this.__cacheAsBitmap = true:this.__cacheAsBitmap = value;
	}
	,get_cacheAsBitmapMatrix: function() {
		return this.__cacheAsBitmapMatrix;
	}
	,set_cacheAsBitmapMatrix: function(value) {
		if(!this.__renderDirty) {
			this.__updateCachedBitmap = true;
			this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return this.__cacheAsBitmapMatrix = new openfl_geom_Matrix(value.a,value.b,value.c,value.d,value.tx,value.ty);
	}
	,get_cacheAsBitmapSmooth: function() {
		return this.__cacheAsBitmapSmooth;
	}
	,set_cacheAsBitmapSmooth: function(value) {
		return this.__cacheAsBitmapSmooth = value;
	}
	,get_filters: function() {
		if(this.__filters == null) return []; else return this.__filters.slice();
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) {
			this.__filters = value;
			this.__forceCacheAsBitmap = true;
			this.__cacheAsBitmap = true;
			this.__updateFilters = true;
		} else {
			this.__filters = null;
			this.__forceCacheAsBitmap = false;
			this.__cacheAsBitmap = false;
			this.__updateFilters = false;
		}
		if(!this.__renderDirty) {
			this.__updateCachedBitmap = true;
			this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return value;
	}
	,get_height: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		return bounds.height;
	}
	,set_height: function(value) {
		var bounds = new openfl_geom_Rectangle();
		var matrix = openfl_geom_Matrix.__temp;
		matrix.identity();
		this.__getBounds(bounds,matrix);
		if(value != bounds.height) this.set_scaleY(value / bounds.height); else this.set_scaleY(1);
		return value;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value != this.__mask) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskCached = false;
			this.__mask.__setTransformDirty();
			this.__mask.__setRenderDirty();
			this.__maskGraphics = null;
		}
		if(value != null) value.__isMask = true;
		return this.__mask = value;
	}
	,get_mouseX: function() {
		var mouseX;
		if(this.stage != null) mouseX = this.stage.__mouseX; else mouseX = openfl_Lib.current.stage.__mouseX;
		var mouseY;
		if(this.stage != null) mouseY = this.stage.__mouseY; else mouseY = openfl_Lib.current.stage.__mouseY;
		return this.__getWorldTransform().__transformInverseX(mouseX,mouseY);
	}
	,get_mouseY: function() {
		var mouseX;
		if(this.stage != null) mouseX = this.stage.__mouseX; else mouseX = openfl_Lib.current.stage.__mouseX;
		var mouseY;
		if(this.stage != null) mouseY = this.stage.__mouseY; else mouseY = openfl_Lib.current.stage.__mouseY;
		return this.__getWorldTransform().__transformInverseY(mouseX,mouseY);
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) return openfl_Lib.current;
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			var __scaleX = this.get_scaleX();
			var __scaleY = this.get_scaleY();
			this.__transform.a = this.__rotationCosine * __scaleX;
			this.__transform.b = this.__rotationSine * __scaleX;
			this.__transform.c = -this.__rotationSine * __scaleY;
			this.__transform.d = this.__rotationCosine * __scaleY;
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return value;
	}
	,get_scaleX: function() {
		if(this.__transform.b == 0) return this.__transform.a; else return Math.sqrt(this.__transform.a * this.__transform.a + this.__transform.b * this.__transform.b);
	}
	,set_scaleX: function(value) {
		if(this.__transform.c == 0) {
			if(value != this.__transform.a) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.a = value;
		} else {
			var a = this.__rotationCosine * value;
			var b = this.__rotationSine * value;
			if(this.__transform.a != a || this.__transform.b != b) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.a = a;
			this.__transform.b = b;
		}
		return value;
	}
	,get_scaleY: function() {
		if(this.__transform.c == 0) return this.__transform.d; else return Math.sqrt(this.__transform.c * this.__transform.c + this.__transform.d * this.__transform.d);
	}
	,set_scaleY: function(value) {
		if(this.__transform.c == 0) {
			if(value != this.__transform.d) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.d = value;
		} else {
			var c = -this.__rotationSine * value;
			var d = this.__rotationCosine * value;
			if(this.__transform.d != d || this.__transform.c != c) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.c = c;
			this.__transform.d = d;
		}
		return value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) return null;
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		if(value != this.__scrollRect) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scrollRect = value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) this.__objectTransform = new openfl_geom_Transform(this);
		return this.__objectTransform;
	}
	,set_transform: function(value) {
		if(value == null) throw new js__$Boot_HaxeError(new openfl_errors_TypeError("Parameter transform must be non-null."));
		if(this.__objectTransform == null) this.__objectTransform = new openfl_geom_Transform(this);
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl_display_DisplayObject.__worldTransformDirty++;
		}
		this.__objectTransform.set_matrix(value.get_matrix());
		this.__objectTransform.set_colorTransform(value.get_colorTransform().__clone());
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		return bounds.width;
	}
	,set_width: function(value) {
		var bounds = new openfl_geom_Rectangle();
		var matrix = openfl_geom_Matrix.__temp;
		matrix.identity();
		this.__getBounds(bounds,matrix);
		if(value != bounds.width) this.set_scaleX(value / bounds.width); else this.set_scaleX(1);
		return value;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_shader:"set_shader",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_cacheAsBitmapSmooth:"set_cacheAsBitmapSmooth",get_cacheAsBitmapSmooth:"get_cacheAsBitmapSmooth",set_cacheAsBitmapMatrix:"set_cacheAsBitmapMatrix",get_cacheAsBitmapMatrix:"get_cacheAsBitmapMatrix",set_cacheAsBitmap:"set_cacheAsBitmap",get_cacheAsBitmap:"get_cacheAsBitmap",set_blendMode:"set_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = false;
	this.tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	doubleClickEnabled: null
	,focusRect: null
	,mouseEnabled: null
	,needsSoftKeyboard: null
	,softKeyboardInputAreaOfInterest: null
	,tabIndex: null
	,__tabEnabled: null
	,requestSoftKeyboard: function() {
		openfl_Lib.notImplemented("InteractiveObject.requestSoftKeyboard");
		return false;
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) this.parent.__getInteractive(stack);
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) return false;
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,get_tabEnabled: function() {
		return this.__tabEnabled;
	}
	,set_tabEnabled: function(value) {
		return this.__tabEnabled = value;
	}
	,__class__: openfl_display_InteractiveObject
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_tabEnabled:"set_tabEnabled",get_tabEnabled:"get_tabEnabled"})
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = [];
	this.__removedChildren = [];
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	mouseChildren: null
	,numChildren: null
	,tabChildren: null
	,__removedChildren: null
	,addChild: function(child) {
		if(child != null) {
			if(child.parent != null) child.parent.removeChild(child);
			this.__children.push(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__updateCachedBitmap = true;
				child.__updateFilters = child.get_filters() != null && child.get_filters().length > 0;
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl_events_Event(openfl_events_Event.ADDED,true);
			event.target = child;
			child.__dispatchEvent(event);
		}
		return child;
	}
	,addChildAt: function(child,index) {
		if(index > this.__children.length || index < 0) throw new js__$Boot_HaxeError("Invalid index position " + index);
		if(child.parent == this) HxOverrides.remove(this.__children,child); else {
			if(child.parent != null) child.parent.removeChild(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__updateCachedBitmap = true;
				child.__updateFilters = child.get_filters() != null && child.get_filters().length > 0;
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl_events_Event(openfl_events_Event.ADDED,true);
			event.target = child;
			child.__dispatchEvent(event);
		}
		this.__children.splice(index,0,child);
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.__children[index];
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) return child;
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == child) return i;
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		var stack = [];
		this.__hitTest(point.x,point.y,false,stack,false,this);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			child.__dispatchEvent(new openfl_events_Event(openfl_events_Event.REMOVED,true));
			if(this.stage != null) child.__setStageReference(null);
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__updateCachedBitmap = true;
				child.__updateFilters = child.get_filters() != null && child.get_filters().length > 0;
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.removeChild(this.__children[index]);
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) return;
		}
		if(beginIndex > this.__children.length - 1) return; else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) throw new js__$Boot_HaxeError(new openfl_errors_RangeError("The supplied index is out of bounds."));
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			numRemovals--;
		}
	}
	,resolve: function(fieldName) {
		if(this.__children == null) return null;
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == fieldName) return child;
		}
		return null;
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = HxOverrides.indexOf(this.__children,child1,0);
			var index2 = HxOverrides.indexOf(this.__children,child2,0);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
		}
	}
	,swapChildrenAt: function(index1,index2) {
		var swap = this.__children[index1];
		this.__children[index1] = this.__children[index2];
		this.__children[index2] = swap;
		swap = null;
	}
	,__broadcast: function(event,notifyChilden) {
		if(event.target == null) event.target = this;
		var result = openfl_display_InteractiveObject.prototype.__broadcast.call(this,event,notifyChilden);
		if(!event.__isCanceled && notifyChilden) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__broadcast(event,true);
				if(event.__isCanceled) return true;
			}
		}
		return result;
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) return;
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_scaleX() == 0 || child.get_scaleY() == 0) continue;
			child.__getBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) return;
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_scaleX() == 0 || child.get_scaleY() == 0 || child.__isMask) continue;
			child.__getRenderBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) return false;
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
		if(this.get_scrollRect() != null && !this.get_scrollRect().containsPoint(this.globalToLocal(new openfl_geom_Point(x,y)))) return false;
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i])) {
					if(stack != null) stack.push(hitObject);
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i])) {
							hitTest = true;
							if(interactive) break;
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,hitObject);
					return true;
				}
			}
		} else while(--i >= 0) this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i]);
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) return true;
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
		if(this.get_scrollRect() != null) renderSession.maskManager.pushRect(this.get_scrollRect(),this.__worldTransform);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairo(renderSession);
		}
		if(this.__removedChildren.length > 0) this.__removedChildren.splice(0,this.__removedChildren.length);
		if(this.__mask != null) renderSession.maskManager.popMask();
		if(this.get_scrollRect() != null) renderSession.maskManager.popRect();
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairoMask(renderSession);
		}
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		if(this.get_scrollRect() != null) renderSession.maskManager.pushRect(this.get_scrollRect(),this.__worldTransform);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCanvas(renderSession);
		}
		if(this.__removedChildren.length > 0) this.__removedChildren.splice(0,this.__removedChildren.length);
		if(this.__mask != null) renderSession.maskManager.popMask();
		if(this.get_scrollRect() != null) renderSession.maskManager.popRect();
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
	}
	,__renderDOM: function(renderSession) {
		openfl_display_InteractiveObject.prototype.__renderDOM.call(this,renderSession);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderDOM(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.length) {
			var orphan = _g11[_g2];
			++_g2;
			if(orphan.stage == null) orphan.__renderDOM(renderSession);
		}
		if(this.__removedChildren.length > 0) this.__removedChildren.splice(0,this.__removedChildren.length);
		if(this.__mask != null) renderSession.maskManager.popMask();
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.__cacheAsBitmap) {
			this.__cacheGL(renderSession);
			return;
		}
		if(this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
		if(this.__graphics != null) {
			if(this.__graphics.__hardware) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this,renderSession); else {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics,renderSession);
				openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession);
			}
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderGL(renderSession);
		}
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
		if(this.__scrollRect != null) renderSession.maskManager.popRect();
		if(this.__removedChildren.length > 0) this.__removedChildren.splice(0,this.__removedChildren.length);
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) this.__dispatchEvent(new openfl_events_Event(openfl_events_Event.REMOVED_FROM_STAGE,false,false));
			this.stage = stage;
			if(stage != null) this.__dispatchEvent(new openfl_events_Event(openfl_events_Event.ADDED_TO_STAGE,false,false));
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setStageReference(stage);
				}
			}
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(!this.__renderable && !this.__isMask) return;
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__update(transformOnly,true);
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
	this.loaderInfo = openfl_display_LoaderInfo.create(null);
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = ["openfl","display","Sprite"];
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	buttonMode: null
	,graphics: null
	,hitArea: null
	,useHandCursor: null
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
		if(this.stage != null) this.stage.__startDrag(this,lockCenter,bounds);
	}
	,stopDrag: function() {
		if(this.stage != null) this.stage.__stopDrag(this);
	}
	,__getCursor: function() {
		if(this.buttonMode && this.useHandCursor) return lime_ui_MouseCursor.POINTER; else return null;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled && this.hitArea.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				stack[stack.length - 1] = hitObject;
				return true;
			}
		} else {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) return false;
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
			if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject)) return interactiveOnly; else if((!interactiveOnly || this.mouseEnabled) && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getWorldTransform())) {
				if(stack != null) stack.push(hitObject);
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) return true; else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getWorldTransform())) return true;
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics();
			this.__graphics.__owner = this;
		}
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		return this.__tabEnabled || this.buttonMode;
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics"})
});
var MainOpenflGame = function() {
	this.startFullscreen = false;
	this.skipSplash = false;
	this.framerate = 60;
	this.zoom = -1;
	this.initialState = PlayState;
	this.gameHeight = 480;
	this.gameWidth = 640;
	openfl_display_Sprite.call(this);
	this.stage.addChild(this);
	this.engine = new com_babylonhx_Engine(this.stage,false);
	this.scene = new com_babylonhx_Scene(this.engine);
	this.engine.width = this.stage.stageWidth;
	this.engine.height = this.stage.stageHeight;
	this.stage.addEventListener(openfl_events_Event.RESIZE,$bind(this,this.resize));
	this.stage.addEventListener(openfl_events_Event.ENTER_FRAME,$bind(this,this.update));
	var ground = com_babylonhx_mesh_Mesh.CreateGround("ground1",0.1,0.1,1,this.scene,false);
	ground.enableEdgesRendering();
	this.createDemo();
};
$hxClasses["MainOpenflGame"] = MainOpenflGame;
MainOpenflGame.__name__ = ["MainOpenflGame"];
MainOpenflGame.__super__ = openfl_display_Sprite;
MainOpenflGame.prototype = $extend(openfl_display_Sprite.prototype,{
	scene: null
	,engine: null
	,gameWidth: null
	,gameHeight: null
	,initialState: null
	,zoom: null
	,framerate: null
	,skipSplash: null
	,startFullscreen: null
	,setupGame: function() {
		var stageWidth = this.stage.stageWidth;
		var stageHeight = this.stage.stageHeight;
		if(this.zoom == -1) {
			var ratioX = stageWidth / this.gameWidth;
			var ratioY = stageHeight / this.gameHeight;
			this.zoom = Math.min(ratioX,ratioY);
			this.gameWidth = Math.ceil(stageWidth / this.zoom);
			this.gameHeight = Math.ceil(stageHeight / this.zoom);
		}
		this.stage.addChild(new flixel_FlxGame(this.gameWidth,this.gameHeight,this.initialState,this.zoom,this.framerate,this.framerate,this.skipSplash,this.startFullscreen));
	}
	,createDemo: function() {
		new samples_BasicScene(this.scene);
		this.setupGame();
		this.stage.addChild(new openfl_display_FPS(10,10,16777215));
	}
	,resize: function(e) {
		this.engine.width = this.stage.stageWidth;
		this.engine.height = this.stage.stageHeight;
	}
	,onKeyDown: function(e) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.keyDown;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(e.charCode);
		}
	}
	,onKeyUp: function(e) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.keyUp;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(e.charCode);
		}
	}
	,onMouseDown: function(e) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.mouseDown;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(e.localX,e.localY,0);
		}
	}
	,onMouseMove: function(e) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.mouseMove;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(e.localX,e.localY);
		}
	}
	,onMouseUp: function(e) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.mouseUp;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(e.localX,e.localY,0);
		}
	}
	,onMouseWheel: function(e) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.mouseWheel;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(e.delta);
		}
	}
	,onTouchStart: function(e) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.touchDown;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(e.localX,e.localY,0);
		}
	}
	,onTouchEnd: function(e) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.touchUp;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(e.localX,e.localY,0);
		}
	}
	,onTouchMove: function(e) {
		var _g = 0;
		var _g1 = com_babylonhx_Engine.touchMove;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(e.localX,e.localY);
		}
	}
	,update: function(e) {
		this.engine._renderLoop();
	}
	,__class__: MainOpenflGame
});
var DocumentClass = function() {
	openfl_Lib.current.addChild(this);
	MainOpenflGame.call(this);
	this.dispatchEvent(new openfl_events_Event(openfl_events_Event.ADDED_TO_STAGE,false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = MainOpenflGame;
DocumentClass.prototype = $extend(MainOpenflGame.prototype,{
	__class__: DocumentClass
});
var lime_AssetLibrary = function() {
	this.onChange = new lime_app_Event_$Void_$Void();
};
$hxClasses["lime.AssetLibrary"] = lime_AssetLibrary;
lime_AssetLibrary.__name__ = ["lime","AssetLibrary"];
lime_AssetLibrary.prototype = {
	onChange: null
	,exists: function(id,type) {
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		return null;
	}
	,getFont: function(id) {
		return null;
	}
	,getImage: function(id) {
		return null;
	}
	,getPath: function(id) {
		return null;
	}
	,getText: function(id) {
		var bytes = this.getBytes(id);
		if(bytes == null) return null; else return bytes.getString(0,bytes.length);
	}
	,isLocal: function(id,type) {
		return true;
	}
	,list: function(type) {
		return null;
	}
	,load: function() {
		var _g = this;
		return new lime_app_Future(function() {
			return _g;
		});
	}
	,loadAudioBuffer: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getAudioBuffer(id);
		});
	}
	,loadBytes: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getBytes(id);
		});
	}
	,loadFont: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getFont(id);
		});
	}
	,loadImage: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getImage(id);
		});
	}
	,loadText: function(id) {
		return this.loadBytes(id).then(function(bytes) {
			return new lime_app_Future(function() {
				if(bytes == null) return null; else return bytes.getString(0,bytes.length);
			});
		});
	}
	,unload: function() {
	}
	,__class__: lime_AssetLibrary
};
var DefaultAssetLibrary = function() {
	this.type = new haxe_ds_StringMap();
	this.path = new haxe_ds_StringMap();
	this.className = new haxe_ds_StringMap();
	lime_AssetLibrary.call(this);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$nokiafc22_$ttf);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$arial_$ttf);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$opensansregular_$ttf);
	var id;
	id = "../assets/sounds/beep.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "../assets/sounds/flixel.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "../assets/sounds/beep.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "../assets/sounds/flixel.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "../assets/fonts/nokiafc22.ttf";
	this.className.set(id,_$_$ASSET_$_$assets_$fonts_$nokiafc22_$ttf);
	this.type.set(id,"FONT");
	id = "../assets/fonts/arial.ttf";
	this.className.set(id,_$_$ASSET_$_$assets_$fonts_$arial_$ttf);
	this.type.set(id,"FONT");
	id = "../assets/fonts/OpenSans-Semibold-webfont.eot";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "../assets/fonts/OpenSansRegular.eot";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "../assets/fonts/OpenSansRegular.ttf";
	this.className.set(id,_$_$ASSET_$_$assets_$fonts_$opensansregular_$ttf);
	this.type.set(id,"FONT");
	id = "../assets/fonts/OpenSansRegular.woff";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "../assets/img/amiga.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/cloud.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/crate.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/DiffuseMap.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/disp2.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/flare.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/grass.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/graygrad.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/ground.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/heightmap.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/heightMap.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/heightmap2.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/lens4.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/lens5.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/materialspack/dirty.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/materialspack/grassTop.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/materialspack/lava.gif";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/materialspack/stone.mat";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "../assets/img/materialspack/stone.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/misc.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/nebula.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/NormalMap.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/refMap.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/rust.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/night_nx.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/night_ny.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/night_nz.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/night_px.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/night_py.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/night_pz.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/README.TXT";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "../assets/img/skybox/Sky_FantasySky_Fire_Cam_nx.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/Sky_FantasySky_Fire_Cam_ny.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/Sky_FantasySky_Fire_Cam_nz.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/Sky_FantasySky_Fire_Cam_px.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/Sky_FantasySky_Fire_Cam_py.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/Sky_FantasySky_Fire_Cam_pz.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/Sky_Space_Nebula_DeepBlack_nx.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/Sky_Space_Nebula_DeepBlack_ny.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/Sky_Space_Nebula_DeepBlack_nz.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/Sky_Space_Nebula_DeepBlack_px.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/Sky_Space_Nebula_DeepBlack_py.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/Sky_Space_Nebula_DeepBlack_pz.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/skybox_nx.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/skybox_nx.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/skybox_ny.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/skybox_ny.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/skybox_ny_.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/skybox_ny__.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/skybox_nz.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/skybox_nz.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/skybox_px.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/skybox_px.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/skybox_py.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/skybox_py.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/skybox_pz.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/skybox_pz.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/snow_nx.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/snow_ny.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/snow_nz.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/snow_px.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/snow_py.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/snow_pz.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/treeskin.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/TropicalSunnyDay_nx.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/TropicalSunnyDay_ny.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/TropicalSunnyDay_nz.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/TropicalSunnyDay_px.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/TropicalSunnyDay_py.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/skybox/TropicalSunnyDay_pz.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/sun.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/terrain.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/terrain_.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/tree.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/treeskin (1).jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/img/wood.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "../assets/models/alientree.mtl";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "../assets/models/alientree.obj";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "../assets/models/shadows.babylon";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "../assets/models/skull.babylon";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "../assets/models/SSAOcat.babylon";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "../assets/models/star.ply";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "../assets/models/suzanne.obj";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	var assetsPrefix = null;
	if(ApplicationMain.config != null && Object.prototype.hasOwnProperty.call(ApplicationMain.config,"assetsPrefix")) assetsPrefix = ApplicationMain.config.assetsPrefix;
	if(assetsPrefix != null) {
		var $it0 = this.path.keys();
		while( $it0.hasNext() ) {
			var k = $it0.next();
			var value = assetsPrefix + this.path.get(k);
			this.path.set(k,value);
		}
	}
};
$hxClasses["DefaultAssetLibrary"] = DefaultAssetLibrary;
DefaultAssetLibrary.__name__ = ["DefaultAssetLibrary"];
DefaultAssetLibrary.__super__ = lime_AssetLibrary;
DefaultAssetLibrary.prototype = $extend(lime_AssetLibrary.prototype,{
	className: null
	,path: null
	,type: null
	,lastModified: null
	,timer: null
	,exists: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		var assetType = this.type.get(id);
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) return true;
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") return true;
		}
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		var loader;
		var key = this.path.get(id);
		loader = lime_app_Preloader.loaders.get(key);
		if(loader == null) return null;
		var bytes = loader.bytes;
		if(bytes != null) return bytes; else return null;
	}
	,getFont: function(id) {
		return js_Boot.__cast(Type.createInstance(this.className.get(id),[]) , lime_text_Font);
	}
	,getImage: function(id) {
		return lime_graphics_Image.fromImageElement((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime_app_Preloader.images.get(key);
			return $r;
		}(this)));
	}
	,getPath: function(id) {
		return this.path.get(id);
	}
	,getText: function(id) {
		var loader;
		var key = this.path.get(id);
		loader = lime_app_Preloader.loaders.get(key);
		if(loader == null) return null;
		var bytes = loader.bytes;
		if(bytes != null) return bytes.getString(0,bytes.length); else return null;
	}
	,isLocal: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		return true;
	}
	,list: function(type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		var items = [];
		var $it0 = this.type.keys();
		while( $it0.hasNext() ) {
			var id = $it0.next();
			if(requestedType == null || this.exists(id,type)) items.push(id);
		}
		return items;
	}
	,loadAudioBuffer: function(id) {
		var _g = this;
		var promise = new lime_app_Promise();
		promise.completeWith(new lime_app_Future(function() {
			return _g.getAudioBuffer(id);
		}));
		return promise.future;
	}
	,loadBytes: function(id) {
		var promise = new lime_app_Promise();
		if(this.path.exists(id)) {
			var request = new lime_net_HTTPRequest();
			promise.completeWith(request.load(this.path.get(id) + "?" + lime_Assets.cache.version));
		} else promise.complete(this.getBytes(id));
		return promise.future;
	}
	,loadImage: function(id) {
		var promise = new lime_app_Promise();
		if(this.path.exists(id)) {
			var image = new Image();
			image.onload = function(_) {
				promise.complete(lime_graphics_Image.fromImageElement(image));
			};
			image.onerror = $bind(promise,promise.error);
			image.src = this.path.get(id) + "?" + lime_Assets.cache.version;
		} else promise.complete(this.getImage(id));
		return promise.future;
	}
	,loadText: function(id) {
		var promise = new lime_app_Promise();
		if(this.path.exists(id)) {
			var request = new lime_net_HTTPRequest();
			var future = request.load(this.path.get(id) + "?" + lime_Assets.cache.version);
			future.onProgress(function(progress) {
				promise.progress(progress);
			});
			future.onError(function(msg) {
				promise.error(msg);
			});
			future.onComplete(function(bytes) {
				promise.complete(bytes.getString(0,bytes.length));
			});
		} else promise.complete(this.getText(id));
		return promise.future;
	}
	,__class__: DefaultAssetLibrary
});
var lime_text_Font = function(name) {
	if(name != null) this.name = name;
	if(this.__fontPath != null) this.__fromFile(this.__fontPath);
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = ["lime","text","Font"];
lime_text_Font.fromBytes = function(bytes) {
	var font = new lime_text_Font();
	font.__fromBytes(bytes);
	return font;
};
lime_text_Font.fromFile = function(path) {
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.prototype = {
	ascender: null
	,descender: null
	,height: null
	,name: null
	,numGlyphs: null
	,src: null
	,underlinePosition: null
	,underlineThickness: null
	,unitsPerEM: null
	,__fontPath: null
	,decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,get_ascender: function() {
		return 0;
	}
	,get_descender: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_numGlyphs: function() {
		return 0;
	}
	,get_underlinePosition: function() {
		return 0;
	}
	,get_underlineThickness: function() {
		return 0;
	}
	,get_unitsPerEM: function() {
		return 0;
	}
	,__class__: lime_text_Font
	,__properties__: {get_unitsPerEM:"get_unitsPerEM",get_underlineThickness:"get_underlineThickness",get_underlinePosition:"get_underlinePosition",get_numGlyphs:"get_numGlyphs",get_height:"get_height",get_descender:"get_descender",get_ascender:"get_ascender"}
};
var _$_$ASSET_$_$assets_$fonts_$nokiafc22_$ttf = function() {
	lime_text_Font.call(this);
	this.name = "Nokia Cellphone FC Small";
};
$hxClasses["__ASSET__assets_fonts_nokiafc22_ttf"] = _$_$ASSET_$_$assets_$fonts_$nokiafc22_$ttf;
_$_$ASSET_$_$assets_$fonts_$nokiafc22_$ttf.__name__ = ["__ASSET__assets_fonts_nokiafc22_ttf"];
_$_$ASSET_$_$assets_$fonts_$nokiafc22_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$assets_$fonts_$nokiafc22_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$assets_$fonts_$nokiafc22_$ttf
});
var _$_$ASSET_$_$assets_$fonts_$arial_$ttf = function() {
	lime_text_Font.call(this);
	this.name = "Arial";
};
$hxClasses["__ASSET__assets_fonts_arial_ttf"] = _$_$ASSET_$_$assets_$fonts_$arial_$ttf;
_$_$ASSET_$_$assets_$fonts_$arial_$ttf.__name__ = ["__ASSET__assets_fonts_arial_ttf"];
_$_$ASSET_$_$assets_$fonts_$arial_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$assets_$fonts_$arial_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$assets_$fonts_$arial_$ttf
});
var _$_$ASSET_$_$assets_$fonts_$opensansregular_$ttf = function() {
	lime_text_Font.call(this);
	this.name = "Open Sans";
};
$hxClasses["__ASSET__assets_fonts_opensansregular_ttf"] = _$_$ASSET_$_$assets_$fonts_$opensansregular_$ttf;
_$_$ASSET_$_$assets_$fonts_$opensansregular_$ttf.__name__ = ["__ASSET__assets_fonts_opensansregular_ttf"];
_$_$ASSET_$_$assets_$fonts_$opensansregular_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$assets_$fonts_$opensansregular_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$assets_$fonts_$opensansregular_$ttf
});
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = ["openfl","text","Font"];
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) enumerateDeviceFonts = false;
	return openfl_text_Font.__registeredFonts;
};
openfl_text_Font.fromBytes = function(bytes) {
	var font = new openfl_text_Font();
	font.__fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
	return font;
};
openfl_text_Font.fromFile = function(path) {
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.registerFont = function(font) {
	var instance;
	instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	if(instance != null) openfl_text_Font.__registeredFonts.push(instance);
};
openfl_text_Font.__fromLimeFont = function(value) {
	var font = new openfl_text_Font();
	font.name = value.name;
	font.src = value.src;
	return font;
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	fontStyle: null
	,fontType: null
	,get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: openfl_text_Font
	,__properties__: $extend(lime_text_Font.prototype.__properties__,{set_fontName:"set_fontName",get_fontName:"get_fontName"})
});
var _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$nokiafc22_$ttf = function() {
	var font = new _$_$ASSET_$_$assets_$fonts_$nokiafc22_$ttf();
	this.src = font.src;
	this.name = font.name;
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__assets_fonts_nokiafc22_ttf"] = _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$nokiafc22_$ttf;
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$nokiafc22_$ttf.__name__ = ["__ASSET__OPENFL__assets_fonts_nokiafc22_ttf"];
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$nokiafc22_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$nokiafc22_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$nokiafc22_$ttf
});
var _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$arial_$ttf = function() {
	var font = new _$_$ASSET_$_$assets_$fonts_$arial_$ttf();
	this.src = font.src;
	this.name = font.name;
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__assets_fonts_arial_ttf"] = _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$arial_$ttf;
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$arial_$ttf.__name__ = ["__ASSET__OPENFL__assets_fonts_arial_ttf"];
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$arial_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$arial_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$arial_$ttf
});
var _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$opensansregular_$ttf = function() {
	var font = new _$_$ASSET_$_$assets_$fonts_$opensansregular_$ttf();
	this.src = font.src;
	this.name = font.name;
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__assets_fonts_opensansregular_ttf"] = _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$opensansregular_$ttf;
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$opensansregular_$ttf.__name__ = ["__ASSET__OPENFL__assets_fonts_opensansregular_ttf"];
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$opensansregular_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$opensansregular_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$opensansregular_$ttf
});
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n]; else throw new js__$Boot_HaxeError("EReg::matched");
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d.setTime(0);
		d.setUTCHours(k[0]);
		d.setUTCMinutes(k[1]);
		d.setUTCSeconds(k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) i = 0;
	}
	while(i < len) {
		if(a[i] === obj) return i;
		i++;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = HxOverrides.indexOf(a,obj,0);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.array = function(it) {
	var a = [];
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var i = $it0.next();
		a.push(i);
	}
	return a;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = [item];
		if(this.h == null) this.h = x; else this.q[1] = x;
		this.q = x;
		this.length++;
	}
	,pop: function() {
		if(this.h == null) return null;
		var x = this.h[0];
		this.h = this.h[1];
		if(this.h == null) this.q = null;
		this.length--;
		return x;
	}
	,__class__: List
};
Math.__name__ = ["Math"];
var NMEPreloader = function() {
	openfl_display_Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) color = 16777215;
	var x = 30;
	var height = 7;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 2;
	this.outline = new openfl_display_Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,height);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.addChild(this.outline);
	this.progress = new openfl_display_Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.addChild(this.progress);
};
$hxClasses["NMEPreloader"] = NMEPreloader;
NMEPreloader.__name__ = ["NMEPreloader"];
NMEPreloader.__super__ = openfl_display_Sprite;
NMEPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	outline: null
	,progress: null
	,getBackgroundColor: function() {
		return 16777215;
	}
	,getHeight: function() {
		var height = 0;
		if(height > 0) return height; else return openfl_Lib.current.stage.stageHeight;
	}
	,getWidth: function() {
		var width = 0;
		if(width > 0) return width; else return openfl_Lib.current.stage.stageWidth;
	}
	,onInit: function() {
	}
	,onLoaded: function() {
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = bytesLoaded / bytesTotal;
		if(percentLoaded > 1) percentLoaded = 1;
		this.progress.set_scaleX(percentLoaded);
	}
	,__class__: NMEPreloader
});
var flixel_interfaces_IFlxDestroyable = function() { };
$hxClasses["flixel.interfaces.IFlxDestroyable"] = flixel_interfaces_IFlxDestroyable;
flixel_interfaces_IFlxDestroyable.__name__ = ["flixel","interfaces","IFlxDestroyable"];
flixel_interfaces_IFlxDestroyable.prototype = {
	destroy: null
	,__class__: flixel_interfaces_IFlxDestroyable
};
var flixel_FlxBasic = function() {
	this.collisionType = 0;
	this.exists = true;
	this.alive = true;
	this.visible = true;
	this.active = true;
	this.ID = -1;
};
$hxClasses["flixel.FlxBasic"] = flixel_FlxBasic;
flixel_FlxBasic.__name__ = ["flixel","FlxBasic"];
flixel_FlxBasic.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_FlxBasic.prototype = {
	ID: null
	,active: null
	,visible: null
	,alive: null
	,exists: null
	,collisionType: null
	,destroy: function() {
		this.set_exists(false);
	}
	,kill: function() {
		this.set_alive(false);
		this.set_exists(false);
	}
	,revive: function() {
		this.set_alive(true);
		this.set_exists(true);
	}
	,update: function() {
		flixel_FlxBasic._ACTIVECOUNT++;
	}
	,draw: function() {
		flixel_FlxBasic._VISIBLECOUNT++;
	}
	,set_visible: function(Value) {
		return this.visible = Value;
	}
	,set_active: function(Value) {
		return this.active = Value;
	}
	,set_exists: function(Value) {
		return this.exists = Value;
	}
	,set_alive: function(Value) {
		return this.alive = Value;
	}
	,toString: function() {
		return flixel_util_FlxStringUtil.getDebugString([flixel_util_LabelValuePair._pool.get().create("active",this.active),flixel_util_LabelValuePair._pool.get().create("visible",this.visible),flixel_util_LabelValuePair._pool.get().create("alive",this.alive),flixel_util_LabelValuePair._pool.get().create("exists",this.exists)]);
	}
	,__class__: flixel_FlxBasic
	,__properties__: {set_exists:"set_exists",set_alive:"set_alive",set_visible:"set_visible",set_active:"set_active"}
};
var flixel_group_FlxTypedGroup = function(MaxSize) {
	if(MaxSize == null) MaxSize = 0;
	this._marker = 0;
	this.length = 0;
	flixel_FlxBasic.call(this);
	this.members = [];
	this.set_maxSize(Std["int"](Math.abs(MaxSize)));
	this.collisionType = 2;
};
$hxClasses["flixel.group.FlxTypedGroup"] = flixel_group_FlxTypedGroup;
flixel_group_FlxTypedGroup.__name__ = ["flixel","group","FlxTypedGroup"];
flixel_group_FlxTypedGroup.__super__ = flixel_FlxBasic;
flixel_group_FlxTypedGroup.prototype = $extend(flixel_FlxBasic.prototype,{
	members: null
	,maxSize: null
	,length: null
	,_marker: null
	,destroy: function() {
		flixel_FlxBasic.prototype.destroy.call(this);
		if(this.members != null) {
			var i = 0;
			var basic = null;
			while(i < this.length) {
				basic = this.members[i++];
				if(basic != null) basic.destroy();
			}
			this.members = null;
		}
	}
	,update: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists && basic.active) basic.update();
		}
	}
	,draw: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists && basic.visible) basic.draw();
		}
	}
	,add: function(Object) {
		if(Object == null) {
			flixel_FlxG.log.warn("Cannot add a `null` object to a FlxGroup.");
			return null;
		}
		if(HxOverrides.indexOf(this.members,Object,0) >= 0) return Object;
		var index = this.getFirstNull();
		if(index != -1) {
			this.members[index] = Object;
			if(index >= this.length) this.length = index + 1;
			return Object;
		}
		if(this.maxSize > 0 && this.length >= this.maxSize) return Object;
		this.members.push(Object);
		this.length++;
		return Object;
	}
	,recycle: function(ObjectClass,ContructorArgs,Force,Revive) {
		if(Revive == null) Revive = true;
		if(Force == null) Force = false;
		if(ContructorArgs == null) ContructorArgs = [];
		var basic = null;
		if(this.maxSize > 0) {
			if(this.length < this.maxSize) {
				if(ObjectClass == null) return null;
				return this.add(Type.createInstance(ObjectClass,ContructorArgs));
			} else {
				basic = this.members[this._marker++];
				if(this._marker >= this.maxSize) this._marker = 0;
				if(Revive) basic.revive();
				return basic;
			}
		} else {
			basic = this.getFirstAvailable(ObjectClass,Force);
			if(basic != null) {
				if(Revive) basic.revive();
				return basic;
			}
			if(ObjectClass == null) return null;
			return this.add(Type.createInstance(ObjectClass,ContructorArgs));
		}
	}
	,remove: function(Object,Splice) {
		if(Splice == null) Splice = false;
		if(this.members == null) return null;
		var index = HxOverrides.indexOf(this.members,Object,0);
		if(index < 0) return null;
		if(Splice) this.members.splice(index,1); else this.members[index] = null;
		return Object;
	}
	,replace: function(OldObject,NewObject) {
		var index = HxOverrides.indexOf(this.members,OldObject,0);
		if(index < 0) return null;
		this.members[index] = NewObject;
		return NewObject;
	}
	,sort: function(Function,Order) {
		if(Order == null) Order = -1;
		this.members.sort((function(f,a1) {
			return function(a2,a3) {
				return f(a1,a2,a3);
			};
		})(Function,Order));
	}
	,setAll: function(VariableName,Value,Recurse) {
		if(Recurse == null) Recurse = true;
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) {
				if(Recurse && basic.collisionType == 2) basic.setAll(VariableName,Value,Recurse); else Reflect.setProperty(basic,VariableName,Value);
			}
		}
	}
	,callAll: function(FunctionName,Args,Recurse) {
		if(Recurse == null) Recurse = true;
		if(Args == null) Args = [];
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) {
				if(Recurse && basic.collisionType == 2) (js_Boot.__cast(basic , flixel_group_FlxTypedGroup)).callAll(FunctionName,Args,Recurse); else Reflect.callMethod(basic,Reflect.getProperty(basic,FunctionName),Args);
			}
		}
	}
	,getFirstAvailable: function(ObjectClass,Force) {
		if(Force == null) Force = false;
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && !basic.exists && (ObjectClass == null || js_Boot.__instanceof(basic,ObjectClass))) {
				if(Force && Type.getClassName(basic == null?null:js_Boot.getClass(basic)) != Type.getClassName(ObjectClass)) continue;
				return this.members[i - 1];
			}
		}
		return null;
	}
	,getFirstNull: function() {
		var i = 0;
		while(i < this.length) {
			if(this.members[i] == null) return i;
			i++;
		}
		return -1;
	}
	,getFirstExisting: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists) return basic;
		}
		return null;
	}
	,getFirstAlive: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists && basic.alive) return basic;
		}
		return null;
	}
	,getFirstDead: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && !basic.alive) return basic;
		}
		return null;
	}
	,countLiving: function() {
		var i = 0;
		var count = -1;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) {
				if(count < 0) count = 0;
				if(basic.exists && basic.alive) count++;
			}
		}
		return count;
	}
	,countDead: function() {
		var i = 0;
		var count = -1;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) {
				if(count < 0) count = 0;
				if(!basic.alive) count++;
			}
		}
		return count;
	}
	,getRandom: function(StartIndex,Length) {
		if(Length == null) Length = 0;
		if(StartIndex == null) StartIndex = 0;
		if(StartIndex < 0) StartIndex = 0;
		if(Length <= 0) Length = this.length;
		return flixel_util_FlxRandom.getObject_getRandom_T(this.members,StartIndex,Length);
	}
	,clear: function() {
		this.length = 0;
		flixel_util_FlxArrayUtil.clearArray(this.members);
	}
	,kill: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists) basic.kill();
		}
		flixel_FlxBasic.prototype.kill.call(this);
	}
	,iterator: function(filter) {
		return new flixel_group_FlxTypedGroupIterator(this.members,filter);
	}
	,forEach: function(Function) {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) Function(basic);
		}
	}
	,forEachAlive: function(Function) {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists && basic.alive) Function(basic);
		}
	}
	,forEachDead: function(Function) {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && !basic.alive) Function(basic);
		}
	}
	,forEachExists: function(Function) {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists) Function(basic);
		}
	}
	,forEachOfType: function(ObjectClass,Function) {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && js_Boot.__instanceof(basic,ObjectClass)) Function(basic);
		}
	}
	,set_maxSize: function(Size) {
		this.maxSize = Std["int"](Math.abs(Size));
		if(this._marker >= this.maxSize) this._marker = 0;
		if(this.maxSize == 0 || this.members == null || this.maxSize >= this.length) return this.maxSize;
		var i = this.maxSize;
		var l = this.length;
		var basic = null;
		while(i < l) {
			basic = this.members[i++];
			if(basic != null) basic.destroy();
		}
		flixel_util_FlxArrayUtil.setLength_flixel_group_FlxTypedGroup_T(this.members,this.maxSize);
		this.length = this.members.length;
		return this.maxSize;
	}
	,__class__: flixel_group_FlxTypedGroup
	,__properties__: $extend(flixel_FlxBasic.prototype.__properties__,{set_maxSize:"set_maxSize"})
});
var flixel_group_FlxGroup = function(MaxSize) {
	flixel_group_FlxTypedGroup.call(this,MaxSize);
};
$hxClasses["flixel.group.FlxGroup"] = flixel_group_FlxGroup;
flixel_group_FlxGroup.__name__ = ["flixel","group","FlxGroup"];
flixel_group_FlxGroup.overlaps = function(Callback,Group,X,Y,InScreenSpace,Camera) {
	var result = false;
	if(Group != null) {
		var i = 0;
		var l = Group.length;
		var basic;
		while(i < l) {
			basic = Group.members[i++];
			if(basic != null && Callback(basic,X,Y,InScreenSpace,Camera)) {
				result = true;
				break;
			}
		}
	}
	return result;
};
flixel_group_FlxGroup.resolveGroup = function(ObjectOrGroup) {
	var group = null;
	if(ObjectOrGroup.collisionType == 4 || ObjectOrGroup.collisionType == 2) {
		if(ObjectOrGroup.collisionType == 2) group = ObjectOrGroup; else if(ObjectOrGroup.collisionType == 4) group = (js_Boot.__cast(ObjectOrGroup , flixel_group_FlxSpriteGroup)).group;
	}
	return group;
};
flixel_group_FlxGroup.__super__ = flixel_group_FlxTypedGroup;
flixel_group_FlxGroup.prototype = $extend(flixel_group_FlxTypedGroup.prototype,{
	__class__: flixel_group_FlxGroup
});
var flixel_FlxState = function(MaxSize) {
	this._requestSubStateReset = false;
	this.destroySubStates = true;
	this.persistentDraw = true;
	this.persistentUpdate = false;
	flixel_group_FlxGroup.call(this,MaxSize);
};
$hxClasses["flixel.FlxState"] = flixel_FlxState;
flixel_FlxState.__name__ = ["flixel","FlxState"];
flixel_FlxState.__super__ = flixel_group_FlxGroup;
flixel_FlxState.prototype = $extend(flixel_group_FlxGroup.prototype,{
	persistentUpdate: null
	,persistentDraw: null
	,destroySubStates: null
	,subState: null
	,_requestedSubState: null
	,_requestSubStateReset: null
	,create: function() {
	}
	,draw: function() {
		if(this.persistentDraw || this.subState == null) flixel_group_FlxGroup.prototype.draw.call(this);
		if(this.subState != null) this.subState.draw();
	}
	,openSubState: function(SubState) {
		this._requestSubStateReset = true;
		this._requestedSubState = SubState;
	}
	,closeSubState: function() {
		this._requestSubStateReset = true;
	}
	,resetSubState: function() {
		if(this.subState != null) {
			if(this.subState.closeCallback != null) this.subState.closeCallback();
			if(this.destroySubStates) this.subState.destroy();
		}
		this.subState = this._requestedSubState;
		this._requestedSubState = null;
		if(this.subState != null) {
			if(!this.persistentUpdate) flixel_FlxG.inputs.reset();
			if(!this.subState._created) {
				this.subState._created = true;
				this.subState._parentState = this;
				this.subState.create();
			}
		}
	}
	,destroy: function() {
		if(this.subState != null) {
			this.subState.destroy();
			this.subState = null;
		}
		flixel_group_FlxGroup.prototype.destroy.call(this);
	}
	,onFocusLost: function() {
	}
	,onFocus: function() {
	}
	,onResize: function(Width,Height) {
	}
	,tryUpdate: function() {
		if(this.persistentUpdate || this.subState == null) this.update();
		if(this._requestSubStateReset) {
			this._requestSubStateReset = false;
			this.resetSubState();
		} else if(this.subState != null) this.subState.tryUpdate();
	}
	,get_bgColor: function() {
		return flixel_FlxG.cameras.get_bgColor();
	}
	,set_bgColor: function(Value) {
		return flixel_FlxG.cameras.set_bgColor(Value);
	}
	,__class__: flixel_FlxState
	,__properties__: $extend(flixel_group_FlxGroup.prototype.__properties__,{set_bgColor:"set_bgColor",get_bgColor:"get_bgColor"})
});
var PlayState = function(MaxSize) {
	flixel_FlxState.call(this,MaxSize);
};
$hxClasses["PlayState"] = PlayState;
PlayState.__name__ = ["PlayState"];
PlayState.__super__ = flixel_FlxState;
PlayState.prototype = $extend(flixel_FlxState.prototype,{
	_bat: null
	,_ball: null
	,_walls: null
	,_leftWall: null
	,_rightWall: null
	,_topWall: null
	,_bottomWall: null
	,_bricks: null
	,create: function() {
		flixel_FlxG.mouse.set_visible(false);
		flixel_FlxG.camera.bgColor = 0;
		this._bat = new flixel_FlxSprite(180,220);
		this._bat.makeGraphic(40,6,-258112);
		this._bat.set_immovable(true);
		this._ball = new flixel_FlxSprite(180,160);
		this._ball.makeGraphic(6,6,-258112);
		this._ball.elasticity = 1;
		this._ball.maxVelocity.set(200,200);
		this._ball.velocity.set_y(200);
		this._walls = new flixel_group_FlxGroup();
		this._leftWall = new flixel_FlxSprite(0,0);
		this._leftWall.makeGraphic(10,240,-8355712);
		this._leftWall.set_immovable(true);
		this._walls.add(this._leftWall);
		this._rightWall = new flixel_FlxSprite(310,0);
		this._rightWall.makeGraphic(10,240,-8355712);
		this._rightWall.set_immovable(true);
		this._walls.add(this._rightWall);
		this._topWall = new flixel_FlxSprite(0,0);
		this._topWall.makeGraphic(320,10,-8355712);
		this._topWall.set_immovable(true);
		this._walls.add(this._topWall);
		this._bottomWall = new flixel_FlxSprite(0,239);
		this._bottomWall.makeGraphic(320,10,0);
		this._bottomWall.set_immovable(true);
		this._walls.add(this._bottomWall);
		this._bricks = new flixel_group_FlxGroup();
		var bx = 10;
		var by = 30;
		var brickColours = [-3130671,-568494,-163820,-28636,-16403680,-9607690];
		var _g = 0;
		while(_g < 6) {
			var y = _g++;
			var _g1 = 0;
			while(_g1 < 20) {
				var x = _g1++;
				var tempBrick = new flixel_FlxSprite(bx,by);
				tempBrick.makeGraphic(15,15,brickColours[y]);
				tempBrick.set_immovable(true);
				this._bricks.add(tempBrick);
				bx += 15;
			}
			bx = 10;
			by += 15;
		}
		this.add(this._walls);
		this.add(this._bat);
		this.add(this._ball);
		this.add(this._bricks);
	}
	,update: function() {
		flixel_FlxState.prototype.update.call(this);
		this._bat.velocity.set_x(0);
		var _g = 0;
		var _g1 = flixel_FlxG.touches.list;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			if(touch._current > 0) {
				if(touch.x > 10 && touch.x < 270) this._bat.set_x(touch.x);
			}
		}
		var _g2 = 0;
		var _g11 = flixel_FlxG.swipes;
		while(_g2 < _g11.length) {
			var swipe = _g11[_g2];
			++_g2;
			if(flixel_util_FlxMath.vectorLength(swipe.startPosition.x - swipe.endPosition.x,swipe.startPosition.y - swipe.endPosition.y) > 100) {
				if(flixel_util_FlxAngle.getAngle(swipe.startPosition,swipe.endPosition) < 10 && flixel_util_FlxAngle.getAngle(swipe.startPosition,swipe.endPosition) > -10 || (flixel_util_FlxAngle.getAngle(swipe.startPosition,swipe.endPosition) > 170 || flixel_util_FlxAngle.getAngle(swipe.startPosition,swipe.endPosition) < -170)) flixel_FlxG.switchState(Type.createInstance(Type.getClass(flixel_FlxG.game._state),[]));
			}
		}
		if(flixel_FlxG.keys.checkKeyStatus(["LEFT","A"],1) && this._bat.x > 10) this._bat.velocity.set_x(-350); else if(flixel_FlxG.keys.checkKeyStatus(["RIGHT","D"],1) && this._bat.x < 270) this._bat.velocity.set_x(350);
		if(flixel_FlxG.keys.checkStatus(82,flixel_FlxG.keys.justReleased.checkStatus)) flixel_FlxG.switchState(Type.createInstance(Type.getClass(flixel_FlxG.game._state),[]));
		if(this._bat.x < 10) this._bat.set_x(10);
		if(this._bat.x > 270) this._bat.set_x(270);
		flixel_FlxG.overlap(this._ball,this._walls,null,flixel_FlxObject.separate);
		flixel_FlxG.overlap(this._bat,this._ball,$bind(this,this.ping),flixel_FlxObject.separate);
		flixel_FlxG.overlap(this._ball,this._bricks,$bind(this,this.hit),flixel_FlxObject.separate);
	}
	,hit: function(Ball,Brick) {
		Brick.set_exists(false);
	}
	,ping: function(Bat,Ball) {
		var batmid = (Bat.x | 0) + 20;
		var ballmid = (Ball.x | 0) + 3;
		var diff;
		if(ballmid < batmid) {
			diff = batmid - ballmid;
			Ball.velocity.set_x(-10 * diff);
		} else if(ballmid > batmid) {
			diff = ballmid - batmid;
			Ball.velocity.set_x(10 * diff);
		} else Ball.velocity.set_x(2 + flixel_util_FlxRandom.intRanged(0,8));
	}
	,__class__: PlayState
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) return null; else if(o.__properties__ && (tmp = o.__properties__["get_" + field])) return o[tmp](); else return o[field];
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	if(o.__properties__ && (tmp = o.__properties__["set_" + field])) o[tmp](value); else o[field] = value;
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) return true;
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
	return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
};
Reflect.isObject = function(v) {
	if(v == null) return false;
	var t = typeof(v);
	return t == "string" || t == "object" && v.__enum__ == null || t == "function" && (v.__name__ || v.__ename__) != null;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) return false;
	delete(o[field]);
	return true;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std["is"] = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,add: function(x) {
		this.b += Std.string(x);
	}
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) return s.split("\"").join("&quot;").split("'").join("&#039;"); else return s;
};
StringTools.startsWith = function(s,start) {
	return s.length >= start.length && HxOverrides.substr(s,0,start.length) == start;
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	return slen >= elen && HxOverrides.substr(s,slen - elen,elen) == end;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	return c > 8 && c < 14 || c == 32;
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) r++;
	if(r > 0) return HxOverrides.substr(s,r,l - r); else return s;
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) r++;
	if(r > 0) return HxOverrides.substr(s,0,l - r); else return s;
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) return null; else return js_Boot.getClass(o);
};
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) return null;
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) return null;
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
	return null;
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) throw new js__$Boot_HaxeError("No such constructor " + constr);
	if(Reflect.isFunction(f)) {
		if(params == null) throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		return Reflect.callMethod(e,f,params);
	}
	if(params != null && params.length != 0) throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.getEnumConstructs = function(e) {
	var a = e.__constructs__;
	return a.slice();
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "string":
		return ValueType.TClass(String);
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) return ValueType.TInt;
		return ValueType.TFloat;
	case "object":
		if(v == null) return ValueType.TNull;
		var e = v.__enum__;
		if(e != null) return ValueType.TEnum(e);
		var c = js_Boot.getClass(v);
		if(c != null) return ValueType.TClass(c);
		return ValueType.TObject;
	case "function":
		if(v.__name__ || v.__ename__) return ValueType.TObject;
		return ValueType.TFunction;
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) return true;
	try {
		if(a[0] != b[0]) return false;
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) return false;
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) return false;
	} catch( e1 ) {
		haxe_CallStack.lastException = e1;
		if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
		return false;
	}
	return true;
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) return aNeg; else return a > b;
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var $int = this1;
	if($int < 0) return 4294967296.0 + $int; else return $int + 0.0;
};
var Xml = function() { };
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.attributeMap.get(att);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		var ret;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) _g.push(child);
		}
		ret = _g;
		return HxOverrides.iter(ret);
	}
	,__class__: Xml
};
var com_babylonhx_Engine = $hx_exports.BABYLON.Engine = function(canvas,antialias,options) {
	if(antialias == null) antialias = false;
	this._canvasClientRect = { x : 0, y : 0, width : 800, height : 600};
	this._uintIndicesCurrentlySet = false;
	this._compiledEffects = new haxe_ds_StringMap();
	this._activeTexturesCache = [];
	this._loadedTexturesCache = [];
	this._alphaMode = 0;
	this._alphaState = new com_babylonhx__$AlphaState();
	this._depthCullingState = new com_babylonhx__$DepthCullingState();
	this.deltaTime = 0.0;
	this.fps = 60.0;
	this.previousFramesDuration = [];
	this.fpsRange = 60.0;
	this._activeRenderLoops = [];
	this._renderingQueueLaunched = false;
	this._drawCalls = 0;
	this._runningLoop = false;
	this._windowIsBackground = false;
	this.scenes = [];
	this.renderEvenInBackground = true;
	this.cullBackFaces = true;
	this.isPointerLock = false;
	this.isFullscreen = false;
	var _g = this;
	haxe_Log.trace("BabylonHx - Cross-Platform 3D Engine | " + new Date().getFullYear() + " | www.babylonhx.com",{ fileName : "Engine.hx", lineNumber : 168, className : "com.babylonhx.Engine", methodName : "new"});
	com_babylonhx_Engine.app = canvas;
	this._renderingCanvas = canvas;
	this._canvasClientRect.width = 800;
	this._canvasClientRect.height = 600;
	this._workingContext = new openfl_display_OpenGLView();
	canvas.addChild(this._workingContext);
	this.width = 800;
	this.height = 600;
	if(options != null) options = options; else options = { };
	options.antialias = antialias;
	if(options.preserveDrawingBuffer == null) options.preserveDrawingBuffer = false;
	this._onBlur = function() {
		_g._windowIsBackground = true;
	};
	this._onFocus = function() {
		_g._windowIsBackground = false;
	};
	this._hardwareScalingLevel = 1;
	this.resize();
	this._caps = new com_babylonhx_EngineCapabilities();
	this._caps.maxTexturesImageUnits = lime_graphics_opengl_GL.context.getParameter(34930);
	this._caps.maxTextureSize = lime_graphics_opengl_GL.context.getParameter(3379);
	this._caps.maxCubemapTextureSize = lime_graphics_opengl_GL.context.getParameter(34076);
	this._caps.maxRenderTextureSize = lime_graphics_opengl_GL.context.getParameter(34024);
	this._glVersion = lime_graphics_opengl_GL.context.getParameter(7938);
	this._glExtensions = lime_graphics_opengl_GL.context.getSupportedExtensions();
	try {
		this._caps.standardDerivatives = lime_graphics_opengl_GL.context.getExtension("OES_standard_derivatives") != null;
		this._caps.s3tc = lime_graphics_opengl_GL.context.getExtension("WEBGL_compressed_texture_s3tc");
		this._caps.textureFloat = lime_graphics_opengl_GL.context.getExtension("OES_texture_float") != null;
		this._caps.textureAnisotropicFilterExtension = lime_graphics_opengl_GL.context.getExtension("EXT_texture_filter_anisotropic") || lime_graphics_opengl_GL.context.getExtension("WEBKIT_EXT_texture_filter_anisotropic") || lime_graphics_opengl_GL.context.getExtension("MOZ_EXT_texture_filter_anisotropic");
		if(this._caps.textureAnisotropicFilterExtension != null) this._caps.maxAnisotropy = lime_graphics_opengl_GL.getParameter(this._caps.textureAnisotropicFilterExtension.MAX_TEXTURE_MAX_ANISOTROPY_EXT); else this._caps.maxAnisotropy = 0;
		this._caps.instancedArrays = lime_graphics_opengl_GL.context.getExtension("ANGLE_instanced_arrays");
		this._caps.uintIndices = lime_graphics_opengl_GL.context.getExtension("OES_element_index_uint") != null;
		this._caps.fragmentDepthSupported = lime_graphics_opengl_GL.context.getExtension("EXT_frag_depth") != null;
		this._caps.highPrecisionShaderSupported = true;
		if(lime_graphics_opengl_GL.getShaderPrecisionFormat != null) {
			var highp = lime_graphics_opengl_GL.context.getShaderPrecisionFormat(35632,36338);
			this._caps.highPrecisionShaderSupported = highp != null && highp.precision != 0;
		}
	} catch( err ) {
		haxe_CallStack.lastException = err;
		if (err instanceof js__$Boot_HaxeError) err = err.val;
	}
	this._depthCullingState.set_depthTest(true);
	this._depthCullingState.set_depthFunc(515);
	this._depthCullingState.set_depthMask(true);
	this.isFullscreen = false;
	this.isPointerLock = false;
};
$hxClasses["com.babylonhx.Engine"] = com_babylonhx_Engine;
com_babylonhx_Engine.__name__ = ["com","babylonhx","Engine"];
com_babylonhx_Engine.app = null;
com_babylonhx_Engine.compileShader = function(source,type,defines) {
	var shader = lime_graphics_opengl_GL.context.createShader(type == "vertex"?35633:35632);
	lime_graphics_opengl_GL.context.shaderSource(shader,(defines != null?defines + "\n":"") + source);
	lime_graphics_opengl_GL.context.compileShader(shader);
	if(lime_graphics_opengl_GL.context.getShaderParameter(shader,35713) == 0) throw new js__$Boot_HaxeError(lime_graphics_opengl_GL.context.getShaderInfoLog(shader));
	return shader;
};
com_babylonhx_Engine.getWebGLTextureType = function(type) {
	var textureType;
	if(type == 1) textureType = 5126; else textureType = 5121;
	return textureType;
};
com_babylonhx_Engine.getSamplingParameters = function(samplingMode,generateMipMaps) {
	var magFilter = 9728;
	var minFilter = 9728;
	if(samplingMode == 2) {
		magFilter = 9729;
		if(generateMipMaps) minFilter = 9985; else minFilter = 9729;
	} else if(samplingMode == 3) {
		magFilter = 9729;
		if(generateMipMaps) minFilter = 9987; else minFilter = 9729;
	} else if(samplingMode == 1) {
		magFilter = 9728;
		if(generateMipMaps) minFilter = 9986; else minFilter = 9728;
	}
	return { min : minFilter, mag : magFilter};
};
com_babylonhx_Engine.prepareTexture = function(texture,gl,scene,width,height,invertY,noMipmap,isCompressed,processFunction,samplingMode) {
	if(samplingMode == null) samplingMode = 3;
	var engine = scene._engine;
	var potWidth = com_babylonhx_tools_Tools.GetExponantOfTwo(width,engine.getCaps().maxTextureSize);
	var potHeight = com_babylonhx_tools_Tools.GetExponantOfTwo(height,engine.getCaps().maxTextureSize);
	if(potWidth != width || potHeight != height) haxe_Log.trace("Texture '" + texture.url + "' is not power of two !",{ fileName : "Engine.hx", lineNumber : 1931, className : "com.babylonhx.Engine", methodName : "prepareTexture"});
	lime_graphics_opengl_GL.context.bindTexture(3553,texture.data);
	texture._baseWidth = width;
	texture._baseHeight = height;
	texture._width = potWidth;
	texture._height = potHeight;
	texture.isReady = true;
	processFunction(potWidth | 0,potHeight | 0);
	var filters = com_babylonhx_Engine.getSamplingParameters(samplingMode,!noMipmap);
	lime_graphics_opengl_GL.context.texParameteri(3553,10240,filters.mag);
	lime_graphics_opengl_GL.context.texParameteri(3553,10241,filters.min);
	if(!noMipmap && !isCompressed) lime_graphics_opengl_GL.context.generateMipmap(3553);
	lime_graphics_opengl_GL.context.bindTexture(3553,null);
	engine._activeTexturesCache = [];
	scene._removePendingData(texture);
};
com_babylonhx_Engine.partialLoad = function(url,index,loadedImages,scene,onfinish) {
};
com_babylonhx_Engine.cascadeLoad = function(rootUrl,scene,onfinish,extensions) {
};
com_babylonhx_Engine.prototype = {
	isFullscreen: null
	,isPointerLock: null
	,cullBackFaces: null
	,renderEvenInBackground: null
	,scenes: null
	,_renderingCanvas: null
	,_windowIsBackground: null
	,_onBlur: null
	,_onFocus: null
	,_onFullscreenChange: null
	,_onPointerLockChange: null
	,_hardwareScalingLevel: null
	,_caps: null
	,_pointerLockRequested: null
	,_alphaTest: null
	,_runningLoop: null
	,_renderFunction: null
	,_drawCalls: null
	,get_drawCalls: function() {
		return this._drawCalls;
	}
	,_glVersion: null
	,_glExtensions: null
	,_glRenderer: null
	,_glVendor: null
	,_renderingQueueLaunched: null
	,_activeRenderLoops: null
	,fpsRange: null
	,previousFramesDuration: null
	,fps: null
	,deltaTime: null
	,_depthCullingState: null
	,_alphaState: null
	,_alphaMode: null
	,_loadedTexturesCache: null
	,_activeTexturesCache: null
	,_currentEffect: null
	,_compiledEffects: null
	,_vertexAttribArrays: null
	,_cachedViewport: null
	,_cachedVertexBuffers: null
	,_cachedIndexBuffer: null
	,_cachedEffectForVertexBuffers: null
	,_currentRenderTarget: null
	,_uintIndicesCurrentlySet: null
	,_canvasClientRect: null
	,_workingCanvas: null
	,_workingContext: null
	,width: null
	,height: null
	,getExtensions: function() {
		return this._glExtensions;
	}
	,getAspectRatio: function(camera) {
		var viewport = camera.viewport;
		return this.getRenderWidth() * viewport.width / (this.getRenderHeight() * viewport.height);
	}
	,getRenderWidth: function() {
		return this.width;
	}
	,getRenderHeight: function() {
		return this.height;
	}
	,getRenderingCanvas: function() {
		return this._renderingCanvas;
	}
	,setHardwareScalingLevel: function(level) {
		this._hardwareScalingLevel = level;
		this.resize();
	}
	,getHardwareScalingLevel: function() {
		return this._hardwareScalingLevel;
	}
	,getLoadedTexturesCache: function() {
		return this._loadedTexturesCache;
	}
	,getCaps: function() {
		return this._caps;
	}
	,resetDrawCalls: function() {
		this._drawCalls = 0;
	}
	,setDepthFunctionToGreater: function() {
		this._depthCullingState.set_depthFunc(516);
	}
	,setDepthFunctionToGreaterOrEqual: function() {
		this._depthCullingState.set_depthFunc(518);
	}
	,setDepthFunctionToLess: function() {
		this._depthCullingState.set_depthFunc(513);
	}
	,setDepthFunctionToLessOrEqual: function() {
		this._depthCullingState.set_depthFunc(515);
	}
	,stopRenderLoop: function(renderFunction) {
		if(renderFunction == null) {
			this._activeRenderLoops = [];
			return;
		}
		var index = HxOverrides.indexOf(this._activeRenderLoops,renderFunction,0);
		if(index >= 0) this._activeRenderLoops.splice(index,1);
	}
	,_renderLoop: function(rect) {
		this._measureFps();
		if(this._renderFunction != null) this._renderFunction();
		lime_graphics_opengl_GL.context.flush();
	}
	,runRenderLoop: function(renderFunction) {
		this._runningLoop = true;
		this._renderFunction = renderFunction;
		this._workingContext.set_render($bind(this,this._renderLoop));
	}
	,switchFullscreen: function(requestPointerLock) {
	}
	,clear: function(color,backBuffer,depthStencil) {
		this._depthCullingState.apply();
		this._alphaState.apply();
		if(js_Boot.__instanceof(color,com_babylonhx_math_Color4)) lime_graphics_opengl_GL.clearColor(color.r,color.g,color.b,color.a); else lime_graphics_opengl_GL.clearColor(color.r,color.g,color.b,1.0);
		if(this._depthCullingState.get_depthMask()) lime_graphics_opengl_GL.context.clearDepth(1.0);
		var mode = 0;
		if(backBuffer) mode |= 16384;
		if(depthStencil && this._depthCullingState.get_depthMask()) mode |= 256;
		lime_graphics_opengl_GL.context.clear(mode);
	}
	,setViewport: function(viewport,requiredWidth,requiredHeight) {
		if(requiredHeight == null) requiredHeight = 0;
		if(requiredWidth == null) requiredWidth = 0;
		var width;
		if(requiredWidth == 0) width = this.getRenderWidth(); else width = requiredWidth;
		var height;
		if(requiredHeight == 0) height = this.getRenderHeight(); else height = requiredHeight;
		var x = viewport.x;
		var y = viewport.y;
		this._cachedViewport = viewport;
		lime_graphics_opengl_GL.context.viewport(x * width | 0,y * height | 0,width * viewport.width | 0,height * viewport.height | 0);
	}
	,setDirectViewport: function(x,y,width,height) {
		this._cachedViewport = null;
		lime_graphics_opengl_GL.context.viewport(x,y,width,height);
	}
	,beginFrame: function() {
		this._measureFps();
	}
	,endFrame: function() {
		lime_graphics_opengl_GL.context.flush();
	}
	,getFps: function() {
		return this.fps;
	}
	,getDeltaTime: function() {
		return this.deltaTime;
	}
	,_measureFps: function() {
		this.previousFramesDuration.push(Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000));
		var length = this.previousFramesDuration.length;
		if(length >= 2) this.deltaTime = this.previousFramesDuration[length - 1] - this.previousFramesDuration[length - 2];
		if(length >= this.fpsRange) {
			if(length > this.fpsRange) {
				this.previousFramesDuration.splice(0,1);
				length = this.previousFramesDuration.length;
			}
			var sum = 0.0;
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				var id = _g1++;
				sum += this.previousFramesDuration[id + 1] - this.previousFramesDuration[id];
			}
			this.fps = 1000.0 / (sum / (length - 1));
		}
	}
	,resize: function() {
	}
	,setSize: function(width,height) {
	}
	,bindFramebuffer: function(texture,faceIndex) {
		if(faceIndex == null) faceIndex = 0;
		this._currentRenderTarget = texture;
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,texture._framebuffer);
		if(texture.isCube) lime_graphics_opengl_GL.context.framebufferTexture2D(36160,36064,34069 + faceIndex,texture.data,0); else lime_graphics_opengl_GL.context.framebufferTexture2D(36160,36064,3553,texture.data,0);
		lime_graphics_opengl_GL.context.viewport(0,0,texture._width,texture._height);
		this.wipeCaches();
	}
	,unBindFramebuffer: function(texture,disableGenerateMipMaps) {
		if(disableGenerateMipMaps == null) disableGenerateMipMaps = false;
		this._currentRenderTarget = null;
		if(texture.generateMipMaps && !disableGenerateMipMaps) {
			lime_graphics_opengl_GL.context.bindTexture(3553,texture.data);
			lime_graphics_opengl_GL.context.generateMipmap(3553);
			lime_graphics_opengl_GL.context.bindTexture(3553,null);
		}
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
	}
	,generateMipMapsForCubemap: function(texture) {
		if(texture.generateMipMaps) {
			lime_graphics_opengl_GL.context.bindTexture(34067,texture.data);
			lime_graphics_opengl_GL.context.generateMipmap(34067);
			lime_graphics_opengl_GL.context.bindTexture(34067,null);
		}
	}
	,flushFramebuffer: function() {
		lime_graphics_opengl_GL.context.flush();
	}
	,restoreDefaultFramebuffer: function() {
		this._currentRenderTarget = null;
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
		this.setViewport(this._cachedViewport,null,null);
		this.wipeCaches();
	}
	,_resetVertexBufferBinding: function() {
		lime_graphics_opengl_GL.context.bindBuffer(34962,null);
		this._cachedVertexBuffers = null;
	}
	,createVertexBuffer: function(vertices) {
		var vbo = lime_graphics_opengl_GL.context.createBuffer();
		lime_graphics_opengl_GL.context.bindBuffer(34962,vbo);
		lime_graphics_opengl_GL.bufferData(34962,(function($this) {
			var $r;
			var this1;
			if(vertices != null) this1 = new Float32Array(vertices); else this1 = null;
			$r = this1;
			return $r;
		}(this)),35044);
		lime_graphics_opengl_GL.context.bindBuffer(34962,null);
		this._cachedVertexBuffers = null;
		var ret = new com_babylonhx_mesh_WebGLBuffer(vbo);
		ret.references = 1;
		return ret;
	}
	,createDynamicVertexBuffer: function(capacity) {
		var vbo = lime_graphics_opengl_GL.context.createBuffer();
		lime_graphics_opengl_GL.context.bindBuffer(34962,vbo);
		lime_graphics_opengl_GL.bufferData(34962,(function($this) {
			var $r;
			var this1;
			if(capacity != null) this1 = new Float32Array(capacity); else this1 = null;
			$r = this1;
			return $r;
		}(this)),35048);
		lime_graphics_opengl_GL.context.bindBuffer(34962,null);
		this._cachedVertexBuffers = null;
		var ret = new com_babylonhx_mesh_WebGLBuffer(vbo);
		ret.references = 1;
		return ret;
	}
	,updateDynamicVertexBuffer: function(vertexBuffer,vertices,offset) {
		if(offset == null) offset = 0;
		lime_graphics_opengl_GL.context.bindBuffer(34962,vertexBuffer.buffer);
		if(!((vertices instanceof Array) && vertices.__enum__ == null)) lime_graphics_opengl_GL.bufferSubData(34962,offset,vertices); else lime_graphics_opengl_GL.bufferSubData(34962,offset,(function($this) {
			var $r;
			var array;
			array = js_Boot.__cast(vertices , Array);
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
		lime_graphics_opengl_GL.context.bindBuffer(34962,null);
		this._cachedVertexBuffers = null;
	}
	,_resetIndexBufferBinding: function() {
		lime_graphics_opengl_GL.context.bindBuffer(34963,null);
		this._cachedIndexBuffer = null;
	}
	,createIndexBuffer: function(indices) {
		var vbo = lime_graphics_opengl_GL.context.createBuffer();
		lime_graphics_opengl_GL.context.bindBuffer(34963,vbo);
		var arrayBuffer = null;
		var need32Bits = false;
		if(this._caps.uintIndices) {
			var _g1 = 0;
			var _g = indices.length;
			while(_g1 < _g) {
				var index = _g1++;
				if(indices[index] > 65535) {
					need32Bits = true;
					break;
				}
			}
			if(need32Bits) {
				var this1;
				if(indices != null) this1 = new Int32Array(indices); else this1 = null;
				arrayBuffer = this1;
			} else {
				var this2;
				if(indices != null) this2 = new Int16Array(indices); else this2 = null;
				arrayBuffer = this2;
			}
		} else {
			var this3;
			if(indices != null) this3 = new Int16Array(indices); else this3 = null;
			arrayBuffer = this3;
		}
		lime_graphics_opengl_GL.context.bufferData(34963,arrayBuffer,35044);
		lime_graphics_opengl_GL.context.bindBuffer(34963,null);
		this._cachedIndexBuffer = null;
		var ret = new com_babylonhx_mesh_WebGLBuffer(vbo);
		ret.references = 1;
		ret.is32Bits = need32Bits;
		return ret;
	}
	,bindBuffers: function(vertexBuffer,indexBuffer,vertexDeclaration,vertexStrideSize,effect) {
		if(this._cachedVertexBuffers != vertexBuffer || this._cachedEffectForVertexBuffers != effect) {
			this._cachedVertexBuffers = vertexBuffer;
			this._cachedEffectForVertexBuffers = effect;
			lime_graphics_opengl_GL.context.bindBuffer(34962,vertexBuffer.buffer);
			var offset = 0;
			var _g1 = 0;
			var _g = vertexDeclaration.length;
			while(_g1 < _g) {
				var index = _g1++;
				var order = effect._attributes[index];
				if(order >= 0) lime_graphics_opengl_GL.context.vertexAttribPointer(order,vertexDeclaration[index],5126,false,vertexStrideSize,offset);
				offset += vertexDeclaration[index] * 4;
			}
		}
		if(this._cachedIndexBuffer != indexBuffer) {
			this._cachedIndexBuffer = indexBuffer;
			lime_graphics_opengl_GL.context.bindBuffer(34963,indexBuffer.buffer);
			this._uintIndicesCurrentlySet = indexBuffer.is32Bits;
		}
	}
	,bindMultiBuffers: function(vertexBuffers,indexBuffer,effect) {
		if(this._cachedVertexBuffers != vertexBuffers || this._cachedEffectForVertexBuffers != effect) {
			this._cachedVertexBuffers = vertexBuffers;
			this._cachedEffectForVertexBuffers = effect;
			var attributes = effect._attributesNames;
			var _g1 = 0;
			var _g = attributes.length;
			while(_g1 < _g) {
				var index = _g1++;
				var order = effect._attributes[index];
				if(order >= 0) {
					var vertexBuffer = vertexBuffers.get(attributes[index]);
					if(vertexBuffer == null) continue;
					var stride = vertexBuffer._strideSize;
					lime_graphics_opengl_GL.context.bindBuffer(34962,vertexBuffer._buffer.buffer);
					lime_graphics_opengl_GL.context.vertexAttribPointer(order,stride,5126,false,stride * 4,0);
				}
			}
		}
		if(indexBuffer != null && this._cachedIndexBuffer != indexBuffer) {
			this._cachedIndexBuffer = indexBuffer;
			lime_graphics_opengl_GL.context.bindBuffer(34963,indexBuffer.buffer);
			this._uintIndicesCurrentlySet = indexBuffer.is32Bits;
		}
	}
	,_releaseBuffer: function(buffer) {
		buffer.references--;
		if(buffer.references == 0) {
			lime_graphics_opengl_GL.context.deleteBuffer(buffer.buffer);
			return true;
		}
		return false;
	}
	,createInstancesBuffer: function(capacity) {
		var buffer = new com_babylonhx_mesh_WebGLBuffer(lime_graphics_opengl_GL.context.createBuffer());
		buffer.capacity = capacity;
		lime_graphics_opengl_GL.context.bindBuffer(34962,buffer.buffer);
		lime_graphics_opengl_GL.bufferData(34962,(function($this) {
			var $r;
			var this1;
			if(capacity != null) this1 = new Float32Array(capacity); else this1 = null;
			$r = this1;
			return $r;
		}(this)),35048);
		return buffer;
	}
	,deleteInstancesBuffer: function(buffer) {
		lime_graphics_opengl_GL.context.deleteBuffer(buffer.buffer);
		buffer = null;
	}
	,updateAndBindInstancesBuffer: function(instancesBuffer,data,offsetLocations) {
		lime_graphics_opengl_GL.context.bindBuffer(34962,instancesBuffer.buffer);
		lime_graphics_opengl_GL.context.bufferSubData(34962,0,data);
		var _g = 0;
		while(_g < 4) {
			var index = _g++;
			var offsetLocation = offsetLocations[index];
			lime_graphics_opengl_GL.context.enableVertexAttribArray(offsetLocation);
			lime_graphics_opengl_GL.context.vertexAttribPointer(offsetLocation,4,5126,false,64,index * 16);
			this._caps.instancedArrays.vertexAttribDivisorANGLE(offsetLocation,1);
		}
	}
	,unBindInstancesBuffer: function(instancesBuffer,offsetLocations) {
		lime_graphics_opengl_GL.context.bindBuffer(34962,instancesBuffer.buffer);
		var _g = 0;
		while(_g < 4) {
			var index = _g++;
			var offsetLocation = offsetLocations[index];
			lime_graphics_opengl_GL.context.disableVertexAttribArray(offsetLocation);
			this._caps.instancedArrays.vertexAttribDivisorANGLE(offsetLocation,0);
		}
	}
	,applyStates: function() {
		this._depthCullingState.apply();
		this._alphaState.apply();
	}
	,draw: function(useTriangles,indexStart,indexCount,instancesCount) {
		if(instancesCount == null) instancesCount = -1;
		this._depthCullingState.apply();
		this._alphaState.apply();
		this._drawCalls++;
		var indexFormat;
		if(this._uintIndicesCurrentlySet) indexFormat = 5125; else indexFormat = 5123;
		var mult;
		if(this._uintIndicesCurrentlySet) mult = 4; else mult = 2;
		if(instancesCount > -1) {
			this._caps.instancedArrays.drawElementsInstancedANGLE(useTriangles?4:1,indexCount,indexFormat,indexStart * mult,instancesCount);
			return;
		}
		lime_graphics_opengl_GL.context.drawElements(useTriangles?4:1,indexCount,indexFormat,indexStart * mult);
	}
	,drawPointClouds: function(verticesStart,verticesCount,instancesCount) {
		if(instancesCount == null) instancesCount = -1;
		this._depthCullingState.apply();
		this._alphaState.apply();
		this._drawCalls++;
		if(instancesCount > -1) {
			this._caps.instancedArrays.drawArraysInstancedANGLE(0,verticesStart,verticesCount,instancesCount);
			return;
		}
		lime_graphics_opengl_GL.context.drawArrays(0,verticesStart,verticesCount);
	}
	,_releaseEffect: function(effect) {
		if(this._compiledEffects.exists(effect._key)) {
			this._compiledEffects.remove(effect._key);
			if(effect._program != null) lime_graphics_opengl_GL.context.deleteProgram(effect._program);
		}
	}
	,createEffect: function(baseName,attributesNames,uniformsNames,samplers,defines,fallbacks,onCompiled,onError) {
		var vertex;
		if(baseName.vertexElement != null) vertex = baseName.vertexElement; else if(baseName.vertex != null) vertex = baseName.vertex; else vertex = baseName;
		var fragment;
		if(baseName.fragmentElement != null) fragment = baseName.fragmentElement; else if(baseName.fragment != null) fragment = baseName.fragment; else fragment = baseName;
		var name = vertex + "+" + fragment + "@" + defines;
		if(this._compiledEffects.exists(name)) return this._compiledEffects.get(name);
		var effect = new com_babylonhx_materials_Effect(baseName,attributesNames,uniformsNames,samplers,this,defines,fallbacks,onCompiled,onError);
		effect._key = name;
		this._compiledEffects.set(name,effect);
		return effect;
	}
	,createEffectForParticles: function(fragmentName,uniformsNames,samplers,defines,fallbacks,onCompiled,onError) {
		if(defines == null) defines = "";
		if(uniformsNames == null) uniformsNames = [];
		if(samplers == null) samplers = [];
		return this.createEffect({ vertex : "particles", fragment : fragmentName},["position","color","options"],["view","projection"].concat(uniformsNames),["diffuseSampler"].concat(samplers),defines,fallbacks,onCompiled,onError);
	}
	,createShaderProgram: function(vertexCode,fragmentCode,defines) {
		var vertexShader = com_babylonhx_Engine.compileShader(vertexCode,"vertex",defines);
		var fragmentShader = com_babylonhx_Engine.compileShader(fragmentCode,"fragment",defines);
		var shaderProgram = lime_graphics_opengl_GL.context.createProgram();
		lime_graphics_opengl_GL.context.attachShader(shaderProgram,vertexShader);
		lime_graphics_opengl_GL.context.attachShader(shaderProgram,fragmentShader);
		lime_graphics_opengl_GL.context.linkProgram(shaderProgram);
		var linked = lime_graphics_opengl_GL.context.getProgramParameter(shaderProgram,35714);
		if(linked == 0) {
			var error = lime_graphics_opengl_GL.context.getProgramInfoLog(shaderProgram);
			if(error != "") throw new js__$Boot_HaxeError(error);
		}
		lime_graphics_opengl_GL.context.deleteShader(vertexShader);
		lime_graphics_opengl_GL.context.deleteShader(fragmentShader);
		return shaderProgram;
	}
	,getUniforms: function(shaderProgram,uniformsNames) {
		var results = new haxe_ds_StringMap();
		var _g = 0;
		while(_g < uniformsNames.length) {
			var name = uniformsNames[_g];
			++_g;
			var uniform = lime_graphics_opengl_GL.context.getUniformLocation(shaderProgram,name);
			if(uniform != null) {
				if(__map_reserved[name] != null) results.setReserved(name,uniform); else results.h[name] = uniform;
			}
		}
		return results;
	}
	,getAttributes: function(shaderProgram,attributesNames) {
		var results = [];
		var _g1 = 0;
		var _g = attributesNames.length;
		while(_g1 < _g) {
			var index = _g1++;
			try {
				results.push(lime_graphics_opengl_GL.context.getAttribLocation(shaderProgram,attributesNames[index]));
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				haxe_Log.trace("getAttributes() -> ERROR: " + Std.string(e),{ fileName : "Engine.hx", lineNumber : 934, className : "com.babylonhx.Engine", methodName : "getAttributes"});
				results.push(-1);
			}
		}
		return results;
	}
	,enableEffect: function(effect) {
		if(effect == null || effect._attributes.length == 0 || this._currentEffect == effect) {
			if(effect != null && effect.onBind != null) effect.onBind(effect);
			return;
		}
		if(this._vertexAttribArrays != null) this._vertexAttribArrays = this._vertexAttribArrays; else this._vertexAttribArrays = [];
		lime_graphics_opengl_GL.context.useProgram(effect._program);
		var _g1 = 0;
		var _g = this._vertexAttribArrays.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(i > 34338 || !this._vertexAttribArrays[i]) continue;
			this._vertexAttribArrays[i] = false;
			lime_graphics_opengl_GL.context.disableVertexAttribArray(i);
		}
		var attributesCount = effect._attributes.length;
		var _g2 = 0;
		while(_g2 < attributesCount) {
			var index = _g2++;
			var order = effect._attributes[index];
			if(order >= 0) {
				this._vertexAttribArrays[order] = true;
				lime_graphics_opengl_GL.context.enableVertexAttribArray(order);
			}
		}
		this._currentEffect = effect;
		if(effect.onBind != null) effect.onBind(effect);
	}
	,setArray: function(uniform,array) {
		lime_graphics_opengl_GL.uniform1fv(uniform,(function($this) {
			var $r;
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
	}
	,setArray2: function(uniform,array) {
		if(array.length % 2 == 0) lime_graphics_opengl_GL.uniform2fv(uniform,(function($this) {
			var $r;
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
	}
	,setArray3: function(uniform,array) {
		if(array.length % 3 == 0) lime_graphics_opengl_GL.uniform3fv(uniform,(function($this) {
			var $r;
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
	}
	,setArray4: function(uniform,array) {
		if(array.length % 4 == 0) lime_graphics_opengl_GL.uniform4fv(uniform,(function($this) {
			var $r;
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
	}
	,setMatrices: function(uniform,matrices) {
		lime_graphics_opengl_GL.context.uniformMatrix4fv(uniform,false,matrices);
	}
	,setMatrix: function(uniform,matrix) {
		lime_graphics_opengl_GL.context.uniformMatrix4fv(uniform,false,matrix.m);
	}
	,setMatrix3x3: function(uniform,matrix) {
		lime_graphics_opengl_GL.context.uniformMatrix3fv(uniform,false,matrix);
	}
	,setMatrix2x2: function(uniform,matrix) {
		lime_graphics_opengl_GL.context.uniformMatrix2fv(uniform,false,matrix);
	}
	,setFloat: function(uniform,value) {
		lime_graphics_opengl_GL.context.uniform1f(uniform,value);
	}
	,setFloat2: function(uniform,x,y) {
		lime_graphics_opengl_GL.context.uniform2f(uniform,x,y);
	}
	,setFloat3: function(uniform,x,y,z) {
		lime_graphics_opengl_GL.context.uniform3f(uniform,x,y,z);
	}
	,setBool: function(uniform,bool) {
		lime_graphics_opengl_GL.context.uniform1i(uniform,bool?1:0);
	}
	,setFloat4: function(uniform,x,y,z,w) {
		lime_graphics_opengl_GL.context.uniform4f(uniform,x,y,z,w);
	}
	,setColor3: function(uniform,color3) {
		lime_graphics_opengl_GL.context.uniform3f(uniform,color3.r,color3.g,color3.b);
	}
	,setColor4: function(uniform,color3,alpha) {
		lime_graphics_opengl_GL.context.uniform4f(uniform,color3.r,color3.g,color3.b,alpha);
	}
	,setState: function(culling,zOffset,force,reverseSide) {
		if(reverseSide == null) reverseSide = false;
		if(force == null) force = false;
		if(zOffset == null) zOffset = 0;
		var showSide;
		if(reverseSide) showSide = 1028; else showSide = 1029;
		var hideSide;
		if(reverseSide) hideSide = 1029; else hideSide = 1028;
		var cullFace;
		if(this.cullBackFaces) cullFace = showSide; else cullFace = hideSide;
		if(this._depthCullingState.get_cull() != culling || force || this._depthCullingState.get_cullFace() != cullFace) {
			if(culling) {
				this._depthCullingState.set_cullFace(cullFace);
				this._depthCullingState.set_cull(true);
			} else this._depthCullingState.set_cull(false);
		}
		this._depthCullingState.set_zOffset(zOffset);
	}
	,setDepthBuffer: function(enable) {
		this._depthCullingState.set_depthTest(enable);
	}
	,getDepthWrite: function() {
		return this._depthCullingState.get_depthMask();
	}
	,setDepthWrite: function(enable) {
		this._depthCullingState.set_depthMask(enable);
	}
	,setColorWrite: function(enable) {
		lime_graphics_opengl_GL.context.colorMask(enable,enable,enable,enable);
	}
	,setAlphaMode: function(mode) {
		if(this._alphaMode == mode) return;
		switch(mode) {
		case 0:
			this._depthCullingState.set_depthMask(true);
			this._alphaState.set_alphaBlend(false);
			break;
		case 2:
			this._depthCullingState.set_depthMask(false);
			this._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
			this._alphaState.set_alphaBlend(true);
			break;
		case 6:
			this._depthCullingState.set_depthMask(false);
			this._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
			this._alphaState.set_alphaBlend(true);
			break;
		case 1:
			this._depthCullingState.set_depthMask(false);
			this._alphaState.setAlphaBlendFunctionParameters(770,1,0,1);
			this._alphaState.set_alphaBlend(true);
			break;
		case 3:
			this._depthCullingState.set_depthMask(false);
			this._alphaState.setAlphaBlendFunctionParameters(0,769,1,1);
			this._alphaState.set_alphaBlend(true);
			break;
		case 4:
			this._depthCullingState.set_depthMask(false);
			this._alphaState.setAlphaBlendFunctionParameters(774,0,1,1);
			this._alphaState.set_alphaBlend(true);
			break;
		case 5:
			this._depthCullingState.set_depthMask(false);
			this._alphaState.setAlphaBlendFunctionParameters(770,769,1,1);
			this._alphaState.set_alphaBlend(true);
			break;
		}
		this._alphaMode = mode;
	}
	,getAlphaMode: function() {
		return this._alphaMode;
	}
	,setAlphaTesting: function(enable) {
		this._alphaTest = enable;
	}
	,getAlphaTesting: function() {
		return this._alphaTest;
	}
	,wipeCaches: function() {
		this._activeTexturesCache = [];
		this._currentEffect = null;
		this._depthCullingState.reset();
		this._alphaState.reset();
		this._cachedVertexBuffers = null;
		this._cachedIndexBuffer = null;
		this._cachedEffectForVertexBuffers = null;
	}
	,setSamplingMode: function(texture,samplingMode) {
		lime_graphics_opengl_GL.context.bindTexture(3553,texture.data);
		var magFilter = 9728;
		var minFilter = 9728;
		if(samplingMode == 2) {
			magFilter = 9729;
			minFilter = 9729;
		} else if(samplingMode == 3) {
			magFilter = 9729;
			minFilter = 9987;
		}
		lime_graphics_opengl_GL.context.texParameteri(3553,10240,magFilter);
		lime_graphics_opengl_GL.context.texParameteri(3553,10241,minFilter);
		lime_graphics_opengl_GL.context.bindTexture(3553,null);
		texture.samplingMode = samplingMode;
	}
	,createTexture: function(url,noMipmap,invertY,scene,samplingMode,onLoad,onError,buffer) {
		if(samplingMode == null) samplingMode = 3;
		var texture = new com_babylonhx_materials_textures_WebGLTexture(url,lime_graphics_opengl_GL.context.createTexture());
		var extension = "";
		var fromData = null;
		if(HxOverrides.substr(url,0,5) == "data:") fromData = true;
		if(fromData == null) extension = HxOverrides.substr(url,url.length - 4,4).toLowerCase(); else {
			var oldUrl = url;
			fromData = oldUrl.split(":");
			url = oldUrl;
			extension = fromData[1].substr(fromData[1].length - 4,4).toLowerCase();
		}
		var isDDS = this.getCaps().s3tc && extension == ".dds";
		var isTGA = extension == ".tga";
		scene._addPendingData(texture);
		texture.url = url;
		texture.noMipmap = noMipmap;
		texture.references = 1;
		texture.samplingMode = samplingMode;
		this._loadedTexturesCache.push(texture);
		var onerror = function(e) {
			scene._removePendingData(texture);
			if(onError != null) onError();
		};
		if(isTGA) {
		} else if(isDDS) {
		} else {
			var onload = function(img) {
				com_babylonhx_Engine.prepareTexture(texture,lime_graphics_opengl_GL,scene,img.width,img.height,invertY,noMipmap,false,function(potWidth,potHeight) {
					lime_graphics_opengl_GL.texImage2D(3553,0,6408,potWidth,potHeight,0,6408,5121,img.data);
					if(onLoad != null) onLoad();
				},samplingMode);
			};
			if(!((fromData instanceof Array) && fromData.__enum__ == null)) com_babylonhx_tools_Tools.LoadImage(url,onload,onerror,scene.database); else com_babylonhx_tools_Tools.LoadImage(buffer,onload,onerror,scene.database);
		}
		return texture;
	}
	,createRawTexture: function(data,width,height,format,generateMipMaps,invertY,samplingMode,compression) {
		if(compression == null) compression = "";
		var texture = new com_babylonhx_materials_textures_WebGLTexture("",lime_graphics_opengl_GL.context.createTexture());
		texture._baseWidth = width;
		texture._baseHeight = height;
		texture._width = width;
		texture._height = height;
		texture.references = 1;
		this.updateRawTexture(texture,data,format,invertY,compression);
		lime_graphics_opengl_GL.context.bindTexture(3553,texture.data);
		var filters = com_babylonhx_Engine.getSamplingParameters(samplingMode,generateMipMaps);
		lime_graphics_opengl_GL.context.texParameteri(3553,10240,filters.mag);
		lime_graphics_opengl_GL.context.texParameteri(3553,10241,filters.min);
		lime_graphics_opengl_GL.context.bindTexture(3553,null);
		texture.samplingMode = samplingMode;
		this._loadedTexturesCache.push(texture);
		return texture;
	}
	,updateRawTexture: function(texture,data,format,invertY,compression) {
		if(compression == null) compression = "";
		if(invertY == null) invertY = false;
		var internalFormat = 6408;
		switch(format) {
		case 0:
			internalFormat = 6406;
			break;
		case 1:
			internalFormat = 6409;
			break;
		case 2:
			internalFormat = 6410;
			break;
		case 3:
			internalFormat = 6407;
			break;
		case 4:
			internalFormat = 6408;
			break;
		}
		lime_graphics_opengl_GL.context.bindTexture(3553,texture.data);
		if(compression != "") lime_graphics_opengl_GL.compressedTexImage2D(3553,0,Reflect.getProperty(this.getCaps().s3tc,compression),texture._width,texture._height,0,data); else lime_graphics_opengl_GL.context.texImage2D(3553,0,internalFormat,texture._width,texture._height,0,internalFormat,5121,data);
		if(texture.generateMipMaps) lime_graphics_opengl_GL.context.generateMipmap(3553);
		lime_graphics_opengl_GL.context.bindTexture(3553,null);
		this._activeTexturesCache = [];
		texture.isReady = true;
	}
	,createDynamicTexture: function(width,height,generateMipMaps,samplingMode) {
		var texture = new com_babylonhx_materials_textures_WebGLTexture("",lime_graphics_opengl_GL.context.createTexture());
		width = com_babylonhx_tools_Tools.GetExponantOfTwo(width,this._caps.maxTextureSize);
		height = com_babylonhx_tools_Tools.GetExponantOfTwo(height,this._caps.maxTextureSize);
		this._activeTexturesCache = [];
		texture._baseWidth = width;
		texture._baseHeight = height;
		texture._width = width;
		texture._height = height;
		texture.isReady = false;
		texture.generateMipMaps = generateMipMaps;
		texture.references = 1;
		texture.samplingMode = samplingMode;
		this.updateTextureSamplingMode(samplingMode,texture);
		this._loadedTexturesCache.push(texture);
		return texture;
	}
	,updateDynamicTexture: function(texture,canvas,invertY) {
		lime_graphics_opengl_GL.context.bindTexture(3553,texture.data);
		lime_graphics_opengl_GL.context.texImage2D(3553,0,6408,canvas.width,canvas.height,0,6408,5121,canvas.data);
		if(texture.generateMipMaps) lime_graphics_opengl_GL.context.generateMipmap(3553);
		lime_graphics_opengl_GL.context.bindTexture(3553,null);
		this._activeTexturesCache = [];
		texture.isReady = true;
	}
	,updateTextureSamplingMode: function(samplingMode,texture) {
		var filters = com_babylonhx_Engine.getSamplingParameters(samplingMode,texture.generateMipMaps);
		if(texture.isCube) {
			lime_graphics_opengl_GL.context.bindTexture(34067,texture.data);
			lime_graphics_opengl_GL.context.texParameteri(34067,10240,filters.mag);
			lime_graphics_opengl_GL.context.texParameteri(34067,10241,filters.min);
			lime_graphics_opengl_GL.context.bindTexture(34067,null);
		} else {
			lime_graphics_opengl_GL.context.bindTexture(3553,texture.data);
			lime_graphics_opengl_GL.context.texParameteri(3553,10240,filters.mag);
			lime_graphics_opengl_GL.context.texParameteri(3553,10241,filters.min);
			lime_graphics_opengl_GL.context.bindTexture(3553,null);
		}
	}
	,updateVideoTexture: function(texture,video,invertY) {
	}
	,createRenderTargetTexture: function(size,options) {
		var generateMipMaps = false;
		var generateDepthBuffer = true;
		var type = 0;
		var samplingMode = 3;
		if(options != null) {
			if(options.generateMipMaps != null) generateMipMaps = options.generateMipMaps; else generateMipMaps = options;
			if(options.generateDepthBuffer != null) generateDepthBuffer = options.generateDepthBuffer; else generateDepthBuffer = true;
			if(options.type == null) type = type; else type = options.type;
			if(options.samplingMode != null) samplingMode = options.samplingMode;
			if(type == 1) samplingMode = 1;
		}
		var texture = new com_babylonhx_materials_textures_WebGLTexture("",lime_graphics_opengl_GL.context.createTexture());
		lime_graphics_opengl_GL.context.bindTexture(3553,texture.data);
		var width;
		if(size.width != null) width = size.width; else width = size;
		var height;
		if(size.height != null) height = size.height; else height = size;
		var filters = com_babylonhx_Engine.getSamplingParameters(samplingMode,generateMipMaps);
		if(type == 1 && !this._caps.textureFloat) {
			type = 0;
			haxe_Log.trace("Float textures are not supported. Render target forced to TEXTURETYPE_UNSIGNED_BYTE type",{ fileName : "Engine.hx", lineNumber : 1472, className : "com.babylonhx.Engine", methodName : "createRenderTargetTexture"});
		}
		lime_graphics_opengl_GL.context.texParameteri(3553,10240,filters.mag);
		lime_graphics_opengl_GL.context.texParameteri(3553,10241,filters.min);
		lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
		lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
		lime_graphics_opengl_GL.texImage2D(3553,0,6408,width,height,0,6408,com_babylonhx_Engine.getWebGLTextureType(type),null);
		var depthBuffer = null;
		if(generateDepthBuffer) {
			depthBuffer = lime_graphics_opengl_GL.context.createRenderbuffer();
			lime_graphics_opengl_GL.context.bindRenderbuffer(36161,depthBuffer);
			lime_graphics_opengl_GL.context.renderbufferStorage(36161,33189,width,height);
		}
		var framebuffer = lime_graphics_opengl_GL.context.createFramebuffer();
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,framebuffer);
		if(generateDepthBuffer) lime_graphics_opengl_GL.context.framebufferRenderbuffer(36160,36096,36161,depthBuffer);
		lime_graphics_opengl_GL.context.bindTexture(3553,null);
		lime_graphics_opengl_GL.context.bindRenderbuffer(36161,null);
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
		texture._framebuffer = framebuffer;
		if(generateDepthBuffer) texture._depthBuffer = depthBuffer;
		texture._width = width;
		texture._height = height;
		texture.isReady = true;
		texture.generateMipMaps = generateMipMaps;
		texture.references = 1;
		texture.samplingMode = samplingMode;
		this._activeTexturesCache = [];
		this._loadedTexturesCache.push(texture);
		return texture;
	}
	,createRenderTargetCubeTexture: function(size,options) {
		var texture = new com_babylonhx_materials_textures_WebGLTexture("",lime_graphics_opengl_GL.context.createTexture());
		var generateMipMaps = true;
		var samplingMode = 3;
		if(options != null) {
			if(options.generateMipMaps == null) generateMipMaps = options; else generateMipMaps = options.generateMipMaps;
			if(options.samplingMode != null) samplingMode = options.samplingMode;
		}
		texture.isCube = true;
		texture.references = 1;
		texture.generateMipMaps = generateMipMaps;
		texture.references = 1;
		texture.samplingMode = samplingMode;
		var filters = com_babylonhx_Engine.getSamplingParameters(samplingMode,generateMipMaps);
		lime_graphics_opengl_GL.context.bindTexture(34067,texture.data);
		var _g = 0;
		while(_g < 6) {
			var face = _g++;
			lime_graphics_opengl_GL.context.texImage2D(34069 + face,0,6408,size,size,0,6408,5121,null);
		}
		lime_graphics_opengl_GL.context.texParameteri(34067,10240,filters.mag);
		lime_graphics_opengl_GL.context.texParameteri(34067,10241,filters.min);
		lime_graphics_opengl_GL.context.texParameteri(34067,10242,33071);
		lime_graphics_opengl_GL.context.texParameteri(34067,10243,33071);
		var depthBuffer = lime_graphics_opengl_GL.context.createRenderbuffer();
		lime_graphics_opengl_GL.context.bindRenderbuffer(36161,depthBuffer);
		lime_graphics_opengl_GL.context.renderbufferStorage(36161,33189,size,size);
		var framebuffer = lime_graphics_opengl_GL.context.createFramebuffer();
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,framebuffer);
		lime_graphics_opengl_GL.context.framebufferRenderbuffer(36160,36096,36161,depthBuffer);
		if(texture.generateMipMaps) {
			lime_graphics_opengl_GL.context.bindTexture(34067,texture.data);
			lime_graphics_opengl_GL.context.generateMipmap(34067);
		}
		lime_graphics_opengl_GL.context.bindTexture(34067,null);
		lime_graphics_opengl_GL.context.bindRenderbuffer(36161,null);
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
		texture._framebuffer = framebuffer;
		texture._depthBuffer = depthBuffer;
		this._activeTexturesCache = [];
		texture._width = size;
		texture._height = size;
		texture.isReady = true;
		return texture;
	}
	,createCubeTexture: function(rootUrl,scene,extensions,noMipmap) {
		if(noMipmap == null) noMipmap = false;
		var _g = this;
		var texture = new com_babylonhx_materials_textures_WebGLTexture(rootUrl,lime_graphics_opengl_GL.context.createTexture());
		texture.isCube = true;
		texture.url = rootUrl;
		texture.references = 1;
		var extension = HxOverrides.substr(rootUrl,rootUrl.length - 4,4).toLowerCase();
		var isDDS = this.getCaps().s3tc && extension == ".dds";
		if(isDDS) {
		} else {
			var faces = [34069,34071,34073,34070,34072,34074];
			var imgs = [];
			var _setTex = function(img,index) {
				_g._workingCanvas = img;
				lime_graphics_opengl_GL.texImage2D(faces[index],0,6408,_g._workingCanvas.width,_g._workingCanvas.height,0,6408,5121,img.data);
			};
			var generate = function() {
				var width = com_babylonhx_tools_Tools.GetExponantOfTwo(imgs[0].width,_g._caps.maxCubemapTextureSize);
				var height = width;
				lime_graphics_opengl_GL.context.bindTexture(34067,texture.data);
				var _g2 = 0;
				var _g1 = faces.length;
				while(_g2 < _g1) {
					var index1 = _g2++;
					_setTex(imgs[index1],index1);
				}
				if(!noMipmap) lime_graphics_opengl_GL.context.generateMipmap(34067);
				lime_graphics_opengl_GL.context.texParameteri(34067,10240,9729);
				lime_graphics_opengl_GL.context.texParameteri(34067,10241,noMipmap?9729:9987);
				lime_graphics_opengl_GL.context.texParameteri(34067,10242,33071);
				lime_graphics_opengl_GL.context.texParameteri(34067,10243,33071);
				lime_graphics_opengl_GL.context.bindTexture(34067,null);
				_g._activeTexturesCache = [];
				texture._width = width;
				texture._height = height;
				texture.isReady = true;
			};
			var i = 0;
			var loadImage;
			var loadImage1 = null;
			loadImage1 = function() {
				com_babylonhx_tools_Tools.LoadImage(rootUrl + extensions[i],function(bd) {
					imgs.push(bd);
					if(++i == extensions.length) generate(); else loadImage1();
				});
			};
			loadImage = loadImage1;
			loadImage();
		}
		return texture;
	}
	,_releaseTexture: function(texture) {
		if(texture._framebuffer != null) lime_graphics_opengl_GL.context.deleteFramebuffer(texture._framebuffer);
		if(texture._depthBuffer != null) lime_graphics_opengl_GL.context.deleteRenderbuffer(texture._depthBuffer);
		lime_graphics_opengl_GL.context.deleteTexture(texture.data);
		this.unbindAllTextures();
		var index = HxOverrides.indexOf(this._loadedTexturesCache,texture,0);
		if(index != -1) this._loadedTexturesCache.splice(index,1);
		texture = null;
	}
	,unbindAllTextures: function() {
		var _g1 = 0;
		var _g = this._caps.maxTexturesImageUnits;
		while(_g1 < _g) {
			var channel = _g1++;
			lime_graphics_opengl_GL.context.activeTexture(33984 + channel);
			lime_graphics_opengl_GL.context.bindTexture(3553,null);
			lime_graphics_opengl_GL.context.bindTexture(34067,null);
			this._activeTexturesCache[channel] = null;
		}
	}
	,getGLTexture: function(channel) {
		return 33984 + channel;
	}
	,bindSamplers: function(effect) {
		lime_graphics_opengl_GL.context.useProgram(effect._program);
		var samplers = effect._samplers;
		var _g1 = 0;
		var _g = samplers.length;
		while(_g1 < _g) {
			var index = _g1++;
			var uniform = effect._uniforms.get(samplers[index]);
			lime_graphics_opengl_GL.context.uniform1i(uniform,index);
		}
		this._currentEffect = null;
	}
	,_bindTexture: function(channel,texture) {
		lime_graphics_opengl_GL.context.activeTexture(33984 + channel);
		lime_graphics_opengl_GL.context.bindTexture(3553,texture.data);
		this._activeTexturesCache[channel] = null;
	}
	,setTextureFromPostProcess: function(channel,postProcess) {
		if(postProcess._textures.length > 0) {
			lime_graphics_opengl_GL.context.activeTexture(33984 + channel);
			lime_graphics_opengl_GL.context.bindTexture(3553,postProcess._textures.data[postProcess._currentRenderTextureInd].data);
			this._activeTexturesCache[channel] = null;
		}
	}
	,setTexture: function(channel,texture) {
		if(channel < 0) return;
		if(texture == null || !texture.isReady()) {
			if(this._activeTexturesCache[channel] != null) {
				lime_graphics_opengl_GL.context.activeTexture(33984 + channel);
				lime_graphics_opengl_GL.context.bindTexture(3553,null);
				lime_graphics_opengl_GL.context.bindTexture(34067,null);
				this._activeTexturesCache[channel] = null;
			}
			return;
		}
		if(js_Boot.__instanceof(texture,com_babylonhx_materials_textures_VideoTexture)) {
		} else if(texture.delayLoadState == 4) {
			texture.delayLoad();
			return;
		}
		if(this._activeTexturesCache[channel] == texture) return;
		this._activeTexturesCache[channel] = texture;
		var internalTexture = texture.getInternalTexture();
		lime_graphics_opengl_GL.context.activeTexture(33984 + channel);
		if(internalTexture.isCube) {
			lime_graphics_opengl_GL.context.bindTexture(34067,internalTexture.data);
			if(internalTexture._cachedCoordinatesMode != texture.coordinatesMode) {
				internalTexture._cachedCoordinatesMode = texture.coordinatesMode;
				var textureWrapMode;
				if(texture.coordinatesMode != 3 && texture.coordinatesMode != 5) textureWrapMode = 10497; else textureWrapMode = 33071;
				lime_graphics_opengl_GL.context.texParameteri(34067,10242,textureWrapMode);
				lime_graphics_opengl_GL.context.texParameteri(34067,10243,textureWrapMode);
			}
			this._setAnisotropicLevel(34067,texture);
		} else {
			lime_graphics_opengl_GL.context.bindTexture(3553,internalTexture.data);
			if(internalTexture._cachedWrapU != texture.wrapU) {
				internalTexture._cachedWrapU = texture.wrapU;
				var _g = texture.wrapU;
				switch(_g) {
				case 1:
					lime_graphics_opengl_GL.context.texParameteri(3553,10242,10497);
					break;
				case 0:
					lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
					break;
				case 2:
					lime_graphics_opengl_GL.context.texParameteri(3553,10242,33648);
					break;
				}
			}
			if(internalTexture._cachedWrapV != texture.wrapV) {
				internalTexture._cachedWrapV = texture.wrapV;
				var _g1 = texture.wrapV;
				switch(_g1) {
				case 1:
					lime_graphics_opengl_GL.context.texParameteri(3553,10243,10497);
					break;
				case 0:
					lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
					break;
				case 2:
					lime_graphics_opengl_GL.context.texParameteri(3553,10243,33648);
					break;
				}
			}
			this._setAnisotropicLevel(3553,texture);
		}
	}
	,_setAnisotropicLevel: function(key,texture) {
		var anisotropicFilterExtension = this._caps.textureAnisotropicFilterExtension;
		if(anisotropicFilterExtension != null && texture._cachedAnisotropicFilteringLevel != texture.anisotropicFilteringLevel) {
			lime_graphics_opengl_GL.texParameterf(key,anisotropicFilterExtension.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(texture.anisotropicFilteringLevel,this._caps.maxAnisotropy));
			texture._cachedAnisotropicFilteringLevel = texture.anisotropicFilteringLevel;
		}
	}
	,readPixels: function(x,y,width,height) {
		var data;
		var elements = height * width * 4;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		data = this1;
		lime_graphics_opengl_GL.context.readPixels(x,y,width,height,6408,5121,data);
		return data;
	}
	,dispose: function() {
		this.stopRenderLoop();
		while(this.scenes.length > 0) {
			this.scenes[0].dispose();
			this.scenes[0] = null;
			this.scenes.shift();
		}
		var $it0 = this._compiledEffects.keys();
		while( $it0.hasNext() ) {
			var name = $it0.next();
			lime_graphics_opengl_GL.deleteProgram(this._compiledEffects.get(name)._program);
		}
	}
	,__class__: com_babylonhx_Engine
	,__properties__: {get_drawCalls:"get_drawCalls"}
};
var com_babylonhx_EngineCapabilities = $hx_exports.BABYLON.EngineCapabilities = function() {
};
$hxClasses["com.babylonhx.EngineCapabilities"] = com_babylonhx_EngineCapabilities;
com_babylonhx_EngineCapabilities.__name__ = ["com","babylonhx","EngineCapabilities"];
com_babylonhx_EngineCapabilities.prototype = {
	maxTexturesImageUnits: null
	,maxTextureSize: null
	,maxCubemapTextureSize: null
	,maxRenderTextureSize: null
	,standardDerivatives: null
	,s3tc: null
	,textureFloat: null
	,textureAnisotropicFilterExtension: null
	,highPrecisionShaderSupported: null
	,fragmentDepthSupported: null
	,maxAnisotropy: null
	,instancedArrays: null
	,uintIndices: null
	,__class__: com_babylonhx_EngineCapabilities
};
var com_babylonhx_IDisposable = $hx_exports.BABYLON.IDisposable = function() { };
$hxClasses["com.babylonhx.IDisposable"] = com_babylonhx_IDisposable;
com_babylonhx_IDisposable.__name__ = ["com","babylonhx","IDisposable"];
com_babylonhx_IDisposable.prototype = {
	dispose: null
	,__class__: com_babylonhx_IDisposable
};
var com_babylonhx_ISmartArrayCompatible = $hx_exports.BABYLON.ISmartArrayCompatible = function() { };
$hxClasses["com.babylonhx.ISmartArrayCompatible"] = com_babylonhx_ISmartArrayCompatible;
com_babylonhx_ISmartArrayCompatible.__name__ = ["com","babylonhx","ISmartArrayCompatible"];
com_babylonhx_ISmartArrayCompatible.prototype = {
	__smartArrayFlags: null
	,__class__: com_babylonhx_ISmartArrayCompatible
};
var com_babylonhx_NodeCache = function() {
};
$hxClasses["com.babylonhx.NodeCache"] = com_babylonhx_NodeCache;
com_babylonhx_NodeCache.__name__ = ["com","babylonhx","NodeCache"];
com_babylonhx_NodeCache.prototype = {
	parent: null
	,position: null
	,scaling: null
	,pivotMatrixUpdated: null
	,rotationQuaternion: null
	,localMatrixUpdated: null
	,rotation: null
	,upVector: null
	,billboardMode: null
	,mode: null
	,minZ: null
	,maxZ: null
	,fov: null
	,aspectRatio: null
	,orthoLeft: null
	,orthoRight: null
	,orthoTop: null
	,orthoBottom: null
	,renderWidth: null
	,renderHeight: null
	,lockedTarget: null
	,target: null
	,alpha: null
	,beta: null
	,gamma: null
	,radius: null
	,targetScreenOffset: null
	,__class__: com_babylonhx_NodeCache
};
var com_babylonhx_Node = $hx_exports.BABYLON.Node = function(name,scene) {
	this.__smartArrayFlags = [];
	this._parentRenderId = -1;
	this._currentRenderId = -1;
	this._isReady = true;
	this._isEnabled = true;
	this._childrenFlag = -1;
	this.animations = [];
	this.state = "";
	this.name = name;
	this.id = name;
	this._scene = scene;
	this._initCache();
};
$hxClasses["com.babylonhx.Node"] = com_babylonhx_Node;
com_babylonhx_Node.__name__ = ["com","babylonhx","Node"];
com_babylonhx_Node.__interfaces__ = [com_babylonhx_ISmartArrayCompatible];
com_babylonhx_Node.prototype = {
	parent: null
	,name: null
	,id: null
	,uniqueId: null
	,state: null
	,animations: null
	,onReady: null
	,_childrenFlag: null
	,_isEnabled: null
	,_isReady: null
	,_currentRenderId: null
	,_parentRenderId: null
	,__smartArrayFlags: null
	,_waitingParentId: null
	,_scene: null
	,_cache: null
	,getScene: function() {
		return this._scene;
	}
	,getEngine: function() {
		return this._scene._engine;
	}
	,getWorldMatrix: function() {
		return com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	}
	,_initCache: function() {
		this._cache = new com_babylonhx_NodeCache();
		this._cache.parent = null;
	}
	,updateCache: function(force) {
		if(force == null) force = false;
		if(!force && this.isSynchronized(null)) return;
		this._cache.parent = this.parent;
		this._updateCache();
	}
	,_updateCache: function(ignoreParentClass) {
		if(ignoreParentClass == null) ignoreParentClass = false;
	}
	,_isSynchronized: function() {
		return true;
	}
	,_markSyncedWithParent: function() {
		this._parentRenderId = this.parent._currentRenderId;
	}
	,isSynchronizedWithParent: function() {
		if(this.parent == null) return true;
		if(this._parentRenderId != this.parent._currentRenderId) return false;
		return this.parent.isSynchronized(null);
	}
	,isSynchronized: function(updateCache) {
		if(updateCache == null) updateCache = false;
		var check = this.hasNewParent();
		check = check || !this.isSynchronizedWithParent();
		check = check || !this._isSynchronized();
		if(updateCache) this.updateCache(true);
		return !check;
	}
	,hasNewParent: function(update) {
		if(update == null) update = false;
		if(this._cache.parent == this.parent) return false;
		if(update) this._cache.parent = this.parent;
		return true;
	}
	,isReady: function() {
		return this._isReady;
	}
	,isEnabled: function() {
		if(!this._isEnabled) return false;
		if(this.parent != null) return this.parent.isEnabled();
		return true;
	}
	,setEnabled: function(value) {
		this._isEnabled = value;
	}
	,isDescendantOf: function(ancestor) {
		if(this.parent != null) {
			if(this.parent == ancestor) return true;
			return this.parent.isDescendantOf(ancestor);
		}
		return false;
	}
	,_getDescendants: function(list,results) {
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var index = _g1++;
			var item = list[index];
			if(item.isDescendantOf(this)) results.push(item);
		}
	}
	,getDescendants: function() {
		var results = [];
		this._getDescendants(this._scene.meshes,results);
		this._getDescendants(this._scene.lights,results);
		this._getDescendants(this._scene.cameras,results);
		return results;
	}
	,_setReady: function(state) {
		if(state == this._isReady) return;
		if(!state) {
			this._isReady = false;
			return;
		}
		this._isReady = true;
		if(this.onReady != null) this.onReady(this);
	}
	,getAnimationByName: function(name) {
		var _g1 = 0;
		var _g = this.animations.length;
		while(_g1 < _g) {
			var i = _g1++;
			var animation = this.animations[i];
			if(animation.name == name) return animation;
		}
		return null;
	}
	,__class__: com_babylonhx_Node
};
var com_babylonhx_Scene = $hx_exports.BABYLON.Scene = function(engine) {
	this._uniqueIdCounter = 0;
	this._edgesRenderers = new com_babylonhx_tools_SmartArray(16);
	this._scaledVelocity = new com_babylonhx_math_Vector3(0,0,0);
	this._scaledPosition = new com_babylonhx_math_Vector3(0,0,0);
	this._transformMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._activeAnimatables = [];
	this._activeBones = 0;
	this._softwareSkinnedMeshes = new com_babylonhx_tools_SmartArray(32);
	this._activeSkeletons = new com_babylonhx_tools_SmartArray(32);
	this._activeParticleSystems = new com_babylonhx_tools_SmartArray(256);
	this._renderTargets = new com_babylonhx_tools_SmartArray(256);
	this._processedMaterials = new com_babylonhx_tools_SmartArray(256);
	this._activeMeshes = new com_babylonhx_tools_SmartArray(256);
	this._onAfterRenderCallbacks = [];
	this._onBeforeRenderCallbacks = [];
	this._pendingData = [];
	this._onReadyCallbacks = [];
	this._toBeDisposed = new com_babylonhx_tools_SmartArray(256);
	this._executeWhenReadyTimeoutId = -1;
	this._renderId = 0;
	this._animationStartDate = -1;
	this._animationRatio = 0;
	this._spritesDuration = 0;
	this._renderDuration = 0;
	this._particlesDuration = 0;
	this._renderTargetsDuration = 0;
	this._evaluateActiveMeshesDuration = 0;
	this._lastFrameDuration = 0;
	this._activeParticles = 0;
	this._activeIndices = 0;
	this._totalVertices = 0;
	this._proceduralTextures = [];
	this.proceduralTexturesEnabled = true;
	this._meshesForIntersections = new com_babylonhx_tools_SmartArray(256);
	this._actionManagers = [];
	this.reflectionProbes = [];
	this.probesEnabled = true;
	this.importedMeshesFiles = [];
	this.customRenderTargets = [];
	this.dumpNextRenderTargets = false;
	this.renderTargetsEnabled = true;
	this.postProcessesEnabled = true;
	this.gravity = new com_babylonhx_math_Vector3(0,-9.0,0);
	this._workerCollisions = false;
	this.collisionsEnabled = true;
	this.lensFlareSystems = [];
	this.lensFlaresEnabled = true;
	this.skeletons = [];
	this.skeletonsEnabled = true;
	this.layers = [];
	this.spriteManagers = [];
	this.spritesEnabled = true;
	this.particleSystems = [];
	this.particlesEnabled = true;
	this.textures = [];
	this.texturesEnabled = true;
	this.multiMaterials = [];
	this.materials = [];
	this._geometries = [];
	this.meshes = [];
	this.activeCameras = [];
	this.cameras = [];
	this.lights = [];
	this.lightsEnabled = true;
	this.shadowsEnabled = true;
	this.fogEnd = 1000.0;
	this.fogStart = 0;
	this.fogDensity = 0.1;
	this.fogColor = new com_babylonhx_math_Color3(0.2,0.2,0.2);
	this.fogMode = com_babylonhx_Scene.FOGMODE_NONE;
	this.fogEnabled = true;
	this.cameraToUseForPointers = null;
	this.constantlyUpdateMeshUnderPointer = false;
	this.animationsEnabled = true;
	this.forceShowBoundingBoxes = false;
	this.forcePointsCloud = false;
	this.forceWireframe = false;
	this.ambientColor = new com_babylonhx_math_Color3(0,0,0);
	this.clearColor = new com_babylonhx_math_Color3(0.2,0.2,0.2);
	this.autoClear = true;
	this._engine = engine;
	engine.scenes.push(this);
	this.defaultMaterial = new com_babylonhx_materials_StandardMaterial("default material",this);
	this._renderingManager = new com_babylonhx_rendering_RenderingManager(this);
	this.postProcessManager = new com_babylonhx_postprocess_PostProcessManager(this);
	this.postProcessRenderPipelineManager = new com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipelineManager();
	this._boundingBoxRenderer = new com_babylonhx_rendering_BoundingBoxRenderer(this);
	this._outlineRenderer = new com_babylonhx_rendering_OutlineRenderer(this);
	this.attachControl();
	this.simplificationQueue = new com_babylonhx_mesh_simplification_SimplificationQueue();
	this.set_workerCollisions(false);
};
$hxClasses["com.babylonhx.Scene"] = com_babylonhx_Scene;
com_babylonhx_Scene.__name__ = ["com","babylonhx","Scene"];
com_babylonhx_Scene._eSMMaterial = null;
com_babylonhx_Scene.prototype = {
	autoClear: null
	,clearColor: null
	,ambientColor: null
	,beforeRender: null
	,afterRender: null
	,onDispose: null
	,beforeCameraRender: null
	,afterCameraRender: null
	,forceWireframe: null
	,forcePointsCloud: null
	,forceShowBoundingBoxes: null
	,clipPlane: null
	,animationsEnabled: null
	,constantlyUpdateMeshUnderPointer: null
	,_onPointerMove: null
	,onPointerMove: null
	,_onPointerDown: null
	,onPointerDown: null
	,_onPointerUp: null
	,onPointerUp: null
	,cameraToUseForPointers: null
	,_pointerX: null
	,_pointerY: null
	,_meshUnderPointer: null
	,_mirroredCameraPosition: null
	,_onKeyDown: null
	,_onKeyUp: null
	,fogEnabled: null
	,fogMode: null
	,fogColor: null
	,fogDensity: null
	,fogStart: null
	,fogEnd: null
	,shadowsEnabled: null
	,lightsEnabled: null
	,lights: null
	,onNewLightAdded: null
	,onLightRemoved: null
	,cameras: null
	,onNewCameraAdded: null
	,onCameraRemoved: null
	,activeCameras: null
	,activeCamera: null
	,meshes: null
	,onNewMeshAdded: null
	,onMeshRemoved: null
	,_geometries: null
	,onGeometryAdded: null
	,onGeometryRemoved: null
	,materials: null
	,multiMaterials: null
	,defaultMaterial: null
	,texturesEnabled: null
	,textures: null
	,particlesEnabled: null
	,particleSystems: null
	,spritesEnabled: null
	,spriteManagers: null
	,layers: null
	,skeletonsEnabled: null
	,skeletons: null
	,lensFlaresEnabled: null
	,lensFlareSystems: null
	,collisionsEnabled: null
	,_workerCollisions: null
	,set_workerCollisions: function(enabled) {
		this._workerCollisions = enabled;
		if(this.collisionCoordinator != null) this.collisionCoordinator.destroy();
		this.collisionCoordinator = new com_babylonhx_collisions_CollisionCoordinatorLegacy();
		this.collisionCoordinator.init(this);
		return enabled;
	}
	,get_workerCollisions: function() {
		return this._workerCollisions;
	}
	,get_SelectionOctree: function() {
		return this._selectionOctree;
	}
	,collisionCoordinator: null
	,gravity: null
	,postProcessesEnabled: null
	,postProcessManager: null
	,postProcessRenderPipelineManager: null
	,renderTargetsEnabled: null
	,dumpNextRenderTargets: null
	,customRenderTargets: null
	,useDelayedTextureLoading: null
	,importedMeshesFiles: null
	,probesEnabled: null
	,reflectionProbes: null
	,database: null
	,actionManager: null
	,_actionManagers: null
	,_meshesForIntersections: null
	,proceduralTexturesEnabled: null
	,_proceduralTextures: null
	,simplificationQueue: null
	,_engine: null
	,_totalVertices: null
	,_activeIndices: null
	,_activeParticles: null
	,_lastFrameDuration: null
	,_evaluateActiveMeshesDuration: null
	,_renderTargetsDuration: null
	,_particlesDuration: null
	,_renderDuration: null
	,_spritesDuration: null
	,_animationRatio: null
	,_animationStartDate: null
	,_cachedMaterial: null
	,_renderId: null
	,_executeWhenReadyTimeoutId: null
	,_toBeDisposed: null
	,_onReadyCallbacks: null
	,_pendingData: null
	,_onBeforeRenderCallbacks: null
	,_onAfterRenderCallbacks: null
	,_activeMeshes: null
	,_processedMaterials: null
	,_renderTargets: null
	,_activeParticleSystems: null
	,_activeSkeletons: null
	,_softwareSkinnedMeshes: null
	,_activeBones: null
	,_renderingManager: null
	,_physicsEngine: null
	,_activeAnimatables: null
	,_transformMatrix: null
	,_pickWithRayInverseMatrix: null
	,_scaledPosition: null
	,_scaledVelocity: null
	,_edgesRenderers: null
	,_boundingBoxRenderer: null
	,_outlineRenderer: null
	,_depthRenderer: null
	,_uniqueIdCounter: null
	,_viewMatrix: null
	,_projectionMatrix: null
	,_frustumPlanes: null
	,_selectionOctree: null
	,_pointerOverMesh: null
	,get_meshUnderPointer: function() {
		return this._meshUnderPointer;
	}
	,get_pointerX: function() {
		return this._pointerX;
	}
	,get_pointerY: function() {
		return this._pointerY;
	}
	,getCachedMaterial: function() {
		return this._cachedMaterial;
	}
	,getBoundingBoxRenderer: function() {
		return this._boundingBoxRenderer;
	}
	,getOutlineRenderer: function() {
		return this._outlineRenderer;
	}
	,getEngine: function() {
		return this._engine;
	}
	,getTotalVertices: function() {
		return this._totalVertices;
	}
	,getActiveVertices: function() {
		return this._activeIndices;
	}
	,getActiveParticles: function() {
		return this._activeParticles;
	}
	,getActiveBones: function() {
		return this._activeBones;
	}
	,getLastFrameDuration: function() {
		return this._lastFrameDuration;
	}
	,getEvaluateActiveMeshesDuration: function() {
		return this._evaluateActiveMeshesDuration;
	}
	,getActiveMeshes: function() {
		return this._activeMeshes;
	}
	,getRenderTargetsDuration: function() {
		return this._renderTargetsDuration;
	}
	,getRenderDuration: function() {
		return this._renderDuration;
	}
	,getParticlesDuration: function() {
		return this._particlesDuration;
	}
	,getSpritesDuration: function() {
		return this._spritesDuration;
	}
	,getAnimationRatio: function() {
		return this._animationRatio;
	}
	,getRenderId: function() {
		return this._renderId;
	}
	,incrementRenderId: function() {
		this._renderId++;
	}
	,_updatePointerPosition: function(x,y) {
		this._pointerX = x;
		this._pointerY = y;
		if(this.cameraToUseForPointers != null) {
			this._pointerX = this._pointerX - (this.cameraToUseForPointers.viewport.x | 0) * this._engine.getRenderWidth();
			this._pointerY = this._pointerY - (this.cameraToUseForPointers.viewport.y | 0) * this._engine.getRenderHeight();
		}
	}
	,attachControl: function() {
		var _g = this;
		var spritePredicate = function(sprite) {
			return sprite.isPickable && sprite.actionManager != null && sprite.actionManager.get_hasPickTriggers();
		};
		this._onPointerMove = function(x,y) {
			_g._pointerX = x;
			_g._pointerY = y;
			if(_g.cameraToUseForPointers != null) {
				_g._pointerX = _g._pointerX - (_g.cameraToUseForPointers.viewport.x | 0) * _g._engine.getRenderWidth();
				_g._pointerY = _g._pointerY - (_g.cameraToUseForPointers.viewport.y | 0) * _g._engine.getRenderHeight();
			}
			var pickResult = _g.pick(_g._pointerX,_g._pointerY,function(mesh) {
				return mesh.get_isPickable() && mesh.isVisible && mesh.isReady() && (_g.constantlyUpdateMeshUnderPointer || mesh.actionManager != null);
			},false,_g.cameraToUseForPointers);
			if(pickResult.hit && pickResult.pickedMesh != null) {
				_g._meshUnderPointer = pickResult.pickedMesh;
				_g.setPointerOverMesh(pickResult.pickedMesh);
			} else {
				pickResult = _g.pickSprite(_g._pointerX,_g._pointerY,spritePredicate,false,_g.cameraToUseForPointers);
				if(pickResult.hit && pickResult.pickedSprite != null) {
				} else {
					_g.setPointerOverMesh(null);
					_g._meshUnderPointer = null;
				}
			}
			if(_g.onPointerMove != null) _g.onPointerMove(pickResult);
		};
		this._onPointerDown = function(x1,y1,button) {
			_g._pointerX = x1;
			_g._pointerY = y1;
			if(_g.cameraToUseForPointers != null) {
				_g._pointerX = _g._pointerX - (_g.cameraToUseForPointers.viewport.x | 0) * _g._engine.getRenderWidth();
				_g._pointerY = _g._pointerY - (_g.cameraToUseForPointers.viewport.y | 0) * _g._engine.getRenderHeight();
			}
			var predicate = null;
			if(_g.onPointerDown == null) predicate = function(mesh1) {
				return mesh1.get_isPickable() && mesh1.isVisible && mesh1.isReady() && mesh1.actionManager != null && mesh1.actionManager.get_hasPickTriggers();
			};
			var pickResult1 = _g.pick(_g._pointerX,_g._pointerY,predicate,false,_g.cameraToUseForPointers);
			if(pickResult1.hit) {
				if(pickResult1.pickedMesh.actionManager != null) {
					switch(button) {
					case 0:
						pickResult1.pickedMesh.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnLeftPickTrigger,com_babylonhx_actions_ActionEvent.CreateNew(pickResult1.pickedMesh));
						break;
					case 1:
						pickResult1.pickedMesh.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnCenterPickTrigger,com_babylonhx_actions_ActionEvent.CreateNew(pickResult1.pickedMesh));
						break;
					case 2:
						pickResult1.pickedMesh.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnRightPickTrigger,com_babylonhx_actions_ActionEvent.CreateNew(pickResult1.pickedMesh));
						break;
					}
					pickResult1.pickedMesh.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnPickTrigger,com_babylonhx_actions_ActionEvent.CreateNew(pickResult1.pickedMesh));
				}
			}
			if(_g.onPointerDown != null) _g.onPointerDown(x1,y1,button,pickResult1);
			if(_g.spriteManagers.length > 0) {
				pickResult1 = _g.pickSprite(_g._pointerX,_g._pointerY,spritePredicate,false,_g.cameraToUseForPointers);
				if(pickResult1.hit && pickResult1.pickedSprite != null) {
					if(pickResult1.pickedSprite.actionManager != null) {
						switch(button) {
						case 0:
							pickResult1.pickedSprite.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnLeftPickTrigger,com_babylonhx_actions_ActionEvent.CreateNewFromSprite(pickResult1.pickedSprite,_g));
							break;
						case 1:
							pickResult1.pickedSprite.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnCenterPickTrigger,com_babylonhx_actions_ActionEvent.CreateNewFromSprite(pickResult1.pickedSprite,_g));
							break;
						case 2:
							pickResult1.pickedSprite.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnRightPickTrigger,com_babylonhx_actions_ActionEvent.CreateNewFromSprite(pickResult1.pickedSprite,_g));
							break;
						}
						pickResult1.pickedSprite.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnPickTrigger,com_babylonhx_actions_ActionEvent.CreateNewFromSprite(pickResult1.pickedSprite,_g));
					}
				}
			}
		};
		this._onPointerUp = function(x2,y2,button1) {
			var predicate1 = null;
			_g._pointerX = x2;
			_g._pointerY = y2;
			if(_g.cameraToUseForPointers != null) {
				_g._pointerX = _g._pointerX - (_g.cameraToUseForPointers.viewport.x | 0) * _g._engine.getRenderWidth();
				_g._pointerY = _g._pointerY - (_g.cameraToUseForPointers.viewport.y | 0) * _g._engine.getRenderHeight();
			}
			if(_g.onPointerUp == null) predicate1 = function(mesh2) {
				return mesh2.get_isPickable() && mesh2.isVisible && mesh2.isReady() && mesh2.actionManager != null && mesh2.actionManager.hasSpecificTrigger(com_babylonhx_actions_ActionManager.OnPickUpTrigger);
			};
			var pickResult2 = _g.pick(_g._pointerX,_g._pointerY,predicate1,false,_g.cameraToUseForPointers);
			if(pickResult2.hit) {
				if(pickResult2.pickedMesh.actionManager != null) pickResult2.pickedMesh.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnPickUpTrigger,com_babylonhx_actions_ActionEvent.CreateNew(pickResult2.pickedMesh));
			}
			if(_g.onPointerUp != null) _g.onPointerUp(x2,y2,button1,pickResult2);
			if(_g.spriteManagers.length > 0) {
				pickResult2 = _g.pickSprite(_g._pointerX,_g._pointerY,spritePredicate,false,_g.cameraToUseForPointers);
				if(pickResult2.hit && pickResult2.pickedSprite != null) {
					if(pickResult2.pickedSprite.actionManager != null) pickResult2.pickedSprite.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnPickUpTrigger,com_babylonhx_actions_ActionEvent.CreateNewFromSprite(pickResult2.pickedSprite,_g));
				}
			}
		};
		this._onKeyDown = function(keycode) {
			if(_g.actionManager != null) _g.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnKeyDownTrigger,com_babylonhx_actions_ActionEvent.CreateNewFromScene(_g,keycode));
		};
		this._onKeyUp = function(keycode1) {
			if(_g.actionManager != null) _g.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnKeyUpTrigger,com_babylonhx_actions_ActionEvent.CreateNewFromScene(_g,keycode1));
		};
		com_babylonhx_Engine.mouseDown.push(this._onPointerDown);
		com_babylonhx_Engine.mouseUp.push(this._onPointerUp);
		com_babylonhx_Engine.mouseMove.push(this._onPointerMove);
		com_babylonhx_Engine.keyDown.push(this._onKeyDown);
		com_babylonhx_Engine.keyUp.push(this._onKeyUp);
	}
	,detachControl: function() {
		var x = this._onPointerDown;
		HxOverrides.remove(com_babylonhx_Engine.mouseDown,x);
		var x1 = this._onPointerUp;
		HxOverrides.remove(com_babylonhx_Engine.mouseUp,x1);
		var x2 = this._onPointerMove;
		HxOverrides.remove(com_babylonhx_Engine.mouseMove,x2);
		var x3 = this._onKeyDown;
		HxOverrides.remove(com_babylonhx_Engine.keyDown,x3);
		var x4 = this._onKeyUp;
		HxOverrides.remove(com_babylonhx_Engine.keyUp,x4);
	}
	,isReady: function() {
		if(this._pendingData.length > 0) return false;
		var _g1 = 0;
		var _g = this._geometries.length;
		while(_g1 < _g) {
			var index = _g1++;
			var geometry = this._geometries[index];
			if(geometry.delayLoadState == 2) return false;
		}
		var _g11 = 0;
		var _g2 = this.meshes.length;
		while(_g11 < _g2) {
			var index1 = _g11++;
			var mesh = this.meshes[index1];
			if(!mesh.isReady()) return false;
			var mat = mesh.get_material();
			if(mat != null) {
				if(!mat.isReady(mesh)) return false;
			}
		}
		return true;
	}
	,resetCachedMaterial: function() {
		this._cachedMaterial = null;
	}
	,registerBeforeRender: function(func) {
		this._onBeforeRenderCallbacks.push(func);
	}
	,unregisterBeforeRender: function(func) {
		HxOverrides.remove(this._onBeforeRenderCallbacks,func);
	}
	,registerAfterRender: function(func) {
		this._onAfterRenderCallbacks.push(func);
	}
	,unregisterAfterRender: function(func) {
		HxOverrides.remove(this._onAfterRenderCallbacks,func);
	}
	,_addPendingData: function(data) {
		this._pendingData.push(data);
	}
	,_removePendingData: function(data) {
		var x = data;
		HxOverrides.remove(this._pendingData,x);
	}
	,getWaitingItemsCount: function() {
		return this._pendingData.length;
	}
	,executeWhenReady: function(func) {
		this._onReadyCallbacks.push(func);
		if(this._executeWhenReadyTimeoutId != -1) return;
		this._executeWhenReadyTimeoutId = 1;
		com_babylonhx_tools_Tools.delay($bind(this,this._checkIsReady),150);
	}
	,_checkIsReady: function() {
		if(this.isReady()) {
			var _g = 0;
			var _g1 = this._onReadyCallbacks;
			while(_g < _g1.length) {
				var func = _g1[_g];
				++_g;
				func();
			}
			this._onReadyCallbacks = [];
			this._executeWhenReadyTimeoutId = -1;
			return;
		}
		this._executeWhenReadyTimeoutId = 1;
		com_babylonhx_tools_Tools.delay($bind(this,this._checkIsReady),150);
	}
	,beginAnimation: function(target,from,to,loop,speedRatio,onAnimationEnd,animatable) {
		if(speedRatio == null) speedRatio = 1.0;
		if(loop == null) loop = false;
		this.stopAnimation(target);
		if(animatable == null) animatable = new com_babylonhx_animations_Animatable(this,target,from,to,loop,speedRatio,onAnimationEnd);
		if(target.animations != null) animatable.appendAnimations(target,target.animations);
		if(target.getAnimatables != null) {
			var animatables = target.getAnimatables();
			var _g1 = 0;
			var _g = animatables.length;
			while(_g1 < _g) {
				var index = _g1++;
				this.beginAnimation(animatables[index],from,to,loop,speedRatio,onAnimationEnd,animatable);
			}
		}
		return animatable;
	}
	,beginDirectAnimation: function(target,animations,from,to,loop,speedRatio,onAnimationEnd) {
		if(speedRatio == null) speedRatio = 1.0;
		if(loop == null) loop = false;
		var animatable = new com_babylonhx_animations_Animatable(this,target,from,to,loop,speedRatio,onAnimationEnd,animations);
		return animatable;
	}
	,getAnimatableByTarget: function(target) {
		var _g1 = 0;
		var _g = this._activeAnimatables.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this._activeAnimatables[index].target == target) return this._activeAnimatables[index];
		}
		return null;
	}
	,stopAnimation: function(target) {
		var animatable = this.getAnimatableByTarget(target);
		if(animatable != null) animatable.stop();
	}
	,_animate: function() {
		if(!this.animationsEnabled) return;
		if(this._animationStartDate == -1) this._animationStartDate = Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000);
		var now = Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000);
		var delay = now - this._animationStartDate;
		var _g1 = 0;
		var _g = this._activeAnimatables.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this._activeAnimatables[index] != null) this._activeAnimatables[index]._animate(delay);
		}
	}
	,getViewMatrix: function() {
		return this._viewMatrix;
	}
	,getProjectionMatrix: function() {
		return this._projectionMatrix;
	}
	,getTransformMatrix: function() {
		return this._transformMatrix;
	}
	,setTransformMatrix: function(view,projection) {
		this._viewMatrix = view;
		this._projectionMatrix = projection;
		this._viewMatrix.multiplyToRef(this._projectionMatrix,this._transformMatrix);
	}
	,addMesh: function(newMesh) {
		newMesh.uniqueId = this._uniqueIdCounter++;
		var position = this.meshes.push(newMesh);
		this.collisionCoordinator.onMeshAdded(newMesh);
		if(this.onNewMeshAdded != null) this.onNewMeshAdded(newMesh,position,this);
	}
	,removeMesh: function(toRemove) {
		var index = HxOverrides.indexOf(this.meshes,toRemove,0);
		if(index != -1) this.meshes.splice(index,1);
		this.collisionCoordinator.onMeshRemoved(toRemove);
		if(this.onMeshRemoved != null) this.onMeshRemoved(toRemove);
		return index;
	}
	,removeSkeleton: function(toRemove) {
		var index = HxOverrides.indexOf(this.skeletons,toRemove,0);
		if(index != -1) this.skeletons.splice(index,1);
		return index;
	}
	,removeLight: function(toRemove) {
		var index = HxOverrides.indexOf(this.lights,toRemove,0);
		if(index != -1) this.lights.splice(index,1);
		if(this.onLightRemoved != null) this.onLightRemoved(toRemove);
		return index;
	}
	,removeCamera: function(toRemove) {
		var index = HxOverrides.indexOf(this.cameras,toRemove,0);
		if(index != -1) this.cameras.splice(index,1);
		index = HxOverrides.indexOf(this.activeCameras,toRemove,0);
		if(index != -1) this.activeCameras.splice(index,1);
		if(this.activeCamera == toRemove) {
			if(this.cameras.length > 0) this.activeCamera = this.cameras[0]; else this.activeCamera = null;
		}
		if(this.onCameraRemoved != null) this.onCameraRemoved(toRemove);
		return index;
	}
	,addLight: function(newLight) {
		newLight.uniqueId = this._uniqueIdCounter++;
		var position = this.lights.push(newLight);
		if(this.onNewLightAdded != null) this.onNewLightAdded(newLight,position,this);
	}
	,addCamera: function(newCamera) {
		newCamera.uniqueId = this._uniqueIdCounter++;
		var position = this.cameras.push(newCamera);
		if(this.onNewCameraAdded != null) this.onNewCameraAdded(newCamera,position,this);
	}
	,setActiveCameraByID: function(id) {
		var camera = this.getCameraByID(id);
		if(camera != null) {
			this.activeCamera = camera;
			return camera;
		}
		return null;
	}
	,setActiveCameraByName: function(name) {
		var camera = this.getCameraByName(name);
		if(camera != null) {
			this.activeCamera = camera;
			return camera;
		}
		return null;
	}
	,getMaterialByID: function(id) {
		var _g1 = 0;
		var _g = this.materials.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.materials[index].id == id) return this.materials[index];
		}
		return null;
	}
	,getMaterialByName: function(name) {
		var _g1 = 0;
		var _g = this.materials.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.materials[index].name == name) return this.materials[index];
		}
		return null;
	}
	,getLensFlareSystemByName: function(name) {
		var _g1 = 0;
		var _g = this.lensFlareSystems.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.lensFlareSystems[index].name == name) return this.lensFlareSystems[index];
		}
		return null;
	}
	,getCameraByID: function(id) {
		var _g1 = 0;
		var _g = this.cameras.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.cameras[index].id == id) return this.cameras[index];
		}
		return null;
	}
	,getCameraByUniqueID: function(uniqueId) {
		var _g1 = 0;
		var _g = this.cameras.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.cameras[index].uniqueId == uniqueId) return this.cameras[index];
		}
		return null;
	}
	,getCameraByName: function(name) {
		var _g1 = 0;
		var _g = this.cameras.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.cameras[index].name == name) return this.cameras[index];
		}
		return null;
	}
	,getLightByName: function(name) {
		var _g1 = 0;
		var _g = this.lights.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.lights[index].name == name) return this.lights[index];
		}
		return null;
	}
	,getLightByID: function(id) {
		var _g1 = 0;
		var _g = this.lights.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.lights[index].id == id) return this.lights[index];
		}
		return null;
	}
	,getLightByUniqueID: function(uniqueId) {
		var _g1 = 0;
		var _g = this.lights.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.lights[index].uniqueId == uniqueId) return this.lights[index];
		}
		return null;
	}
	,getGeometryByID: function(id) {
		var _g1 = 0;
		var _g = this._geometries.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this._geometries[index].id == id) return this._geometries[index];
		}
		return null;
	}
	,pushGeometry: function(geometry,force) {
		if(force == null) force = false;
		if(!force && this.getGeometryByID(geometry.id) != null) return false;
		this.collisionCoordinator.onGeometryAdded(geometry);
		this._geometries.push(geometry);
		if(this.onGeometryAdded != null) this.onGeometryAdded(geometry);
		return true;
	}
	,removeGeometry: function(geometry) {
		var index = HxOverrides.indexOf(this._geometries,geometry,0);
		if(index > -1) {
			this._geometries.splice(index,1);
			this.collisionCoordinator.onGeometryDeleted(geometry);
			if(this.onGeometryRemoved != null) this.onGeometryRemoved(geometry);
			return true;
		}
		return false;
	}
	,getGeometries: function() {
		return this._geometries;
	}
	,getMeshByID: function(id) {
		var _g1 = 0;
		var _g = this.meshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.meshes[index].id == id) return this.meshes[index];
		}
		return null;
	}
	,getMeshByUniqueID: function(uniqueId) {
		var _g1 = 0;
		var _g = this.meshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.meshes[index].uniqueId == uniqueId) return this.meshes[index];
		}
		return null;
	}
	,getLastMeshByID: function(id) {
		var index = this.meshes.length - 1;
		while(index >= 0) {
			if(this.meshes[index].id == id) return this.meshes[index];
			--index;
		}
		return null;
	}
	,getLastEntryByID: function(id) {
		var index = this.meshes.length - 1;
		while(index >= 0) {
			if(this.meshes[index].id == id) return this.meshes[index];
			--index;
		}
		index = this.cameras.length - 1;
		while(index >= 0) {
			if(this.cameras[index].id == id) return this.cameras[index];
			--index;
		}
		index = this.lights.length - 1;
		while(index >= 0) {
			if(this.lights[index].id == id) return this.lights[index];
			--index;
		}
		return null;
	}
	,getNodeByID: function(id) {
		var mesh = this.getMeshByID(id);
		if(mesh != null) return mesh;
		var light = this.getLightByID(id);
		if(light != null) return light;
		return this.getCameraByID(id);
	}
	,getNodeByName: function(name) {
		var mesh = this.getMeshByName(name);
		if(mesh != null) return mesh;
		var light = this.getLightByName(name);
		if(light != null) return light;
		return this.getCameraByName(name);
	}
	,getMeshByName: function(name) {
		var _g1 = 0;
		var _g = this.meshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.meshes[index].name == name) return this.meshes[index];
		}
		return null;
	}
	,getLastSkeletonByID: function(id) {
		var index = this.skeletons.length - 1;
		while(index >= 0) {
			if(this.skeletons[index].id == id) return this.skeletons[index];
			--index;
		}
		return null;
	}
	,getSkeletonById: function(id) {
		var _g1 = 0;
		var _g = this.skeletons.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.skeletons[index].id == id) return this.skeletons[index];
		}
		return null;
	}
	,getSkeletonByName: function(name) {
		var _g1 = 0;
		var _g = this.skeletons.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.skeletons[index].name == name) return this.skeletons[index];
		}
		return null;
	}
	,isActiveMesh: function(mesh) {
		return this._activeMeshes.indexOf(mesh) != -1;
	}
	,_evaluateSubMesh: function(subMesh,mesh) {
		if(mesh.alwaysSelectAsActiveMesh || mesh.subMeshes.length == 1 || subMesh._boundingInfo.isInFrustum(this._frustumPlanes)) {
			com_babylonhx_Scene._eSMMaterial = subMesh.getMaterial();
			if(mesh.showSubMeshesBoundingBox) this._boundingBoxRenderer.renderList.push(subMesh._boundingInfo.boundingBox);
			if(com_babylonhx_Scene._eSMMaterial != null) {
				if(com_babylonhx_Scene._eSMMaterial.getRenderTargetTextures != null) {
					if(this._processedMaterials.indexOf(com_babylonhx_Scene._eSMMaterial) == -1) {
						this._processedMaterials.push(com_babylonhx_Scene._eSMMaterial);
						this._renderTargets.concatSmartArray(com_babylonhx_Scene._eSMMaterial.getRenderTargetTextures());
					}
				}
				this._activeIndices += subMesh.verticesCount;
				this._renderingManager.dispatch(subMesh);
			}
		}
	}
	,_evaluateActiveMeshes: function() {
		this.activeCamera._activeMeshes.reset();
		this._activeMeshes.reset();
		this._renderingManager.reset();
		this._processedMaterials.reset();
		this._activeParticleSystems.reset();
		this._activeSkeletons.reset();
		this._softwareSkinnedMeshes.reset();
		this._boundingBoxRenderer.reset();
		this._edgesRenderers.reset();
		if(this._frustumPlanes == null) this._frustumPlanes = com_babylonhx_math_Frustum.GetPlanes(this._transformMatrix); else com_babylonhx_math_Frustum.GetPlanesToRef(this._transformMatrix,this._frustumPlanes);
		com_babylonhx_Scene._activeMeshes_ = null;
		var len = -1;
		if(this._selectionOctree != null) {
			var selection = this._selectionOctree.select(this._frustumPlanes,null);
			com_babylonhx_Scene._activeMeshes_ = selection.data;
			len = selection.length;
		} else {
			len = this.meshes.length;
			com_babylonhx_Scene._activeMeshes_ = this.meshes;
		}
		var _g = 0;
		while(_g < len) {
			var meshIndex = _g++;
			com_babylonhx_Scene._activeMesh_ = com_babylonhx_Scene._activeMeshes_[meshIndex];
			if(com_babylonhx_Scene._activeMesh_.get_isBlocked()) continue;
			this._totalVertices += com_babylonhx_Scene._activeMesh_.getTotalVertices();
			if(!com_babylonhx_Scene._activeMesh_.isReady() || !com_babylonhx_Scene._activeMesh_.isEnabled()) continue;
			com_babylonhx_Scene._activeMesh_.computeWorldMatrix();
			if(com_babylonhx_Scene._activeMesh_.actionManager != null && com_babylonhx_Scene._activeMesh_.actionManager.hasSpecificTriggers([com_babylonhx_actions_ActionManager.OnIntersectionEnterTrigger,com_babylonhx_actions_ActionManager.OnIntersectionExitTrigger])) this._meshesForIntersections.pushNoDuplicate(com_babylonhx_Scene._activeMesh_);
			var meshLOD = com_babylonhx_Scene._activeMesh_.getLOD(this.activeCamera);
			if(meshLOD == null) continue;
			com_babylonhx_Scene._activeMesh_._preActivate();
			if(com_babylonhx_Scene._activeMesh_.alwaysSelectAsActiveMesh || com_babylonhx_Scene._activeMesh_.isVisible && com_babylonhx_Scene._activeMesh_.get_visibility() > 0 && (com_babylonhx_Scene._activeMesh_.layerMask & this.activeCamera.layerMask) != 0 && com_babylonhx_Scene._activeMesh_.isInFrustum(this._frustumPlanes)) {
				this._activeMeshes.push(com_babylonhx_Scene._activeMesh_);
				this.activeCamera._activeMeshes.push(com_babylonhx_Scene._activeMesh_);
				com_babylonhx_Scene._activeMesh_._activate(this._renderId);
				this._activeMesh(meshLOD);
			}
		}
		if(this.particlesEnabled) {
			var _g1 = 0;
			var _g2 = this.particleSystems.length;
			while(_g1 < _g2) {
				var particleIndex = _g1++;
				var particleSystem = this.particleSystems[particleIndex];
				if(!particleSystem._started) continue;
				if(particleSystem.emitter.position == null || particleSystem.emitter != null && particleSystem.emitter.isEnabled()) {
					this._activeParticleSystems.push(particleSystem);
					particleSystem.animate();
				}
			}
		}
	}
	,_activeMesh: function(mesh) {
		if(mesh.get_skeleton() != null && this.skeletonsEnabled) {
			this._activeSkeletons.pushNoDuplicate(mesh.get_skeleton());
			if(!mesh.computeBonesUsingShaders) this._softwareSkinnedMeshes.pushNoDuplicate(mesh);
		}
		if(mesh.showBoundingBox || this.forceShowBoundingBoxes) this._boundingBoxRenderer.renderList.push(mesh.getBoundingInfo().boundingBox);
		if(mesh._edgesRenderer != null) this._edgesRenderers.push(mesh._edgesRenderer);
		if(mesh != null && mesh.subMeshes != null) {
			var len = -1;
			var subMeshes = null;
			if(mesh._submeshesOctree != null && mesh.useOctreeForRenderingSelection) {
				var intersections = mesh._submeshesOctree.select(this._frustumPlanes,null);
				len = intersections.length;
				subMeshes = intersections.data;
			} else {
				subMeshes = mesh.subMeshes;
				len = subMeshes.length;
			}
			var _g = 0;
			while(_g < len) {
				var subIndex = _g++;
				var subMesh = subMeshes[subIndex];
				if(mesh.alwaysSelectAsActiveMesh || mesh.subMeshes.length == 1 || subMesh._boundingInfo.isInFrustum(this._frustumPlanes)) {
					com_babylonhx_Scene._eSMMaterial = subMesh.getMaterial();
					if(mesh.showSubMeshesBoundingBox) this._boundingBoxRenderer.renderList.push(subMesh._boundingInfo.boundingBox);
					if(com_babylonhx_Scene._eSMMaterial != null) {
						if(com_babylonhx_Scene._eSMMaterial.getRenderTargetTextures != null) {
							if(this._processedMaterials.indexOf(com_babylonhx_Scene._eSMMaterial) == -1) {
								this._processedMaterials.push(com_babylonhx_Scene._eSMMaterial);
								this._renderTargets.concatSmartArray(com_babylonhx_Scene._eSMMaterial.getRenderTargetTextures());
							}
						}
						this._activeIndices += subMesh.verticesCount;
						this._renderingManager.dispatch(subMesh);
					}
				}
			}
		}
	}
	,updateTransformMatrix: function(force) {
		if(force == null) force = false;
		this.setTransformMatrix(this.activeCamera.getViewMatrix(),this.activeCamera.getProjectionMatrix(force));
	}
	,_renderForCamera: function(camera) {
		var engine = this._engine;
		this.activeCamera = camera;
		if(this.activeCamera == null) throw new js__$Boot_HaxeError("Active camera not set");
		engine.setViewport(this.activeCamera.viewport,null,null);
		this._renderId++;
		this.setTransformMatrix(this.activeCamera.getViewMatrix(),this.activeCamera.getProjectionMatrix(false));
		if(this.beforeCameraRender != null) this.beforeCameraRender(this.activeCamera);
		var beforeEvaluateActiveMeshesDate = Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000);
		this._evaluateActiveMeshes();
		this._evaluateActiveMeshesDuration += Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000) - beforeEvaluateActiveMeshesDate;
		var _g1 = 0;
		var _g = this._activeSkeletons.length;
		while(_g1 < _g) {
			var skeletonIndex = _g1++;
			var skeleton = this._activeSkeletons.data[skeletonIndex];
			skeleton.prepare();
		}
		var _g11 = 0;
		var _g2 = this._softwareSkinnedMeshes.length;
		while(_g11 < _g2) {
			var softwareSkinnedMeshIndex = _g11++;
			var mesh = this._softwareSkinnedMeshes.data[softwareSkinnedMeshIndex];
			mesh.applySkeleton(mesh.get_skeleton());
		}
		var beforeRenderTargetDate = Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000);
		if(this.renderTargetsEnabled) {
			var _g12 = 0;
			var _g3 = this._renderTargets.length;
			while(_g12 < _g3) {
				var renderIndex = _g12++;
				var renderTarget = this._renderTargets.data[renderIndex];
				if(renderTarget._shouldRender()) {
					this._renderId++;
					var hasSpecialRenderTargetCamera = renderTarget.activeCamera != null && renderTarget.activeCamera != this.activeCamera;
					renderTarget.render(hasSpecialRenderTargetCamera);
				}
			}
			this._renderId++;
		}
		if(this._renderTargets.length > 0) {
			engine._currentRenderTarget = null;
			lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
			engine.setViewport(engine._cachedViewport,null,null);
			engine.wipeCaches();
		}
		this._renderTargetsDuration += Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000) - beforeRenderTargetDate;
		this.postProcessManager._prepareFrame();
		var beforeRenderDate = Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000);
		if(this.layers.length > 0) {
			engine._depthCullingState.set_depthTest(false);
			var layer = null;
			var _g13 = 0;
			var _g4 = this.layers.length;
			while(_g13 < _g4) {
				var layerIndex = _g13++;
				layer = this.layers[layerIndex];
				if(layer.isBackground) layer.render();
			}
			engine._depthCullingState.set_depthTest(true);
		}
		this._renderingManager.render(null,null,true,true);
		this._boundingBoxRenderer.render();
		var _g14 = 0;
		var _g5 = this._edgesRenderers.length;
		while(_g14 < _g5) {
			var edgesRendererIndex = _g14++;
			this._edgesRenderers.data[edgesRendererIndex].render();
		}
		if(this.lensFlaresEnabled) {
			var _g15 = 0;
			var _g6 = this.lensFlareSystems.length;
			while(_g15 < _g6) {
				var lensFlareSystemIndex = _g15++;
				var lensFlareSystem = this.lensFlareSystems[lensFlareSystemIndex];
				if((camera.layerMask & lensFlareSystem.layerMask) != 0) lensFlareSystem.render();
			}
		}
		if(this.layers.length > 0) {
			engine._depthCullingState.set_depthTest(false);
			var _g16 = 0;
			var _g7 = this.layers.length;
			while(_g16 < _g7) {
				var layerIndex1 = _g16++;
				var layer1 = this.layers[layerIndex1];
				if(!layer1.isBackground) layer1.render();
			}
			engine._depthCullingState.set_depthTest(true);
		}
		this._renderDuration += Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000) - beforeRenderDate;
		this.postProcessManager._finalizeFrame(camera.isIntermediate);
		this.activeCamera._updateFromScene();
		this._renderTargets.reset();
		if(this.afterCameraRender != null) this.afterCameraRender(this.activeCamera);
	}
	,_processSubCameras: function(camera) {
		if(camera.subCameras.length == 0 && camera._rigCameras.length == 0) {
			this._renderForCamera(camera);
			return;
		}
		var _g1 = 0;
		var _g = camera.subCameras.length;
		while(_g1 < _g) {
			var index = _g1++;
			this._renderForCamera(camera.subCameras[index]);
		}
		var _g11 = 0;
		var _g2 = camera._rigCameras.length;
		while(_g11 < _g2) {
			var index1 = _g11++;
			this._renderForCamera(camera._rigCameras[index1]);
		}
		this.activeCamera = camera;
		this.setTransformMatrix(this.activeCamera.getViewMatrix(),this.activeCamera.getProjectionMatrix(false));
		this.activeCamera._updateFromScene();
	}
	,_checkIntersections: function() {
		var _g1 = 0;
		var _g = this._meshesForIntersections.length;
		while(_g1 < _g) {
			var index = _g1++;
			var sourceMesh = this._meshesForIntersections.data[index];
			var _g3 = 0;
			var _g2 = sourceMesh.actionManager.actions.length;
			while(_g3 < _g2) {
				var actionIndex = _g3++;
				var action = sourceMesh.actionManager.actions[actionIndex];
				if(action.trigger == com_babylonhx_actions_ActionManager.OnIntersectionEnterTrigger || action.trigger == com_babylonhx_actions_ActionManager.OnIntersectionExitTrigger) {
					var otherMesh = action.getTriggerParameter();
					var areIntersecting = otherMesh.intersectsMesh(sourceMesh,false);
					var currentIntersectionInProgress = HxOverrides.indexOf(sourceMesh._intersectionsInProgress,otherMesh,0);
					if(areIntersecting && currentIntersectionInProgress == -1 && action.trigger == com_babylonhx_actions_ActionManager.OnIntersectionEnterTrigger) {
						action._executeCurrent(com_babylonhx_actions_ActionEvent.CreateNew(sourceMesh));
						sourceMesh._intersectionsInProgress.push(otherMesh);
					} else if(!areIntersecting && currentIntersectionInProgress > -1 && action.trigger == com_babylonhx_actions_ActionManager.OnIntersectionExitTrigger) {
						action._executeCurrent(com_babylonhx_actions_ActionEvent.CreateNew(sourceMesh));
						var indexOfOther = HxOverrides.indexOf(sourceMesh._intersectionsInProgress,otherMesh,0);
						if(indexOfOther > -1) sourceMesh._intersectionsInProgress.splice(indexOfOther,1);
					}
				}
			}
		}
	}
	,render: function() {
		this._particlesDuration = 0;
		this._spritesDuration = 0;
		this._activeParticles = 0;
		this._renderDuration = 0;
		this._renderTargetsDuration = 0;
		this._evaluateActiveMeshesDuration = 0;
		this._totalVertices = 0;
		this._activeIndices = 0;
		this._activeBones = 0;
		this._engine._drawCalls = 0;
		this._meshesForIntersections.reset();
		this._cachedMaterial = null;
		if(this.actionManager != null) this.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnEveryFrameTrigger,null);
		if(!this.simplificationQueue.running) this.simplificationQueue.executeNext();
		var deltaTime = Math.max(com_babylonhx_Scene.MinDeltaTime,Math.min(this._engine.deltaTime,com_babylonhx_Scene.MaxDeltaTime));
		this._animationRatio = deltaTime * 0.06;
		this._animate();
		if(this._physicsEngine != null) this._physicsEngine._runOneStep(deltaTime / 1000.0);
		if(this.beforeRender != null) this.beforeRender();
		var _g = 0;
		var _g1 = this._onBeforeRenderCallbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
		var engine = this._engine;
		var currentActiveCamera = this.activeCamera;
		if(this.renderTargetsEnabled) {
			var _g11 = 0;
			var _g2 = this.customRenderTargets.length;
			while(_g11 < _g2) {
				var customIndex = _g11++;
				var renderTarget = this.customRenderTargets[customIndex];
				if(renderTarget._shouldRender()) {
					this._renderId++;
					if(renderTarget.activeCamera != null) this.activeCamera = renderTarget.activeCamera; else this.activeCamera = this.activeCamera;
					if(this.activeCamera == null) throw new js__$Boot_HaxeError("Active camera not set");
					engine.setViewport(this.activeCamera.viewport,null,null);
					this.setTransformMatrix(this.activeCamera.getViewMatrix(),this.activeCamera.getProjectionMatrix(false));
					renderTarget.render(currentActiveCamera != this.activeCamera);
				}
			}
			this._renderId++;
		}
		if(this.customRenderTargets.length > 0) {
			engine._currentRenderTarget = null;
			lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
			engine.setViewport(engine._cachedViewport,null,null);
			engine.wipeCaches();
		}
		this.activeCamera = currentActiveCamera;
		if(this.proceduralTexturesEnabled) {
			var _g12 = 0;
			var _g3 = this._proceduralTextures.length;
			while(_g12 < _g3) {
				var proceduralIndex = _g12++;
				var proceduralTexture = this._proceduralTextures[proceduralIndex];
				if(proceduralTexture._shouldRender()) proceduralTexture.render();
			}
		}
		this._engine.clear(this.clearColor,this.autoClear || this.forceWireframe || this.forcePointsCloud,true);
		if(this.shadowsEnabled) {
			var _g13 = 0;
			var _g4 = this.lights.length;
			while(_g13 < _g4) {
				var lightIndex = _g13++;
				var light = this.lights[lightIndex];
				var shadowGenerator = light.getShadowGenerator();
				if(light.isEnabled() && shadowGenerator != null && (function($this) {
					var $r;
					var _this = shadowGenerator.getShadowMap().getScene().textures;
					var x = shadowGenerator.getShadowMap();
					$r = HxOverrides.indexOf(_this,x,0);
					return $r;
				}(this)) != -1) this._renderTargets.push(shadowGenerator.getShadowMap());
			}
		}
		if(this._depthRenderer != null) this._renderTargets.push(this._depthRenderer.getDepthMap());
		this.postProcessRenderPipelineManager.update();
		if(this.activeCameras.length > 0) {
			var currentRenderId = this._renderId;
			var _g14 = 0;
			var _g5 = this.activeCameras.length;
			while(_g14 < _g5) {
				var cameraIndex = _g14++;
				this._renderId = currentRenderId;
				this._processSubCameras(this.activeCameras[cameraIndex]);
			}
		} else {
			if(this.activeCamera == null) throw new js__$Boot_HaxeError("No camera defined");
			this._processSubCameras(this.activeCamera);
		}
		this._checkIntersections();
		if(this.afterRender != null) this.afterRender();
		var _g6 = 0;
		var _g15 = this._onAfterRenderCallbacks;
		while(_g6 < _g15.length) {
			var callback1 = _g15[_g6];
			++_g6;
			callback1();
		}
		var _g16 = 0;
		var _g7 = this._toBeDisposed.length;
		while(_g16 < _g7) {
			var index = _g16++;
			this._toBeDisposed.data[index].dispose();
			this._toBeDisposed.data[index] = null;
		}
		this._toBeDisposed.reset();
		if(this.dumpNextRenderTargets) this.dumpNextRenderTargets = false;
	}
	,enableDepthRenderer: function() {
		if(this._depthRenderer != null) return this._depthRenderer;
		this._depthRenderer = new com_babylonhx_rendering_DepthRenderer(this);
		return this._depthRenderer;
	}
	,disableDepthRenderer: function() {
		if(this._depthRenderer == null) return;
		this._depthRenderer.dispose();
		this._depthRenderer = null;
	}
	,dispose: function() {
		this.beforeRender = null;
		this.afterRender = null;
		this.skeletons = [];
		this._boundingBoxRenderer.dispose();
		if(this._depthRenderer != null) this._depthRenderer.dispose();
		if(this.onDispose != null) this.onDispose();
		this.detachControl();
		this._onBeforeRenderCallbacks = [];
		this._onAfterRenderCallbacks = [];
		var _g1 = 0;
		var _g = this.cameras.length;
		while(_g1 < _g) {
			var index = _g1++;
			this.cameras[index].detachControl(this);
		}
		while(this.lights.length > 0) this.lights[0].dispose();
		while(this.meshes.length > 0) this.meshes[0].dispose(true);
		while(this.cameras.length > 0) this.cameras[0].dispose();
		while(this.materials.length > 0) this.materials[0].dispose();
		while(this.particleSystems.length > 0) this.particleSystems[0].dispose(null);
		while(this.spriteManagers.length > 0) this.spriteManagers[0].dispose();
		while(this.layers.length > 0) this.layers[0].dispose();
		while(this.textures.length > 0) this.textures[0].dispose();
		this.postProcessManager.dispose();
		if(this._physicsEngine != null) this.disablePhysicsEngine();
		HxOverrides.remove(this._engine.scenes,this);
		this._engine.wipeCaches();
	}
	,_getNewPosition: function(position,velocity,collider,maximumRetry,finalPosition,excludedMesh) {
		position.divideToRef(collider.radius,this._scaledPosition);
		velocity.divideToRef(collider.radius,this._scaledVelocity);
		collider.retry = 0;
		collider.initialVelocity = this._scaledVelocity;
		collider.initialPosition = this._scaledPosition;
		this._collideWithWorld(this._scaledPosition,this._scaledVelocity,collider,maximumRetry,finalPosition,excludedMesh);
		finalPosition.multiplyInPlace(collider.radius);
	}
	,_collideWithWorld: function(position,velocity,collider,maximumRetry,finalPosition,excludedMesh) {
		var closeDistance = com_babylonhx_Engine.CollisionsEpsilon * 10.0;
		if(collider.retry >= maximumRetry) {
			finalPosition.x = position.x;
			finalPosition.y = position.y;
			finalPosition.z = position.z;
			return;
		}
		collider._initialize(position,velocity,closeDistance);
		var _g1 = 0;
		var _g = this.meshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			var mesh = this.meshes[index];
			if(mesh.isEnabled() && mesh.get_checkCollisions() && mesh.subMeshes != null && mesh != excludedMesh) mesh._checkCollision(collider);
		}
		if(!collider.collisionFound) {
			finalPosition.x = position.x + velocity.x;
			finalPosition.y = position.y + velocity.y;
			finalPosition.z = position.z + velocity.z;
			return;
		}
		if(velocity.x != 0 || velocity.y != 0 || velocity.z != 0) {
			position.addToRef(velocity,collider._destinationPoint);
			velocity.scaleInPlace(collider.nearestDistance / Math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y + velocity.z * velocity.z));
			collider.basePoint.addToRef(velocity,position);
			position.subtractToRef(collider.intersectionPoint,collider._slidePlaneNormal);
			collider._slidePlaneNormal.normalize();
			collider._slidePlaneNormal.scaleToRef(collider.epsilon,collider._displacementVector);
			position.addInPlace(collider._displacementVector);
			collider.intersectionPoint.addInPlace(collider._displacementVector);
			collider._slidePlaneNormal.scaleInPlace(com_babylonhx_math_Plane.SignedDistanceToPlaneFromPositionAndNormal(collider.intersectionPoint,collider._slidePlaneNormal,collider._destinationPoint));
			collider._destinationPoint.subtractInPlace(collider._slidePlaneNormal);
			collider._destinationPoint.subtractToRef(collider.intersectionPoint,velocity);
		}
		if(Math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y + velocity.z * velocity.z) <= closeDistance) {
			finalPosition.x = position.x;
			finalPosition.y = position.y;
			finalPosition.z = position.z;
			return;
		}
		collider.retry++;
		this._collideWithWorld(position,velocity,collider,maximumRetry,finalPosition,excludedMesh);
	}
	,getWorldExtends: function() {
		var min = new com_babylonhx_math_Vector3(Infinity,Infinity,Infinity);
		var max = new com_babylonhx_math_Vector3(-Infinity,-Infinity,-Infinity);
		var _g1 = 0;
		var _g = this.meshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			var mesh = this.meshes[index];
			mesh.computeWorldMatrix(true);
			var minBox = mesh.getBoundingInfo().boundingBox.minimumWorld;
			var maxBox = mesh.getBoundingInfo().boundingBox.maximumWorld;
			if(minBox.x < min.x) min.x = minBox.x;
			if(minBox.y < min.y) min.y = minBox.y;
			if(minBox.z < min.z) min.z = minBox.z;
			if(minBox.x > max.x) max.x = minBox.x;
			if(minBox.y > max.y) max.y = minBox.y;
			if(minBox.z > max.z) max.z = minBox.z;
			if(maxBox.x < min.x) min.x = maxBox.x;
			if(maxBox.y < min.y) min.y = maxBox.y;
			if(maxBox.z < min.z) min.z = maxBox.z;
			if(maxBox.x > max.x) max.x = maxBox.x;
			if(maxBox.y > max.y) max.y = maxBox.y;
			if(maxBox.z > max.z) max.z = maxBox.z;
		}
		return { min : min, max : max};
	}
	,createOrUpdateSelectionOctree: function(maxCapacity,maxDepth) {
		if(maxDepth == null) maxDepth = 2;
		if(maxCapacity == null) maxCapacity = 64;
		if(this._selectionOctree == null) this._selectionOctree = new com_babylonhx_culling_octrees_Octree(com_babylonhx_culling_octrees_Octree.CreationFuncForMeshes,maxCapacity,maxDepth);
		var worldExtends = this.getWorldExtends();
		this._selectionOctree.update(worldExtends.min,worldExtends.max,this.meshes);
		return this._selectionOctree;
	}
	,createPickingRay: function(x,y,world,camera,cameraViewSpace) {
		if(cameraViewSpace == null) cameraViewSpace = false;
		var engine = this._engine;
		if(camera == null) {
			if(this.activeCamera == null) throw new js__$Boot_HaxeError("Active camera not set");
			camera = this.activeCamera;
		}
		var cameraViewport = camera.viewport;
		var viewport = cameraViewport.toGlobal(engine);
		x = x / this._engine.getHardwareScalingLevel() - viewport.x;
		y = y / this._engine.getHardwareScalingLevel() - (this._engine.getRenderHeight() - viewport.y - viewport.height);
		return com_babylonhx_math_Ray.CreateNew(x,y,viewport.width,viewport.height,world != null?world:com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0),cameraViewSpace?com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0):camera.getViewMatrix(),camera.getProjectionMatrix(false));
	}
	,createPickingRayInCameraSpace: function(x,y,camera) {
		var engine = this._engine;
		if(camera == null) {
			if(this.activeCamera == null) throw new js__$Boot_HaxeError("Active camera not set");
			camera = this.activeCamera;
		}
		var cameraViewport = camera.viewport;
		var viewport = cameraViewport.toGlobal(engine);
		var identity = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
		x = x / this._engine.getHardwareScalingLevel() - viewport.x;
		y = y / this._engine.getHardwareScalingLevel() - (this._engine.getRenderHeight() - viewport.y - viewport.height);
		return com_babylonhx_math_Ray.CreateNew(x,y,viewport.width,viewport.height,identity,identity,camera.getProjectionMatrix(false));
	}
	,_internalPick: function(rayFunction,predicate,fastCheck) {
		if(fastCheck == null) fastCheck = false;
		var pickingInfo = null;
		var _g1 = 0;
		var _g = this.meshes.length;
		while(_g1 < _g) {
			var meshIndex = _g1++;
			var mesh = this.meshes[meshIndex];
			if(predicate != null) {
				if(!predicate(mesh)) continue;
			} else if(!mesh.isEnabled() || !mesh.isVisible || !mesh.get_isPickable()) continue;
			var world = mesh.getWorldMatrix();
			var ray = rayFunction(world);
			var result = mesh.intersects(ray,fastCheck);
			if(result == null || !result.hit) continue;
			if(!fastCheck && pickingInfo != null && result.distance >= pickingInfo.distance) continue;
			pickingInfo = result;
			if(fastCheck) break;
		}
		if(pickingInfo != null) return pickingInfo; else return new com_babylonhx_collisions_PickingInfo();
	}
	,_internalPickSprites: function(ray,predicate,fastCheck,camera) {
		if(fastCheck == null) fastCheck = false;
		var pickingInfo = new com_babylonhx_collisions_PickingInfo();
		if(camera == null) camera = this.activeCamera;
		if(this.spriteManagers.length > 0) {
			var _g1 = 0;
			var _g = this.spriteManagers.length;
			while(_g1 < _g) {
				var spriteIndex = _g1++;
				var spriteManager = this.spriteManagers[spriteIndex];
				if(!spriteManager.isPickable) continue;
				var result = spriteManager.intersects(ray,camera,predicate,fastCheck);
				if(result == null || !result.hit) continue;
				if(!fastCheck && pickingInfo != null && result.distance >= pickingInfo.distance) continue;
				pickingInfo = result;
				if(fastCheck) break;
			}
		}
		return pickingInfo;
	}
	,pick: function(x,y,predicate,fastCheck,camera) {
		if(fastCheck == null) fastCheck = false;
		var _g = this;
		return this._internalPick(function(world) {
			return _g.createPickingRay(x,y,world,camera);
		},predicate,fastCheck);
	}
	,pickSprite: function(x,y,predicate,fastCheck,camera) {
		if(fastCheck == null) fastCheck = false;
		return this._internalPickSprites(this.createPickingRayInCameraSpace(x,y,camera),predicate,fastCheck,camera);
	}
	,pickWithRay: function(ray,predicate,fastCheck) {
		if(fastCheck == null) fastCheck = false;
		var _g = this;
		return this._internalPick(function(world) {
			if(_g._pickWithRayInverseMatrix == null) _g._pickWithRayInverseMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
			world.invertToRef(_g._pickWithRayInverseMatrix);
			return com_babylonhx_math_Ray.Transform(ray,_g._pickWithRayInverseMatrix);
		},predicate,fastCheck);
	}
	,setPointerOverMesh: function(mesh) {
		if(this._pointerOverMesh == mesh) return;
		if(this._pointerOverMesh != null && this._pointerOverMesh.actionManager != null) this._pointerOverMesh.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnPointerOutTrigger,com_babylonhx_actions_ActionEvent.CreateNew(this._pointerOverMesh));
		this._pointerOverMesh = mesh;
		if(this._pointerOverMesh != null && this._pointerOverMesh.actionManager != null) this._pointerOverMesh.actionManager.processTrigger(com_babylonhx_actions_ActionManager.OnPointerOverTrigger,com_babylonhx_actions_ActionEvent.CreateNew(this._pointerOverMesh));
	}
	,getPointerOverMesh: function() {
		return this._pointerOverMesh;
	}
	,getPhysicsEngine: function() {
		return this._physicsEngine;
	}
	,enablePhysics: function(gravity,plugin) {
		if(this._physicsEngine != null) return true;
		this._physicsEngine = new com_babylonhx_physics_PhysicsEngine(plugin);
		if(!this._physicsEngine.isSupported()) {
			this._physicsEngine = null;
			return false;
		}
		this._physicsEngine._initialize(gravity);
		return true;
	}
	,disablePhysicsEngine: function() {
		if(this._physicsEngine == null) return;
		this._physicsEngine.dispose();
		this._physicsEngine = null;
	}
	,isPhysicsEnabled: function() {
		return this._physicsEngine != null;
	}
	,setGravity: function(gravity) {
		if(this._physicsEngine == null) return;
		this._physicsEngine._setGravity(gravity);
	}
	,createCompoundImpostor: function(parts,options) {
		if(parts.parts != null) {
			options = parts;
			parts = parts.parts;
		}
		if(this._physicsEngine == null) return null;
		var _g1 = 0;
		var _g = parts.length;
		while(_g1 < _g) {
			var index = _g1++;
			var mesh = parts[index].mesh;
			mesh._physicImpostor = parts[index].impostor;
			mesh._physicsMass = options.mass / parts.length;
			mesh._physicsFriction = options.friction;
			mesh._physicRestitution = options.restitution;
		}
		return this._physicsEngine._registerMeshesAsCompound(parts,options);
	}
	,deleteCompoundImpostor: function(compound) {
		var _g1 = 0;
		var _g = compound.parts.length;
		while(_g1 < _g) {
			var index = _g1++;
			var mesh = compound.parts[index].mesh;
			mesh._physicImpostor = 0;
			this._physicsEngine._unregisterMesh(mesh);
		}
	}
	,createDefaultCameraOrLight: function() {
		if(this.lights.length == 0) new com_babylonhx_lights_HemisphericLight("default light",new com_babylonhx_math_Vector3(0,1.0,0),this);
		if(this.activeCamera == null) {
			var camera = new com_babylonhx_cameras_FreeCamera("default camera",new com_babylonhx_math_Vector3(0,0,0),this);
			var worldExtends = this.getWorldExtends();
			var worldCenter = worldExtends.min.add(worldExtends.max.subtract(worldExtends.min).scale(0.5));
			camera.position = new com_babylonhx_math_Vector3(worldCenter.x,worldCenter.y,worldExtends.min.z - (worldExtends.max.z - worldExtends.min.z));
			camera.upVector.normalize();
			com_babylonhx_math_Matrix.LookAtLHToRef(camera.position,worldCenter,camera.upVector,camera._camMatrix);
			camera._camMatrix.invert();
			camera.rotation.x = Math.atan(camera._camMatrix.m[6] / camera._camMatrix.m[10]);
			com_babylonhx_cameras_TargetCamera.vDir = worldCenter.subtract(camera.position);
			if(com_babylonhx_cameras_TargetCamera.vDir.x >= 0.0) camera.rotation.y = -Math.atan(com_babylonhx_cameras_TargetCamera.vDir.z / com_babylonhx_cameras_TargetCamera.vDir.x) + Math.PI / 2.0; else camera.rotation.y = -Math.atan(com_babylonhx_cameras_TargetCamera.vDir.z / com_babylonhx_cameras_TargetCamera.vDir.x) - Math.PI / 2.0;
			camera.rotation.z = -Math.acos(com_babylonhx_math_Vector3.Dot(com_babylonhx_cameras_TargetCamera.zUpVector,camera.upVector));
			this.activeCamera = camera;
		}
	}
	,__class__: com_babylonhx_Scene
	,__properties__: {get_pointerY:"get_pointerY",get_pointerX:"get_pointerX",get_meshUnderPointer:"get_meshUnderPointer",get_SelectionOctree:"get_SelectionOctree",set_workerCollisions:"set_workerCollisions",get_workerCollisions:"get_workerCollisions"}
};
var com_babylonhx__$AlphaState = $hx_exports.BABYLON._AlphaState = function() {
	this._blendFunctionParameters = [];
	this._alphaBlend = false;
	this._isBlendFunctionParametersDirty = false;
	this._isAlphaBlendDirty = false;
};
$hxClasses["com.babylonhx._AlphaState"] = com_babylonhx__$AlphaState;
com_babylonhx__$AlphaState.__name__ = ["com","babylonhx","_AlphaState"];
com_babylonhx__$AlphaState.prototype = {
	_isAlphaBlendDirty: null
	,_isBlendFunctionParametersDirty: null
	,_alphaBlend: null
	,_blendFunctionParameters: null
	,get_isDirty: function() {
		return this._isAlphaBlendDirty || this._isBlendFunctionParametersDirty;
	}
	,get_alphaBlend: function() {
		return this._alphaBlend;
	}
	,set_alphaBlend: function(value) {
		if(this._alphaBlend == value) return value;
		this._alphaBlend = value;
		this._isAlphaBlendDirty = true;
		return value;
	}
	,setAlphaBlendFunctionParameters: function(value0,value1,value2,value3) {
		if(this._blendFunctionParameters[0] == value0 && this._blendFunctionParameters[1] == value1 && this._blendFunctionParameters[2] == value2 && this._blendFunctionParameters[3] == value3) return;
		this._blendFunctionParameters[0] = value0;
		this._blendFunctionParameters[1] = value1;
		this._blendFunctionParameters[2] = value2;
		this._blendFunctionParameters[3] = value3;
		this._isBlendFunctionParametersDirty = true;
	}
	,reset: function() {
		this._alphaBlend = false;
		this._blendFunctionParameters[0] = -1;
		this._blendFunctionParameters[1] = -1;
		this._blendFunctionParameters[2] = -1;
		this._blendFunctionParameters[3] = -1;
		this._isAlphaBlendDirty = true;
		this._isBlendFunctionParametersDirty = false;
	}
	,apply: function() {
		if(!this.get_isDirty()) return;
		if(this._isAlphaBlendDirty) {
			if(this._alphaBlend) lime_graphics_opengl_GL.context.enable(3042); else lime_graphics_opengl_GL.context.disable(3042);
			this._isAlphaBlendDirty = false;
		}
		if(this._isBlendFunctionParametersDirty) {
			lime_graphics_opengl_GL.context.blendFuncSeparate(this._blendFunctionParameters[0],this._blendFunctionParameters[1],this._blendFunctionParameters[2],this._blendFunctionParameters[3]);
			this._isBlendFunctionParametersDirty = false;
		}
	}
	,__class__: com_babylonhx__$AlphaState
	,__properties__: {set_alphaBlend:"set_alphaBlend",get_alphaBlend:"get_alphaBlend",get_isDirty:"get_isDirty"}
};
var com_babylonhx__$DepthCullingState = $hx_exports.BABYLON._DepthCullingState = function() {
	this._zOffset = 0.0;
	this._isZOffsetDirty = false;
	this._isCullDirty = false;
	this._isCullFaceDirty = false;
	this._isDepthFuncDirty = false;
	this._isDepthMaskDirty = false;
	this._isDepthTestDirty = false;
};
$hxClasses["com.babylonhx._DepthCullingState"] = com_babylonhx__$DepthCullingState;
com_babylonhx__$DepthCullingState.__name__ = ["com","babylonhx","_DepthCullingState"];
com_babylonhx__$DepthCullingState.prototype = {
	_isDepthTestDirty: null
	,_isDepthMaskDirty: null
	,_isDepthFuncDirty: null
	,_isCullFaceDirty: null
	,_isCullDirty: null
	,_isZOffsetDirty: null
	,_depthTest: null
	,_depthMask: null
	,_depthFunc: null
	,_cull: null
	,_cullFace: null
	,_zOffset: null
	,get_isDirty: function() {
		return this._isDepthFuncDirty || this._isDepthTestDirty || this._isDepthMaskDirty || this._isCullFaceDirty || this._isCullDirty || this._isZOffsetDirty;
	}
	,get_zOffset: function() {
		return this._zOffset;
	}
	,set_zOffset: function(value) {
		if(this._zOffset == value) return value;
		this._zOffset = value;
		this._isZOffsetDirty = true;
		return value;
	}
	,get_cullFace: function() {
		return this._cullFace;
	}
	,set_cullFace: function(value) {
		if(this._cullFace == value) return value;
		this._cullFace = value;
		this._isCullFaceDirty = true;
		return value;
	}
	,get_cull: function() {
		return this._cull;
	}
	,set_cull: function(value) {
		if(this._cull == value) return value;
		this._cull = value;
		this._isCullDirty = true;
		return value;
	}
	,get_depthFunc: function() {
		return this._depthFunc;
	}
	,set_depthFunc: function(value) {
		if(this._depthFunc == value) return value;
		this._depthFunc = value;
		this._isDepthFuncDirty = true;
		return value;
	}
	,get_depthMask: function() {
		return this._depthMask;
	}
	,set_depthMask: function(value) {
		if(this._depthMask == value) return value;
		this._depthMask = value;
		this._isDepthMaskDirty = true;
		return value;
	}
	,get_depthTest: function() {
		return this._depthTest;
	}
	,set_depthTest: function(value) {
		if(this._depthTest == value) return value;
		this._depthTest = value;
		this._isDepthTestDirty = true;
		return value;
	}
	,reset: function() {
		this._depthMask = true;
		this._depthTest = true;
		this._depthFunc = null;
		this._cull = null;
		this._cullFace = null;
		this._zOffset = 0;
		this._isDepthTestDirty = true;
		this._isDepthMaskDirty = true;
		this._isDepthFuncDirty = false;
		this._isCullFaceDirty = false;
		this._isCullDirty = false;
		this._isZOffsetDirty = false;
	}
	,apply: function() {
		if(this.get_isDirty()) {
			if(this._isCullDirty) {
				if(this.get_cull() != null && this.get_cull()) lime_graphics_opengl_GL.context.enable(2884); else lime_graphics_opengl_GL.context.disable(2884);
				this._isCullDirty = false;
			}
			if(this._isCullFaceDirty) {
				lime_graphics_opengl_GL.cullFace(this.get_cullFace());
				this._isCullFaceDirty = false;
			}
			if(this._isDepthMaskDirty) {
				lime_graphics_opengl_GL.depthMask(this.get_depthMask());
				this._isDepthMaskDirty = false;
			}
			if(this._isDepthTestDirty) {
				if(this.get_depthTest()) lime_graphics_opengl_GL.context.enable(2929); else lime_graphics_opengl_GL.context.disable(2929);
				this._isDepthTestDirty = false;
			}
			if(this._isDepthFuncDirty) {
				lime_graphics_opengl_GL.depthFunc(this.get_depthFunc());
				this._isDepthFuncDirty = false;
			}
			if(this._isZOffsetDirty) {
				if(this.get_zOffset() != 0) {
					lime_graphics_opengl_GL.context.enable(32823);
					lime_graphics_opengl_GL.polygonOffset(this.get_zOffset(),0);
				} else lime_graphics_opengl_GL.context.disable(32823);
				this._isZOffsetDirty = false;
			}
		}
	}
	,__class__: com_babylonhx__$DepthCullingState
	,__properties__: {set_depthTest:"set_depthTest",get_depthTest:"get_depthTest",set_depthMask:"set_depthMask",get_depthMask:"get_depthMask",set_depthFunc:"set_depthFunc",get_depthFunc:"get_depthFunc",set_cull:"set_cull",get_cull:"get_cull",set_cullFace:"set_cullFace",get_cullFace:"get_cullFace",set_zOffset:"set_zOffset",get_zOffset:"get_zOffset",get_isDirty:"get_isDirty"}
};
var com_babylonhx_actions_Action = $hx_exports.BABYLON.Action = function(triggerOptions,condition) {
	if(Reflect.getProperty(triggerOptions,"parameter") != null) {
		this.trigger = Reflect.getProperty(triggerOptions,"trigger");
		this._triggerParameter = Reflect.getProperty(triggerOptions,"parameter");
	} else this.trigger = triggerOptions;
	this._nextActiveAction = this;
	this._condition = condition;
};
$hxClasses["com.babylonhx.actions.Action"] = com_babylonhx_actions_Action;
com_babylonhx_actions_Action.__name__ = ["com","babylonhx","actions","Action"];
com_babylonhx_actions_Action.prototype = {
	trigger: null
	,_actionManager: null
	,_nextActiveAction: null
	,_child: null
	,_condition: null
	,_triggerParameter: null
	,_prepare: function() {
	}
	,getTriggerParameter: function() {
		return this._triggerParameter;
	}
	,_executeCurrent: function(evt) {
		if(this._nextActiveAction._condition != null) {
			var condition = this._nextActiveAction._condition;
			var currentRenderId = this._actionManager.getScene().getRenderId();
			if(condition._evaluationId == currentRenderId) {
				if(!condition._currentResult) return;
			} else {
				condition._evaluationId = currentRenderId;
				if(!condition.isValid()) {
					condition._currentResult = false;
					return;
				}
				condition._currentResult = true;
			}
		}
		this._nextActiveAction.execute(evt);
		if(this._nextActiveAction._child != null) {
			if(this._nextActiveAction._child._actionManager == null) this._nextActiveAction._child._actionManager = this._actionManager;
			this._nextActiveAction = this._nextActiveAction._child;
		} else this._nextActiveAction = this;
	}
	,execute: function(evt) {
	}
	,then: function(action) {
		this._child = action;
		action._actionManager = this._actionManager;
		action._prepare();
		return action;
	}
	,_getProperty: function(propertyPath) {
		return this._actionManager._getProperty(propertyPath);
	}
	,_getEffectiveTarget: function(target,propertyPath) {
		return this._actionManager._getEffectiveTarget(target,propertyPath);
	}
	,__class__: com_babylonhx_actions_Action
};
var com_babylonhx_actions_ActionEvent = $hx_exports.BABYLON.ActionEvent = function(source,pointerX,pointerY,meshUnderPointer,sourceEvent,additionalData) {
	this.source = source;
	this.pointerX = pointerX;
	this.pointerY = pointerY;
	this.meshUnderPointer = meshUnderPointer;
	this.sourceEvent = sourceEvent;
	this.additionalData = additionalData;
};
$hxClasses["com.babylonhx.actions.ActionEvent"] = com_babylonhx_actions_ActionEvent;
com_babylonhx_actions_ActionEvent.__name__ = ["com","babylonhx","actions","ActionEvent"];
com_babylonhx_actions_ActionEvent.CreateNew = function(source) {
	var scene = source._scene;
	return new com_babylonhx_actions_ActionEvent(source,scene.get_pointerX(),scene.get_pointerY(),scene.get_meshUnderPointer());
};
com_babylonhx_actions_ActionEvent.CreateNewFromSprite = function(source,scene,evt,additionalData) {
	return new com_babylonhx_actions_ActionEvent(source,scene.get_pointerX(),scene.get_pointerY(),scene.get_meshUnderPointer(),evt,additionalData);
};
com_babylonhx_actions_ActionEvent.CreateNewFromScene = function(scene,evt) {
	return new com_babylonhx_actions_ActionEvent(null,scene.get_pointerX(),scene.get_pointerY(),scene.get_meshUnderPointer(),evt);
};
com_babylonhx_actions_ActionEvent.prototype = {
	source: null
	,pointerX: null
	,pointerY: null
	,meshUnderPointer: null
	,sourceEvent: null
	,additionalData: null
	,__class__: com_babylonhx_actions_ActionEvent
};
var com_babylonhx_actions_ActionManager = $hx_exports.BABYLON.ActionManager = function(scene) {
	this.actions = [];
	this._scene = scene;
	scene._actionManagers.push(this);
};
$hxClasses["com.babylonhx.actions.ActionManager"] = com_babylonhx_actions_ActionManager;
com_babylonhx_actions_ActionManager.__name__ = ["com","babylonhx","actions","ActionManager"];
com_babylonhx_actions_ActionManager.prototype = {
	actions: null
	,_scene: null
	,dispose: function() {
		var index = HxOverrides.indexOf(this._scene._actionManagers,this,0);
		if(index > -1) this._scene._actionManagers.splice(index,1);
	}
	,getScene: function() {
		return this._scene;
	}
	,hasSpecificTriggers: function(triggers) {
		var _g1 = 0;
		var _g = this.actions.length;
		while(_g1 < _g) {
			var index = _g1++;
			var action = this.actions[index];
			if(HxOverrides.indexOf(triggers,action.trigger,0) > -1) return true;
		}
		return false;
	}
	,hasSpecificTrigger: function(trigger) {
		var _g1 = 0;
		var _g = this.actions.length;
		while(_g1 < _g) {
			var index = _g1++;
			var action = this.actions[index];
			if(action.trigger == trigger) return true;
		}
		return false;
	}
	,hasPointerTriggers: null
	,get_hasPointerTriggers: function() {
		var _g1 = 0;
		var _g = this.actions.length;
		while(_g1 < _g) {
			var index = _g1++;
			var action = this.actions[index];
			if(action.trigger >= com_babylonhx_actions_ActionManager.OnPickTrigger && action.trigger <= com_babylonhx_actions_ActionManager.OnPointerOutTrigger) return true;
		}
		return false;
	}
	,hasPickTriggers: null
	,get_hasPickTriggers: function() {
		var _g1 = 0;
		var _g = this.actions.length;
		while(_g1 < _g) {
			var index = _g1++;
			var action = this.actions[index];
			if(action.trigger >= com_babylonhx_actions_ActionManager.OnPickTrigger && action.trigger <= com_babylonhx_actions_ActionManager.OnCenterPickTrigger) return true;
			if(action.trigger == com_babylonhx_actions_ActionManager.OnPickUpTrigger) return true;
		}
		return false;
	}
	,registerAction: function(action) {
		if(action.trigger == com_babylonhx_actions_ActionManager.OnEveryFrameTrigger) {
			if(this.getScene().actionManager != this) {
				haxe_Log.trace("OnEveryFrameTrigger can only be used with scene.actionManager",{ fileName : "ActionManager.hx", lineNumber : 117, className : "com.babylonhx.actions.ActionManager", methodName : "registerAction"});
				return null;
			}
		}
		this.actions.push(action);
		action._actionManager = this;
		action._prepare();
		return action;
	}
	,processTrigger: function(trigger,evt) {
		var _g1 = 0;
		var _g = this.actions.length;
		while(_g1 < _g) {
			var index = _g1++;
			var action = this.actions[index];
			if(action.trigger == trigger) {
				if(trigger == com_babylonhx_actions_ActionManager.OnKeyUpTrigger || trigger == com_babylonhx_actions_ActionManager.OnKeyDownTrigger) {
					var parameter = action.getTriggerParameter();
					if(parameter != null) {
						if(evt.sourceEvent.key != parameter) continue;
					}
				}
				action._executeCurrent(evt);
			}
		}
	}
	,_getEffectiveTarget: function(target,propertyPath) {
		var properties = propertyPath.split(".");
		var _g1 = 0;
		var _g = properties.length - 1;
		while(_g1 < _g) {
			var index = _g1++;
			target = Reflect.getProperty(target,properties[index]);
		}
		return target;
	}
	,_getProperty: function(propertyPath) {
		var properties = propertyPath.split(".");
		return properties[properties.length - 1];
	}
	,__class__: com_babylonhx_actions_ActionManager
	,__properties__: {get_hasPickTriggers:"get_hasPickTriggers",get_hasPointerTriggers:"get_hasPointerTriggers"}
};
var com_babylonhx_actions_Condition = $hx_exports.BABYLON.Condition = function(actionManager) {
	this._actionManager = actionManager;
};
$hxClasses["com.babylonhx.actions.Condition"] = com_babylonhx_actions_Condition;
com_babylonhx_actions_Condition.__name__ = ["com","babylonhx","actions","Condition"];
com_babylonhx_actions_Condition.prototype = {
	_actionManager: null
	,_evaluationId: null
	,_currentResult: null
	,isValid: function() {
		return true;
	}
	,_getProperty: function(propertyPath) {
		return this._actionManager._getProperty(propertyPath);
	}
	,_getEffectiveTarget: function(target,propertyPath) {
		return this._actionManager._getEffectiveTarget(target,propertyPath);
	}
	,__class__: com_babylonhx_actions_Condition
};
var com_babylonhx_actions_InterpolateValueAction = $hx_exports.BABYLON.InterpolateValueAction = function(triggerOptions,target,propertyPath,value,duration,condition,stopOtherAnimations) {
	if(stopOtherAnimations == null) stopOtherAnimations = false;
	if(duration == null) duration = 1000;
	com_babylonhx_actions_Action.call(this,triggerOptions,condition);
	this._target = target;
	this.propertyPath = propertyPath;
	this.value = value;
	this.duration = duration;
	this.stopOtherAnimations = stopOtherAnimations;
};
$hxClasses["com.babylonhx.actions.InterpolateValueAction"] = com_babylonhx_actions_InterpolateValueAction;
com_babylonhx_actions_InterpolateValueAction.__name__ = ["com","babylonhx","actions","InterpolateValueAction"];
com_babylonhx_actions_InterpolateValueAction.__super__ = com_babylonhx_actions_Action;
com_babylonhx_actions_InterpolateValueAction.prototype = $extend(com_babylonhx_actions_Action.prototype,{
	_target: null
	,_property: null
	,propertyPath: null
	,value: null
	,duration: null
	,stopOtherAnimations: null
	,_prepare: function() {
		this._target = this._getEffectiveTarget(this._target,this.propertyPath);
		this._property = this._getProperty(this.propertyPath);
	}
	,execute: function(evt) {
		var scene = this._actionManager.getScene();
		var keys = [{ frame : 0, value : Reflect.getProperty(this._target,this._property)},{ frame : 100, value : this.value}];
		var dataType = -1;
		if(js_Boot.__instanceof(this.value,Int) || typeof(this.value) == "number") dataType = 0; else if(js_Boot.__instanceof(this.value,com_babylonhx_math_Color3)) dataType = 4; else if(js_Boot.__instanceof(this.value,com_babylonhx_math_Vector3)) dataType = 1; else if(js_Boot.__instanceof(this.value,com_babylonhx_math_Matrix)) dataType = 3; else if(js_Boot.__instanceof(this.value,com_babylonhx_math_Quaternion)) dataType = 2; else {
			haxe_Log.trace("InterpolateValueAction:Unsupported type (" + Type.getClassName(this.value) + ")",{ fileName : "InterpolateValueAction.hx", lineNumber : 65, className : "com.babylonhx.actions.InterpolateValueAction", methodName : "execute"});
			return;
		}
		var animation = new com_babylonhx_animations_Animation("InterpolateValueAction",this._property,100 * (1000.0 / this.duration) | 0,dataType,2);
		animation.setKeys(keys);
		if(this.stopOtherAnimations) scene.stopAnimation(this._target);
		scene.beginDirectAnimation(this._target,[animation],0,100);
	}
	,__class__: com_babylonhx_actions_InterpolateValueAction
});
var com_babylonhx_actions_PlayAnimationAction = $hx_exports.BABYLON.PlayAnimationAction = function(triggerOptions,target,from,to,loop,condition) {
	com_babylonhx_actions_Action.call(this,triggerOptions,condition);
	this._target = target;
	this.from = from;
	this.to = to;
	this.loop = loop;
};
$hxClasses["com.babylonhx.actions.PlayAnimationAction"] = com_babylonhx_actions_PlayAnimationAction;
com_babylonhx_actions_PlayAnimationAction.__name__ = ["com","babylonhx","actions","PlayAnimationAction"];
com_babylonhx_actions_PlayAnimationAction.__super__ = com_babylonhx_actions_Action;
com_babylonhx_actions_PlayAnimationAction.prototype = $extend(com_babylonhx_actions_Action.prototype,{
	_target: null
	,from: null
	,to: null
	,loop: null
	,execute: function(evt) {
		var scene = this._actionManager.getScene();
		scene.beginAnimation(this._target,this.from,this.to,this.loop);
	}
	,__class__: com_babylonhx_actions_PlayAnimationAction
});
var com_babylonhx_actions_ValueCondition = $hx_exports.BABYLON.ValueCondition = function(actionManager,target,propertyPath,value,operator) {
	if(operator == null) operator = 0;
	com_babylonhx_actions_Condition.call(this,actionManager);
	this._target = this._getEffectiveTarget(target,this.propertyPath);
	this._property = this._getProperty(this.propertyPath);
	this.propertyPath = propertyPath;
	this.value = value;
	this.operator = operator;
};
$hxClasses["com.babylonhx.actions.ValueCondition"] = com_babylonhx_actions_ValueCondition;
com_babylonhx_actions_ValueCondition.__name__ = ["com","babylonhx","actions","ValueCondition"];
com_babylonhx_actions_ValueCondition.__super__ = com_babylonhx_actions_Condition;
com_babylonhx_actions_ValueCondition.prototype = $extend(com_babylonhx_actions_Condition.prototype,{
	_target: null
	,_property: null
	,propertyPath: null
	,value: null
	,operator: null
	,isValid: function() {
		var _g = this.operator;
		switch(_g) {
		case 2:
			return Reflect.field(this._target,this._property) > this.value;
		case 3:
			return Reflect.field(this._target,this._property) < this.value;
		case 0:case 1:
			var check = false;
			if(this.value.equals != null) check = this.value.equals(Reflect.field(this._target,this._property)); else check = this.value == Reflect.field(this._target,this._property);
			if(this.operator == 0) return check; else return !check;
			break;
		}
		return false;
	}
	,__class__: com_babylonhx_actions_ValueCondition
});
var com_babylonhx_animations_Animatable = $hx_exports.BABYLON.Animatable = function(scene,target,fromFrame,toFrame,loopAnimation,speedRatio,onAnimationEnd,animations) {
	if(speedRatio == null) speedRatio = 1.0;
	if(loopAnimation == null) loopAnimation = false;
	if(toFrame == null) toFrame = 100;
	if(fromFrame == null) fromFrame = 0;
	this.animationStarted = false;
	this._paused = false;
	this._animations = [];
	this._pausedDelay = -1;
	this._localDelayOffset = -1;
	this.target = target;
	this.fromFrame = fromFrame;
	this.toFrame = toFrame;
	this.loopAnimation = loopAnimation;
	this.speedRatio = speedRatio;
	this.onAnimationEnd = onAnimationEnd;
	if(animations != null) this.appendAnimations(target,animations);
	this._scene = scene;
	scene._activeAnimatables.push(this);
};
$hxClasses["com.babylonhx.animations.Animatable"] = com_babylonhx_animations_Animatable;
com_babylonhx_animations_Animatable.__name__ = ["com","babylonhx","animations","Animatable"];
com_babylonhx_animations_Animatable.prototype = {
	_localDelayOffset: null
	,_pausedDelay: null
	,_animations: null
	,_paused: null
	,_scene: null
	,target: null
	,fromFrame: null
	,toFrame: null
	,loopAnimation: null
	,speedRatio: null
	,onAnimationEnd: null
	,animationStarted: null
	,getAnimations: function() {
		return this._animations;
	}
	,appendAnimations: function(target,animations) {
		var _g1 = 0;
		var _g = animations.length;
		while(_g1 < _g) {
			var index = _g1++;
			var animation = animations[index];
			animation._target = target;
			this._animations.push(animation);
		}
	}
	,getAnimationByTargetProperty: function(property) {
		var animations = this._animations;
		var _g1 = 0;
		var _g = animations.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(animations[index].targetProperty == property) return animations[index];
		}
		return null;
	}
	,reset: function() {
		var animations = this._animations;
		var _g1 = 0;
		var _g = animations.length;
		while(_g1 < _g) {
			var index = _g1++;
			animations[index].reset();
		}
		this._localDelayOffset = -1;
		this._pausedDelay = -1;
	}
	,goToFrame: function(frame) {
		var animations = this._animations;
		var _g1 = 0;
		var _g = animations.length;
		while(_g1 < _g) {
			var index = _g1++;
			animations[index].goToFrame(frame);
		}
	}
	,pause: function() {
		this._paused = true;
	}
	,restart: function() {
		this._paused = false;
	}
	,stop: function() {
		var index = HxOverrides.indexOf(this._scene._activeAnimatables,this,0);
		if(index > -1) this._scene._activeAnimatables.splice(index,1);
		if(this.onAnimationEnd != null) this.onAnimationEnd();
	}
	,_animate: function(delay) {
		if(this._paused) {
			this.animationStarted = false;
			if(this._pausedDelay == -1) this._pausedDelay = delay;
			return true;
		}
		if(this._localDelayOffset == -1) this._localDelayOffset = delay; else if(this._pausedDelay != -1) {
			this._localDelayOffset += delay - this._pausedDelay;
			this._pausedDelay = -1;
		}
		var running = false;
		var animations = this._animations;
		var _g1 = 0;
		var _g = animations.length;
		while(_g1 < _g) {
			var index = _g1++;
			var animation = animations[index];
			var isRunning = animation.animate(delay - this._localDelayOffset,this.fromFrame,this.toFrame,this.loopAnimation,this.speedRatio);
			running = running || isRunning;
		}
		this.animationStarted = running;
		if(!running) {
			var index1 = HxOverrides.indexOf(this._scene._activeAnimatables,this,0);
			this._scene._activeAnimatables.splice(index1,1);
		}
		if(!running && this.onAnimationEnd != null) this.onAnimationEnd();
		return running;
	}
	,__class__: com_babylonhx_animations_Animatable
};
var com_babylonhx_math_Quaternion = $hx_exports.BABYLON.Quaternion = function(x,y,z,w) {
	if(w == null) w = 1;
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["com.babylonhx.math.Quaternion"] = com_babylonhx_math_Quaternion;
com_babylonhx_math_Quaternion.__name__ = ["com","babylonhx","math","Quaternion"];
com_babylonhx_math_Quaternion.FromRotationMatrix = function(matrix) {
	var result = new com_babylonhx_math_Quaternion();
	com_babylonhx_math_Quaternion.FromRotationMatrixToRef(matrix,result);
	return result;
};
com_babylonhx_math_Quaternion.FromRotationMatrixToRef = function(matrix,result) {
	var data = matrix.m;
	var m11 = data[0];
	var m12 = data[4];
	var m13 = data[8];
	var m21 = data[1];
	var m22 = data[5];
	var m23 = data[9];
	var m31 = data[2];
	var m32 = data[6];
	var m33 = data[10];
	var _trace = m11 + m22 + m33;
	var s = 0;
	if(_trace > 0) {
		s = 0.5 / Math.sqrt(_trace + 1.0);
		result.w = 0.25 / s;
		result.x = (m32 - m23) * s;
		result.y = (m13 - m31) * s;
		result.z = (m21 - m12) * s;
	} else if(m11 > m22 && m11 > m33) {
		s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);
		result.w = (m32 - m23) / s;
		result.x = 0.25 * s;
		result.y = (m12 + m21) / s;
		result.z = (m13 + m31) / s;
	} else if(m22 > m33) {
		s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);
		result.w = (m13 - m31) / s;
		result.x = (m12 + m21) / s;
		result.y = 0.25 * s;
		result.z = (m23 + m32) / s;
	} else {
		s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);
		result.w = (m21 - m12) / s;
		result.x = (m13 + m31) / s;
		result.y = (m23 + m32) / s;
		result.z = 0.25 * s;
	}
};
com_babylonhx_math_Quaternion.Inverse = function(q) {
	return new com_babylonhx_math_Quaternion(-q.x,-q.y,-q.z,q.w);
};
com_babylonhx_math_Quaternion.Identity = function() {
	return new com_babylonhx_math_Quaternion(0,0,0,1);
};
com_babylonhx_math_Quaternion.RotationAxis = function(axis,angle) {
	var result = new com_babylonhx_math_Quaternion();
	var sin = Math.sin(angle / 2);
	axis.normalize();
	result.w = Math.cos(angle / 2);
	result.x = axis.x * sin;
	result.y = axis.y * sin;
	result.z = axis.z * sin;
	return result;
};
com_babylonhx_math_Quaternion.LookRotation = function(forward,up) {
	if(up == null) up = new com_babylonhx_math_Vector3(0,1.0,0);
	forward.normalize();
	var vector = com_babylonhx_math_Vector3.Normalize(forward);
	var vector2 = com_babylonhx_math_Vector3.Normalize(com_babylonhx_math_Vector3.Cross(up,vector));
	var vector3 = com_babylonhx_math_Vector3.Cross(vector,vector2);
	var m00 = vector2.x;
	var m01 = vector2.y;
	var m02 = vector2.z;
	var m10 = vector3.x;
	var m11 = vector3.y;
	var m12 = vector3.z;
	var m20 = vector.x;
	var m21 = vector.y;
	var m22 = vector.z;
	var num8 = m00 + m11 + m22;
	var quaternion = new com_babylonhx_math_Quaternion();
	if(num8 > 0) {
		var num = Math.sqrt(num8 + 1);
		quaternion.w = num * 0.5;
		num = 0.5 / num;
		quaternion.x = (m12 - m21) * num;
		quaternion.y = (m20 - m02) * num;
		quaternion.z = (m01 - m10) * num;
		return quaternion;
	}
	if(m00 >= m11 && m00 >= m22) {
		var num7 = Math.sqrt(1 + m00 - m11 - m22);
		var num4 = 0.5 / num7;
		quaternion.x = 0.5 * num7;
		quaternion.y = (m01 + m10) * num4;
		quaternion.z = (m02 + m20) * num4;
		quaternion.w = (m12 - m21) * num4;
		return quaternion;
	}
	if(m11 > m22) {
		var num6 = Math.sqrt(1 + m11 - m00 - m22);
		var num3 = 0.5 / num6;
		quaternion.x = (m10 + m01) * num3;
		quaternion.y = 0.5 * num6;
		quaternion.z = (m21 + m12) * num3;
		quaternion.w = (m20 - m02) * num3;
		return quaternion;
	}
	var num5 = Math.sqrt(1 + m22 - m00 - m11);
	var num2 = 0.5 / num5;
	quaternion.x = (m20 + m02) * num2;
	quaternion.y = (m21 + m12) * num2;
	quaternion.z = 0.5 * num5;
	quaternion.w = (m01 - m10) * num2;
	return quaternion;
};
com_babylonhx_math_Quaternion.FromArray = function(array,offset) {
	if(offset == null) offset = 0;
	return new com_babylonhx_math_Quaternion(array[offset],array[offset + 1],array[offset + 2],array[offset + 3]);
};
com_babylonhx_math_Quaternion.RotationYawPitchRoll = function(yaw,pitch,roll) {
	var result = new com_babylonhx_math_Quaternion();
	com_babylonhx_math_Quaternion.RotationYawPitchRollToRef(yaw,pitch,roll,result);
	return result;
};
com_babylonhx_math_Quaternion.RotationYawPitchRollToRef = function(yaw,pitch,roll,result) {
	var halfRoll = roll * 0.5;
	var halfPitch = pitch * 0.5;
	var halfYaw = yaw * 0.5;
	var sinRoll = Math.sin(halfRoll);
	var cosRoll = Math.cos(halfRoll);
	var sinPitch = Math.sin(halfPitch);
	var cosPitch = Math.cos(halfPitch);
	var sinYaw = Math.sin(halfYaw);
	var cosYaw = Math.cos(halfYaw);
	result.x = cosYaw * sinPitch * cosRoll + sinYaw * cosPitch * sinRoll;
	result.y = sinYaw * cosPitch * cosRoll - cosYaw * sinPitch * sinRoll;
	result.z = cosYaw * cosPitch * sinRoll - sinYaw * sinPitch * cosRoll;
	result.w = cosYaw * cosPitch * cosRoll + sinYaw * sinPitch * sinRoll;
};
com_babylonhx_math_Quaternion.Slerp = function(left,right,amount) {
	var num2 = 0.0;
	var num3 = 0.0;
	var num = amount;
	var num4 = left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;
	var flag = false;
	if(num4 < 0) {
		flag = true;
		num4 = -num4;
	}
	if(num4 > 0.999999) {
		num3 = 1 - num;
		if(flag) num2 = -num; else num2 = num;
	} else {
		var num5 = Math.acos(num4);
		var num6 = 1.0 / Math.sin(num5);
		num3 = Math.sin((1.0 - num) * num5) * num6;
		if(flag) num2 = -Math.sin(num * num5) * num6; else num2 = Math.sin(num * num5) * num6;
	}
	return new com_babylonhx_math_Quaternion(num3 * left.x + num2 * right.x,num3 * left.y + num2 * right.y,num3 * left.z + num2 * right.z,num3 * left.w + num2 * right.w);
};
com_babylonhx_math_Quaternion.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,toString: function() {
		return "{X:" + this.x + " Y:" + this.y + " Z:" + this.z + " W:" + this.w + "}";
	}
	,asArray: function() {
		return [this.x,this.y,this.z,this.w];
	}
	,set: function(x,y,z,w) {
		if(w == null) w = 1;
		if(z == null) z = 0;
		if(y == null) y = 0;
		if(x == null) x = 0;
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	,equals: function(otherQuaternion) {
		return otherQuaternion != null && this.x == otherQuaternion.x && this.y == otherQuaternion.y && this.z == otherQuaternion.z && this.w == otherQuaternion.w;
	}
	,clone: function() {
		return new com_babylonhx_math_Quaternion(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(other) {
		this.x = other.x;
		this.y = other.y;
		this.z = other.z;
		this.w = other.w;
		return this;
	}
	,copyFromFloats: function(x,y,z,w) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
		return this;
	}
	,add: function(other) {
		return new com_babylonhx_math_Quaternion(this.x + other.x,this.y + other.y,this.z + other.z,this.w + other.w);
	}
	,subtract: function(other) {
		return new com_babylonhx_math_Quaternion(this.x - other.x,this.y - other.y,this.z - other.z,this.w - other.w);
	}
	,scale: function(value) {
		return new com_babylonhx_math_Quaternion(this.x * value,this.y * value,this.z * value,this.w * value);
	}
	,multiply: function(q1) {
		var result = new com_babylonhx_math_Quaternion(0,0,0,1.0);
		result.x = this.x * q1.w + this.y * q1.z - this.z * q1.y + this.w * q1.x;
		result.y = -this.x * q1.z + this.y * q1.w + this.z * q1.x + this.w * q1.y;
		result.z = this.x * q1.y - this.y * q1.x + this.z * q1.w + this.w * q1.z;
		result.w = -this.x * q1.x - this.y * q1.y - this.z * q1.z + this.w * q1.w;
		return result;
	}
	,multiplyToRef: function(q1,result) {
		result.x = this.x * q1.w + this.y * q1.z - this.z * q1.y + this.w * q1.x;
		result.y = -this.x * q1.z + this.y * q1.w + this.z * q1.x + this.w * q1.y;
		result.z = this.x * q1.y - this.y * q1.x + this.z * q1.w + this.w * q1.z;
		result.w = -this.x * q1.x - this.y * q1.y - this.z * q1.z + this.w * q1.w;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,normalize: function() {
		var length = 1.0 / Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		this.x *= length;
		this.y *= length;
		this.z *= length;
		this.w *= length;
		return this;
	}
	,toEulerAngles: function() {
		var result = new com_babylonhx_math_Vector3(0,0,0);
		this.toEulerAnglesToRef(result);
		return result;
	}
	,toEulerAnglesToRef: function(result) {
		var qx = this.x;
		var qy = this.y;
		var qz = this.z;
		var qw = this.w;
		var qxy = qx * qy;
		var qxz = qx * qz;
		var qwy = qw * qy;
		var qwz = qw * qz;
		var qwx = qw * qx;
		var qyz = qy * qz;
		var sqx = qx * qx;
		var sqy = qy * qy;
		var determinant = sqx + sqy;
		if(determinant != 0.000 && determinant != 1.000) {
			result.x = Math.atan2(qxz + qwy,qwx - qyz);
			result.y = Math.acos(1 - 2 * determinant);
			result.z = Math.atan2(qxz - qwy,qwx + qyz);
		} else if(determinant == 0.000) {
			result.x = 0.0;
			result.y = 0.0;
			result.z = Math.atan2(qxy - qwz,0.5 - sqy - qz * qz);
		} else {
			result.x = Math.atan2(qxy - qwz,0.5 - sqy - qz * qz);
			result.y = Math.PI;
			result.z = 0.0;
		}
	}
	,toRotationMatrix: function(result) {
		var xx = this.x * this.x;
		var yy = this.y * this.y;
		var zz = this.z * this.z;
		var xy = this.x * this.y;
		var zw = this.z * this.w;
		var zx = this.z * this.x;
		var yw = this.y * this.w;
		var yz = this.y * this.z;
		var xw = this.x * this.w;
		result.m[0] = 1.0 - 2.0 * (yy + zz);
		result.m[1] = 2.0 * (xy + zw);
		result.m[2] = 2.0 * (zx - yw);
		result.m[3] = 0;
		result.m[4] = 2.0 * (xy - zw);
		result.m[5] = 1.0 - 2.0 * (zz + xx);
		result.m[6] = 2.0 * (yz + xw);
		result.m[7] = 0;
		result.m[8] = 2.0 * (zx + yw);
		result.m[9] = 2.0 * (yz - xw);
		result.m[10] = 1.0 - 2.0 * (yy + xx);
		result.m[11] = 0;
		result.m[12] = 0;
		result.m[13] = 0;
		result.m[14] = 0;
		result.m[15] = 1.0;
	}
	,multVector: function(vec) {
		var num = this.x * 2;
		var num2 = this.y * 2;
		var num3 = this.z * 2;
		var num4 = this.x * num;
		var num5 = this.y * num2;
		var num6 = this.z * num3;
		var num7 = this.x * num2;
		var num8 = this.x * num3;
		var num9 = this.y * num3;
		var num10 = this.w * num;
		var num11 = this.w * num2;
		var num12 = this.w * num3;
		var result = new com_babylonhx_math_Vector3();
		result.x = (1 - (num5 + num6)) * vec.x + (num7 - num12) * vec.y + (num8 + num11) * vec.z;
		result.y = (num7 + num12) * vec.x + (1 - (num4 + num6)) * vec.y + (num9 - num10) * vec.z;
		result.z = (num8 - num11) * vec.x + (num9 + num10) * vec.y + (1 - (num4 + num5)) * vec.z;
		return result;
	}
	,fromRotationMatrix: function(matrix) {
		com_babylonhx_math_Quaternion.FromRotationMatrixToRef(matrix,this);
		return this;
	}
	,__class__: com_babylonhx_math_Quaternion
};
var com_babylonhx_math_Vector3 = $hx_exports.BABYLON.Vector3 = function(x,y,z) {
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["com.babylonhx.math.Vector3"] = com_babylonhx_math_Vector3;
com_babylonhx_math_Vector3.__name__ = ["com","babylonhx","math","Vector3"];
com_babylonhx_math_Vector3.GetClipFactor = function(vector0,vector1,axis,size) {
	var d0 = vector0.x * axis.x + vector0.y * axis.y + vector0.z * axis.z - size;
	var d1 = vector1.x * axis.x + vector1.y * axis.y + vector1.z * axis.z - size;
	var s = d0 / (d0 - d1);
	return s;
};
com_babylonhx_math_Vector3.FromArray = function(array,offset) {
	if(offset == null) offset = 0;
	return new com_babylonhx_math_Vector3(array[offset],array[offset + 1],array[offset + 2]);
};
com_babylonhx_math_Vector3.FromFloatArray = function(array,offset) {
	if(offset == null) offset = 0;
	return new com_babylonhx_math_Vector3(array[offset],array[offset + 1],array[offset + 2]);
};
com_babylonhx_math_Vector3.FromArrayToRef = function(array,offset,result) {
	result.x = array[offset];
	result.y = array[offset + 1];
	result.z = array[offset + 2];
};
com_babylonhx_math_Vector3.FromFloatArrayToRef = function(array,offset,result) {
	result.x = array[offset];
	result.y = array[offset + 1];
	result.z = array[offset + 2];
};
com_babylonhx_math_Vector3.FromFloatsToRef = function(x,y,z,result) {
	result.x = x;
	result.y = y;
	result.z = z;
};
com_babylonhx_math_Vector3.Zero = function() {
	return new com_babylonhx_math_Vector3(0,0,0);
};
com_babylonhx_math_Vector3.One = function() {
	return new com_babylonhx_math_Vector3(1,1,1);
};
com_babylonhx_math_Vector3.Up = function() {
	return new com_babylonhx_math_Vector3(0,1.0,0);
};
com_babylonhx_math_Vector3.Down = function() {
	return new com_babylonhx_math_Vector3(0,-1.0,0);
};
com_babylonhx_math_Vector3.Forward = function() {
	return new com_babylonhx_math_Vector3(0,0,1.0);
};
com_babylonhx_math_Vector3.Back = function() {
	return new com_babylonhx_math_Vector3(0,0,-1.0);
};
com_babylonhx_math_Vector3.Right = function() {
	return new com_babylonhx_math_Vector3(1.0,0,0);
};
com_babylonhx_math_Vector3.Left = function() {
	return new com_babylonhx_math_Vector3(-1.0,0,0);
};
com_babylonhx_math_Vector3.TransformCoordinates = function(vector,transformation) {
	var result = new com_babylonhx_math_Vector3(0,0,0);
	com_babylonhx_math_Vector3.TransformCoordinatesToRef(vector,transformation,result);
	return result;
};
com_babylonhx_math_Vector3.TransformCoordinatesToRef = function(vector,transformation,result) {
	var x = vector.x * transformation.m[0] + vector.y * transformation.m[4] + vector.z * transformation.m[8] + transformation.m[12];
	var y = vector.x * transformation.m[1] + vector.y * transformation.m[5] + vector.z * transformation.m[9] + transformation.m[13];
	var z = vector.x * transformation.m[2] + vector.y * transformation.m[6] + vector.z * transformation.m[10] + transformation.m[14];
	var w = vector.x * transformation.m[3] + vector.y * transformation.m[7] + vector.z * transformation.m[11] + transformation.m[15];
	result.x = x / w;
	result.y = y / w;
	result.z = z / w;
};
com_babylonhx_math_Vector3.TransformCoordinatesFromFloatsToRef = function(x,y,z,transformation,result) {
	var rx = x * transformation.m[0] + y * transformation.m[4] + z * transformation.m[8] + transformation.m[12];
	var ry = x * transformation.m[1] + y * transformation.m[5] + z * transformation.m[9] + transformation.m[13];
	var rz = x * transformation.m[2] + y * transformation.m[6] + z * transformation.m[10] + transformation.m[14];
	var rw = x * transformation.m[3] + y * transformation.m[7] + z * transformation.m[11] + transformation.m[15];
	result.x = rx / rw;
	result.y = ry / rw;
	result.z = rz / rw;
};
com_babylonhx_math_Vector3.TransformNormal = function(vector,transformation) {
	var result = new com_babylonhx_math_Vector3(0,0,0);
	result.x = vector.x * transformation.m[0] + vector.y * transformation.m[4] + vector.z * transformation.m[8];
	result.y = vector.x * transformation.m[1] + vector.y * transformation.m[5] + vector.z * transformation.m[9];
	result.z = vector.x * transformation.m[2] + vector.y * transformation.m[6] + vector.z * transformation.m[10];
	return result;
};
com_babylonhx_math_Vector3.TransformNormalToRef = function(vector,transformation,result) {
	result.x = vector.x * transformation.m[0] + vector.y * transformation.m[4] + vector.z * transformation.m[8];
	result.y = vector.x * transformation.m[1] + vector.y * transformation.m[5] + vector.z * transformation.m[9];
	result.z = vector.x * transformation.m[2] + vector.y * transformation.m[6] + vector.z * transformation.m[10];
};
com_babylonhx_math_Vector3.TransformNormalFromFloatsToRef = function(x,y,z,transformation,result) {
	result.x = x * transformation.m[0] + y * transformation.m[4] + z * transformation.m[8];
	result.y = x * transformation.m[1] + y * transformation.m[5] + z * transformation.m[9];
	result.z = x * transformation.m[2] + y * transformation.m[6] + z * transformation.m[10];
};
com_babylonhx_math_Vector3.CatmullRom = function(value1,value2,value3,value4,amount) {
	var squared = amount * amount;
	var cubed = amount * squared;
	var x = 0.5 * (2.0 * value2.x + (-value1.x + value3.x) * amount + (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) * squared + (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);
	var y = 0.5 * (2.0 * value2.y + (-value1.y + value3.y) * amount + (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) * squared + (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);
	var z = 0.5 * (2.0 * value2.z + (-value1.z + value3.z) * amount + (2.0 * value1.z - 5.0 * value2.z + 4.0 * value3.z - value4.z) * squared + (-value1.z + 3.0 * value2.z - 3.0 * value3.z + value4.z) * cubed);
	return new com_babylonhx_math_Vector3(x,y,z);
};
com_babylonhx_math_Vector3.Clamp = function(value,min,max) {
	var x = value.x;
	if(x > max.x) x = max.x; else x = x;
	if(x < min.x) x = min.x; else x = x;
	var y = value.y;
	if(y > max.y) y = max.y; else y = y;
	if(y < min.y) y = min.y; else y = y;
	var z = value.z;
	if(z > max.z) z = max.z; else z = z;
	if(z < min.z) z = min.z; else z = z;
	return new com_babylonhx_math_Vector3(x,y,z);
};
com_babylonhx_math_Vector3.Hermite = function(value1,tangent1,value2,tangent2,amount) {
	var squared = amount * amount;
	var cubed = amount * squared;
	var part1 = 2.0 * cubed - 3.0 * squared + 1.0;
	var part2 = -2. * cubed + 3.0 * squared;
	var part3 = cubed - 2.0 * squared + amount;
	var part4 = cubed - squared;
	var x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;
	var y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;
	var z = value1.z * part1 + value2.z * part2 + tangent1.z * part3 + tangent2.z * part4;
	return new com_babylonhx_math_Vector3(x,y,z);
};
com_babylonhx_math_Vector3.Lerp = function(start,end,amount) {
	var x = start.x + (end.x - start.x) * amount;
	var y = start.y + (end.y - start.y) * amount;
	var z = start.z + (end.z - start.z) * amount;
	return new com_babylonhx_math_Vector3(x,y,z);
};
com_babylonhx_math_Vector3.Dot = function(left,right) {
	return left.x * right.x + left.y * right.y + left.z * right.z;
};
com_babylonhx_math_Vector3.Cross = function(left,right) {
	var result = new com_babylonhx_math_Vector3(0,0,0);
	result.x = left.y * right.z - left.z * right.y;
	result.y = left.z * right.x - left.x * right.z;
	result.z = left.x * right.y - left.y * right.x;
	return result;
};
com_babylonhx_math_Vector3.CrossToRef = function(left,right,result) {
	result.x = left.y * right.z - left.z * right.y;
	result.y = left.z * right.x - left.x * right.z;
	result.z = left.x * right.y - left.y * right.x;
};
com_babylonhx_math_Vector3.Normalize = function(vector) {
	var result = new com_babylonhx_math_Vector3(0,0,0);
	result.x = vector.x;
	result.y = vector.y;
	result.z = vector.z;
	result.normalize();
	return result;
};
com_babylonhx_math_Vector3.NormalizeToRef = function(vector,result) {
	result.x = vector.x;
	result.y = vector.y;
	result.z = vector.z;
	result.normalize();
};
com_babylonhx_math_Vector3.Project = function(vector,world,transform,viewport) {
	var cw = viewport.width;
	var ch = viewport.height;
	var cx = viewport.x;
	var cy = viewport.y;
	var viewportMatrix = com_babylonhx_math_Matrix.FromValues(cw / 2.0,0,0,0,0,-ch / 2.0,0,0,0,0,1,0,cx + cw / 2.0,ch / 2.0 + cy,0,1);
	var finalMatrix = world.multiply(transform).multiply(viewportMatrix);
	return com_babylonhx_math_Vector3.TransformCoordinates(vector,finalMatrix);
};
com_babylonhx_math_Vector3.UnprojectFromTransform = function(source,viewportWidth,viewportHeight,world,transform) {
	var matrix = world.multiply(transform);
	matrix.invertToRef(matrix);
	matrix;
	source.x = source.x / viewportWidth * 2 - 1;
	source.y = -(source.y / viewportHeight * 2 - 1);
	var vector = com_babylonhx_math_Vector3.TransformCoordinates(source,matrix);
	var num = source.x * matrix.m[3] + source.y * matrix.m[7] + source.z * matrix.m[11] + matrix.m[15];
	if(com_babylonhx_tools_Tools.WithinEpsilon(num,1.0,null)) vector = vector.scale(1.0 / num);
	return vector;
};
com_babylonhx_math_Vector3.Unproject = function(source,viewportWidth,viewportHeight,world,view,projection) {
	var matrix = world.multiply(view).multiply(projection);
	matrix.invertToRef(matrix);
	matrix;
	var screenSource = new com_babylonhx_math_Vector3(source.x / viewportWidth * 2 - 1,-(source.y / viewportHeight * 2 - 1),source.z);
	var vector = com_babylonhx_math_Vector3.TransformCoordinates(screenSource,matrix);
	var num = screenSource.x * matrix.m[3] + screenSource.y * matrix.m[7] + screenSource.z * matrix.m[11] + matrix.m[15];
	if(com_babylonhx_tools_Tools.WithinEpsilon(num,1.0,null)) vector = vector.scale(1.0 / num);
	return vector;
};
com_babylonhx_math_Vector3.Minimize = function(left,right) {
	var min = new com_babylonhx_math_Vector3(left.x,left.y,left.z);
	if(right.x < min.x) min.x = right.x;
	if(right.y < min.y) min.y = right.y;
	if(right.z < min.z) min.z = right.z;
	return min;
};
com_babylonhx_math_Vector3.Maximize = function(left,right) {
	var max = new com_babylonhx_math_Vector3(left.x,left.y,left.z);
	if(right.x > max.x) max.x = right.x;
	if(right.y > max.y) max.y = right.y;
	if(right.z > max.z) max.z = right.z;
	return max;
};
com_babylonhx_math_Vector3.Distance = function(value1,value2) {
	return Math.sqrt(com_babylonhx_math_Vector3.DistanceSquared(value1,value2));
};
com_babylonhx_math_Vector3.DistanceSquared = function(value1,value2) {
	var x = value1.x - value2.x;
	var y = value1.y - value2.y;
	var z = value1.z - value2.z;
	return x * x + y * y + z * z;
};
com_babylonhx_math_Vector3.Center = function(value1,value2) {
	var center = new com_babylonhx_math_Vector3(value1.x + value2.x,value1.y + value2.y,value1.z + value2.z);
	center.x *= 0.5;
	center.y *= 0.5;
	center.z *= 0.5;
	center;
	return center;
};
com_babylonhx_math_Vector3.RotationFromAxis = function(axis1,axis2,axis3) {
	var rotation = new com_babylonhx_math_Vector3(0,0,0);
	com_babylonhx_math_Vector3.RotationFromAxisToRef(axis1,axis2,axis3,rotation);
	return rotation;
};
com_babylonhx_math_Vector3.RotationFromAxisToRef = function(axis1,axis2,axis3,ref) {
	var u = com_babylonhx_math_Vector3.Normalize(axis1);
	var w = com_babylonhx_math_Vector3.Normalize(axis3);
	var X = com_babylonhx_math_Axis.X;
	var Y = com_babylonhx_math_Axis.Y;
	var yaw = 0.0;
	var pitch = 0.0;
	var roll = 0.0;
	var x = 0.0;
	var y = 0.0;
	var z = 0.0;
	var t = 0.0;
	var sign = -1.0;
	var nbRevert = 0;
	var cross;
	var dot = 0.0;
	var u1 = null;
	var v1 = null;
	if(com_babylonhx_tools_Tools.WithinEpsilon(w.z,0,0.001)) z = 1.0; else if(com_babylonhx_tools_Tools.WithinEpsilon(w.x,0,0.001)) x = 1.0; else {
		t = w.z / w.x;
		x = -t * Math.sqrt(1 / (1 + t * t));
		z = Math.sqrt(1 / (1 + t * t));
	}
	u1 = new com_babylonhx_math_Vector3(x,y,z);
	u1.normalize();
	v1 = com_babylonhx_math_Vector3.Cross(w,u1);
	v1.normalize();
	cross = com_babylonhx_math_Vector3.Cross(u,u1);
	cross.normalize();
	if(w.x * cross.x + w.y * cross.y + w.z * cross.z < 0) sign = 1.0;
	dot = u.x * u1.x + u.y * u1.y + u.z * u1.z;
	dot = Math.min(1.0,Math.max(-1.0,dot));
	roll = Math.acos(dot) * sign;
	if(u1.x * X.x + u1.y * X.y + u1.z * X.z < 0) {
		roll = Math.PI + roll;
		u1.x *= -1;
		u1.y *= -1;
		u1.z *= -1;
		u1 = u1;
		v1.x *= -1;
		v1.y *= -1;
		v1.z *= -1;
		v1 = v1;
		nbRevert++;
	}
	var w2 = null;
	var v2 = null;
	x = 0.0;
	y = 0.0;
	z = 0.0;
	sign = -1;
	if(com_babylonhx_tools_Tools.WithinEpsilon(w.z,0,0.001)) x = 1.0; else {
		t = u1.z / u1.x;
		x = -t * Math.sqrt(1 / (1 + t * t));
		z = Math.sqrt(1 / (1 + t * t));
	}
	w2 = new com_babylonhx_math_Vector3(x,y,z);
	w2.normalize();
	v2 = com_babylonhx_math_Vector3.Cross(w2,u1);
	v2.normalize();
	cross = com_babylonhx_math_Vector3.Cross(w,w2);
	cross.normalize();
	if(u1.x * cross.x + u1.y * cross.y + u1.z * cross.z < 0) sign = 1.0;
	dot = w.x * w2.x + w.y * w2.y + w.z * w2.z;
	dot = Math.min(1.0,Math.max(-1.0,dot));
	pitch = Math.acos(dot) * sign;
	if(v2.x * Y.x + v2.y * Y.y + v2.z * Y.z < 0) {
		pitch = Math.PI + pitch;
		v2.x *= -1;
		v2.y *= -1;
		v2.z *= -1;
		v2 = v2;
		w2.x *= -1;
		w2.y *= -1;
		w2.z *= -1;
		w2 = w2;
		nbRevert++;
	}
	sign = -1;
	cross = com_babylonhx_math_Vector3.Cross(X,u1);
	cross.normalize();
	if(cross.x * Y.x + cross.y * Y.y + cross.z * Y.z < 0) sign = 1.0;
	dot = u1.x * X.x + u1.y * X.y + u1.z * X.z;
	dot = Math.min(1.0,Math.max(-1.0,dot));
	yaw = -Math.acos(dot) * sign;
	if(dot < 0 && nbRevert < 2) yaw = Math.PI + yaw;
	ref.x = pitch;
	ref.y = yaw;
	ref.z = roll;
};
com_babylonhx_math_Vector3.prototype = {
	x: null
	,y: null
	,z: null
	,toString: function() {
		return "{X:" + this.x + " Y:" + this.y + " Z:" + this.z + "}";
	}
	,asArray: function() {
		var result = [];
		result[0] = this.x;
		result[1] = this.y;
		result[2] = this.z;
		return result;
	}
	,set: function(x,y,z) {
		if(z == null) z = 0;
		if(y == null) y = 0;
		if(x == null) x = 0;
		this.x = x;
		this.y = y;
		this.z = z;
	}
	,toArray: function(array,index) {
		if(index == null) index = 0;
		array[index] = this.x;
		array[index + 1] = this.y;
		array[index + 2] = this.z;
	}
	,toQuaternion: function() {
		var result = new com_babylonhx_math_Quaternion(0,0,0,1);
		var cosxPlusz = Math.cos((this.x + this.z) * 0.5);
		var sinxPlusz = Math.sin((this.x + this.z) * 0.5);
		var coszMinusx = Math.cos((this.z - this.x) * 0.5);
		var sinzMinusx = Math.sin((this.z - this.x) * 0.5);
		var cosy = Math.cos(this.y * 0.5);
		var siny = Math.sin(this.y * 0.5);
		result.x = coszMinusx * siny;
		result.y = -sinzMinusx * siny;
		result.z = sinxPlusz * cosy;
		result.w = cosxPlusz * cosy;
		return result;
	}
	,addInPlace: function(otherVector) {
		this.x += otherVector.x;
		this.y += otherVector.y;
		this.z += otherVector.z;
		return this;
	}
	,add: function(otherVector) {
		return new com_babylonhx_math_Vector3(this.x + otherVector.x,this.y + otherVector.y,this.z + otherVector.z);
	}
	,addToRef: function(otherVector,result) {
		result.x = this.x + otherVector.x;
		result.y = this.y + otherVector.y;
		result.z = this.z + otherVector.z;
	}
	,subtractInPlace: function(otherVector) {
		this.x -= otherVector.x;
		this.y -= otherVector.y;
		this.z -= otherVector.z;
		return this;
	}
	,subtract: function(otherVector) {
		return new com_babylonhx_math_Vector3(this.x - otherVector.x,this.y - otherVector.y,this.z - otherVector.z);
	}
	,subtractToRef: function(otherVector,result) {
		result.x = this.x - otherVector.x;
		result.y = this.y - otherVector.y;
		result.z = this.z - otherVector.z;
	}
	,subtractFromFloats: function(x,y,z) {
		return new com_babylonhx_math_Vector3(this.x - x,this.y - y,this.z - z);
	}
	,subtractFromFloatsToRef: function(x,y,z,result) {
		result.x = this.x - x;
		result.y = this.y - y;
		result.z = this.z - z;
	}
	,negate: function() {
		return new com_babylonhx_math_Vector3(-this.x,-this.y,-this.z);
	}
	,scaleInPlace: function(scale) {
		this.x *= scale;
		this.y *= scale;
		this.z *= scale;
		return this;
	}
	,scale: function(scale) {
		return new com_babylonhx_math_Vector3(this.x * scale,this.y * scale,this.z * scale);
	}
	,scaleToRef: function(scale,result) {
		result.x = this.x * scale;
		result.y = this.y * scale;
		result.z = this.z * scale;
	}
	,equals: function(otherVector) {
		return otherVector != null && this.x == otherVector.x && this.y == otherVector.y && this.z == otherVector.z;
	}
	,equalsWithEpsilon: function(otherVector,epsilon) {
		if(epsilon == null) epsilon = 0.001;
		return otherVector != null && com_babylonhx_tools_Tools.WithinEpsilon(this.x,otherVector.x,epsilon) && com_babylonhx_tools_Tools.WithinEpsilon(this.y,otherVector.y,epsilon) && com_babylonhx_tools_Tools.WithinEpsilon(this.z,otherVector.z,epsilon);
	}
	,equalsToFloats: function(x,y,z) {
		return this.x == x && this.y == y && this.z == z;
	}
	,multiplyInPlace: function(otherVector) {
		this.x *= otherVector.x;
		this.y *= otherVector.y;
		this.z *= otherVector.z;
	}
	,multiply: function(otherVector) {
		return new com_babylonhx_math_Vector3(this.x * otherVector.x,this.y * otherVector.y,this.z * otherVector.z);
	}
	,multiplyToRef: function(otherVector,result) {
		result.x = this.x * otherVector.x;
		result.y = this.y * otherVector.y;
		result.z = this.z * otherVector.z;
	}
	,multiplyByFloats: function(x,y,z) {
		return new com_babylonhx_math_Vector3(this.x * x,this.y * y,this.z * z);
	}
	,divide: function(otherVector) {
		return new com_babylonhx_math_Vector3(this.x / otherVector.x,this.y / otherVector.y,this.z / otherVector.z);
	}
	,divideToRef: function(otherVector,result) {
		result.x = this.x / otherVector.x;
		result.y = this.y / otherVector.y;
		result.z = this.z / otherVector.z;
	}
	,MinimizeInPlace: function(other) {
		if(other.x < this.x) this.x = other.x;
		if(other.y < this.y) this.y = other.y;
		if(other.z < this.z) this.z = other.z;
	}
	,MaximizeInPlace: function(other) {
		if(other.x > this.x) this.x = other.x;
		if(other.y > this.y) this.y = other.y;
		if(other.z > this.z) this.z = other.z;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,normalize: function() {
		var len = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(len == 0) return this;
		var num = 1.0 / len;
		this.x *= num;
		this.y *= num;
		this.z *= num;
		return this;
	}
	,clone: function() {
		return new com_babylonhx_math_Vector3(this.x,this.y,this.z);
	}
	,copyFrom: function(source) {
		this.x = source.x;
		this.y = source.y;
		this.z = source.z;
	}
	,copyFromFloats: function(x,y,z) {
		this.x = x;
		this.y = y;
		this.z = z;
		return this;
	}
	,__class__: com_babylonhx_math_Vector3
};
var com_babylonhx_animations_Animation = $hx_exports.BABYLON.Animation = function(name,targetProperty,framePerSecond,dataType,loopMode) {
	if(loopMode == null) loopMode = -1;
	this._ranges = [];
	this.allowMatricesInterpolation = false;
	this._events = [];
	this._stopped = false;
	this._highLimitsCache = [];
	this._offsetsCache = [];
	this.name = name;
	this.targetProperty = targetProperty;
	this.targetPropertyPath = targetProperty.split(".");
	this.framePerSecond = framePerSecond;
	this.dataType = dataType;
	if(loopMode == -1) this.loopMode = 1; else this.loopMode = loopMode;
};
$hxClasses["com.babylonhx.animations.Animation"] = com_babylonhx_animations_Animation;
com_babylonhx_animations_Animation.__name__ = ["com","babylonhx","animations","Animation"];
com_babylonhx_animations_Animation._PrepareAnimation = function(name,targetProperty,framePerSecond,totalFrame,from,to,loopMode,easingFunction) {
	var dataType = -1;
	if(typeof(from) == "number") dataType = 0; else if(js_Boot.__instanceof(from,com_babylonhx_math_Quaternion)) dataType = 2; else if(js_Boot.__instanceof(from,com_babylonhx_math_Vector3)) dataType = 1; else if(js_Boot.__instanceof(from,com_babylonhx_math_Vector2)) dataType = 5; else if(js_Boot.__instanceof(from,com_babylonhx_math_Color3)) dataType = 4;
	if(dataType == -1) return null;
	var animation = new com_babylonhx_animations_Animation(name,targetProperty,framePerSecond,dataType,loopMode);
	var keys = [];
	keys.push({ frame : 0, value : from});
	keys.push({ frame : totalFrame, value : to});
	animation.setKeys(keys);
	if(easingFunction != null) animation._easingFunction = easingFunction;
	return animation;
};
com_babylonhx_animations_Animation.CreateAndStartAnimation = function(name,node,targetProperty,framePerSecond,totalFrame,from,to,loopMode,easingFunction,onAnimationEnd) {
	var animation = com_babylonhx_animations_Animation._PrepareAnimation(name,targetProperty,framePerSecond,totalFrame,from,to,loopMode,easingFunction);
	return node._scene.beginDirectAnimation(node,[animation],0,totalFrame,animation.loopMode == 1,1.0,onAnimationEnd);
};
com_babylonhx_animations_Animation.CreateMergeAndStartAnimation = function(name,node,targetProperty,framePerSecond,totalFrame,from,to,loopMode,easingFunction,onAnimationEnd) {
	var animation = com_babylonhx_animations_Animation._PrepareAnimation(name,targetProperty,framePerSecond,totalFrame,from,to,loopMode,easingFunction);
	node.animations.push(animation);
	return node._scene.beginAnimation(node,0,totalFrame,animation.loopMode == 1,1.0,onAnimationEnd);
};
com_babylonhx_animations_Animation.prototype = {
	_keys: null
	,_offsetsCache: null
	,_highLimitsCache: null
	,_stopped: null
	,_easingFunction: null
	,_target: null
	,_events: null
	,name: null
	,targetProperty: null
	,targetPropertyPath: null
	,framePerSecond: null
	,dataType: null
	,loopMode: null
	,currentFrame: null
	,allowMatricesInterpolation: null
	,_ranges: null
	,addEvent: function(event) {
		this._events.push(event);
	}
	,removeEvents: function(frame) {
		var index = 0;
		while(index < this._events.length) {
			if(this._events[index].frame == frame) {
				this._events.splice(index,1);
				index--;
			}
			++index;
		}
	}
	,reset: function() {
		this._offsetsCache = [];
		this._highLimitsCache = [];
		this.currentFrame = 0;
	}
	,createRange: function(name,from,to) {
		this._ranges.push(new com_babylonhx_animations_AnimationRange(name,from,to));
	}
	,deleteRange: function(name) {
		var _g1 = 0;
		var _g = this._ranges.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this._ranges[index].name == name) {
				this._ranges.splice(index,1);
				return;
			}
		}
	}
	,getRange: function(name) {
		var _g1 = 0;
		var _g = this._ranges.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this._ranges[index].name == name) return this._ranges[index];
		}
		return null;
	}
	,isStopped: function() {
		return this._stopped;
	}
	,getKeys: function() {
		return this._keys;
	}
	,getEasingFunction: function() {
		return this._easingFunction;
	}
	,setEasingFunction: function(easingFunction) {
		this._easingFunction = easingFunction;
	}
	,floatInterpolateFunction: function(startValue,endValue,gradient) {
		return startValue + (endValue - startValue) * gradient;
	}
	,quaternionInterpolateFunction: function(startValue,endValue,gradient) {
		return com_babylonhx_math_Quaternion.Slerp(startValue,endValue,gradient);
	}
	,vector3InterpolateFunction: function(startValue,endValue,gradient) {
		return com_babylonhx_math_Vector3.Lerp(startValue,endValue,gradient);
	}
	,vector2InterpolateFunction: function(startValue,endValue,gradient) {
		return com_babylonhx_math_Vector2.Lerp(startValue,endValue,gradient);
	}
	,color3InterpolateFunction: function(startValue,endValue,gradient) {
		return com_babylonhx_math_Color3.Lerp(startValue,endValue,gradient);
	}
	,matrixInterpolateFunction: function(startValue,endValue,gradient) {
		com_babylonhx_animations_Animation.matrixInterpolateFunction_startScale.set(0,0,0);
		com_babylonhx_animations_Animation.matrixInterpolateFunction_startRotation.set(null,null,null,null);
		com_babylonhx_animations_Animation.matrixInterpolateFunction_startTranslation.set(0,0,0);
		startValue.decompose(com_babylonhx_animations_Animation.matrixInterpolateFunction_startScale,com_babylonhx_animations_Animation.matrixInterpolateFunction_startRotation,com_babylonhx_animations_Animation.matrixInterpolateFunction_startTranslation);
		com_babylonhx_animations_Animation.matrixInterpolateFunction_endScale.set(0,0,0);
		com_babylonhx_animations_Animation.matrixInterpolateFunction_endRotation.set(null,null,null,null);
		com_babylonhx_animations_Animation.matrixInterpolateFunction_endTranslation.set(0,0,0);
		endValue.decompose(com_babylonhx_animations_Animation.matrixInterpolateFunction_endScale,com_babylonhx_animations_Animation.matrixInterpolateFunction_endRotation,com_babylonhx_animations_Animation.matrixInterpolateFunction_endTranslation);
		var resultScale = com_babylonhx_math_Vector3.Lerp(com_babylonhx_animations_Animation.matrixInterpolateFunction_startScale,com_babylonhx_animations_Animation.matrixInterpolateFunction_endScale,gradient);
		var resultRotation = com_babylonhx_math_Quaternion.Slerp(com_babylonhx_animations_Animation.matrixInterpolateFunction_startRotation,com_babylonhx_animations_Animation.matrixInterpolateFunction_endRotation,gradient);
		var resultTranslation = com_babylonhx_math_Vector3.Lerp(com_babylonhx_animations_Animation.matrixInterpolateFunction_startTranslation,com_babylonhx_animations_Animation.matrixInterpolateFunction_endTranslation,gradient);
		return com_babylonhx_math_Matrix.Compose(resultScale,resultRotation,resultTranslation);
	}
	,clone: function() {
		var clone = new com_babylonhx_animations_Animation(this.name,this.targetPropertyPath.join("."),this.framePerSecond,this.dataType,this.loopMode);
		clone.setKeys(this._keys);
		return clone;
	}
	,setKeys: function(values) {
		this._keys = values.slice(0);
		this._offsetsCache = [];
		this._highLimitsCache = [];
	}
	,_interpolate: function(currentFrame,repeatCount,loopMode,offsetValue,highLimitValue) {
		if(loopMode == 2 && repeatCount > 0 && highLimitValue != null) if(highLimitValue.clone != null) return highLimitValue.clone(); else return highLimitValue;
		this.currentFrame = currentFrame;
		var startKey = Std["int"](Math.max(0,Math.min(this._keys.length - 1,Math.floor(this._keys.length * (currentFrame - this._keys[0].frame) / (this._keys[this._keys.length - 1].frame - this._keys[0].frame)) - 1)));
		if(this._keys[startKey].frame >= currentFrame) while(startKey - 1 >= 0 && this._keys[startKey].frame >= currentFrame) startKey--;
		var _g1 = startKey;
		var _g = this._keys.length;
		while(_g1 < _g) {
			var key = _g1++;
			if(this._keys[key + 1] != null && this._keys[key + 1].frame >= currentFrame) {
				var startValue = this._keys[key].value;
				var endValue = this._keys[key + 1].value;
				var gradient = (currentFrame - this._keys[key].frame) / (this._keys[key + 1].frame - this._keys[key].frame);
				if(this._easingFunction != null) gradient = this._easingFunction.ease(gradient);
				var _g2 = this.dataType;
				switch(_g2) {
				case 0:
					switch(loopMode) {
					case 1:case 2:
						return this.floatInterpolateFunction(startValue,endValue,gradient);
					case 0:
						return offsetValue * repeatCount + this.floatInterpolateFunction(startValue,endValue,gradient);
					}
					break;
				case 2:
					var quaternion = null;
					switch(loopMode) {
					case 1:case 2:
						quaternion = com_babylonhx_math_Quaternion.Slerp(startValue,endValue,gradient);
						break;
					case 0:
						quaternion = com_babylonhx_math_Quaternion.Slerp(startValue,endValue,gradient).add(offsetValue.scale(repeatCount));
						break;
					}
					return quaternion;
				case 1:
					switch(loopMode) {
					case 1:case 2:
						return com_babylonhx_math_Vector3.Lerp(startValue,endValue,gradient);
					case 0:
						return com_babylonhx_math_Vector3.Lerp(startValue,endValue,gradient).add(offsetValue.scale(repeatCount));
					}
					break;
				case 5:
					switch(loopMode) {
					case 1:case 2:
						return com_babylonhx_math_Vector2.Lerp(startValue,endValue,gradient);
					case 0:
						return com_babylonhx_math_Vector2.Lerp(startValue,endValue,gradient).add(offsetValue.scale(repeatCount));
					}
					break;
				case 4:
					switch(loopMode) {
					case 1:case 2:
						return com_babylonhx_math_Color3.Lerp(startValue,endValue,gradient);
					case 0:
						return com_babylonhx_math_Color3.Lerp(startValue,endValue,gradient).add(offsetValue.scale(repeatCount));
					}
					break;
				case 3:
					switch(loopMode) {
					case 1:case 2:case 0:
						return startValue;
					}
					break;
				default:
				}
			}
		}
		return this._keys[this._keys.length - 1].value;
	}
	,setValue: function(currentValue) {
		if(this.targetPropertyPath.length > 1) {
			var property = null;
			var _g = this.targetPropertyPath[0];
			switch(_g) {
			case "scaling":
				property = this._target.scaling;
				break;
			case "position":
				property = this._target.position;
				break;
			case "rotation":
				property = this._target.rotation;
				break;
			default:
				property = Reflect.getProperty(this._target,this.targetPropertyPath[0]);
			}
			var _g1 = 1;
			var _g2 = this.targetPropertyPath.length - 1;
			while(_g1 < _g2) {
				var index = _g1++;
				property = Reflect.getProperty(property,this.targetPropertyPath[index]);
			}
			var _g3 = this.targetPropertyPath[this.targetPropertyPath.length - 1];
			switch(_g3) {
			case "x":
				property.x = currentValue;
				break;
			case "y":
				property.y = currentValue;
				break;
			case "z":
				property.z = currentValue;
				break;
			default:
				Reflect.setProperty(property,this.targetPropertyPath[this.targetPropertyPath.length - 1],currentValue);
			}
		} else {
			var _g4 = this.targetPropertyPath[0];
			switch(_g4) {
			case "_matrix":
				this._target._matrix = currentValue;
				break;
			case "rotation":
				this._target.rotation = currentValue;
				break;
			case "position":
				this._target.position = currentValue;
				break;
			case "scaling":
				this._target.scaling = currentValue;
				break;
			default:
				Reflect.setProperty(this._target,this.targetPropertyPath[0],currentValue);
			}
		}
		if(this._target.markAsDirty != null) this._target.markAsDirty(this.targetProperty);
	}
	,goToFrame: function(frame) {
		if(frame < this._keys[0].frame) frame = this._keys[0].frame; else if(frame > this._keys[this._keys.length - 1].frame) frame = this._keys[this._keys.length - 1].frame;
		var currentValue = this._interpolate(frame,0,this.loopMode);
		this.setValue(currentValue);
	}
	,animate: function(delay,from,to,loop,speedRatio) {
		if(this.targetPropertyPath == null || this.targetPropertyPath.length < 1) {
			this._stopped = true;
			return false;
		}
		var returnValue = true;
		if(this._keys[0].frame != 0) {
			var newKey = { frame : 0, value : this._keys[0].value};
			this._keys.unshift(newKey);
		}
		if(from < this._keys[0].frame || from > this._keys[this._keys.length - 1].frame) from = this._keys[0].frame;
		if(to < this._keys[0].frame || to > this._keys[this._keys.length - 1].frame) to = this._keys[this._keys.length - 1].frame;
		var range = to - from;
		var offsetValue = null;
		var ratio = delay * (this.framePerSecond * speedRatio) / 1000.0;
		var highLimitValue = null;
		if(ratio > range && !loop) {
			returnValue = false;
			highLimitValue = this._keys[this._keys.length - 1].value;
		} else {
			highLimitValue = 0;
			if(this.loopMode != 1) {
				var keyOffset = to + from;
				if(this._offsetsCache.length > keyOffset) {
					var fromValue = this._interpolate(from,0,1);
					var toValue = this._interpolate(to,0,1);
					var _g = this.dataType;
					switch(_g) {
					case 0:
						this._offsetsCache[keyOffset] = toValue - fromValue;
						break;
					case 2:
						this._offsetsCache[keyOffset] = (js_Boot.__cast(toValue , com_babylonhx_math_Quaternion)).subtract(js_Boot.__cast(fromValue , com_babylonhx_math_Quaternion));
						break;
					case 1:
						this._offsetsCache[keyOffset] = (js_Boot.__cast(toValue , com_babylonhx_math_Vector3)).subtract(js_Boot.__cast(fromValue , com_babylonhx_math_Vector3));
						break;
					case 5:
						this._offsetsCache[keyOffset] = (js_Boot.__cast(toValue , com_babylonhx_math_Vector2)).subtract(js_Boot.__cast(fromValue , com_babylonhx_math_Vector2));
						break;
					case 4:
						this._offsetsCache[keyOffset] = (js_Boot.__cast(toValue , com_babylonhx_math_Color3)).subtract(js_Boot.__cast(fromValue , com_babylonhx_math_Color3));
						break;
					default:
					}
					this._highLimitsCache[keyOffset] = toValue;
				}
				highLimitValue = this._highLimitsCache[keyOffset];
				offsetValue = this._offsetsCache[keyOffset];
			}
		}
		if(offsetValue == null) {
			var _g1 = this.dataType;
			switch(_g1) {
			case 0:
				offsetValue = 0;
				break;
			case 2:
				offsetValue = new com_babylonhx_math_Quaternion(0,0,0,0);
				break;
			case 1:
				offsetValue = new com_babylonhx_math_Vector3(0,0,0);
				break;
			case 5:
				offsetValue = new com_babylonhx_math_Vector2(0,0);
				break;
			case 4:
				offsetValue = new com_babylonhx_math_Color3(0,0,0);
				break;
			}
		}
		var repeatCount = ratio / range | 0;
		var currentFrame;
		currentFrame = returnValue?from + ratio % range:to;
		var currentValue = this._interpolate(currentFrame,repeatCount,this.loopMode,offsetValue,highLimitValue);
		var index = 0;
		while(index < this._events.length) {
			if(currentFrame >= this._events[index].frame) {
				var event = this._events[index];
				if(!event.isDone) {
					if(event.onlyOnce) {
						this._events.splice(index,1);
						index--;
					}
					event.isDone = true;
					event.action();
				}
			} else if(this._events[index].isDone && !this._events[index].onlyOnce) this._events[index].isDone = false;
			++index;
		}
		this.setValue(currentValue);
		if(!returnValue) this._stopped = true;
		return returnValue;
	}
	,__class__: com_babylonhx_animations_Animation
};
var com_babylonhx_animations_AnimationEvent = function(frame,action,onlyOnce) {
	if(onlyOnce == null) onlyOnce = false;
	this.isDone = false;
	this.frame = frame;
	this.action = action;
	this.onlyOnce = onlyOnce;
};
$hxClasses["com.babylonhx.animations.AnimationEvent"] = com_babylonhx_animations_AnimationEvent;
com_babylonhx_animations_AnimationEvent.__name__ = ["com","babylonhx","animations","AnimationEvent"];
com_babylonhx_animations_AnimationEvent.prototype = {
	frame: null
	,action: null
	,onlyOnce: null
	,isDone: null
	,__class__: com_babylonhx_animations_AnimationEvent
};
var com_babylonhx_animations_AnimationRange = function(name,from,to) {
	this.name = name;
	this.from = from;
	this.to = to;
};
$hxClasses["com.babylonhx.animations.AnimationRange"] = com_babylonhx_animations_AnimationRange;
com_babylonhx_animations_AnimationRange.__name__ = ["com","babylonhx","animations","AnimationRange"];
com_babylonhx_animations_AnimationRange.prototype = {
	name: null
	,from: null
	,to: null
	,__class__: com_babylonhx_animations_AnimationRange
};
var com_babylonhx_animations_IAnimatable = $hx_exports.BABYLON.IAnimatable = function() { };
$hxClasses["com.babylonhx.animations.IAnimatable"] = com_babylonhx_animations_IAnimatable;
com_babylonhx_animations_IAnimatable.__name__ = ["com","babylonhx","animations","IAnimatable"];
com_babylonhx_animations_IAnimatable.prototype = {
	animations: null
	,__class__: com_babylonhx_animations_IAnimatable
};
var com_babylonhx_animations_easing_IEasingFunction = $hx_exports.BABYLON.IEasingFunction = function() { };
$hxClasses["com.babylonhx.animations.easing.IEasingFunction"] = com_babylonhx_animations_easing_IEasingFunction;
com_babylonhx_animations_easing_IEasingFunction.__name__ = ["com","babylonhx","animations","easing","IEasingFunction"];
com_babylonhx_animations_easing_IEasingFunction.prototype = {
	ease: null
	,__class__: com_babylonhx_animations_easing_IEasingFunction
};
var com_babylonhx_animations_easing_EasingFunction = $hx_exports.BABYLON.EasingFunction = function() {
	this._easingMode = com_babylonhx_animations_easing_EasingFunction.EASINGMODE_EASEIN;
};
$hxClasses["com.babylonhx.animations.easing.EasingFunction"] = com_babylonhx_animations_easing_EasingFunction;
com_babylonhx_animations_easing_EasingFunction.__name__ = ["com","babylonhx","animations","easing","EasingFunction"];
com_babylonhx_animations_easing_EasingFunction.__interfaces__ = [com_babylonhx_animations_easing_IEasingFunction];
com_babylonhx_animations_easing_EasingFunction.prototype = {
	_easingMode: null
	,setEasingMode: function(easingMode) {
		var n = Math.min(Math.max(easingMode,0),2);
		this._easingMode = n;
	}
	,getEasingMode: function() {
		return this._easingMode;
	}
	,easeInCore: function(gradient) {
		throw new js__$Boot_HaxeError("You must implement this method");
	}
	,ease: function(gradient) {
		var _g = this._easingMode;
		switch(_g) {
		case 0:
			return this.easeInCore(gradient);
		case 1:
			return 1 - this.easeInCore(1 - gradient);
		}
		if(gradient >= 0.5) return (1 - this.easeInCore((1 - gradient) * 2)) * 0.5 + 0.5;
		return this.easeInCore(gradient * 2) * 0.5;
	}
	,__class__: com_babylonhx_animations_easing_EasingFunction
};
var com_babylonhx_bones_Bone = $hx_exports.BABYLON.Bone = function(name,skeleton,parentBone,matrix) {
	this._invertedAbsoluteTransform = new com_babylonhx_math_Matrix();
	this._absoluteTransform = new com_babylonhx_math_Matrix();
	this._worldTransform = new com_babylonhx_math_Matrix();
	this.children = [];
	com_babylonhx_Node.call(this,name,skeleton.getScene());
	this._skeleton = skeleton;
	this._matrix = matrix;
	this._baseMatrix = matrix;
	skeleton.bones.push(this);
	if(parentBone != null) {
		this._parent = parentBone;
		parentBone.children.push(this);
	} else this._parent = null;
	this._updateDifferenceMatrix();
};
$hxClasses["com.babylonhx.bones.Bone"] = com_babylonhx_bones_Bone;
com_babylonhx_bones_Bone.__name__ = ["com","babylonhx","bones","Bone"];
com_babylonhx_bones_Bone.__interfaces__ = [com_babylonhx_animations_IAnimatable];
com_babylonhx_bones_Bone.__super__ = com_babylonhx_Node;
com_babylonhx_bones_Bone.prototype = $extend(com_babylonhx_Node.prototype,{
	children: null
	,_skeleton: null
	,_matrix: null
	,_baseMatrix: null
	,_worldTransform: null
	,_absoluteTransform: null
	,_invertedAbsoluteTransform: null
	,_parent: null
	,getParent: function() {
		return this._parent;
	}
	,getLocalMatrix: function() {
		return this._matrix;
	}
	,getBaseMatrix: function() {
		return this._baseMatrix;
	}
	,getWorldMatrix: function() {
		return this._worldTransform;
	}
	,getInvertedAbsoluteTransform: function() {
		return this._invertedAbsoluteTransform;
	}
	,getAbsoluteMatrix: function() {
		var matrix = this._matrix.clone();
		var parent = this._parent;
		while(parent != null) {
			matrix = matrix.multiply(parent._matrix);
			parent = parent._parent;
		}
		return matrix;
	}
	,updateMatrix: function(matrix) {
		this._matrix = matrix;
		this._skeleton._isDirty = true;
		this._updateDifferenceMatrix();
	}
	,_updateDifferenceMatrix: function() {
		if(this._parent != null) this._matrix.multiplyToRef(this._parent._absoluteTransform,this._absoluteTransform); else this._absoluteTransform.copyFrom(this._matrix);
		this._absoluteTransform.invertToRef(this._invertedAbsoluteTransform);
		var _g1 = 0;
		var _g = this.children.length;
		while(_g1 < _g) {
			var index = _g1++;
			this.children[index]._updateDifferenceMatrix();
		}
	}
	,markAsDirty: function() {
		this._currentRenderId++;
		this._skeleton._isDirty = true;
	}
	,__class__: com_babylonhx_bones_Bone
});
var com_babylonhx_bones_Skeleton = $hx_exports.BABYLON.Skeleton = function(name,id,scene) {
	this._identity = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	this._isDirty = true;
	this.name = name;
	this.id = id;
	this.bones = [];
	this._scene = scene;
	scene.skeletons.push(this);
	this.prepare();
	this._isDirty = true;
};
$hxClasses["com.babylonhx.bones.Skeleton"] = com_babylonhx_bones_Skeleton;
com_babylonhx_bones_Skeleton.__name__ = ["com","babylonhx","bones","Skeleton"];
com_babylonhx_bones_Skeleton.__interfaces__ = [com_babylonhx_ISmartArrayCompatible];
com_babylonhx_bones_Skeleton.prototype = {
	id: null
	,name: null
	,bones: null
	,_scene: null
	,_isDirty: null
	,_transformMatrices: null
	,_animatables: null
	,_identity: null
	,__smartArrayFlags: null
	,getTransformMatrices: function() {
		return this._transformMatrices;
	}
	,getScene: function() {
		return this._scene;
	}
	,_markAsDirty: function() {
		this._isDirty = true;
	}
	,prepare: function() {
		if(!this._isDirty) return;
		if(this._transformMatrices == null || this._transformMatrices.length != 16 * (this.bones.length + 1)) {
			var elements = 16 * (this.bones.length + 1);
			var this1;
			if(elements != null) this1 = new Float32Array(elements); else this1 = null;
			this._transformMatrices = this1;
		}
		var _g1 = 0;
		var _g = this.bones.length;
		while(_g1 < _g) {
			var index = _g1++;
			var bone = this.bones[index];
			var parentBone = bone._parent;
			if(parentBone != null) bone._matrix.multiplyToRef(parentBone.getWorldMatrix(),bone.getWorldMatrix()); else bone.getWorldMatrix().copyFrom(bone._matrix);
			bone._invertedAbsoluteTransform.multiplyToArray(bone.getWorldMatrix(),this._transformMatrices,index * 16);
		}
		this._identity.copyToArray(this._transformMatrices,this.bones.length * 16);
		this._isDirty = false;
	}
	,getAnimatables: function() {
		if(this._animatables == null || this._animatables.length != this.bones.length) {
			this._animatables = [];
			var _g1 = 0;
			var _g = this.bones.length;
			while(_g1 < _g) {
				var index = _g1++;
				this._animatables.push(this.bones[index]);
			}
		}
		return this._animatables;
	}
	,clone: function(name,id) {
		var result = new com_babylonhx_bones_Skeleton(name,id != null?id:name,this._scene);
		var _g1 = 0;
		var _g = this.bones.length;
		while(_g1 < _g) {
			var index = _g1++;
			var source = this.bones[index];
			var parentBone = null;
			if(source._parent != null) {
				var parentIndex = HxOverrides.indexOf(this.bones,source._parent,0);
				parentBone = result.bones[parentIndex];
			}
			var bone = new com_babylonhx_bones_Bone(source.name,result,parentBone,source._baseMatrix);
			var _g2 = 0;
			var _g3 = source.animations;
			while(_g2 < _g3.length) {
				var anim = _g3[_g2];
				++_g2;
				bone.animations.push(anim.clone());
			}
		}
		return result;
	}
	,dispose: function() {
		this.getScene().stopAnimation(this);
		this.getScene().removeSkeleton(this);
	}
	,__class__: com_babylonhx_bones_Skeleton
};
var com_babylonhx_cameras_Camera = $hx_exports.BABYLON.Camera = function(name,position,scene) {
	this._globalPosition = new com_babylonhx_math_Vector3(0,0,0);
	this._activeMeshes = new com_babylonhx_tools_SmartArray(256);
	this._postProcessesTakenIndices = [];
	this._postProcesses = [];
	this._projectionMatrix = new com_babylonhx_math_Matrix();
	this._computedViewMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	this._rigCameras = [];
	this.cameraRigMode = 0;
	this.fovMode = 0;
	this.layerMask = -1;
	this.subCameras = [];
	this.viewport = new com_babylonhx_math_Viewport(0,0,1,1);
	this.isIntermediate = false;
	this.mode = 0;
	this.inertia = 0.9;
	this.maxZ = 10000.0;
	this.minZ = 1.0;
	this.fov = 0.8;
	this.orthoTop = null;
	this.orthoBottom = null;
	this.orthoRight = null;
	this.orthoLeft = null;
	this.upVector = new com_babylonhx_math_Vector3(0,1.0,0);
	this.position = new com_babylonhx_math_Vector3(0,0,0);
	com_babylonhx_Node.call(this,name,scene);
	this.position = position;
	scene.addCamera(this);
	if(scene.activeCamera == null) scene.activeCamera = this;
	this.getProjectionMatrix = $bind(this,this.getProjectionMatrix_default);
	this._getViewMatrix = $bind(this,this._getViewMatrix_default);
};
$hxClasses["com.babylonhx.cameras.Camera"] = com_babylonhx_cameras_Camera;
com_babylonhx_cameras_Camera.__name__ = ["com","babylonhx","cameras","Camera"];
com_babylonhx_cameras_Camera.__interfaces__ = [com_babylonhx_animations_IAnimatable];
com_babylonhx_cameras_Camera.__super__ = com_babylonhx_Node;
com_babylonhx_cameras_Camera.prototype = $extend(com_babylonhx_Node.prototype,{
	position: null
	,upVector: null
	,orthoLeft: null
	,orthoRight: null
	,orthoBottom: null
	,orthoTop: null
	,fov: null
	,minZ: null
	,maxZ: null
	,inertia: null
	,mode: null
	,isIntermediate: null
	,viewport: null
	,subCameras: null
	,layerMask: null
	,fovMode: null
	,cameraRigMode: null
	,_cameraRigParams: null
	,_rigCameras: null
	,_computedViewMatrix: null
	,_projectionMatrix: null
	,_worldMatrix: null
	,_postProcesses: null
	,_postProcessesTakenIndices: null
	,_activeMeshes: null
	,_globalPosition: null
	,_getViewMatrix: null
	,getProjectionMatrix: null
	,get_globalPosition: function() {
		return this._globalPosition;
	}
	,getActiveMeshes: function() {
		return this._activeMeshes;
	}
	,isActiveMesh: function(mesh) {
		return this._activeMeshes.indexOf(mesh) != -1;
	}
	,_initCache: function() {
		com_babylonhx_Node.prototype._initCache.call(this);
		this._cache.position = new com_babylonhx_math_Vector3(Infinity,Infinity,Infinity);
		this._cache.upVector = new com_babylonhx_math_Vector3(Infinity,Infinity,Infinity);
		this._cache.mode = null;
		this._cache.minZ = null;
		this._cache.maxZ = null;
		this._cache.fov = null;
		this._cache.aspectRatio = null;
		this._cache.orthoLeft = null;
		this._cache.orthoRight = null;
		this._cache.orthoBottom = null;
		this._cache.orthoTop = null;
		this._cache.renderWidth = null;
		this._cache.renderHeight = null;
	}
	,_updateCache: function(ignoreParentClass) {
		if(ignoreParentClass == null) ignoreParentClass = false;
		if(!ignoreParentClass) com_babylonhx_Node.prototype._updateCache.call(this);
		var engine = this._scene._engine;
		this._cache.position.copyFrom(this.position);
		this._cache.upVector.copyFrom(this.upVector);
		this._cache.mode = this.mode;
		this._cache.minZ = this.minZ;
		this._cache.maxZ = this.maxZ;
		this._cache.fov = this.fov;
		this._cache.aspectRatio = engine.getAspectRatio(this);
		this._cache.orthoLeft = this.orthoLeft;
		this._cache.orthoRight = this.orthoRight;
		this._cache.orthoBottom = this.orthoBottom;
		this._cache.orthoTop = this.orthoTop;
		this._cache.renderWidth = engine.getRenderWidth();
		this._cache.renderHeight = engine.getRenderHeight();
	}
	,_updateFromScene: function() {
		this.updateCache();
		this._update();
	}
	,_isSynchronized: function() {
		return this._isSynchronizedViewMatrix() && this._isSynchronizedProjectionMatrix();
	}
	,_isSynchronizedViewMatrix: function() {
		if(!com_babylonhx_Node.prototype._isSynchronized.call(this)) return false;
		return this._cache.position.equals(this.position) && this._cache.upVector.equals(this.upVector) && this.isSynchronizedWithParent();
	}
	,_isSynchronizedProjectionMatrix: function() {
		var check = this._cache.mode == this.mode && this._cache.minZ == this.minZ && this._cache.maxZ == this.maxZ;
		if(!check) return false;
		var engine = this._scene._engine;
		if(this.mode == 0) check = this._cache.fov == this.fov && this._cache.aspectRatio == engine.getAspectRatio(this); else check = this._cache.orthoLeft == this.orthoLeft && this._cache.orthoRight == this.orthoRight && this._cache.orthoBottom == this.orthoBottom && this._cache.orthoTop == this.orthoTop && this._cache.renderWidth == engine.getRenderWidth() && this._cache.renderHeight == engine.getRenderHeight();
		return check;
	}
	,attachControl: function(element,noPreventDefault,useCtrlForPanning) {
		if(useCtrlForPanning == null) useCtrlForPanning = true;
		if(noPreventDefault == null) noPreventDefault = false;
	}
	,detachControl: function(element) {
	}
	,_update: function() {
		if(this.cameraRigMode != 0) this._updateRigCameras();
		this._checkInputs();
	}
	,_checkInputs: function() {
	}
	,attachPostProcess: function(postProcess,insertAt) {
		if(!postProcess.isReusable() && HxOverrides.indexOf(this._postProcesses,postProcess,0) > -1) {
			haxe_Log.trace("You're trying to reuse a post process not defined as reusable.",{ fileName : "Camera.hx", lineNumber : 228, className : "com.babylonhx.cameras.Camera", methodName : "attachPostProcess"});
			return 0;
		}
		if(insertAt == null || insertAt < 0) {
			this._postProcesses.push(postProcess);
			this._postProcessesTakenIndices.push(this._postProcesses.length - 1);
			return this._postProcesses.length - 1;
		}
		var add = 0;
		if(this._postProcesses[insertAt] != null) {
			var start = this._postProcesses.length - 1;
			var i = start;
			while(i >= insertAt + 1) {
				this._postProcesses[i + 1] = this._postProcesses[i];
				--i;
			}
			add = 1;
		}
		var _g1 = 0;
		var _g = this._postProcessesTakenIndices.length;
		while(_g1 < _g) {
			var i1 = _g1++;
			if(this._postProcessesTakenIndices[i1] < insertAt) continue;
			var start1 = this._postProcessesTakenIndices.length - 1;
			var j = start1;
			while(j >= i1) {
				this._postProcessesTakenIndices[j + 1] = this._postProcessesTakenIndices[j] + add;
				--j;
			}
			this._postProcessesTakenIndices[i1] = insertAt;
			break;
		}
		if(add == 0 && HxOverrides.indexOf(this._postProcessesTakenIndices,insertAt,0) == -1) this._postProcessesTakenIndices.push(insertAt);
		var result = insertAt + add;
		this._postProcesses[result] = postProcess;
		return result;
	}
	,detachPostProcess: function(postProcess,atIndices) {
		var result = [];
		if(atIndices == null) {
			var _g1 = 0;
			var _g = this._postProcesses.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this._postProcesses[i] != postProcess) continue;
				this._postProcesses.splice(i,1);
				var index = HxOverrides.indexOf(this._postProcessesTakenIndices,i,0);
				this._postProcessesTakenIndices.splice(index,1);
			}
		} else {
			if((atIndices instanceof Array) && atIndices.__enum__ == null) atIndices = atIndices; else atIndices = [atIndices];
			var _g11 = 0;
			var _g2 = atIndices.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var foundPostProcess = this._postProcesses[atIndices[i1]];
				if(foundPostProcess != postProcess) {
					result.push(i1);
					continue;
				}
				this._postProcesses.splice(atIndices[i1],1);
				var index1 = HxOverrides.indexOf(this._postProcessesTakenIndices,atIndices[i1],0);
				this._postProcessesTakenIndices.splice(index1,1);
			}
		}
		return result;
	}
	,getWorldMatrix: function() {
		if(this._worldMatrix == null) this._worldMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
		var viewMatrix = this.getViewMatrix();
		viewMatrix.invertToRef(this._worldMatrix);
		return this._worldMatrix;
	}
	,_getViewMatrix_default: function() {
		return com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	}
	,getViewMatrix: function(force) {
		if(force == null) force = false;
		this._computedViewMatrix = this._computeViewMatrix(force);
		if(!force && this._isSynchronizedViewMatrix()) return this._computedViewMatrix;
		if(this.parent == null || ($_=this.parent,$bind($_,$_.getWorldMatrix)) == null) this._globalPosition.copyFrom(this.position); else {
			if(this._worldMatrix == null) this._worldMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
			this._computedViewMatrix.invertToRef(this._worldMatrix);
			this._worldMatrix.multiplyToRef(this.parent.getWorldMatrix(),this._computedViewMatrix);
			this._globalPosition.copyFromFloats(this._computedViewMatrix.m[12],this._computedViewMatrix.m[13],this._computedViewMatrix.m[14]);
			this._computedViewMatrix.invert();
			this._parentRenderId = this.parent._currentRenderId;
		}
		this._currentRenderId = this._scene._renderId;
		return this._computedViewMatrix;
	}
	,_computeViewMatrix: function(force) {
		if(force == null) force = false;
		if(!force && this._isSynchronizedViewMatrix()) return this._computedViewMatrix;
		this._computedViewMatrix = this._getViewMatrix();
		this._currentRenderId = this._scene._renderId;
		return this._computedViewMatrix;
	}
	,getProjectionMatrix_default: function(force) {
		if(force == null) force = false;
		if(!force && this._isSynchronizedProjectionMatrix()) return this._projectionMatrix;
		var engine = this._scene._engine;
		if(this.mode == 0) {
			if(this.minZ <= 0) this.minZ = 0.1;
			com_babylonhx_math_Matrix.PerspectiveFovLHToRef(this.fov,engine.getAspectRatio(this),this.minZ,this.maxZ,this._projectionMatrix,this.fovMode);
			return this._projectionMatrix;
		}
		var halfWidth = engine.getRenderWidth() / 2.0;
		var halfHeight = engine.getRenderHeight() / 2.0;
		com_babylonhx_math_Matrix.OrthoOffCenterLHToRef(this.orthoLeft == null?-halfWidth:this.orthoLeft,this.orthoRight == null?halfWidth:this.orthoRight,this.orthoBottom == null?-halfHeight:this.orthoBottom,this.orthoTop == null?halfHeight:this.orthoTop,this.minZ,this.maxZ,this._projectionMatrix);
		return this._projectionMatrix;
	}
	,dispose: function() {
		this._scene.stopAnimation(this);
		this._scene.removeCamera(this);
		while(this._rigCameras.length > 0) this._rigCameras.pop().dispose();
		var _g1 = 0;
		var _g = this._postProcessesTakenIndices.length;
		while(_g1 < _g) {
			var i = _g1++;
			this._postProcesses[this._postProcessesTakenIndices[i]].dispose(this);
		}
	}
	,setCameraRigMode: function(mode,rigParams) {
		while(this._rigCameras.length > 0) this._rigCameras.pop().dispose();
		this.cameraRigMode = mode;
		this._cameraRigParams = { };
		var _g = this.cameraRigMode;
		switch(_g) {
		case 10:case 11:case 12:case 13:
			if(rigParams.interaxialDistance != null) this._cameraRigParams.interaxialDistance = rigParams.interaxialDistance; else this._cameraRigParams.interaxialDistance = 0.0637;
			this._cameraRigParams.stereoHalfAngle = this._cameraRigParams.interaxialDistance / 0.0637 * Math.PI / 180;
			this._rigCameras.push(this.createRigCamera(this.name + "_L",0));
			this._rigCameras.push(this.createRigCamera(this.name + "_R",1));
			break;
		}
		var postProcesses = [];
		var _g1 = this.cameraRigMode;
		switch(_g1) {
		case 10:
			postProcesses.push(new com_babylonhx_postprocess_PassPostProcess(this.name + "_passthru",1.0,this._rigCameras[0]));
			this._rigCameras[0].isIntermediate = true;
			postProcesses.push(new com_babylonhx_postprocess_AnaglyphPostProcess(this.name + "_anaglyph",1.0,this._rigCameras[1]));
			postProcesses[1].onApply = function(effect) {
				effect._engine.setTextureFromPostProcess(HxOverrides.indexOf(effect._samplers,"leftSampler",0),postProcesses[0]);
			};
			break;
		case 11:case 12:case 13:
			var isStereoscopicHoriz = this.cameraRigMode == 11 || this.cameraRigMode == 12;
			var firstCamIndex;
			if(this.cameraRigMode == 12) firstCamIndex = 1; else firstCamIndex = 0;
			var secondCamIndex = 1 - firstCamIndex;
			postProcesses.push(new com_babylonhx_postprocess_PassPostProcess(this.name + "_passthru",1.0,this._rigCameras[firstCamIndex]));
			this._rigCameras[firstCamIndex].isIntermediate = true;
			postProcesses.push(new com_babylonhx_postprocess_StereoscopicInterlacePostProcess(this.name + "_stereoInterlace",this._rigCameras[secondCamIndex],postProcesses[0],isStereoscopicHoriz));
			break;
		case 20:
			this._rigCameras.push(this.createRigCamera(this.name + "_L",0));
			this._rigCameras.push(this.createRigCamera(this.name + "_R",1));
			var metrics;
			if(rigParams.vrCameraMetrics != null) metrics = rigParams.vrCameraMetrics; else metrics = com_babylonhx_cameras_VRCameraMetrics.GetDefault();
			this._rigCameras[0]._cameraRigParams.vrMetrics = metrics;
			this._rigCameras[0].viewport = new com_babylonhx_math_Viewport(0,0,0.5,1.0);
			this._rigCameras[0]._cameraRigParams.vrWorkMatrix = new com_babylonhx_math_Matrix();
			this._rigCameras[0]._cameraRigParams.vrHMatrix = metrics.get_leftHMatrix();
			this._rigCameras[0]._cameraRigParams.vrPreViewMatrix = metrics.get_leftPreViewMatrix();
			this._rigCameras[0].getProjectionMatrix = ($_=this._rigCameras[0],$bind($_,$_._getVRProjectionMatrix));
			if(metrics.compensateDistortion) postProcesses.push(new com_babylonhx_postprocess_VRDistortionCorrectionPostProcess("VR_Distort_Compensation_Left",this._rigCameras[0],false,metrics));
			this._rigCameras[1]._cameraRigParams.vrMetrics = this._rigCameras[0]._cameraRigParams.vrMetrics;
			this._rigCameras[1].viewport = new com_babylonhx_math_Viewport(0.5,0,0.5,1.0);
			this._rigCameras[1]._cameraRigParams.vrWorkMatrix = new com_babylonhx_math_Matrix();
			this._rigCameras[1]._cameraRigParams.vrHMatrix = metrics.get_rightHMatrix();
			this._rigCameras[1]._cameraRigParams.vrPreViewMatrix = metrics.get_rightPreViewMatrix();
			this._rigCameras[1].getProjectionMatrix = ($_=this._rigCameras[1],$bind($_,$_._getVRProjectionMatrix));
			if(metrics.compensateDistortion) postProcesses.push(new com_babylonhx_postprocess_VRDistortionCorrectionPostProcess("VR_Distort_Compensation_Right",this._rigCameras[1],true,metrics));
			break;
		}
		this._update();
	}
	,_getVRProjectionMatrix: function(force) {
		if(force == null) force = false;
		var vrMetrics = this._cameraRigParams.vrMetrics;
		com_babylonhx_math_Matrix.PerspectiveFovLHToRef(vrMetrics.get_aspectRatioFov(),vrMetrics.get_aspectRatio(),this.minZ,this.maxZ,this._cameraRigParams.vrWorkMatrix);
		this._cameraRigParams.vrWorkMatrix.multiplyToRef(this._cameraRigParams.vrHMatrix,this._projectionMatrix);
		return this._projectionMatrix;
	}
	,setCameraRigParameter: function(name,value) {
		if(name == "interaxialDistance") this._cameraRigParams.stereoHalfAngle = value / 0.0637 * Math.PI / 180;
	}
	,createRigCamera: function(name,cameraIndex) {
		return null;
	}
	,_updateRigCameras: function() {
		var _g1 = 0;
		var _g = this._rigCameras.length;
		while(_g1 < _g) {
			var i = _g1++;
			this._rigCameras[i].minZ = this.minZ;
			this._rigCameras[i].maxZ = this.maxZ;
			this._rigCameras[i].fov = this.fov;
		}
		if(this.cameraRigMode == 10) this._rigCameras[0].viewport = this._rigCameras[1].viewport = this.viewport;
	}
	,__class__: com_babylonhx_cameras_Camera
	,__properties__: {get_globalPosition:"get_globalPosition"}
});
var com_babylonhx_cameras_TargetCamera = $hx_exports.BABYLON.TargetCamera = function(name,position,scene) {
	this._tempMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._lookAtTemp = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._transformedReferencePoint = new com_babylonhx_math_Vector3(0,0,0);
	this._referencePoint = new com_babylonhx_math_Vector3(0,0,1);
	this._cameraRotationMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._cameraTransformMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._camMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._viewMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._currentTarget = new com_babylonhx_math_Vector3(0,0,0);
	this.lockedTarget = null;
	this.noRotationConstraint = false;
	this.speed = 2.0;
	this.rotation = new com_babylonhx_math_Vector3(0,0,0);
	this.cameraRotation = new com_babylonhx_math_Vector2(0,0);
	this.cameraDirection = new com_babylonhx_math_Vector3(0,0,0);
	com_babylonhx_cameras_Camera.call(this,name,position,scene);
};
$hxClasses["com.babylonhx.cameras.TargetCamera"] = com_babylonhx_cameras_TargetCamera;
com_babylonhx_cameras_TargetCamera.__name__ = ["com","babylonhx","cameras","TargetCamera"];
com_babylonhx_cameras_TargetCamera.__super__ = com_babylonhx_cameras_Camera;
com_babylonhx_cameras_TargetCamera.prototype = $extend(com_babylonhx_cameras_Camera.prototype,{
	cameraDirection: null
	,cameraRotation: null
	,rotation: null
	,speed: null
	,noRotationConstraint: null
	,lockedTarget: null
	,_currentTarget: null
	,_viewMatrix: null
	,_camMatrix: null
	,_cameraTransformMatrix: null
	,_cameraRotationMatrix: null
	,_rigCamTransformMatrix: null
	,_referencePoint: null
	,_transformedReferencePoint: null
	,_lookAtTemp: null
	,_tempMatrix: null
	,_reset: null
	,_waitingLockedTargetId: null
	,getFrontPosition: function(distance) {
		var direction = this.getTarget().subtract(this.position);
		direction.normalize();
		direction.x *= distance;
		direction.y *= distance;
		direction.z *= distance;
		direction;
		return this.get_globalPosition().add(direction);
	}
	,_getLockedTargetPosition: function() {
		if(this.lockedTarget == null) return null;
		if(this.lockedTarget.position != null) return this.lockedTarget.position; else return this.lockedTarget;
	}
	,_initCache: function() {
		com_babylonhx_cameras_Camera.prototype._initCache.call(this);
		this._cache.lockedTarget = new com_babylonhx_math_Vector3(Infinity,Infinity,Infinity);
		this._cache.rotation = new com_babylonhx_math_Vector3(Infinity,Infinity,Infinity);
	}
	,_updateCache: function(ignoreParentClass) {
		if(ignoreParentClass == null) ignoreParentClass = false;
		if(!ignoreParentClass) com_babylonhx_cameras_Camera.prototype._updateCache.call(this);
		var lockedTargetPosition = this._getLockedTargetPosition();
		if(lockedTargetPosition == null) this._cache.lockedTarget = null; else if(this._cache.lockedTarget == null) this._cache.lockedTarget = new com_babylonhx_math_Vector3(lockedTargetPosition.x,lockedTargetPosition.y,lockedTargetPosition.z); else this._cache.lockedTarget.copyFrom(lockedTargetPosition);
		this._cache.rotation.copyFrom(this.rotation);
	}
	,_isSynchronizedViewMatrix: function() {
		if(!com_babylonhx_cameras_Camera.prototype._isSynchronizedViewMatrix.call(this)) return false;
		var lockedTargetPosition = this._getLockedTargetPosition();
		return (this._cache.lockedTarget != null?this._cache.lockedTarget.equals(lockedTargetPosition):lockedTargetPosition == null) && this._cache.rotation.equals(this.rotation);
	}
	,_computeLocalCameraSpeed: function() {
		var engine = this._scene._engine;
		return this.speed * (engine.deltaTime / (engine.fps * 10.0));
	}
	,setTarget: function(target) {
		this.upVector.normalize();
		com_babylonhx_math_Matrix.LookAtLHToRef(this.position,target,this.upVector,this._camMatrix);
		this._camMatrix.invert();
		this.rotation.x = Math.atan(this._camMatrix.m[6] / this._camMatrix.m[10]);
		com_babylonhx_cameras_TargetCamera.vDir = target.subtract(this.position);
		if(com_babylonhx_cameras_TargetCamera.vDir.x >= 0.0) this.rotation.y = -Math.atan(com_babylonhx_cameras_TargetCamera.vDir.z / com_babylonhx_cameras_TargetCamera.vDir.x) + Math.PI / 2.0; else this.rotation.y = -Math.atan(com_babylonhx_cameras_TargetCamera.vDir.z / com_babylonhx_cameras_TargetCamera.vDir.x) - Math.PI / 2.0;
		this.rotation.z = -Math.acos(com_babylonhx_math_Vector3.Dot(com_babylonhx_cameras_TargetCamera.zUpVector,this.upVector));
	}
	,getTarget: function() {
		return this._currentTarget;
	}
	,_decideIfNeedsToMove: function() {
		return Math.abs(this.cameraDirection.x) > 0 || Math.abs(this.cameraDirection.y) > 0 || Math.abs(this.cameraDirection.z) > 0;
	}
	,_updatePosition: function() {
		this.position.addInPlace(this.cameraDirection);
	}
	,_checkInputs: function() {
		var needToMove = this._decideIfNeedsToMove();
		var needToRotate = Math.abs(this.cameraRotation.x) > 0 || Math.abs(this.cameraRotation.y) > 0;
		if(needToMove) this._updatePosition();
		if(needToRotate) {
			this.rotation.x += this.cameraRotation.x;
			this.rotation.y += this.cameraRotation.y;
			if(!this.noRotationConstraint) {
				var limit = Math.PI / 2 * 0.95;
				if(this.rotation.x > limit) this.rotation.x = limit;
				if(this.rotation.x < -limit) this.rotation.x = -limit;
			}
		}
		if(needToMove) {
			if(Math.abs(this.cameraDirection.x) < 0.001) this.cameraDirection.x = 0;
			if(Math.abs(this.cameraDirection.y) < 0.001) this.cameraDirection.y = 0;
			if(Math.abs(this.cameraDirection.z) < 0.001) this.cameraDirection.z = 0;
			this.cameraDirection.scaleInPlace(this.inertia);
		}
		if(needToRotate) {
			if(Math.abs(this.cameraRotation.x) < 0.001) this.cameraRotation.x = 0;
			if(Math.abs(this.cameraRotation.y) < 0.001) this.cameraRotation.y = 0;
			this.cameraRotation.scaleInPlace(this.inertia);
		}
		com_babylonhx_cameras_Camera.prototype._checkInputs.call(this);
	}
	,_getViewMatrix_default: function() {
		if(this.lockedTarget == null) {
			if(this.upVector.x != 0 || this.upVector.y != 1.0 || this.upVector.z != 0) {
				com_babylonhx_math_Matrix.LookAtLHToRef(new com_babylonhx_math_Vector3(0,0,0),this._referencePoint,this.upVector,this._lookAtTemp);
				com_babylonhx_math_Quaternion.RotationYawPitchRollToRef(this.rotation.y,this.rotation.x,this.rotation.z,com_babylonhx_math_Matrix._tempQuaternion);
				com_babylonhx_math_Matrix._tempQuaternion.toRotationMatrix(this._cameraRotationMatrix);
				this._lookAtTemp.multiplyToRef(this._cameraRotationMatrix,this._tempMatrix);
				this._lookAtTemp.invert();
				this._tempMatrix.multiplyToRef(this._lookAtTemp,this._cameraRotationMatrix);
			} else {
				com_babylonhx_math_Quaternion.RotationYawPitchRollToRef(this.rotation.y,this.rotation.x,this.rotation.z,com_babylonhx_math_Matrix._tempQuaternion);
				com_babylonhx_math_Matrix._tempQuaternion.toRotationMatrix(this._cameraRotationMatrix);
			}
			com_babylonhx_math_Vector3.TransformCoordinatesToRef(this._referencePoint,this._cameraRotationMatrix,this._transformedReferencePoint);
			this.position.addToRef(this._transformedReferencePoint,this._currentTarget);
		} else this._currentTarget.copyFrom(this._getLockedTargetPosition());
		com_babylonhx_math_Matrix.LookAtLHToRef(this.position,this._currentTarget,this.upVector,this._viewMatrix);
		return this._viewMatrix;
	}
	,_getVRViewMatrix: function() {
		com_babylonhx_math_Quaternion.RotationYawPitchRollToRef(this.rotation.y,this.rotation.x,this.rotation.z,com_babylonhx_math_Matrix._tempQuaternion);
		com_babylonhx_math_Matrix._tempQuaternion.toRotationMatrix(this._cameraRotationMatrix);
		com_babylonhx_math_Vector3.TransformCoordinatesToRef(this._referencePoint,this._cameraRotationMatrix,this._transformedReferencePoint);
		com_babylonhx_math_Vector3.TransformNormalToRef(this.upVector,this._cameraRotationMatrix,this._cameraRigParams.vrActualUp);
		this.position.addToRef(this._transformedReferencePoint,this._currentTarget);
		com_babylonhx_math_Matrix.LookAtLHToRef(this.position,this._currentTarget,this._cameraRigParams.vrActualUp,this._cameraRigParams.vrWorkMatrix);
		this._cameraRigParams.vrWorkMatrix.multiplyToRef(this._cameraRigParams.vrPreViewMatrix,this._viewMatrix);
		return this._viewMatrix;
	}
	,createRigCamera: function(name,cameraIndex) {
		if(this.cameraRigMode != 0) {
			var rigCamera = new com_babylonhx_cameras_TargetCamera(name,this.position.clone(),this._scene);
			if(this.cameraRigMode == 20) {
				rigCamera._cameraRigParams = { };
				rigCamera._cameraRigParams.vrActualUp = new com_babylonhx_math_Vector3(0,0,0);
				rigCamera._getViewMatrix = $bind(rigCamera,rigCamera._getVRViewMatrix);
			}
			return rigCamera;
		}
		return null;
	}
	,_updateRigCameras: function() {
		var _g = this.cameraRigMode;
		switch(_g) {
		case 10:case 11:case 12:case 13:case 20:
			var camLeft = this._rigCameras[0];
			var camRight = this._rigCameras[1];
			if(this.cameraRigMode == 20) {
				camLeft.rotation.x = camRight.rotation.x = this.rotation.x;
				camLeft.rotation.y = camRight.rotation.y = this.rotation.y;
				camLeft.rotation.z = camRight.rotation.z = this.rotation.z;
				camLeft.position.copyFrom(this.position);
				camRight.position.copyFrom(this.position);
			} else {
				this._getRigCamPosition(-this._cameraRigParams.stereoHalfAngle,camLeft.position);
				this._getRigCamPosition(this._cameraRigParams.stereoHalfAngle,camRight.position);
				camLeft.setTarget(this.getTarget());
				camRight.setTarget(this.getTarget());
			}
			break;
		}
		com_babylonhx_cameras_Camera.prototype._updateRigCameras.call(this);
	}
	,_getRigCamPosition: function(halfSpace,result) {
		if(this._rigCamTransformMatrix == null) this._rigCamTransformMatrix = new com_babylonhx_math_Matrix();
		var target = this.getTarget();
		com_babylonhx_math_Matrix.Translation(-target.x,-target.y,-target.z).multiplyToRef(com_babylonhx_math_Matrix.RotationY(halfSpace),this._rigCamTransformMatrix);
		this._rigCamTransformMatrix = this._rigCamTransformMatrix.multiply(com_babylonhx_math_Matrix.Translation(target.x,target.y,target.z));
		com_babylonhx_math_Vector3.TransformCoordinatesToRef(this.position,this._rigCamTransformMatrix,result);
	}
	,__class__: com_babylonhx_cameras_TargetCamera
});
var com_babylonhx_cameras_ArcRotateCamera = $hx_exports.BABYLON.ArcRotateCamera = function(name,alpha,beta,radius,target,scene) {
	this._newPosition = new com_babylonhx_math_Vector3(0,0,0);
	this._collisionVelocity = new com_babylonhx_math_Vector3(0,0,0);
	this._previousPosition = new com_babylonhx_math_Vector3(0,0,0);
	this._collider = new com_babylonhx_collisions_Collider();
	this.collisionRadius = new com_babylonhx_math_Vector3(0.5,0.5,0.5);
	this.checkCollisions = false;
	this._lastPanningPosition = new com_babylonhx_math_Vector2(0,0);
	this._isCtrlPushed = false;
	this._isRightClick = false;
	this._keys = [];
	this.allowUpsideDown = true;
	this.pinchInwards = true;
	this.targetScreenOffset = new com_babylonhx_math_Vector2(0,0);
	this.zoomOnFactor = 1;
	this.keysRight = [com_babylonhx_utils_Keycodes.right];
	this.keysLeft = [com_babylonhx_utils_Keycodes.left];
	this.keysDown = [com_babylonhx_utils_Keycodes.down];
	this.keysUp = [com_babylonhx_utils_Keycodes.up];
	this.panningSensibility = 0.1;
	this.pinchPrecision = 2.0;
	this.wheelPrecision = 3.0;
	this.angularSensibility = 1000.0;
	this.upperRadiusLimit = null;
	this.lowerRadiusLimit = null;
	this.upperBetaLimit = Math.PI;
	this.lowerBetaLimit = 0.01;
	this.upperAlphaLimit = null;
	this.lowerAlphaLimit = null;
	this.inertialRadiusOffset = 0;
	this.inertialBetaOffset = 0;
	this.inertialAlphaOffset = 0;
	com_babylonhx_cameras_TargetCamera.call(this,name,new com_babylonhx_math_Vector3(0,0,0),scene);
	this.alpha = alpha;
	this.beta = beta;
	this.radius = radius;
	if(target != null) {
		if(target.position != null) this.target = target.position.clone(); else this.target = target.clone();
	} else this.target = new com_babylonhx_math_Vector3(0,0,0);
	this.getViewMatrix();
};
$hxClasses["com.babylonhx.cameras.ArcRotateCamera"] = com_babylonhx_cameras_ArcRotateCamera;
com_babylonhx_cameras_ArcRotateCamera.__name__ = ["com","babylonhx","cameras","ArcRotateCamera"];
com_babylonhx_cameras_ArcRotateCamera.__super__ = com_babylonhx_cameras_TargetCamera;
com_babylonhx_cameras_ArcRotateCamera.prototype = $extend(com_babylonhx_cameras_TargetCamera.prototype,{
	inertialAlphaOffset: null
	,inertialBetaOffset: null
	,inertialRadiusOffset: null
	,lowerAlphaLimit: null
	,upperAlphaLimit: null
	,lowerBetaLimit: null
	,upperBetaLimit: null
	,lowerRadiusLimit: null
	,upperRadiusLimit: null
	,angularSensibility: null
	,wheelPrecision: null
	,pinchPrecision: null
	,panningSensibility: null
	,keysUp: null
	,keysDown: null
	,keysLeft: null
	,keysRight: null
	,zoomOnFactor: null
	,targetScreenOffset: null
	,pinchInwards: null
	,allowUpsideDown: null
	,_keys: null
	,_attachedElement: null
	,_onContextMenu: null
	,_onPointerDown: null
	,_onPointerUp: null
	,_onPointerMove: null
	,_wheel: null
	,_onMouseMove: null
	,_onKeyDown: null
	,_onKeyUp: null
	,_onLostFocus: null
	,_onGestureStart: null
	,_onGesture: null
	,_MSGestureHandler: null
	,_localDirection: null
	,_transformedDirection: null
	,_isRightClick: null
	,_isCtrlPushed: null
	,_lastPanningPosition: null
	,onCollide: null
	,checkCollisions: null
	,collisionRadius: null
	,_collider: null
	,_previousPosition: null
	,_collisionVelocity: null
	,_newPosition: null
	,_previousAlpha: null
	,_previousBeta: null
	,_previousRadius: null
	,_collisionTriggered: null
	,alpha: null
	,beta: null
	,radius: null
	,target: null
	,_getTargetPosition: function() {
		if(this.target.position != null) return this.target.position; else return this.target;
	}
	,_initCache: function() {
		com_babylonhx_cameras_TargetCamera.prototype._initCache.call(this);
		this._cache.target = new com_babylonhx_math_Vector3(Infinity,Infinity,Infinity);
		this._cache.alpha = null;
		this._cache.beta = null;
		this._cache.radius = null;
		this._cache.targetScreenOffset = null;
	}
	,_updateCache: function(ignoreParentClass) {
		if(ignoreParentClass == null) ignoreParentClass = false;
		if(!ignoreParentClass) com_babylonhx_cameras_TargetCamera.prototype._updateCache.call(this);
		this._cache.target.copyFrom(this._getTargetPosition());
		this._cache.alpha = this.alpha;
		this._cache.beta = this.beta;
		this._cache.radius = this.radius;
		this._cache.targetScreenOffset = this.targetScreenOffset.clone();
	}
	,_isSynchronizedViewMatrix: function() {
		if(!com_babylonhx_cameras_TargetCamera.prototype._isSynchronizedViewMatrix.call(this)) return false;
		return this._cache.target.equals(this._getTargetPosition()) && this._cache.alpha == this.alpha && this._cache.beta == this.beta && this._cache.radius == this.radius && this._cache.targetScreenOffset.equals(this.targetScreenOffset);
	}
	,attachControl: function(element,noPreventDefault,useCtrlForPanning) {
		if(useCtrlForPanning == null) useCtrlForPanning = true;
		if(noPreventDefault == null) noPreventDefault = false;
		var _g = this;
		var previousPosition = null;
		var pointerId = -1;
		if(this._attachedElement != null) return;
		this._attachedElement = element;
		var engine = this._scene._engine;
		if(this._onPointerDown == null) {
			this._onPointerDown = function(x,y,button) {
				previousPosition = { x : x, y : y};
			};
			this._onPointerUp = function(x1,y1,button1) {
				previousPosition = null;
			};
			this._onMouseMove = function(x2,y2) {
				if(previousPosition == null && !engine.isPointerLock) return;
				var offsetX = 0;
				var offsetY = 0;
				if(!engine.isPointerLock) {
					offsetX = x2 - previousPosition.x;
					offsetY = y2 - previousPosition.y;
				}
				_g.inertialAlphaOffset -= offsetX / _g.angularSensibility;
				_g.inertialBetaOffset -= offsetY / _g.angularSensibility;
				previousPosition = { x : x2, y : y2};
			};
			this._wheel = function(delta) {
				var _delta = delta / _g.wheelPrecision;
				_g.inertialRadiusOffset += _delta / 20;
			};
			this._onKeyDown = function(keycode) {
				if(HxOverrides.indexOf(_g.keysUp,keycode,0) != -1 || HxOverrides.indexOf(_g.keysDown,keycode,0) != -1 || HxOverrides.indexOf(_g.keysLeft,keycode,0) != -1 || HxOverrides.indexOf(_g.keysRight,keycode,0) != -1) {
					var index = HxOverrides.indexOf(_g._keys,keycode,0);
					if(index == -1) _g._keys.push(keycode);
				}
			};
			this._onKeyUp = function(keycode1) {
				if(HxOverrides.indexOf(_g.keysUp,keycode1,0) != -1 || HxOverrides.indexOf(_g.keysDown,keycode1,0) != -1 || HxOverrides.indexOf(_g.keysLeft,keycode1,0) != -1 || HxOverrides.indexOf(_g.keysRight,keycode1,0) != -1) {
					var index1 = HxOverrides.indexOf(_g._keys,keycode1,0);
					if(index1 >= 0) _g._keys.splice(index1,1);
				}
			};
			this._onLostFocus = function() {
				_g._keys = [];
				pointerId = 0;
			};
			this._reset = function() {
				_g._keys = [];
				_g.inertialAlphaOffset = 0;
				_g.inertialBetaOffset = 0;
				_g.inertialRadiusOffset = 0;
				previousPosition = null;
				pointerId = 0;
			};
		}
		com_babylonhx_Engine.keyDown.push(this._onKeyDown);
		com_babylonhx_Engine.keyUp.push(this._onKeyUp);
		com_babylonhx_Engine.mouseDown.push(this._onPointerDown);
		com_babylonhx_Engine.mouseUp.push(this._onPointerUp);
		com_babylonhx_Engine.mouseMove.push(this._onMouseMove);
		com_babylonhx_Engine.mouseWheel.push(this._wheel);
	}
	,detachControl: function(element) {
		if(this._attachedElement != element) return;
		var x = this._onKeyDown;
		HxOverrides.remove(com_babylonhx_Engine.keyDown,x);
		var x1 = this._onKeyUp;
		HxOverrides.remove(com_babylonhx_Engine.keyUp,x1);
		var x2 = this._onPointerDown;
		HxOverrides.remove(com_babylonhx_Engine.mouseDown,x2);
		var x3 = this._onPointerUp;
		HxOverrides.remove(com_babylonhx_Engine.mouseUp,x3);
		var x4 = this._onMouseMove;
		HxOverrides.remove(com_babylonhx_Engine.mouseMove,x4);
		var x5 = this._wheel;
		HxOverrides.remove(com_babylonhx_Engine.mouseWheel,x5);
		this._attachedElement = null;
		if(this._reset != null) this._reset();
	}
	,_update: function() {
		var _g1 = 0;
		var _g = this._keys.length;
		while(_g1 < _g) {
			var index = _g1++;
			var keyCode = this._keys[index];
			if(HxOverrides.indexOf(this.keysLeft,keyCode,0) != -1) this.inertialAlphaOffset -= 0.01; else if(HxOverrides.indexOf(this.keysUp,keyCode,0) != -1) this.inertialBetaOffset -= 0.01; else if(HxOverrides.indexOf(this.keysRight,keyCode,0) != -1) this.inertialAlphaOffset += 0.01; else if(HxOverrides.indexOf(this.keysDown,keyCode,0) != -1) this.inertialBetaOffset += 0.01;
		}
		if(this.inertialAlphaOffset != 0 || this.inertialBetaOffset != 0 || this.inertialRadiusOffset != 0) {
			this.alpha += this.inertialAlphaOffset;
			this.beta += this.inertialBetaOffset;
			this.radius -= this.inertialRadiusOffset;
			this.inertialAlphaOffset *= this.inertia;
			this.inertialBetaOffset *= this.inertia;
			this.inertialRadiusOffset *= this.inertia;
			if(Math.abs(this.inertialAlphaOffset) < 0.001) this.inertialAlphaOffset = 0;
			if(Math.abs(this.inertialBetaOffset) < 0.001) this.inertialBetaOffset = 0;
			if(Math.abs(this.inertialRadiusOffset) < 0.001) this.inertialRadiusOffset = 0;
		}
		if(this.lowerAlphaLimit != null && this.alpha < this.lowerAlphaLimit) this.alpha = this.lowerAlphaLimit;
		if(this.upperAlphaLimit != null && this.alpha > this.upperAlphaLimit) this.alpha = this.upperAlphaLimit;
		if(this.beta < this.lowerBetaLimit) this.beta = this.lowerBetaLimit;
		if(this.beta > this.upperBetaLimit) this.beta = this.upperBetaLimit;
		if(this.lowerRadiusLimit != null && this.radius < this.lowerRadiusLimit) this.radius = this.lowerRadiusLimit;
		if(this.upperRadiusLimit != null && this.radius > this.upperRadiusLimit) this.radius = this.upperRadiusLimit;
	}
	,setPosition: function(position) {
		if(this.position.equals(position)) return;
		var radiusv3 = position.subtract(this._getTargetPosition());
		this.radius = Math.sqrt(radiusv3.x * radiusv3.x + radiusv3.y * radiusv3.y + radiusv3.z * radiusv3.z);
		this.alpha = Math.acos(radiusv3.x / Math.sqrt(Math.pow(radiusv3.x,2) + Math.pow(radiusv3.z,2)));
		if(radiusv3.z < 0) this.alpha = 2 * Math.PI - this.alpha;
		this.beta = Math.acos(radiusv3.y / this.radius);
	}
	,_getViewMatrix_default: function() {
		var cosa = Math.cos(this.alpha);
		var sina = Math.sin(this.alpha);
		var cosb = Math.cos(this.beta);
		var sinb = Math.sin(this.beta);
		var target = this._getTargetPosition();
		target.addToRef(new com_babylonhx_math_Vector3(this.radius * cosa * sinb,this.radius * cosb,this.radius * sina * sinb),this.position);
		if(this.checkCollisions) {
			this._collider.radius = this.collisionRadius;
			this.position.subtractToRef(this._previousPosition,this._collisionVelocity);
			this._scene._getNewPosition(this._previousPosition,this._collisionVelocity,this._collider,3,this._newPosition);
			if(!this._newPosition.equalsWithEpsilon(this.position,null)) {
				this.position.copyFrom(this._previousPosition);
				this.alpha = this._previousAlpha;
				this.beta = this._previousBeta;
				this.radius = this._previousRadius;
				if(this.onCollide != null) this.onCollide(this._collider.collidedMesh);
			}
		}
		com_babylonhx_math_Matrix.LookAtLHToRef(this.position,target,this.upVector,this._viewMatrix);
		this._previousAlpha = this.alpha;
		this._previousBeta = this.beta;
		this._previousRadius = this.radius;
		this._previousPosition.copyFrom(this.position);
		this._viewMatrix.m[12] = this._viewMatrix.m[12] + this.targetScreenOffset.x;
		this._viewMatrix.m[13] = this._viewMatrix.m[13] + this.targetScreenOffset.y;
		return this._viewMatrix;
	}
	,zoomOn: function(meshes,doNotUpdateMaxZ) {
		if(doNotUpdateMaxZ == null) doNotUpdateMaxZ = false;
		if(meshes != null) meshes = meshes; else meshes = this._scene.meshes;
		var minMaxVector = com_babylonhx_mesh_Mesh.MinMax(meshes);
		var distance = Math.sqrt(com_babylonhx_math_Vector3.DistanceSquared(minMaxVector.minimum,minMaxVector.maximum));
		this.radius = distance * this.zoomOnFactor;
		this.focusOn({ min : minMaxVector.minimum, max : minMaxVector.maximum, distance : distance},doNotUpdateMaxZ);
	}
	,focusOn: function(meshesOrMinMaxVectorAndDistance,doNotUpdateMaxZ) {
		if(doNotUpdateMaxZ == null) doNotUpdateMaxZ = false;
		var meshesOrMinMaxVector = null;
		var distance = 0;
		if(meshesOrMinMaxVectorAndDistance.minimum == null) {
			if(meshesOrMinMaxVectorAndDistance != null) meshesOrMinMaxVector = meshesOrMinMaxVectorAndDistance; else meshesOrMinMaxVector = this._scene.meshes;
			meshesOrMinMaxVector = com_babylonhx_mesh_Mesh.MinMax(meshesOrMinMaxVector);
			distance = com_babylonhx_math_Vector3.Distance(meshesOrMinMaxVector.minimum,meshesOrMinMaxVector.maximum);
		} else {
			meshesOrMinMaxVector = meshesOrMinMaxVectorAndDistance;
			distance = meshesOrMinMaxVectorAndDistance.distance;
		}
		this.target.position = com_babylonhx_mesh_Mesh.Center(meshesOrMinMaxVector);
		if(!doNotUpdateMaxZ) this.maxZ = distance * 2;
	}
	,__class__: com_babylonhx_cameras_ArcRotateCamera
});
var com_babylonhx_cameras_AnaglyphArcRotateCamera = $hx_exports.BABYLON.AnaglyphArcRotateCamera = function(name,alpha,beta,radius,target,eyeSpace,scene) {
	com_babylonhx_cameras_ArcRotateCamera.call(this,name,alpha,beta,radius,target,scene);
	this._eyeSpace = eyeSpace * Math.PI / 180;
	this._leftCamera = new com_babylonhx_cameras_ArcRotateCamera(name + "_left",alpha - this._eyeSpace,beta,radius,target,scene);
	this._rightCamera = new com_babylonhx_cameras_ArcRotateCamera(name + "_right",alpha + this._eyeSpace,beta,radius,target,scene);
	com_babylonhx_cameras_AnaglyphArcRotateCamera.buildCamera(this,name);
};
$hxClasses["com.babylonhx.cameras.AnaglyphArcRotateCamera"] = com_babylonhx_cameras_AnaglyphArcRotateCamera;
com_babylonhx_cameras_AnaglyphArcRotateCamera.__name__ = ["com","babylonhx","cameras","AnaglyphArcRotateCamera"];
com_babylonhx_cameras_AnaglyphArcRotateCamera.buildCamera = function(that,name) {
	that._leftCamera.isIntermediate = true;
	that.subCameras.push(that._leftCamera);
	that.subCameras.push(that._rightCamera);
	that._leftTexture = new com_babylonhx_postprocess_PassPostProcess(name + "_leftTexture",1.0,that._leftCamera);
	that._anaglyphPostProcess = new com_babylonhx_postprocess_AnaglyphPostProcess(name + "_anaglyph",1.0,that._rightCamera);
	that._anaglyphPostProcess.onApply = function(effect) {
		effect.setTextureFromPostProcess("leftSampler",that._leftTexture);
	};
	that._update();
};
com_babylonhx_cameras_AnaglyphArcRotateCamera.__super__ = com_babylonhx_cameras_ArcRotateCamera;
com_babylonhx_cameras_AnaglyphArcRotateCamera.prototype = $extend(com_babylonhx_cameras_ArcRotateCamera.prototype,{
	_eyeSpace: null
	,_leftCamera: null
	,_rightCamera: null
	,_update: function() {
		this._updateCamera(this._leftCamera);
		this._updateCamera(this._rightCamera);
		this._leftCamera.alpha = this.alpha - this._eyeSpace;
		this._rightCamera.alpha = this.alpha + this._eyeSpace;
		com_babylonhx_cameras_ArcRotateCamera.prototype._update.call(this);
	}
	,_updateCamera: function(camera) {
		camera.beta = this.beta;
		camera.radius = this.radius;
		camera.minZ = this.minZ;
		camera.maxZ = this.maxZ;
		camera.fov = this.fov;
		camera.target = this.target;
	}
	,__class__: com_babylonhx_cameras_AnaglyphArcRotateCamera
});
var com_babylonhx_cameras_FreeCamera = $hx_exports.BABYLON.FreeCamera = function(name,position,scene) {
	this._newPosition = new com_babylonhx_math_Vector3(0,0,0);
	this._diffPosition = new com_babylonhx_math_Vector3(0,0,0);
	this._oldPosition = new com_babylonhx_math_Vector3(0,0,0);
	this._needMoveForGravity = true;
	this._collider = new com_babylonhx_collisions_Collider();
	this._keys = [];
	this.angularSensibility = 2000.0;
	this.applyGravity = false;
	this.checkCollisions = false;
	this.keysRight = [com_babylonhx_utils_Keycodes.right,com_babylonhx_utils_Keycodes.key_d];
	this.keysLeft = [com_babylonhx_utils_Keycodes.left,com_babylonhx_utils_Keycodes.key_a];
	this.keysDown = [com_babylonhx_utils_Keycodes.down,com_babylonhx_utils_Keycodes.key_s];
	this.keysUp = [com_babylonhx_utils_Keycodes.up,com_babylonhx_utils_Keycodes.key_w];
	this.ellipsoid = new com_babylonhx_math_Vector3(0.5,1,0.5);
	com_babylonhx_cameras_TargetCamera.call(this,name,position,scene);
};
$hxClasses["com.babylonhx.cameras.FreeCamera"] = com_babylonhx_cameras_FreeCamera;
com_babylonhx_cameras_FreeCamera.__name__ = ["com","babylonhx","cameras","FreeCamera"];
com_babylonhx_cameras_FreeCamera.__super__ = com_babylonhx_cameras_TargetCamera;
com_babylonhx_cameras_FreeCamera.prototype = $extend(com_babylonhx_cameras_TargetCamera.prototype,{
	ellipsoid: null
	,keysUp: null
	,keysDown: null
	,keysLeft: null
	,keysRight: null
	,checkCollisions: null
	,applyGravity: null
	,angularSensibility: null
	,onCollide: null
	,_keys: null
	,_collider: null
	,_needMoveForGravity: null
	,_oldPosition: null
	,_diffPosition: null
	,_newPosition: null
	,_attachedElement: null
	,_localDirection: null
	,_transformedDirection: null
	,_onMouseDown: null
	,_onMouseUp: null
	,_onMouseOut: null
	,_onMouseMove: null
	,_onKeyDown: null
	,_onKeyUp: null
	,_onLostFocus: null
	,attachControl: function(element,noPreventDefault,useCtrlForPanning) {
		if(useCtrlForPanning == null) useCtrlForPanning = true;
		if(noPreventDefault == null) noPreventDefault = false;
		var _g = this;
		var previousPosition = null;
		var engine = this._scene._engine;
		this._attachedElement = element;
		if(this._onMouseDown == null) {
			this._onMouseDown = function(x,y,button) {
				previousPosition = { x : x, y : y};
			};
			this._onMouseUp = function(x1,y1,button1) {
				previousPosition = null;
			};
			this._onMouseOut = function() {
				previousPosition = null;
				_g._keys = [];
			};
			this._onMouseMove = function(x2,y2) {
				if(previousPosition == null && !engine.isPointerLock) return;
				var offsetX = 0;
				var offsetY = 0;
				if(!engine.isPointerLock) {
					offsetX = x2 - previousPosition.x;
					offsetY = y2 - previousPosition.y;
				}
				_g.cameraRotation.y += offsetX / _g.angularSensibility;
				_g.cameraRotation.x += offsetY / _g.angularSensibility;
				previousPosition = { x : x2, y : y2};
			};
			this._onKeyDown = function(keyCode) {
				if(HxOverrides.indexOf(_g.keysUp,keyCode,0) != -1 || HxOverrides.indexOf(_g.keysDown,keyCode,0) != -1 || HxOverrides.indexOf(_g.keysLeft,keyCode,0) != -1 || HxOverrides.indexOf(_g.keysRight,keyCode,0) != -1) {
					var index = HxOverrides.indexOf(_g._keys,keyCode,0);
					if(index == -1) _g._keys.push(keyCode);
				}
			};
			this._onKeyUp = function(keyCode1) {
				if(HxOverrides.indexOf(_g.keysUp,keyCode1,0) != -1 || HxOverrides.indexOf(_g.keysDown,keyCode1,0) != -1 || HxOverrides.indexOf(_g.keysLeft,keyCode1,0) != -1 || HxOverrides.indexOf(_g.keysRight,keyCode1,0) != -1) {
					var index1 = HxOverrides.indexOf(_g._keys,keyCode1,0);
					if(index1 >= 0) _g._keys.splice(index1,1);
				}
			};
			this._onLostFocus = function() {
				_g._keys = [];
			};
			this._reset = function() {
				_g._keys = [];
				previousPosition = null;
				_g.cameraDirection = new com_babylonhx_math_Vector3(0,0,0);
				_g.cameraRotation = new com_babylonhx_math_Vector2(0,0);
			};
		}
		com_babylonhx_Engine.keyDown.push(this._onKeyDown);
		com_babylonhx_Engine.keyUp.push(this._onKeyUp);
		com_babylonhx_Engine.mouseDown.push(this._onMouseDown);
		com_babylonhx_Engine.mouseUp.push(this._onMouseUp);
		com_babylonhx_Engine.mouseMove.push(this._onMouseMove);
	}
	,detachControl: function(element) {
		var x = this._onKeyDown;
		HxOverrides.remove(com_babylonhx_Engine.keyDown,x);
		var x1 = this._onKeyUp;
		HxOverrides.remove(com_babylonhx_Engine.keyUp,x1);
		var x2 = this._onMouseDown;
		HxOverrides.remove(com_babylonhx_Engine.mouseDown,x2);
		var x3 = this._onMouseUp;
		HxOverrides.remove(com_babylonhx_Engine.mouseUp,x3);
		var x4 = this._onMouseMove;
		HxOverrides.remove(com_babylonhx_Engine.mouseMove,x4);
		if(this._reset != null) this._reset();
	}
	,_collideWithWorld: function(velocity) {
		var globalPosition = null;
		if(this.parent != null) globalPosition = com_babylonhx_math_Vector3.TransformCoordinates(this.position,this.parent.getWorldMatrix()); else globalPosition = this.position;
		globalPosition.subtractFromFloatsToRef(0,this.ellipsoid.y,0,this._oldPosition);
		this._collider.radius = this.ellipsoid;
		var actualVelocity = velocity;
		if(this.applyGravity) actualVelocity = velocity.add(this._scene.gravity);
		this._scene.collisionCoordinator.getNewPosition(this._oldPosition,actualVelocity,this._collider,3,null,$bind(this,this._onCollisionPositionChange),this.uniqueId);
	}
	,_onCollisionPositionChange: function(collisionId,newPosition,collidedMesh) {
		var _g = this;
		if(this._scene.get_workerCollisions()) newPosition.multiplyInPlace(this._collider.radius);
		var updatePosition = function(newPos) {
			_g._newPosition.copyFrom(newPos);
			_g._newPosition.subtractToRef(_g._oldPosition,_g._diffPosition);
			var oldPosition = _g.position.clone();
			if(_g._diffPosition.length() > com_babylonhx_Engine.CollisionsEpsilon) {
				_g.position.addInPlace(_g._diffPosition);
				if(_g.onCollide != null && collidedMesh != null) _g.onCollide(collidedMesh);
			}
		};
		updatePosition(newPosition);
	}
	,_checkInputs: function() {
		if(this._localDirection == null) {
			this._localDirection = new com_babylonhx_math_Vector3(0,0,0);
			this._transformedDirection = new com_babylonhx_math_Vector3(0,0,0);
		}
		var _g1 = 0;
		var _g = this._keys.length;
		while(_g1 < _g) {
			var index = _g1++;
			var keyCode = this._keys[index];
			var speed = this._computeLocalCameraSpeed();
			if(HxOverrides.indexOf(this.keysLeft,keyCode,0) != -1) this._localDirection.copyFromFloats(-speed,0,0); else if(HxOverrides.indexOf(this.keysUp,keyCode,0) != -1) this._localDirection.copyFromFloats(0,0,speed); else if(HxOverrides.indexOf(this.keysRight,keyCode,0) != -1) this._localDirection.copyFromFloats(speed,0,0); else if(HxOverrides.indexOf(this.keysDown,keyCode,0) != -1) this._localDirection.copyFromFloats(0,0,-speed);
			this.getViewMatrix().invertToRef(this._cameraTransformMatrix);
			com_babylonhx_math_Vector3.TransformNormalToRef(this._localDirection,this._cameraTransformMatrix,this._transformedDirection);
			this.cameraDirection.addInPlace(this._transformedDirection);
		}
		com_babylonhx_cameras_TargetCamera.prototype._checkInputs.call(this);
	}
	,_decideIfNeedsToMove: function() {
		return this._needMoveForGravity || Math.abs(this.cameraDirection.x) > 0 || Math.abs(this.cameraDirection.y) > 0 || Math.abs(this.cameraDirection.z) > 0;
	}
	,_updatePosition: function() {
		if(this.checkCollisions && this._scene.collisionsEnabled) this._collideWithWorld(this.cameraDirection); else this.position.addInPlace(this.cameraDirection);
	}
	,__class__: com_babylonhx_cameras_FreeCamera
});
var com_babylonhx_cameras_AnaglyphFreeCamera = $hx_exports.BABYLON.AnaglyphFreeCamera = function(name,position,eyeSpace,scene) {
	com_babylonhx_cameras_FreeCamera.call(this,name,position,scene);
	this._eyeSpace = eyeSpace * Math.PI / 180;
	this._transformMatrix = new com_babylonhx_math_Matrix();
	this._leftCamera = new com_babylonhx_cameras_FreeCamera(name + "_left",new com_babylonhx_math_Vector3(position.x,position.y,position.z),scene);
	this._rightCamera = new com_babylonhx_cameras_FreeCamera(name + "_right",new com_babylonhx_math_Vector3(position.x,position.y,position.z),scene);
	com_babylonhx_cameras_AnaglyphArcRotateCamera.buildCamera(this,name);
};
$hxClasses["com.babylonhx.cameras.AnaglyphFreeCamera"] = com_babylonhx_cameras_AnaglyphFreeCamera;
com_babylonhx_cameras_AnaglyphFreeCamera.__name__ = ["com","babylonhx","cameras","AnaglyphFreeCamera"];
com_babylonhx_cameras_AnaglyphFreeCamera.__super__ = com_babylonhx_cameras_FreeCamera;
com_babylonhx_cameras_AnaglyphFreeCamera.prototype = $extend(com_babylonhx_cameras_FreeCamera.prototype,{
	_eyeSpace: null
	,_leftCamera: null
	,_rightCamera: null
	,_transformMatrix: null
	,_getSubCameraPosition: function(eyeSpace,result) {
		var target = this.getTarget();
		com_babylonhx_math_Matrix.Translation(-target.x,-target.y,-target.z).multiplyToRef(com_babylonhx_math_Matrix.RotationY(eyeSpace),this._transformMatrix);
		this._transformMatrix = this._transformMatrix.multiply(com_babylonhx_math_Matrix.Translation(target.x,target.y,target.z));
		com_babylonhx_math_Vector3.TransformCoordinatesToRef(this.position,this._transformMatrix,result);
	}
	,_update: function() {
		this._getSubCameraPosition(-this._eyeSpace,this._leftCamera.position);
		this._getSubCameraPosition(this._eyeSpace,this._rightCamera.position);
		this._updateCamera(this._leftCamera);
		this._updateCamera(this._rightCamera);
		com_babylonhx_cameras_FreeCamera.prototype._update.call(this);
	}
	,_updateCamera: function(camera) {
		camera.minZ = this.minZ;
		camera.maxZ = this.maxZ;
		camera.fov = this.fov;
		camera.viewport = this.viewport;
		camera.setTarget(this.getTarget());
	}
	,__class__: com_babylonhx_cameras_AnaglyphFreeCamera
});
var com_babylonhx_cameras_FollowCamera = $hx_exports.BABYLON.FollowCamera = function(name,position,scene) {
	this.maxCameraSpeed = 50;
	this.cameraAcceleration = 0.05;
	this.heightOffset = 30;
	this.rotationOffset = 0;
	this.radius = 12;
	com_babylonhx_cameras_TargetCamera.call(this,name,position,scene);
};
$hxClasses["com.babylonhx.cameras.FollowCamera"] = com_babylonhx_cameras_FollowCamera;
com_babylonhx_cameras_FollowCamera.__name__ = ["com","babylonhx","cameras","FollowCamera"];
com_babylonhx_cameras_FollowCamera.__super__ = com_babylonhx_cameras_TargetCamera;
com_babylonhx_cameras_FollowCamera.prototype = $extend(com_babylonhx_cameras_TargetCamera.prototype,{
	radius: null
	,rotationOffset: null
	,heightOffset: null
	,cameraAcceleration: null
	,maxCameraSpeed: null
	,target: null
	,follow: function(cameraTarget) {
		var radians = this.rotationOffset * Math.PI / 180 + cameraTarget.rotation.y;
		var targetX = cameraTarget.position.x + Math.sin(radians) * this.radius;
		var targetZ = cameraTarget.position.z + Math.cos(radians) * this.radius;
		var dx = targetX - this.position.x;
		var dy = cameraTarget.position.y + this.heightOffset - this.position.y;
		var dz = targetZ - this.position.z;
		var vx = dx * this.cameraAcceleration * 2;
		var vy = dy * this.cameraAcceleration;
		var vz = dz * this.cameraAcceleration * 2;
		if(vx > this.maxCameraSpeed || vx < -this.maxCameraSpeed) if(vx < 1) vx = -this.maxCameraSpeed; else vx = this.maxCameraSpeed;
		if(vy > this.maxCameraSpeed || vy < -this.maxCameraSpeed) if(vy < 1) vy = -this.maxCameraSpeed; else vy = this.maxCameraSpeed;
		if(vz > this.maxCameraSpeed || vz < -this.maxCameraSpeed) if(vz < 1) vz = -this.maxCameraSpeed; else vz = this.maxCameraSpeed;
		this.position.x += vx;
		this.position.y += vy;
		this.position.z += vz;
		this.setTarget(cameraTarget.position);
	}
	,__class__: com_babylonhx_cameras_FollowCamera
});
var com_babylonhx_cameras_VRCameraMetrics = $hx_exports.BABYLON.VRCameraMetrics = function() {
	this.compensateDistortion = true;
};
$hxClasses["com.babylonhx.cameras.VRCameraMetrics"] = com_babylonhx_cameras_VRCameraMetrics;
com_babylonhx_cameras_VRCameraMetrics.__name__ = ["com","babylonhx","cameras","VRCameraMetrics"];
com_babylonhx_cameras_VRCameraMetrics.GetDefault = function() {
	var result = new com_babylonhx_cameras_VRCameraMetrics();
	result.hResolution = 1280;
	result.vResolution = 800;
	result.hScreenSize = 0.149759993;
	result.vScreenSize = 0.0935999975;
	result.vScreenCenter = 0.0467999987;
	result.eyeToScreenDistance = 0.0410000011;
	result.lensSeparationDistance = 0.0635000020;
	result.interpupillaryDistance = 0.0640000030;
	result.distortionK = [1.0,0.219999999,0.239999995,0.0];
	result.chromaAbCorrection = [0.995999992,-0.00400000019,1.01400006,0.0];
	result.postProcessScaleFactor = 1.714605507808412;
	result.lensCenterOffset = 0.151976421;
	return result;
};
com_babylonhx_cameras_VRCameraMetrics.prototype = {
	hResolution: null
	,vResolution: null
	,hScreenSize: null
	,vScreenSize: null
	,vScreenCenter: null
	,eyeToScreenDistance: null
	,lensSeparationDistance: null
	,interpupillaryDistance: null
	,distortionK: null
	,chromaAbCorrection: null
	,postProcessScaleFactor: null
	,lensCenterOffset: null
	,compensateDistortion: null
	,get_aspectRatio: function() {
		return this.hResolution / (2 * this.vResolution);
	}
	,get_aspectRatioFov: function() {
		return 2 * Math.atan(this.postProcessScaleFactor * this.vScreenSize / (2 * this.eyeToScreenDistance));
	}
	,get_leftHMatrix: function() {
		var meters = this.hScreenSize / 4 - this.lensSeparationDistance / 2;
		var h = 4 * meters / this.hScreenSize;
		return com_babylonhx_math_Matrix.Translation(h,0,0);
	}
	,get_rightHMatrix: function() {
		var meters = this.hScreenSize / 4 - this.lensSeparationDistance / 2;
		var h = 4 * meters / this.hScreenSize;
		return com_babylonhx_math_Matrix.Translation(-h,0,0);
	}
	,get_leftPreViewMatrix: function() {
		return com_babylonhx_math_Matrix.Translation(0.5 * this.interpupillaryDistance,0,0);
	}
	,get_rightPreViewMatrix: function() {
		return com_babylonhx_math_Matrix.Translation(-0.5 * this.interpupillaryDistance,0,0);
	}
	,__class__: com_babylonhx_cameras_VRCameraMetrics
	,__properties__: {get_rightPreViewMatrix:"get_rightPreViewMatrix",get_leftPreViewMatrix:"get_leftPreViewMatrix",get_rightHMatrix:"get_rightHMatrix",get_leftHMatrix:"get_leftHMatrix",get_aspectRatioFov:"get_aspectRatioFov",get_aspectRatio:"get_aspectRatio"}
};
var com_babylonhx_collisions_Collider = $hx_exports.BABYLON.Collider = function() {
	this._displacementVector = new com_babylonhx_math_Vector3(0,0,0);
	this._slidePlaneNormal = new com_babylonhx_math_Vector3(0,0,0);
	this._destinationPoint = new com_babylonhx_math_Vector3(0,0,0);
	this._baseToVertex = new com_babylonhx_math_Vector3(0,0,0);
	this._edge = new com_babylonhx_math_Vector3(0,0,0);
	this._tempVector4 = new com_babylonhx_math_Vector3(0,0,0);
	this._tempVector3 = new com_babylonhx_math_Vector3(0,0,0);
	this._tempVector2 = new com_babylonhx_math_Vector3(0,0,0);
	this._tempVector = new com_babylonhx_math_Vector3(0,0,0);
	this._planeIntersectionPoint = new com_babylonhx_math_Vector3(0,0,0);
	this._collisionPoint = new com_babylonhx_math_Vector3(0,0,0);
	this.normalizedVelocity = new com_babylonhx_math_Vector3(0,0,0);
	this.velocityWorld = new com_babylonhx_math_Vector3(0,0,0);
	this.basePointWorld = new com_babylonhx_math_Vector3(0,0,0);
	this.retry = 0;
	this.radius = new com_babylonhx_math_Vector3(1,1,1);
};
$hxClasses["com.babylonhx.collisions.Collider"] = com_babylonhx_collisions_Collider;
com_babylonhx_collisions_Collider.__name__ = ["com","babylonhx","collisions","Collider"];
com_babylonhx_collisions_Collider.intersectBoxAASphere = function(boxMin,boxMax,sphereCenter,sphereRadius) {
	if(boxMin.x > sphereCenter.x + sphereRadius) return false;
	if(sphereCenter.x - sphereRadius > boxMax.x) return false;
	if(boxMin.y > sphereCenter.y + sphereRadius) return false;
	if(sphereCenter.y - sphereRadius > boxMax.y) return false;
	if(boxMin.z > sphereCenter.z + sphereRadius) return false;
	if(sphereCenter.z - sphereRadius > boxMax.z) return false;
	return true;
};
com_babylonhx_collisions_Collider.getLowestRoot = function(a,b,c,maxR) {
	var determinant = b * b - 4.0 * a * c;
	var result = { root : 0, found : false};
	if(determinant < 0) return result;
	var sqrtD = Math.sqrt(determinant);
	var r1 = (-b - sqrtD) / (2.0 * a);
	var r2 = (-b + sqrtD) / (2.0 * a);
	if(r1 > r2) {
		var temp = r2;
		r2 = r1;
		r1 = temp;
	}
	if(r1 > 0 && r1 < maxR) {
		result.root = r1;
		result.found = true;
		return result;
	}
	if(r2 > 0 && r2 < maxR) {
		result.root = r2;
		result.found = true;
		return result;
	}
	return result;
};
com_babylonhx_collisions_Collider.prototype = {
	radius: null
	,retry: null
	,velocity: null
	,basePoint: null
	,epsilon: null
	,collisionFound: null
	,velocityWorldLength: null
	,basePointWorld: null
	,velocityWorld: null
	,normalizedVelocity: null
	,initialVelocity: null
	,initialPosition: null
	,nearestDistance: null
	,intersectionPoint: null
	,collidedMesh: null
	,_collisionPoint: null
	,_planeIntersectionPoint: null
	,_tempVector: null
	,_tempVector2: null
	,_tempVector3: null
	,_tempVector4: null
	,_edge: null
	,_baseToVertex: null
	,_destinationPoint: null
	,_slidePlaneNormal: null
	,_displacementVector: null
	,_initialize: function(source,dir,e) {
		this.velocity = dir;
		com_babylonhx_math_Vector3.NormalizeToRef(dir,this.normalizedVelocity);
		this.basePoint = source;
		source.multiplyToRef(this.radius,this.basePointWorld);
		dir.multiplyToRef(this.radius,this.velocityWorld);
		this.velocityWorldLength = this.velocityWorld.length();
		this.epsilon = e;
		this.collisionFound = false;
	}
	,_checkPointInTriangle: function(point,pa,pb,pc,n) {
		pa.subtractToRef(point,this._tempVector);
		pb.subtractToRef(point,this._tempVector2);
		com_babylonhx_math_Vector3.CrossToRef(this._tempVector,this._tempVector2,this._tempVector4);
		var d = com_babylonhx_math_Vector3.Dot(this._tempVector4,n);
		if(d < 0) return false;
		pc.subtractToRef(point,this._tempVector3);
		com_babylonhx_math_Vector3.CrossToRef(this._tempVector2,this._tempVector3,this._tempVector4);
		d = com_babylonhx_math_Vector3.Dot(this._tempVector4,n);
		if(d < 0) return false;
		com_babylonhx_math_Vector3.CrossToRef(this._tempVector3,this._tempVector,this._tempVector4);
		d = com_babylonhx_math_Vector3.Dot(this._tempVector4,n);
		return d >= 0;
	}
	,_canDoCollision: function(sphereCenter,sphereRadius,vecMin,vecMax) {
		var distance = Math.sqrt(com_babylonhx_math_Vector3.DistanceSquared(this.basePointWorld,sphereCenter));
		var max = Math.max(Math.max(this.radius.x,this.radius.y),this.radius.z);
		if(distance > this.velocityWorldLength + max + sphereRadius) return false;
		if(!com_babylonhx_collisions_Collider.intersectBoxAASphere(vecMin,vecMax,this.basePointWorld,this.velocityWorldLength + max)) return false;
		return true;
	}
	,_testTriangle: function(faceIndex,subMesh,p1,p2,p3) {
		var t0 = 0;
		var embeddedInPlane = false;
		if(subMesh._trianglePlanes == null) subMesh._trianglePlanes = [];
		if(subMesh._trianglePlanes[faceIndex] == null) {
			subMesh._trianglePlanes[faceIndex] = new com_babylonhx_math_Plane(0,0,0,0);
			subMesh._trianglePlanes[faceIndex].copyFromPoints(p1,p2,p3);
		}
		var trianglePlane = subMesh._trianglePlanes[faceIndex];
		if(subMesh.getMaterial() == null && !trianglePlane.isFrontFacingTo(this.normalizedVelocity,0)) return;
		var signedDistToTrianglePlane = com_babylonhx_math_Vector3.Dot(this.basePoint,trianglePlane.normal) + trianglePlane.d;
		var normalDotVelocity = com_babylonhx_math_Vector3.Dot(trianglePlane.normal,this.velocity);
		if(normalDotVelocity == 0) {
			if(Math.abs(signedDistToTrianglePlane) >= 1.0) return;
			embeddedInPlane = true;
			t0 = 0;
		} else {
			t0 = (-1. - signedDistToTrianglePlane) / normalDotVelocity;
			var t1 = (1.0 - signedDistToTrianglePlane) / normalDotVelocity;
			if(t0 > t1) {
				var temp = t1;
				t1 = t0;
				t0 = temp;
			}
			if(t0 > 1.0 || t1 < 0.0) return;
			if(t0 < 0) t0 = 0;
			if(t0 > 1.0) t0 = 1.0;
		}
		this._collisionPoint.copyFromFloats(0,0,0);
		var found = false;
		var t = 1.0;
		if(!embeddedInPlane) {
			this.basePoint.subtractToRef(trianglePlane.normal,this._planeIntersectionPoint);
			this.velocity.scaleToRef(t0,this._tempVector);
			this._planeIntersectionPoint.addInPlace(this._tempVector);
			if(this._checkPointInTriangle(this._planeIntersectionPoint,p1,p2,p3,trianglePlane.normal)) {
				found = true;
				t = t0;
				this._collisionPoint.copyFrom(this._planeIntersectionPoint);
			}
		}
		if(!found) {
			var velocitySquaredLength = this.velocity.lengthSquared();
			var a = velocitySquaredLength;
			this.basePoint.subtractToRef(p1,this._tempVector);
			var b = 2.0 * com_babylonhx_math_Vector3.Dot(this.velocity,this._tempVector);
			var c = this._tempVector.lengthSquared() - 1.0;
			var lowestRoot = com_babylonhx_collisions_Collider.getLowestRoot(a,b,c,t);
			if(lowestRoot.found) {
				t = lowestRoot.root;
				found = true;
				this._collisionPoint.copyFrom(p1);
			}
			this.basePoint.subtractToRef(p2,this._tempVector);
			b = 2.0 * com_babylonhx_math_Vector3.Dot(this.velocity,this._tempVector);
			c = this._tempVector.lengthSquared() - 1.0;
			lowestRoot = com_babylonhx_collisions_Collider.getLowestRoot(a,b,c,t);
			if(lowestRoot.found) {
				t = lowestRoot.root;
				found = true;
				this._collisionPoint.copyFrom(p2);
			}
			this.basePoint.subtractToRef(p3,this._tempVector);
			b = 2.0 * com_babylonhx_math_Vector3.Dot(this.velocity,this._tempVector);
			c = this._tempVector.lengthSquared() - 1.0;
			lowestRoot = com_babylonhx_collisions_Collider.getLowestRoot(a,b,c,t);
			if(lowestRoot.found) {
				t = lowestRoot.root;
				found = true;
				this._collisionPoint.copyFrom(p3);
			}
			p2.subtractToRef(p1,this._edge);
			p1.subtractToRef(this.basePoint,this._baseToVertex);
			var edgeSquaredLength = this._edge.lengthSquared();
			var edgeDotVelocity = com_babylonhx_math_Vector3.Dot(this._edge,this.velocity);
			var edgeDotBaseToVertex = com_babylonhx_math_Vector3.Dot(this._edge,this._baseToVertex);
			a = edgeSquaredLength * -velocitySquaredLength + edgeDotVelocity * edgeDotVelocity;
			b = edgeSquaredLength * (2.0 * com_babylonhx_math_Vector3.Dot(this.velocity,this._baseToVertex)) - 2.0 * edgeDotVelocity * edgeDotBaseToVertex;
			c = edgeSquaredLength * (1.0 - this._baseToVertex.lengthSquared()) + edgeDotBaseToVertex * edgeDotBaseToVertex;
			lowestRoot = com_babylonhx_collisions_Collider.getLowestRoot(a,b,c,t);
			if(lowestRoot.found) {
				var f = (edgeDotVelocity * lowestRoot.root - edgeDotBaseToVertex) / edgeSquaredLength;
				if(f >= 0.0 && f <= 1.0) {
					t = lowestRoot.root;
					found = true;
					this._edge.scaleInPlace(f);
					p1.addToRef(this._edge,this._collisionPoint);
				}
			}
			p3.subtractToRef(p2,this._edge);
			p2.subtractToRef(this.basePoint,this._baseToVertex);
			edgeSquaredLength = this._edge.lengthSquared();
			edgeDotVelocity = com_babylonhx_math_Vector3.Dot(this._edge,this.velocity);
			edgeDotBaseToVertex = com_babylonhx_math_Vector3.Dot(this._edge,this._baseToVertex);
			a = edgeSquaredLength * -velocitySquaredLength + edgeDotVelocity * edgeDotVelocity;
			b = edgeSquaredLength * (2.0 * com_babylonhx_math_Vector3.Dot(this.velocity,this._baseToVertex)) - 2.0 * edgeDotVelocity * edgeDotBaseToVertex;
			c = edgeSquaredLength * (1.0 - this._baseToVertex.lengthSquared()) + edgeDotBaseToVertex * edgeDotBaseToVertex;
			lowestRoot = com_babylonhx_collisions_Collider.getLowestRoot(a,b,c,t);
			if(lowestRoot.found) {
				var f1 = (edgeDotVelocity * lowestRoot.root - edgeDotBaseToVertex) / edgeSquaredLength;
				if(f1 >= 0.0 && f1 <= 1.0) {
					t = lowestRoot.root;
					found = true;
					this._edge.scaleInPlace(f1);
					p2.addToRef(this._edge,this._collisionPoint);
				}
			}
			p1.subtractToRef(p3,this._edge);
			p3.subtractToRef(this.basePoint,this._baseToVertex);
			edgeSquaredLength = this._edge.lengthSquared();
			edgeDotVelocity = com_babylonhx_math_Vector3.Dot(this._edge,this.velocity);
			edgeDotBaseToVertex = com_babylonhx_math_Vector3.Dot(this._edge,this._baseToVertex);
			a = edgeSquaredLength * -velocitySquaredLength + edgeDotVelocity * edgeDotVelocity;
			b = edgeSquaredLength * (2.0 * com_babylonhx_math_Vector3.Dot(this.velocity,this._baseToVertex)) - 2.0 * edgeDotVelocity * edgeDotBaseToVertex;
			c = edgeSquaredLength * (1.0 - this._baseToVertex.lengthSquared()) + edgeDotBaseToVertex * edgeDotBaseToVertex;
			lowestRoot = com_babylonhx_collisions_Collider.getLowestRoot(a,b,c,t);
			if(lowestRoot.found) {
				var f2 = (edgeDotVelocity * lowestRoot.root - edgeDotBaseToVertex) / edgeSquaredLength;
				if(f2 >= 0.0 && f2 <= 1.0) {
					t = lowestRoot.root;
					found = true;
					this._edge.scaleInPlace(f2);
					p3.addToRef(this._edge,this._collisionPoint);
				}
			}
		}
		if(found) {
			var distToCollision = t * this.velocity.length();
			if(!this.collisionFound || distToCollision < this.nearestDistance) {
				if(this.intersectionPoint == null) this.intersectionPoint = this._collisionPoint.clone(); else this.intersectionPoint.copyFrom(this._collisionPoint);
				this.nearestDistance = distToCollision;
				this.collisionFound = true;
				this.collidedMesh = subMesh._mesh;
			}
		}
	}
	,_collide: function(subMesh,pts,indices,indexStart,indexEnd,decal) {
		var i = indexStart;
		while(i < indexEnd) {
			var p1 = pts[indices[i] - decal];
			var p2 = pts[indices[i + 1] - decal];
			var p3 = pts[indices[i + 2] - decal];
			this._testTriangle(i,subMesh,p3,p2,p1);
			i += 3;
		}
	}
	,_getResponse: function(pos,vel) {
		pos.addToRef(vel,this._destinationPoint);
		vel.scaleInPlace(this.nearestDistance / Math.sqrt(vel.x * vel.x + vel.y * vel.y + vel.z * vel.z));
		this.basePoint.addToRef(vel,pos);
		pos.subtractToRef(this.intersectionPoint,this._slidePlaneNormal);
		this._slidePlaneNormal.normalize();
		this._slidePlaneNormal.scaleToRef(this.epsilon,this._displacementVector);
		pos.addInPlace(this._displacementVector);
		this.intersectionPoint.addInPlace(this._displacementVector);
		this._slidePlaneNormal.scaleInPlace(com_babylonhx_math_Plane.SignedDistanceToPlaneFromPositionAndNormal(this.intersectionPoint,this._slidePlaneNormal,this._destinationPoint));
		this._destinationPoint.subtractInPlace(this._slidePlaneNormal);
		this._destinationPoint.subtractToRef(this.intersectionPoint,vel);
	}
	,__class__: com_babylonhx_collisions_Collider
};
var com_babylonhx_collisions_ICollisionCoordinator = $hx_exports.BABYLON.ICollisionCoordinator = function() { };
$hxClasses["com.babylonhx.collisions.ICollisionCoordinator"] = com_babylonhx_collisions_ICollisionCoordinator;
com_babylonhx_collisions_ICollisionCoordinator.__name__ = ["com","babylonhx","collisions","ICollisionCoordinator"];
com_babylonhx_collisions_ICollisionCoordinator.prototype = {
	getNewPosition: null
	,init: null
	,destroy: null
	,onMeshAdded: null
	,onMeshUpdated: null
	,onMeshRemoved: null
	,onGeometryAdded: null
	,onGeometryUpdated: null
	,onGeometryDeleted: null
	,__class__: com_babylonhx_collisions_ICollisionCoordinator
};
var com_babylonhx_collisions_CollisionCoordinatorLegacy = $hx_exports.BABYLON.CollisionCoordinatorLegacy = function() {
	this._finalPosition = new com_babylonhx_math_Vector3(0,0,0);
	this._scaledVelocity = new com_babylonhx_math_Vector3(0,0,0);
	this._scaledPosition = new com_babylonhx_math_Vector3(0,0,0);
};
$hxClasses["com.babylonhx.collisions.CollisionCoordinatorLegacy"] = com_babylonhx_collisions_CollisionCoordinatorLegacy;
com_babylonhx_collisions_CollisionCoordinatorLegacy.__name__ = ["com","babylonhx","collisions","CollisionCoordinatorLegacy"];
com_babylonhx_collisions_CollisionCoordinatorLegacy.__interfaces__ = [com_babylonhx_collisions_ICollisionCoordinator];
com_babylonhx_collisions_CollisionCoordinatorLegacy.prototype = {
	_scene: null
	,_scaledPosition: null
	,_scaledVelocity: null
	,_finalPosition: null
	,init: function(scene) {
		this._scene = scene;
	}
	,destroy: function() {
	}
	,getNewPosition: function(position,velocity,collider,maximumRetry,excludedMesh,onNewPosition,collisionIndex) {
		position.divideToRef(collider.radius,this._scaledPosition);
		velocity.divideToRef(collider.radius,this._scaledVelocity);
		collider.collidedMesh = null;
		collider.retry = 0;
		collider.initialVelocity = this._scaledVelocity;
		collider.initialPosition = this._scaledPosition;
		this._collideWithWorld(this._scaledPosition,this._scaledVelocity,collider,maximumRetry,this._finalPosition,excludedMesh);
		this._finalPosition.multiplyInPlace(collider.radius);
		onNewPosition(collisionIndex,this._finalPosition,collider.collidedMesh);
	}
	,onMeshAdded: function(mesh) {
	}
	,onMeshUpdated: function(mesh) {
	}
	,onMeshRemoved: function(mesh) {
	}
	,onGeometryAdded: function(geometry) {
	}
	,onGeometryUpdated: function(geometry) {
	}
	,onGeometryDeleted: function(geometry) {
	}
	,_collideWithWorld: function(position,velocity,collider,maximumRetry,finalPosition,excludedMesh) {
		var closeDistance = com_babylonhx_Engine.CollisionsEpsilon * 10.0;
		if(collider.retry >= maximumRetry) {
			finalPosition.x = position.x;
			finalPosition.y = position.y;
			finalPosition.z = position.z;
			return;
		}
		collider._initialize(position,velocity,closeDistance);
		var _g = 0;
		var _g1 = this._scene.meshes;
		while(_g < _g1.length) {
			var mesh = _g1[_g];
			++_g;
			if(mesh.isEnabled() && mesh.get_checkCollisions() && mesh.subMeshes != null && mesh != excludedMesh) mesh._checkCollision(collider);
		}
		if(!collider.collisionFound) {
			finalPosition.x = position.x + velocity.x;
			finalPosition.y = position.y + velocity.y;
			finalPosition.z = position.z + velocity.z;
			return;
		}
		if(velocity.x != 0 || velocity.y != 0 || velocity.z != 0) {
			position.addToRef(velocity,collider._destinationPoint);
			velocity.scaleInPlace(collider.nearestDistance / Math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y + velocity.z * velocity.z));
			collider.basePoint.addToRef(velocity,position);
			position.subtractToRef(collider.intersectionPoint,collider._slidePlaneNormal);
			collider._slidePlaneNormal.normalize();
			collider._slidePlaneNormal.scaleToRef(collider.epsilon,collider._displacementVector);
			position.addInPlace(collider._displacementVector);
			collider.intersectionPoint.addInPlace(collider._displacementVector);
			collider._slidePlaneNormal.scaleInPlace(com_babylonhx_math_Plane.SignedDistanceToPlaneFromPositionAndNormal(collider.intersectionPoint,collider._slidePlaneNormal,collider._destinationPoint));
			collider._destinationPoint.subtractInPlace(collider._slidePlaneNormal);
			collider._destinationPoint.subtractToRef(collider.intersectionPoint,velocity);
		}
		if(Math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y + velocity.z * velocity.z) <= closeDistance) {
			finalPosition.x = position.x;
			finalPosition.y = position.y;
			finalPosition.z = position.z;
			return;
		}
		collider.retry++;
		this._collideWithWorld(position,velocity,collider,maximumRetry,finalPosition,excludedMesh);
	}
	,__class__: com_babylonhx_collisions_CollisionCoordinatorLegacy
};
var com_babylonhx_collisions_IntersectionInfo = $hx_exports.BABYLON.IntersectionInfo = function(bu,bv,distance) {
	this.subMeshId = 0;
	this.faceId = 0;
	this.bu = bu;
	this.bv = bv;
	this.distance = distance;
};
$hxClasses["com.babylonhx.collisions.IntersectionInfo"] = com_babylonhx_collisions_IntersectionInfo;
com_babylonhx_collisions_IntersectionInfo.__name__ = ["com","babylonhx","collisions","IntersectionInfo"];
com_babylonhx_collisions_IntersectionInfo.prototype = {
	faceId: null
	,subMeshId: null
	,bu: null
	,bv: null
	,distance: null
	,__class__: com_babylonhx_collisions_IntersectionInfo
};
var com_babylonhx_collisions_PickingInfo = $hx_exports.BABYLON.PickingInfo = function() {
	this.pickedSprite = null;
	this.subMeshId = 0;
	this.faceId = -1;
	this.bv = 0;
	this.bu = 0;
	this.pickedMesh = null;
	this.pickedPoint = null;
	this.distance = 0;
	this.hit = false;
};
$hxClasses["com.babylonhx.collisions.PickingInfo"] = com_babylonhx_collisions_PickingInfo;
com_babylonhx_collisions_PickingInfo.__name__ = ["com","babylonhx","collisions","PickingInfo"];
com_babylonhx_collisions_PickingInfo.prototype = {
	hit: null
	,distance: null
	,pickedPoint: null
	,pickedMesh: null
	,bu: null
	,bv: null
	,faceId: null
	,subMeshId: null
	,pickedSprite: null
	,getNormal: function(useWorldCoordinates,useVerticesNormals) {
		if(useVerticesNormals == null) useVerticesNormals = true;
		if(useWorldCoordinates == null) useWorldCoordinates = false;
		if(this.pickedMesh == null || !this.pickedMesh.isVerticesDataPresent("normal")) return null;
		var indices = this.pickedMesh.getIndices();
		var result = new com_babylonhx_math_Vector3(0,0,0);
		if(useVerticesNormals) {
			var normals = this.pickedMesh.getVerticesData("normal");
			var normal0 = com_babylonhx_math_Vector3.FromArray(normals,indices[this.faceId * 3] * 3);
			var normal1 = com_babylonhx_math_Vector3.FromArray(normals,indices[this.faceId * 3 + 1] * 3);
			var normal2 = com_babylonhx_math_Vector3.FromArray(normals,indices[this.faceId * 3 + 2] * 3);
			normal0 = normal0.scale(this.bu);
			normal1 = normal1.scale(this.bv);
			normal2 = normal2.scale(1.0 - this.bu - this.bv);
			result = new com_babylonhx_math_Vector3(normal0.x + normal1.x + normal2.x,normal0.y + normal1.y + normal2.y,normal0.z + normal1.z + normal2.z);
		} else {
			var positions = this.pickedMesh.getVerticesData("position");
			var vertex1 = com_babylonhx_math_Vector3.FromArray(positions,indices[this.faceId * 3] * 3);
			var vertex2 = com_babylonhx_math_Vector3.FromArray(positions,indices[this.faceId * 3 + 1] * 3);
			var vertex3 = com_babylonhx_math_Vector3.FromArray(positions,indices[this.faceId * 3 + 2] * 3);
			var p1p2 = new com_babylonhx_math_Vector3(vertex1.x - vertex2.x,vertex1.y - vertex2.y,vertex1.z - vertex2.z);
			var p3p2 = new com_babylonhx_math_Vector3(vertex3.x - vertex2.x,vertex3.y - vertex2.y,vertex3.z - vertex2.z);
			result = com_babylonhx_math_Vector3.Cross(p1p2,p3p2);
		}
		if(useWorldCoordinates) result = com_babylonhx_math_Vector3.TransformNormal(result,this.pickedMesh.getWorldMatrix());
		return com_babylonhx_math_Vector3.Normalize(result);
	}
	,getTextureCoordinates: function() {
		if(this.pickedMesh == null || !this.pickedMesh.isVerticesDataPresent("uv")) return null;
		var indices = this.pickedMesh.getIndices();
		var uvs = this.pickedMesh.getVerticesData("uv");
		var uv0 = com_babylonhx_math_Vector2.FromArray(uvs,indices[this.faceId * 3] * 2);
		var uv1 = com_babylonhx_math_Vector2.FromArray(uvs,indices[this.faceId * 3 + 1] * 2);
		var uv2 = com_babylonhx_math_Vector2.FromArray(uvs,indices[this.faceId * 3 + 2] * 2);
		uv0 = uv0.scale(1.0 - this.bu - this.bv);
		uv1 = uv1.scale(this.bu);
		uv2 = uv2.scale(this.bv);
		return new com_babylonhx_math_Vector2(uv0.x + uv1.x + uv2.x,uv0.y + uv1.y + uv2.y);
	}
	,__class__: com_babylonhx_collisions_PickingInfo
};
var com_babylonhx_culling_BoundingBox = $hx_exports.BABYLON.BoundingBox = function(minimum,maximum) {
	this.vectorsWorld = (function($this) {
		var $r;
		var this1;
		this1 = new Array(8);
		$r = this1;
		return $r;
	}(this));
	this.directions = (function($this) {
		var $r;
		var this1;
		this1 = new Array(3);
		$r = this1;
		return $r;
	}(this));
	this.vectors = (function($this) {
		var $r;
		var this1;
		this1 = new Array(8);
		$r = this1;
		return $r;
	}(this));
	this.minimum = minimum;
	this.maximum = maximum;
	var val = this.minimum.clone();
	this.vectors[0] = val;
	var val1 = this.maximum.clone();
	this.vectors[1] = val1;
	var val2 = this.minimum.clone();
	this.vectors[2] = val2;
	this.vectors[2].x = this.maximum.x;
	var val3 = this.minimum.clone();
	this.vectors[3] = val3;
	this.vectors[3].y = this.maximum.y;
	var val4 = this.minimum.clone();
	this.vectors[4] = val4;
	this.vectors[4].z = this.maximum.z;
	var val5 = this.maximum.clone();
	this.vectors[5] = val5;
	this.vectors[5].z = this.minimum.z;
	var val6 = this.maximum.clone();
	this.vectors[6] = val6;
	this.vectors[6].x = this.minimum.x;
	var val7 = this.maximum.clone();
	this.vectors[7] = val7;
	this.vectors[7].y = this.minimum.y;
	this.center = this.maximum.add(this.minimum).scale(0.5);
	this.extendSize = this.maximum.subtract(this.minimum).scale(0.5);
	var array = [new com_babylonhx_math_Vector3(0,0,0),new com_babylonhx_math_Vector3(0,0,0),new com_babylonhx_math_Vector3(0,0,0)];
	var vec;
	var this1;
	this1 = new Array(array.length);
	vec = this1;
	var _g1 = 0;
	var _g = array.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = array[i];
	}
	this.directions = vec;
	var _g11 = 0;
	var _g2 = this.vectors.length;
	while(_g11 < _g2) {
		var index = _g11++;
		var val8 = new com_babylonhx_math_Vector3(0,0,0);
		this.vectorsWorld[index] = val8;
	}
	this.minimumWorld = new com_babylonhx_math_Vector3(0,0,0);
	this.maximumWorld = new com_babylonhx_math_Vector3(0,0,0);
	this._update(com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0));
};
$hxClasses["com.babylonhx.culling.BoundingBox"] = com_babylonhx_culling_BoundingBox;
com_babylonhx_culling_BoundingBox.__name__ = ["com","babylonhx","culling","BoundingBox"];
com_babylonhx_culling_BoundingBox.__interfaces__ = [com_babylonhx_ISmartArrayCompatible];
com_babylonhx_culling_BoundingBox.v_update = null;
com_babylonhx_culling_BoundingBox.Intersects = function(box0,box1) {
	if(box0.maximumWorld.x < box1.minimumWorld.x || box0.minimumWorld.x > box1.maximumWorld.x) return false;
	if(box0.maximumWorld.y < box1.minimumWorld.y || box0.minimumWorld.y > box1.maximumWorld.y) return false;
	if(box0.maximumWorld.z < box1.minimumWorld.z || box0.minimumWorld.z > box1.maximumWorld.z) return false;
	return true;
};
com_babylonhx_culling_BoundingBox.IntersectsSphere = function(minPoint,maxPoint,sphereCenter,sphereRadius) {
	com_babylonhx_culling_BoundingBox.IntersectsSphere_vector = com_babylonhx_math_Vector3.Clamp(sphereCenter,minPoint,maxPoint);
	var num = com_babylonhx_math_Vector3.DistanceSquared(sphereCenter,com_babylonhx_culling_BoundingBox.IntersectsSphere_vector);
	return num <= sphereRadius * sphereRadius;
};
com_babylonhx_culling_BoundingBox.IsCompletelyInFrustum = function(boundingVectors,frustumPlanes) {
	var _g = 0;
	while(_g < 6) {
		var p = _g++;
		var _g1 = 0;
		while(_g1 < 8) {
			var i = _g1++;
			if(frustumPlanes[p].dotCoordinate(boundingVectors[i]) < 0) return false;
		}
	}
	return true;
};
com_babylonhx_culling_BoundingBox.IsInFrustum = function(boundingVectors,frustumPlanes) {
	var _g = 0;
	while(_g < 6) {
		var p = _g++;
		var inCount = 8;
		var _g1 = 0;
		while(_g1 < 8) {
			var i = _g1++;
			if(frustumPlanes[p].dotCoordinate(boundingVectors[i]) < 0) --inCount; else break;
		}
		if(inCount == 0) return false;
	}
	return true;
};
com_babylonhx_culling_BoundingBox.prototype = {
	minimum: null
	,maximum: null
	,vectors: null
	,center: null
	,extendSize: null
	,directions: null
	,vectorsWorld: null
	,minimumWorld: null
	,maximumWorld: null
	,_worldMatrix: null
	,__smartArrayFlags: null
	,getWorldMatrix: function() {
		return this._worldMatrix;
	}
	,_update: function(world) {
		com_babylonhx_math_Vector3.FromFloatsToRef(Infinity,Infinity,Infinity,this.minimumWorld);
		com_babylonhx_math_Vector3.FromFloatsToRef(-Infinity,-Infinity,-Infinity,this.maximumWorld);
		var _g1 = 0;
		var _g = this.vectors.length;
		while(_g1 < _g) {
			var index = _g1++;
			com_babylonhx_culling_BoundingBox.v_update = this.vectorsWorld[index];
			com_babylonhx_math_Vector3.TransformCoordinatesToRef(this.vectors[index],world,com_babylonhx_culling_BoundingBox.v_update);
			if(com_babylonhx_culling_BoundingBox.v_update.x < this.minimumWorld.x) this.minimumWorld.x = com_babylonhx_culling_BoundingBox.v_update.x;
			if(com_babylonhx_culling_BoundingBox.v_update.y < this.minimumWorld.y) this.minimumWorld.y = com_babylonhx_culling_BoundingBox.v_update.y;
			if(com_babylonhx_culling_BoundingBox.v_update.z < this.minimumWorld.z) this.minimumWorld.z = com_babylonhx_culling_BoundingBox.v_update.z;
			if(com_babylonhx_culling_BoundingBox.v_update.x > this.maximumWorld.x) this.maximumWorld.x = com_babylonhx_culling_BoundingBox.v_update.x;
			if(com_babylonhx_culling_BoundingBox.v_update.y > this.maximumWorld.y) this.maximumWorld.y = com_babylonhx_culling_BoundingBox.v_update.y;
			if(com_babylonhx_culling_BoundingBox.v_update.z > this.maximumWorld.z) this.maximumWorld.z = com_babylonhx_culling_BoundingBox.v_update.z;
		}
		this.maximumWorld.addToRef(this.minimumWorld,this.center);
		this.center.scaleInPlace(0.5);
		com_babylonhx_math_Vector3.FromFloatArrayToRef(world.m,0,this.directions[0]);
		com_babylonhx_math_Vector3.FromFloatArrayToRef(world.m,4,this.directions[1]);
		com_babylonhx_math_Vector3.FromFloatArrayToRef(world.m,8,this.directions[2]);
		this._worldMatrix = world;
	}
	,isInFrustum: function(frustumPlanes) {
		return com_babylonhx_culling_BoundingBox.IsInFrustum(this.vectorsWorld,frustumPlanes);
	}
	,isCompletelyInFrustum: function(frustumPlanes) {
		return com_babylonhx_culling_BoundingBox.IsCompletelyInFrustum(this.vectorsWorld,frustumPlanes);
	}
	,intersectsPoint: function(point) {
		var delta = -0.001;
		if(this.maximumWorld.x - point.x < delta || delta > point.x - this.minimumWorld.x) return false;
		if(this.maximumWorld.y - point.y < delta || delta > point.y - this.minimumWorld.y) return false;
		if(this.maximumWorld.z - point.z < delta || delta > point.z - this.minimumWorld.z) return false;
		return true;
	}
	,intersectsSphere: function(sphere) {
		return com_babylonhx_culling_BoundingBox.IntersectsSphere(this.minimumWorld,this.maximumWorld,sphere.centerWorld,sphere.radiusWorld);
	}
	,intersectsMinMax: function(min,max) {
		if(this.maximumWorld.x < min.x || this.minimumWorld.x > max.x) return false;
		if(this.maximumWorld.y < min.y || this.minimumWorld.y > max.y) return false;
		if(this.maximumWorld.z < min.z || this.minimumWorld.z > max.z) return false;
		return true;
	}
	,__class__: com_babylonhx_culling_BoundingBox
};
var com_babylonhx_culling_BoundingInfo = $hx_exports.BABYLON.BoundingInfo = function(minimum,maximum) {
	this.minimum = minimum;
	this.maximum = maximum;
	this.boundingBox = new com_babylonhx_culling_BoundingBox(minimum,maximum);
	this.boundingSphere = new com_babylonhx_culling_BoundingSphere(minimum,maximum);
};
$hxClasses["com.babylonhx.culling.BoundingInfo"] = com_babylonhx_culling_BoundingInfo;
com_babylonhx_culling_BoundingInfo.__name__ = ["com","babylonhx","culling","BoundingInfo"];
com_babylonhx_culling_BoundingInfo.computeBoxExtents = function(axis,box) {
	var p = com_babylonhx_math_Vector3.Dot(box.center,axis);
	var r0 = Math.abs(com_babylonhx_math_Vector3.Dot(box.directions[0],axis)) * box.extendSize.x;
	var r1 = Math.abs(com_babylonhx_math_Vector3.Dot(box.directions[1],axis)) * box.extendSize.y;
	var r2 = Math.abs(com_babylonhx_math_Vector3.Dot(box.directions[2],axis)) * box.extendSize.z;
	var r = r0 + r1 + r2;
	return { min : p - r, max : p + r};
};
com_babylonhx_culling_BoundingInfo.extentsOverlap = function(min0,max0,min1,max1) {
	return !(min0 > max1 || min1 > max0);
};
com_babylonhx_culling_BoundingInfo.axisOverlap = function(axis,box0,box1) {
	var result0 = com_babylonhx_culling_BoundingInfo.computeBoxExtents(axis,box0);
	var result1 = com_babylonhx_culling_BoundingInfo.computeBoxExtents(axis,box1);
	return !(result0.min > result1.max || result1.min > result0.max);
};
com_babylonhx_culling_BoundingInfo.prototype = {
	boundingBox: null
	,boundingSphere: null
	,minimum: null
	,maximum: null
	,_update: function(world) {
		this.boundingBox._update(world);
		this.boundingSphere._update(world);
	}
	,isInFrustum: function(frustumPlanes) {
		if(!this.boundingSphere.isInFrustum(frustumPlanes)) return false;
		return com_babylonhx_culling_BoundingBox.IsInFrustum(this.boundingBox.vectorsWorld,frustumPlanes);
	}
	,isCompletelyInFrustum: function(frustumPlanes) {
		return com_babylonhx_culling_BoundingBox.IsCompletelyInFrustum(this.boundingBox.vectorsWorld,frustumPlanes);
	}
	,_checkCollision: function(collider) {
		return collider._canDoCollision(this.boundingSphere.centerWorld,this.boundingSphere.radiusWorld,this.boundingBox.minimumWorld,this.boundingBox.maximumWorld);
	}
	,intersectsPoint: function(point) {
		if(this.boundingSphere.centerWorld == null) return false;
		if(!this.boundingSphere.intersectsPoint(point)) return false;
		if(!this.boundingBox.intersectsPoint(point)) return false;
		return true;
	}
	,intersects: function(boundingInfo,precise) {
		if(precise == null) precise = false;
		if(this.boundingSphere.centerWorld == null || boundingInfo.boundingSphere.centerWorld == null) return false;
		if(!com_babylonhx_culling_BoundingSphere.Intersects(this.boundingSphere,boundingInfo.boundingSphere)) return false;
		if(!com_babylonhx_culling_BoundingBox.Intersects(this.boundingBox,boundingInfo.boundingBox)) return false;
		if(precise) return true;
		var box0 = this.boundingBox;
		var box1 = boundingInfo.boundingBox;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(box0.directions[0],box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(box0.directions[1],box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(box0.directions[2],box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(box1.directions[0],box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(box1.directions[1],box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(box1.directions[2],box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[0],box1.directions[0]),box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[0],box1.directions[1]),box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[0],box1.directions[2]),box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[1],box1.directions[0]),box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[1],box1.directions[1]),box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[1],box1.directions[2]),box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[2],box1.directions[0]),box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[2],box1.directions[1]),box0,box1)) return false;
		if(!com_babylonhx_culling_BoundingInfo.axisOverlap(com_babylonhx_math_Vector3.Cross(box0.directions[2],box1.directions[2]),box0,box1)) return false;
		return true;
	}
	,__class__: com_babylonhx_culling_BoundingInfo
};
var com_babylonhx_culling_BoundingSphere = $hx_exports.BABYLON.BoundingSphere = function(minimum,maximum) {
	this._tempRadiusVector = new com_babylonhx_math_Vector3(0,0,0);
	var distance = Math.sqrt(com_babylonhx_math_Vector3.DistanceSquared(minimum,maximum));
	this.center = com_babylonhx_math_Vector3.Lerp(minimum,maximum,0.5);
	this.radius = distance * 0.5;
	this.centerWorld = new com_babylonhx_math_Vector3(0,0,0);
	this._update(com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0));
};
$hxClasses["com.babylonhx.culling.BoundingSphere"] = com_babylonhx_culling_BoundingSphere;
com_babylonhx_culling_BoundingSphere.__name__ = ["com","babylonhx","culling","BoundingSphere"];
com_babylonhx_culling_BoundingSphere.Intersects = function(sphere0,sphere1) {
	var x = sphere0.centerWorld.x - sphere1.centerWorld.x;
	var y = sphere0.centerWorld.y - sphere1.centerWorld.y;
	var z = sphere0.centerWorld.z - sphere1.centerWorld.z;
	var distance = Math.sqrt(x * x + y * y + z * z);
	if(sphere0.radiusWorld + sphere1.radiusWorld < distance) return false;
	return true;
};
com_babylonhx_culling_BoundingSphere.prototype = {
	center: null
	,radius: null
	,centerWorld: null
	,radiusWorld: null
	,_tempRadiusVector: null
	,_update: function(world) {
		com_babylonhx_math_Vector3.TransformCoordinatesToRef(this.center,world,this.centerWorld);
		com_babylonhx_math_Vector3.TransformNormalFromFloatsToRef(1.0,1.0,1.0,world,this._tempRadiusVector);
		this.radiusWorld = Math.max(Math.max(Math.abs(this._tempRadiusVector.x),Math.abs(this._tempRadiusVector.y)),Math.abs(this._tempRadiusVector.z)) * this.radius;
	}
	,isInFrustum: function(frustumPlanes) {
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			if(frustumPlanes[i].dotCoordinate(this.centerWorld) <= -this.radiusWorld) return false;
		}
		return true;
	}
	,intersectsPoint: function(point) {
		var x = this.centerWorld.x - point.x;
		var y = this.centerWorld.y - point.y;
		var z = this.centerWorld.z - point.z;
		var distance = Math.sqrt(x * x + y * y + z * z);
		if(Math.abs(this.radiusWorld - distance) < 0.001) return false;
		return true;
	}
	,__class__: com_babylonhx_culling_BoundingSphere
};
var com_babylonhx_culling_octrees_IOctreeContainer = $hx_exports.BABYLON.IOctreeContainer = function() { };
$hxClasses["com.babylonhx.culling.octrees.IOctreeContainer"] = com_babylonhx_culling_octrees_IOctreeContainer;
com_babylonhx_culling_octrees_IOctreeContainer.__name__ = ["com","babylonhx","culling","octrees","IOctreeContainer"];
com_babylonhx_culling_octrees_IOctreeContainer.prototype = {
	blocks: null
	,__class__: com_babylonhx_culling_octrees_IOctreeContainer
};
var com_babylonhx_culling_octrees_Octree = $hx_exports.BABYLON.Octree = function(creationFunc,maxBlockCapacity,maxDepth) {
	if(maxDepth == null) maxDepth = 2;
	if(maxBlockCapacity == null) maxBlockCapacity = 64;
	this.dynamicContent = [];
	this._maxBlockCapacity = maxBlockCapacity;
	this._selectionContent = new com_babylonhx_tools_SmartArray(1024);
	this._creationFunc = creationFunc;
	this.maxDepth = maxDepth;
};
$hxClasses["com.babylonhx.culling.octrees.Octree"] = com_babylonhx_culling_octrees_Octree;
com_babylonhx_culling_octrees_Octree.__name__ = ["com","babylonhx","culling","octrees","Octree"];
com_babylonhx_culling_octrees_Octree.__interfaces__ = [com_babylonhx_culling_octrees_IOctreeContainer];
com_babylonhx_culling_octrees_Octree._CreateBlocks = function(worldMin,worldMax,entries,maxBlockCapacity,currentDepth,maxDepth,target,creationFunc) {
	target.blocks = [];
	var blockSize = new com_babylonhx_math_Vector3((worldMax.x - worldMin.x) / 2,(worldMax.y - worldMin.y) / 2,(worldMax.z - worldMin.z) / 2);
	var _g = 0;
	while(_g < 2) {
		var x = _g++;
		var _g1 = 0;
		while(_g1 < 2) {
			var y = _g1++;
			var _g2 = 0;
			while(_g2 < 2) {
				var z = _g2++;
				var localMin = worldMin.add(blockSize.multiplyByFloats(x,y,z));
				var localMax = worldMin.add(blockSize.multiplyByFloats(x + 1,y + 1,z + 1));
				var block = new com_babylonhx_culling_octrees_OctreeBlock(localMin,localMax,maxBlockCapacity,currentDepth + 1,maxDepth,creationFunc);
				block.addEntries(entries);
				target.blocks.push(block);
			}
		}
	}
};
com_babylonhx_culling_octrees_Octree.CreationFuncForMeshes = function(entry,block) {
	if(!entry.get_isBlocked() && entry.getBoundingInfo().boundingBox.intersectsMinMax(block.get_minPoint(),block.get_maxPoint())) block.entries.push(entry);
};
com_babylonhx_culling_octrees_Octree.CreationFuncForSubMeshes = function(entry,block) {
	if(entry._boundingInfo.boundingBox.intersectsMinMax(block.get_minPoint(),block.get_maxPoint())) block.entries.push(entry);
};
com_babylonhx_culling_octrees_Octree.prototype = {
	blocks: null
	,dynamicContent: null
	,maxDepth: null
	,_maxBlockCapacity: null
	,_selectionContent: null
	,_creationFunc: null
	,update: function(worldMin,worldMax,entries) {
		com_babylonhx_culling_octrees_Octree._CreateBlocks(worldMin,worldMax,entries,this._maxBlockCapacity,0,this.maxDepth,this,this._creationFunc);
	}
	,addMesh: function(entry) {
		var _g1 = 0;
		var _g = this.blocks.length;
		while(_g1 < _g) {
			var index = _g1++;
			var block = this.blocks[index];
			block.addEntry(entry);
		}
	}
	,select: function(frustumPlanes,allowDuplicate) {
		if(allowDuplicate == null) allowDuplicate = false;
		this._selectionContent.reset();
		var _g1 = 0;
		var _g = this.blocks.length;
		while(_g1 < _g) {
			var index = _g1++;
			var block = this.blocks[index];
			block.select(frustumPlanes,this._selectionContent,allowDuplicate);
		}
		if(allowDuplicate) this._selectionContent.concatArray(this.dynamicContent); else this._selectionContent.concatArrayWithNoDuplicate(this.dynamicContent);
		return this._selectionContent;
	}
	,intersects: function(sphereCenter,sphereRadius,allowDuplicate) {
		if(allowDuplicate == null) allowDuplicate = false;
		this._selectionContent.reset();
		var _g1 = 0;
		var _g = this.blocks.length;
		while(_g1 < _g) {
			var index = _g1++;
			var block = this.blocks[index];
			block.intersects(sphereCenter,sphereRadius,this._selectionContent,allowDuplicate);
		}
		if(allowDuplicate) this._selectionContent.concatArray(this.dynamicContent); else this._selectionContent.concatArrayWithNoDuplicate(this.dynamicContent);
		return this._selectionContent;
	}
	,intersectsRay: function(ray) {
		this._selectionContent.reset();
		var _g1 = 0;
		var _g = this.blocks.length;
		while(_g1 < _g) {
			var index = _g1++;
			var block = this.blocks[index];
			block.intersectsRay(ray,this._selectionContent);
		}
		this._selectionContent.concatArrayWithNoDuplicate(this.dynamicContent);
		return this._selectionContent;
	}
	,__class__: com_babylonhx_culling_octrees_Octree
};
var com_babylonhx_culling_octrees_OctreeBlock = $hx_exports.BABYLON.OctreeBlock = function(minPoint,maxPoint,capacity,depth,maxDepth,creationFunc) {
	this._boundingVectors = (function($this) {
		var $r;
		var this1;
		this1 = new Array(8);
		$r = this1;
		return $r;
	}(this));
	this.entries = [];
	this._capacity = capacity;
	this._depth = depth;
	this._maxDepth = maxDepth;
	this._creationFunc = creationFunc;
	this._minPoint = minPoint;
	this._maxPoint = maxPoint;
	var val = new com_babylonhx_math_Vector3(minPoint.x,minPoint.y,minPoint.z);
	this._boundingVectors[0] = val;
	var val1 = new com_babylonhx_math_Vector3(maxPoint.x,maxPoint.y,maxPoint.z);
	this._boundingVectors[1] = val1;
	var val2 = new com_babylonhx_math_Vector3(minPoint.x,minPoint.y,minPoint.z);
	this._boundingVectors[2] = val2;
	this._boundingVectors[2].x = maxPoint.x;
	var val3 = new com_babylonhx_math_Vector3(minPoint.x,minPoint.y,minPoint.z);
	this._boundingVectors[3] = val3;
	this._boundingVectors[3].y = maxPoint.y;
	var val4 = new com_babylonhx_math_Vector3(minPoint.x,minPoint.y,minPoint.z);
	this._boundingVectors[4] = val4;
	this._boundingVectors[4].z = maxPoint.z;
	var val5 = new com_babylonhx_math_Vector3(maxPoint.x,maxPoint.y,maxPoint.z);
	this._boundingVectors[5] = val5;
	this._boundingVectors[5].z = minPoint.z;
	var val6 = new com_babylonhx_math_Vector3(maxPoint.x,maxPoint.y,maxPoint.z);
	this._boundingVectors[6] = val6;
	this._boundingVectors[6].x = minPoint.x;
	var val7 = new com_babylonhx_math_Vector3(maxPoint.x,maxPoint.y,maxPoint.z);
	this._boundingVectors[7] = val7;
	this._boundingVectors[7].y = minPoint.y;
};
$hxClasses["com.babylonhx.culling.octrees.OctreeBlock"] = com_babylonhx_culling_octrees_OctreeBlock;
com_babylonhx_culling_octrees_OctreeBlock.__name__ = ["com","babylonhx","culling","octrees","OctreeBlock"];
com_babylonhx_culling_octrees_OctreeBlock.__interfaces__ = [com_babylonhx_culling_octrees_IOctreeContainer];
com_babylonhx_culling_octrees_OctreeBlock.prototype = {
	entries: null
	,blocks: null
	,_depth: null
	,_maxDepth: null
	,_capacity: null
	,_minPoint: null
	,_maxPoint: null
	,_boundingVectors: null
	,_creationFunc: null
	,capacity: null
	,get_capacity: function() {
		return this._capacity;
	}
	,minPoint: null
	,get_minPoint: function() {
		return this._minPoint;
	}
	,maxPoint: null
	,get_maxPoint: function() {
		return this._maxPoint;
	}
	,addEntry: function(entry) {
		if(this.blocks != null) {
			var _g1 = 0;
			var _g = this.blocks.length;
			while(_g1 < _g) {
				var index = _g1++;
				var block = this.blocks[index];
				block.addEntry(entry);
			}
			return;
		}
		this._creationFunc(entry,this);
		if(this.entries.length > this.get_capacity() && this._depth < this._maxDepth) this.createInnerBlocks();
	}
	,addEntries: function(entries) {
		var _g1 = 0;
		var _g = entries.length;
		while(_g1 < _g) {
			var index = _g1++;
			var mesh = entries[index];
			this.addEntry(mesh);
		}
	}
	,select: function(frustumPlanes,selection,allowDuplicate) {
		if(allowDuplicate == null) allowDuplicate = false;
		if(com_babylonhx_culling_BoundingBox.IsInFrustum(this._boundingVectors,frustumPlanes)) {
			if(this.blocks != null) {
				var _g1 = 0;
				var _g = this.blocks.length;
				while(_g1 < _g) {
					var index = _g1++;
					var block = this.blocks[index];
					block.select(frustumPlanes,selection,allowDuplicate);
				}
				return;
			}
			if(allowDuplicate) selection.concatArray(this.entries); else selection.concatArrayWithNoDuplicate(this.entries);
		}
	}
	,intersects: function(sphereCenter,sphereRadius,selection,allowDuplicate) {
		if(allowDuplicate == null) allowDuplicate = false;
		if(com_babylonhx_culling_BoundingBox.IntersectsSphere(this._minPoint,this._maxPoint,sphereCenter,sphereRadius)) {
			if(this.blocks != null) {
				var _g1 = 0;
				var _g = this.blocks.length;
				while(_g1 < _g) {
					var index = _g1++;
					var block = this.blocks[index];
					block.intersects(sphereCenter,sphereRadius,selection,allowDuplicate);
				}
				return;
			}
			if(allowDuplicate) selection.concatArray(this.entries); else selection.concatArrayWithNoDuplicate(this.entries);
		}
	}
	,intersectsRay: function(ray,selection) {
		if(ray.intersectsBoxMinMax(this._minPoint,this._maxPoint)) {
			if(this.blocks != null) {
				var _g1 = 0;
				var _g = this.blocks.length;
				while(_g1 < _g) {
					var index = _g1++;
					var block = this.blocks[index];
					block.intersectsRay(ray,selection);
				}
				return;
			}
			selection.concatArrayWithNoDuplicate(this.entries);
		}
	}
	,createInnerBlocks: function() {
		com_babylonhx_culling_octrees_Octree._CreateBlocks(this._minPoint,this._maxPoint,this.entries,this._capacity,this._depth,this._maxDepth,this,this._creationFunc);
	}
	,__class__: com_babylonhx_culling_octrees_OctreeBlock
	,__properties__: {get_maxPoint:"get_maxPoint",get_minPoint:"get_minPoint",get_capacity:"get_capacity"}
};
var com_babylonhx_layer_Layer = $hx_exports.BABYLON.Layer = function(name,imgUrl,scene,isBackground,color) {
	if(isBackground == null) isBackground = true;
	this._vertexStrideSize = 8;
	this._vertexDeclaration = [];
	this.indices = [];
	this.vertices = [];
	this.name = name;
	if(imgUrl != null) this.texture = new com_babylonhx_materials_textures_Texture(imgUrl,scene,false); else this.texture = null;
	this.isBackground = isBackground;
	if(color == null) this.color = new com_babylonhx_math_Color4(1,1,1,1); else this.color = color;
	this._scene = scene;
	this._scene.layers.push(this);
	this.vertices.push(1);
	this.vertices.push(1);
	this.vertices.push(-1);
	this.vertices.push(1);
	this.vertices.push(-1);
	this.vertices.push(-1);
	this.vertices.push(1);
	this.vertices.push(-1);
	this._vertexDeclaration = [2];
	this._vertexBuffer = scene._engine.createVertexBuffer(this.vertices);
	this.indices.push(0);
	this.indices.push(1);
	this.indices.push(2);
	this.indices.push(0);
	this.indices.push(2);
	this.indices.push(3);
	this._indexBuffer = scene._engine.createIndexBuffer(this.indices);
	this._effect = this._scene._engine.createEffect("layer",["position"],["textureMatrix","color"],["textureSampler"],"");
};
$hxClasses["com.babylonhx.layer.Layer"] = com_babylonhx_layer_Layer;
com_babylonhx_layer_Layer.__name__ = ["com","babylonhx","layer","Layer"];
com_babylonhx_layer_Layer.prototype = {
	name: null
	,texture: null
	,isBackground: null
	,color: null
	,onDispose: null
	,vertices: null
	,indices: null
	,_scene: null
	,_vertexDeclaration: null
	,_vertexStrideSize: null
	,_vertexBuffer: null
	,_indexBuffer: null
	,_effect: null
	,render: function() {
		if(!this._effect._isReady || this.texture == null || !this.texture.isReady()) return;
		var engine = this._scene._engine;
		engine.enableEffect(this._effect);
		engine.setState(false,null,null,null);
		this._effect.setTexture("textureSampler",this.texture);
		this._effect.setMatrix("textureMatrix",this.texture.getTextureMatrix());
		this._effect.setFloat4("color",this.color.r,this.color.g,this.color.b,this.color.a);
		engine.bindBuffers(this._vertexBuffer,this._indexBuffer,this._vertexDeclaration,this._vertexStrideSize,this._effect);
		if(engine._alphaMode == 2) null; else {
			switch(2) {
			case 0:
				engine._depthCullingState.set_depthMask(true);
				engine._alphaState.set_alphaBlend(false);
				break;
			case 2:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 6:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 1:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 3:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(0,769,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 4:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(774,0,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 5:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,769,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			}
			engine._alphaMode = 2;
		}
		engine.draw(true,0,6);
		if(engine._alphaMode == 0) null; else {
			switch(0) {
			case 0:
				engine._depthCullingState.set_depthMask(true);
				engine._alphaState.set_alphaBlend(false);
				break;
			case 2:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 6:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 1:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 3:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(0,769,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 4:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(774,0,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 5:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,769,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			}
			engine._alphaMode = 0;
		}
	}
	,dispose: function() {
		if(this._vertexBuffer != null) {
			this._scene._engine._releaseBuffer(this._vertexBuffer);
			this._vertexBuffer = null;
		}
		if(this._indexBuffer != null) {
			this._scene._engine._releaseBuffer(this._indexBuffer);
			this._indexBuffer = null;
		}
		if(this.texture != null) {
			this.texture.dispose();
			this.texture = null;
		}
		var index = HxOverrides.indexOf(this._scene.layers,this,0);
		this._scene.layers.splice(index,1);
		if(this.onDispose != null) this.onDispose();
	}
	,__class__: com_babylonhx_layer_Layer
};
var com_babylonhx_lensflare_LensFlare = $hx_exports.BABYLON.LensFlare = function(size,position,color,imgUrl,system) {
	if(color != null) this.color = color; else this.color = new com_babylonhx_math_Color3(1,1,1);
	this.position = position;
	this.size = size;
	if(imgUrl != null) this.texture = new com_babylonhx_materials_textures_Texture(imgUrl,system.getScene(),true); else this.texture = null;
	this._system = system;
	this._system.lensFlares.push(this);
};
$hxClasses["com.babylonhx.lensflare.LensFlare"] = com_babylonhx_lensflare_LensFlare;
com_babylonhx_lensflare_LensFlare.__name__ = ["com","babylonhx","lensflare","LensFlare"];
com_babylonhx_lensflare_LensFlare.prototype = {
	size: null
	,color: null
	,texture: null
	,position: null
	,_system: null
	,dispose: function() {
		if(this.texture != null) this.texture.dispose();
		HxOverrides.remove(this._system.lensFlares,this);
	}
	,__class__: com_babylonhx_lensflare_LensFlare
};
var com_babylonhx_lensflare_LensFlareSystem = $hx_exports.BABYLON.LensFlareSystem = function(name,emitter,scene) {
	this._isEnabled = true;
	this.layerMask = 268435455;
	this.borderLimit = 300;
	this.lensFlares = [];
	this.name = name;
	this._scene = scene;
	this._emitter = emitter;
	scene.lensFlareSystems.push(this);
	this.meshesSelectionPredicate = function(m) {
		return m.get_material() != null && m.isVisible && m.isEnabled() && m.isBlocker && (m.layerMask & scene.activeCamera.layerMask) != 0;
	};
	var vertices = [];
	vertices.push(1);
	vertices.push(1);
	vertices.push(-1);
	vertices.push(1);
	vertices.push(-1);
	vertices.push(-1);
	vertices.push(1);
	vertices.push(-1);
	this._vertexDeclaration = [2];
	this._vertexStrideSize = 8;
	this._vertexBuffer = scene._engine.createVertexBuffer(vertices);
	var indices = [];
	indices.push(0);
	indices.push(1);
	indices.push(2);
	indices.push(0);
	indices.push(2);
	indices.push(3);
	this._indexBuffer = scene._engine.createIndexBuffer(indices);
	this._effect = this._scene._engine.createEffect("lensFlare",["position"],["color","viewportMatrix"],["textureSampler"],"");
};
$hxClasses["com.babylonhx.lensflare.LensFlareSystem"] = com_babylonhx_lensflare_LensFlareSystem;
com_babylonhx_lensflare_LensFlareSystem.__name__ = ["com","babylonhx","lensflare","LensFlareSystem"];
com_babylonhx_lensflare_LensFlareSystem.prototype = {
	name: null
	,lensFlares: null
	,borderLimit: null
	,meshesSelectionPredicate: null
	,layerMask: null
	,_scene: null
	,_emitter: null
	,_vertexDeclaration: null
	,_vertexStrideSize: null
	,_vertexBuffer: null
	,_indexBuffer: null
	,_effect: null
	,_positionX: null
	,_positionY: null
	,_isEnabled: null
	,isEnabled: null
	,get_isEnabled: function() {
		return this._isEnabled;
	}
	,set_isEnabled: function(value) {
		this._isEnabled = value;
		return value;
	}
	,getScene: function() {
		return this._scene;
	}
	,getEmitter: function() {
		return this._emitter;
	}
	,setEmitter: function(newEmitter) {
		this._emitter = newEmitter;
	}
	,getEmitterPosition: function() {
		if(this._emitter.getAbsolutePosition != null) return this._emitter.getAbsolutePosition(); else return this._emitter.position;
	}
	,computeEffectivePosition: function(globalViewport) {
		var position = this.getEmitterPosition();
		position = com_babylonhx_math_Vector3.Project(position,com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0),this._scene._transformMatrix,globalViewport);
		this._positionX = position.x;
		this._positionY = position.y;
		position = com_babylonhx_math_Vector3.TransformCoordinates(this.getEmitterPosition(),this._scene._viewMatrix);
		if(position.z > 0) {
			if(this._positionX > globalViewport.x && this._positionX < globalViewport.x + globalViewport.width) {
				if(this._positionY > globalViewport.y && this._positionY < globalViewport.y + globalViewport.height) return true;
			}
		}
		return false;
	}
	,_isVisible: function() {
		if(!this._isEnabled) return false;
		var emitterPosition = this.getEmitterPosition();
		var direction = emitterPosition.subtract(this._scene.activeCamera.position);
		var distance = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);
		direction.normalize();
		var ray = new com_babylonhx_math_Ray(this._scene.activeCamera.position,direction);
		var pickInfo = this._scene.pickWithRay(ray,this.meshesSelectionPredicate,true);
		return !pickInfo.hit || pickInfo.distance > distance;
	}
	,render: function() {
		if(!this._effect._isReady) return false;
		var engine = this._scene._engine;
		var viewport = this._scene.activeCamera.viewport;
		var globalViewport = viewport.toGlobal(engine);
		if(!this.computeEffectivePosition(globalViewport)) return false;
		if(!this._isVisible()) return false;
		var awayX = 0;
		var awayY = 0;
		if(this._positionX < this.borderLimit + globalViewport.x) awayX = this.borderLimit + globalViewport.x - this._positionX; else if(this._positionX > globalViewport.x + globalViewport.width - this.borderLimit) awayX = this._positionX - globalViewport.x - globalViewport.width + this.borderLimit; else awayX = 0;
		if(this._positionY < this.borderLimit + globalViewport.y) awayY = this.borderLimit + globalViewport.y - this._positionY; else if(this._positionY > globalViewport.y + globalViewport.height - this.borderLimit) awayY = this._positionY - globalViewport.y - globalViewport.height + this.borderLimit; else awayY = 0;
		var away;
		if(awayX > awayY) away = awayX; else away = awayY;
		if(away > this.borderLimit) away = this.borderLimit;
		var intensity = 1.0 - away / this.borderLimit;
		if(intensity < 0) return false;
		if(intensity > 1.0) intensity = 1.0;
		var centerX = globalViewport.x + globalViewport.width / 2;
		var centerY = globalViewport.y + globalViewport.height / 2;
		var distX = centerX - this._positionX;
		var distY = centerY - this._positionY;
		engine.enableEffect(this._effect);
		engine.setState(false,null,null,null);
		engine._depthCullingState.set_depthTest(false);
		if(engine._alphaMode == 6) null; else {
			switch(6) {
			case 0:
				engine._depthCullingState.set_depthMask(true);
				engine._alphaState.set_alphaBlend(false);
				break;
			case 2:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 6:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 1:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 3:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(0,769,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 4:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(774,0,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 5:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,769,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			}
			engine._alphaMode = 6;
		}
		engine.bindBuffers(this._vertexBuffer,this._indexBuffer,this._vertexDeclaration,this._vertexStrideSize,this._effect);
		var _g1 = 0;
		var _g = this.lensFlares.length;
		while(_g1 < _g) {
			var index = _g1++;
			var flare = this.lensFlares[index];
			var x = centerX - distX * flare.position;
			var y = centerY - distY * flare.position;
			var cw = flare.size;
			var ch = flare.size * engine.getAspectRatio(this._scene.activeCamera);
			var cx = 2 * (x / globalViewport.width) - 1.0;
			var cy = 1.0 - 2 * (y / globalViewport.height);
			var viewportMatrix = com_babylonhx_math_Matrix.FromValues(cw / 2,0,0,0,0,ch / 2,0,0,0,0,1,0,cx,cy,0,1);
			this._effect.setMatrix("viewportMatrix",viewportMatrix);
			this._effect.setTexture("textureSampler",flare.texture);
			this._effect.setFloat4("color",flare.color.r * intensity,flare.color.g * intensity,flare.color.b * intensity,1.0);
			engine.draw(true,0,6);
		}
		engine._depthCullingState.set_depthTest(true);
		if(engine._alphaMode == 0) null; else {
			switch(0) {
			case 0:
				engine._depthCullingState.set_depthMask(true);
				engine._alphaState.set_alphaBlend(false);
				break;
			case 2:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 6:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 1:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 3:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(0,769,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 4:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(774,0,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 5:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,769,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			}
			engine._alphaMode = 0;
		}
		return true;
	}
	,dispose: function() {
		if(this._vertexBuffer != null) {
			this._scene._engine._releaseBuffer(this._vertexBuffer);
			this._vertexBuffer = null;
		}
		if(this._indexBuffer != null) {
			this._scene._engine._releaseBuffer(this._indexBuffer);
			this._indexBuffer = null;
		}
		while(this.lensFlares.length > 0) this.lensFlares[0].dispose();
		HxOverrides.remove(this._scene.lensFlareSystems,this);
	}
	,__class__: com_babylonhx_lensflare_LensFlareSystem
	,__properties__: {get_isEnabled:"get_isEnabled"}
};
var com_babylonhx_lights_Light = $hx_exports.BABYLON.Light = function(name,scene) {
	this._includedOnlyMeshesIds = [];
	this._excludedMeshesIds = [];
	this.excludeWithLayerMask = 0;
	this.excludedMeshes = [];
	this.includedOnlyMeshes = [];
	this.includeOnlyWithLayerMask = 0;
	this.range = Infinity;
	this.intensity = 1.0;
	this.specular = new com_babylonhx_math_Color3(1.0,1.0,1.0);
	this.diffuse = new com_babylonhx_math_Color3(1.0,1.0,1.0);
	com_babylonhx_Node.call(this,name,scene);
	this._type = "LIGHT";
	scene.addLight(this);
};
$hxClasses["com.babylonhx.lights.Light"] = com_babylonhx_lights_Light;
com_babylonhx_lights_Light.__name__ = ["com","babylonhx","lights","Light"];
com_babylonhx_lights_Light.__super__ = com_babylonhx_Node;
com_babylonhx_lights_Light.prototype = $extend(com_babylonhx_Node.prototype,{
	diffuse: null
	,specular: null
	,intensity: null
	,range: null
	,includeOnlyWithLayerMask: null
	,includedOnlyMeshes: null
	,excludedMeshes: null
	,excludeWithLayerMask: null
	,_shadowGenerator: null
	,_parentedWorldMatrix: null
	,_excludedMeshesIds: null
	,_includedOnlyMeshesIds: null
	,_type: null
	,get_type: function() {
		return this._type;
	}
	,getShadowGenerator: function() {
		return this._shadowGenerator;
	}
	,getAbsolutePosition: function() {
		return new com_babylonhx_math_Vector3(0,0,0);
	}
	,transferToEffect: function(effect,uniformName0,uniformName1) {
	}
	,_getWorldMatrix: function() {
		return com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	}
	,canAffectMesh: function(mesh) {
		if(mesh == null) return true;
		if(this.includedOnlyMeshes.length > 0 && HxOverrides.indexOf(this.includedOnlyMeshes,mesh,0) == -1) return false;
		if(this.excludedMeshes.length > 0 && HxOverrides.indexOf(this.excludedMeshes,mesh,0) != -1) return false;
		if(this.includeOnlyWithLayerMask != 0 && this.includeOnlyWithLayerMask != mesh.layerMask) return false;
		if(this.excludeWithLayerMask != 0 && js_Boot.__cast(this.excludeWithLayerMask & mesh.layerMask , Bool)) return false;
		return true;
	}
	,getWorldMatrix: function() {
		this._currentRenderId = this._scene._renderId;
		var worldMatrix = this._getWorldMatrix();
		if(this.parent != null && this.parent.getWorldMatrix() != null) {
			if(this._parentedWorldMatrix == null) this._parentedWorldMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
			worldMatrix.multiplyToRef(this.parent.getWorldMatrix(),this._parentedWorldMatrix);
			this._parentRenderId = this.parent._currentRenderId;
			return this._parentedWorldMatrix;
		}
		return worldMatrix;
	}
	,dispose: function() {
		if(this._shadowGenerator != null) {
			this._shadowGenerator.dispose();
			this._shadowGenerator = null;
		}
		this._scene.stopAnimation(this);
		this._scene.removeLight(this);
	}
	,__class__: com_babylonhx_lights_Light
	,__properties__: {get_type:"get_type"}
});
var com_babylonhx_lights_IShadowLight = $hx_exports.BABYLON.IShadowLight = function() { };
$hxClasses["com.babylonhx.lights.IShadowLight"] = com_babylonhx_lights_IShadowLight;
com_babylonhx_lights_IShadowLight.__name__ = ["com","babylonhx","lights","IShadowLight"];
com_babylonhx_lights_IShadowLight.prototype = {
	position: null
	,transformedPosition: null
	,name: null
	,computeTransformedPosition: null
	,getScene: null
	,setShadowProjectionMatrix: null
	,supportsVSM: null
	,needRefreshPerFrame: null
	,needCube: null
	,getShadowDirection: null
	,_shadowGenerator: null
	,__class__: com_babylonhx_lights_IShadowLight
};
var com_babylonhx_lights_DirectionalLight = $hx_exports.BABYLON.DirectionalLight = function(name,direction,scene) {
	this._orthoBottom = Infinity;
	this._orthoTop = -Infinity;
	this._orthoRight = -Infinity;
	this._orthoLeft = Infinity;
	this.autoUpdateExtends = true;
	this.shadowOrthoScale = 0.5;
	com_babylonhx_lights_Light.call(this,name,scene);
	this._type = "DIRLIGHT";
	this.direction = direction;
	this.position = new com_babylonhx_math_Vector3(direction.x * -1,direction.y * -1,direction.z * -1);
};
$hxClasses["com.babylonhx.lights.DirectionalLight"] = com_babylonhx_lights_DirectionalLight;
com_babylonhx_lights_DirectionalLight.__name__ = ["com","babylonhx","lights","DirectionalLight"];
com_babylonhx_lights_DirectionalLight.__interfaces__ = [com_babylonhx_lights_IShadowLight];
com_babylonhx_lights_DirectionalLight.__super__ = com_babylonhx_lights_Light;
com_babylonhx_lights_DirectionalLight.prototype = $extend(com_babylonhx_lights_Light.prototype,{
	position: null
	,direction: null
	,_transformedDirection: null
	,transformedPosition: null
	,_worldMatrix: null
	,shadowOrthoScale: null
	,autoUpdateExtends: null
	,_orthoLeft: null
	,_orthoRight: null
	,_orthoTop: null
	,_orthoBottom: null
	,getAbsolutePosition: function() {
		if(this.transformedPosition != null) return this.transformedPosition; else return this.position;
	}
	,setDirectionToTarget: function(target) {
		this.direction = com_babylonhx_math_Vector3.Normalize(target.subtract(this.position));
		return this.direction;
	}
	,setShadowProjectionMatrix: function(matrix,viewMatrix,renderList) {
		var activeCamera = this._scene.activeCamera;
		if(this.autoUpdateExtends || this._orthoLeft == Infinity) {
			var tempVector3 = new com_babylonhx_math_Vector3(0,0,0);
			this._orthoLeft = Infinity;
			this._orthoRight = -Infinity;
			this._orthoTop = -Infinity;
			this._orthoBottom = Infinity;
			var _g1 = 0;
			var _g = renderList.length;
			while(_g1 < _g) {
				var meshIndex = _g1++;
				var mesh = renderList[meshIndex];
				if(mesh == null) continue;
				var boundingInfo = mesh.getBoundingInfo();
				if(boundingInfo == null) continue;
				var boundingBox = boundingInfo.boundingBox;
				var _g3 = 0;
				var _g2 = boundingBox.vectorsWorld.length;
				while(_g3 < _g2) {
					var index = _g3++;
					com_babylonhx_math_Vector3.TransformCoordinatesToRef(boundingBox.vectorsWorld[index],viewMatrix,tempVector3);
					if(tempVector3.x < this._orthoLeft) this._orthoLeft = tempVector3.x;
					if(tempVector3.y < this._orthoBottom) this._orthoBottom = tempVector3.y;
					if(tempVector3.x > this._orthoRight) this._orthoRight = tempVector3.x;
					if(tempVector3.y > this._orthoTop) this._orthoTop = tempVector3.y;
				}
			}
		}
		var xOffset = this._orthoRight - this._orthoLeft;
		var yOffset = this._orthoTop - this._orthoBottom;
		com_babylonhx_math_Matrix.OrthoOffCenterLHToRef(this._orthoLeft - xOffset * this.shadowOrthoScale,this._orthoRight + xOffset * this.shadowOrthoScale,this._orthoBottom - yOffset * this.shadowOrthoScale,this._orthoTop + yOffset * this.shadowOrthoScale,-activeCamera.maxZ,activeCamera.maxZ,matrix);
	}
	,supportsVSM: function() {
		return true;
	}
	,needRefreshPerFrame: function() {
		return true;
	}
	,needCube: function() {
		return false;
	}
	,getShadowDirection: function(faceIndex) {
		return this.direction;
	}
	,computeTransformedPosition: function() {
		if(this.parent != null && ($_=this.parent,$bind($_,$_.getWorldMatrix)) != null) {
			if(this.transformedPosition == null) this.transformedPosition = new com_babylonhx_math_Vector3(0,0,0);
			com_babylonhx_math_Vector3.TransformCoordinatesToRef(this.position,this.parent.getWorldMatrix(),this.transformedPosition);
			return true;
		}
		return false;
	}
	,transferToEffect: function(effect,directionUniformName,extra_UNUSED_PARAM) {
		if(this.parent != null && ($_=this.parent,$bind($_,$_.getWorldMatrix)) != null) {
			if(this._transformedDirection == null) this._transformedDirection = new com_babylonhx_math_Vector3(0,0,0);
			com_babylonhx_math_Vector3.TransformNormalToRef(this.direction,this.parent.getWorldMatrix(),this._transformedDirection);
			effect._engine.setFloat4(effect._uniforms.get(directionUniformName),this._transformedDirection.x,this._transformedDirection.y,this._transformedDirection.z,1);
			effect;
			return;
		}
		effect._engine.setFloat4(effect._uniforms.get(directionUniformName),this.direction.x,this.direction.y,this.direction.z,1);
		effect;
	}
	,_getWorldMatrix: function() {
		if(this._worldMatrix == null) this._worldMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
		com_babylonhx_math_Matrix.TranslationToRef(this.position.x,this.position.y,this.position.z,this._worldMatrix);
		return this._worldMatrix;
	}
	,__class__: com_babylonhx_lights_DirectionalLight
});
var com_babylonhx_lights_HemisphericLight = $hx_exports.BABYLON.HemisphericLight = function(name,direction,scene) {
	this.groundColor = new com_babylonhx_math_Color3(0.0,0.0,0.0);
	com_babylonhx_lights_Light.call(this,name,scene);
	this._type = "HEMILIGHT";
	this.direction = direction;
};
$hxClasses["com.babylonhx.lights.HemisphericLight"] = com_babylonhx_lights_HemisphericLight;
com_babylonhx_lights_HemisphericLight.__name__ = ["com","babylonhx","lights","HemisphericLight"];
com_babylonhx_lights_HemisphericLight.normalizeDirection = null;
com_babylonhx_lights_HemisphericLight.__super__ = com_babylonhx_lights_Light;
com_babylonhx_lights_HemisphericLight.prototype = $extend(com_babylonhx_lights_Light.prototype,{
	groundColor: null
	,direction: null
	,_worldMatrix: null
	,setDirectionToTarget: function(target) {
		this.direction = com_babylonhx_math_Vector3.Normalize(target.subtract(new com_babylonhx_math_Vector3(0,0,0)));
		return this.direction;
	}
	,getShadowGenerator: function() {
		return null;
	}
	,transferToEffect: function(effect,directionUniformName,groundColorUniformName) {
		com_babylonhx_lights_HemisphericLight.normalizeDirection = com_babylonhx_math_Vector3.Normalize(this.direction);
		effect._engine.setFloat4(effect._uniforms.get(directionUniformName),com_babylonhx_lights_HemisphericLight.normalizeDirection.x,com_babylonhx_lights_HemisphericLight.normalizeDirection.y,com_babylonhx_lights_HemisphericLight.normalizeDirection.z,0);
		effect;
		effect.setColor3(groundColorUniformName,this.groundColor.scale(this.intensity));
	}
	,_getWorldMatrix: function() {
		if(this._worldMatrix == null) this._worldMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
		return this._worldMatrix;
	}
	,__class__: com_babylonhx_lights_HemisphericLight
});
var com_babylonhx_lights_PointLight = $hx_exports.BABYLON.PointLight = function(name,position,scene) {
	com_babylonhx_lights_Light.call(this,name,scene);
	this._type = "POINTLIGHT";
	this.position = position;
};
$hxClasses["com.babylonhx.lights.PointLight"] = com_babylonhx_lights_PointLight;
com_babylonhx_lights_PointLight.__name__ = ["com","babylonhx","lights","PointLight"];
com_babylonhx_lights_PointLight.__interfaces__ = [com_babylonhx_lights_IShadowLight];
com_babylonhx_lights_PointLight.__super__ = com_babylonhx_lights_Light;
com_babylonhx_lights_PointLight.prototype = $extend(com_babylonhx_lights_Light.prototype,{
	_worldMatrix: null
	,transformedPosition: null
	,position: null
	,getAbsolutePosition: function() {
		if(this.transformedPosition != null) return this.transformedPosition; else return this.position;
	}
	,computeTransformedPosition: function() {
		if(this.parent != null && this.parent.getWorldMatrix() != null) {
			if(this.transformedPosition == null) this.transformedPosition = new com_babylonhx_math_Vector3(0,0,0);
			com_babylonhx_math_Vector3.TransformCoordinatesToRef(this.position,this.parent.getWorldMatrix(),this.transformedPosition);
			return true;
		}
		return false;
	}
	,transferToEffect: function(effect,positionUniformName,UNUSED_PARAM) {
		if(this.parent != null && this.parent.getWorldMatrix() != null) {
			this.computeTransformedPosition();
			effect._engine.setFloat4(effect._uniforms.get(positionUniformName),this.transformedPosition.x,this.transformedPosition.y,this.transformedPosition.z,0);
			effect;
			return;
		}
		effect._engine.setFloat4(effect._uniforms.get(positionUniformName),this.position.x,this.position.y,this.position.z,0);
		effect;
	}
	,needCube: function() {
		return true;
	}
	,supportsVSM: function() {
		return false;
	}
	,needRefreshPerFrame: function() {
		return false;
	}
	,getShadowDirection: function(faceIndex) {
		if(faceIndex != null) switch(faceIndex) {
		case 0:
			return new com_babylonhx_math_Vector3(1,0,0);
		case 1:
			return new com_babylonhx_math_Vector3(-1,0,0);
		case 2:
			return new com_babylonhx_math_Vector3(0,-1,0);
		case 3:
			return new com_babylonhx_math_Vector3(0,1,0);
		case 4:
			return new com_babylonhx_math_Vector3(0,0,1);
		case 5:
			return new com_babylonhx_math_Vector3(0,0,-1);
		}
		return new com_babylonhx_math_Vector3(0,0,0);
	}
	,setShadowProjectionMatrix: function(matrix,viewMatrix,renderList) {
		var activeCamera = this._scene.activeCamera;
		com_babylonhx_math_Matrix.PerspectiveFovLHToRef(Math.PI / 2,1.0,activeCamera.minZ,activeCamera.maxZ,matrix);
	}
	,_getWorldMatrix: function() {
		if(this._worldMatrix == null) this._worldMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
		com_babylonhx_math_Matrix.TranslationToRef(this.position.x,this.position.y,this.position.z,this._worldMatrix);
		return this._worldMatrix;
	}
	,__class__: com_babylonhx_lights_PointLight
});
var com_babylonhx_lights_SpotLight = $hx_exports.BABYLON.SpotLight = function(name,position,direction,angle,exponent,scene) {
	com_babylonhx_lights_Light.call(this,name,scene);
	this._type = "SPOTLIGHT";
	this.position = position;
	this.direction = direction;
	this.angle = angle;
	this.exponent = exponent;
};
$hxClasses["com.babylonhx.lights.SpotLight"] = com_babylonhx_lights_SpotLight;
com_babylonhx_lights_SpotLight.__name__ = ["com","babylonhx","lights","SpotLight"];
com_babylonhx_lights_SpotLight.__interfaces__ = [com_babylonhx_lights_IShadowLight];
com_babylonhx_lights_SpotLight.__super__ = com_babylonhx_lights_Light;
com_babylonhx_lights_SpotLight.prototype = $extend(com_babylonhx_lights_Light.prototype,{
	transformedPosition: null
	,_transformedDirection: null
	,_worldMatrix: null
	,position: null
	,direction: null
	,angle: null
	,exponent: null
	,getAbsolutePosition: function() {
		if(this.transformedPosition != null) return this.transformedPosition; else return this.position;
	}
	,setShadowProjectionMatrix: function(matrix,viewMatrix,renderList) {
		var activeCamera = this._scene.activeCamera;
		com_babylonhx_math_Matrix.PerspectiveFovLHToRef(this.angle,1.0,activeCamera.minZ,activeCamera.maxZ,matrix);
	}
	,needCube: function() {
		return false;
	}
	,supportsVSM: function() {
		return true;
	}
	,needRefreshPerFrame: function() {
		return false;
	}
	,getShadowDirection: function(faceIndex) {
		return this.direction;
	}
	,setDirectionToTarget: function(target) {
		this.direction = com_babylonhx_math_Vector3.Normalize(target.subtract(this.position));
		return this.direction;
	}
	,computeTransformedPosition: function() {
		if(this.parent != null && this.parent.getWorldMatrix() != null) {
			if(this.transformedPosition == null) this.transformedPosition = new com_babylonhx_math_Vector3(0,0,0);
			com_babylonhx_math_Vector3.TransformCoordinatesToRef(this.position,this.parent.getWorldMatrix(),this.transformedPosition);
			return true;
		}
		return false;
	}
	,transferToEffect: function(effect,positionUniformName,directionUniformName) {
		var normalizeDirection = new com_babylonhx_math_Vector3(0,0,0);
		if(this.parent != null && this.parent.getWorldMatrix() != null) {
			if(this._transformedDirection == null) this._transformedDirection = new com_babylonhx_math_Vector3(0,0,0);
			this.computeTransformedPosition();
			var parentWorldMatrix = this.parent.getWorldMatrix();
			com_babylonhx_math_Vector3.TransformNormalToRef(this.direction,parentWorldMatrix,this._transformedDirection);
			effect._engine.setFloat4(effect._uniforms.get(positionUniformName),this.transformedPosition.x,this.transformedPosition.y,this.transformedPosition.z,this.exponent);
			effect;
			normalizeDirection = com_babylonhx_math_Vector3.Normalize(this._transformedDirection);
		} else {
			effect._engine.setFloat4(effect._uniforms.get(positionUniformName),this.position.x,this.position.y,this.position.z,this.exponent);
			effect;
			normalizeDirection = com_babylonhx_math_Vector3.Normalize(this.direction);
		}
		effect.setFloat4(directionUniformName,normalizeDirection.x,normalizeDirection.y,normalizeDirection.z,Math.cos(this.angle * 0.5));
	}
	,_getWorldMatrix: function() {
		if(this._worldMatrix == null) this._worldMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
		com_babylonhx_math_Matrix.TranslationToRef(this.position.x,this.position.y,this.position.z,this._worldMatrix);
		return this._worldMatrix;
	}
	,__class__: com_babylonhx_lights_SpotLight
});
var com_babylonhx_lights_shadows_ShadowGenerator = $hx_exports.BABYLON.ShadowGenerator = function(mapSize,light) {
	this._currentFaceIndexCache = 0;
	this._currentFaceIndex = 0;
	this._worldViewProjection = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._transformMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._projectionMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._viewMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._transparencyShadow = false;
	this._darkness = 0;
	this._lightDirection = new com_babylonhx_math_Vector3(0,0,0);
	this._bias = 0.00005;
	this._blurBoxOffset = 0.0;
	this.blurScale = 2;
	this._filter = com_babylonhx_lights_shadows_ShadowGenerator.FILTER_NONE;
	var _g = this;
	this._light = light;
	this._scene = light.getScene();
	this._mapSize = mapSize;
	light._shadowGenerator = this;
	this._shadowMap = new com_babylonhx_materials_textures_RenderTargetTexture(light.name + "_shadowMap",mapSize,this._scene,false,true,0,light.needCube());
	this._shadowMap.wrapU = 0;
	this._shadowMap.wrapV = 0;
	this._shadowMap.anisotropicFilteringLevel = 1;
	if(!light.needCube()) this._shadowMap.updateSamplingMode(1);
	this._shadowMap.renderParticles = false;
	this._shadowMap.onBeforeRender = function(faceIndex) {
		_g._currentFaceIndex = faceIndex;
	};
	this._shadowMap.onAfterUnbind = function() {
		if(!_g.get_useBlurVarianceShadowMap()) return;
		if(_g._shadowMap2 == null) {
			_g._shadowMap2 = new com_babylonhx_materials_textures_RenderTargetTexture(light.name + "_shadowMap",mapSize,_g._scene,false);
			_g._shadowMap2.wrapU = 0;
			_g._shadowMap2.wrapV = 0;
			_g._shadowMap2.updateSamplingMode(3);
			_g._downSamplePostprocess = new com_babylonhx_postprocess_PassPostProcess("downScale",1.0 / _g.blurScale,null,2,_g._scene._engine);
			_g._downSamplePostprocess.onApply = function(effect) {
				effect._engine.setTexture(HxOverrides.indexOf(effect._samplers,"textureSampler",0),_g._shadowMap);
			};
			_g.set_blurBoxOffset(1);
		}
		_g._scene.postProcessManager.directRender([_g._downSamplePostprocess,_g._boxBlurPostprocess],_g._shadowMap2.getInternalTexture());
	};
	var renderSubMesh = function(subMesh) {
		var mesh = subMesh._renderingMesh;
		var scene = _g._scene;
		var engine = scene._engine;
		engine.setState(subMesh.getMaterial().backFaceCulling,null,null,null);
		var batch = mesh._getInstancesRenderList(subMesh._id);
		if(batch.mustReturn) return;
		var hardwareInstancedRendering = engine.getCaps().instancedArrays != null && batch.visibleInstances[subMesh._id] != null;
		if(_g.isReady(subMesh,hardwareInstancedRendering)) {
			engine.enableEffect(_g._effect);
			mesh._bind(subMesh,_g._effect,0);
			var material = subMesh.getMaterial();
			_g._effect.setMatrix("viewProjection",_g.getTransformMatrix());
			if(material != null && material.needAlphaTesting()) {
				var alphaTexture = material.getAlphaTestTexture();
				_g._effect.setTexture("diffuseSampler",alphaTexture);
				_g._effect.setMatrix("diffuseMatrix",alphaTexture.getTextureMatrix());
			}
			if(mesh.get_useBones() && mesh.computeBonesUsingShaders) _g._effect.setMatrices("mBones",mesh.get_skeleton().getTransformMatrices());
			mesh._processRendering(subMesh,_g._effect,0,batch,hardwareInstancedRendering,function(isInstance,world) {
				_g._effect.setMatrix("world",world);
			});
		} else _g._shadowMap.resetRefreshCounter();
	};
	this._shadowMap.customRenderFunction = function(opaqueSubMeshes,alphaTestSubMeshes,transparentSubMeshes) {
		var _g1 = 0;
		var _g2 = opaqueSubMeshes.length;
		while(_g1 < _g2) {
			var index = _g1++;
			renderSubMesh(opaqueSubMeshes.data[index]);
		}
		var _g11 = 0;
		var _g3 = alphaTestSubMeshes.length;
		while(_g11 < _g3) {
			var index1 = _g11++;
			renderSubMesh(alphaTestSubMeshes.data[index1]);
		}
		if(_g._transparencyShadow) {
			var _g21 = 0;
			var _g12 = transparentSubMeshes.length;
			while(_g21 < _g12) {
				var index2 = _g21++;
				renderSubMesh(transparentSubMeshes.data[index2]);
			}
		}
	};
	this._shadowMap.onClear = function(engine1) {
		if(_g.get_useBlurVarianceShadowMap() || _g.get_useVarianceShadowMap()) engine1.clear(new com_babylonhx_math_Color4(0,0,0,0),true,true); else engine1.clear(new com_babylonhx_math_Color4(1.0,1.0,1.0,1.0),true,true);
	};
};
$hxClasses["com.babylonhx.lights.shadows.ShadowGenerator"] = com_babylonhx_lights_shadows_ShadowGenerator;
com_babylonhx_lights_shadows_ShadowGenerator.__name__ = ["com","babylonhx","lights","shadows","ShadowGenerator"];
com_babylonhx_lights_shadows_ShadowGenerator.prototype = {
	_filter: null
	,blurScale: null
	,_blurBoxOffset: null
	,_bias: null
	,_lightDirection: null
	,get_bias: function() {
		return this._bias;
	}
	,set_bias: function(bias) {
		this._bias = bias;
		return bias;
	}
	,get_blurBoxOffset: function() {
		return this._blurBoxOffset;
	}
	,set_blurBoxOffset: function(value) {
		var _g = this;
		if(this._blurBoxOffset == value) return value;
		this._blurBoxOffset = value;
		if(this._boxBlurPostprocess != null) this._boxBlurPostprocess.dispose();
		this._boxBlurPostprocess = new com_babylonhx_postprocess_PostProcess("DepthBoxBlur","depthBoxBlur",["screenSize","boxOffset"],[],1.0 / this.blurScale,null,2,this._scene._engine,false,"#define OFFSET " + value);
		this._boxBlurPostprocess.onApply = function(effect) {
			effect._engine.setFloat2(effect._uniforms.get("screenSize"),_g._mapSize / _g.blurScale,_g._mapSize / _g.blurScale);
			effect;
		};
		return value;
	}
	,get_filter: function() {
		return this._filter;
	}
	,set_filter: function(value) {
		if(this._filter == value) return value;
		this._filter = value;
		if(this.get_useVarianceShadowMap() || this.get_useBlurVarianceShadowMap() || this.get_usePoissonSampling()) {
			this._shadowMap.anisotropicFilteringLevel = 16;
			this._shadowMap.updateSamplingMode(3);
		} else {
			this._shadowMap.anisotropicFilteringLevel = 1;
			this._shadowMap.updateSamplingMode(1);
		}
		return value;
	}
	,get_useVarianceShadowMap: function() {
		return this.get_filter() == com_babylonhx_lights_shadows_ShadowGenerator.FILTER_VARIANCESHADOWMAP && this._light.supportsVSM();
	}
	,set_useVarianceShadowMap: function(value) {
		this.set_filter(value?com_babylonhx_lights_shadows_ShadowGenerator.FILTER_VARIANCESHADOWMAP:com_babylonhx_lights_shadows_ShadowGenerator.FILTER_NONE);
		return value;
	}
	,get_usePoissonSampling: function() {
		return this.get_filter() == com_babylonhx_lights_shadows_ShadowGenerator.FILTER_POISSONSAMPLING || !this._light.supportsVSM() && (this.get_filter() == com_babylonhx_lights_shadows_ShadowGenerator.FILTER_VARIANCESHADOWMAP || this.get_filter() == com_babylonhx_lights_shadows_ShadowGenerator.FILTER_BLURVARIANCESHADOWMAP);
	}
	,set_usePoissonSampling: function(value) {
		this.set_filter(value?com_babylonhx_lights_shadows_ShadowGenerator.FILTER_POISSONSAMPLING:com_babylonhx_lights_shadows_ShadowGenerator.FILTER_NONE);
		return value;
	}
	,get_useBlurVarianceShadowMap: function() {
		return this.get_filter() == com_babylonhx_lights_shadows_ShadowGenerator.FILTER_BLURVARIANCESHADOWMAP && this._light.supportsVSM();
	}
	,set_useBlurVarianceShadowMap: function(value) {
		this.set_filter(value?com_babylonhx_lights_shadows_ShadowGenerator.FILTER_BLURVARIANCESHADOWMAP:com_babylonhx_lights_shadows_ShadowGenerator.FILTER_NONE);
		return value;
	}
	,_light: null
	,_scene: null
	,_shadowMap: null
	,_shadowMap2: null
	,_darkness: null
	,_transparencyShadow: null
	,_effect: null
	,_viewMatrix: null
	,_projectionMatrix: null
	,_transformMatrix: null
	,_worldViewProjection: null
	,_cachedPosition: null
	,_cachedDirection: null
	,_cachedDefines: null
	,_currentRenderID: null
	,_downSamplePostprocess: null
	,_boxBlurPostprocess: null
	,_mapSize: null
	,_currentFaceIndex: null
	,_currentFaceIndexCache: null
	,isReady: function(subMesh,useInstances) {
		var defines = [];
		if(this.get_useVarianceShadowMap() || this.get_useBlurVarianceShadowMap()) defines.push("#define VSM");
		var attribs = ["position"];
		var mesh = subMesh._mesh;
		var material = subMesh.getMaterial();
		if(material != null && material.needAlphaTesting()) {
			defines.push("#define ALPHATEST");
			if(mesh.isVerticesDataPresent("uv")) {
				attribs.push("uv");
				defines.push("#define UV1");
			}
			if(mesh.isVerticesDataPresent("uv2")) {
				attribs.push("uv2");
				defines.push("#define UV2");
			}
		}
		if(mesh.get_useBones() && mesh.computeBonesUsingShaders) {
			attribs.push("matricesIndices");
			attribs.push("matricesWeights");
			if(mesh.numBoneInfluencers > 4) {
				attribs.push("matricesIndicesExtra");
				attribs.push("matricesWeightsExtra");
			}
			defines.push("#define NUM_BONE_INFLUENCERS " + mesh.numBoneInfluencers);
			defines.push("#define BonesPerMesh " + (mesh.get_skeleton().bones.length + 1));
		} else defines.push("#define NUM_BONE_INFLUENCERS 0");
		if(useInstances) {
			defines.push("#define INSTANCES");
			attribs.push("world0");
			attribs.push("world1");
			attribs.push("world2");
			attribs.push("world3");
		}
		var join = defines.join("\n");
		if(this._cachedDefines != join) {
			this._cachedDefines = join;
			this._effect = this._scene._engine.createEffect("shadowMap",attribs,["world","mBones","viewProjection","diffuseMatrix"],["diffuseSampler"],join);
		}
		return this._effect._isReady;
	}
	,getShadowMap: function() {
		return this._shadowMap;
	}
	,getShadowMapForRendering: function() {
		if(this._shadowMap2 != null) return this._shadowMap2;
		return this._shadowMap;
	}
	,getLight: function() {
		return this._light;
	}
	,getTransformMatrix: function() {
		var scene = this._scene;
		if(this._currentRenderID == scene._renderId && this._currentFaceIndexCache == this._currentFaceIndex) return this._transformMatrix;
		this._currentRenderID = scene._renderId;
		var lightPosition = this._light.position;
		com_babylonhx_math_Vector3.NormalizeToRef(this._light.getShadowDirection(this._currentFaceIndex),this._lightDirection);
		if(Math.abs(com_babylonhx_math_Vector3.Dot(this._lightDirection,new com_babylonhx_math_Vector3(0,1.0,0))) == 1.0) this._lightDirection.z = 0.0000000000001;
		if(this._light.computeTransformedPosition()) lightPosition = this._light.transformedPosition;
		if(this._light.needRefreshPerFrame() || this._cachedPosition == null || this._cachedDirection == null || !lightPosition.equals(this._cachedPosition) || !this._lightDirection.equals(this._cachedDirection)) {
			this._cachedPosition = new com_babylonhx_math_Vector3(lightPosition.x,lightPosition.y,lightPosition.z);
			this._cachedDirection = this._lightDirection.clone();
			com_babylonhx_math_Matrix.LookAtLHToRef(lightPosition,this._light.position.add(this._lightDirection),new com_babylonhx_math_Vector3(0,1.0,0),this._viewMatrix);
			this._light.setShadowProjectionMatrix(this._projectionMatrix,this._viewMatrix,this.getShadowMap().renderList);
			this._viewMatrix.multiplyToRef(this._projectionMatrix,this._transformMatrix);
		}
		return this._transformMatrix;
	}
	,getDarkness: function() {
		return this._darkness;
	}
	,setDarkness: function(darkness) {
		if(darkness >= 1.0) this._darkness = 1.0; else if(darkness <= 0.0) this._darkness = 0.0; else this._darkness = darkness;
	}
	,setTransparencyShadow: function(hasShadow) {
		this._transparencyShadow = hasShadow;
	}
	,_packHalf: function(depth) {
		var scale = depth * 255.0;
		var fract = scale - Math.floor(scale);
		return new com_babylonhx_math_Vector2(depth - fract / 255.0,fract);
	}
	,dispose: function() {
		this._shadowMap.dispose();
		if(this._shadowMap2 != null) this._shadowMap2.dispose();
		if(this._downSamplePostprocess != null) this._downSamplePostprocess.dispose();
		if(this._boxBlurPostprocess != null) this._boxBlurPostprocess.dispose();
	}
	,__class__: com_babylonhx_lights_shadows_ShadowGenerator
	,__properties__: {set_useBlurVarianceShadowMap:"set_useBlurVarianceShadowMap",get_useBlurVarianceShadowMap:"get_useBlurVarianceShadowMap",set_usePoissonSampling:"set_usePoissonSampling",get_usePoissonSampling:"get_usePoissonSampling",set_useVarianceShadowMap:"set_useVarianceShadowMap",get_useVarianceShadowMap:"get_useVarianceShadowMap",set_filter:"set_filter",get_filter:"get_filter",set_blurBoxOffset:"set_blurBoxOffset",get_blurBoxOffset:"get_blurBoxOffset",set_bias:"set_bias",get_bias:"get_bias"}
};
var com_babylonhx_loading_SceneLoader = $hx_exports.BABYLON.SceneLoader = function() { };
$hxClasses["com.babylonhx.loading.SceneLoader"] = com_babylonhx_loading_SceneLoader;
com_babylonhx_loading_SceneLoader.__name__ = ["com","babylonhx","loading","SceneLoader"];
com_babylonhx_loading_SceneLoader._getPluginForFilename = function(sceneFilename) {
	var dotPosition = sceneFilename.lastIndexOf(".");
	var queryStringPosition = sceneFilename.indexOf("?");
	if(queryStringPosition == -1) queryStringPosition = sceneFilename.length;
	var extension = sceneFilename.substring(dotPosition,queryStringPosition).toLowerCase();
	if(extension == ".babylon") return com_babylonhx_loading_plugins_BabylonFileLoader.get_plugin();
	var _g1 = 0;
	var _g = com_babylonhx_loading_SceneLoader._registeredPlugins.length;
	while(_g1 < _g) {
		var index = _g1++;
		var plugin = com_babylonhx_loading_SceneLoader._registeredPlugins[index];
		if(plugin.extensions.indexOf(extension) != -1) return plugin;
	}
	return com_babylonhx_loading_SceneLoader._registeredPlugins[com_babylonhx_loading_SceneLoader._registeredPlugins.length - 1];
};
com_babylonhx_loading_SceneLoader.RegisterPlugin = function(plugin) {
	plugin.extensions = plugin.extensions.toLowerCase();
	com_babylonhx_loading_SceneLoader._registeredPlugins.push(plugin);
};
com_babylonhx_loading_SceneLoader.ImportMesh = function(meshesNames,rootUrl,sceneFilename,scene,onsuccess,progressCallBack,onerror) {
	var manifestChecked = function() {
		var plugin = com_babylonhx_loading_SceneLoader._getPluginForFilename(sceneFilename);
		if(plugin == null) {
			var dotPosition = sceneFilename.lastIndexOf(".");
			var queryStringPosition = sceneFilename.indexOf("?");
			var extension = sceneFilename.substring(dotPosition,queryStringPosition).toLowerCase();
			haxe_Log.trace("Error: " + "No plugin loaded for '" + extension + "' file type !",{ fileName : "SceneLoader.hx", lineNumber : 64, className : "com.babylonhx.loading.SceneLoader", methodName : "ImportMesh"});
			throw new js__$Boot_HaxeError("No plugin loaded for '" + extension + "' file type !");
		}
		var importMeshFromData = function(data) {
			var meshes = [];
			var particleSystems = [];
			var skeletons = [];
			try {
				if(!plugin.importMesh(meshesNames,scene,data,rootUrl,meshes,particleSystems,skeletons)) {
					if(onerror != null) onerror(scene,"unable to load the scene");
					return;
				}
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				haxe_Log.trace(e,{ fileName : "SceneLoader.hx", lineNumber : 82, className : "com.babylonhx.loading.SceneLoader", methodName : "ImportMesh"});
				if(onerror != null) onerror(scene,e);
				return;
			}
			if(onsuccess != null) {
				scene.importedMeshesFiles.push(rootUrl + sceneFilename);
				onsuccess(meshes,particleSystems,skeletons);
			}
		};
		if(HxOverrides.substr(sceneFilename,0,5) == "data:") {
			importMeshFromData(HxOverrides.substr(sceneFilename,5,null));
			return;
		}
		com_babylonhx_tools_Tools.LoadFile(rootUrl + sceneFilename,function(data1) {
			var meshes1 = [];
			var particleSystems1 = [];
			var skeletons1 = [];
			try {
				if(!plugin.importMesh(meshesNames,scene,data1,rootUrl,meshes1,particleSystems1,skeletons1)) {
					if(onerror != null) onerror(scene,"unable to load the scene");
					return;
				}
			} catch( e1 ) {
				haxe_CallStack.lastException = e1;
				if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
				haxe_Log.trace(e1,{ fileName : "SceneLoader.hx", lineNumber : 116, className : "com.babylonhx.loading.SceneLoader", methodName : "ImportMesh"});
				if(onerror != null) onerror(scene,e1);
				return;
			}
			if(onsuccess != null) {
				scene.importedMeshesFiles.push(rootUrl + sceneFilename);
				onsuccess(meshes1,particleSystems1,skeletons1);
			}
		});
	};
	manifestChecked();
};
com_babylonhx_loading_SceneLoader.Load = function(rootUrl,sceneFilename,engine,onsuccess,progressCallBack,onerror) {
	com_babylonhx_loading_SceneLoader.Append(rootUrl,sceneFilename,new com_babylonhx_Scene(engine),onsuccess,progressCallBack,onerror);
};
com_babylonhx_loading_SceneLoader.Append = function(rootUrl,sceneFilename,scene,onsuccess,progressCallBack,onerror) {
	var plugin = com_babylonhx_loading_SceneLoader._getPluginForFilename(sceneFilename.name != null?sceneFilename.name:sceneFilename);
	var loadSceneFromData = function(data) {
		if(!plugin.load(scene,data,rootUrl)) {
			if(onerror != null) onerror(scene);
			return;
		}
		if(onsuccess != null) onsuccess(scene);
	};
	com_babylonhx_tools_Tools.LoadFile(rootUrl + Std.string(sceneFilename),loadSceneFromData);
	if(sceneFilename.substr(0,5) == "data:") {
		loadSceneFromData(sceneFilename.substr(5));
		return;
	}
};
var com_babylonhx_mesh_IGetSetVerticesData = $hx_exports.BABYLON.IGetSetVerticesData = function() { };
$hxClasses["com.babylonhx.mesh.IGetSetVerticesData"] = com_babylonhx_mesh_IGetSetVerticesData;
com_babylonhx_mesh_IGetSetVerticesData.__name__ = ["com","babylonhx","mesh","IGetSetVerticesData"];
com_babylonhx_mesh_IGetSetVerticesData.prototype = {
	isVerticesDataPresent: null
	,getVerticesData: null
	,getIndices: null
	,setVerticesData: null
	,updateVerticesData: null
	,setIndices: null
	,__class__: com_babylonhx_mesh_IGetSetVerticesData
};
var com_babylonhx_mesh_Geometry = $hx_exports.BABYLON.Geometry = function(id,scene,vertexData,updatable,mesh) {
	if(updatable == null) updatable = false;
	this._delayInfo = [];
	this._isDisposed = false;
	this._totalVertices = 0;
	this.delayLoadState = 0;
	this.id = id;
	this._engine = scene._engine;
	this._meshes = [];
	this._scene = scene;
	this._vertexBuffers = new haxe_ds_StringMap();
	this._indices = [];
	if(vertexData != null) this.setAllVerticesData(vertexData,updatable); else this._totalVertices = 0;
	if(mesh != null) {
		this.applyToMesh(mesh);
		mesh.computeWorldMatrix(true);
	}
};
$hxClasses["com.babylonhx.mesh.Geometry"] = com_babylonhx_mesh_Geometry;
com_babylonhx_mesh_Geometry.__name__ = ["com","babylonhx","mesh","Geometry"];
com_babylonhx_mesh_Geometry.__interfaces__ = [com_babylonhx_mesh_IGetSetVerticesData];
com_babylonhx_mesh_Geometry.ExtractFromMesh = function(mesh,id) {
	var geometry = mesh._geometry;
	if(geometry == null) return null;
	return geometry.copy(id);
};
com_babylonhx_mesh_Geometry.RandomId = function(size) {
	if(size == null) size = 32;
	var nchars = com_babylonhx_mesh_Geometry.UID_CHARS.length;
	var uid = new StringBuf();
	var _g = 0;
	while(_g < size) {
		var i = _g++;
		uid.add(com_babylonhx_mesh_Geometry.UID_CHARS.charAt(Std["int"](Math.random() * nchars)));
	}
	return uid.b;
};
com_babylonhx_mesh_Geometry.prototype = {
	id: null
	,delayLoadState: null
	,delayLoadingFile: null
	,onGeometryUpdated: null
	,_scene: null
	,_engine: null
	,_meshes: null
	,_totalVertices: null
	,_indices: null
	,_vertexBuffers: null
	,_isDisposed: null
	,_extend: null
	,_delayInfo: null
	,_indexBuffer: null
	,_boundingInfo: null
	,_delayLoadingFunction: null
	,get_extend: function() {
		return this._extend;
	}
	,getScene: function() {
		return this._scene;
	}
	,getEngine: function() {
		return this._engine;
	}
	,isReady: function() {
		return this.delayLoadState == 1 || this.delayLoadState == 0;
	}
	,setAllVerticesData: function(vertexData,updatable) {
		if(updatable == null) updatable = false;
		vertexData.applyToGeometry(this,updatable);
		this.notifyUpdate();
	}
	,setVerticesData: function(kind,data,updatable,stride) {
		if(updatable == null) updatable = false;
		if(this._vertexBuffers.exists(kind)) this._vertexBuffers.get(kind).dispose();
		var value = new com_babylonhx_mesh_VertexBuffer(this._engine,data,kind,updatable,this._meshes.length == 0,stride);
		this._vertexBuffers.set(kind,value);
		if(kind == "position") {
			stride = this._vertexBuffers.get(kind).getStrideSize();
			this._totalVertices = data.length / stride;
			this._extend = com_babylonhx_tools_Tools.ExtractMinAndMax(data,0,this._totalVertices);
			var meshes = this._meshes;
			var numOfMeshes = meshes.length;
			var _g = 0;
			while(_g < numOfMeshes) {
				var index = _g++;
				var mesh = meshes[index];
				mesh._positions = null;
				mesh._boundingInfo = new com_babylonhx_culling_BoundingInfo(this._extend.minimum,this._extend.maximum);
				mesh._createGlobalSubMesh();
				mesh.computeWorldMatrix(true);
			}
		}
		this.notifyUpdate();
	}
	,updateVerticesDataDirectly: function(kind,data,offset) {
		var vertexBuffer = this.getVertexBuffer(kind);
		if(vertexBuffer != null) {
			vertexBuffer.updateDirectly(data,offset);
			this.notifyUpdate();
		}
	}
	,updateVerticesData: function(kind,data,updateExtends,makeItUnique) {
		if(makeItUnique == null) makeItUnique = false;
		if(updateExtends == null) updateExtends = false;
		var vertexBuffer = this.getVertexBuffer(kind);
		if(vertexBuffer == null) return;
		vertexBuffer.create(data);
		if(kind == "position") {
			var extend = null;
			var stride = vertexBuffer._strideSize;
			this._totalVertices = data.length / stride;
			if(updateExtends) this._extend = com_babylonhx_tools_Tools.ExtractMinAndMax(data,0,this._totalVertices);
			var meshes = this._meshes;
			var numOfMeshes = meshes.length;
			var _g = 0;
			while(_g < numOfMeshes) {
				var index = _g++;
				var mesh = meshes[index];
				mesh._positions = null;
				if(updateExtends) {
					mesh._boundingInfo = new com_babylonhx_culling_BoundingInfo(this._extend.minimum,this._extend.maximum);
					var _g2 = 0;
					var _g1 = mesh.subMeshes.length;
					while(_g2 < _g1) {
						var subIndex = _g2++;
						var subMesh = mesh.subMeshes[subIndex];
						subMesh.refreshBoundingInfo();
					}
				}
			}
		}
		this.notifyUpdate();
	}
	,getTotalVertices: function() {
		if(!(this.delayLoadState == 1 || this.delayLoadState == 0)) return 0;
		return this._totalVertices;
	}
	,getVerticesData: function(kind,copyWhenShared) {
		if(copyWhenShared == null) copyWhenShared = false;
		var vertexBuffer = this.getVertexBuffer(kind);
		if(vertexBuffer == null) return null;
		var orig = vertexBuffer._data;
		if(!copyWhenShared || this._meshes.length == 1) return orig; else {
			var len = orig.length;
			var copy = [];
			var _g = 0;
			while(_g < len) {
				var i = _g++;
				copy.push(orig[i]);
			}
			return copy;
		}
	}
	,getVertexBuffer: function(kind) {
		if(!(this.delayLoadState == 1 || this.delayLoadState == 0)) return null;
		return this._vertexBuffers.get(kind);
	}
	,getVertexBuffers: function() {
		if(!(this.delayLoadState == 1 || this.delayLoadState == 0)) return null;
		return this._vertexBuffers;
	}
	,isVerticesDataPresent: function(kind) {
		if(this._vertexBuffers == null) {
			if(this._delayInfo != null) return HxOverrides.indexOf(this._delayInfo,kind,0) != -1;
			return false;
		}
		return this._vertexBuffers.get(kind) != null;
	}
	,getVerticesDataKinds: function() {
		var result = [];
		if(this._vertexBuffers == null && this._delayInfo != null) {
			var _g = 0;
			var _g1 = this._delayInfo;
			while(_g < _g1.length) {
				var kind = _g1[_g];
				++_g;
				result.push(kind);
			}
		} else {
			var $it0 = this._vertexBuffers.keys();
			while( $it0.hasNext() ) {
				var kind1 = $it0.next();
				result.push(kind1);
			}
		}
		return result;
	}
	,setIndices: function(indices,totalVertices) {
		if(totalVertices == null) totalVertices = -1;
		if(this._indexBuffer != null) this._engine._releaseBuffer(this._indexBuffer);
		this._indices = indices;
		if(this._meshes.length != 0 && this._indices != null) this._indexBuffer = this._engine.createIndexBuffer(this._indices);
		if(totalVertices != -1) this._totalVertices = totalVertices;
		var meshes = this._meshes;
		var numOfMeshes = meshes.length;
		var _g = 0;
		while(_g < numOfMeshes) {
			var index = _g++;
			meshes[index]._createGlobalSubMesh();
		}
		this.notifyUpdate();
	}
	,getTotalIndices: function() {
		if(!(this.delayLoadState == 1 || this.delayLoadState == 0)) return 0;
		return this._indices.length;
	}
	,getIndices: function(copyWhenShared) {
		if(copyWhenShared == null) copyWhenShared = false;
		if(!(this.delayLoadState == 1 || this.delayLoadState == 0)) return null;
		var orig = this._indices;
		if(!copyWhenShared || this._meshes.length == 1) return orig; else {
			var len = orig.length;
			var copy = [];
			var _g = 0;
			while(_g < len) {
				var i = _g++;
				copy.push(orig[i]);
			}
			return copy;
		}
	}
	,getIndexBuffer: function() {
		if(!(this.delayLoadState == 1 || this.delayLoadState == 0)) return null;
		return this._indexBuffer;
	}
	,releaseForMesh: function(mesh,shouldDispose) {
		if(shouldDispose == null) shouldDispose = false;
		var meshes = this._meshes;
		var index = HxOverrides.indexOf(meshes,mesh,0);
		if(index == -1) return;
		var $it0 = this._vertexBuffers.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			this._vertexBuffers.get(key).dispose();
		}
		if(this._indexBuffer != null && this._engine._releaseBuffer(this._indexBuffer)) this._indexBuffer = null;
		meshes.splice(index,1);
		mesh._geometry = null;
		if(meshes.length == 0 && shouldDispose) this.dispose();
	}
	,applyToMesh: function(mesh) {
		if(mesh._geometry == this) return;
		var previousGeometry = mesh._geometry;
		if(previousGeometry != null) previousGeometry.releaseForMesh(mesh);
		var meshes = this._meshes;
		mesh._geometry = this;
		this._scene.pushGeometry(this);
		meshes.push(mesh);
		if(this.delayLoadState == 1 || this.delayLoadState == 0) this._applyToMesh(mesh); else mesh._boundingInfo = this._boundingInfo;
	}
	,_applyToMesh: function(mesh) {
		var numOfMeshes = this._meshes.length;
		var $it0 = this._vertexBuffers.keys();
		while( $it0.hasNext() ) {
			var kind = $it0.next();
			if(numOfMeshes == 1) this._vertexBuffers.get(kind).create();
			this._vertexBuffers.get(kind)._buffer.references = numOfMeshes;
			if(kind == "position") {
				mesh._positions = null;
				if(this._extend == null) this._extend = com_babylonhx_tools_Tools.ExtractMinAndMax(this._vertexBuffers.get(kind).getData(),0,this._totalVertices);
				mesh._boundingInfo = new com_babylonhx_culling_BoundingInfo(this._extend.minimum,this._extend.maximum);
				mesh._createGlobalSubMesh();
				if(mesh._boundingInfo == null) mesh._boundingInfo = new com_babylonhx_culling_BoundingInfo(mesh.get_absolutePosition(),mesh.get_absolutePosition()); else mesh._boundingInfo = mesh._boundingInfo;
				mesh._boundingInfo._update(mesh.get_worldMatrixFromCache());
				mesh._updateSubMeshesBoundingInfo(mesh.get_worldMatrixFromCache());
			}
		}
		if(numOfMeshes == 1 && this._indices != null) this._indexBuffer = this._engine.createIndexBuffer(this._indices);
		if(this._indexBuffer != null) this._indexBuffer.references = numOfMeshes;
	}
	,notifyUpdate: function(kind) {
		if(this.onGeometryUpdated != null) this.onGeometryUpdated(this,kind);
	}
	,load: function(scene,onLoaded) {
		if(this.delayLoadState == 2) return;
		if(this.delayLoadState == 1 || this.delayLoadState == 0) {
			if(onLoaded != null) onLoaded();
			return;
		}
		this.delayLoadState = 2;
		scene._addPendingData(this);
	}
	,isDisposed: function() {
		return this._isDisposed;
	}
	,dispose: function() {
		var meshes = this._meshes;
		var numOfMeshes = meshes.length;
		var _g = 0;
		while(_g < numOfMeshes) {
			var index = _g++;
			this.releaseForMesh(meshes[index]);
		}
		this._meshes = [];
		var $it0 = this._vertexBuffers.keys();
		while( $it0.hasNext() ) {
			var kind = $it0.next();
			this._vertexBuffers.get(kind).dispose();
		}
		this._vertexBuffers = new haxe_ds_StringMap();
		this._totalVertices = 0;
		if(this._indexBuffer != null) this._engine._releaseBuffer(this._indexBuffer);
		this._indexBuffer = null;
		this._indices = [];
		this.delayLoadState = 0;
		this.delayLoadingFile = null;
		this._delayLoadingFunction = null;
		this._delayInfo = [];
		this._boundingInfo = null;
		this._scene.removeGeometry(this);
		this._isDisposed = true;
	}
	,copy: function(id) {
		var vertexData = new com_babylonhx_mesh_VertexData();
		vertexData.indices = [];
		var indices = this.getIndices();
		var _g1 = 0;
		var _g = indices.length;
		while(_g1 < _g) {
			var index = _g1++;
			vertexData.indices.push(indices[index]);
		}
		var updatable = false;
		var stopChecking = false;
		var $it0 = this._vertexBuffers.keys();
		while( $it0.hasNext() ) {
			var kind = $it0.next();
			vertexData.set((function($this) {
				var $r;
				var _this = $this.getVerticesData(kind);
				$r = _this.slice();
				return $r;
			}(this)),kind);
			if(!stopChecking) {
				updatable = this.getVertexBuffer(kind).isUpdatable();
				stopChecking = !updatable;
			}
		}
		var geometry = new com_babylonhx_mesh_Geometry(id,this._scene,vertexData,updatable,null);
		geometry.delayLoadState = this.delayLoadState;
		geometry.delayLoadingFile = this.delayLoadingFile;
		geometry._delayLoadingFunction = this._delayLoadingFunction;
		var _g2 = 0;
		var _g11 = this._delayInfo;
		while(_g2 < _g11.length) {
			var kind1 = _g11[_g2];
			++_g2;
			if(geometry._delayInfo != null) geometry._delayInfo = geometry._delayInfo; else geometry._delayInfo = [];
			geometry._delayInfo.push(kind1);
		}
		geometry._boundingInfo = new com_babylonhx_culling_BoundingInfo(this._extend.minimum,this._extend.maximum);
		return geometry;
	}
	,__class__: com_babylonhx_mesh_Geometry
	,__properties__: {get_extend:"get_extend"}
};
var com_babylonhx_mesh_primitives__$Primitive = $hx_exports.BABYLON._Primitive = function(id,scene,vertexData,canBeRegenerated,mesh) {
	if(canBeRegenerated == null) canBeRegenerated = false;
	this._beingRegenerated = true;
	this._canBeRegenerated = canBeRegenerated;
	com_babylonhx_mesh_Geometry.call(this,id,scene,vertexData,false,mesh);
	this._beingRegenerated = false;
};
$hxClasses["com.babylonhx.mesh.primitives._Primitive"] = com_babylonhx_mesh_primitives__$Primitive;
com_babylonhx_mesh_primitives__$Primitive.__name__ = ["com","babylonhx","mesh","primitives","_Primitive"];
com_babylonhx_mesh_primitives__$Primitive.__super__ = com_babylonhx_mesh_Geometry;
com_babylonhx_mesh_primitives__$Primitive.prototype = $extend(com_babylonhx_mesh_Geometry.prototype,{
	_beingRegenerated: null
	,_canBeRegenerated: null
	,canBeRegenerated: function() {
		return this._canBeRegenerated;
	}
	,regenerate: function() {
		if(!this._canBeRegenerated) return;
		this._beingRegenerated = true;
		this.setAllVerticesData(this._regenerateVertexData(),false);
		this._beingRegenerated = false;
	}
	,asNewGeometry: function(id) {
		return com_babylonhx_mesh_Geometry.prototype.copy.call(this,id);
	}
	,setAllVerticesData: function(vertexData,updatable) {
		if(updatable == null) updatable = false;
		if(!this._beingRegenerated) return;
		com_babylonhx_mesh_Geometry.prototype.setAllVerticesData.call(this,vertexData,false);
	}
	,setVerticesData: function(kind,data,updatable,stride) {
		if(updatable == null) updatable = false;
		if(!this._beingRegenerated) return;
		com_babylonhx_mesh_Geometry.prototype.setVerticesData.call(this,kind,data,false,stride);
	}
	,_regenerateVertexData: function() {
		throw new js__$Boot_HaxeError("Abstract method");
	}
	,copy: function(id) {
		throw new js__$Boot_HaxeError("Must be overriden in sub-classes.");
	}
	,__class__: com_babylonhx_mesh_primitives__$Primitive
});
var com_babylonhx_mesh_primitives_Box = $hx_exports.BABYLON.Box = function(id,scene,size,canBeRegenerated,mesh,side) {
	if(side == null) side = 0;
	this.size = size;
	this.side = side;
	com_babylonhx_mesh_primitives__$Primitive.call(this,id,scene,this._regenerateVertexData(),canBeRegenerated,mesh);
};
$hxClasses["com.babylonhx.mesh.primitives.Box"] = com_babylonhx_mesh_primitives_Box;
com_babylonhx_mesh_primitives_Box.__name__ = ["com","babylonhx","mesh","primitives","Box"];
com_babylonhx_mesh_primitives_Box.__super__ = com_babylonhx_mesh_primitives__$Primitive;
com_babylonhx_mesh_primitives_Box.prototype = $extend(com_babylonhx_mesh_primitives__$Primitive.prototype,{
	size: null
	,side: null
	,_regenerateVertexData: function() {
		return com_babylonhx_mesh_VertexData.CreateBox({ size : this.size, sideOrientation : this.side});
	}
	,copy: function(id) {
		return new com_babylonhx_mesh_primitives_Box(id,this._scene,this.size,this.canBeRegenerated(),null,this.side);
	}
	,__class__: com_babylonhx_mesh_primitives_Box
});
var com_babylonhx_tools_Tags = $hx_exports.BABYLON.Tags = function() { };
$hxClasses["com.babylonhx.tools.Tags"] = com_babylonhx_tools_Tags;
com_babylonhx_tools_Tags.__name__ = ["com","babylonhx","tools","Tags"];
com_babylonhx_tools_Tags.EnableFor = function(obj) {
	if(obj._tags != null) obj._tags = obj._tags; else obj._tags = { };
	obj.hasTags = function() {
		return com_babylonhx_tools_Tags.HasTags(obj);
	};
	obj.addTags = function(tagsString) {
		com_babylonhx_tools_Tags.AddTagsTo(obj,tagsString);
	};
	obj.removeTags = function(tagsString1) {
		com_babylonhx_tools_Tags.RemoveTagsFrom(obj,tagsString1);
	};
};
com_babylonhx_tools_Tags.DisableFor = function(obj) {
	obj._tags = null;
	obj.hasTags = null;
	obj.addTags = null;
	obj.removeTags = null;
	obj.matchesTagsQuery = null;
};
com_babylonhx_tools_Tags.HasTags = function(obj) {
	if(!obj._tags) return false;
	return !com_babylonhx_tools_Tools.IsEmpty(obj._tags);
};
com_babylonhx_tools_Tags.GetTags = function(obj) {
	if(obj._tags == null) return null;
	return obj._tags;
};
com_babylonhx_tools_Tags.AddTagsTo = function(obj,tagsString) {
	if(tagsString == null) tagsString = "";
	if(tagsString == "") return;
	var tags = tagsString.split(" ");
	var _g = 0;
	while(_g < tags.length) {
		var t = tags[_g];
		++_g;
		com_babylonhx_tools_Tags._AddTagTo(obj,t);
	}
};
com_babylonhx_tools_Tags._AddTagTo = function(obj,tag) {
	tag = StringTools.trim(tag);
	if(tag == "" || tag == "true" || tag == "false") return;
	var regex = new EReg("[\\s]","");
	var regex2 = new EReg("^([!]|([|]|[&]){2})","");
	if(regex.match(tag) || regex2.match(tag)) return;
	com_babylonhx_tools_Tags.EnableFor(obj);
};
com_babylonhx_tools_Tags.RemoveTagsFrom = function(obj,tagsString) {
	if(!com_babylonhx_tools_Tags.HasTags(obj)) return;
	var tags = tagsString.split(" ");
	var _g = 0;
	while(_g < tags.length) {
		var t = tags[_g];
		++_g;
		com_babylonhx_tools_Tags._RemoveTagFrom(obj,t);
	}
};
com_babylonhx_tools_Tags._RemoveTagFrom = function(obj,tag) {
	obj._tags.remove(tag);
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = haxe_Timer.stamp();
	var r = f();
	haxe_Log.trace(haxe_Timer.stamp() - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) return;
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var com_babylonhx_tools_Tools = $hx_exports.BABYLON.Tools = function() { };
$hxClasses["com.babylonhx.tools.Tools"] = com_babylonhx_tools_Tools;
com_babylonhx_tools_Tools.__name__ = ["com","babylonhx","tools","Tools"];
com_babylonhx_tools_Tools.ToHex = function(i) {
	var str = StringTools.hex(i,16);
	if(i <= 15) {
		var ret = "0" + str;
		return ret.toUpperCase();
	}
	return str.toUpperCase();
};
com_babylonhx_tools_Tools.GetExponantOfTwo = function(value,max) {
	var count = 1;
	do count *= 2; while(count < value);
	if(count > max) count = max;
	return count;
};
com_babylonhx_tools_Tools.Lerp = function(v0,v1,t) {
	return (1 - t) * v0 + t * v1;
};
com_babylonhx_tools_Tools.GetFilename = function(path) {
	var index = path.lastIndexOf("/");
	if(index < 0) return path;
	return path.substring(index + 1);
};
com_babylonhx_tools_Tools.ToDegrees = function(angle) {
	return angle * 180 / Math.PI;
};
com_babylonhx_tools_Tools.ToRadians = function(angle) {
	return angle * Math.PI / 180;
};
com_babylonhx_tools_Tools.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
com_babylonhx_tools_Tools.ExtractMinAndMaxIndexed = function(positions,indices,indexStart,indexCount) {
	var minimum = new com_babylonhx_math_Vector3(Infinity,Infinity,Infinity);
	var maximum = new com_babylonhx_math_Vector3(-Infinity,-Infinity,-Infinity);
	var _g1 = indexStart;
	var _g = indexStart + indexCount;
	while(_g1 < _g) {
		var index = _g1++;
		var current = new com_babylonhx_math_Vector3(positions[indices[index] * 3],positions[indices[index] * 3 + 1],positions[indices[index] * 3 + 2]);
		minimum = com_babylonhx_math_Vector3.Minimize(current,minimum);
		maximum = com_babylonhx_math_Vector3.Maximize(current,maximum);
	}
	return { minimum : minimum, maximum : maximum};
};
com_babylonhx_tools_Tools.ExtractMinAndMax = function(positions,start,count) {
	var minimum = new com_babylonhx_math_Vector3(Infinity,Infinity,Infinity);
	var maximum = new com_babylonhx_math_Vector3(-Infinity,-Infinity,-Infinity);
	var _g1 = start;
	var _g = start + count;
	while(_g1 < _g) {
		var index = _g1++;
		var current = new com_babylonhx_math_Vector3(positions[index * 3],positions[index * 3 + 1],positions[index * 3 + 2]);
		minimum = com_babylonhx_math_Vector3.Minimize(current,minimum);
		maximum = com_babylonhx_math_Vector3.Maximize(current,maximum);
	}
	return { minimum : minimum, maximum : maximum};
};
com_babylonhx_tools_Tools.MakeArray = function(obj,allowsNullUndefined) {
	if(allowsNullUndefined == null) allowsNullUndefined = false;
	if(allowsNullUndefined != true && obj == null) return null;
	if(Object.prototype.hasOwnProperty.call(obj,"get")) {
		var ret = [];
		var $it0 = (function($this) {
			var $r;
			var this1;
			this1 = js_Boot.__cast(obj , haxe_IMap);
			$r = this1.keys();
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var key = $it0.next();
			ret.push(obj.get(key));
		}
		return ret;
	}
	if((obj instanceof Array) && obj.__enum__ == null) return obj; else return [obj];
};
com_babylonhx_tools_Tools.CleanUrl = function(url) {
	var regex = new EReg("#","mg");
	url = regex.replace(url,"%23");
	return url;
};
com_babylonhx_tools_Tools.LoadFile = function(path,callbackFn,type) {
	if(type == null) type = "";
	if(type == "" || type == "text") {
		if(lime_Assets.exists(path)) {
			var callBackFunction;
			if(callbackFn != null) callBackFunction = function(result) {
				callbackFn(result);
			}; else callBackFunction = function(_) {
			};
			var future = lime_Assets.loadText(path);
			future.onComplete(function(data) {
				callBackFunction(data);
			});
		} else haxe_Log.trace("File '" + path + "' doesn't exist!",{ fileName : "Tools.hx", lineNumber : 471, className : "com.babylonhx.tools.Tools", methodName : "LoadFile"});
	} else if(lime_Assets.exists(path)) switch(type) {
	case "img":
		var img = lime_Assets.getImage(path);
		var image = new com_babylonhx_utils_Image(img.get_data(),img.width,img.height);
		if(callbackFn != null) callbackFn(image);
		break;
	} else haxe_Log.trace("File '" + path + "' doesn't exist!",{ fileName : "Tools.hx", lineNumber : 512, className : "com.babylonhx.tools.Tools", methodName : "LoadFile"});
};
com_babylonhx_tools_Tools.LoadImage = function(url,onload,onerror,db) {
	if(lime_Assets.exists(url)) {
		var future = lime_Assets.loadImage(url);
		future.onComplete(function(img) {
			var image = new com_babylonhx_utils_Image(img.get_data(),img.width,img.height);
			onload(image);
		});
	} else haxe_Log.trace("Image '" + url + "' doesn't exist!",{ fileName : "Tools.hx", lineNumber : 645, className : "com.babylonhx.tools.Tools", methodName : "LoadImage"});
};
com_babylonhx_tools_Tools.Clamp = function(value,min,max) {
	if(max == null) max = 1;
	if(min == null) min = 0;
	return Math.min(max,Math.max(min,value));
};
com_babylonhx_tools_Tools.Clamp2 = function(x,a,b) {
	if(x < a) return a; else if(x > b) return b; else return x;
};
com_babylonhx_tools_Tools.Sign = function(value) {
	if(value == 0) return 0;
	if(value > 0) return 1; else return -1;
};
com_babylonhx_tools_Tools.Format = function(value,decimals) {
	if(decimals == null) decimals = 2;
	value = Math.round(value * Math.pow(10,decimals));
	var str = "" + value;
	var len = str.length;
	if(len <= decimals) {
		while(len < decimals) {
			str = "0" + str;
			len++;
		}
		return (decimals == 0?"":"0.") + str;
	} else return HxOverrides.substr(str,0,str.length - decimals) + (decimals == 0?"":".") + HxOverrides.substr(str,str.length - decimals,null);
};
com_babylonhx_tools_Tools.CheckExtends = function(v,min,max) {
	if(v.x < min.x) min.x = v.x;
	if(v.y < min.y) min.y = v.y;
	if(v.z < min.z) min.z = v.z;
	if(v.x > max.x) max.x = v.x;
	if(v.y > max.y) max.y = v.y;
	if(v.z > max.z) max.z = v.z;
};
com_babylonhx_tools_Tools.WithinEpsilon = function(a,b,epsilon) {
	if(epsilon == null) epsilon = 1.401298E-45;
	var num = a - b;
	return -epsilon <= num && num <= epsilon;
};
com_babylonhx_tools_Tools.cloneValue = function(source,destinationObject) {
	if(source == null) return null;
	if(js_Boot.__instanceof(source,com_babylonhx_mesh_Mesh)) return null;
	if(js_Boot.__instanceof(source,com_babylonhx_mesh_SubMesh)) return (js_Boot.__cast(source , com_babylonhx_mesh_SubMesh)).clone(js_Boot.__cast(destinationObject , com_babylonhx_mesh_AbstractMesh)); else if(Object.prototype.hasOwnProperty.call(source,"clone")) return source.clone();
	return null;
};
com_babylonhx_tools_Tools.IsEmpty = function(obj) {
	if((obj instanceof Array) && obj.__enum__ == null) {
		var _g = 0;
		var _g1;
		_g1 = js_Boot.__cast(obj , Array);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			return false;
		}
	}
	return true;
};
com_babylonhx_tools_Tools.Now = function() {
	return Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000);
};
com_babylonhx_tools_Tools.getTimer = function() {
	return Std["int"]((haxe_Timer.stamp() - com_babylonhx_tools_Tools.__startTime) * 1000);
};
com_babylonhx_tools_Tools.uuid = function() {
	var specialChars_0 = "8";
	var specialChars_1 = "9";
	var specialChars_2 = "A";
	var specialChars_3 = "B";
	var createRandomIdentifier = function(length,radix) {
		if(radix == null) radix = 61;
		var characters = ["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"];
		var id = [];
		if(radix > 61) radix = 61; else radix = radix;
		while(length-- > 0) id.push(characters[Math.floor((radix + 1) * Math.random())]);
		return id.join("");
	};
	return createRandomIdentifier(8,15) + "-" + createRandomIdentifier(4,15) + "-4" + createRandomIdentifier(3,15) + "-" + Math.floor(4 * Math.random()) + createRandomIdentifier(3,15) + "-" + createRandomIdentifier(12,15);
};
com_babylonhx_tools_Tools.randomInt = function(from,to) {
	return from + Math.floor((to - from + 1) * Math.random());
};
com_babylonhx_tools_Tools.randomFloat = function(from,to) {
	return from + (to - from + 1) * Math.random();
};
var com_babylonhx_mesh_primitives_Sphere = $hx_exports.BABYLON.Sphere = function(id,scene,segments,diameter,canBeRegenerated,mesh,side) {
	if(side == null) side = 0;
	this.segments = segments;
	this.diameter = diameter;
	this.side = side;
	com_babylonhx_mesh_primitives__$Primitive.call(this,id,scene,this._regenerateVertexData(),canBeRegenerated,mesh);
};
$hxClasses["com.babylonhx.mesh.primitives.Sphere"] = com_babylonhx_mesh_primitives_Sphere;
com_babylonhx_mesh_primitives_Sphere.__name__ = ["com","babylonhx","mesh","primitives","Sphere"];
com_babylonhx_mesh_primitives_Sphere.__super__ = com_babylonhx_mesh_primitives__$Primitive;
com_babylonhx_mesh_primitives_Sphere.prototype = $extend(com_babylonhx_mesh_primitives__$Primitive.prototype,{
	segments: null
	,diameter: null
	,side: null
	,_regenerateVertexData: function() {
		return com_babylonhx_mesh_VertexData.CreateSphere({ segments : this.segments, diameter : this.diameter, sideOrientation : this.side});
	}
	,copy: function(id) {
		return new com_babylonhx_mesh_primitives_Sphere(id,this._scene,this.segments,this.diameter,this.canBeRegenerated(),null,this.side);
	}
	,__class__: com_babylonhx_mesh_primitives_Sphere
});
var com_babylonhx_mesh_primitives_Cylinder = $hx_exports.BABYLON.Cylinder = function(id,scene,height,diameterTop,diameterBottom,tessellation,subdivisions,canBeRegenerated,mesh,side) {
	if(side == null) side = 0;
	if(subdivisions == null) subdivisions = 1;
	this.height = height;
	this.diameterTop = diameterTop;
	this.diameterBottom = diameterBottom;
	this.tessellation = tessellation;
	this.subdivisions = subdivisions;
	this.side = side;
	com_babylonhx_mesh_primitives__$Primitive.call(this,id,scene,this._regenerateVertexData(),canBeRegenerated,mesh);
};
$hxClasses["com.babylonhx.mesh.primitives.Cylinder"] = com_babylonhx_mesh_primitives_Cylinder;
com_babylonhx_mesh_primitives_Cylinder.__name__ = ["com","babylonhx","mesh","primitives","Cylinder"];
com_babylonhx_mesh_primitives_Cylinder.__super__ = com_babylonhx_mesh_primitives__$Primitive;
com_babylonhx_mesh_primitives_Cylinder.prototype = $extend(com_babylonhx_mesh_primitives__$Primitive.prototype,{
	height: null
	,diameterTop: null
	,diameterBottom: null
	,tessellation: null
	,subdivisions: null
	,side: null
	,_regenerateVertexData: function() {
		return com_babylonhx_mesh_VertexData.CreateCylinder({ height : this.height, diameterTop : this.diameterTop, diameterBottom : this.diameterBottom, tesselation : this.tessellation, subdivisions : this.subdivisions, sideOrientation : this.side});
	}
	,copy: function(id) {
		return new com_babylonhx_mesh_primitives_Cylinder(id,this._scene,this.height,this.diameterTop,this.diameterBottom,this.tessellation,this.subdivisions,this.canBeRegenerated(),null,this.side);
	}
	,__class__: com_babylonhx_mesh_primitives_Cylinder
});
var com_babylonhx_mesh_primitives_Torus = $hx_exports.BABYLON.Torus = function(id,scene,diameter,thickness,tessellation,canBeRegenerated,mesh,side) {
	if(side == null) side = 0;
	this.diameter = diameter;
	this.thickness = thickness;
	this.tessellation = tessellation;
	this.side = side;
	com_babylonhx_mesh_primitives__$Primitive.call(this,id,scene,this._regenerateVertexData(),canBeRegenerated,mesh);
};
$hxClasses["com.babylonhx.mesh.primitives.Torus"] = com_babylonhx_mesh_primitives_Torus;
com_babylonhx_mesh_primitives_Torus.__name__ = ["com","babylonhx","mesh","primitives","Torus"];
com_babylonhx_mesh_primitives_Torus.__super__ = com_babylonhx_mesh_primitives__$Primitive;
com_babylonhx_mesh_primitives_Torus.prototype = $extend(com_babylonhx_mesh_primitives__$Primitive.prototype,{
	diameter: null
	,thickness: null
	,tessellation: null
	,side: null
	,_regenerateVertexData: function() {
		return com_babylonhx_mesh_VertexData.CreateTorus({ diameter : this.diameter, thickness : this.thickness, tesselation : this.tessellation, sideOrientation : this.side});
	}
	,copy: function(id) {
		return new com_babylonhx_mesh_primitives_Torus(id,this._scene,this.diameter,this.thickness,this.tessellation,this.canBeRegenerated(),null,this.side);
	}
	,__class__: com_babylonhx_mesh_primitives_Torus
});
var com_babylonhx_mesh_primitives_Ground = $hx_exports.BABYLON.Ground = function(id,scene,width,height,subdivisions,canBeRegenerated,mesh) {
	this.width = width;
	this.height = height;
	this.subdivisions = subdivisions;
	com_babylonhx_mesh_primitives__$Primitive.call(this,id,scene,this._regenerateVertexData(),canBeRegenerated,mesh);
};
$hxClasses["com.babylonhx.mesh.primitives.Ground"] = com_babylonhx_mesh_primitives_Ground;
com_babylonhx_mesh_primitives_Ground.__name__ = ["com","babylonhx","mesh","primitives","Ground"];
com_babylonhx_mesh_primitives_Ground.__super__ = com_babylonhx_mesh_primitives__$Primitive;
com_babylonhx_mesh_primitives_Ground.prototype = $extend(com_babylonhx_mesh_primitives__$Primitive.prototype,{
	width: null
	,height: null
	,subdivisions: null
	,_regenerateVertexData: function() {
		return com_babylonhx_mesh_VertexData.CreateGround({ width : this.width, height : this.height, subdivisions : this.subdivisions});
	}
	,copy: function(id) {
		return new com_babylonhx_mesh_primitives_Ground(id,this._scene,this.width,this.height,this.subdivisions,this.canBeRegenerated(),null);
	}
	,__class__: com_babylonhx_mesh_primitives_Ground
});
var com_babylonhx_mesh_primitives_Plane = $hx_exports.BABYLON.Plane = function(id,scene,size,canBeRegenerated,mesh,side) {
	if(side == null) side = 0;
	this.size = size;
	this.side = side;
	com_babylonhx_mesh_primitives__$Primitive.call(this,id,scene,this._regenerateVertexData(),canBeRegenerated,mesh);
};
$hxClasses["com.babylonhx.mesh.primitives.Plane"] = com_babylonhx_mesh_primitives_Plane;
com_babylonhx_mesh_primitives_Plane.__name__ = ["com","babylonhx","mesh","primitives","Plane"];
com_babylonhx_mesh_primitives_Plane.__super__ = com_babylonhx_mesh_primitives__$Primitive;
com_babylonhx_mesh_primitives_Plane.prototype = $extend(com_babylonhx_mesh_primitives__$Primitive.prototype,{
	size: null
	,side: null
	,_regenerateVertexData: function() {
		return com_babylonhx_mesh_VertexData.CreatePlane({ width : this.size, height : this.size, sideOrientation : this.side});
	}
	,copy: function(id) {
		return new com_babylonhx_mesh_primitives_Plane(id,this._scene,this.size,this.canBeRegenerated(),null,this.side);
	}
	,__class__: com_babylonhx_mesh_primitives_Plane
});
var com_babylonhx_mesh_primitives_TorusKnot = $hx_exports.BABYLON.TorusKnot = function(id,scene,radius,tube,radialSegments,tubularSegments,p,q,canBeRegenerated,mesh,side) {
	if(side == null) side = 0;
	this.radius = radius;
	this.tube = tube;
	this.side = side;
	this.radialSegments = radialSegments;
	this.tubularSegments = tubularSegments;
	this.p = p;
	this.q = q;
	com_babylonhx_mesh_primitives__$Primitive.call(this,id,scene,this._regenerateVertexData(),canBeRegenerated,mesh);
};
$hxClasses["com.babylonhx.mesh.primitives.TorusKnot"] = com_babylonhx_mesh_primitives_TorusKnot;
com_babylonhx_mesh_primitives_TorusKnot.__name__ = ["com","babylonhx","mesh","primitives","TorusKnot"];
com_babylonhx_mesh_primitives_TorusKnot.__super__ = com_babylonhx_mesh_primitives__$Primitive;
com_babylonhx_mesh_primitives_TorusKnot.prototype = $extend(com_babylonhx_mesh_primitives__$Primitive.prototype,{
	radius: null
	,tube: null
	,side: null
	,radialSegments: null
	,tubularSegments: null
	,p: null
	,q: null
	,_regenerateVertexData: function() {
		return com_babylonhx_mesh_VertexData.CreateTorusKnot({ radius : this.radius, tube : this.tube, radialSegments : this.radialSegments, tubularSegments : this.tubularSegments, p : this.p, q : this.q, sideOrientation : this.side});
	}
	,copy: function(id) {
		return new com_babylonhx_mesh_primitives_TorusKnot(id,this._scene,this.radius,this.tube,this.radialSegments,this.tubularSegments,this.p,this.q,this.canBeRegenerated(),null,this.side);
	}
	,__class__: com_babylonhx_mesh_primitives_TorusKnot
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg;
	if(i != null) msg = i.fileName + ":" + i.lineNumber + ": "; else msg = "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	if(typeof(document) != "undefined" && (d = document.getElementById("haxe:trace")) != null) d.innerHTML += js_Boot.__unhtml(msg) + "<br/>"; else if(typeof console != "undefined" && console.log != null) console.log(msg);
};
js_Boot.__clear_trace = function() {
	var d = document.getElementById("haxe:trace");
	if(d != null) d.innerHTML = "";
};
js_Boot.isClass = function(o) {
	return o.__name__;
};
js_Boot.isEnum = function(e) {
	return e.__ename__;
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else {
		var cl = o.__class__;
		if(cl != null) return cl;
		var name = js_Boot.__nativeClassName(o);
		if(name != null) return js_Boot.__resolveNativeClass(name);
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str2 = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i1 = _g1++;
					if(i1 != 2) str2 += "," + js_Boot.__string_rec(o[i1],s); else str2 += js_Boot.__string_rec(o[i1],s);
				}
				return str2 + ")";
			}
			var l = o.length;
			var i;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) str += ", \n";
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) return true;
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) return o; else throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") return null;
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return (Function("return typeof " + name + " != \"undefined\" ? " + name + " : null"))();
};
var com_babylonhx_math_Matrix = $hx_exports.BABYLON.Matrix = function() {
	var array = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	var this1;
	if(array != null) this1 = new Float32Array(array); else this1 = null;
	this.m = this1;
};
$hxClasses["com.babylonhx.math.Matrix"] = com_babylonhx_math_Matrix;
com_babylonhx_math_Matrix.__name__ = ["com","babylonhx","math","Matrix"];
com_babylonhx_math_Matrix.FromArray = function(array,offset) {
	if(offset == null) offset = 0;
	var result = new com_babylonhx_math_Matrix();
	com_babylonhx_math_Matrix.FromArrayToRef(array,offset,result);
	return result;
};
com_babylonhx_math_Matrix.FromArrayToRef = function(array,offset,result) {
	var _g = 0;
	while(_g < 16) {
		var index = _g++;
		result.m[index] = array[index + offset];
	}
};
com_babylonhx_math_Matrix.FromFloat32ArrayToRefScaled = function(array,offset,scale,result) {
	var _g = 0;
	while(_g < 16) {
		var index = _g++;
		result.m[index] = array[index + offset] * scale;
	}
};
com_babylonhx_math_Matrix.FromValuesToRef = function(initialM11,initialM12,initialM13,initialM14,initialM21,initialM22,initialM23,initialM24,initialM31,initialM32,initialM33,initialM34,initialM41,initialM42,initialM43,initialM44,result) {
	result.m[0] = initialM11;
	result.m[1] = initialM12;
	result.m[2] = initialM13;
	result.m[3] = initialM14;
	result.m[4] = initialM21;
	result.m[5] = initialM22;
	result.m[6] = initialM23;
	result.m[7] = initialM24;
	result.m[8] = initialM31;
	result.m[9] = initialM32;
	result.m[10] = initialM33;
	result.m[11] = initialM34;
	result.m[12] = initialM41;
	result.m[13] = initialM42;
	result.m[14] = initialM43;
	result.m[15] = initialM44;
};
com_babylonhx_math_Matrix.FromValues = function(initialM11,initialM12,initialM13,initialM14,initialM21,initialM22,initialM23,initialM24,initialM31,initialM32,initialM33,initialM34,initialM41,initialM42,initialM43,initialM44) {
	var result = new com_babylonhx_math_Matrix();
	result.m[0] = initialM11;
	result.m[1] = initialM12;
	result.m[2] = initialM13;
	result.m[3] = initialM14;
	result.m[4] = initialM21;
	result.m[5] = initialM22;
	result.m[6] = initialM23;
	result.m[7] = initialM24;
	result.m[8] = initialM31;
	result.m[9] = initialM32;
	result.m[10] = initialM33;
	result.m[11] = initialM34;
	result.m[12] = initialM41;
	result.m[13] = initialM42;
	result.m[14] = initialM43;
	result.m[15] = initialM44;
	return result;
};
com_babylonhx_math_Matrix.Compose = function(scale,rotation,translation) {
	var result = com_babylonhx_math_Matrix.FromValues(scale.x,0,0,0,0,scale.y,0,0,0,0,scale.z,0,0,0,0,1);
	var rotationMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	rotation.toRotationMatrix(rotationMatrix);
	result = result.multiply(rotationMatrix);
	result.m[12] = translation.x;
	result.m[13] = translation.y;
	result.m[14] = translation.z;
	return result;
};
com_babylonhx_math_Matrix.Identity = function() {
	return com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
};
com_babylonhx_math_Matrix.IdentityToRef = function(result) {
	com_babylonhx_math_Matrix.FromValuesToRef(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0,result);
};
com_babylonhx_math_Matrix.Zero = function() {
	return com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
};
com_babylonhx_math_Matrix.RotationX = function(angle) {
	var result = new com_babylonhx_math_Matrix();
	com_babylonhx_math_Matrix.RotationXToRef(angle,result);
	return result;
};
com_babylonhx_math_Matrix.Invert = function(source) {
	var result = new com_babylonhx_math_Matrix();
	source.invertToRef(result);
	return result;
};
com_babylonhx_math_Matrix.RotationXToRef = function(angle,result) {
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	result.m[0] = 1.0;
	result.m[15] = 1.0;
	result.m[5] = c;
	result.m[10] = c;
	result.m[9] = -s;
	result.m[6] = s;
	result.m[1] = 0;
	result.m[2] = 0;
	result.m[3] = 0;
	result.m[4] = 0;
	result.m[7] = 0;
	result.m[8] = 0;
	result.m[11] = 0;
	result.m[12] = 0;
	result.m[13] = 0;
	result.m[14] = 0;
};
com_babylonhx_math_Matrix.RotationY = function(angle) {
	var result = new com_babylonhx_math_Matrix();
	com_babylonhx_math_Matrix.RotationYToRef(angle,result);
	return result;
};
com_babylonhx_math_Matrix.RotationYToRef = function(angle,result) {
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	result.m[5] = 1.0;
	result.m[15] = 1.0;
	result.m[0] = c;
	result.m[2] = -s;
	result.m[8] = s;
	result.m[10] = c;
	result.m[1] = 0;
	result.m[3] = 0;
	result.m[4] = 0;
	result.m[6] = 0;
	result.m[7] = 0;
	result.m[9] = 0;
	result.m[11] = 0;
	result.m[12] = 0;
	result.m[13] = 0;
	result.m[14] = 0;
};
com_babylonhx_math_Matrix.RotationZ = function(angle) {
	var result = new com_babylonhx_math_Matrix();
	com_babylonhx_math_Matrix.RotationZToRef(angle,result);
	return result;
};
com_babylonhx_math_Matrix.RotationZToRef = function(angle,result) {
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	result.m[10] = 1.0;
	result.m[15] = 1.0;
	result.m[0] = c;
	result.m[1] = s;
	result.m[4] = -s;
	result.m[5] = c;
	result.m[2] = 0;
	result.m[3] = 0;
	result.m[6] = 0;
	result.m[7] = 0;
	result.m[8] = 0;
	result.m[9] = 0;
	result.m[11] = 0;
	result.m[12] = 0;
	result.m[13] = 0;
	result.m[14] = 0;
};
com_babylonhx_math_Matrix.RotationAxis = function(axis,angle) {
	var s = Math.sin(-angle);
	var c = Math.cos(-angle);
	var c1 = 1 - c;
	axis.normalize();
	var result = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	result.m[0] = axis.x * axis.x * c1 + c;
	result.m[1] = axis.x * axis.y * c1 - axis.z * s;
	result.m[2] = axis.x * axis.z * c1 + axis.y * s;
	result.m[3] = 0.0;
	result.m[4] = axis.y * axis.x * c1 + axis.z * s;
	result.m[5] = axis.y * axis.y * c1 + c;
	result.m[6] = axis.y * axis.z * c1 - axis.x * s;
	result.m[7] = 0.0;
	result.m[8] = axis.z * axis.x * c1 - axis.y * s;
	result.m[9] = axis.z * axis.y * c1 + axis.x * s;
	result.m[10] = axis.z * axis.z * c1 + c;
	result.m[11] = 0.0;
	result.m[15] = 1.0;
	return result;
};
com_babylonhx_math_Matrix.RotationYawPitchRoll = function(yaw,pitch,roll) {
	var result = new com_babylonhx_math_Matrix();
	com_babylonhx_math_Quaternion.RotationYawPitchRollToRef(yaw,pitch,roll,com_babylonhx_math_Matrix._tempQuaternion);
	com_babylonhx_math_Matrix._tempQuaternion.toRotationMatrix(result);
	return result;
};
com_babylonhx_math_Matrix.RotationYawPitchRollToRef = function(yaw,pitch,roll,result) {
	com_babylonhx_math_Quaternion.RotationYawPitchRollToRef(yaw,pitch,roll,com_babylonhx_math_Matrix._tempQuaternion);
	com_babylonhx_math_Matrix._tempQuaternion.toRotationMatrix(result);
};
com_babylonhx_math_Matrix.Scaling = function(x,y,z) {
	var result = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	result.m[0] = x;
	result.m[1] = 0;
	result.m[2] = 0;
	result.m[3] = 0;
	result.m[4] = 0;
	result.m[5] = y;
	result.m[6] = 0;
	result.m[7] = 0;
	result.m[8] = 0;
	result.m[9] = 0;
	result.m[10] = z;
	result.m[11] = 0;
	result.m[12] = 0;
	result.m[13] = 0;
	result.m[14] = 0;
	result.m[15] = 1.0;
	return result;
};
com_babylonhx_math_Matrix.ScalingToRef = function(x,y,z,result) {
	result.m[0] = x;
	result.m[1] = 0;
	result.m[2] = 0;
	result.m[3] = 0;
	result.m[4] = 0;
	result.m[5] = y;
	result.m[6] = 0;
	result.m[7] = 0;
	result.m[8] = 0;
	result.m[9] = 0;
	result.m[10] = z;
	result.m[11] = 0;
	result.m[12] = 0;
	result.m[13] = 0;
	result.m[14] = 0;
	result.m[15] = 1.0;
};
com_babylonhx_math_Matrix.Translation = function(x,y,z) {
	var result = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	com_babylonhx_math_Matrix.TranslationToRef(x,y,z,result);
	return result;
};
com_babylonhx_math_Matrix.TranslationToRef = function(x,y,z,result) {
	com_babylonhx_math_Matrix.FromValuesToRef(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,x,y,z,1.0,result);
};
com_babylonhx_math_Matrix.LookAtLH = function(eye,target,up) {
	var result = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	com_babylonhx_math_Matrix.LookAtLHToRef(eye,target,up,result);
	return result;
};
com_babylonhx_math_Matrix.ex = null;
com_babylonhx_math_Matrix.ey = null;
com_babylonhx_math_Matrix.ez = null;
com_babylonhx_math_Matrix.LookAtLHToRef = function(eye,target,up,result) {
	target.subtractToRef(eye,com_babylonhx_math_Matrix._zAxis);
	com_babylonhx_math_Matrix._zAxis.normalize();
	com_babylonhx_math_Vector3.CrossToRef(up,com_babylonhx_math_Matrix._zAxis,com_babylonhx_math_Matrix._xAxis);
	com_babylonhx_math_Matrix._xAxis.normalize();
	com_babylonhx_math_Vector3.CrossToRef(com_babylonhx_math_Matrix._zAxis,com_babylonhx_math_Matrix._xAxis,com_babylonhx_math_Matrix._yAxis);
	com_babylonhx_math_Matrix._yAxis.normalize();
	com_babylonhx_math_Matrix.ex = -com_babylonhx_math_Vector3.Dot(com_babylonhx_math_Matrix._xAxis,eye);
	com_babylonhx_math_Matrix.ey = -com_babylonhx_math_Vector3.Dot(com_babylonhx_math_Matrix._yAxis,eye);
	com_babylonhx_math_Matrix.ez = -com_babylonhx_math_Vector3.Dot(com_babylonhx_math_Matrix._zAxis,eye);
	com_babylonhx_math_Matrix.FromValuesToRef(com_babylonhx_math_Matrix._xAxis.x,com_babylonhx_math_Matrix._yAxis.x,com_babylonhx_math_Matrix._zAxis.x,0,com_babylonhx_math_Matrix._xAxis.y,com_babylonhx_math_Matrix._yAxis.y,com_babylonhx_math_Matrix._zAxis.y,0,com_babylonhx_math_Matrix._xAxis.z,com_babylonhx_math_Matrix._yAxis.z,com_babylonhx_math_Matrix._zAxis.z,0,com_babylonhx_math_Matrix.ex,com_babylonhx_math_Matrix.ey,com_babylonhx_math_Matrix.ez,1,result);
	return;
};
com_babylonhx_math_Matrix.OrthoLH = function(width,height,znear,zfar) {
	var hw = 2.0 / width;
	var hh = 2.0 / height;
	var id = 1.0 / (zfar - znear);
	var nid = znear / (znear - zfar);
	return com_babylonhx_math_Matrix.FromValues(hw,0,0,0,0,hh,0,0,0,0,id,0,0,0,nid,1);
};
com_babylonhx_math_Matrix.OrthoOffCenterLH = function(left,right,bottom,top,znear,zfar) {
	var matrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	com_babylonhx_math_Matrix.OrthoOffCenterLHToRef(left,right,bottom,top,znear,zfar,matrix);
	return matrix;
};
com_babylonhx_math_Matrix.OrthoOffCenterLHToRef = function(left,right,bottom,top,znear,zfar,result) {
	result.m[0] = 2.0 / (right - left);
	result.m[1] = 0;
	result.m[2] = 0;
	result.m[3] = 0;
	result.m[5] = 2.0 / (top - bottom);
	result.m[4] = 0;
	result.m[6] = 0;
	result.m[7] = 0;
	result.m[10] = -1. / (znear - zfar);
	result.m[8] = 0;
	result.m[9] = 0;
	result.m[11] = 0;
	result.m[12] = (left + right) / (left - right);
	result.m[13] = (top + bottom) / (bottom - top);
	result.m[14] = znear / (znear - zfar);
	result.m[15] = 1.0;
};
com_babylonhx_math_Matrix.PerspectiveLH = function(width,height,znear,zfar) {
	var matrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	matrix.m[0] = 2.0 * znear / width;
	matrix.m[1] = 0.0;
	matrix.m[2] = 0.0;
	matrix.m[3] = 0.0;
	matrix.m[5] = 2.0 * znear / height;
	matrix.m[4] = 0.0;
	matrix.m[6] = 0.0;
	matrix.m[7] = 0.0;
	matrix.m[10] = -zfar / (znear - zfar);
	matrix.m[8] = 0.0;
	matrix.m[9] = 0.0;
	matrix.m[11] = 1.0;
	matrix.m[12] = 0.0;
	matrix.m[13] = 0.0;
	matrix.m[15] = 0.0;
	matrix.m[14] = znear * zfar / (znear - zfar);
	return matrix;
};
com_babylonhx_math_Matrix.PerspectiveFovLH = function(fov,aspect,znear,zfar) {
	var matrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	com_babylonhx_math_Matrix.PerspectiveFovLHToRef(fov,aspect,znear,zfar,matrix);
	return matrix;
};
com_babylonhx_math_Matrix.PerspectiveFovLHToRef = function(fov,aspect,znear,zfar,result,fovMode) {
	var tan = 1.0 / Math.tan(fov * 0.5);
	var v_fixed = fovMode == null || fovMode == 0;
	var h_fixed = fovMode == 1;
	if(v_fixed) result.m[0] = tan / aspect; else if(h_fixed) result.m[0] = tan;
	result.m[1] = 0.0;
	result.m[2] = 0.0;
	result.m[3] = 0.0;
	if(v_fixed) result.m[5] = tan; else if(h_fixed) result.m[5] = tan * aspect;
	result.m[4] = 0.0;
	result.m[6] = 0.0;
	result.m[7] = 0.0;
	result.m[8] = 0.0;
	result.m[9] = 0.0;
	result.m[10] = -zfar / (znear - zfar);
	result.m[11] = 1.0;
	result.m[12] = 0.0;
	result.m[13] = 0.0;
	result.m[15] = 0.0;
	result.m[14] = znear * zfar / (znear - zfar);
};
com_babylonhx_math_Matrix.GetFinalMatrix = function(viewport,world,view,projection,zmin,zmax) {
	var cw = viewport.width;
	var ch = viewport.height;
	var cx = viewport.x;
	var cy = viewport.y;
	var viewportMatrix = com_babylonhx_math_Matrix.FromValues(cw / 2.0,0,0,0,0,-ch / 2.0,0,0,0,0,zmax - zmin,0,cx + cw / 2.0,ch / 2.0 + cy,zmin,1);
	return world.multiply(view).multiply(projection).multiply(viewportMatrix);
};
com_babylonhx_math_Matrix.GetAsMatrix2x2 = function(matrix) {
	var array = [matrix.m[0],matrix.m[1],matrix.m[4],matrix.m[5]];
	var this1;
	if(array != null) this1 = new Float32Array(array); else this1 = null;
	return this1;
};
com_babylonhx_math_Matrix.GetAsMatrix3x3 = function(matrix) {
	var array = [matrix.m[0],matrix.m[1],matrix.m[2],matrix.m[4],matrix.m[5],matrix.m[6],matrix.m[8],matrix.m[9],matrix.m[10]];
	var this1;
	if(array != null) this1 = new Float32Array(array); else this1 = null;
	return this1;
};
com_babylonhx_math_Matrix.Transpose = function(matrix) {
	var result = new com_babylonhx_math_Matrix();
	result.m[0] = matrix.m[0];
	result.m[1] = matrix.m[4];
	result.m[2] = matrix.m[8];
	result.m[3] = matrix.m[12];
	result.m[4] = matrix.m[1];
	result.m[5] = matrix.m[5];
	result.m[6] = matrix.m[9];
	result.m[7] = matrix.m[13];
	result.m[8] = matrix.m[2];
	result.m[9] = matrix.m[6];
	result.m[10] = matrix.m[10];
	result.m[11] = matrix.m[14];
	result.m[12] = matrix.m[3];
	result.m[13] = matrix.m[7];
	result.m[14] = matrix.m[11];
	result.m[15] = matrix.m[15];
	return result;
};
com_babylonhx_math_Matrix.Reflection = function(plane) {
	var matrix = new com_babylonhx_math_Matrix();
	com_babylonhx_math_Matrix.ReflectionToRef(plane,matrix);
	return matrix;
};
com_babylonhx_math_Matrix.ReflectionToRef = function(plane,result) {
	plane.normalize();
	var x = plane.normal.x;
	var y = plane.normal.y;
	var z = plane.normal.z;
	var temp = -2 * x;
	var temp2 = -2 * y;
	var temp3 = -2 * z;
	result.m[0] = temp * x + 1;
	result.m[1] = temp2 * x;
	result.m[2] = temp3 * x;
	result.m[3] = 0.0;
	result.m[4] = temp * y;
	result.m[5] = temp2 * y + 1;
	result.m[6] = temp3 * y;
	result.m[7] = 0.0;
	result.m[8] = temp * z;
	result.m[9] = temp2 * z;
	result.m[10] = temp3 * z + 1;
	result.m[11] = 0.0;
	result.m[12] = temp * plane.d;
	result.m[13] = temp2 * plane.d;
	result.m[14] = temp3 * plane.d;
	result.m[15] = 1.0;
};
com_babylonhx_math_Matrix.prototype = {
	m: null
	,toString: function() {
		return lime_utils__$Float32Array_Float32Array_$Impl_$.toString(this.m) + "";
	}
	,isIdentity: function() {
		if(this.m[0] != 1.0 || this.m[5] != 1.0 || this.m[10] != 1.0 || this.m[15] != 1.0) return false;
		if(this.m[1] != 0.0 || this.m[2] != 0.0 || this.m[3] != 0.0 || this.m[4] != 0.0 || this.m[6] != 0.0 || this.m[7] != 0.0 || this.m[8] != 0.0 || this.m[9] != 0.0 || this.m[11] != 0.0 || this.m[12] != 0.0 || this.m[13] != 0.0 || this.m[14] != 0.0) return false;
		return true;
	}
	,determinant: function() {
		var temp1 = this.m[10] * this.m[15] - this.m[11] * this.m[14];
		var temp2 = this.m[9] * this.m[15] - this.m[11] * this.m[13];
		var temp3 = this.m[9] * this.m[14] - this.m[10] * this.m[13];
		var temp4 = this.m[8] * this.m[15] - this.m[11] * this.m[12];
		var temp5 = this.m[8] * this.m[14] - this.m[10] * this.m[12];
		var temp6 = this.m[8] * this.m[13] - this.m[9] * this.m[12];
		return this.m[0] * (this.m[5] * temp1 - this.m[6] * temp2 + this.m[7] * temp3) - this.m[1] * (this.m[4] * temp1 - this.m[6] * temp4 + this.m[7] * temp5) + this.m[2] * (this.m[4] * temp2 - this.m[5] * temp4 + this.m[7] * temp6) - this.m[3] * (this.m[4] * temp3 - this.m[5] * temp5 + this.m[6] * temp6);
	}
	,toArray: function() {
		return this.m;
	}
	,asArray: function() {
		return this.m;
	}
	,invert: function() {
		this.invertToRef(this);
		return this;
	}
	,invertToRef: function(other) {
		var l1 = this.m[0];
		var l2 = this.m[1];
		var l3 = this.m[2];
		var l4 = this.m[3];
		var l5 = this.m[4];
		var l6 = this.m[5];
		var l7 = this.m[6];
		var l8 = this.m[7];
		var l9 = this.m[8];
		var l10 = this.m[9];
		var l11 = this.m[10];
		var l12 = this.m[11];
		var l13 = this.m[12];
		var l14 = this.m[13];
		var l15 = this.m[14];
		var l16 = this.m[15];
		var l17 = l11 * l16 - l12 * l15;
		var l18 = l10 * l16 - l12 * l14;
		var l19 = l10 * l15 - l11 * l14;
		var l20 = l9 * l16 - l12 * l13;
		var l21 = l9 * l15 - l11 * l13;
		var l22 = l9 * l14 - l10 * l13;
		var l23 = l6 * l17 - l7 * l18 + l8 * l19;
		var l24 = -(l5 * l17 - l7 * l20 + l8 * l21);
		var l25 = l5 * l18 - l6 * l20 + l8 * l22;
		var l26 = -(l5 * l19 - l6 * l21 + l7 * l22);
		var l27 = 1.0 / (l1 * l23 + l2 * l24 + l3 * l25 + l4 * l26);
		var l28 = l7 * l16 - l8 * l15;
		var l29 = l6 * l16 - l8 * l14;
		var l30 = l6 * l15 - l7 * l14;
		var l31 = l5 * l16 - l8 * l13;
		var l32 = l5 * l15 - l7 * l13;
		var l33 = l5 * l14 - l6 * l13;
		var l34 = l7 * l12 - l8 * l11;
		var l35 = l6 * l12 - l8 * l10;
		var l36 = l6 * l11 - l7 * l10;
		var l37 = l5 * l12 - l8 * l9;
		var l38 = l5 * l11 - l7 * l9;
		var l39 = l5 * l10 - l6 * l9;
		other.m[0] = l23 * l27;
		other.m[4] = l24 * l27;
		other.m[8] = l25 * l27;
		other.m[12] = l26 * l27;
		other.m[1] = -(l2 * l17 - l3 * l18 + l4 * l19) * l27;
		other.m[5] = (l1 * l17 - l3 * l20 + l4 * l21) * l27;
		other.m[9] = -(l1 * l18 - l2 * l20 + l4 * l22) * l27;
		other.m[13] = (l1 * l19 - l2 * l21 + l3 * l22) * l27;
		other.m[2] = (l2 * l28 - l3 * l29 + l4 * l30) * l27;
		other.m[6] = -(l1 * l28 - l3 * l31 + l4 * l32) * l27;
		other.m[10] = (l1 * l29 - l2 * l31 + l4 * l33) * l27;
		other.m[14] = -(l1 * l30 - l2 * l32 + l3 * l33) * l27;
		other.m[3] = -(l2 * l34 - l3 * l35 + l4 * l36) * l27;
		other.m[7] = (l1 * l34 - l3 * l37 + l4 * l38) * l27;
		other.m[11] = -(l1 * l35 - l2 * l37 + l4 * l39) * l27;
		other.m[15] = (l1 * l36 - l2 * l38 + l3 * l39) * l27;
	}
	,reset: function() {
		var _g = 0;
		while(_g < 16) {
			var index = _g++;
			this.m[index] = 0;
		}
		return this;
	}
	,add: function(other) {
		var result = new com_babylonhx_math_Matrix();
		this.addToRef(other,result);
		return result;
	}
	,addToRef: function(other,result) {
		var _g = 0;
		while(_g < 16) {
			var index = _g++;
			result.m[index] = this.m[index] + other.m[index];
		}
		return this;
	}
	,addToSelf: function(other) {
		var _g = 0;
		while(_g < 16) {
			var index = _g++;
			var _g1 = index;
			this.m[_g1] = this.m[_g1] + other.m[index];
		}
		return this;
	}
	,setTranslation: function(vector3) {
		this.m[12] = vector3.x;
		this.m[13] = vector3.y;
		this.m[14] = vector3.z;
	}
	,multiply: function(other) {
		var result = new com_babylonhx_math_Matrix();
		this.multiplyToRef(other,result);
		return result;
	}
	,copyFrom: function(other) {
		var _g = 0;
		while(_g < 16) {
			var index = _g++;
			this.m[index] = other.m[index];
		}
	}
	,copyToArray: function(array,offset) {
		if(offset == null) offset = 0;
		var _g = 0;
		while(_g < 16) {
			var index = _g++;
			array[offset + index] = this.m[index];
		}
	}
	,multiplyToRef: function(other,result) {
		this.multiplyToArray(other,result.m,0);
	}
	,multiplyToArray: function(other,result,offset) {
		result[offset] = this.m[0] * other.m[0] + this.m[1] * other.m[4] + this.m[2] * other.m[8] + this.m[3] * other.m[12];
		result[offset + 1] = this.m[0] * other.m[1] + this.m[1] * other.m[5] + this.m[2] * other.m[9] + this.m[3] * other.m[13];
		result[offset + 2] = this.m[0] * other.m[2] + this.m[1] * other.m[6] + this.m[2] * other.m[10] + this.m[3] * other.m[14];
		result[offset + 3] = this.m[0] * other.m[3] + this.m[1] * other.m[7] + this.m[2] * other.m[11] + this.m[3] * other.m[15];
		result[offset + 4] = this.m[4] * other.m[0] + this.m[5] * other.m[4] + this.m[6] * other.m[8] + this.m[7] * other.m[12];
		result[offset + 5] = this.m[4] * other.m[1] + this.m[5] * other.m[5] + this.m[6] * other.m[9] + this.m[7] * other.m[13];
		result[offset + 6] = this.m[4] * other.m[2] + this.m[5] * other.m[6] + this.m[6] * other.m[10] + this.m[7] * other.m[14];
		result[offset + 7] = this.m[4] * other.m[3] + this.m[5] * other.m[7] + this.m[6] * other.m[11] + this.m[7] * other.m[15];
		result[offset + 8] = this.m[8] * other.m[0] + this.m[9] * other.m[4] + this.m[10] * other.m[8] + this.m[11] * other.m[12];
		result[offset + 9] = this.m[8] * other.m[1] + this.m[9] * other.m[5] + this.m[10] * other.m[9] + this.m[11] * other.m[13];
		result[offset + 10] = this.m[8] * other.m[2] + this.m[9] * other.m[6] + this.m[10] * other.m[10] + this.m[11] * other.m[14];
		result[offset + 11] = this.m[8] * other.m[3] + this.m[9] * other.m[7] + this.m[10] * other.m[11] + this.m[11] * other.m[15];
		result[offset + 12] = this.m[12] * other.m[0] + this.m[13] * other.m[4] + this.m[14] * other.m[8] + this.m[15] * other.m[12];
		result[offset + 13] = this.m[12] * other.m[1] + this.m[13] * other.m[5] + this.m[14] * other.m[9] + this.m[15] * other.m[13];
		result[offset + 14] = this.m[12] * other.m[2] + this.m[13] * other.m[6] + this.m[14] * other.m[10] + this.m[15] * other.m[14];
		result[offset + 15] = this.m[12] * other.m[3] + this.m[13] * other.m[7] + this.m[14] * other.m[11] + this.m[15] * other.m[15];
	}
	,equals: function(value) {
		return value != null && (this.m[0] == value.m[0] && this.m[1] == value.m[1] && this.m[2] == value.m[2] && this.m[3] == value.m[3] && this.m[4] == value.m[4] && this.m[5] == value.m[5] && this.m[6] == value.m[6] && this.m[7] == value.m[7] && this.m[8] == value.m[8] && this.m[9] == value.m[9] && this.m[10] == value.m[10] && this.m[11] == value.m[11] && this.m[12] == value.m[12] && this.m[13] == value.m[13] && this.m[14] == value.m[14] && this.m[15] == value.m[15]);
	}
	,clone: function() {
		return com_babylonhx_math_Matrix.FromValues(this.m[0],this.m[1],this.m[2],this.m[3],this.m[4],this.m[5],this.m[6],this.m[7],this.m[8],this.m[9],this.m[10],this.m[11],this.m[12],this.m[13],this.m[14],this.m[15]);
	}
	,decompose: function(scale,rotation,translation) {
		translation.x = this.m[12];
		translation.y = this.m[13];
		translation.z = this.m[14];
		var xs;
		if(com_babylonhx_tools_Tools.Sign(this.m[0] * this.m[1] * this.m[2] * this.m[3]) < 0) xs = -1; else xs = 1;
		var ys;
		if(com_babylonhx_tools_Tools.Sign(this.m[4] * this.m[5] * this.m[6] * this.m[7]) < 0) ys = -1; else ys = 1;
		var zs;
		if(com_babylonhx_tools_Tools.Sign(this.m[8] * this.m[9] * this.m[10] * this.m[11]) < 0) zs = -1; else zs = 1;
		scale.x = xs * Math.sqrt(this.m[0] * this.m[0] + this.m[1] * this.m[1] + this.m[2] * this.m[2]);
		scale.y = ys * Math.sqrt(this.m[4] * this.m[4] + this.m[5] * this.m[5] + this.m[6] * this.m[6]);
		scale.z = zs * Math.sqrt(this.m[8] * this.m[8] + this.m[9] * this.m[9] + this.m[10] * this.m[10]);
		if(scale.x == 0 || scale.y == 0 || scale.z == 0) {
			rotation.x = 0;
			rotation.y = 0;
			rotation.z = 0;
			rotation.w = 1;
			return false;
		}
		var rotationMatrix = com_babylonhx_math_Matrix.FromValues(this.m[0] / scale.x,this.m[1] / scale.x,this.m[2] / scale.x,0,this.m[4] / scale.y,this.m[5] / scale.y,this.m[6] / scale.y,0,this.m[8] / scale.z,this.m[9] / scale.z,this.m[10] / scale.z,0,0,0,0,1);
		com_babylonhx_math_Quaternion.FromRotationMatrixToRef(rotationMatrix,rotation);
		rotation;
		return true;
	}
	,__class__: com_babylonhx_math_Matrix
};
var com_babylonhx_mesh_VertexData = $hx_exports.BABYLON.VertexData = function() {
};
$hxClasses["com.babylonhx.mesh.VertexData"] = com_babylonhx_mesh_VertexData;
com_babylonhx_mesh_VertexData.__name__ = ["com","babylonhx","mesh","VertexData"];
com_babylonhx_mesh_VertexData.ExtractFromMesh = function(mesh,copyWhenShared) {
	if(copyWhenShared == null) copyWhenShared = false;
	return com_babylonhx_mesh_VertexData._ExtractFrom(mesh,copyWhenShared);
};
com_babylonhx_mesh_VertexData.ExtractFromGeometry = function(geometry,copyWhenShared) {
	if(copyWhenShared == null) copyWhenShared = false;
	return com_babylonhx_mesh_VertexData._ExtractFrom(geometry,copyWhenShared);
};
com_babylonhx_mesh_VertexData._ExtractFrom = function(meshOrGeometry,copyWhenShared) {
	if(copyWhenShared == null) copyWhenShared = false;
	var result = new com_babylonhx_mesh_VertexData();
	if(meshOrGeometry.isVerticesDataPresent("position")) result.positions = meshOrGeometry.getVerticesData("position",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("normal")) result.normals = meshOrGeometry.getVerticesData("normal",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("uv")) result.uvs = meshOrGeometry.getVerticesData("uv",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("uv2")) result.uv2s = meshOrGeometry.getVerticesData("uv2",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("uv3")) result.uv3s = meshOrGeometry.getVerticesData("uv3",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("uv4")) result.uv4s = meshOrGeometry.getVerticesData("uv4",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("uv5")) result.uv5s = meshOrGeometry.getVerticesData("uv5",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("uv6")) result.uv6s = meshOrGeometry.getVerticesData("uv6",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("color")) result.colors = meshOrGeometry.getVerticesData("color",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("matricesIndices")) result.matricesIndices = meshOrGeometry.getVerticesData("matricesIndices",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("matricesWeights")) result.matricesWeights = meshOrGeometry.getVerticesData("matricesWeights",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("matricesIndicesExtra")) result.matricesIndicesExtra = meshOrGeometry.getVerticesData("matricesIndicesExtra",copyWhenShared);
	if(meshOrGeometry.isVerticesDataPresent("matricesWeightsExtra")) result.matricesWeightsExtra = meshOrGeometry.getVerticesData("matricesWeightsExtra",copyWhenShared);
	result.indices = meshOrGeometry.getIndices(copyWhenShared);
	return result;
};
com_babylonhx_mesh_VertexData.CreateRibbon = function(options) {
	var pathArray = options.pathArray;
	var closeArray;
	if(options.closeArray != null) closeArray = options.closeArray; else closeArray = false;
	var closePath;
	if(options.closePath != null) closePath = options.closePath; else closePath = false;
	var defaultOffset = Math.floor(pathArray[0].length / 2);
	var offset;
	if(options.offset != null) offset = options.offset; else offset = defaultOffset;
	if(offset > defaultOffset) offset = defaultOffset; else offset = Math.floor(offset);
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var us = [];
	var vs = [];
	var uTotalDistance = [];
	var vTotalDistance = [];
	var minlg = 0;
	var vectlg = 0;
	var dist = 0;
	var lg = [];
	var idx = [];
	var p = 0;
	var i = 0;
	var j = 0;
	if(pathArray.length < 2) {
		var ar1 = [];
		var ar2 = [];
		var _g1 = 0;
		var _g = pathArray[0].length - offset;
		while(_g1 < _g) {
			var i1 = _g1++;
			ar1.push(pathArray[0][i1]);
			ar2.push(pathArray[0][i1 + offset]);
		}
		pathArray = [ar1,ar2];
	}
	var idc = 0;
	var closePathCorr;
	if(closePath) closePathCorr = 1; else closePathCorr = 0;
	var path = [];
	var l = 0;
	minlg = pathArray[0].length;
	var _g11 = 0;
	var _g2 = pathArray.length;
	while(_g11 < _g2) {
		var p1 = _g11++;
		uTotalDistance[p1] = 0;
		us[p1] = [0];
		path = pathArray[p1];
		l = path.length;
		if(minlg < l) minlg = minlg; else minlg = l;
		j = 0;
		while(j < l) {
			positions.push(path[j].x);
			positions.push(path[j].y);
			positions.push(path[j].z);
			if(j > 0) {
				var vectlg1 = path[j].subtract(path[j - 1]).length();
				var dist1 = vectlg1 + uTotalDistance[p1];
				us[p1].push(dist1);
				uTotalDistance[p1] = dist1;
			}
			j++;
		}
		if(closePath) {
			j--;
			positions.push(path[0].x);
			positions.push(path[0].y);
			positions.push(path[0].z);
			vectlg = path[j].subtract(path[0]).length();
			dist = vectlg + uTotalDistance[p1];
			us[p1].push(dist);
			uTotalDistance[p1] = dist;
		}
		lg[p1] = l + closePathCorr;
		idx[p1] = idc;
		idc += l + closePathCorr;
	}
	var path1 = [];
	var path2 = [];
	var vertex1;
	var vertex2;
	var _g12 = 0;
	var _g3 = minlg + closePathCorr;
	while(_g12 < _g3) {
		var i2 = _g12++;
		vTotalDistance[i2] = 0;
		vs[i2] = [0];
		var _g31 = 0;
		var _g21 = pathArray.length - 1;
		while(_g31 < _g21) {
			var p2 = _g31++;
			path1 = pathArray[p2];
			path2 = pathArray[p2 + 1];
			if(i2 == minlg) {
				vertex1 = path1[0];
				vertex2 = path2[0];
			} else {
				vertex1 = path1[i2];
				vertex2 = path2[i2];
			}
			vectlg = new com_babylonhx_math_Vector3(vertex2.x - vertex1.x,vertex2.y - vertex1.y,vertex2.z - vertex1.z).length();
			dist = vectlg + vTotalDistance[i2];
			vs[i2].push(dist);
			vTotalDistance[i2] = dist;
		}
		if(closeArray) {
			path1 = pathArray[p];
			path2 = pathArray[0];
			vectlg = path2[i2].subtract(path1[i2]).length();
			dist = vectlg + vTotalDistance[i2];
			vTotalDistance[i2] = dist;
		}
	}
	var u = 0;
	var v = 0;
	var _g13 = 0;
	var _g4 = pathArray.length;
	while(_g13 < _g4) {
		var p3 = _g13++;
		var _g32 = 0;
		var _g22 = minlg + closePathCorr;
		while(_g32 < _g22) {
			var i3 = _g32++;
			u = us[p3][i3] / uTotalDistance[p3];
			v = vs[i3][p3] / vTotalDistance[i3];
			uvs.push(u);
			uvs.push(v);
		}
	}
	p = 0;
	var pi = 0;
	var l1 = lg[p] - 1;
	var l2 = lg[p + 1] - 1;
	var min;
	if(l1 < l2) min = l1; else min = l2;
	var shft = idx[1] - idx[0];
	var path1nb;
	if(closeArray) path1nb = lg.length; else path1nb = lg.length - 1;
	while(pi <= min && p < path1nb) {
		indices.push(pi);
		indices.push(pi + shft);
		indices.push(pi + 1);
		indices.push(pi + shft + 1);
		indices.push(pi + 1);
		indices.push(pi + shft);
		pi += 1;
		if(pi == min) {
			p++;
			if(p == lg.length - 1) {
				shft = idx[0] - idx[p];
				l1 = lg[p] - 1;
				l2 = lg[0] - 1;
			} else {
				shft = idx[p + 1] - idx[p];
				l1 = lg[p] - 1;
				l2 = lg[p + 1] - 1;
			}
			pi = idx[p];
			if(l1 < l2) min = l1 + pi; else min = l2 + pi;
		}
	}
	com_babylonhx_mesh_VertexData.ComputeNormals(positions,indices,normals);
	if(closePath) {
		var indexFirst = 0;
		var indexLast = 0;
		var _g14 = 0;
		var _g5 = pathArray.length;
		while(_g14 < _g5) {
			var p4 = _g14++;
			indexFirst = idx[p4] * 3;
			if(p4 + 1 < pathArray.length) indexLast = (idx[p4 + 1] - 1) * 3; else indexLast = normals.length - 3;
			normals[indexFirst] = (normals[indexFirst] + normals[indexLast]) * 0.5;
			normals[indexFirst + 1] = (normals[indexFirst + 1] + normals[indexLast + 1]) * 0.5;
			normals[indexFirst + 2] = (normals[indexFirst + 2] + normals[indexLast + 2]) * 0.5;
			normals[indexLast] = normals[indexFirst];
			normals[indexLast + 1] = normals[indexFirst + 1];
			normals[indexLast + 2] = normals[indexFirst + 2];
		}
	}
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	if(closePath) vertexData._idx = idx;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateBox = function(options) {
	var normalsSource = [new com_babylonhx_math_Vector3(0,0,1),new com_babylonhx_math_Vector3(0,0,-1),new com_babylonhx_math_Vector3(1,0,0),new com_babylonhx_math_Vector3(-1,0,0),new com_babylonhx_math_Vector3(0,1,0),new com_babylonhx_math_Vector3(0,-1,0)];
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var width = options.width;
	var height = options.height;
	var depth = options.depth;
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	var faceUV;
	if(options.faceUV != null) faceUV = options.faceUV; else faceUV = [];
	var faceColors = options.faceColors;
	var colors = [];
	var _g = 0;
	while(_g < 6) {
		var f = _g++;
		if(faceUV[f] == null) faceUV[f] = new com_babylonhx_math_Vector4(0,0,1,1);
		if(faceColors != null && faceColors[f] == null) faceColors[f] = new com_babylonhx_math_Color4(1,1,1,1);
	}
	var scaleVector = new com_babylonhx_math_Vector3(width / 2,height / 2,depth / 2);
	var _g1 = 0;
	var _g2 = normalsSource.length;
	while(_g1 < _g2) {
		var index = _g1++;
		var normal = normalsSource[index];
		var side1 = new com_babylonhx_math_Vector3(normal.y,normal.z,normal.x);
		var side2 = com_babylonhx_math_Vector3.Cross(normal,side1);
		var verticesLength = positions.length / 3 | 0;
		indices.push(verticesLength);
		indices.push(verticesLength + 1);
		indices.push(verticesLength + 2);
		indices.push(verticesLength);
		indices.push(verticesLength + 2);
		indices.push(verticesLength + 3);
		var vertex = new com_babylonhx_math_Vector3(normal.x - side1.x,normal.y - side1.y,normal.z - side1.z).subtract(side2).multiply(scaleVector);
		positions.push(vertex.x);
		positions.push(vertex.y);
		positions.push(vertex.z);
		normals.push(normal.x);
		normals.push(normal.y);
		normals.push(normal.z);
		uvs.push(1.0);
		uvs.push(1.0);
		if(faceColors != null) {
			colors.push(faceColors[index].r);
			colors.push(faceColors[index].g);
			colors.push(faceColors[index].b);
			colors.push(faceColors[index].a);
		}
		vertex = new com_babylonhx_math_Vector3(normal.x - side1.x,normal.y - side1.y,normal.z - side1.z).add(side2).multiply(scaleVector);
		positions.push(vertex.x);
		positions.push(vertex.y);
		positions.push(vertex.z);
		normals.push(normal.x);
		normals.push(normal.y);
		normals.push(normal.z);
		uvs.push(0.0);
		uvs.push(1.0);
		if(faceColors != null) {
			colors.push(faceColors[index].r);
			colors.push(faceColors[index].g);
			colors.push(faceColors[index].b);
			colors.push(faceColors[index].a);
		}
		vertex = new com_babylonhx_math_Vector3(normal.x + side1.x,normal.y + side1.y,normal.z + side1.z).add(side2).multiply(scaleVector);
		positions.push(vertex.x);
		positions.push(vertex.y);
		positions.push(vertex.z);
		normals.push(normal.x);
		normals.push(normal.y);
		normals.push(normal.z);
		uvs.push(0.0);
		uvs.push(0.0);
		if(faceColors != null) {
			colors.push(faceColors[index].r);
			colors.push(faceColors[index].g);
			colors.push(faceColors[index].b);
			colors.push(faceColors[index].a);
		}
		vertex = new com_babylonhx_math_Vector3(normal.x + side1.x,normal.y + side1.y,normal.z + side1.z).subtract(side2).multiply(scaleVector);
		positions.push(vertex.x);
		positions.push(vertex.y);
		positions.push(vertex.z);
		normals.push(normal.x);
		normals.push(normal.y);
		normals.push(normal.z);
		uvs.push(1.0);
		uvs.push(0.0);
		if(faceColors != null) {
			colors.push(faceColors[index].r);
			colors.push(faceColors[index].g);
			colors.push(faceColors[index].b);
			colors.push(faceColors[index].a);
		}
	}
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	if(faceColors != null && faceColors.length > 0) {
		var totalColors;
		if(sideOrientation == 2) totalColors = colors.concat(colors); else totalColors = colors;
		vertexData.colors = totalColors;
	}
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateSphere = function(options) {
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var segments;
	if(options.segments != null) segments = options.segments; else segments = 32;
	var diameterX;
	if(options.diameterX != null) diameterX = options.diameterX; else diameterX = 1;
	var diameterY;
	if(options.diameterY != null) diameterY = options.diameterY; else diameterY = 1;
	var diameterZ;
	if(options.diameterZ != null) diameterZ = options.diameterZ; else diameterZ = 1;
	var arc;
	if(options.arc != null) arc = options.arc; else arc = 1.0;
	if(arc < 0) arc = 1.0;
	var slice;
	if(options.slice) slice = options.slice; else slice = 1.0;
	if(slice < 0) slice = 1.0;
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	var radius = new com_babylonhx_math_Vector3(diameterX / 2,diameterY / 2,diameterZ / 2);
	var totalZRotationSteps = 2 + segments;
	var totalYRotationSteps = 2 * totalZRotationSteps;
	var _g1 = 0;
	var _g = totalZRotationSteps + 1;
	while(_g1 < _g) {
		var zRotationStep = _g1++;
		var normalizedZ = zRotationStep / totalZRotationSteps;
		var angleZ = normalizedZ * Math.PI;
		var _g3 = 0;
		var _g2 = totalYRotationSteps + 1;
		while(_g3 < _g2) {
			var yRotationStep = _g3++;
			var normalizedY = yRotationStep / totalYRotationSteps;
			var angleY = normalizedY * Math.PI * 2;
			var rotationZ = com_babylonhx_math_Matrix.RotationZ(-angleZ);
			var rotationY = com_babylonhx_math_Matrix.RotationY(angleY);
			var afterRotZ = com_babylonhx_math_Vector3.TransformCoordinates(new com_babylonhx_math_Vector3(0,1.0,0),rotationZ);
			var complete = com_babylonhx_math_Vector3.TransformCoordinates(afterRotZ,rotationY);
			var vertex = new com_babylonhx_math_Vector3(complete.x * radius.x,complete.y * radius.y,complete.z * radius.z);
			var normal = com_babylonhx_math_Vector3.Normalize(vertex);
			positions.push(vertex.x);
			positions.push(vertex.y);
			positions.push(vertex.z);
			normals.push(normal.x);
			normals.push(normal.y);
			normals.push(normal.z);
			uvs.push(normalizedY);
			uvs.push(normalizedZ);
		}
		if(zRotationStep > 0) {
			var verticesCount = positions.length / 3;
			var firstIndex = verticesCount - 2 * (totalYRotationSteps + 1) | 0;
			while(firstIndex + totalYRotationSteps + 2 < verticesCount) {
				indices.push(firstIndex);
				indices.push(firstIndex + 1);
				indices.push(firstIndex + totalYRotationSteps + 1);
				indices.push(firstIndex + totalYRotationSteps + 1);
				indices.push(firstIndex + 1);
				indices.push(firstIndex + totalYRotationSteps + 2);
				++firstIndex;
			}
		}
	}
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateCylinder = function(options) {
	var height;
	if(options.height != null) height = options.height; else height = 2;
	var diameterTop;
	if(options.diameterTop != null) diameterTop = options.diameterTop; else diameterTop = 1;
	var diameterBottom;
	if(options.diameterBottom != null) diameterBottom = options.diameterBottom; else diameterBottom = 1;
	var tessellation;
	if(options.tessellation != null) tessellation = options.tessellation; else tessellation = 24;
	var subdivisions;
	if(options.subdivisions != null) subdivisions = options.subdivisions; else subdivisions = 1;
	var hasRings;
	if(options.hasRings != null) hasRings = options.hasRings; else hasRings = false;
	var enclose;
	if(options.enclose != null) enclose = options.enclose; else enclose = false;
	var arc;
	if(options.arc != null) arc = options.arc; else arc = 1.0;
	if(arc <= 0 || arc > 1) arc = 1;
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	var faceUV;
	if(options.faceUV != null) faceUV = options.faceUV; else faceUV = [];
	var faceColors;
	if(options.faceColors != null) faceColors = options.faceColors; else faceColors = null;
	var quadNb;
	if(arc != 1 && enclose) quadNb = 2; else quadNb = 0;
	var ringNb;
	if(hasRings) ringNb = subdivisions; else ringNb = 1;
	var colorNb = 2 + (1 + quadNb) * ringNb;
	var _g3 = 0;
	while(_g3 < colorNb) {
		var f = _g3++;
		if(faceColors != null && faceColors[f] == null) faceColors[f] = new com_babylonhx_math_Color4(1,1,1,1);
	}
	var _g4 = 0;
	while(_g4 < 3) {
		var f1 = _g4++;
		if(faceUV != null && faceUV[f1] == null) faceUV[f1] = new com_babylonhx_math_Vector4(0,0,1,1);
	}
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var colors = [];
	var angle_step = Math.PI * 2 * arc / tessellation;
	var angle = 0;
	var h = 0;
	var radius = 0;
	var tan = (diameterBottom - diameterTop) / 2 / height;
	var ringVertex = new com_babylonhx_math_Vector3(0,0,0);
	var ringNormal = new com_babylonhx_math_Vector3(0,0,0);
	var ringFirstVertex = new com_babylonhx_math_Vector3(0,0,0);
	var ringFirstNormal = new com_babylonhx_math_Vector3(0,0,0);
	var quadNormal = new com_babylonhx_math_Vector3(0,0,0);
	var Y = com_babylonhx_math_Axis.Y;
	var ringIdx = 1;
	var c = 1;
	var _g11 = 0;
	var _g5 = subdivisions + 1;
	while(_g11 < _g5) {
		var i6 = _g11++;
		h = i6 / subdivisions;
		radius = (h * (diameterTop - diameterBottom) + diameterBottom) / 2;
		if(hasRings && i6 != 0 && i6 != subdivisions) ringIdx = 2; else ringIdx = 1;
		var _g21 = 0;
		while(_g21 < ringIdx) {
			var r = _g21++;
			if(hasRings) c += r;
			if(enclose) c += 2 * r;
			var _g41 = 0;
			var _g31 = tessellation + 1;
			while(_g41 < _g31) {
				var j = _g41++;
				angle = j * angle_step;
				ringVertex.x = Math.cos(-angle) * radius;
				ringVertex.y = -height / 2 + h * height;
				ringVertex.z = Math.sin(-angle) * radius;
				if(diameterTop == 0 && i6 == subdivisions) {
					ringNormal.x = normals[normals.length - (tessellation + 1) * 3];
					ringNormal.y = normals[normals.length - (tessellation + 1) * 3 + 1];
					ringNormal.z = normals[normals.length - (tessellation + 1) * 3 + 2];
				} else {
					ringNormal.x = ringVertex.x;
					ringNormal.z = ringVertex.z;
					ringNormal.y = Math.sqrt(ringNormal.x * ringNormal.x + ringNormal.z * ringNormal.z) * tan;
					ringNormal.normalize();
				}
				if(j == 0) {
					ringFirstVertex.x = ringVertex.x;
					ringFirstVertex.y = ringVertex.y;
					ringFirstVertex.z = ringVertex.z;
					ringFirstNormal.x = ringNormal.x;
					ringFirstNormal.y = ringNormal.y;
					ringFirstNormal.z = ringNormal.z;
				}
				positions.push(ringVertex.x);
				positions.push(ringVertex.y);
				positions.push(ringVertex.z);
				normals.push(ringNormal.x);
				normals.push(ringNormal.y);
				normals.push(ringNormal.z);
				uvs.push(faceUV[1].x + (faceUV[1].z - faceUV[1].x) * j / tessellation);
				uvs.push(faceUV[1].y + (faceUV[1].w - faceUV[1].y) * h);
				if(faceColors != null) {
					colors.push(faceColors[c].r);
					colors.push(faceColors[c].g);
					colors.push(faceColors[c].b);
					colors.push(faceColors[c].a);
				}
			}
			if(arc != 1 && enclose) {
				positions.push(ringVertex.x);
				positions.push(ringVertex.y);
				positions.push(ringVertex.z);
				positions.push(0);
				positions.push(ringVertex.y);
				positions.push(0);
				positions.push(0);
				positions.push(ringVertex.y);
				positions.push(0);
				positions.push(ringFirstVertex.x);
				positions.push(ringFirstVertex.y);
				positions.push(ringFirstVertex.z);
				quadNormal.x = Y.y * ringNormal.z - Y.z * ringNormal.y;
				quadNormal.y = Y.z * ringNormal.x - Y.x * ringNormal.z;
				quadNormal.z = Y.x * ringNormal.y - Y.y * ringNormal.x;
				quadNormal.normalize();
				normals.push(quadNormal.x);
				normals.push(quadNormal.y);
				normals.push(quadNormal.z);
				normals.push(quadNormal.x);
				normals.push(quadNormal.y);
				normals.push(quadNormal.z);
				quadNormal.x = ringFirstNormal.y * Y.z - ringFirstNormal.z * Y.y;
				quadNormal.y = ringFirstNormal.z * Y.x - ringFirstNormal.x * Y.z;
				quadNormal.z = ringFirstNormal.x * Y.y - ringFirstNormal.y * Y.x;
				quadNormal.normalize();
				normals.push(quadNormal.x);
				normals.push(quadNormal.y);
				normals.push(quadNormal.z);
				normals.push(quadNormal.x);
				normals.push(quadNormal.y);
				normals.push(quadNormal.z);
				uvs.push(faceUV[1].x + (faceUV[1].z - faceUV[1].x));
				uvs.push(faceUV[1].y + (faceUV[1].w - faceUV[1].y));
				uvs.push(faceUV[1].x + (faceUV[1].z - faceUV[1].x));
				uvs.push(faceUV[1].y + (faceUV[1].w - faceUV[1].y));
				uvs.push(faceUV[1].x + (faceUV[1].z - faceUV[1].x));
				uvs.push(faceUV[1].y + (faceUV[1].w - faceUV[1].y));
				uvs.push(faceUV[1].x + (faceUV[1].z - faceUV[1].x));
				uvs.push(faceUV[1].y + (faceUV[1].w - faceUV[1].y));
				colors.push(faceColors[c + 1].r);
				colors.push(faceColors[c + 1].g);
				colors.push(faceColors[c + 1].b);
				colors.push(faceColors[c + 1].a);
				colors.push(faceColors[c + 1].r);
				colors.push(faceColors[c + 1].g);
				colors.push(faceColors[c + 1].b);
				colors.push(faceColors[c + 1].a);
				colors.push(faceColors[c + 2].r);
				colors.push(faceColors[c + 2].g);
				colors.push(faceColors[c + 2].b);
				colors.push(faceColors[c + 2].a);
				colors.push(faceColors[c + 2].r);
				colors.push(faceColors[c + 2].g);
				colors.push(faceColors[c + 2].b);
				colors.push(faceColors[c + 2].a);
			}
		}
	}
	var e;
	if(arc != 1 && enclose) e = tessellation + 4; else e = tessellation;
	var i = 0;
	var i0 = 0;
	var i1 = 0;
	var i2 = 0;
	var i3 = 0;
	var _g6 = 0;
	while(_g6 < subdivisions) {
		var s = _g6++;
		var _g12 = 0;
		while(_g12 < tessellation) {
			var j1 = _g12++;
			var i01 = i * (e + 1) + j1;
			var i11 = (i + 1) * (e + 1) + j1;
			var i21 = i * (e + 1) + (j1 + 1);
			var i31 = (i + 1) * (e + 1) + (j1 + 1);
			indices.push(i01);
			indices.push(i11);
			indices.push(i21);
			indices.push(i31);
			indices.push(i21);
			indices.push(i11);
		}
		if(arc != 1 && enclose) {
			indices.push(i0 + 2);
			indices.push(i1 + 2);
			indices.push(i2 + 2);
			indices.push(i3 + 2);
			indices.push(i2 + 2);
			indices.push(i1 + 2);
			indices.push(i0 + 4);
			indices.push(i1 + 4);
			indices.push(i2 + 4);
			indices.push(i3 + 4);
			indices.push(i2 + 4);
			indices.push(i1 + 4);
		}
		if(hasRings) i = i + 2; else i = i + 1;
	}
	var createCylinderCap = function(isTop) {
		var radius1;
		if(isTop) radius1 = diameterTop / 2; else radius1 = diameterBottom / 2;
		if(radius1 == 0) return;
		var angle1 = 0;
		var circleVector = null;
		var u;
		if(isTop) u = faceUV[2]; else u = faceUV[0];
		var c1 = null;
		if(faceColors != null) if(isTop) c1 = faceColors[2]; else c1 = faceColors[0];
		var vbase = positions.length / 3 | 0;
		var offset;
		if(isTop) offset = height / 2; else offset = -height / 2;
		var center = new com_babylonhx_math_Vector3(0,offset,0);
		positions.push(center.x);
		positions.push(center.y);
		positions.push(center.z);
		normals.push(0);
		normals.push(isTop?1:-1);
		normals.push(0);
		uvs.push(u.x + (u.z - u.x) * 0.5);
		uvs.push(u.y + (u.w - u.y) * 0.5);
		if(faceColors != null) {
			colors.push(c1.r);
			colors.push(c1.g);
			colors.push(c1.b);
			colors.push(c1.a);
		}
		var textureScale = new com_babylonhx_math_Vector2(0.5,0.5);
		var _g1 = 0;
		var _g = tessellation + 1;
		while(_g1 < _g) {
			var i4 = _g1++;
			angle1 = Math.PI * 2 * i4 * arc / tessellation;
			var cos = Math.cos(-angle1);
			var sin = Math.sin(-angle1);
			circleVector = new com_babylonhx_math_Vector3(cos * radius1,offset,sin * radius1);
			var textureCoordinate = new com_babylonhx_math_Vector2(cos * textureScale.x + 0.5,sin * textureScale.y + 0.5);
			positions.push(circleVector.x);
			positions.push(circleVector.y);
			positions.push(circleVector.z);
			normals.push(0);
			normals.push(isTop?1:-1);
			normals.push(0);
			uvs.push(u.x + (u.z - u.x) * textureCoordinate.x);
			uvs.push(u.y + (u.w - u.y) * textureCoordinate.y);
			if(faceColors != null) {
				colors.push(c1.r);
				colors.push(c1.g);
				colors.push(c1.b);
				colors.push(c1.a);
			}
		}
		var _g2 = 0;
		while(_g2 < tessellation) {
			var i5 = _g2++;
			if(!isTop) {
				indices.push(vbase);
				indices.push(vbase + (i5 + 1));
				indices.push(vbase + (i5 + 2));
			} else {
				indices.push(vbase);
				indices.push(vbase + (i5 + 2));
				indices.push(vbase + (i5 + 1));
			}
		}
	};
	createCylinderCap(false);
	createCylinderCap(true);
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	if(faceColors != null) vertexData.colors = colors;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CylinderOptions = function(options) {
	var height;
	if(options.height != null) height = options.height; else height = 2;
	var diameterTop;
	if(options.diameterTop != null) diameterTop = options.diameterTop; else diameterTop = 1;
	var diameterBottom;
	if(options.diameterBottom != null) diameterBottom = options.diameterBottom; else diameterBottom = 1;
	var tessellation;
	if(options.tessellation != null) tessellation = options.tessellation; else tessellation = 24;
	var subdivisions;
	if(options.subdivisions != null) subdivisions = options.subdivisions; else subdivisions = 1;
	var hasRings;
	if(options.hasRings != null) hasRings = options.hasRings; else hasRings = false;
	var arc;
	if(options.arc != null) arc = options.arc; else arc = 1.0;
	if(arc <= 0 || arc > 1) arc = 1.0;
	var sideOrientation = options.sideOrientation;
	var faceUV;
	if(options.faceUV != null) faceUV = options.faceUV; else faceUV = [];
	var faceColors = options.faceColors;
	var _g3 = 0;
	while(_g3 < 3) {
		var f = _g3++;
		if(faceColors != null && faceColors[f] == null) faceColors[f] = new com_babylonhx_math_Color4(1,1,1,1);
		if(faceUV != null && faceUV[f] == null) faceUV[f] = new com_babylonhx_math_Vector4(0,0,1,1);
	}
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var colors = [];
	var angle_step = Math.PI * 2 / tessellation;
	var angle = 0;
	var h = 0;
	var radius = 0;
	var tan = (diameterBottom - diameterTop) / 2 / height;
	var ringVertex = new com_babylonhx_math_Vector3(0,0,0);
	var ringNormal = new com_babylonhx_math_Vector3(0,0,0);
	var ringIdx = 1;
	var _g11 = 0;
	var _g4 = subdivisions + 1;
	while(_g11 < _g4) {
		var i3 = _g11++;
		h = i3 / subdivisions;
		radius = (h * (diameterTop - diameterBottom) + diameterBottom) / 2;
		if(hasRings && i3 != 0 && i3 != subdivisions) ringIdx = 2; else ringIdx = 1;
		var _g21 = 0;
		while(_g21 < ringIdx) {
			var r = _g21++;
			var _g41 = 0;
			var _g31 = tessellation + 1;
			while(_g41 < _g31) {
				var j = _g41++;
				angle = j * angle_step;
				ringVertex.x = Math.cos(-angle) * radius;
				ringVertex.y = -height / 2 + h * height;
				ringVertex.z = Math.sin(-angle) * radius;
				if(diameterTop == 0 && i3 == subdivisions) {
					ringNormal.x = normals[normals.length - (tessellation + 1) * 3];
					ringNormal.y = normals[normals.length - (tessellation + 1) * 3 + 1];
					ringNormal.z = normals[normals.length - (tessellation + 1) * 3 + 2];
				} else {
					ringNormal.x = ringVertex.x;
					ringNormal.z = ringVertex.z;
					ringNormal.y = Math.sqrt(ringNormal.x * ringNormal.x + ringNormal.z * ringNormal.z) * tan;
					ringNormal.normalize();
				}
				positions.push(ringVertex.x);
				positions.push(ringVertex.y);
				positions.push(ringVertex.z);
				normals.push(ringNormal.x);
				normals.push(ringNormal.y);
				normals.push(ringNormal.z);
				uvs.push(faceUV[1].x + (faceUV[1].z - faceUV[1].x) * j / tessellation);
				uvs.push(faceUV[1].y + (faceUV[1].w - faceUV[1].y) * h);
				if(faceColors != null) {
					colors.push(faceColors[1].r);
					colors.push(faceColors[1].g);
					colors.push(faceColors[1].b);
					colors.push(faceColors[1].a);
				}
			}
		}
	}
	var i = 0;
	var _g5 = 0;
	while(_g5 < subdivisions) {
		var s = _g5++;
		var _g12 = 0;
		while(_g12 < tessellation) {
			var j1 = _g12++;
			var i0 = i * (tessellation + 1) + j1;
			var i11 = (i + 1) * (tessellation + 1) + j1;
			var i21 = i * (tessellation + 1) + (j1 + 1);
			var i31 = (i + 1) * (tessellation + 1) + (j1 + 1);
			indices.push(i0);
			indices.push(i11);
			indices.push(i21);
			indices.push(i31);
			indices.push(i21);
			indices.push(i11);
		}
		if(hasRings) i = i + 2; else i = i + 1;
	}
	var createCylinderCap = function(isTop) {
		var radius1;
		if(isTop) radius1 = diameterTop / 2; else radius1 = diameterBottom / 2;
		if(radius1 == 0) return;
		var angle1 = 0;
		var circleVector = null;
		var u;
		if(isTop) u = faceUV[2]; else u = faceUV[0];
		var c = null;
		if(faceColors != null) if(isTop) c = faceColors[2]; else c = faceColors[0];
		var vbase = positions.length / 3 | 0;
		var offset;
		if(isTop) offset = height / 2; else offset = -height / 2;
		var center = new com_babylonhx_math_Vector3(0,offset,0);
		positions.push(center.x);
		positions.push(center.y);
		positions.push(center.z);
		normals.push(0);
		normals.push(isTop?1:-1);
		normals.push(0);
		uvs.push(u.x + (u.z - u.x) * 0.5);
		uvs.push(u.y + (u.w - u.y) * 0.5);
		if(faceColors != null) {
			colors.push(c.r);
			colors.push(c.g);
			colors.push(c.b);
			colors.push(c.a);
		}
		var textureScale = new com_babylonhx_math_Vector2(0.5,0.5);
		var _g1 = 0;
		var _g = tessellation + 1;
		while(_g1 < _g) {
			var i1 = _g1++;
			angle1 = Math.PI * 2 * i1 * arc / tessellation;
			var cos = Math.cos(-angle1);
			var sin = Math.sin(-angle1);
			circleVector = new com_babylonhx_math_Vector3(cos * radius1,offset,sin * radius1);
			var textureCoordinate = new com_babylonhx_math_Vector2(cos * textureScale.x + 0.5,sin * textureScale.y + 0.5);
			positions.push(circleVector.x);
			positions.push(circleVector.y);
			positions.push(circleVector.z);
			normals.push(0);
			normals.push(isTop?1:-1);
			normals.push(0);
			uvs.push(u.x + (u.z - u.x) * textureCoordinate.x);
			uvs.push(u.y + (u.w - u.y) * textureCoordinate.y);
			if(faceColors != null) {
				colors.push(c.r);
				colors.push(c.g);
				colors.push(c.b);
				colors.push(c.a);
			}
		}
		var _g2 = 0;
		while(_g2 < tessellation) {
			var i2 = _g2++;
			if(!isTop) {
				indices.push(vbase);
				indices.push(vbase + (i2 + 1));
				indices.push(vbase + (i2 + 2));
			} else {
				indices.push(vbase);
				indices.push(vbase + (i2 + 2));
				indices.push(vbase + (i2 + 1));
			}
		}
	};
	createCylinderCap(false);
	createCylinderCap(true);
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	if(faceColors != null) vertexData.colors = colors;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateTorus = function(options) {
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var diameter;
	if(options.diameter != null) diameter = options.diameter; else diameter = 1;
	var thickness;
	if(options.thickness != null) thickness = options.thickness; else thickness = 0.5;
	var tessellation;
	if(options.tessellation != null) tessellation = options.tessellation; else tessellation = 16;
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	var stride = tessellation + 1;
	var _g1 = 0;
	var _g = tessellation + 1;
	while(_g1 < _g) {
		var i = _g1++;
		var u = i / tessellation;
		var outerAngle = i * Math.PI * 2.0 / tessellation - Math.PI / 2.0;
		var transform = com_babylonhx_math_Matrix.Translation(diameter / 2.0,0,0).multiply(com_babylonhx_math_Matrix.RotationY(outerAngle));
		var _g3 = 0;
		var _g2 = tessellation + 1;
		while(_g3 < _g2) {
			var j = _g3++;
			var v = 1 - j / tessellation;
			var innerAngle = j * Math.PI * 2.0 / tessellation + Math.PI;
			var dx = Math.cos(innerAngle);
			var dy = Math.sin(innerAngle);
			var normal = new com_babylonhx_math_Vector3(dx,dy,0);
			var position = normal.scale(thickness / 2);
			var textureCoordinate = new com_babylonhx_math_Vector2(u,v);
			position = com_babylonhx_math_Vector3.TransformCoordinates(position,transform);
			normal = com_babylonhx_math_Vector3.TransformNormal(normal,transform);
			positions.push(position.x);
			positions.push(position.y);
			positions.push(position.z);
			normals.push(normal.x);
			normals.push(normal.y);
			normals.push(normal.z);
			uvs.push(textureCoordinate.x);
			uvs.push(textureCoordinate.y);
			var nextI = (i + 1) % stride;
			var nextJ = (j + 1) % stride;
			indices.push(i * stride + j);
			indices.push(i * stride + nextJ);
			indices.push(nextI * stride + j);
			indices.push(i * stride + nextJ);
			indices.push(nextI * stride + nextJ);
			indices.push(nextI * stride + j);
		}
	}
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateLines = function(options) {
	var indices = [];
	var positions = [];
	var points = options.points;
	var _g1 = 0;
	var _g = points.length;
	while(_g1 < _g) {
		var index = _g1++;
		positions.push(points[index].x);
		positions.push(points[index].y);
		positions.push(points[index].z);
		if(index > 0) {
			indices.push(index - 1);
			indices.push(index);
		}
	}
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateDashedLines = function(options) {
	var positions = [];
	var indices = [];
	var dashSize;
	if(options.dashSize != null) dashSize = options.dashSize; else dashSize = 3;
	var gapSize;
	if(options.gapSize != null) gapSize = options.gapSize; else gapSize = 1;
	var dashNb;
	if(options.dashNb != null) dashNb = options.dashNb; else dashNb = 200;
	var points = options.points;
	var curvect = new com_babylonhx_math_Vector3(0,0,0);
	var lg = 0;
	var nb = 0;
	var shft = 0;
	var dashshft = 0;
	var curshft = 0;
	var idx = 0;
	var _g1 = 0;
	var _g = points.length - 1;
	while(_g1 < _g) {
		var i = _g1++;
		points[i + 1].subtractToRef(points[i],curvect);
		lg += Math.sqrt(curvect.x * curvect.x + curvect.y * curvect.y + curvect.z * curvect.z);
	}
	shft = lg / dashNb;
	dashshft = dashSize * shft / (dashSize + gapSize);
	var _g11 = 0;
	var _g2 = points.length - 1;
	while(_g11 < _g2) {
		var i1 = _g11++;
		points[i1 + 1].subtractToRef(points[i1],curvect);
		nb = Math.floor(Math.sqrt(curvect.x * curvect.x + curvect.y * curvect.y + curvect.z * curvect.z) / shft);
		curvect.normalize();
		var _g21 = 0;
		while(_g21 < nb) {
			var j = _g21++;
			curshft = shft * j;
			positions.push(points[i1].x + curshft * curvect.x);
			positions.push(points[i1].y + curshft * curvect.y);
			positions.push(points[i1].z + curshft * curvect.z);
			positions.push(points[i1].x + (curshft + dashshft) * curvect.x);
			positions.push(points[i1].y + (curshft + dashshft) * curvect.y);
			positions.push(points[i1].z + (curshft + dashshft) * curvect.z);
			indices.push(idx);
			indices.push(idx + 1);
			idx += 2;
		}
	}
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.positions = positions;
	vertexData.indices = indices;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateGround = function(options) {
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var width;
	if(options.width != null) width = options.width; else width = 1;
	var height;
	if(options.height != null) height = options.height; else height = 1;
	var subdivisions;
	if(options.subdivision != null) subdivisions = options.subdivision; else subdivisions = 1;
	var _g1 = 0;
	var _g = subdivisions + 1;
	while(_g1 < _g) {
		var row = _g1++;
		var _g3 = 0;
		var _g2 = subdivisions + 1;
		while(_g3 < _g2) {
			var col = _g3++;
			var position = new com_babylonhx_math_Vector3(col * width / subdivisions - width / 2.0,0,(subdivisions - row) * height / subdivisions - height / 2.0);
			var normal = new com_babylonhx_math_Vector3(0,1.0,0);
			positions.push(position.x);
			positions.push(position.y);
			positions.push(position.z);
			normals.push(normal.x);
			normals.push(normal.y);
			normals.push(normal.z);
			uvs.push(col / subdivisions);
			uvs.push(1.0 - row / subdivisions);
		}
	}
	var _g4 = 0;
	while(_g4 < subdivisions) {
		var row1 = _g4++;
		var _g11 = 0;
		while(_g11 < subdivisions) {
			var col1 = _g11++;
			indices.push(col1 + 1 + (row1 + 1) * (subdivisions + 1));
			indices.push(col1 + 1 + row1 * (subdivisions + 1));
			indices.push(col1 + row1 * (subdivisions + 1));
			indices.push(col1 + (row1 + 1) * (subdivisions + 1));
			indices.push(col1 + 1 + (row1 + 1) * (subdivisions + 1));
			indices.push(col1 + row1 * (subdivisions + 1));
		}
	}
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateTiledGround = function(options) {
	var xmin = options.xmin;
	var zmin = options.zmin;
	var xmax = options.xmax;
	var zmax = options.zmax;
	var subdivisions;
	if(options.subdivision != null) subdivisions = options.subdivision; else subdivisions = { w : 1, h : 1};
	var precision;
	if(options.precision != null) precision = options.precision; else precision = { w : 1, h : 1};
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	if(subdivisions.w < 1) subdivisions.h = 1; else subdivisions.h = subdivisions.h;
	if(subdivisions.w < 1) subdivisions.w = 1; else subdivisions.w = subdivisions.w;
	if(precision.w < 1) precision.w = 1; else precision.w = precision.w;
	if(precision.h < 1) precision.h = 1; else precision.h = precision.h;
	var tileSize_w = (xmax - xmin) / subdivisions.w;
	var tileSize_h = (zmax - zmin) / subdivisions.h;
	var applyTile = function(xTileMin,zTileMin,xTileMax,zTileMax) {
		var base = positions.length / 3;
		var rowLength = precision.w + 1;
		var _g1 = 0;
		var _g = precision.h;
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = 0;
			var _g2 = precision.w;
			while(_g3 < _g2) {
				var col = _g3++;
				var square_0 = base + col + row * rowLength | 0;
				var square_1 = base + (col + 1) + row * rowLength | 0;
				var square_2 = base + (col + 1) + (row + 1) * rowLength | 0;
				var square_3 = base + col + (row + 1) * rowLength | 0;
				indices.push(square_1);
				indices.push(square_2);
				indices.push(square_3);
				indices.push(square_0);
				indices.push(square_1);
				indices.push(square_3);
			}
		}
		var position = new com_babylonhx_math_Vector3(0,0,0);
		var normal = new com_babylonhx_math_Vector3(0,1.0,0);
		var _g11 = 0;
		var _g4 = precision.h + 1;
		while(_g11 < _g4) {
			var row1 = _g11++;
			position.z = row1 * (zTileMax - zTileMin) / precision.h + zTileMin;
			var _g31 = 0;
			var _g21 = precision.w + 1;
			while(_g31 < _g21) {
				var col1 = _g31++;
				position.x = col1 * (xTileMax - xTileMin) / precision.w + xTileMin;
				position.y = 0;
				positions.push(position.x);
				positions.push(position.y);
				positions.push(position.z);
				normals.push(normal.x);
				normals.push(normal.y);
				normals.push(normal.z);
				uvs.push(col1 / precision.w);
				uvs.push(row1 / precision.h);
			}
		}
	};
	var _g12 = 0;
	var _g5 = subdivisions.h;
	while(_g12 < _g5) {
		var tileRow = _g12++;
		var _g32 = 0;
		var _g22 = subdivisions.w;
		while(_g32 < _g22) {
			var tileCol = _g32++;
			applyTile(xmin + tileCol * tileSize_w,zmin + tileRow * tileSize_h,xmin + (tileCol + 1) * tileSize_w,zmin + (tileRow + 1) * tileSize_h);
		}
	}
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateGroundFromHeightMap = function(options) {
	var width = options.width;
	var height = options.height;
	var subdivisions = options.subdivisions;
	var minHeight = options.minHeight;
	var maxHeight = options.maxHeight;
	var buffer = options.buffer;
	var bufferWidth = options.bufferWidth;
	var bufferHeight = options.bufferHeight;
	haxe_Log.trace(buffer.length,{ fileName : "VertexData.hx", lineNumber : 1647, className : "com.babylonhx.mesh.VertexData", methodName : "CreateGroundFromHeightMap"});
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var _g1 = 0;
	var _g = subdivisions + 1;
	while(_g1 < _g) {
		var row = _g1++;
		var _g3 = 0;
		var _g2 = subdivisions + 1;
		while(_g3 < _g2) {
			var col = _g3++;
			var position = new com_babylonhx_math_Vector3(col * width / subdivisions - width / 2.0,0,(subdivisions - row) * height / subdivisions - height / 2.0);
			var heightMapX = (position.x + width / 2) / width * (bufferWidth - 1) | 0;
			var heightMapY = (1.0 - (position.z + height / 2) / height) * (bufferHeight - 1) | 0;
			var pos = (heightMapX + heightMapY * bufferWidth) * 4 | 0;
			var r = _$UInt_UInt_$Impl_$.toFloat(buffer[pos]) / 255.0;
			var g = _$UInt_UInt_$Impl_$.toFloat(buffer[pos + 1]) / 255.0;
			var b = _$UInt_UInt_$Impl_$.toFloat(buffer[pos + 2]) / 255.0;
			var gradient = r * 0.3 + g * 0.59 + b * 0.11;
			position.y = minHeight + (maxHeight - minHeight) * gradient;
			positions.push(position.x);
			positions.push(position.y);
			positions.push(position.z);
			normals.push(0);
			normals.push(0);
			normals.push(0);
			uvs.push(col / subdivisions);
			uvs.push(1.0 - row / subdivisions);
		}
	}
	var _g4 = 0;
	while(_g4 < subdivisions) {
		var row1 = _g4++;
		var _g11 = 0;
		while(_g11 < subdivisions) {
			var col1 = _g11++;
			indices.push(col1 + 1 + (row1 + 1) * (subdivisions + 1));
			indices.push(col1 + 1 + row1 * (subdivisions + 1));
			indices.push(col1 + row1 * (subdivisions + 1));
			indices.push(col1 + (row1 + 1) * (subdivisions + 1));
			indices.push(col1 + 1 + (row1 + 1) * (subdivisions + 1));
			indices.push(col1 + row1 * (subdivisions + 1));
		}
	}
	com_babylonhx_mesh_VertexData.ComputeNormals(positions,indices,normals);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreatePlane = function(options) {
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var width;
	if(options.width != null) width = options.width; else width = 1;
	var height;
	if(options.height != null) height = options.height; else height = 1;
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	var halfWidth = width / 2;
	var halfHeight = height / 2;
	positions.push(-halfWidth);
	positions.push(-halfHeight);
	positions.push(0);
	normals.push(0);
	normals.push(0);
	normals.push(-1.0);
	uvs.push(0.0);
	uvs.push(0.0);
	positions.push(halfWidth);
	positions.push(-halfHeight);
	positions.push(0);
	normals.push(0);
	normals.push(0);
	normals.push(-1.0);
	uvs.push(1.0);
	uvs.push(0.0);
	positions.push(halfWidth);
	positions.push(halfHeight);
	positions.push(0);
	normals.push(0);
	normals.push(0);
	normals.push(-1.0);
	uvs.push(1.0);
	uvs.push(1.0);
	positions.push(-halfWidth);
	positions.push(halfHeight);
	positions.push(0);
	normals.push(0);
	normals.push(0);
	normals.push(-1.0);
	uvs.push(0.0);
	uvs.push(1.0);
	indices.push(0);
	indices.push(1);
	indices.push(2);
	indices.push(0);
	indices.push(2);
	indices.push(3);
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateDisc = function(options) {
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var radius;
	if(options.radius != null) radius = options.radius; else radius = 0.5;
	var tessellation;
	if(options.tessellation != null) tessellation = options.tessellation; else tessellation = 64;
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	positions.push(0);
	positions.push(0);
	positions.push(0);
	uvs.push(0.5);
	uvs.push(0.5);
	var step = Math.PI * 2 / tessellation;
	var a = 0.0;
	while(a < Math.PI * 2) {
		var x = Math.cos(a);
		var y = Math.sin(a);
		var u = (x + 1) / 2;
		var v = (1 - y) / 2;
		positions.push(radius * x);
		positions.push(radius * y);
		positions.push(0);
		uvs.push(u);
		uvs.push(v);
		a += step;
	}
	positions.push(positions[3]);
	positions.push(positions[4]);
	positions.push(positions[5]);
	uvs.push(uvs[2]);
	uvs.push(uvs[3]);
	var vertexNb = positions.length / 3 | 0;
	var _g1 = 1;
	var _g = vertexNb - 1;
	while(_g1 < _g) {
		var i = _g1++;
		indices.push(i + 1);
		indices.push(0);
		indices.push(i);
	}
	com_babylonhx_mesh_VertexData.ComputeNormals(positions,indices,normals);
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateIcoSphere = function(options) {
	var sideOrientation = options.sideOrientation;
	var radius;
	if(options.radius != null) radius = options.radius; else radius = 1;
	var flat;
	if(options.flat == null) flat = true; else flat = options.flat;
	var subdivisions;
	if(options.subdivisions != null) subdivisions = options.subdivisions; else subdivisions = 4;
	var radiusX;
	if(options.radiusX != null) radiusX = options.radiusX; else radiusX = radius;
	var radiusY;
	if(options.radiusY != null) radiusY = options.radiusY; else radiusY = radius;
	var radiusZ;
	if(options.radiusZ != null) radiusZ = options.radiusZ; else radiusZ = radius;
	var t = (1 + Math.sqrt(5)) / 2;
	var ico_vertices = [-1,t,0,1,t,0,-1,-t,0,1,-t,0,0,-1,-t,0,1,-t,0,-1,t,0,1,t,t,0,1,t,0,-1,-t,0,1,-t,0,-1];
	var ico_indices = [0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];
	var ico_vertexuv = [4,1,2,1,6,3,5,4,4,3,3,2,7,4,3,0,1,0,0,1,5,0,5,2];
	var ustep = 0.0947265625;
	var vstep = 0.1640625;
	var uoffset = 0.048828125;
	var voffset = 0.0498046875;
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var current_indice = 0;
	var face_vertex_pos = [];
	var face_vertex_uv = [];
	var _g = 0;
	while(_g < 3) {
		var v012 = _g++;
		face_vertex_pos[v012] = new com_babylonhx_math_Vector3(0,0,0);
		face_vertex_uv[v012] = new com_babylonhx_math_Vector2(0,0);
	}
	var _g1 = 0;
	while(_g1 < 20) {
		var face = _g1++;
		var _g11 = 0;
		while(_g11 < 3) {
			var v0121 = _g11++;
			var v_id = ico_indices[3 * face + v0121];
			face_vertex_pos[v0121].copyFromFloats(ico_vertices[3 * v_id],ico_vertices[3 * v_id + 1],ico_vertices[3 * v_id + 2]);
			face_vertex_pos[v0121].normalize().scaleInPlace(radius);
			var fix = 0;
			if(face == 5 && v0121 == 2) fix = 1;
			if(face == 15 && v0121 == 1) fix = 2;
			if(face == 10 && v0121 == 1) fix = 3;
			if(face == 14 && v0121 == 2) fix = 4;
			if(face == 4 && v0121 == 1) fix = 1;
			if(face == 7 && v0121 == 1) fix = 2;
			if(face == 17 && v0121 == 2) fix = 3;
			if(face == 8 && v0121 == 0) fix = 4;
			if(face == 8 && v0121 == 1) fix = 5;
			if(face == 18 && v0121 == 0) fix = 5;
			if(face == 13 && v0121 == 2) fix = 5;
			if(face == 14 && v0121 == 1) fix = 5;
			if(face == 18 && v0121 == 2) fix = 5;
			face_vertex_uv[v0121].copyFromFloats((ico_vertexuv[2 * v_id] + fix) * ustep + uoffset,(ico_vertexuv[2 * v_id + 1] + fix) * vstep + voffset);
		}
		var interp_vertex = function(i1,i2,c1,c2) {
			var pos_x0 = com_babylonhx_math_Vector3.Lerp(face_vertex_pos[0],face_vertex_pos[2],i2 / subdivisions);
			var pos_x1 = com_babylonhx_math_Vector3.Lerp(face_vertex_pos[1],face_vertex_pos[2],i2 / subdivisions);
			var pos_interp;
			if(subdivisions == i2) pos_interp = face_vertex_pos[2]; else pos_interp = com_babylonhx_math_Vector3.Lerp(pos_x0,pos_x1,i1 / (subdivisions - i2));
			pos_interp.normalize();
			pos_interp.x *= radiusX;
			pos_interp.y *= radiusY;
			pos_interp.z *= radiusZ;
			var vertex_normal = null;
			if(flat) {
				var centroid_x0 = com_babylonhx_math_Vector3.Lerp(face_vertex_pos[0],face_vertex_pos[2],c2 / subdivisions);
				var centroid_x1 = com_babylonhx_math_Vector3.Lerp(face_vertex_pos[1],face_vertex_pos[2],c2 / subdivisions);
				var centroid_interp = com_babylonhx_math_Vector3.Lerp(centroid_x0,centroid_x1,c1 / (subdivisions - c2));
				vertex_normal = com_babylonhx_math_Vector3.Normalize(centroid_interp);
			} else vertex_normal = com_babylonhx_math_Vector3.Normalize(pos_interp);
			var uv_x0 = com_babylonhx_math_Vector2.Lerp(face_vertex_uv[0],face_vertex_uv[2],i2 / subdivisions);
			var uv_x1 = com_babylonhx_math_Vector2.Lerp(face_vertex_uv[1],face_vertex_uv[2],i2 / subdivisions);
			var uv_interp;
			if(subdivisions == i2) uv_interp = face_vertex_uv[2]; else uv_interp = com_babylonhx_math_Vector2.Lerp(uv_x0,uv_x1,i1 / (subdivisions - i2));
			positions.push(pos_interp.x);
			positions.push(pos_interp.y);
			positions.push(pos_interp.z);
			normals.push(vertex_normal.x);
			normals.push(vertex_normal.y);
			normals.push(vertex_normal.z);
			uvs.push(uv_interp.x);
			uvs.push(uv_interp.y);
			indices.push(current_indice);
			current_indice++;
		};
		var _g12 = 0;
		while(_g12 < subdivisions) {
			var i21 = _g12++;
			var i11 = 0;
			while(i11 + i21 < subdivisions) {
				interp_vertex(i11,i21,i11 + 0.333333333333333315,i21 + 0.333333333333333315);
				interp_vertex(i11 + 1,i21,i11 + 0.333333333333333315,i21 + 0.333333333333333315);
				interp_vertex(i11,i21 + 1,i11 + 0.333333333333333315,i21 + 0.333333333333333315);
				if(i11 + i21 + 1 < subdivisions) {
					interp_vertex(i11 + 1,i21,i11 + 0.66666666666666663,i21 + 0.66666666666666663);
					interp_vertex(i11 + 1,i21 + 1,i11 + 0.66666666666666663,i21 + 0.66666666666666663);
					interp_vertex(i11,i21 + 1,i11 + 0.66666666666666663,i21 + 0.66666666666666663);
				}
				++i11;
			}
		}
	}
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreatePolyhedron = function(options) {
	var polyhedra = [];
	polyhedra[0] = { vertex : [[0,0,1.732051],[1.632993,0,-0.5773503],[-0.8164966,1.414214,-0.5773503],[-0.8164966,-1.414214,-0.5773503]], face : [[0,1,2],[0,2,3],[0,3,1],[1,3,2]]};
	polyhedra[1] = { vertex : [[0,0,1.414214],[1.414214,0,0],[0,1.414214,0],[-1.414214,0,0],[0,-1.414214,0],[0,0,-1.414214]], face : [[0,1,2],[0,2,3],[0,3,4],[0,4,1],[1,4,5],[1,5,2],[2,5,3],[3,5,4]]};
	polyhedra[2] = { vertex : [[0,0,1.070466],[0.7136442,0,0.7978784],[-0.3568221,0.618034,0.7978784],[-0.3568221,-0.618034,0.7978784],[0.7978784,0.618034,0.3568221],[0.7978784,-0.618034,0.3568221],[-0.9341724,0.381966,0.3568221],[0.1362939,1,0.3568221],[0.1362939,-1,0.3568221],[-0.9341724,-0.381966,0.3568221],[0.9341724,0.381966,-0.3568221],[0.9341724,-0.381966,-0.3568221],[-0.7978784,0.618034,-0.3568221],[-0.1362939,1,-0.3568221],[-0.1362939,-1,-0.3568221],[-0.7978784,-0.618034,-0.3568221],[0.3568221,0.618034,-0.7978784],[0.3568221,-0.618034,-0.7978784],[-0.7136442,0,-0.7978784],[0,0,-1.070466]], face : [[0,1,4,7,2],[0,2,6,9,3],[0,3,8,5,1],[1,5,11,10,4],[2,7,13,12,6],[3,9,15,14,8],[4,10,16,13,7],[5,8,14,17,11],[6,12,18,15,9],[10,11,17,19,16],[12,13,16,19,18],[14,15,18,19,17]]};
	polyhedra[3] = { vertex : [[0,0,1.175571],[1.051462,0,0.5257311],[0.3249197,1,0.5257311],[-0.8506508,0.618034,0.5257311],[-0.8506508,-0.618034,0.5257311],[0.3249197,-1,0.5257311],[0.8506508,0.618034,-0.5257311],[0.8506508,-0.618034,-0.5257311],[-0.3249197,1,-0.5257311],[-1.051462,0,-0.5257311],[-0.3249197,-1,-0.5257311],[0,0,-1.175571]], face : [[0,1,2],[0,2,3],[0,3,4],[0,4,5],[0,5,1],[1,5,7],[1,7,6],[1,6,2],[2,6,8],[2,8,3],[3,8,9],[3,9,4],[4,9,10],[4,10,5],[5,10,7],[6,7,11],[6,11,8],[7,10,11],[8,11,9],[9,11,10]]};
	polyhedra[4] = { vertex : [[0,0,1.070722],[0.7148135,0,0.7971752],[-0.104682,0.7071068,0.7971752],[-0.6841528,0.2071068,0.7971752],[-0.104682,-0.7071068,0.7971752],[0.6101315,0.7071068,0.5236279],[1.04156,0.2071068,0.1367736],[0.6101315,-0.7071068,0.5236279],[-0.3574067,1,0.1367736],[-0.7888348,-0.5,0.5236279],[-0.9368776,0.5,0.1367736],[-0.3574067,-1,0.1367736],[0.3574067,1,-0.1367736],[0.9368776,-0.5,-0.1367736],[0.7888348,0.5,-0.5236279],[0.3574067,-1,-0.1367736],[-0.6101315,0.7071068,-0.5236279],[-1.04156,-0.2071068,-0.1367736],[-0.6101315,-0.7071068,-0.5236279],[0.104682,0.7071068,-0.7971752],[0.6841528,-0.2071068,-0.7971752],[0.104682,-0.7071068,-0.7971752],[-0.7148135,0,-0.7971752],[0,0,-1.070722]], face : [[0,2,3],[1,6,5],[4,9,11],[7,15,13],[8,16,10],[12,14,19],[17,22,18],[20,21,23],[0,1,5,2],[0,3,9,4],[0,4,7,1],[1,7,13,6],[2,5,12,8],[2,8,10,3],[3,10,17,9],[4,11,15,7],[5,6,14,12],[6,13,20,14],[8,12,19,16],[9,17,18,11],[10,16,22,17],[11,18,21,15],[13,15,21,20],[14,20,23,19],[16,19,23,22],[18,22,23,21]]};
	polyhedra[5] = { vertex : [[0,0,1.322876],[1.309307,0,0.1889822],[-0.9819805,0.8660254,0.1889822],[0.1636634,-1.299038,0.1889822],[0.3273268,0.8660254,-0.9449112],[-0.8183171,-0.4330127,-0.9449112]], face : [[0,3,1],[2,4,5],[0,1,4,2],[0,2,5,3],[1,3,5,4]]};
	polyhedra[6] = { vertex : [[0,0,1.159953],[1.013464,0,0.5642542],[-0.3501431,0.9510565,0.5642542],[-0.7715208,-0.6571639,0.5642542],[0.6633206,0.9510565,-0.03144481],[0.8682979,-0.6571639,-0.3996071],[-1.121664,0.2938926,-0.03144481],[-0.2348831,-1.063314,-0.3996071],[0.5181548,0.2938926,-0.9953061],[-0.5850262,-0.112257,-0.9953061]], face : [[0,1,4,2],[0,2,6,3],[1,5,8,4],[3,6,9,7],[5,7,9,8],[0,3,7,5,1],[2,4,8,9,6]]};
	polyhedra[7] = { vertex : [[0,0,1.118034],[0.8944272,0,0.6708204],[-0.2236068,0.8660254,0.6708204],[-0.7826238,-0.4330127,0.6708204],[0.6708204,0.8660254,0.2236068],[1.006231,-0.4330127,-0.2236068],[-1.006231,0.4330127,0.2236068],[-0.6708204,-0.8660254,-0.2236068],[0.7826238,0.4330127,-0.6708204],[0.2236068,-0.8660254,-0.6708204],[-0.8944272,0,-0.6708204],[0,0,-1.118034]], face : [[0,1,4,2],[0,2,6,3],[1,5,8,4],[3,6,10,7],[5,9,11,8],[7,10,11,9],[0,3,7,9,5,1],[2,4,8,11,10,6]]};
	polyhedra[8] = { vertex : [[-0.729665,0.670121,0.319155],[-0.655235,-0.29213,-0.754096],[-0.093922,-0.607123,0.537818],[0.702196,0.595691,0.485187],[0.776626,-0.36656,-0.588064]], face : [[1,4,2],[0,1,2],[3,0,2],[4,3,2],[4,1,0,3]]};
	polyhedra[9] = { vertex : [[-0.868849,-0.100041,0.61257],[-0.329458,0.976099,0.28078],[-0.26629,-0.013796,-0.477654],[-0.13392,-1.034115,0.229829],[0.738834,0.707117,-0.307018],[0.859683,-0.535264,-0.338508]], face : [[3,0,2],[5,3,2],[4,5,2],[1,4,2],[0,1,2],[0,3,5,4,1]]};
	polyhedra[10] = { vertex : [[-0.610389,0.243975,0.531213],[-0.187812,-0.48795,-0.664016],[-0.187812,0.9759,-0.664016],[0.187812,-0.9759,0.664016],[0.798201,0.243975,0.132803]], face : [[1,3,0],[3,4,0],[3,1,4],[0,2,1],[0,4,2],[2,4,1]]};
	polyhedra[11] = { vertex : [[-1.028778,0.392027,-0.048786],[-0.640503,-0.646161,0.621837],[-0.125162,-0.395663,-0.540059],[0.004683,0.888447,-0.651988],[0.125161,0.395663,0.540059],[0.632925,-0.791376,0.433102],[1.031672,0.157063,-0.354165]], face : [[3,2,0],[2,1,0],[2,5,1],[0,4,3],[0,1,4],[4,1,5],[2,3,6],[3,4,6],[5,2,6],[4,5,6]]};
	polyhedra[12] = { vertex : [[-0.669867,0.334933,-0.529576],[-0.669867,0.334933,0.529577],[-0.4043,1.212901,0],[-0.334933,-0.669867,-0.529576],[-0.334933,-0.669867,0.529577],[0.334933,0.669867,-0.529576],[0.334933,0.669867,0.529577],[0.4043,-1.212901,0],[0.669867,-0.334933,-0.529576],[0.669867,-0.334933,0.529577]], face : [[8,9,7],[6,5,2],[3,8,7],[5,0,2],[4,3,7],[0,1,2],[9,4,7],[1,6,2],[9,8,5,6],[8,3,0,5],[3,4,1,0],[4,9,6,1]]};
	polyhedra[13] = { vertex : [[-0.931836,0.219976,-0.264632],[-0.636706,0.318353,0.692816],[-0.613483,-0.735083,-0.264632],[-0.326545,0.979634,0],[-0.318353,-0.636706,0.692816],[-0.159176,0.477529,-0.856368],[0.159176,-0.477529,-0.856368],[0.318353,0.636706,0.692816],[0.326545,-0.979634,0],[0.613482,0.735082,-0.264632],[0.636706,-0.318353,0.692816],[0.931835,-0.219977,-0.264632]], face : [[11,10,8],[7,9,3],[6,11,8],[9,5,3],[2,6,8],[5,0,3],[4,2,8],[0,1,3],[10,4,8],[1,7,3],[10,11,9,7],[11,6,5,9],[6,2,0,5],[2,4,1,0],[4,10,7,1]]};
	polyhedra[14] = { vertex : [[-0.93465,0.300459,-0.271185],[-0.838689,-0.260219,-0.516017],[-0.711319,0.717591,0.128359],[-0.710334,-0.156922,0.080946],[-0.599799,0.556003,-0.725148],[-0.503838,-0.004675,-0.969981],[-0.487004,0.26021,0.48049],[-0.460089,-0.750282,-0.512622],[-0.376468,0.973135,-0.325605],[-0.331735,-0.646985,0.084342],[-0.254001,0.831847,0.530001],[-0.125239,-0.494738,-0.966586],[0.029622,0.027949,0.730817],[0.056536,-0.982543,-0.262295],[0.08085,1.087391,0.076037],[0.125583,-0.532729,0.485984],[0.262625,0.599586,0.780328],[0.391387,-0.726999,-0.716259],[0.513854,-0.868287,0.139347],[0.597475,0.85513,0.326364],[0.641224,0.109523,0.783723],[0.737185,-0.451155,0.538891],[0.848705,-0.612742,-0.314616],[0.976075,0.365067,0.32976],[1.072036,-0.19561,0.084927]], face : [[15,18,21],[12,20,16],[6,10,2],[3,0,1],[9,7,13],[2,8,4,0],[0,4,5,1],[1,5,11,7],[7,11,17,13],[13,17,22,18],[18,22,24,21],[21,24,23,20],[20,23,19,16],[16,19,14,10],[10,14,8,2],[15,9,13,18],[12,15,21,20],[6,12,16,10],[3,6,2,0],[9,3,1,7],[9,15,12,6,3],[22,17,11,5,4,8,14,19,23,24]]};
	var type;
	if(options.type != null) type = options.type; else type = 0;
	if(type < 0) type = 0;
	if(type >= polyhedra.length) type = polyhedra.length - 1;
	var size;
	if(options.size != null) size = options.size; else size = 1;
	var sizeX;
	if(options.sizeX != null) sizeX = options.sizeX; else sizeX = size;
	var sizeY;
	if(options.sizeY != null) sizeY = options.sizeY; else sizeY = size;
	var sizeZ;
	if(options.sizeZ != null) sizeZ = options.sizeZ; else sizeZ = size;
	var data;
	if(options.custom != null) data = options.custom; else data = polyhedra[type];
	var nbfaces = data.face.length;
	var faceUV;
	if(options.faceUV != null) faceUV = options.faceUV; else faceUV = [];
	var faceColors;
	if(options.faceColors != null) faceColors = options.faceColors; else faceColors = [];
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	var positions = [];
	var indices = [];
	var normals = [];
	var uvs = [];
	var colors = [];
	var index = 0;
	var faceIdx = 0;
	var indexes = [];
	var u = 0;
	var v = 0;
	var ang = 0;
	var x = 0;
	var y = 0;
	var tmp = 0;
	var _g = 0;
	while(_g < nbfaces) {
		var f = _g++;
		if(faceColors != null && faceColors[f] == null) faceColors[f] = new com_babylonhx_math_Color4(1,1,1,1);
		if(faceUV != null && faceUV[f] == null) faceUV[f] = new com_babylonhx_math_Vector4(0,0,1,1);
	}
	var _g1 = 0;
	while(_g1 < nbfaces) {
		var f1 = _g1++;
		var fl = data.face[f1].length;
		ang = 2 * Math.PI / fl;
		x = 0.5 * Math.tan(ang / 2);
		y = 0.5;
		var _g11 = 0;
		while(_g11 < fl) {
			var i = _g11++;
			positions.push(data.vertex[data.face[f1][i]][0] * sizeX);
			positions.push(data.vertex[data.face[f1][i]][1] * sizeY);
			positions.push(data.vertex[data.face[f1][i]][2] * sizeZ);
			indexes.push(index);
			index++;
			u = faceUV[f1].x + (faceUV[f1].z - faceUV[f1].x) * (0.5 + x);
			v = faceUV[f1].y + (faceUV[f1].w - faceUV[f1].y) * (y - 0.5);
			uvs.push(u);
			uvs.push(v);
			tmp = x * Math.cos(ang) - y * Math.sin(ang);
			y = x * Math.sin(ang) + y * Math.cos(ang);
			x = tmp;
			if(faceColors[f1] != null) {
				colors.push(faceColors[f1].r);
				colors.push(faceColors[f1].g);
				colors.push(faceColors[f1].b);
				colors.push(faceColors[f1].a);
			}
		}
		var _g2 = 0;
		var _g12 = fl - 2;
		while(_g2 < _g12) {
			var i1 = _g2++;
			indices.push(indexes[faceIdx]);
			indices.push(indexes[i1 + 2 + faceIdx]);
			indices.push(indexes[i1 + 1 + faceIdx]);
		}
		faceIdx += fl;
	}
	com_babylonhx_mesh_VertexData.ComputeNormals(positions,indices,normals);
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.positions = positions;
	vertexData.indices = indices;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	if(faceColors.length > 0) vertexData.colors = colors;
	return vertexData;
};
com_babylonhx_mesh_VertexData.CreateTorusKnot = function(options) {
	var indices = [];
	var positions = [];
	var normals = [];
	var uvs = [];
	var radius;
	if(options.radius != null) radius = options.radius; else radius = 2;
	var tube;
	if(options.tube != null) tube = options.tube; else tube = 0.5;
	var radialSegments;
	if(options.radialSegments != null) radialSegments = options.radialSegments; else radialSegments = 32;
	var tubularSegments;
	if(options.tubularSegments != null) tubularSegments = options.tubularSegments; else tubularSegments = 32;
	var p;
	if(options.p != null) p = options.p; else p = 2;
	var q;
	if(options.q != null) q = options.q; else q = 3;
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	var getPos = function(angle) {
		var cu = Math.cos(angle);
		var su = Math.sin(angle);
		var quOverP = q / p * angle;
		var cs = Math.cos(quOverP);
		var tx = radius * (2 + cs) * 0.5 * cu;
		var ty = radius * (2 + cs) * su * 0.5;
		var tz = radius * Math.sin(quOverP) * 0.5;
		return new com_babylonhx_math_Vector3(tx,ty,tz);
	};
	var _g1 = 0;
	var _g = radialSegments + 1;
	while(_g1 < _g) {
		var i = _g1++;
		var modI = i % radialSegments;
		var u = modI / radialSegments * 2 * p * Math.PI;
		var p1 = getPos(u);
		var p2 = getPos(u + 0.01);
		var tang = new com_babylonhx_math_Vector3(p2.x - p1.x,p2.y - p1.y,p2.z - p1.z);
		var n = new com_babylonhx_math_Vector3(p2.x + p1.x,p2.y + p1.y,p2.z + p1.z);
		var bitan = com_babylonhx_math_Vector3.Cross(tang,n);
		n = com_babylonhx_math_Vector3.Cross(bitan,tang);
		bitan.normalize();
		n.normalize();
		var _g2 = 0;
		while(_g2 < tubularSegments) {
			var j = _g2++;
			var modJ = j % tubularSegments;
			var v = modJ / tubularSegments * 2 * Math.PI;
			var cx = -tube * Math.cos(v);
			var cy = tube * Math.sin(v);
			positions.push(p1.x + cx * n.x + cy * bitan.x);
			positions.push(p1.y + cx * n.y + cy * bitan.y);
			positions.push(p1.z + cx * n.z + cy * bitan.z);
			uvs.push(i / radialSegments);
			uvs.push(j / tubularSegments);
		}
	}
	var _g3 = 0;
	while(_g3 < radialSegments) {
		var i1 = _g3++;
		var _g11 = 0;
		while(_g11 < tubularSegments) {
			var j1 = _g11++;
			var jNext = (j1 + 1) % tubularSegments;
			var a = i1 * tubularSegments + j1;
			var b = (i1 + 1) * tubularSegments + j1;
			var c = (i1 + 1) * tubularSegments + jNext;
			var d = i1 * tubularSegments + jNext;
			indices.push(d);
			indices.push(b);
			indices.push(a);
			indices.push(d);
			indices.push(c);
			indices.push(b);
		}
	}
	com_babylonhx_mesh_VertexData.ComputeNormals(positions,indices,normals);
	com_babylonhx_mesh_VertexData._ComputeSides(sideOrientation,positions,indices,normals,uvs);
	var vertexData = new com_babylonhx_mesh_VertexData();
	vertexData.indices = indices;
	vertexData.positions = positions;
	vertexData.normals = normals;
	vertexData.uvs = uvs;
	return vertexData;
};
com_babylonhx_mesh_VertexData.ComputeNormals = function(positions,indices,normals) {
	var index = 0;
	var p1p2x = 0.0;
	var p1p2y = 0.0;
	var p1p2z = 0.0;
	var p3p2x = 0.0;
	var p3p2y = 0.0;
	var p3p2z = 0.0;
	var faceNormalx = 0.0;
	var faceNormaly = 0.0;
	var faceNormalz = 0.0;
	var length = 0.0;
	var i1 = 0;
	var i2 = 0;
	var i3 = 0;
	var _g1 = 0;
	var _g = positions.length;
	while(_g1 < _g) {
		var index1 = _g1++;
		normals[index1] = 0.0;
	}
	var nbFaces = indices.length / 3 | 0;
	var _g2 = 0;
	while(_g2 < nbFaces) {
		var index2 = _g2++;
		i1 = indices[index2 * 3];
		i2 = indices[index2 * 3 + 1];
		i3 = indices[index2 * 3 + 2];
		p1p2x = positions[i1 * 3] - positions[i2 * 3];
		p1p2y = positions[i1 * 3 + 1] - positions[i2 * 3 + 1];
		p1p2z = positions[i1 * 3 + 2] - positions[i2 * 3 + 2];
		p3p2x = positions[i3 * 3] - positions[i2 * 3];
		p3p2y = positions[i3 * 3 + 1] - positions[i2 * 3 + 1];
		p3p2z = positions[i3 * 3 + 2] - positions[i2 * 3 + 2];
		faceNormalx = p1p2y * p3p2z - p1p2z * p3p2y;
		faceNormaly = p1p2z * p3p2x - p1p2x * p3p2z;
		faceNormalz = p1p2x * p3p2y - p1p2y * p3p2x;
		length = Math.sqrt(faceNormalx * faceNormalx + faceNormaly * faceNormaly + faceNormalz * faceNormalz);
		if(length == 0) length = 1.0; else length = length;
		faceNormalx /= length;
		faceNormaly /= length;
		faceNormalz /= length;
		normals[i1 * 3] += faceNormalx;
		normals[i1 * 3 + 1] += faceNormaly;
		normals[i1 * 3 + 2] += faceNormalz;
		normals[i2 * 3] += faceNormalx;
		normals[i2 * 3 + 1] += faceNormaly;
		normals[i2 * 3 + 2] += faceNormalz;
		normals[i3 * 3] += faceNormalx;
		normals[i3 * 3 + 1] += faceNormaly;
		normals[i3 * 3 + 2] += faceNormalz;
	}
	var nl = normals.length / 3 | 0;
	var _g3 = 0;
	while(_g3 < nl) {
		var index3 = _g3++;
		faceNormalx = normals[index3 * 3];
		faceNormaly = normals[index3 * 3 + 1];
		faceNormalz = normals[index3 * 3 + 2];
		length = Math.sqrt(faceNormalx * faceNormalx + faceNormaly * faceNormaly + faceNormalz * faceNormalz);
		if(length == 0) length = 1.0; else length = length;
		faceNormalx /= length;
		faceNormaly /= length;
		faceNormalz /= length;
		normals[index3 * 3] = faceNormalx;
		normals[index3 * 3 + 1] = faceNormaly;
		normals[index3 * 3 + 2] = faceNormalz;
	}
};
com_babylonhx_mesh_VertexData._ComputeSides = function(sideOrientation,positions,indices,normals,uvs) {
	if(sideOrientation == null) sideOrientation = 0;
	var li = indices.length;
	var ln = normals.length;
	switch(sideOrientation) {
	case 0:
		break;
	case 1:
		var tmp = 0;
		var i = 0;
		while(i < li) {
			tmp = indices[i];
			indices[i] = indices[i + 2];
			indices[i + 2] = tmp;
			i += 3;
		}
		var _g = 0;
		while(_g < ln) {
			var n = _g++;
			normals[n] = -normals[n];
		}
		break;
	case 2:
		var lp = positions.length;
		var l = lp / 3 | 0;
		var _g1 = 0;
		while(_g1 < lp) {
			var p = _g1++;
			positions[lp + p] = positions[p];
		}
		var i1 = 0;
		while(i1 < li) {
			indices[i1 + li] = indices[i1 + 2] + l;
			indices[i1 + 1 + li] = indices[i1 + 1] + l;
			indices[i1 + 2 + li] = indices[i1] + l;
			i1 += 3;
		}
		var _g2 = 0;
		while(_g2 < ln) {
			var n1 = _g2++;
			normals[ln + n1] = -normals[n1];
		}
		var lu = uvs.length;
		var _g3 = 0;
		while(_g3 < lu) {
			var u = _g3++;
			uvs[u + lu] = uvs[u];
		}
		break;
	}
};
com_babylonhx_mesh_VertexData.prototype = {
	positions: null
	,normals: null
	,uvs: null
	,uv2s: null
	,uv3s: null
	,uv4s: null
	,uv5s: null
	,uv6s: null
	,colors: null
	,matricesIndices: null
	,matricesWeights: null
	,matricesIndicesExtra: null
	,matricesWeightsExtra: null
	,indices: null
	,_idx: null
	,set: function(data,kind) {
		switch(kind) {
		case "position":
			this.positions = data;
			break;
		case "normal":
			this.normals = data;
			break;
		case "uv":
			this.uvs = data;
			break;
		case "uv2":
			this.uv2s = data;
			break;
		case "uv3":
			this.uv3s = data;
			break;
		case "uv4":
			this.uv4s = data;
			break;
		case "uv5":
			this.uv5s = data;
			break;
		case "uv6":
			this.uv6s = data;
			break;
		case "color":
			this.colors = data;
			break;
		case "matricesIndices":
			this.matricesIndices = data;
			break;
		case "matricesWeights":
			this.matricesWeights = data;
			break;
		case "matricesIndicesExtra":
			this.matricesIndicesExtra = data;
			break;
		case "matricesWeightsExtra":
			this.matricesWeightsExtra = data;
			break;
		default:
		}
	}
	,applyToMesh: function(mesh,updatable) {
		if(updatable == null) updatable = false;
		this._applyTo(mesh,updatable);
	}
	,applyToGeometry: function(geometry,updatable) {
		if(updatable == null) updatable = false;
		this._applyTo(geometry,updatable);
	}
	,updateMesh: function(mesh,updateExtends,makeItUnique) {
		if(makeItUnique == null) makeItUnique = false;
		this._update(mesh);
	}
	,updateGeometry: function(geometry,updateExtends,makeItUnique) {
		if(makeItUnique == null) makeItUnique = false;
		this._update(geometry);
	}
	,_applyTo: function(meshOrGeometry,updatable) {
		if(updatable == null) updatable = false;
		if(this.positions != null) meshOrGeometry.setVerticesData("position",this.positions,updatable);
		if(this.normals != null) meshOrGeometry.setVerticesData("normal",this.normals,updatable);
		if(this.uvs != null) meshOrGeometry.setVerticesData("uv",this.uvs,updatable);
		if(this.uv2s != null) meshOrGeometry.setVerticesData("uv2",this.uv2s,updatable);
		if(this.uv3s != null) meshOrGeometry.setVerticesData("uv3",this.uv3s,updatable);
		if(this.uv4s != null) meshOrGeometry.setVerticesData("uv4",this.uv4s,updatable);
		if(this.uv5s != null) meshOrGeometry.setVerticesData("uv5",this.uv5s,updatable);
		if(this.uv6s != null) meshOrGeometry.setVerticesData("uv6",this.uv6s,updatable);
		if(this.colors != null) meshOrGeometry.setVerticesData("color",this.colors,updatable);
		if(this.matricesIndices != null) meshOrGeometry.setVerticesData("matricesIndices",this.matricesIndices,updatable);
		if(this.matricesWeights != null) meshOrGeometry.setVerticesData("matricesWeights",this.matricesWeights,updatable);
		if(this.matricesIndicesExtra != null) meshOrGeometry.setVerticesData("matricesIndicesExtra",this.matricesIndicesExtra,updatable);
		if(this.matricesWeightsExtra != null) meshOrGeometry.setVerticesData("matricesWeightsExtra",this.matricesWeightsExtra,updatable);
		if(this.indices != null) meshOrGeometry.setIndices(this.indices);
	}
	,_update: function(meshOrGeometry,updateExtends,makeItUnique) {
		if(makeItUnique == null) makeItUnique = false;
		if(this.positions != null) meshOrGeometry.updateVerticesData("position",this.positions,updateExtends,makeItUnique);
		if(this.normals != null) meshOrGeometry.updateVerticesData("normal",this.normals,updateExtends,makeItUnique);
		if(this.uvs != null) meshOrGeometry.updateVerticesData("uv",this.uvs,updateExtends,makeItUnique);
		if(this.uv2s != null) meshOrGeometry.updateVerticesData("uv2",this.uv2s,updateExtends,makeItUnique);
		if(this.uv3s != null) meshOrGeometry.updateVerticesData("uv3",this.uv3s,updateExtends,makeItUnique);
		if(this.uv4s != null) meshOrGeometry.updateVerticesData("uv4",this.uv4s,updateExtends,makeItUnique);
		if(this.uv5s != null) meshOrGeometry.updateVerticesData("uv5",this.uv5s,updateExtends,makeItUnique);
		if(this.uv6s != null) meshOrGeometry.updateVerticesData("uv6",this.uv6s,updateExtends,makeItUnique);
		if(this.colors != null) meshOrGeometry.updateVerticesData("color",this.colors,updateExtends,makeItUnique);
		if(this.matricesIndices != null) meshOrGeometry.updateVerticesData("matricesIndices",this.matricesIndices,updateExtends,makeItUnique);
		if(this.matricesWeights != null) meshOrGeometry.updateVerticesData("matricesWeights",this.matricesWeights,updateExtends,makeItUnique);
		if(this.matricesIndicesExtra != null) meshOrGeometry.updateVerticesData("matricesIndicesExtra",this.matricesIndicesExtra,updateExtends,makeItUnique);
		if(this.matricesWeightsExtra != null) meshOrGeometry.updateVerticesData("matricesWeightsExtra",this.matricesWeightsExtra,updateExtends,makeItUnique);
		if(this.indices != null) meshOrGeometry.setIndices(this.indices);
	}
	,transform: function(matrix) {
		if(this.positions != null) {
			var position = new com_babylonhx_math_Vector3(0,0,0);
			var index = 0;
			while(index < this.positions.length) {
				com_babylonhx_math_Vector3.FromArrayToRef(this.positions,index,position);
				com_babylonhx_math_Vector3.TransformCoordinatesToRef(position,matrix,com_babylonhx_mesh_VertexData.transformed);
				this.positions[index] = com_babylonhx_mesh_VertexData.transformed.x;
				this.positions[index + 1] = com_babylonhx_mesh_VertexData.transformed.y;
				this.positions[index + 2] = com_babylonhx_mesh_VertexData.transformed.z;
				index += 3;
			}
		}
		if(this.normals != null) {
			var normal = new com_babylonhx_math_Vector3(0,0,0);
			var index1 = 0;
			while(index1 < this.normals.length) {
				com_babylonhx_math_Vector3.FromArrayToRef(this.normals,index1,normal);
				com_babylonhx_math_Vector3.TransformNormalToRef(normal,matrix,com_babylonhx_mesh_VertexData.transformed);
				this.normals[index1] = com_babylonhx_mesh_VertexData.transformed.x;
				this.normals[index1 + 1] = com_babylonhx_mesh_VertexData.transformed.y;
				this.normals[index1 + 2] = com_babylonhx_mesh_VertexData.transformed.z;
				index1 += 3;
			}
		}
	}
	,merge: function(other) {
		if(other.indices != null) {
			if(this.indices == null) this.indices = [];
			var offset;
			offset = (this.positions != null?this.positions.length / 3:0) | 0;
			var _g1 = 0;
			var _g = other.indices.length;
			while(_g1 < _g) {
				var index = _g1++;
				this.indices.push(other.indices[index] + offset);
			}
		}
		if(other.positions != null) {
			if(this.positions == null) this.positions = [];
			var _g11 = 0;
			var _g2 = other.positions.length;
			while(_g11 < _g2) {
				var index1 = _g11++;
				this.positions.push(other.positions[index1]);
			}
		}
		if(other.normals != null) {
			if(this.normals == null) this.normals = [];
			var _g12 = 0;
			var _g3 = other.normals.length;
			while(_g12 < _g3) {
				var index2 = _g12++;
				this.normals.push(other.normals[index2]);
			}
		}
		if(other.uvs != null) {
			if(this.uvs == null) this.uvs = [];
			var _g13 = 0;
			var _g4 = other.uvs.length;
			while(_g13 < _g4) {
				var index3 = _g13++;
				this.uvs.push(other.uvs[index3]);
			}
		}
		if(other.uv2s != null) {
			if(this.uv2s == null) this.uv2s = [];
			var _g14 = 0;
			var _g5 = other.uv2s.length;
			while(_g14 < _g5) {
				var index4 = _g14++;
				this.uv2s.push(other.uv2s[index4]);
			}
		}
		if(other.uv3s != null) {
			if(this.uv3s == null) this.uv3s = [];
			var _g15 = 0;
			var _g6 = other.uv3s.length;
			while(_g15 < _g6) {
				var index5 = _g15++;
				this.uv3s.push(other.uv3s[index5]);
			}
		}
		if(other.uv4s != null) {
			if(this.uv4s == null) this.uv4s = [];
			var _g16 = 0;
			var _g7 = other.uv4s.length;
			while(_g16 < _g7) {
				var index6 = _g16++;
				this.uv4s.push(other.uv4s[index6]);
			}
		}
		if(other.uv5s != null) {
			if(this.uv5s == null) this.uv5s = [];
			var _g17 = 0;
			var _g8 = other.uv5s.length;
			while(_g17 < _g8) {
				var index7 = _g17++;
				this.uv5s.push(other.uv5s[index7]);
			}
		}
		if(other.uv6s != null) {
			if(this.uv6s == null) this.uv6s = [];
			var _g18 = 0;
			var _g9 = other.uv6s.length;
			while(_g18 < _g9) {
				var index8 = _g18++;
				this.uv6s.push(other.uv6s[index8]);
			}
		}
		if(other.matricesIndices != null) {
			if(this.matricesIndices == null) this.matricesIndices = [];
			var _g19 = 0;
			var _g10 = other.matricesIndices.length;
			while(_g19 < _g10) {
				var index9 = _g19++;
				this.matricesIndices.push(other.matricesIndices[index9]);
			}
		}
		if(other.matricesWeights != null) {
			if(this.matricesWeights == null) this.matricesWeights = [];
			var _g110 = 0;
			var _g20 = other.matricesWeights.length;
			while(_g110 < _g20) {
				var index10 = _g110++;
				this.matricesWeights.push(other.matricesWeights[index10]);
			}
		}
		if(other.matricesIndicesExtra != null) {
			if(this.matricesIndicesExtra == null) this.matricesIndicesExtra = [];
			var _g111 = 0;
			var _g21 = other.matricesIndicesExtra.length;
			while(_g111 < _g21) {
				var index11 = _g111++;
				this.matricesIndicesExtra.push(other.matricesIndicesExtra[index11]);
			}
		}
		if(other.matricesWeightsExtra != null) {
			if(this.matricesWeightsExtra == null) this.matricesWeightsExtra = [];
			var _g112 = 0;
			var _g22 = other.matricesWeightsExtra.length;
			while(_g112 < _g22) {
				var index12 = _g112++;
				this.matricesWeightsExtra.push(other.matricesWeightsExtra[index12]);
			}
		}
		if(other.colors != null) {
			if(this.colors == null) this.colors = [];
			var _g113 = 0;
			var _g23 = other.colors.length;
			while(_g113 < _g23) {
				var index13 = _g113++;
				this.colors.push(other.colors[index13]);
			}
		}
	}
	,__class__: com_babylonhx_mesh_VertexData
};
var com_babylonhx_materials_Material = $hx_exports.BABYLON.Material = function(name,scene,doNotAdd) {
	if(doNotAdd == null) doNotAdd = false;
	this.zOffset = 0.0;
	this.pointSize = 1.0;
	this._fillMode = 0;
	this._wasPreviouslyReady = false;
	this.fogEnabled = false;
	this.disableDepthWrite = false;
	this.alphaMode = 2;
	this.sideOrientation = 1;
	this.backFaceCulling = true;
	this.alpha = 1.0;
	this.state = "";
	this.checkReadyOnlyOnce = false;
	this.checkReadyOnEveryCall = false;
	this.id = name;
	this.name = name;
	this._scene = scene;
	if(!doNotAdd) scene.materials.push(this);
};
$hxClasses["com.babylonhx.materials.Material"] = com_babylonhx_materials_Material;
com_babylonhx_materials_Material.__name__ = ["com","babylonhx","materials","Material"];
com_babylonhx_materials_Material.__interfaces__ = [com_babylonhx_ISmartArrayCompatible];
com_babylonhx_materials_Material.prototype = {
	id: null
	,name: null
	,checkReadyOnEveryCall: null
	,checkReadyOnlyOnce: null
	,state: null
	,alpha: null
	,backFaceCulling: null
	,sideOrientation: null
	,onCompiled: null
	,onError: null
	,onDispose: null
	,onBind: null
	,getRenderTargetTextures: null
	,alphaMode: null
	,disableDepthWrite: null
	,fogEnabled: null
	,__smartArrayFlags: null
	,_effect: null
	,_wasPreviouslyReady: null
	,_scene: null
	,_fillMode: null
	,_cachedDepthWriteState: null
	,pointSize: null
	,zOffset: null
	,get_wireframe: function() {
		return this._fillMode == 1;
	}
	,set_wireframe: function(value) {
		if(value) this._fillMode = 1; else this._fillMode = 0;
		return value;
	}
	,get_pointsCloud: function() {
		return this._fillMode == 2;
	}
	,set_pointsCloud: function(value) {
		if(value) this._fillMode = 2; else this._fillMode = 0;
		return value;
	}
	,get_fillMode: function() {
		return this._fillMode;
	}
	,set_fillMode: function(value) {
		this._fillMode = value;
		return value;
	}
	,isReady: function(mesh,useInstances) {
		if(useInstances == null) useInstances = false;
		return true;
	}
	,getEffect: function() {
		return this._effect;
	}
	,getScene: function() {
		return this._scene;
	}
	,needAlphaBlending: function() {
		return this.alpha < 1.0;
	}
	,needAlphaTesting: function() {
		return false;
	}
	,getAlphaTestTexture: function() {
		return null;
	}
	,trackCreation: function(onCompiled,onError) {
	}
	,markDirty: function() {
		this._wasPreviouslyReady = false;
	}
	,_preBind: function() {
		var engine = this._scene._engine;
		engine.enableEffect(this._effect);
		engine.setState(this.backFaceCulling,this.zOffset,false,this.sideOrientation == 0);
	}
	,bind: function(world,mesh) {
		this._scene._cachedMaterial = this;
		if(this.onBind != null) this.onBind(this);
		if(this.disableDepthWrite) {
			var engine = this._scene._engine;
			this._cachedDepthWriteState = engine._depthCullingState.get_depthMask();
			engine._depthCullingState.set_depthMask(false);
		}
	}
	,bindOnlyWorldMatrix: function(world) {
	}
	,unbind: function() {
		if(this.disableDepthWrite) {
			var engine = this._scene._engine;
			engine._depthCullingState.set_depthMask(this._cachedDepthWriteState);
		}
	}
	,clone: function(name) {
		return null;
	}
	,getBindedMeshes: function() {
		var result = [];
		var _g1 = 0;
		var _g = this._scene.meshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			var mesh = this._scene.meshes[index];
			if(mesh.get_material() == this) result.push(mesh);
		}
		return result;
	}
	,dispose: function(forceDisposeEffect) {
		if(forceDisposeEffect == null) forceDisposeEffect = false;
		this.getScene().stopAnimation(this);
		var index = HxOverrides.indexOf(this._scene.materials,this,0);
		if(index >= 0) this._scene.materials.splice(index,1);
		if(forceDisposeEffect && this._effect != null) {
			this._scene._engine._releaseEffect(this._effect);
			this._effect = null;
		}
		var _g1 = 0;
		var _g = this._scene.meshes.length;
		while(_g1 < _g) {
			var index1 = _g1++;
			var mesh = this._scene.meshes[index1];
			if(mesh.get_material() == this) mesh.set_material(null);
		}
		if(this.onDispose != null) this.onDispose();
	}
	,copyTo: function(other) {
		other.checkReadyOnlyOnce = this.checkReadyOnlyOnce;
		other.checkReadyOnEveryCall = this.checkReadyOnEveryCall;
		other.alpha = this.alpha;
		other.set_fillMode(this.get_fillMode());
		other.backFaceCulling = this.backFaceCulling;
		other.set_wireframe(this.get_wireframe());
		other.fogEnabled = this.fogEnabled;
		other.set_wireframe(this.get_wireframe());
		other.zOffset = this.zOffset;
		other.alphaMode = this.alphaMode;
		other.sideOrientation = this.sideOrientation;
		other.disableDepthWrite = this.disableDepthWrite;
		other.pointSize = this.pointSize;
		other.set_pointsCloud(this.get_pointsCloud());
	}
	,__class__: com_babylonhx_materials_Material
	,__properties__: {set_fillMode:"set_fillMode",get_fillMode:"get_fillMode",set_pointsCloud:"set_pointsCloud",get_pointsCloud:"get_pointsCloud",set_wireframe:"set_wireframe",get_wireframe:"get_wireframe"}
};
var com_babylonhx_math_Color3 = $hx_exports.BABYLON.Color3 = function(r,g,b) {
	if(b == null) b = 0;
	if(g == null) g = 0;
	if(r == null) r = 0;
	this.r = r;
	this.g = g;
	this.b = b;
};
$hxClasses["com.babylonhx.math.Color3"] = com_babylonhx_math_Color3;
com_babylonhx_math_Color3.__name__ = ["com","babylonhx","math","Color3"];
com_babylonhx_math_Color3.FromHexString = function(hex) {
	if(hex.substring(0,1) != "#" || hex.length != 7) {
		haxe_Log.trace("Color3.FromHexString must be called with a string like #FFFFFF",{ fileName : "Color3.hx", lineNumber : 170, className : "com.babylonhx.math.Color3", methodName : "FromHexString"});
		return new com_babylonhx_math_Color3(0,0,0);
	}
	var r = Std.parseInt(hex.substring(1,3));
	var g = Std.parseInt(hex.substring(3,5));
	var b = Std.parseInt(hex.substring(5,7));
	return new com_babylonhx_math_Color3(r / 255.0,g / 255.0,b / 255.0);
};
com_babylonhx_math_Color3.FromArray = function(array,offset) {
	if(offset == null) offset = 0;
	return new com_babylonhx_math_Color3(array[0],array[1],array[2]);
};
com_babylonhx_math_Color3.FromInt = function(rgb) {
	return new com_babylonhx_math_Color3((rgb >> 16 & 255) / 255.0,(rgb >> 8 & 255) / 255.0,(rgb & 255) / 255.0);
};
com_babylonhx_math_Color3.FromInts = function(r,g,b) {
	return new com_babylonhx_math_Color3(r / 255.0,g / 255.0,b / 255.0);
};
com_babylonhx_math_Color3.Lerp = function(start,end,amount) {
	var r = start.r + (end.r - start.r) * amount;
	var g = start.g + (end.g - start.g) * amount;
	var b = start.b + (end.b - start.b) * amount;
	return new com_babylonhx_math_Color3(r,g,b);
};
com_babylonhx_math_Color3.Red = function() {
	return new com_babylonhx_math_Color3(1,0,0);
};
com_babylonhx_math_Color3.Green = function() {
	return new com_babylonhx_math_Color3(0,1,0);
};
com_babylonhx_math_Color3.Blue = function() {
	return new com_babylonhx_math_Color3(0,0,1);
};
com_babylonhx_math_Color3.Black = function() {
	return new com_babylonhx_math_Color3(0,0,0);
};
com_babylonhx_math_Color3.White = function() {
	return new com_babylonhx_math_Color3(1,1,1);
};
com_babylonhx_math_Color3.Purple = function() {
	return new com_babylonhx_math_Color3(0.5,0,0.5);
};
com_babylonhx_math_Color3.Magenta = function() {
	return new com_babylonhx_math_Color3(1,0,1);
};
com_babylonhx_math_Color3.Yellow = function() {
	return new com_babylonhx_math_Color3(1,1,0);
};
com_babylonhx_math_Color3.Gray = function() {
	return new com_babylonhx_math_Color3(0.5,0.5,0.5);
};
com_babylonhx_math_Color3.prototype = {
	r: null
	,g: null
	,b: null
	,toString: function() {
		return "{R:" + this.r + " G:" + this.g + " B:" + this.b + "}";
	}
	,toArray: function(array,index) {
		if(index == null) index = 0;
		array[index] = this.r;
		array[index + 1] = this.g;
		array[index + 2] = this.b;
		return this;
	}
	,toColor4: function(alpha) {
		if(alpha == null) alpha = 1;
		return new com_babylonhx_math_Color4(this.r,this.g,this.b,alpha);
	}
	,asArray: function() {
		var result = [];
		result[0] = this.r;
		result[1] = this.g;
		result[2] = this.b;
		this;
		return result;
	}
	,toLuminance: function() {
		return this.r * 0.3 + this.g * 0.59 + this.b * 0.11;
	}
	,multiply: function(otherColor) {
		return new com_babylonhx_math_Color3(this.r * otherColor.r,this.g * otherColor.g,this.b * otherColor.b);
	}
	,multiplyToRef: function(otherColor,result) {
		result.r = this.r * otherColor.r;
		result.g = this.g * otherColor.g;
		result.b = this.b * otherColor.b;
		return this;
	}
	,equals: function(otherColor) {
		return otherColor != null && this.r == otherColor.r && this.g == otherColor.g && this.b == otherColor.b;
	}
	,equalsFloats: function(r,g,b) {
		return this.r == r && this.g == g && this.b == b;
	}
	,scale: function(scale) {
		return new com_babylonhx_math_Color3(this.r * scale,this.g * scale,this.b * scale);
	}
	,scaleToRef: function(scale,result) {
		result.r = this.r * scale;
		result.g = this.g * scale;
		result.b = this.b * scale;
		return this;
	}
	,add: function(otherColor) {
		return new com_babylonhx_math_Color3(this.r + otherColor.r,this.g + otherColor.g,this.b + otherColor.b);
	}
	,addToRef: function(otherColor,result) {
		result.r = this.r + otherColor.r;
		result.g = this.g + otherColor.g;
		result.b = this.b + otherColor.b;
		return this;
	}
	,subtract: function(otherColor) {
		return new com_babylonhx_math_Color3(this.r - otherColor.r,this.g - otherColor.g,this.b - otherColor.b);
	}
	,subtractToRef: function(otherColor,result) {
		result.r = this.r - otherColor.r;
		result.g = this.g - otherColor.g;
		result.b = this.b - otherColor.b;
		return this;
	}
	,clone: function() {
		return new com_babylonhx_math_Color3(this.r,this.g,this.b);
	}
	,copyFrom: function(source) {
		this.r = source.r;
		this.g = source.g;
		this.b = source.b;
		return this;
	}
	,copyFromFloats: function(r,g,b) {
		this.r = r;
		this.g = g;
		this.b = b;
		return this;
	}
	,toHexString: function() {
		var intR = this.r * 255 | 0;
		var intG = this.g * 255 | 0;
		var intB = this.b * 255 | 0;
		return "#" + com_babylonhx_tools_Tools.ToHex(intR) + com_babylonhx_tools_Tools.ToHex(intG) + com_babylonhx_tools_Tools.ToHex(intB);
	}
	,toLinearSpace: function() {
		var convertedColor = new com_babylonhx_math_Color3();
		convertedColor.r = Math.pow(this.r,2.2);
		convertedColor.g = Math.pow(this.g,2.2);
		convertedColor.b = Math.pow(this.b,2.2);
		this;
		return convertedColor;
	}
	,toLinearSpaceToRef: function(convertedColor) {
		convertedColor.r = Math.pow(this.r,2.2);
		convertedColor.g = Math.pow(this.g,2.2);
		convertedColor.b = Math.pow(this.b,2.2);
		return this;
	}
	,toGammaSpace: function() {
		var convertedColor = new com_babylonhx_math_Color3();
		convertedColor.r = Math.pow(this.r,0.45454545454545453);
		convertedColor.g = Math.pow(this.g,0.45454545454545453);
		convertedColor.b = Math.pow(this.b,0.45454545454545453);
		this;
		return convertedColor;
	}
	,toGammaSpaceToRef: function(convertedColor) {
		convertedColor.r = Math.pow(this.r,0.45454545454545453);
		convertedColor.g = Math.pow(this.g,0.45454545454545453);
		convertedColor.b = Math.pow(this.b,0.45454545454545453);
		return this;
	}
	,__class__: com_babylonhx_math_Color3
};
var com_babylonhx_materials_StandardMaterial = $hx_exports.BABYLON.StandardMaterial = function(name,scene) {
	this._cachedDefines = new com_babylonhx_materials_StandardMaterialDefines();
	this._defines = new com_babylonhx_materials_StandardMaterialDefines();
	this._renderId = 0;
	this._globalAmbientColor = new com_babylonhx_math_Color3(0,0,0);
	this._worldViewProjectionMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._renderTargets = new com_babylonhx_tools_SmartArray(16);
	this.useGlossinessFromSpecularMapAlpha = false;
	this.useLightmapAsShadowmap = false;
	this.roughness = 0;
	this.disableLighting = false;
	this.useSpecularOverAlpha = true;
	this.useReflectionFresnelFromSpecular = false;
	this.linkEmissiveWithDiffuse = false;
	this.useEmissiveAsIllumination = false;
	this.useAlphaFromDiffuseTexture = false;
	this.emissiveColor = new com_babylonhx_math_Color3(0,0,0);
	this.specularPower = 64;
	this.specularColor = new com_babylonhx_math_Color3(1,1,1);
	this.diffuseColor = new com_babylonhx_math_Color3(1,1,1);
	this.ambientColor = new com_babylonhx_math_Color3(0,0,0);
	this.lightmapTexture = null;
	this.bumpTexture = null;
	this.specularTexture = null;
	this.emissiveTexture = null;
	this.reflectionTexture = null;
	this.opacityTexture = null;
	this.ambientTexture = null;
	this.diffuseTexture = null;
	var _g = this;
	com_babylonhx_materials_Material.call(this,name,scene);
	this._cachedDefines.BonesPerMesh = -1;
	this.getRenderTargetTextures = function() {
		_g._renderTargets.reset();
		if(_g.reflectionTexture != null && _g.reflectionTexture.isRenderTarget) _g._renderTargets.push(_g.reflectionTexture);
		return _g._renderTargets;
	};
};
$hxClasses["com.babylonhx.materials.StandardMaterial"] = com_babylonhx_materials_StandardMaterial;
com_babylonhx_materials_StandardMaterial.__name__ = ["com","babylonhx","materials","StandardMaterial"];
com_babylonhx_materials_StandardMaterial.PrepareDefinesForLights = function(scene,mesh,defines) {
	var lightIndex = 0;
	var needNormals = false;
	var _g1 = 0;
	var _g = scene.lights.length;
	while(_g1 < _g) {
		var index = _g1++;
		var light = scene.lights[index];
		if(!light.isEnabled()) continue;
		if(light._excludedMeshesIds.length > 0) {
			var _g3 = 0;
			var _g2 = light._excludedMeshesIds.length;
			while(_g3 < _g2) {
				var excludedIndex = _g3++;
				var excludedMesh = scene.getMeshByID(light._excludedMeshesIds[excludedIndex]);
				if(excludedMesh != null) light.excludedMeshes.push(excludedMesh);
			}
			light._excludedMeshesIds = [];
		}
		if(light._includedOnlyMeshesIds.length > 0) {
			var _g31 = 0;
			var _g21 = light._includedOnlyMeshesIds.length;
			while(_g31 < _g21) {
				var includedOnlyIndex = _g31++;
				var includedOnlyMesh = scene.getMeshByID(light._includedOnlyMeshesIds[includedOnlyIndex]);
				if(includedOnlyMesh != null) light.includedOnlyMeshes.push(includedOnlyMesh);
			}
			light._includedOnlyMeshesIds = [];
		}
		if(!light.canAffectMesh(mesh)) continue;
		needNormals = true;
		defines.defines[14 + lightIndex] = true;
		var type = defines.getLight(light.get_type(),lightIndex);
		defines.defines[type] = true;
		if(!light.specular.equalsFloats(0,0,0)) defines.defines[34] = true;
		if(scene.shadowsEnabled) {
			var shadowGenerator = light.getShadowGenerator();
			if(mesh != null && mesh.get_receiveShadows() && shadowGenerator != null) {
				defines.defines[35 + lightIndex] = true;
				defines.defines[39] = true;
				if(shadowGenerator.get_useVarianceShadowMap() || shadowGenerator.get_useBlurVarianceShadowMap()) defines.defines[40 + lightIndex] = true;
				if(shadowGenerator.get_usePoissonSampling()) defines.defines[44 + lightIndex] = true;
			}
		}
		lightIndex++;
		if(lightIndex == 4) break;
	}
	return needNormals;
};
com_babylonhx_materials_StandardMaterial.BindLights = function(scene,mesh,effect,defines) {
	var lightIndex = 0;
	var _g1 = 0;
	var _g = scene.lights.length;
	while(_g1 < _g) {
		var index = _g1++;
		var light = scene.lights[index];
		if(!light.isEnabled()) continue;
		if(!light.canAffectMesh(mesh)) continue;
		var _g2 = light.get_type();
		switch(_g2) {
		case "POINTLIGHT":
			light.transferToEffect(effect,"vLightData" + lightIndex);
			break;
		case "DIRLIGHT":
			light.transferToEffect(effect,"vLightData" + lightIndex);
			break;
		case "SPOTLIGHT":
			light.transferToEffect(effect,"vLightData" + lightIndex,"vLightDirection" + lightIndex);
			break;
		case "HEMILIGHT":
			light.transferToEffect(effect,"vLightData" + lightIndex,"vLightGround" + lightIndex);
			break;
		}
		light.diffuse.scaleToRef(light.intensity,com_babylonhx_materials_StandardMaterial._scaledDiffuse);
		effect._engine.setColor4(effect._uniforms.get("vLightDiffuse" + lightIndex),com_babylonhx_materials_StandardMaterial._scaledDiffuse,light.range);
		effect;
		if(defines.defines[34]) {
			light.specular.scaleToRef(light.intensity,com_babylonhx_materials_StandardMaterial._scaledSpecular);
			effect._engine.setColor3(effect._uniforms.get("vLightSpecular" + lightIndex),com_babylonhx_materials_StandardMaterial._scaledSpecular);
			effect;
		}
		if(scene.shadowsEnabled) {
			var shadowGenerator = light.getShadowGenerator();
			if(mesh.get_receiveShadows() && shadowGenerator != null) {
				if(!(js_Boot.__cast(light , com_babylonhx_lights_IShadowLight)).needCube()) effect.setMatrix("lightMatrix" + lightIndex,shadowGenerator.getTransformMatrix());
				effect.setTexture("shadowSampler" + lightIndex,shadowGenerator.getShadowMapForRendering());
				effect.setFloat3("shadowsInfo" + lightIndex,shadowGenerator.getDarkness(),shadowGenerator.getShadowMap().getSize().width,shadowGenerator.get_bias());
			}
		}
		lightIndex++;
		if(lightIndex == 4) break;
	}
};
com_babylonhx_materials_StandardMaterial.__super__ = com_babylonhx_materials_Material;
com_babylonhx_materials_StandardMaterial.prototype = $extend(com_babylonhx_materials_Material.prototype,{
	diffuseTexture: null
	,ambientTexture: null
	,opacityTexture: null
	,reflectionTexture: null
	,emissiveTexture: null
	,specularTexture: null
	,bumpTexture: null
	,lightmapTexture: null
	,ambientColor: null
	,diffuseColor: null
	,specularColor: null
	,specularPower: null
	,emissiveColor: null
	,useAlphaFromDiffuseTexture: null
	,useEmissiveAsIllumination: null
	,linkEmissiveWithDiffuse: null
	,useReflectionFresnelFromSpecular: null
	,useSpecularOverAlpha: null
	,disableLighting: null
	,roughness: null
	,useLightmapAsShadowmap: null
	,diffuseFresnelParameters: null
	,opacityFresnelParameters: null
	,reflectionFresnelParameters: null
	,emissiveFresnelParameters: null
	,useGlossinessFromSpecularMapAlpha: null
	,_renderTargets: null
	,_worldViewProjectionMatrix: null
	,_globalAmbientColor: null
	,_renderId: null
	,_defines: null
	,_cachedDefines: null
	,_useLogarithmicDepth: null
	,get_useLogarithmicDepth: function() {
		return this._useLogarithmicDepth;
	}
	,set_useLogarithmicDepth: function(value) {
		this._useLogarithmicDepth = value && this.getScene().getEngine().getCaps().fragmentDepthSupported;
		return this._useLogarithmicDepth;
	}
	,needAlphaBlending: function() {
		return this.alpha < 1.0 || this.opacityTexture != null || this._shouldUseAlphaFromDiffuseTexture() || this.opacityFresnelParameters != null && this.opacityFresnelParameters.isEnabled;
	}
	,needAlphaTesting: function() {
		return this.diffuseTexture != null && this.diffuseTexture.hasAlpha;
	}
	,_shouldUseAlphaFromDiffuseTexture: function() {
		return this.diffuseTexture != null && this.diffuseTexture.hasAlpha && this.useAlphaFromDiffuseTexture;
	}
	,getAlphaTestTexture: function() {
		return this.diffuseTexture;
	}
	,_checkCache: function(scene,mesh,useInstances) {
		if(useInstances == null) useInstances = false;
		if(mesh == null) return true;
		if(this._defines.defines[58] != useInstances) return false;
		if(mesh._materialDefines != null && mesh._materialDefines.isEqual(this._defines)) return true;
		return false;
	}
	,isReady: function(mesh,useInstances) {
		if(useInstances == null) useInstances = false;
		if(this.checkReadyOnlyOnce) {
			if(this._wasPreviouslyReady) return true;
		}
		var scene = this.getScene();
		if(!this.checkReadyOnEveryCall) {
			if(this._renderId == scene._renderId) {
				if(this._checkCache(scene,mesh,useInstances)) return true;
			}
		}
		var engine = scene._engine;
		var needNormals = false;
		var needUVs = false;
		this._defines.reset();
		if(scene.texturesEnabled) {
			if(this.diffuseTexture != null && com_babylonhx_materials_StandardMaterial.DiffuseTextureEnabled) {
				if(!this.diffuseTexture.isReady()) return false; else {
					needUVs = true;
					this._defines.defines[0] = true;
				}
			}
			if(this.ambientTexture != null && com_babylonhx_materials_StandardMaterial.AmbientTextureEnabled) {
				if(!this.ambientTexture.isReady()) return false; else {
					needUVs = true;
					this._defines.defines[1] = true;
				}
			}
			if(this.opacityTexture != null && com_babylonhx_materials_StandardMaterial.OpacityTextureEnabled) {
				if(!this.opacityTexture.isReady()) return false; else {
					needUVs = true;
					this._defines.defines[2] = true;
					if(this.opacityTexture.getAlphaFromRGB) this._defines.defines[3] = true;
				}
			}
			if(this.reflectionTexture != null && com_babylonhx_materials_StandardMaterial.ReflectionTextureEnabled) {
				if(!this.reflectionTexture.isReady()) return false; else {
					needNormals = true;
					this._defines.defines[4] = true;
					if(this.roughness > 0) this._defines.defines[60] = true;
					if(this.reflectionTexture.coordinatesMode == 6) this._defines.defines[74] = true;
					this._defines.defines[66] = this.reflectionTexture.isCube;
					var _g = this.reflectionTexture.coordinatesMode;
					switch(_g) {
					case 3:case 6:
						this._defines.defines[69] = true;
						break;
					case 0:
						this._defines.defines[72] = true;
						break;
					case 2:
						this._defines.defines[68] = true;
						break;
					case 4:
						this._defines.defines[70] = true;
						break;
					case 5:
						this._defines.defines[71] = true;
						break;
					case 1:
						this._defines.defines[67] = true;
						break;
					case 7:
						this._defines.defines[73] = true;
						break;
					}
				}
			}
			if(this.emissiveTexture != null && com_babylonhx_materials_StandardMaterial.EmissiveTextureEnabled) {
				if(!this.emissiveTexture.isReady()) return false; else {
					needUVs = true;
					this._defines.defines[5] = true;
				}
			}
			if(this.lightmapTexture != null && com_babylonhx_materials_StandardMaterial.LightmapEnabled) {
				if(!this.lightmapTexture.isReady()) return false; else {
					needUVs = true;
					this._defines.defines[64] = true;
					this._defines.defines[65] = this.useLightmapAsShadowmap;
				}
			}
			if(this.specularTexture != null && com_babylonhx_materials_StandardMaterial.SpecularTextureEnabled) {
				if(!this.specularTexture.isReady()) return false; else {
					needUVs = true;
					this._defines.defines[6] = true;
					this._defines.defines[59] = this.useGlossinessFromSpecularMapAlpha;
				}
			}
		}
		if(scene._engine.getCaps().standardDerivatives == true && this.bumpTexture != null && com_babylonhx_materials_StandardMaterial.BumpTextureEnabled) {
			if(!this.bumpTexture.isReady()) return false; else {
				needUVs = true;
				this._defines.defines[7] = true;
			}
		}
		if(scene.clipPlane != null) this._defines.defines[9] = true;
		if(engine._alphaTest) this._defines.defines[10] = true;
		if(this._shouldUseAlphaFromDiffuseTexture()) this._defines.defines[11] = true;
		if(this.useEmissiveAsIllumination) this._defines.defines[61] = true;
		if(this.linkEmissiveWithDiffuse) this._defines.defines[62] = true;
		if(this.useReflectionFresnelFromSpecular) this._defines.defines[63] = true;
		if(this.get_useLogarithmicDepth()) this._defines.defines[75] = true;
		if(this.get_pointsCloud() || scene.forcePointsCloud) this._defines.defines[12] = true;
		if(scene.fogEnabled && mesh != null && mesh.applyFog && scene.fogMode != com_babylonhx_Scene.FOGMODE_NONE) {
			console.log("deez");
			this._defines.defines[13] = true;
		}
		if(scene.lightsEnabled && !this.disableLighting) needNormals = com_babylonhx_materials_StandardMaterial.PrepareDefinesForLights(scene,mesh,this._defines);
		if(com_babylonhx_materials_StandardMaterial.FresnelEnabled) {
			if(this.diffuseFresnelParameters != null && this.diffuseFresnelParameters.isEnabled) this._defines.defines[48] = true;
			if(this.opacityFresnelParameters != null && this.opacityFresnelParameters.isEnabled) this._defines.defines[49] = true;
			if(this.reflectionFresnelParameters != null && this.reflectionFresnelParameters.isEnabled) this._defines.defines[50] = true;
			if(this.emissiveFresnelParameters != null && this.emissiveFresnelParameters.isEnabled) this._defines.defines[51] = true;
			if(this._defines.defines[48] || this._defines.defines[49] || this._defines.defines[50] || this._defines.defines[51]) {
				needNormals = true;
				this._defines.defines[52] = true;
			}
		}
		if(this._defines.defines[34] && this.useSpecularOverAlpha) this._defines.defines[8] = true;
		if(mesh != null) {
			if(needNormals && mesh.isVerticesDataPresent("normal")) this._defines.defines[53] = true;
			if(needUVs) {
				if(mesh.isVerticesDataPresent("uv")) this._defines.defines[54] = true;
				if(mesh.isVerticesDataPresent("uv2")) this._defines.defines[55] = true;
			}
			if(mesh.useVertexColors && mesh.isVerticesDataPresent("color")) {
				this._defines.defines[56] = true;
				if(mesh.hasVertexAlpha) this._defines.defines[57] = true;
			}
			if(mesh.get_useBones() && mesh.computeBonesUsingShaders) {
				this._defines.NUM_BONE_INFLUENCERS = mesh.numBoneInfluencers;
				this._defines.BonesPerMesh = mesh.get_skeleton().bones.length + 1;
			}
			if(useInstances) this._defines.defines[58] = true;
		}
		if(!this._defines.isEqual(this._cachedDefines) || this._effect == null) {
			this._defines.cloneTo(this._cachedDefines);
			scene._cachedMaterial = null;
			var fallbacks = new com_babylonhx_materials_EffectFallbacks();
			if(this._defines.defines[4]) fallbacks.addFallback(0,"REFLECTION");
			if(this._defines.defines[6]) fallbacks.addFallback(0,"SPECULAR");
			if(this._defines.defines[7]) fallbacks.addFallback(0,"BUMP");
			if(this._defines.defines[8]) fallbacks.addFallback(0,"SPECULAROVERALPHA");
			if(this._defines.defines[13]) fallbacks.addFallback(1,"FOG");
			if(this._defines.defines[12]) fallbacks.addFallback(0,"POINTSIZE");
			if(this._defines.defines[75]) fallbacks.addFallback(0,"LOGARITHMICDEPTH");
			var _g1 = 0;
			while(_g1 < 4) {
				var lightIndex = _g1++;
				if(!this._defines.defines[14 + lightIndex]) continue;
				if(lightIndex > 0) fallbacks.addFallback(lightIndex,"LIGHT" + lightIndex);
				if(this._defines.defines[35 + lightIndex]) fallbacks.addFallback(0,"SHADOW" + lightIndex);
				if(this._defines.defines[44 + lightIndex]) fallbacks.addFallback(0,"SHADOWPCF" + lightIndex);
				if(this._defines.defines[40 + lightIndex]) fallbacks.addFallback(0,"SHADOWVSM" + lightIndex);
			}
			if(this._defines.defines[34]) fallbacks.addFallback(0,"SPECULARTERM");
			if(this._defines.defines[48]) fallbacks.addFallback(1,"DIFFUSEFRESNEL");
			if(this._defines.defines[49]) fallbacks.addFallback(2,"OPACITYFRESNEL");
			if(this._defines.defines[50]) fallbacks.addFallback(3,"REFLECTIONFRESNEL");
			if(this._defines.defines[51]) fallbacks.addFallback(4,"EMISSIVEFRESNEL");
			if(this._defines.defines[52]) fallbacks.addFallback(4,"FRESNEL");
			if(this._defines.NUM_BONE_INFLUENCERS > 0) fallbacks.addCPUSkinningFallback(0,mesh);
			var attribs = ["position"];
			if(this._defines.defines[53]) attribs.push("normal");
			if(this._defines.defines[54]) attribs.push("uv");
			if(this._defines.defines[55]) attribs.push("uv2");
			if(this._defines.defines[56]) attribs.push("color");
			if(this._defines.NUM_BONE_INFLUENCERS > 0) {
				attribs.push("matricesIndices");
				attribs.push("matricesWeights");
				if(this._defines.NUM_BONE_INFLUENCERS > 4) {
					attribs.push("matricesIndicesExtra");
					attribs.push("matricesWeightsExtra");
				}
			}
			if(this._defines.defines[58]) {
				attribs.push("world0");
				attribs.push("world1");
				attribs.push("world2");
				attribs.push("world3");
			}
			var shaderName = "default";
			if(scene._engine.getCaps().standardDerivatives != true) shaderName = "legacydefault";
			var join = this._defines.toString();
			this._effect = scene._engine.createEffect(shaderName,attribs,["world","view","viewProjection","vEyePosition","vLightsType","vAmbientColor","vDiffuseColor","vSpecularColor","vEmissiveColor","vLightData0","vLightDiffuse0","vLightSpecular0","vLightDirection0","vLightGround0","lightMatrix0","vLightData1","vLightDiffuse1","vLightSpecular1","vLightDirection1","vLightGround1","lightMatrix1","vLightData2","vLightDiffuse2","vLightSpecular2","vLightDirection2","vLightGround2","lightMatrix2","vLightData3","vLightDiffuse3","vLightSpecular3","vLightDirection3","vLightGround3","lightMatrix3","vFogInfos","vFogColor","pointSize","vDiffuseInfos","vAmbientInfos","vOpacityInfos","vReflectionInfos","vEmissiveInfos","vSpecularInfos","vBumpInfos","vLightmapInfos","mBones","vClipPlane","diffuseMatrix","ambientMatrix","opacityMatrix","reflectionMatrix","emissiveMatrix","specularMatrix","bumpMatrix","lightmapMatrix","shadowsInfo0","shadowsInfo1","shadowsInfo2","shadowsInfo3","diffuseLeftColor","diffuseRightColor","opacityParts","reflectionLeftColor","reflectionRightColor","emissiveLeftColor","emissiveRightColor","logarithmicDepthConstant"],["diffuseSampler","ambientSampler","opacitySampler","reflectionCubeSampler","reflection2DSampler","emissiveSampler","specularSampler","bumpSampler","lightmapSampler","shadowSampler0","shadowSampler1","shadowSampler2","shadowSampler3"],join,fallbacks,this.onCompiled,this.onError);
		}
		if(!this._effect._isReady) return false;
		this._renderId = scene._renderId;
		this._wasPreviouslyReady = true;
		if(mesh != null) {
			if(mesh._materialDefines == null) mesh._materialDefines = new com_babylonhx_materials_StandardMaterialDefines();
			this._defines.cloneTo(mesh._materialDefines);
		}
		return true;
	}
	,unbind: function() {
		if(this.reflectionTexture != null && this.reflectionTexture.isRenderTarget) this._effect.setTexture("reflection2DSampler",null);
		com_babylonhx_materials_Material.prototype.unbind.call(this);
	}
	,bindOnlyWorldMatrix: function(world) {
		this._effect.setMatrix("world",world);
	}
	,bind: function(world,mesh) {
		var scene = this.getScene();
		this.bindOnlyWorldMatrix(world);
		this._effect.setMatrix("viewProjection",scene._transformMatrix);
		if(mesh != null && mesh.get_useBones() && mesh.computeBonesUsingShaders) this._effect.setMatrices("mBones",mesh.get_skeleton().getTransformMatrices());
		if(scene.getCachedMaterial() != this) {
			if(com_babylonhx_materials_StandardMaterial.FresnelEnabled) {
				if(this.diffuseFresnelParameters != null && this.diffuseFresnelParameters.isEnabled) {
					this._effect.setColor4("diffuseLeftColor",this.diffuseFresnelParameters.leftColor,this.diffuseFresnelParameters.power);
					this._effect.setColor4("diffuseRightColor",this.diffuseFresnelParameters.rightColor,this.diffuseFresnelParameters.bias);
				}
				if(this.opacityFresnelParameters != null && this.opacityFresnelParameters.isEnabled) this._effect.setColor4("opacityParts",new com_babylonhx_math_Color3(this.opacityFresnelParameters.leftColor.toLuminance(),this.opacityFresnelParameters.rightColor.toLuminance(),this.opacityFresnelParameters.bias),this.opacityFresnelParameters.power);
				if(this.reflectionFresnelParameters != null && this.reflectionFresnelParameters.isEnabled) {
					this._effect.setColor4("reflectionLeftColor",this.reflectionFresnelParameters.leftColor,this.reflectionFresnelParameters.power);
					this._effect.setColor4("reflectionRightColor",this.reflectionFresnelParameters.rightColor,this.reflectionFresnelParameters.bias);
				}
				if(this.emissiveFresnelParameters != null && this.emissiveFresnelParameters.isEnabled) {
					this._effect.setColor4("emissiveLeftColor",this.emissiveFresnelParameters.leftColor,this.emissiveFresnelParameters.power);
					this._effect.setColor4("emissiveRightColor",this.emissiveFresnelParameters.rightColor,this.emissiveFresnelParameters.bias);
				}
			}
			if(this.diffuseTexture != null && com_babylonhx_materials_StandardMaterial.DiffuseTextureEnabled) {
				this._effect.setTexture("diffuseSampler",this.diffuseTexture);
				this._effect.setFloat2("vDiffuseInfos",this.diffuseTexture.coordinatesIndex,this.diffuseTexture.level);
				this._effect.setMatrix("diffuseMatrix",this.diffuseTexture.getTextureMatrix());
			}
			if(this.ambientTexture != null && com_babylonhx_materials_StandardMaterial.AmbientTextureEnabled) {
				this._effect.setTexture("ambientSampler",this.ambientTexture);
				this._effect.setFloat2("vAmbientInfos",this.ambientTexture.coordinatesIndex,this.ambientTexture.level);
				this._effect.setMatrix("ambientMatrix",this.ambientTexture.getTextureMatrix());
			}
			if(this.opacityTexture != null && com_babylonhx_materials_StandardMaterial.OpacityTextureEnabled) {
				this._effect.setTexture("opacitySampler",this.opacityTexture);
				this._effect.setFloat2("vOpacityInfos",this.opacityTexture.coordinatesIndex,this.opacityTexture.level);
				this._effect.setMatrix("opacityMatrix",this.opacityTexture.getTextureMatrix());
			}
			if(this.reflectionTexture != null && com_babylonhx_materials_StandardMaterial.ReflectionTextureEnabled) {
				if(this.reflectionTexture.isCube) this._effect.setTexture("reflectionCubeSampler",this.reflectionTexture); else this._effect.setTexture("reflection2DSampler",this.reflectionTexture);
				this._effect.setMatrix("reflectionMatrix",this.reflectionTexture.getReflectionTextureMatrix());
				this._effect.setFloat2("vReflectionInfos",this.reflectionTexture.level,this.roughness);
			}
			if(this.emissiveTexture != null && com_babylonhx_materials_StandardMaterial.EmissiveTextureEnabled) {
				this._effect.setTexture("emissiveSampler",this.emissiveTexture);
				this._effect.setFloat2("vEmissiveInfos",this.emissiveTexture.coordinatesIndex,this.emissiveTexture.level);
				this._effect.setMatrix("emissiveMatrix",this.emissiveTexture.getTextureMatrix());
			}
			if(this.lightmapTexture != null && com_babylonhx_materials_StandardMaterial.LightmapEnabled) {
				this._effect.setTexture("lightmapSampler",this.lightmapTexture);
				this._effect.setFloat2("vLightmapInfos",this.lightmapTexture.coordinatesIndex,this.lightmapTexture.level);
				this._effect.setMatrix("lightmapMatrix",this.lightmapTexture.getTextureMatrix());
			}
			if(this.specularTexture != null && com_babylonhx_materials_StandardMaterial.SpecularTextureEnabled) {
				this._effect.setTexture("specularSampler",this.specularTexture);
				this._effect.setFloat2("vSpecularInfos",this.specularTexture.coordinatesIndex,this.specularTexture.level);
				this._effect.setMatrix("specularMatrix",this.specularTexture.getTextureMatrix());
			}
			if(this.bumpTexture != null && scene._engine.getCaps().standardDerivatives == true && com_babylonhx_materials_StandardMaterial.BumpTextureEnabled) {
				this._effect.setTexture("bumpSampler",this.bumpTexture);
				this._effect.setFloat2("vBumpInfos",this.bumpTexture.coordinatesIndex,1.0 / this.bumpTexture.level);
				this._effect.setMatrix("bumpMatrix",this.bumpTexture.getTextureMatrix());
			}
			if(scene.clipPlane != null) {
				var clipPlane = scene.clipPlane;
				this._effect.setFloat4("vClipPlane",clipPlane.normal.x,clipPlane.normal.y,clipPlane.normal.z,clipPlane.d);
			}
			if(this.get_pointsCloud()) this._effect.setFloat("pointSize",this.pointSize);
			scene.ambientColor.multiplyToRef(this.ambientColor,this._globalAmbientColor);
			this._effect.setVector3("vEyePosition",scene._mirroredCameraPosition != null?scene._mirroredCameraPosition:scene.activeCamera.position);
			this._effect.setColor3("vAmbientColor",this._globalAmbientColor);
			if(this._defines.defines[34]) this._effect.setColor4("vSpecularColor",this.specularColor,this.specularPower);
			this._effect.setColor3("vEmissiveColor",this.emissiveColor);
		}
		this._effect.setColor4("vDiffuseColor",this.diffuseColor,this.alpha * mesh.get_visibility());
		if(scene.lightsEnabled && !this.disableLighting) com_babylonhx_materials_StandardMaterial.BindLights(scene,mesh,this._effect,this._defines);
		if(scene.fogEnabled && mesh.applyFog && scene.fogMode != com_babylonhx_Scene.FOGMODE_NONE || this.reflectionTexture != null) this._effect.setMatrix("view",scene._viewMatrix);
		if(scene.fogEnabled && mesh.applyFog && scene.fogMode != com_babylonhx_Scene.FOGMODE_NONE) {
			this._effect.setFloat4("vFogInfos",scene.fogMode,scene.fogStart,scene.fogEnd,scene.fogDensity);
			this._effect.setColor3("vFogColor",scene.fogColor);
		}
		if(this._defines.defines[75]) this._effect.setFloat("logarithmicDepthConstant",2.0 / (Math.log(scene.activeCamera.maxZ + 1.0) / 0.6931471805599453));
		com_babylonhx_materials_Material.prototype.bind.call(this,world,mesh);
	}
	,getAnimatables: function() {
		var results = [];
		if(this.diffuseTexture != null && this.diffuseTexture.animations != null && this.diffuseTexture.animations.length > 0) results.push(this.diffuseTexture);
		if(this.ambientTexture != null && this.ambientTexture.animations != null && this.ambientTexture.animations.length > 0) results.push(this.ambientTexture);
		if(this.opacityTexture != null && this.opacityTexture.animations != null && this.opacityTexture.animations.length > 0) results.push(this.opacityTexture);
		if(this.reflectionTexture != null && this.reflectionTexture.animations != null && this.reflectionTexture.animations.length > 0) results.push(this.reflectionTexture);
		if(this.emissiveTexture != null && this.emissiveTexture.animations != null && this.emissiveTexture.animations.length > 0) results.push(this.emissiveTexture);
		if(this.specularTexture != null && this.specularTexture.animations != null && this.specularTexture.animations.length > 0) results.push(this.specularTexture);
		if(this.bumpTexture != null && this.bumpTexture.animations != null && this.bumpTexture.animations.length > 0) results.push(this.bumpTexture);
		return results;
	}
	,dispose: function(forceDisposeEffect) {
		if(forceDisposeEffect == null) forceDisposeEffect = false;
		if(this.diffuseTexture != null) this.diffuseTexture.dispose();
		if(this.ambientTexture != null) this.ambientTexture.dispose();
		if(this.opacityTexture != null) this.opacityTexture.dispose();
		if(this.reflectionTexture != null) this.reflectionTexture.dispose();
		if(this.emissiveTexture != null) this.emissiveTexture.dispose();
		if(this.specularTexture != null) this.specularTexture.dispose();
		if(this.bumpTexture != null) this.bumpTexture.dispose();
		com_babylonhx_materials_Material.prototype.dispose.call(this,forceDisposeEffect);
	}
	,clone: function(name) {
		var newStandardMaterial = new com_babylonhx_materials_StandardMaterial(name,this.getScene());
		this.copyTo(newStandardMaterial);
		if(this.diffuseTexture != null) newStandardMaterial.diffuseTexture = this.diffuseTexture.clone();
		if(this.ambientTexture != null) newStandardMaterial.ambientTexture = this.ambientTexture.clone();
		if(this.opacityTexture != null) newStandardMaterial.opacityTexture = this.opacityTexture.clone();
		if(this.reflectionTexture != null) newStandardMaterial.reflectionTexture = this.reflectionTexture.clone();
		if(this.emissiveTexture != null) newStandardMaterial.emissiveTexture = this.emissiveTexture.clone();
		if(this.specularTexture != null) newStandardMaterial.specularTexture = this.specularTexture.clone();
		if(this.bumpTexture != null) newStandardMaterial.bumpTexture = this.bumpTexture.clone();
		if(this.lightmapTexture != null) {
			newStandardMaterial.lightmapTexture = this.lightmapTexture.clone();
			newStandardMaterial.useLightmapAsShadowmap = this.useLightmapAsShadowmap;
		}
		newStandardMaterial.ambientColor = this.ambientColor.clone();
		newStandardMaterial.diffuseColor = this.diffuseColor.clone();
		newStandardMaterial.specularColor = this.specularColor.clone();
		newStandardMaterial.specularPower = this.specularPower;
		newStandardMaterial.emissiveColor = this.emissiveColor.clone();
		newStandardMaterial.useAlphaFromDiffuseTexture = this.useAlphaFromDiffuseTexture;
		newStandardMaterial.useEmissiveAsIllumination = this.useEmissiveAsIllumination;
		newStandardMaterial.useGlossinessFromSpecularMapAlpha = this.useGlossinessFromSpecularMapAlpha;
		newStandardMaterial.useReflectionFresnelFromSpecular = this.useReflectionFresnelFromSpecular;
		newStandardMaterial.useSpecularOverAlpha = this.useSpecularOverAlpha;
		newStandardMaterial.roughness = this.roughness;
		if(this.diffuseFresnelParameters != null) newStandardMaterial.diffuseFresnelParameters = this.diffuseFresnelParameters.clone();
		if(this.emissiveFresnelParameters != null) newStandardMaterial.emissiveFresnelParameters = this.emissiveFresnelParameters.clone();
		if(this.reflectionFresnelParameters != null) newStandardMaterial.reflectionFresnelParameters = this.reflectionFresnelParameters.clone();
		if(this.opacityFresnelParameters != null) newStandardMaterial.opacityFresnelParameters = this.opacityFresnelParameters.clone();
		return newStandardMaterial;
	}
	,__class__: com_babylonhx_materials_StandardMaterial
	,__properties__: $extend(com_babylonhx_materials_Material.prototype.__properties__,{set_useLogarithmicDepth:"set_useLogarithmicDepth",get_useLogarithmicDepth:"get_useLogarithmicDepth"})
});
var com_babylonhx_materials_textures_BaseTexture = $hx_exports.BABYLON.BaseTexture = function(scene) {
	this.anisotropicFilteringLevel = 4;
	this.wrapV = 1;
	this.wrapU = 1;
	this.coordinatesMode = 0;
	this.coordinatesIndex = 0;
	this.animations = [];
	this.isRenderTarget = false;
	this.isCube = false;
	this.level = 1;
	this.getAlphaFromRGB = false;
	this.hasAlpha = false;
	this.delayLoadState = 0;
	this._scene = scene;
	this._scene.textures.push(this);
};
$hxClasses["com.babylonhx.materials.textures.BaseTexture"] = com_babylonhx_materials_textures_BaseTexture;
com_babylonhx_materials_textures_BaseTexture.__name__ = ["com","babylonhx","materials","textures","BaseTexture"];
com_babylonhx_materials_textures_BaseTexture.__interfaces__ = [com_babylonhx_animations_IAnimatable];
com_babylonhx_materials_textures_BaseTexture.prototype = {
	name: null
	,delayLoadState: null
	,hasAlpha: null
	,getAlphaFromRGB: null
	,level: null
	,isCube: null
	,isRenderTarget: null
	,animations: null
	,onDispose: null
	,coordinatesIndex: null
	,coordinatesMode: null
	,wrapU: null
	,wrapV: null
	,anisotropicFilteringLevel: null
	,_cachedAnisotropicFilteringLevel: null
	,__smartArrayFlags: null
	,_scene: null
	,_texture: null
	,getScene: function() {
		return this._scene;
	}
	,getTextureMatrix: function() {
		return null;
	}
	,getReflectionTextureMatrix: function() {
		return null;
	}
	,getInternalTexture: function() {
		return this._texture;
	}
	,isReady: function() {
		if(this.delayLoadState == 4) return true;
		if(this._texture != null) return this._texture.isReady;
		return false;
	}
	,getSize: function() {
		if(this._texture._width != -1 && this._texture._width != 0) return { width : this._texture._width, height : this._texture._height};
		if(this._texture._size != null) return { width : this._texture._size, height : this._texture._size};
		return { width : 0, height : 0};
	}
	,getBaseSize: function() {
		if(!this.isReady()) return { width : 0, height : 0};
		if(this._texture._size != null) return { width : this._texture._size, height : this._texture._size};
		return { width : this._texture._baseWidth, height : this._texture._baseHeight};
	}
	,scale: function(ratio) {
	}
	,_removeFromCache: function(url,noMipmap) {
		var texturesCache = this._scene._engine.getLoadedTexturesCache();
		var _g1 = 0;
		var _g = texturesCache.length;
		while(_g1 < _g) {
			var index = _g1++;
			var texturesCacheEntry = texturesCache[index];
			if(texturesCacheEntry.url == url && texturesCacheEntry.noMipmap == noMipmap) {
				texturesCache.splice(index,1);
				return;
			}
		}
	}
	,_getFromCache: function(url,noMipmap,sampling) {
		var texturesCache = this._scene._engine.getLoadedTexturesCache();
		var _g1 = 0;
		var _g = texturesCache.length;
		while(_g1 < _g) {
			var index = _g1++;
			var texturesCacheEntry = texturesCache[index];
			if(texturesCacheEntry.url == url && texturesCacheEntry.noMipmap == noMipmap) {
				if(sampling == null || sampling == texturesCacheEntry.samplingMode) {
					texturesCacheEntry.references++;
					return texturesCacheEntry;
				}
			}
		}
		return null;
	}
	,delayLoad: function() {
	}
	,releaseInternalTexture: function() {
		if(this._texture == null) return;
		var texturesCache = this._scene._engine.getLoadedTexturesCache();
		this._texture.references--;
		if(this._texture.references == 0) {
			HxOverrides.remove(texturesCache,this._texture);
			this._scene._engine._releaseTexture(this._texture);
			this._texture = null;
		}
	}
	,clone: function() {
		return null;
	}
	,dispose: function() {
		this.getScene().stopAnimation(this);
		var index = HxOverrides.indexOf(this._scene.textures,this,0);
		if(index >= 0) this._scene.textures.splice(index,1);
		if(this._texture == null) return;
		this.releaseInternalTexture();
		if(this.onDispose != null) this.onDispose();
	}
	,__class__: com_babylonhx_materials_textures_BaseTexture
};
var com_babylonhx_materials_textures_CubeTexture = $hx_exports.BABYLON.CubeTexture = function(rootUrl,scene,extensions,noMipmap) {
	if(noMipmap == null) noMipmap = false;
	com_babylonhx_materials_textures_BaseTexture.call(this,scene);
	this.coordinatesMode = 3;
	this.name = rootUrl;
	this.url = rootUrl;
	this._noMipmap = noMipmap;
	this.hasAlpha = false;
	if(rootUrl == null || rootUrl == "") return;
	if(extensions == null) extensions = ["_px.jpg","_py.jpg","_pz.jpg","_nx.jpg","_ny.jpg","_nz.jpg"];
	this._extensions = extensions;
	if(this._texture == null) {
		if(!scene.useDelayedTextureLoading) this._texture = scene._engine.createCubeTexture(rootUrl,scene,extensions,noMipmap); else this.delayLoadState = 4;
	}
	this.isCube = true;
	this._textureMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
};
$hxClasses["com.babylonhx.materials.textures.CubeTexture"] = com_babylonhx_materials_textures_CubeTexture;
com_babylonhx_materials_textures_CubeTexture.__name__ = ["com","babylonhx","materials","textures","CubeTexture"];
com_babylonhx_materials_textures_CubeTexture.__super__ = com_babylonhx_materials_textures_BaseTexture;
com_babylonhx_materials_textures_CubeTexture.prototype = $extend(com_babylonhx_materials_textures_BaseTexture.prototype,{
	url: null
	,_noMipmap: null
	,_extensions: null
	,_textureMatrix: null
	,clone: function() {
		var newTexture = new com_babylonhx_materials_textures_CubeTexture(this.url,this.getScene(),this._extensions,this._noMipmap);
		newTexture.level = this.level;
		newTexture.wrapU = this.wrapU;
		newTexture.wrapV = this.wrapV;
		newTexture.coordinatesIndex = this.coordinatesIndex;
		newTexture.coordinatesMode = this.coordinatesMode;
		return newTexture;
	}
	,delayLoad: function() {
		if(this.delayLoadState != 4) return;
		this.delayLoadState = 1;
		this._texture = this._getFromCache(this.url,this._noMipmap);
		if(this._texture == null) this._texture = this.getScene().getEngine().createCubeTexture(this.url,this.getScene(),this._extensions);
	}
	,getReflectionTextureMatrix: function() {
		return this._textureMatrix;
	}
	,__class__: com_babylonhx_materials_textures_CubeTexture
});
var com_babylonhx_materials_textures_Texture = $hx_exports.BABYLON.Texture = function(url,scene,noMipmap,invertY,samplingMode,onLoad,onError,buffer,deleteBuffer) {
	if(deleteBuffer == null) deleteBuffer = false;
	if(samplingMode == null) samplingMode = 3;
	if(invertY == null) invertY = true;
	if(noMipmap == null) noMipmap = false;
	this.wAng = 0;
	this.vAng = 0;
	this.uAng = 0;
	this.vScale = 1.0;
	this.uScale = 1.0;
	this.vOffset = 0;
	this.uOffset = 0;
	com_babylonhx_materials_textures_BaseTexture.call(this,scene);
	this.name = url;
	this.url = url;
	this._noMipmap = noMipmap;
	this._invertY = invertY;
	this._samplingMode = samplingMode;
	this._buffer = buffer;
	this._deleteBuffer = deleteBuffer;
	if(url == null || StringTools.trim(url) == "") return;
	this._texture = this._getFromCache(url,noMipmap,samplingMode);
	if(this._texture == null) {
		if(!scene.useDelayedTextureLoading) {
			if(url.indexOf(".") != -1) {
				this._texture = scene._engine.createTexture(url,noMipmap,invertY,scene,this._samplingMode,onLoad,onError,this._buffer);
				if(deleteBuffer) this._buffer = null;
			}
		} else this.delayLoadState = 4;
	}
};
$hxClasses["com.babylonhx.materials.textures.Texture"] = com_babylonhx_materials_textures_Texture;
com_babylonhx_materials_textures_Texture.__name__ = ["com","babylonhx","materials","textures","Texture"];
com_babylonhx_materials_textures_Texture.CreateFromBase64String = function(data,name,scene,noMipmap,invertY,samplingMode,onLoad,onError) {
	if(samplingMode == null) samplingMode = 3;
	return new com_babylonhx_materials_textures_Texture("data:" + name,scene,noMipmap,invertY,samplingMode,onLoad,onError,data);
};
com_babylonhx_materials_textures_Texture.__super__ = com_babylonhx_materials_textures_BaseTexture;
com_babylonhx_materials_textures_Texture.prototype = $extend(com_babylonhx_materials_textures_BaseTexture.prototype,{
	url: null
	,uOffset: null
	,vOffset: null
	,uScale: null
	,vScale: null
	,uAng: null
	,vAng: null
	,wAng: null
	,_noMipmap: null
	,_invertY: null
	,_rowGenerationMatrix: null
	,_cachedTextureMatrix: null
	,_projectionModeMatrix: null
	,_t0: null
	,_t1: null
	,_t2: null
	,_cachedUOffset: null
	,_cachedVOffset: null
	,_cachedUScale: null
	,_cachedVScale: null
	,_cachedUAng: null
	,_cachedVAng: null
	,_cachedWAng: null
	,_cachedCoordinatesMode: null
	,_samplingMode: null
	,_buffer: null
	,_deleteBuffer: null
	,delayLoad: function() {
		if(this.delayLoadState != 4) return;
		this.delayLoadState = 1;
		this._texture = this._getFromCache(this.url,this._noMipmap,this._samplingMode);
		if(this._texture == null) {
			this._texture = this.getScene().getEngine().createTexture(this.url,this._noMipmap,this._invertY,this.getScene(),this._samplingMode,null,null,this._buffer);
			if(this._deleteBuffer) this._buffer = null;
		}
	}
	,updateSamplingMode: function(samplingMode) {
		if(this._texture == null) return;
		this.getScene().getEngine().updateTextureSamplingMode(samplingMode,this._texture);
	}
	,_prepareRowForTextureGeneration: function(x,y,z,t) {
		x *= this.uScale;
		y *= this.vScale;
		x -= 0.5 * this.uScale;
		y -= 0.5 * this.vScale;
		z -= 0.5;
		com_babylonhx_math_Vector3.TransformCoordinatesFromFloatsToRef(x,y,z,this._rowGenerationMatrix,t);
		t.x += 0.5 * this.uScale + this.uOffset;
		t.y += 0.5 * this.vScale + this.vOffset;
		t.z += 0.5;
	}
	,getTextureMatrix: function() {
		if(this.uOffset == this._cachedUOffset && this.vOffset == this._cachedVOffset && this.uScale == this._cachedUScale && this.vScale == this._cachedVScale && this.uAng == this._cachedUAng && this.vAng == this._cachedVAng && this.wAng == this._cachedWAng) return this._cachedTextureMatrix;
		this._cachedUOffset = this.uOffset;
		this._cachedVOffset = this.vOffset;
		this._cachedUScale = this.uScale;
		this._cachedVScale = this.vScale;
		this._cachedUAng = this.uAng;
		this._cachedVAng = this.vAng;
		this._cachedWAng = this.wAng;
		if(this._cachedTextureMatrix == null) {
			this._cachedTextureMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
			this._rowGenerationMatrix = new com_babylonhx_math_Matrix();
			this._t0 = new com_babylonhx_math_Vector3(0,0,0);
			this._t1 = new com_babylonhx_math_Vector3(0,0,0);
			this._t2 = new com_babylonhx_math_Vector3(0,0,0);
		}
		com_babylonhx_math_Quaternion.RotationYawPitchRollToRef(this.vAng,this.uAng,this.wAng,com_babylonhx_math_Matrix._tempQuaternion);
		com_babylonhx_math_Matrix._tempQuaternion.toRotationMatrix(this._rowGenerationMatrix);
		this._prepareRowForTextureGeneration(0,0,0,this._t0);
		this._prepareRowForTextureGeneration(1.0,0,0,this._t1);
		this._prepareRowForTextureGeneration(0,1.0,0,this._t2);
		this._t1.subtractInPlace(this._t0);
		this._t2.subtractInPlace(this._t0);
		com_babylonhx_math_Matrix.FromValuesToRef(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0,this._cachedTextureMatrix);
		this._cachedTextureMatrix.m[0] = this._t1.x;
		this._cachedTextureMatrix.m[1] = this._t1.y;
		this._cachedTextureMatrix.m[2] = this._t1.z;
		this._cachedTextureMatrix.m[4] = this._t2.x;
		this._cachedTextureMatrix.m[5] = this._t2.y;
		this._cachedTextureMatrix.m[6] = this._t2.z;
		this._cachedTextureMatrix.m[8] = this._t0.x;
		this._cachedTextureMatrix.m[9] = this._t0.y;
		this._cachedTextureMatrix.m[10] = this._t0.z;
		return this._cachedTextureMatrix;
	}
	,getReflectionTextureMatrix: function() {
		if(this.uOffset == this._cachedUOffset && this.vOffset == this._cachedVOffset && this.uScale == this._cachedUScale && this.vScale == this._cachedVScale && this.coordinatesMode == this._cachedCoordinatesMode) return this._cachedTextureMatrix;
		if(this._cachedTextureMatrix == null) {
			this._cachedTextureMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
			this._projectionModeMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
		}
		this._cachedCoordinatesMode = this.coordinatesMode;
		var _g = this.coordinatesMode;
		switch(_g) {
		case 2:
			com_babylonhx_math_Matrix.FromValuesToRef(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0,this._cachedTextureMatrix);
			this._cachedTextureMatrix.m[0] = this.uScale;
			this._cachedTextureMatrix.m[5] = this.vScale;
			this._cachedTextureMatrix.m[12] = this.uOffset;
			this._cachedTextureMatrix.m[13] = this.vOffset;
			break;
		case 4:
			com_babylonhx_math_Matrix.FromValuesToRef(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0,this._projectionModeMatrix);
			this._projectionModeMatrix.m[0] = 0.5;
			this._projectionModeMatrix.m[5] = -0.5;
			this._projectionModeMatrix.m[10] = 0.0;
			this._projectionModeMatrix.m[12] = 0.5;
			this._projectionModeMatrix.m[13] = 0.5;
			this._projectionModeMatrix.m[14] = 1.0;
			this._projectionModeMatrix.m[15] = 1.0;
			this.getScene().getProjectionMatrix().multiplyToRef(this._projectionModeMatrix,this._cachedTextureMatrix);
			break;
		default:
			com_babylonhx_math_Matrix.FromValuesToRef(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0,this._cachedTextureMatrix);
		}
		return this._cachedTextureMatrix;
	}
	,clone: function() {
		var newTexture = new com_babylonhx_materials_textures_Texture(this._texture.url,this.getScene(),this._noMipmap,this._invertY,this._samplingMode);
		newTexture.hasAlpha = this.hasAlpha;
		newTexture.level = this.level;
		newTexture.wrapU = this.wrapU;
		newTexture.wrapV = this.wrapV;
		newTexture.coordinatesIndex = this.coordinatesIndex;
		newTexture.coordinatesMode = this.coordinatesMode;
		newTexture.uOffset = this.uOffset;
		newTexture.vOffset = this.vOffset;
		newTexture.uScale = this.uScale;
		newTexture.vScale = this.vScale;
		newTexture.uAng = this.uAng;
		newTexture.vAng = this.vAng;
		newTexture.wAng = this.wAng;
		return newTexture;
	}
	,__class__: com_babylonhx_materials_textures_Texture
});
var com_babylonhx_materials_textures_RenderTargetTexture = $hx_exports.BABYLON.RenderTargetTexture = function(name,size,scene,generateMipMaps,doNotChangeAspectRatio,type,isCube) {
	if(isCube == null) isCube = false;
	if(type == null) type = 0;
	if(doNotChangeAspectRatio == null) doNotChangeAspectRatio = true;
	this._refreshRate = 1;
	this._currentRefreshId = -1;
	this.renderSprites = false;
	this.renderParticles = true;
	this.renderList = [];
	com_babylonhx_materials_textures_Texture.call(this,null,scene,!generateMipMaps);
	this.coordinatesMode = 4;
	this.name = name;
	this.isRenderTarget = true;
	this._size = size;
	this._generateMipMaps = generateMipMaps;
	this._doNotChangeAspectRatio = doNotChangeAspectRatio;
	this.isCube = isCube;
	if(isCube) {
		this._texture = scene._engine.createRenderTargetCubeTexture(size,{ generateMipMaps : generateMipMaps, type : type});
		this.coordinatesMode = 6;
		this._textureMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	} else this._texture = scene._engine.createRenderTargetTexture(size,{ generateMipMaps : generateMipMaps, type : type});
	this._renderingManager = new com_babylonhx_rendering_RenderingManager(scene);
};
$hxClasses["com.babylonhx.materials.textures.RenderTargetTexture"] = com_babylonhx_materials_textures_RenderTargetTexture;
com_babylonhx_materials_textures_RenderTargetTexture.__name__ = ["com","babylonhx","materials","textures","RenderTargetTexture"];
com_babylonhx_materials_textures_RenderTargetTexture.__super__ = com_babylonhx_materials_textures_Texture;
com_babylonhx_materials_textures_RenderTargetTexture.prototype = $extend(com_babylonhx_materials_textures_Texture.prototype,{
	renderList: null
	,renderParticles: null
	,renderSprites: null
	,onBeforeRender: null
	,onAfterRender: null
	,onAfterUnbind: null
	,onClear: null
	,activeCamera: null
	,customRenderFunction: null
	,_size: null
	,_generateMipMaps: null
	,_renderingManager: null
	,_waitingRenderList: null
	,_doNotChangeAspectRatio: null
	,_currentRefreshId: null
	,_refreshRate: null
	,_textureMatrix: null
	,resetRefreshCounter: function() {
		this._currentRefreshId = -1;
	}
	,get_refreshRate: function() {
		return this._refreshRate;
	}
	,set_refreshRate: function(value) {
		this._refreshRate = value;
		this.resetRefreshCounter();
		return value;
	}
	,_shouldRender: function() {
		if(this._currentRefreshId == -1) {
			this._currentRefreshId = 1;
			return true;
		}
		if(this.get_refreshRate() == this._currentRefreshId) {
			this._currentRefreshId = 1;
			return true;
		}
		this._currentRefreshId++;
		return false;
	}
	,isReady: function() {
		if(!this.getScene().renderTargetsEnabled) return false;
		return com_babylonhx_materials_textures_Texture.prototype.isReady.call(this);
	}
	,getRenderSize: function() {
		return this._size;
	}
	,get_canRescale: function() {
		return true;
	}
	,scale: function(ratio) {
		var newSize = this._size * ratio | 0;
		this.resize(newSize,this._generateMipMaps);
	}
	,getReflectionTextureMatrix: function() {
		if(this.isCube) return this._textureMatrix;
		return com_babylonhx_materials_textures_Texture.prototype.getReflectionTextureMatrix.call(this);
	}
	,resize: function(size,generateMipMaps) {
		this.releaseInternalTexture();
		if(this.isCube) this._texture = this.getScene().getEngine().createRenderTargetCubeTexture(size); else this._texture = this.getScene().getEngine().createRenderTargetTexture(size,generateMipMaps);
	}
	,render: function(useCameraPostProcess) {
		if(useCameraPostProcess == null) useCameraPostProcess = false;
		var scene = this.getScene();
		var engine = scene._engine;
		if(this._waitingRenderList != null) {
			this.renderList = [];
			var _g1 = 0;
			var _g = this._waitingRenderList.length;
			while(_g1 < _g) {
				var index = _g1++;
				var id = this._waitingRenderList[index];
				this.renderList.push(scene.getMeshByID(id));
			}
			this._waitingRenderList = null;
		}
		if(this.renderList != null && this.renderList.length == 0) return;
		this._renderingManager.reset();
		var currentRenderList;
		currentRenderList = this.renderList != null?this.renderList:scene._activeMeshes.data;
		var _g2 = 0;
		while(_g2 < currentRenderList.length) {
			var mesh = currentRenderList[_g2];
			++_g2;
			if(mesh != null) {
				if(!mesh.isReady()) {
					this.resetRefreshCounter();
					continue;
				}
				if(mesh.isEnabled() && mesh.isVisible && mesh.subMeshes != null && (mesh.layerMask & scene.activeCamera.layerMask) != 0) {
					mesh._activate(scene._renderId);
					var _g11 = 0;
					var _g21 = mesh.subMeshes;
					while(_g11 < _g21.length) {
						var subMesh = _g21[_g11];
						++_g11;
						scene._activeIndices += subMesh.indexCount;
						this._renderingManager.dispatch(subMesh);
					}
				}
			}
		}
		if(this.isCube) {
			var _g3 = 0;
			while(_g3 < 6) {
				var face = _g3++;
				this.renderToTarget(face,currentRenderList,useCameraPostProcess);
			}
		} else this.renderToTarget(0,currentRenderList,useCameraPostProcess);
		if(this.onAfterUnbind != null) this.onAfterUnbind();
		scene._cachedMaterial = null;
	}
	,renderToTarget: function(faceIndex,currentRenderList,useCameraPostProcess) {
		var scene = this.getScene();
		var engine = scene._engine;
		if(!useCameraPostProcess || !scene.postProcessManager._prepareFrame(this._texture)) {
			if(this.isCube) engine.bindFramebuffer(this._texture,faceIndex); else engine.bindFramebuffer(this._texture);
		}
		if(this.onBeforeRender != null) this.onBeforeRender(faceIndex);
		if(this.onClear != null) this.onClear(engine); else engine.clear(scene.clearColor,true,true);
		if(!this._doNotChangeAspectRatio) scene.setTransformMatrix(scene.activeCamera.getViewMatrix(),scene.activeCamera.getProjectionMatrix(true));
		this._renderingManager.render(this.customRenderFunction,currentRenderList,this.renderParticles,this.renderSprites);
		if(useCameraPostProcess) scene.postProcessManager._finalizeFrame(false,this._texture,faceIndex);
		if(!this._doNotChangeAspectRatio) scene.setTransformMatrix(scene.activeCamera.getViewMatrix(),scene.activeCamera.getProjectionMatrix(true));
		if(this.onAfterRender != null) this.onAfterRender(faceIndex);
		if(!this.isCube || faceIndex == 5) {
			if(this.isCube) {
				if(faceIndex == 5) engine.generateMipMapsForCubemap(this._texture);
			}
			engine.unBindFramebuffer(this._texture,this.isCube);
		}
	}
	,clone: function() {
		var textureSize = this.getSize();
		var newTexture = new com_babylonhx_materials_textures_RenderTargetTexture(this.name,textureSize.width,this.getScene(),this._generateMipMaps);
		newTexture.hasAlpha = this.hasAlpha;
		newTexture.level = this.level;
		newTexture.coordinatesMode = this.coordinatesMode;
		newTexture.renderList = this.renderList.slice(0);
		return newTexture;
	}
	,__class__: com_babylonhx_materials_textures_RenderTargetTexture
	,__properties__: {get_canRescale:"get_canRescale",set_refreshRate:"set_refreshRate",get_refreshRate:"get_refreshRate"}
});
var com_babylonhx_materials_textures_MirrorTexture = $hx_exports.BABYLON.MirrorTexture = function(name,size,scene,generateMipMaps) {
	this._mirrorMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._transformMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this.mirrorPlane = new com_babylonhx_math_Plane(0,1,0,1);
	var _g = this;
	com_babylonhx_materials_textures_RenderTargetTexture.call(this,name,size,scene,generateMipMaps,true);
	this.onBeforeRender = function(val) {
		if(val == null) val = 0;
		com_babylonhx_math_Matrix.ReflectionToRef(_g.mirrorPlane,_g._mirrorMatrix);
		_g._savedViewMatrix = scene._viewMatrix;
		_g._mirrorMatrix.multiplyToRef(_g._savedViewMatrix,_g._transformMatrix);
		scene._viewMatrix = _g._transformMatrix;
		scene._projectionMatrix = scene._projectionMatrix;
		scene._viewMatrix.multiplyToRef(scene._projectionMatrix,scene._transformMatrix);
		scene.clipPlane = _g.mirrorPlane;
		scene._engine.cullBackFaces = false;
		scene._mirroredCameraPosition = com_babylonhx_math_Vector3.TransformCoordinates(scene.activeCamera.position,_g._mirrorMatrix);
	};
	this.onAfterRender = function(val1) {
		if(val1 == null) val1 = 0;
		scene._viewMatrix = _g._savedViewMatrix;
		scene._projectionMatrix = scene._projectionMatrix;
		scene._viewMatrix.multiplyToRef(scene._projectionMatrix,scene._transformMatrix);
		scene._engine.cullBackFaces = true;
		scene._mirroredCameraPosition = null;
		scene.clipPlane = null;
	};
};
$hxClasses["com.babylonhx.materials.textures.MirrorTexture"] = com_babylonhx_materials_textures_MirrorTexture;
com_babylonhx_materials_textures_MirrorTexture.__name__ = ["com","babylonhx","materials","textures","MirrorTexture"];
com_babylonhx_materials_textures_MirrorTexture.__super__ = com_babylonhx_materials_textures_RenderTargetTexture;
com_babylonhx_materials_textures_MirrorTexture.prototype = $extend(com_babylonhx_materials_textures_RenderTargetTexture.prototype,{
	mirrorPlane: null
	,_transformMatrix: null
	,_mirrorMatrix: null
	,_savedViewMatrix: null
	,clone: function() {
		var textureSize = this.getSize();
		var newTexture = new com_babylonhx_materials_textures_MirrorTexture(this.name,textureSize.width,this.getScene(),this._generateMipMaps);
		newTexture.hasAlpha = this.hasAlpha;
		newTexture.level = this.level;
		newTexture.mirrorPlane = this.mirrorPlane.clone();
		newTexture.renderList = this.renderList.slice(0);
		return newTexture;
	}
	,__class__: com_babylonhx_materials_textures_MirrorTexture
});
var com_babylonhx_rendering_RenderingManager = $hx_exports.BABYLON.RenderingManager = function(scene) {
	this._renderingGroups = [];
	this._scene = scene;
};
$hxClasses["com.babylonhx.rendering.RenderingManager"] = com_babylonhx_rendering_RenderingManager;
com_babylonhx_rendering_RenderingManager.__name__ = ["com","babylonhx","rendering","RenderingManager"];
com_babylonhx_rendering_RenderingManager._renderingGroup = null;
com_babylonhx_rendering_RenderingManager._needToStepBack = null;
com_babylonhx_rendering_RenderingManager.prototype = {
	_scene: null
	,_renderingGroups: null
	,_depthBufferAlreadyCleaned: null
	,_currentIndex: null
	,_currentActiveMeshes: null
	,_currentRenderParticles: null
	,_currentRenderSprites: null
	,_activeCamera: null
	,_renderParticles: function(index,activeMeshes) {
		if(this._scene._activeParticleSystems.length == 0) return;
		this._activeCamera = this._scene.activeCamera;
		var _g1 = 0;
		var _g = this._scene._activeParticleSystems.length;
		while(_g1 < _g) {
			var particleIndex = _g1++;
			var particleSystem = this._scene._activeParticleSystems.data[particleIndex];
			if(particleSystem.renderingGroupId != index) continue;
			if((this._activeCamera.layerMask & particleSystem.layerMask) == 0) continue;
			if(!this._depthBufferAlreadyCleaned) {
				this._scene._engine.clear(new com_babylonhx_math_Color4(0,0,0),false,true);
				this._depthBufferAlreadyCleaned = true;
			}
			if(particleSystem.emitter.position == null || activeMeshes == null || (function($this) {
				var $r;
				var x = particleSystem.emitter;
				$r = HxOverrides.indexOf(activeMeshes,x,0);
				return $r;
			}(this)) != -1) this._scene._activeParticles += particleSystem.render();
		}
	}
	,_renderSprites: function(index) {
		if(!this._scene.spritesEnabled || this._scene.spriteManagers.length == 0) return;
		this._activeCamera = this._scene.activeCamera;
		var _g1 = 0;
		var _g = this._scene.spriteManagers.length;
		while(_g1 < _g) {
			var id = _g1++;
			var spriteManager = this._scene.spriteManagers[id];
			if(spriteManager.renderingGroupId == index && (this._activeCamera.layerMask & spriteManager.layerMask) != 0) {
				if(!this._depthBufferAlreadyCleaned) {
					this._scene._engine.clear(new com_babylonhx_math_Color4(0,0,0),false,true);
					this._depthBufferAlreadyCleaned = true;
				}
				spriteManager.render();
			}
		}
	}
	,_clearDepthBuffer: function() {
		if(!this._depthBufferAlreadyCleaned) {
			this._scene._engine.clear(new com_babylonhx_math_Color4(0,0,0),false,true);
			this._depthBufferAlreadyCleaned = true;
		}
	}
	,_renderSpritesAndParticles: function() {
		if(this._currentRenderSprites) this._renderSprites(this._currentIndex);
		if(this._currentRenderParticles) this._renderParticles(this._currentIndex,this._currentActiveMeshes);
	}
	,render: function(customRenderFunction,activeMeshes,renderParticles,renderSprites) {
		this._currentActiveMeshes = activeMeshes;
		this._currentRenderParticles = renderParticles;
		this._currentRenderSprites = renderSprites;
		var index = 0;
		while(index < com_babylonhx_rendering_RenderingManager.MAX_RENDERINGGROUPS) {
			this._depthBufferAlreadyCleaned = false;
			com_babylonhx_rendering_RenderingManager._renderingGroup = this._renderingGroups[index];
			com_babylonhx_rendering_RenderingManager._needToStepBack = false;
			this._currentIndex = index;
			if(com_babylonhx_rendering_RenderingManager._renderingGroup != null) {
				if(!this._depthBufferAlreadyCleaned) {
					this._scene._engine.clear(new com_babylonhx_math_Color4(0,0,0),false,true);
					this._depthBufferAlreadyCleaned = true;
				}
				if(com_babylonhx_rendering_RenderingManager._renderingGroup.onBeforeTransparentRendering == null) com_babylonhx_rendering_RenderingManager._renderingGroup.onBeforeTransparentRendering = $bind(this,this._renderSpritesAndParticles);
				if(!com_babylonhx_rendering_RenderingManager._renderingGroup.render(customRenderFunction)) {
					this._renderingGroups.splice(index,1);
					com_babylonhx_rendering_RenderingManager._needToStepBack = true;
					this._renderSpritesAndParticles();
				}
			} else this._renderSpritesAndParticles();
			if(com_babylonhx_rendering_RenderingManager._needToStepBack) index--;
			++index;
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this._renderingGroups;
		while(_g < _g1.length) {
			var rg = _g1[_g];
			++_g;
			if(rg != null) rg.prepare();
		}
	}
	,dispatch: function(subMesh) {
		var mesh = subMesh._mesh;
		var renderingGroupId = mesh.renderingGroupId;
		if(this._renderingGroups[renderingGroupId] == null) this._renderingGroups[renderingGroupId] = new com_babylonhx_rendering_RenderingGroup(renderingGroupId,this._scene);
		this._renderingGroups[renderingGroupId].dispatch(subMesh);
	}
	,__class__: com_babylonhx_rendering_RenderingManager
};
var com_babylonhx_math_Plane = $hx_exports.BABYLON.Plane = function(a,b,c,d) {
	this.normal = new com_babylonhx_math_Vector3(a,b,c);
	this.d = d;
};
$hxClasses["com.babylonhx.math.Plane"] = com_babylonhx_math_Plane;
com_babylonhx_math_Plane.__name__ = ["com","babylonhx","math","Plane"];
com_babylonhx_math_Plane.FromArray = function(array) {
	return new com_babylonhx_math_Plane(array[0],array[1],array[2],array[3]);
};
com_babylonhx_math_Plane.FromPoints = function(point1,point2,point3) {
	var result = new com_babylonhx_math_Plane(0,0,0,0);
	result.copyFromPoints(point1,point2,point3);
	return result;
};
com_babylonhx_math_Plane.FromPositionAndNormal = function(origin,normal) {
	var result = new com_babylonhx_math_Plane(0,0,0,0);
	normal.normalize();
	result.normal = normal;
	result.d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);
	return result;
};
com_babylonhx_math_Plane.SignedDistanceToPlaneFromPositionAndNormal = function(origin,normal,point) {
	var d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);
	return point.x * normal.x + point.y * normal.y + point.z * normal.z + d;
};
com_babylonhx_math_Plane.prototype = {
	normal: null
	,d: null
	,asArray: function() {
		return [this.normal.x,this.normal.y,this.normal.z,this.d];
	}
	,clone: function() {
		return new com_babylonhx_math_Plane(this.normal.x,this.normal.y,this.normal.z,this.d);
	}
	,normalize: function() {
		var norm = Math.sqrt(this.normal.x * this.normal.x + this.normal.y * this.normal.y + this.normal.z * this.normal.z);
		var magnitude = 0.0;
		if(norm != 0) magnitude = 1.0 / norm;
		this.normal.x *= magnitude;
		this.normal.y *= magnitude;
		this.normal.z *= magnitude;
		this.d *= magnitude;
	}
	,transform: function(transformation) {
		com_babylonhx_math_Plane.transposedMatrix = com_babylonhx_math_Matrix.Transpose(transformation);
		var x = this.normal.x;
		var y = this.normal.y;
		var z = this.normal.z;
		var d = this.d;
		var normalX = x * com_babylonhx_math_Plane.transposedMatrix.m[0] + y * com_babylonhx_math_Plane.transposedMatrix.m[1] + z * com_babylonhx_math_Plane.transposedMatrix.m[2] + d * com_babylonhx_math_Plane.transposedMatrix.m[3];
		var normalY = x * com_babylonhx_math_Plane.transposedMatrix.m[4] + y * com_babylonhx_math_Plane.transposedMatrix.m[5] + z * com_babylonhx_math_Plane.transposedMatrix.m[6] + d * com_babylonhx_math_Plane.transposedMatrix.m[7];
		var normalZ = x * com_babylonhx_math_Plane.transposedMatrix.m[8] + y * com_babylonhx_math_Plane.transposedMatrix.m[9] + z * com_babylonhx_math_Plane.transposedMatrix.m[10] + d * com_babylonhx_math_Plane.transposedMatrix.m[11];
		var finalD = x * com_babylonhx_math_Plane.transposedMatrix.m[12] + y * com_babylonhx_math_Plane.transposedMatrix.m[13] + z * com_babylonhx_math_Plane.transposedMatrix.m[14] + d * com_babylonhx_math_Plane.transposedMatrix.m[15];
		return new com_babylonhx_math_Plane(normalX,normalY,normalZ,finalD);
	}
	,dotCoordinate: function(point) {
		return this.normal.x * point.x + this.normal.y * point.y + this.normal.z * point.z + this.d;
	}
	,copyFromPoints: function(point1,point2,point3) {
		var x1 = point2.x - point1.x;
		var y1 = point2.y - point1.y;
		var z1 = point2.z - point1.z;
		var x2 = point3.x - point1.x;
		var y2 = point3.y - point1.y;
		var z2 = point3.z - point1.z;
		var yz = y1 * z2 - z1 * y2;
		var xz = z1 * x2 - x1 * z2;
		var xy = x1 * y2 - y1 * x2;
		var pyth = Math.sqrt(yz * yz + xz * xz + xy * xy);
		var invPyth;
		if(pyth != 0) invPyth = 1.0 / pyth; else invPyth = 0;
		this.normal.x = yz * invPyth;
		this.normal.y = xz * invPyth;
		this.normal.z = xy * invPyth;
		this.d = -(this.normal.x * point1.x + this.normal.y * point1.y + this.normal.z * point1.z);
	}
	,isFrontFacingTo: function(direction,epsilon) {
		var dot = com_babylonhx_math_Vector3.Dot(this.normal,direction);
		return dot <= epsilon;
	}
	,signedDistanceTo: function(point) {
		return com_babylonhx_math_Vector3.Dot(point,this.normal) + this.d;
	}
	,__class__: com_babylonhx_math_Plane
};
var com_babylonhx_materials_FresnelParameters = $hx_exports.BABYLON.FresnelParameters = function() {
	this.power = 1;
	this.bias = 0;
	this.rightColor = new com_babylonhx_math_Color3(0,0,0);
	this.leftColor = new com_babylonhx_math_Color3(1,1,1);
	this.isEnabled = true;
};
$hxClasses["com.babylonhx.materials.FresnelParameters"] = com_babylonhx_materials_FresnelParameters;
com_babylonhx_materials_FresnelParameters.__name__ = ["com","babylonhx","materials","FresnelParameters"];
com_babylonhx_materials_FresnelParameters.prototype = {
	isEnabled: null
	,leftColor: null
	,rightColor: null
	,bias: null
	,power: null
	,clone: function() {
		var newFresnelParameters = new com_babylonhx_materials_FresnelParameters();
		newFresnelParameters.isEnabled = this.isEnabled;
		newFresnelParameters.leftColor = this.leftColor;
		newFresnelParameters.rightColor = this.rightColor;
		newFresnelParameters.bias = this.bias;
		newFresnelParameters.power = this.power;
		return newFresnelParameters;
	}
	,__class__: com_babylonhx_materials_FresnelParameters
};
var com_babylonhx_materials_MultiMaterial = $hx_exports.BABYLON.MultiMaterial = function(name,scene) {
	this.subMaterials = [];
	com_babylonhx_materials_Material.call(this,name,scene,true);
	scene.multiMaterials.push(this);
};
$hxClasses["com.babylonhx.materials.MultiMaterial"] = com_babylonhx_materials_MultiMaterial;
com_babylonhx_materials_MultiMaterial.__name__ = ["com","babylonhx","materials","MultiMaterial"];
com_babylonhx_materials_MultiMaterial.__super__ = com_babylonhx_materials_Material;
com_babylonhx_materials_MultiMaterial.prototype = $extend(com_babylonhx_materials_Material.prototype,{
	subMaterials: null
	,getSubMaterial: function(index) {
		if(index < 0 || index >= this.subMaterials.length) return this.getScene().defaultMaterial;
		return this.subMaterials[index];
	}
	,isReady: function(mesh,useInstances) {
		if(useInstances == null) useInstances = false;
		var _g1 = 0;
		var _g = this.subMaterials.length;
		while(_g1 < _g) {
			var index = _g1++;
			var subMaterial = this.subMaterials[index];
			if(subMaterial != null) {
				if(!this.subMaterials[index].isReady(mesh)) return false;
			}
		}
		return true;
	}
	,clone: function(name) {
		var newMultiMaterial = new com_babylonhx_materials_MultiMaterial(name,this.getScene());
		var _g1 = 0;
		var _g = this.subMaterials.length;
		while(_g1 < _g) {
			var index = _g1++;
			var subMaterial = this.subMaterials[index];
			newMultiMaterial.subMaterials.push(subMaterial);
		}
		return newMultiMaterial;
	}
	,__class__: com_babylonhx_materials_MultiMaterial
});
var com_babylonhx_mesh_AbstractMesh = $hx_exports.BABYLON.AbstractMesh = function(name,scene) {
	this._isWorldMatrixFrozen = false;
	this._onAfterWorldMatrixUpdate = [];
	this._intersectionsInProgress = [];
	this._renderId = 0;
	this._isDisposed = false;
	this._pivotMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	this._isDirty = false;
	this._collisionsScalingMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._collisionsTransformMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._absolutePosition = new com_babylonhx_math_Vector3(0,0,0);
	this._rotateYByPI = com_babylonhx_math_Matrix.RotationY(Math.PI);
	this._worldMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._localWorld = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._localPivotScalingRotation = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._localPivotScaling = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._localBillboard = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._localTranslation = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._localRotation = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._localScaling = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this.edgesColor = new com_babylonhx_math_Color4(1,0,0,1);
	this.edgesWidth = 1;
	this._newPositionForCollisions = new com_babylonhx_math_Vector3(0,0,0);
	this._diffPositionForCollisions = new com_babylonhx_math_Vector3(0,0,0);
	this._oldPositionForCollisions = new com_babylonhx_math_Vector3(0,0,0);
	this._collider = new com_babylonhx_collisions_Collider();
	this.ellipsoidOffset = new com_babylonhx_math_Vector3(0,0,0);
	this.ellipsoid = new com_babylonhx_math_Vector3(0.5,1,0.5);
	this._checkCollisions = false;
	this._physicRestitution = 0;
	this._physicsFriction = 0;
	this._physicsMass = 0;
	this._physicImpostor = 0;
	this.alwaysSelectAsActiveMesh = false;
	this.layerMask = 268435455;
	this.useOctreeForCollisions = true;
	this.useOctreeForPicking = true;
	this.useOctreeForRenderingSelection = true;
	this.numBoneInfluencers = 4;
	this.computeBonesUsingShaders = true;
	this.applyFog = true;
	this.useVertexColors = true;
	this.hasVertexAlpha = false;
	this.overlayAlpha = 0.5;
	this.overlayColor = new com_babylonhx_math_Color3(1,0,0);
	this.renderOverlay = false;
	this.outlineWidth = 0.02;
	this.outlineColor = new com_babylonhx_math_Color3(1,0,0);
	this.renderOutline = false;
	this._receiveShadows = false;
	this.renderingGroupId = 0;
	this.isBlocker = false;
	this.onDispose = null;
	this.showSubMeshesBoundingBox = false;
	this.showBoundingBox = false;
	this._isPickable = false;
	this.isVisible = true;
	this.infiniteDistance = false;
	this.alphaIndex = Infinity;
	this._visibility = 1.0;
	this.billboardMode = com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_NONE;
	this.scaling = new com_babylonhx_math_Vector3(1,1,1);
	this.rotation = new com_babylonhx_math_Vector3(0,0,0);
	this.position = new com_babylonhx_math_Vector3(0,0,0);
	this.definedFacingForward = true;
	com_babylonhx_Node.call(this,name,scene);
	scene.addMesh(this);
};
$hxClasses["com.babylonhx.mesh.AbstractMesh"] = com_babylonhx_mesh_AbstractMesh;
com_babylonhx_mesh_AbstractMesh.__name__ = ["com","babylonhx","mesh","AbstractMesh"];
com_babylonhx_mesh_AbstractMesh.__interfaces__ = [com_babylonhx_IDisposable];
com_babylonhx_mesh_AbstractMesh.cameraWorldMatrix = null;
com_babylonhx_mesh_AbstractMesh.__super__ = com_babylonhx_Node;
com_babylonhx_mesh_AbstractMesh.prototype = $extend(com_babylonhx_Node.prototype,{
	definedFacingForward: null
	,position: null
	,rotation: null
	,rotationQuaternion: null
	,scaling: null
	,billboardMode: null
	,_visibility: null
	,get_visibility: function() {
		return this._visibility;
	}
	,set_visibility: function(val) {
		this._visibility = val;
		return val;
	}
	,alphaIndex: null
	,infiniteDistance: null
	,isVisible: null
	,_isPickable: null
	,get_isPickable: function() {
		return this._isPickable;
	}
	,set_isPickable: function(val) {
		this._isPickable = val;
		return val;
	}
	,showBoundingBox: null
	,showSubMeshesBoundingBox: null
	,onDispose: null
	,isBlocker: null
	,_skeleton: null
	,get_skeleton: function() {
		return this._skeleton;
	}
	,set_skeleton: function(val) {
		this._skeleton = val;
		return val;
	}
	,renderingGroupId: null
	,_material: null
	,get_material: function() {
		return this._material;
	}
	,set_material: function(val) {
		this._material = val;
		return val;
	}
	,_receiveShadows: null
	,get_receiveShadows: function() {
		return this._receiveShadows;
	}
	,set_receiveShadows: function(val) {
		this._receiveShadows = val;
		return val;
	}
	,actionManager: null
	,renderOutline: null
	,outlineColor: null
	,outlineWidth: null
	,renderOverlay: null
	,overlayColor: null
	,overlayAlpha: null
	,hasVertexAlpha: null
	,useVertexColors: null
	,applyFog: null
	,computeBonesUsingShaders: null
	,numBoneInfluencers: null
	,useOctreeForRenderingSelection: null
	,useOctreeForPicking: null
	,useOctreeForCollisions: null
	,layerMask: null
	,alwaysSelectAsActiveMesh: null
	,_physicImpostor: null
	,_physicsMass: null
	,_physicsFriction: null
	,_physicRestitution: null
	,_checkCollisions: null
	,ellipsoid: null
	,ellipsoidOffset: null
	,_collider: null
	,_oldPositionForCollisions: null
	,_diffPositionForCollisions: null
	,_newPositionForCollisions: null
	,onCollide: null
	,_meshToBoneReferal: null
	,edgesWidth: null
	,edgesColor: null
	,_edgesRenderer: null
	,_localScaling: null
	,_localRotation: null
	,_localTranslation: null
	,_localBillboard: null
	,_localPivotScaling: null
	,_localPivotScalingRotation: null
	,_localMeshReferalTransform: null
	,_localWorld: null
	,_worldMatrix: null
	,_rotateYByPI: null
	,_absolutePosition: null
	,_collisionsTransformMatrix: null
	,_collisionsScalingMatrix: null
	,_savedMaterial: null
	,_positions: null
	,get_positions: function() {
		return this._positions;
	}
	,set_positions: function(val) {
		this._positions = val;
		return val;
	}
	,get_useBones: function() {
		return this.get_skeleton() != null && this._scene.skeletonsEnabled && this.isVerticesDataPresent("matricesIndices") && this.isVerticesDataPresent("matricesWeights");
	}
	,_isDirty: null
	,_masterMesh: null
	,_materialDefines: null
	,_boundingInfo: null
	,_pivotMatrix: null
	,_isDisposed: null
	,_renderId: null
	,subMeshes: null
	,_submeshesOctree: null
	,_intersectionsInProgress: null
	,_onAfterWorldMatrixUpdate: null
	,_isWorldMatrixFrozen: null
	,_waitingActions: null
	,_waitingFreezeWorldMatrix: null
	,disableEdgesRendering: function() {
		if(this._edgesRenderer != null) {
			this._edgesRenderer.dispose();
			this._edgesRenderer = null;
		}
	}
	,enableEdgesRendering: function(epsilon,checkVerticesInsteadOfIndices) {
		if(checkVerticesInsteadOfIndices == null) checkVerticesInsteadOfIndices = false;
		if(epsilon == null) epsilon = 0.95;
		this.disableEdgesRendering();
		this._edgesRenderer = new com_babylonhx_rendering_EdgesRenderer(this,epsilon,checkVerticesInsteadOfIndices);
	}
	,_isBlocked: null
	,get_isBlocked: function() {
		return false;
	}
	,getLOD: function(camera,boundingSphere) {
		return this;
	}
	,getTotalVertices: function() {
		return 0;
	}
	,getIndices: function(copyWhenShared) {
		if(copyWhenShared == null) copyWhenShared = false;
		return null;
	}
	,getVerticesData: function(kind,copyWhenShared) {
		if(copyWhenShared == null) copyWhenShared = false;
		return null;
	}
	,isVerticesDataPresent: function(kind) {
		return false;
	}
	,getBoundingInfo: function() {
		if(this._masterMesh != null) return this._masterMesh.getBoundingInfo();
		if(this._boundingInfo == null) this._updateBoundingInfo();
		return this._boundingInfo;
	}
	,_preActivate: function() {
	}
	,_activate: function(renderId) {
		this._renderId = renderId;
	}
	,getWorldMatrix: function() {
		if(this._masterMesh != null) return this._masterMesh.getWorldMatrix();
		if(this._currentRenderId != this._scene._renderId) this.computeWorldMatrix();
		return this._worldMatrix;
	}
	,get_worldMatrixFromCache: function() {
		return this._worldMatrix;
	}
	,get_absolutePosition: function() {
		return this._absolutePosition;
	}
	,freezeWorldMatrix: function() {
		this._isWorldMatrixFrozen = false;
		this.computeWorldMatrix(true);
		this._isWorldMatrixFrozen = true;
	}
	,unfreezeWorldMatrix: function() {
		this._isWorldMatrixFrozen = false;
		this.computeWorldMatrix(true);
	}
	,get_isWorldMatrixFrozen: function() {
		return this._isWorldMatrixFrozen;
	}
	,rotate: function(axis,amount,space) {
		axis.normalize();
		if(this.rotationQuaternion == null) {
			this.rotationQuaternion = com_babylonhx_math_Quaternion.RotationYawPitchRoll(this.rotation.y,this.rotation.x,this.rotation.z);
			this.rotation = new com_babylonhx_math_Vector3(0,0,0);
		}
		if(space == null || space == com_babylonhx_math_Space.LOCAL) {
			var rotationQuaternion = com_babylonhx_math_Quaternion.RotationAxis(axis,amount);
			this.rotationQuaternion = this.rotationQuaternion.multiply(rotationQuaternion);
		} else {
			if(this.parent != null) {
				var invertParentWorldMatrix = this.parent.getWorldMatrix().clone();
				invertParentWorldMatrix.invertToRef(invertParentWorldMatrix);
				invertParentWorldMatrix;
				axis = com_babylonhx_math_Vector3.TransformNormal(axis,invertParentWorldMatrix);
			}
			this.rotationQuaternion = com_babylonhx_math_Quaternion.RotationAxis(axis,amount);
			this.rotationQuaternion = this.rotationQuaternion.multiply(this.rotationQuaternion);
		}
	}
	,translate: function(axis,distance,space) {
		var displacementVector = new com_babylonhx_math_Vector3(axis.x * distance,axis.y * distance,axis.z * distance);
		if(space == null || space == com_babylonhx_math_Space.LOCAL) {
			var tempV3 = this.getPositionExpressedInLocalSpace().add(displacementVector);
			this.computeWorldMatrix();
			this.position = com_babylonhx_math_Vector3.TransformNormal(tempV3,this._localWorld);
		} else this.setAbsolutePosition(((function($this) {
			var $r;
			$this.computeWorldMatrix();
			$r = $this._absolutePosition;
			return $r;
		}(this))).add(displacementVector));
	}
	,getAbsolutePosition: function() {
		this.computeWorldMatrix();
		return this._absolutePosition;
	}
	,setAbsolutePosition: function(absolutePosition) {
		if(absolutePosition == null) return;
		var absolutePositionX = 0;
		var absolutePositionY = 0;
		var absolutePositionZ = 0;
		if((absolutePosition instanceof Array) && absolutePosition.__enum__ == null) {
			if(absolutePosition.length < 3) return;
			absolutePositionX = absolutePosition[0];
			absolutePositionY = absolutePosition[1];
			absolutePositionZ = absolutePosition[2];
		} else {
			absolutePositionX = absolutePosition.x;
			absolutePositionY = absolutePosition.y;
			absolutePositionZ = absolutePosition.z;
		}
		if(this.parent != null) {
			var invertParentWorldMatrix = this.parent.getWorldMatrix().clone();
			invertParentWorldMatrix.invertToRef(invertParentWorldMatrix);
			invertParentWorldMatrix;
			var worldPosition = new com_babylonhx_math_Vector3(absolutePositionX,absolutePositionY,absolutePositionZ);
			this.position = com_babylonhx_math_Vector3.TransformCoordinates(worldPosition,invertParentWorldMatrix);
		} else {
			this.position.x = absolutePositionX;
			this.position.y = absolutePositionY;
			this.position.z = absolutePositionZ;
		}
	}
	,movePOV: function(amountRight,amountUp,amountForward) {
		this.position.addInPlace(this.calcMovePOV(amountRight,amountUp,amountForward));
	}
	,calcMovePOV: function(amountRight,amountUp,amountForward) {
		var rotMatrix = new com_babylonhx_math_Matrix();
		var rotQuaternion;
		if(this.rotationQuaternion != null) rotQuaternion = this.rotationQuaternion; else rotQuaternion = com_babylonhx_math_Quaternion.RotationYawPitchRoll(this.rotation.y,this.rotation.x,this.rotation.z);
		rotQuaternion.toRotationMatrix(rotMatrix);
		var translationDelta = new com_babylonhx_math_Vector3(0,0,0);
		var defForwardMult;
		if(this.definedFacingForward) defForwardMult = -1; else defForwardMult = 1;
		com_babylonhx_math_Vector3.TransformCoordinatesFromFloatsToRef(amountRight * defForwardMult,amountUp,amountForward * defForwardMult,rotMatrix,translationDelta);
		return translationDelta;
	}
	,rotatePOV: function(flipBack,twirlClockwise,tiltRight) {
		this.rotation.addInPlace(this.calcRotatePOV(flipBack,twirlClockwise,tiltRight));
	}
	,calcRotatePOV: function(flipBack,twirlClockwise,tiltRight) {
		var defForwardMult;
		if(this.definedFacingForward) defForwardMult = 1; else defForwardMult = -1;
		return new com_babylonhx_math_Vector3(flipBack * defForwardMult,twirlClockwise,tiltRight * defForwardMult);
	}
	,setPivotMatrix: function(matrix) {
		this._pivotMatrix = matrix;
		this._cache.pivotMatrixUpdated = true;
	}
	,getPivotMatrix: function() {
		return this._pivotMatrix;
	}
	,_isSynchronized: function() {
		if(this._isDirty) return false;
		if(this.billboardMode != this._cache.billboardMode || this.billboardMode != com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_NONE) return false;
		if(this._cache.pivotMatrixUpdated) return false;
		if(this.infiniteDistance) return false;
		if(!this._cache.position.equals(this.position)) return false;
		if(this.rotationQuaternion != null) {
			if(!this._cache.rotationQuaternion.equals(this.rotationQuaternion)) return false;
		} else if(!this._cache.rotation.equals(this.rotation)) return false;
		if(!this._cache.scaling.equals(this.scaling)) return false;
		return true;
	}
	,_initCache: function() {
		com_babylonhx_Node.prototype._initCache.call(this);
		this._cache.localMatrixUpdated = false;
		this._cache.position = new com_babylonhx_math_Vector3(0,0,0);
		this._cache.scaling = new com_babylonhx_math_Vector3(0,0,0);
		this._cache.rotation = new com_babylonhx_math_Vector3(0,0,0);
		this._cache.rotationQuaternion = new com_babylonhx_math_Quaternion(0,0,0,0);
		this._cache.billboardMode = -1;
	}
	,markAsDirty: function(property) {
		if(property == "rotation") this.rotationQuaternion = null;
		this._currentRenderId = Infinity;
		this._isDirty = true;
	}
	,_updateBoundingInfo: function() {
		if(this._boundingInfo == null) this._boundingInfo = new com_babylonhx_culling_BoundingInfo(this.get_absolutePosition(),this.get_absolutePosition()); else this._boundingInfo = this._boundingInfo;
		this._boundingInfo._update(this.get_worldMatrixFromCache());
		this._updateSubMeshesBoundingInfo(this.get_worldMatrixFromCache());
	}
	,_updateSubMeshesBoundingInfo: function(matrix) {
		if(this.subMeshes == null) return;
		var _g = 0;
		var _g1 = this.subMeshes;
		while(_g < _g1.length) {
			var subMesh = _g1[_g];
			++_g;
			if(subMesh._boundingInfo == null) subMesh.refreshBoundingInfo();
			subMesh._boundingInfo._update(matrix);
		}
	}
	,computeWorldMatrix: function(force) {
		if(force == null) force = false;
		if(this._isWorldMatrixFrozen) return this._worldMatrix;
		if(!force && (this._currentRenderId == this._scene._renderId || this.isSynchronized(true))) return this._worldMatrix;
		this._cache.position.copyFrom(this.position);
		this._cache.scaling.copyFrom(this.scaling);
		this._cache.pivotMatrixUpdated = false;
		this._cache.billboardMode = this.billboardMode;
		this._currentRenderId = this._scene._renderId;
		this._isDirty = false;
		com_babylonhx_math_Matrix.ScalingToRef(this.scaling.x,this.scaling.y,this.scaling.z,this._localScaling);
		if(this.rotationQuaternion != null) {
			this.rotationQuaternion.toRotationMatrix(this._localRotation);
			this._cache.rotationQuaternion.copyFrom(this.rotationQuaternion);
		} else {
			com_babylonhx_math_Quaternion.RotationYawPitchRollToRef(this.rotation.y,this.rotation.x,this.rotation.z,com_babylonhx_math_Matrix._tempQuaternion);
			com_babylonhx_math_Matrix._tempQuaternion.toRotationMatrix(this._localRotation);
			this._cache.rotation.copyFrom(this.rotation);
		}
		if(this.infiniteDistance && this.parent == null) {
			var camera = this._scene.activeCamera;
			if(camera != null) {
				com_babylonhx_mesh_AbstractMesh.cameraWorldMatrix = camera.getWorldMatrix();
				com_babylonhx_mesh_AbstractMesh.cameraGlobalPosition.copyFromFloats(com_babylonhx_mesh_AbstractMesh.cameraWorldMatrix.m[12],com_babylonhx_mesh_AbstractMesh.cameraWorldMatrix.m[13],com_babylonhx_mesh_AbstractMesh.cameraWorldMatrix.m[14]);
				com_babylonhx_math_Matrix.TranslationToRef(this.position.x + com_babylonhx_mesh_AbstractMesh.cameraGlobalPosition.x,this.position.y + com_babylonhx_mesh_AbstractMesh.cameraGlobalPosition.y,this.position.z + com_babylonhx_mesh_AbstractMesh.cameraGlobalPosition.z,this._localTranslation);
			}
		} else com_babylonhx_math_Matrix.TranslationToRef(this.position.x,this.position.y,this.position.z,this._localTranslation);
		this._pivotMatrix.multiplyToRef(this._localScaling,this._localPivotScaling);
		this._localPivotScaling.multiplyToRef(this._localRotation,this._localPivotScalingRotation);
		if(this.billboardMode != com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_NONE && this._scene.activeCamera != null) {
			var localPosition = this.position.clone();
			var zero = this._scene.activeCamera.get_globalPosition().clone();
			if(this.parent != null && Object.prototype.hasOwnProperty.call(this.parent,"position")) {
				localPosition.addInPlace(this.parent.position);
				com_babylonhx_math_Matrix.TranslationToRef(localPosition.x,localPosition.y,localPosition.z,this._localTranslation);
			}
			if((this.billboardMode & com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_ALL) != com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_ALL) zero = this._scene.activeCamera.position; else {
				if((this.billboardMode & com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_X) != 0) zero.x = localPosition.x + 0.001;
				if((this.billboardMode & com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_Y) != 0) zero.y = localPosition.y + 0.001;
				if((this.billboardMode & com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_Z) != 0) zero.z = localPosition.z + 0.001;
			}
			com_babylonhx_math_Matrix.LookAtLHToRef(localPosition,zero,new com_babylonhx_math_Vector3(0,1.0,0),this._localBillboard);
			this._localBillboard.m[12] = 0;
			this._localBillboard.m[13] = 0;
			this._localBillboard.m[14] = 0;
			this._localBillboard.invert();
			this._localPivotScalingRotation.multiplyToRef(this._localBillboard,this._localWorld);
			this._rotateYByPI.multiplyToRef(this._localWorld,this._localPivotScalingRotation);
		}
		this._localPivotScalingRotation.multiplyToRef(this._localTranslation,this._localWorld);
		if(this.parent != null && this.parent.getWorldMatrix() != null && this.billboardMode == com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_NONE) {
			this._parentRenderId = this.parent._currentRenderId;
			if(this._meshToBoneReferal != null) {
				if(this._localMeshReferalTransform == null) this._localMeshReferalTransform = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
				this._localWorld.multiplyToRef(this.parent.getWorldMatrix(),this._localMeshReferalTransform);
				this._localMeshReferalTransform.multiplyToRef(this._meshToBoneReferal.getWorldMatrix(),this._worldMatrix);
			} else this._localWorld.multiplyToRef(this.parent.getWorldMatrix(),this._worldMatrix);
		} else this._worldMatrix.copyFrom(this._localWorld);
		if(this._boundingInfo == null) this._boundingInfo = new com_babylonhx_culling_BoundingInfo(this.get_absolutePosition(),this.get_absolutePosition()); else this._boundingInfo = this._boundingInfo;
		this._boundingInfo._update(this.get_worldMatrixFromCache());
		this._updateSubMeshesBoundingInfo(this.get_worldMatrixFromCache());
		this._absolutePosition.copyFromFloats(this._worldMatrix.m[12],this._worldMatrix.m[13],this._worldMatrix.m[14]);
		var _g = 0;
		var _g1 = this._onAfterWorldMatrixUpdate;
		while(_g < _g1.length) {
			var callbackIndex = _g1[_g];
			++_g;
			callbackIndex(this);
		}
		return this._worldMatrix;
	}
	,registerAfterWorldMatrixUpdate: function(func) {
		this._onAfterWorldMatrixUpdate.push(func);
	}
	,unregisterAfterWorldMatrixUpdate: function(func) {
		var index = HxOverrides.indexOf(this._onAfterWorldMatrixUpdate,func,0);
		if(index > -1) this._onAfterWorldMatrixUpdate.splice(index,1);
	}
	,setPositionWithLocalVector: function(vector3) {
		this.computeWorldMatrix();
		this.position = com_babylonhx_math_Vector3.TransformNormal(vector3,this._localWorld);
	}
	,getPositionExpressedInLocalSpace: function() {
		this.computeWorldMatrix();
		var invLocalWorldMatrix = this._localWorld.clone();
		invLocalWorldMatrix.invertToRef(invLocalWorldMatrix);
		invLocalWorldMatrix;
		return com_babylonhx_math_Vector3.TransformNormal(this.position,invLocalWorldMatrix);
	}
	,locallyTranslate: function(vector3) {
		this.computeWorldMatrix();
		this.position = com_babylonhx_math_Vector3.TransformCoordinates(vector3,this._localWorld);
	}
	,lookAt: function(targetPoint,yawCor,pitchCor,rollCor) {
		if(rollCor == null) rollCor = 0;
		if(pitchCor == null) pitchCor = 0;
		if(yawCor == null) yawCor = 0;
		var dv = targetPoint.subtract(this.position);
		var yaw = -Math.atan2(dv.z,dv.x) - Math.PI / 2;
		var len = Math.sqrt(dv.x * dv.x + dv.z * dv.z);
		var pitch = Math.atan2(dv.y,len);
		this.rotationQuaternion = com_babylonhx_math_Quaternion.RotationYawPitchRoll(yaw + yawCor,pitch + pitchCor,rollCor);
	}
	,attachToBone: function(bone,affectedMesh) {
		this._meshToBoneReferal = affectedMesh;
		this.parent = bone;
	}
	,detachFromBone: function() {
		this._meshToBoneReferal = null;
		this.parent = null;
	}
	,isInFrustum: function(frustumPlanes) {
		return this._boundingInfo.isInFrustum(frustumPlanes);
	}
	,isCompletelyInFrustum: function(camera) {
		if(camera == null) camera = this._scene.activeCamera;
		var transformMatrix = camera.getViewMatrix().multiply(camera.getProjectionMatrix(false));
		if(!this._boundingInfo.isCompletelyInFrustum(com_babylonhx_math_Frustum.GetPlanes(transformMatrix))) return false;
		return true;
	}
	,intersectsMesh: function(mesh,precise) {
		if(precise == null) precise = false;
		if(this._boundingInfo == null || mesh._boundingInfo == null) return false;
		return this._boundingInfo.intersects(mesh._boundingInfo,precise);
	}
	,intersectsPoint: function(point) {
		if(this._boundingInfo == null) return false;
		return this._boundingInfo.intersectsPoint(point);
	}
	,setPhysicsState: function(impostor,options) {
		var physicsEngine = this._scene._physicsEngine;
		if(physicsEngine == null) return null;
		if(impostor != null) impostor = impostor; else impostor = 0;
		if(Object.prototype.hasOwnProperty.call(impostor,"impostor")) {
			options = impostor;
			impostor = impostor.impostor;
		}
		if(impostor == 0) {
			physicsEngine._unregisterMesh(this);
			return null;
		}
		if(options == null) {
			options.mass = 0;
			options.friction = 0.2;
			options.restitution = 0.2;
		} else {
			if(options.mass == null) options.mass = 0;
			if(options.friction == null) options.friction = 0.2;
			if(options.restitution == null) options.restitution = 0.2;
		}
		this._physicImpostor = impostor;
		this._physicsMass = options.mass;
		this._physicsFriction = options.friction;
		this._physicRestitution = options.restitution;
		return physicsEngine._registerMesh(this,impostor,options);
	}
	,getPhysicsImpostor: function() {
		return this._physicImpostor;
	}
	,getPhysicsMass: function() {
		return this._physicsMass;
	}
	,getPhysicsFriction: function() {
		return this._physicsFriction;
	}
	,getPhysicsRestitution: function() {
		return this._physicRestitution;
	}
	,getPositionInCameraSpace: function(camera) {
		if(camera == null) camera = this._scene.activeCamera;
		return com_babylonhx_math_Vector3.TransformCoordinates(this.get_absolutePosition(),camera.getViewMatrix());
	}
	,getDistanceToCamera: function(camera) {
		if(camera == null) camera = this._scene.activeCamera;
		return this.get_absolutePosition().subtract(camera.position).length();
	}
	,applyImpulse: function(force,contactPoint) {
		if(this._physicImpostor != 0) this._scene._physicsEngine._applyImpulse(this,force,contactPoint);
	}
	,setPhysicsLinkWith: function(otherMesh,pivot1,pivot2,options) {
		if(this._physicImpostor != 0) this._scene._physicsEngine._createLink(this,otherMesh,pivot1,pivot2,options);
	}
	,updatePhysicsBodyPosition: function() {
		if(this._physicImpostor != 0) this._scene._physicsEngine._updateBodyPosition(this);
	}
	,get_checkCollisions: function() {
		return this._checkCollisions;
	}
	,set_checkCollisions: function(collisionEnabled) {
		this._checkCollisions = collisionEnabled;
		if(this._scene.get_workerCollisions()) this._scene.collisionCoordinator.onMeshUpdated(this);
		return collisionEnabled;
	}
	,moveWithCollisions: function(velocity) {
		var globalPosition;
		this.computeWorldMatrix();
		globalPosition = this._absolutePosition;
		globalPosition.subtractFromFloatsToRef(0,this.ellipsoid.y,0,this._oldPositionForCollisions);
		this._oldPositionForCollisions.addInPlace(this.ellipsoidOffset);
		this._collider.radius = this.ellipsoid;
		this._scene.collisionCoordinator.getNewPosition(this._oldPositionForCollisions,velocity,this._collider,3,this,$bind(this,this._onCollisionPositionChange),this.uniqueId);
	}
	,_onCollisionPositionChange: function(collisionId,newPosition,collidedMesh) {
		if(this._scene.get_workerCollisions()) newPosition.multiplyInPlace(this._collider.radius);
		newPosition.subtractToRef(this._oldPositionForCollisions,this._diffPositionForCollisions);
		if(this._diffPositionForCollisions.length() > com_babylonhx_Engine.CollisionsEpsilon) this.position.addInPlace(this._diffPositionForCollisions);
		if(this.onCollide != null && collidedMesh != null) this.onCollide(collidedMesh);
	}
	,createOrUpdateSubmeshesOctree: function(maxCapacity,maxDepth) {
		if(maxDepth == null) maxDepth = 2;
		if(maxCapacity == null) maxCapacity = 64;
		if(this._submeshesOctree == null) this._submeshesOctree = new com_babylonhx_culling_octrees_Octree(com_babylonhx_culling_octrees_Octree.CreationFuncForSubMeshes,maxCapacity,maxDepth);
		this.computeWorldMatrix(true);
		var bbox = this.getBoundingInfo().boundingBox;
		this._submeshesOctree.update(bbox.minimumWorld,bbox.maximumWorld,this.subMeshes);
		return this._submeshesOctree;
	}
	,_collideForSubMesh: function(subMesh,transformMatrix,collider) {
		this._generatePointsArray();
		if(subMesh._lastColliderWorldVertices == null || !subMesh._lastColliderTransformMatrix.equals(transformMatrix)) {
			subMesh._lastColliderTransformMatrix = com_babylonhx_math_Matrix.FromValues(transformMatrix.m[0],transformMatrix.m[1],transformMatrix.m[2],transformMatrix.m[3],transformMatrix.m[4],transformMatrix.m[5],transformMatrix.m[6],transformMatrix.m[7],transformMatrix.m[8],transformMatrix.m[9],transformMatrix.m[10],transformMatrix.m[11],transformMatrix.m[12],transformMatrix.m[13],transformMatrix.m[14],transformMatrix.m[15]);
			subMesh._lastColliderWorldVertices = [];
			subMesh._trianglePlanes = [];
			var start = subMesh.verticesStart;
			var end = subMesh.verticesStart + subMesh.verticesCount;
			var _g = start;
			while(_g < end) {
				var i = _g++;
				subMesh._lastColliderWorldVertices.push(com_babylonhx_math_Vector3.TransformCoordinates(this._positions[i],transformMatrix));
			}
		}
		collider._collide(subMesh,subMesh._lastColliderWorldVertices,this.getIndices(),subMesh.indexStart,subMesh.indexStart + subMesh.indexCount,subMesh.verticesStart);
		if(collider.collisionFound) collider.collidedMesh = this;
	}
	,_processCollisionsForSubMeshes: function(collider,transformMatrix) {
		var subMeshes;
		var len = 0;
		if(this._submeshesOctree != null && this.useOctreeForCollisions) {
			var radius = collider.velocityWorldLength + Math.max(Math.max(collider.radius.x,collider.radius.y),collider.radius.z);
			var intersections = this._submeshesOctree.intersects(collider.basePointWorld,radius,null);
			len = intersections.length;
			subMeshes = intersections.data;
		} else {
			subMeshes = this.subMeshes;
			len = subMeshes.length;
		}
		var _g = 0;
		while(_g < len) {
			var index = _g++;
			var subMesh = subMeshes[index];
			if(len > 1 && !subMesh._boundingInfo._checkCollision(collider)) continue;
			this._collideForSubMesh(subMesh,transformMatrix,collider);
		}
	}
	,_checkCollision: function(collider) {
		if(!this._boundingInfo._checkCollision(collider)) return;
		com_babylonhx_math_Matrix.ScalingToRef(1.0 / collider.radius.x,1.0 / collider.radius.y,1.0 / collider.radius.z,this._collisionsScalingMatrix);
		this.get_worldMatrixFromCache().multiplyToRef(this._collisionsScalingMatrix,this._collisionsTransformMatrix);
		this._processCollisionsForSubMeshes(collider,this._collisionsTransformMatrix);
	}
	,_generatePointsArray: function() {
		return false;
	}
	,intersects: function(ray,fastCheck) {
		if(fastCheck == null) fastCheck = false;
		var pickingInfo = new com_babylonhx_collisions_PickingInfo();
		if(this.subMeshes == null || this._boundingInfo == null || !ray.intersectsSphere(this._boundingInfo.boundingSphere) || !ray.intersectsBox(this._boundingInfo.boundingBox)) return pickingInfo;
		if(!this._generatePointsArray()) return pickingInfo;
		var intersectInfo = null;
		var subMeshes;
		var len;
		if(this._submeshesOctree != null && this.useOctreeForPicking) {
			var worldRay = com_babylonhx_math_Ray.Transform(ray,this.getWorldMatrix());
			var intersections = this._submeshesOctree.intersectsRay(worldRay);
			len = intersections.length;
			subMeshes = intersections.data;
		} else {
			subMeshes = this.subMeshes;
			len = subMeshes.length;
		}
		var _g = 0;
		while(_g < len) {
			var index = _g++;
			var subMesh = subMeshes[index];
			if(len > 1 && !ray.intersectsBox(subMesh._boundingInfo.boundingBox)) continue;
			var currentIntersectInfo = subMesh.intersects(ray,this._positions,this.getIndices(),fastCheck);
			if(currentIntersectInfo != null) {
				if(fastCheck || intersectInfo == null || currentIntersectInfo.distance < intersectInfo.distance) {
					intersectInfo = currentIntersectInfo;
					if(fastCheck) break;
				}
			}
		}
		if(intersectInfo != null) {
			var world = this.getWorldMatrix();
			var worldOrigin = com_babylonhx_math_Vector3.TransformCoordinates(ray.origin,world);
			var direction = ray.direction.clone();
			direction = direction.scale(intersectInfo.distance);
			var worldDirection = com_babylonhx_math_Vector3.TransformNormal(direction,world);
			var pickedPoint = new com_babylonhx_math_Vector3(worldOrigin.x + worldDirection.x,worldOrigin.y + worldDirection.y,worldOrigin.z + worldDirection.z);
			pickingInfo.hit = true;
			pickingInfo.distance = Math.sqrt(com_babylonhx_math_Vector3.DistanceSquared(worldOrigin,pickedPoint));
			pickingInfo.pickedPoint = pickedPoint;
			pickingInfo.pickedMesh = this;
			pickingInfo.bu = intersectInfo.bu;
			pickingInfo.bv = intersectInfo.bv;
			pickingInfo.faceId = intersectInfo.faceId;
			pickingInfo.subMeshId = intersectInfo.subMeshId;
			return pickingInfo;
		}
		return pickingInfo;
	}
	,clone: function(name,newParent,doNotCloneChildren) {
		if(doNotCloneChildren == null) doNotCloneChildren = false;
		return null;
	}
	,releaseSubMeshes: function() {
		if(this.subMeshes != null) while(this.subMeshes.length > 0) this.subMeshes[0].dispose(); else this.subMeshes = [];
	}
	,dispose: function(doNotRecurse) {
		if(doNotRecurse == null) doNotRecurse = false;
		if(this._physicImpostor != 0) this.setPhysicsState(0);
		this._scene.stopAnimation(this);
		var _g1 = 0;
		var _g = this._intersectionsInProgress.length;
		while(_g1 < _g) {
			var index = _g1++;
			var other = this._intersectionsInProgress[index];
			var pos = HxOverrides.indexOf(other._intersectionsInProgress,this,0);
			other._intersectionsInProgress.splice(pos,1);
		}
		this._intersectionsInProgress = [];
		this.releaseSubMeshes();
		this._scene.removeMesh(this);
		if(!doNotRecurse) {
			var index1 = 0;
			while(index1 < this._scene.particleSystems.length) {
				if(this._scene.particleSystems[index1].emitter == this) {
					this._scene.particleSystems[index1].dispose(null);
					index1--;
				}
				++index1;
			}
			var objects = this._scene.meshes.slice(0);
			var _g11 = 0;
			var _g2 = objects.length;
			while(_g11 < _g2) {
				var index2 = _g11++;
				if(objects[index2].parent == this) objects[index2].dispose();
			}
		} else {
			var _g12 = 0;
			var _g3 = this._scene.meshes.length;
			while(_g12 < _g3) {
				var index3 = _g12++;
				var obj = this._scene.meshes[index3];
				if(obj.parent == this) {
					obj.parent = null;
					obj.computeWorldMatrix(true);
				}
			}
		}
		this._onAfterWorldMatrixUpdate = [];
		this._isDisposed = true;
		if(this.onDispose != null) this.onDispose();
	}
	,__class__: com_babylonhx_mesh_AbstractMesh
	,__properties__: {set_checkCollisions:"set_checkCollisions",get_checkCollisions:"get_checkCollisions",get_isWorldMatrixFrozen:"get_isWorldMatrixFrozen",get_absolutePosition:"get_absolutePosition",get_worldMatrixFromCache:"get_worldMatrixFromCache",get_isBlocked:"get_isBlocked",get_useBones:"get_useBones",set_positions:"set_positions",get_positions:"get_positions",set_receiveShadows:"set_receiveShadows",get_receiveShadows:"get_receiveShadows",set_material:"set_material",get_material:"get_material",set_skeleton:"set_skeleton",get_skeleton:"get_skeleton",set_isPickable:"set_isPickable",get_isPickable:"get_isPickable",set_visibility:"set_visibility",get_visibility:"get_visibility"}
});
var com_babylonhx_mesh_Mesh = $hx_exports.BABYLON.Mesh = function(name,scene,parent,source,doNotCloneChildren) {
	if(doNotCloneChildren == null) doNotCloneChildren = false;
	this._closeArray = false;
	this._closePath = false;
	this.cap = 0;
	this._areNormalsFrozen = false;
	this._sideOrientation = 0;
	this._preActivateId = -1;
	this._instancesBufferSize = 2048;
	this._batchCache = new com_babylonhx_mesh__$InstancesBatch();
	this._renderIdForInstances = [];
	this._onAfterRenderCallbacks = [];
	this._onBeforeRenderCallbacks = [];
	this._LODLevels = [];
	this.instances = [];
	this.delayLoadState = 0;
	com_babylonhx_mesh_AbstractMesh.call(this,name,scene);
	if(source != null) {
		if(source._geometry != null) source._geometry.applyToMesh(this);
		com_babylonhx_mesh_Mesh._deepCopy(source,this);
		this.id = name + "." + source.id;
		if(source != null) this.set_material(source.get_material());
		if(!doNotCloneChildren) {
			var _g1 = 0;
			var _g = scene.meshes.length;
			while(_g1 < _g) {
				var index = _g1++;
				var mesh = scene.meshes[index];
				if(mesh.parent == source) {
					var newChild = mesh.clone(name + "." + mesh.name,this,doNotCloneChildren);
				}
			}
		}
		var _g11 = 0;
		var _g2 = scene.particleSystems.length;
		while(_g11 < _g2) {
			var index1 = _g11++;
			var system = scene.particleSystems[index1];
			if(system.emitter == source) system.clone(system.name,this);
		}
		this.computeWorldMatrix(true);
	}
	if(parent != null) this.parent = parent;
};
$hxClasses["com.babylonhx.mesh.Mesh"] = com_babylonhx_mesh_Mesh;
com_babylonhx_mesh_Mesh.__name__ = ["com","babylonhx","mesh","Mesh"];
com_babylonhx_mesh_Mesh.__interfaces__ = [com_babylonhx_animations_IAnimatable,com_babylonhx_mesh_IGetSetVerticesData];
com_babylonhx_mesh_Mesh._deepCopy = function(source,dest) {
	dest.__smartArrayFlags = source.__smartArrayFlags.slice();
	dest._LODLevels = source._LODLevels.slice();
	dest._absolutePosition = source._absolutePosition.clone();
	dest._batchCache = source._batchCache;
	dest._boundingInfo = source._boundingInfo;
	dest._cache = source._cache;
	dest._checkCollisions = source._checkCollisions;
	dest._childrenFlag = source._childrenFlag;
	dest._collider = source._collider;
	dest.instances = source.instances.slice();
	dest._collisionsScalingMatrix = source._collisionsScalingMatrix.clone();
	dest._collisionsTransformMatrix = source._collisionsTransformMatrix.clone();
	dest._diffPositionForCollisions = source._diffPositionForCollisions.clone();
	dest._geometry = source._geometry;
	dest._instancesBufferSize = source._instancesBufferSize;
	dest._intersectionsInProgress = source._intersectionsInProgress.slice();
	dest._isBlocked = source._isBlocked;
	dest._isDirty = source._isDirty;
	dest._isDisposed = source._isDisposed;
	dest._isEnabled = source._isEnabled;
	dest._isPickable = source._isPickable;
	dest._isReady = source._isReady;
	dest._localBillboard = source._localBillboard.clone();
	dest._localPivotScaling = source._localPivotScaling.clone();
	dest._localRotation = source._localRotation.clone();
	dest._localScaling = source._localScaling.clone();
	dest._localTranslation = source._localTranslation.clone();
	dest._localWorld = source._localWorld;
	dest._masterMesh = source._masterMesh;
	dest._newPositionForCollisions = source._newPositionForCollisions.clone();
	dest._oldPositionForCollisions = source._oldPositionForCollisions.clone();
	dest._onAfterRenderCallbacks = source._onAfterRenderCallbacks;
	dest._onAfterWorldMatrixUpdate = source._onAfterWorldMatrixUpdate;
	dest._onBeforeRenderCallbacks = source._onBeforeRenderCallbacks;
	dest._parentRenderId = source._parentRenderId;
	dest._physicImpostor = source._physicImpostor;
	dest._physicRestitution = source._physicRestitution;
	dest._physicsFriction = source._physicsFriction;
	dest._physicsMass = source._physicsMass;
	dest._pivotMatrix = source._pivotMatrix.clone();
	if(source._positions != null) dest._positions = source._positions.slice();
	dest._preActivateId = source._preActivateId;
	dest._receiveShadows = source._receiveShadows;
	dest._renderId = source._renderId;
	dest._renderIdForInstances = source._renderIdForInstances.slice();
	dest._rotateYByPI = source._rotateYByPI.clone();
	dest._scene = source._scene;
	dest._shouldGenerateFlatShading = source._shouldGenerateFlatShading;
	dest._submeshesOctree = source._submeshesOctree;
	dest._visibility = source._visibility;
	dest._visibleInstances = source._visibleInstances;
	dest._waitingActions = source._waitingActions;
	dest._waitingParentId = source._waitingParentId;
	dest._worldMatricesInstancesBuffer = source._worldMatricesInstancesBuffer;
	dest._worldMatrix = source._worldMatrix.clone();
	dest.definedFacingForward = source.definedFacingForward;
	dest.position = source.position.clone();
	dest.rotation = source.rotation.clone();
	if(source.rotationQuaternion != null) dest.rotationQuaternion = source.rotationQuaternion.clone();
	dest.scaling = source.scaling.clone();
	dest.billboardMode = source.billboardMode;
	dest.alphaIndex = source.alphaIndex;
	dest.infiniteDistance = source.infiniteDistance;
	dest.isVisible = source.isVisible;
	dest.showBoundingBox = source.showBoundingBox;
	dest.showSubMeshesBoundingBox = source.showSubMeshesBoundingBox;
	dest.onDispose = source.onDispose;
	dest.isBlocker = source.isBlocker;
	dest.renderingGroupId = source.renderingGroupId;
	dest.actionManager = source.actionManager;
	dest.renderOutline = source.renderOutline;
	dest.outlineColor = source.outlineColor.clone();
	dest.outlineWidth = source.outlineWidth;
	dest.renderOverlay = source.renderOverlay;
	dest.overlayColor = source.overlayColor.clone();
	dest.overlayAlpha = source.overlayAlpha;
	dest.hasVertexAlpha = source.hasVertexAlpha;
	dest.useVertexColors = source.useVertexColors;
	dest.applyFog = source.applyFog;
	dest.useOctreeForRenderingSelection = source.useOctreeForRenderingSelection;
	dest.useOctreeForPicking = source.useOctreeForPicking;
	dest.useOctreeForCollisions = source.useOctreeForCollisions;
	dest.layerMask = source.layerMask;
	dest.ellipsoid = source.ellipsoid.clone();
	dest.ellipsoidOffset = source.ellipsoidOffset.clone();
};
com_babylonhx_mesh_Mesh.CreateRibbon = function(name,pathArray,closeArray,closePath,offset,scene,updatable,sideOrientation,instance) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	if(offset == null) offset = 0;
	if(closePath == null) closePath = false;
	if(closeArray == null) closeArray = false;
	var options = { pathArray : pathArray, closeArray : closeArray, closePath : closePath, offset : offset, instance : instance, sideOrientation : sideOrientation, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.CreateRibbon(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateDisc = function(name,radius,tessellation,scene,updatable,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	var options = { radius : radius, tessellation : tessellation, sideOrientation : sideOrientation, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.CreateDisc(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateBox = function(name,size,scene,updatable,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	var options = { width : size, height : size, depth : size, sideOrientation : sideOrientation, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.CreateBox(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateSphere = function(name,segments,diameter,scene,updatable,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	var options = { segments : segments, diameterX : diameter, diameterY : diameter, diameterZ : diameter, sideOrientation : sideOrientation, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.CreateSphere(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateCylinder = function(name,height,diameterTop,diameterBottom,tessellation,subdivisions,scene,updatable,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	var options = { height : height, diameterTop : diameterTop, diameterBottom : diameterBottom, tessellation : tessellation, subdivisions : subdivisions, sideOrientation : sideOrientation, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.CreateCylinder(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateTorus = function(name,diameter,thickness,tessellation,scene,updatable,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	var options = { diameter : diameter, thickness : thickness, tessellation : tessellation, sideOrientation : sideOrientation, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.CreateTorus(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateTorusKnot = function(name,radius,tube,radialSegments,tubularSegments,p,q,scene,updatable,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	var options = { radius : radius, tube : tube, radialSegments : radialSegments, tubularSegments : tubularSegments, p : p, q : q, sideOrientation : sideOrientation, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.CreateTorusKnot(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateLines = function(name,points,scene,updatable,instance) {
	if(updatable == null) updatable = false;
	var options = { points : points, updatable : updatable, instance : instance};
	return com_babylonhx_mesh_MeshBuilder.CreateLines(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateDashedLines = function(name,points,dashSize,gapSize,dashNb,scene,updatable,instance) {
	if(updatable == null) updatable = false;
	var options = { points : points, dashSize : dashSize, gapSize : gapSize, dashNb : dashNb, updatable : updatable, instance : instance};
	return com_babylonhx_mesh_MeshBuilder.CreateDashedLines(name,options,scene);
};
com_babylonhx_mesh_Mesh.ExtrudeShape = function(name,shape,path,scale,rotation,cap,scene,updatable,sideOrientation,extrudedInstance) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	if(cap == null) cap = 0;
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var options = { shape : shape, path : path, scale : scale, rotation : rotation, cap : cap, sideOrientation : sideOrientation, extrudedInstance : extrudedInstance, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.ExtrudeShape(name,options,scene);
};
com_babylonhx_mesh_Mesh.ExtrudeShapeCustom = function(name,shape,path,scaleFunction,rotationFunction,ribbonCloseArray,ribbonClosePath,cap,scene,updatable,sideOrientation,extrudedInstance) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	if(cap == null) cap = 0;
	if(ribbonClosePath == null) ribbonClosePath = false;
	if(ribbonCloseArray == null) ribbonCloseArray = false;
	var options = { shape : shape, path : path, scaleFunction : scaleFunction, rotationFunction : rotationFunction, ribbonCloseArray : ribbonCloseArray, ribbonClosePath : ribbonClosePath, cap : cap, sideOrientation : sideOrientation, extrudedInstance : extrudedInstance, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.ExtrudeShapeCustom(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateLathe = function(name,shape,radius,tessellation,scene,updatable,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	if(tessellation == null) tessellation = 0;
	if(radius == null) radius = 1;
	var options = { shape : shape, radius : radius, tesselation : tessellation, sideOrientation : sideOrientation, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.CreateLathe(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreatePlane = function(name,size,scene,updatable,sideOrientation) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	var options = { width : size, height : size, sideOrientation : sideOrientation, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.CreatePlane(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateGround = function(name,width,height,subdivisions,scene,updatable) {
	if(updatable == null) updatable = false;
	var options = { width : width, height : height, subdivision : subdivisions, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.CreateGround(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateTiledGround = function(name,xmin,zmin,xmax,zmax,subdivisions,precision,scene,updatable) {
	if(updatable == null) updatable = false;
	var options = { xmin : xmin, zmin : zmin, xmax : xmax, zmax : zmax, subdivisions : subdivisions, precision : precision, updatable : updatable};
	return com_babylonhx_mesh_MeshBuilder.CreateTiledGround(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateGroundFromHeightMap = function(name,url,width,height,subdivisions,minHeight,maxHeight,scene,updatable,onReady) {
	if(updatable == null) updatable = false;
	var options = { width : width, height : height, subdivisions : subdivisions, minHeight : minHeight, maxHeight : maxHeight, updatable : updatable, onReady : onReady};
	return com_babylonhx_mesh_MeshBuilder.CreateGroundFromHeightMap(name,url,options,scene);
};
com_babylonhx_mesh_Mesh.CreateTube = function(name,path,radius,tessellation,radiusFunction,cap,scene,updatable,sideOrientation,instance) {
	if(sideOrientation == null) sideOrientation = 0;
	if(updatable == null) updatable = false;
	var options = { path : path, radius : radius, tessellation : tessellation, radiusFunction : radiusFunction, arc : 1, cap : cap, updatable : updatable, sideOrientation : sideOrientation, instance : instance};
	return com_babylonhx_mesh_MeshBuilder.CreateTube(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreatePolyhedron = function(name,options,scene) {
	return com_babylonhx_mesh_MeshBuilder.CreatePolyhedron(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateIcoSphere = function(name,options,scene) {
	return com_babylonhx_mesh_MeshBuilder.CreateIcoSphere(name,options,scene);
};
com_babylonhx_mesh_Mesh.CreateDecal = function(name,sourceMesh,position,normal,size,angle) {
	if(angle == null) angle = 0;
	var options = { position : position, normal : normal, size : size, angle : angle};
	return com_babylonhx_mesh_MeshBuilder.CreateDecal(name,sourceMesh,options);
};
com_babylonhx_mesh_Mesh.MinMax = function(meshes) {
	var minVector = null;
	var maxVector = null;
	var _g = 0;
	while(_g < meshes.length) {
		var mesh = meshes[_g];
		++_g;
		var boundingBox = mesh.getBoundingInfo().boundingBox;
		if(minVector == null) {
			minVector = boundingBox.minimumWorld;
			maxVector = boundingBox.maximumWorld;
			continue;
		}
		minVector.MinimizeInPlace(boundingBox.minimumWorld);
		maxVector.MaximizeInPlace(boundingBox.maximumWorld);
	}
	return { minimum : minVector, maximum : maxVector};
};
com_babylonhx_mesh_Mesh.Center = function(meshesOrMinMaxVector) {
	var minMaxVector;
	if(meshesOrMinMaxVector.min != null) minMaxVector = meshesOrMinMaxVector; else minMaxVector = com_babylonhx_mesh_Mesh.MinMax(meshesOrMinMaxVector);
	return com_babylonhx_math_Vector3.Center(minMaxVector.minimum,minMaxVector.maximum);
};
com_babylonhx_mesh_Mesh.MergeMeshes = function(meshes,disposeSource,allow32BitsIndices,meshSubclass) {
	if(allow32BitsIndices == null) allow32BitsIndices = false;
	if(disposeSource == null) disposeSource = true;
	if(!allow32BitsIndices) {
		var totalVertices = 0;
		var _g1 = 0;
		var _g = meshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(meshes[index] != null) {
				totalVertices += meshes[index].getTotalVertices();
				if(totalVertices > 65536) {
					haxe_Log.trace("Cannot merge meshes because resulting mesh will have more than 65536 vertices. Please use allow32BitsIndices = true to use 32 bits indices",{ fileName : "Mesh.hx", lineNumber : 1832, className : "com.babylonhx.mesh.Mesh", methodName : "MergeMeshes"});
					return null;
				}
			}
		}
	}
	var vertexData = null;
	var otherVertexData = null;
	var source = null;
	var _g11 = 0;
	var _g2 = meshes.length;
	while(_g11 < _g2) {
		var index1 = _g11++;
		if(meshes[index1] != null) {
			meshes[index1].computeWorldMatrix(true);
			otherVertexData = com_babylonhx_mesh_VertexData.ExtractFromMesh(meshes[index1],true);
			otherVertexData.transform(meshes[index1].getWorldMatrix());
			if(vertexData != null) vertexData.merge(otherVertexData); else {
				vertexData = otherVertexData;
				source = meshes[index1];
			}
		}
	}
	if(meshSubclass == null) meshSubclass = new com_babylonhx_mesh_Mesh(source.name + "_merged",source._scene);
	vertexData.applyToMesh(meshSubclass);
	meshSubclass.set_material(source.get_material());
	meshSubclass.set_checkCollisions(source.get_checkCollisions());
	if(disposeSource) {
		var _g12 = 0;
		var _g3 = meshes.length;
		while(_g12 < _g3) {
			var index2 = _g12++;
			if(meshes[index2] != null) meshes[index2].dispose();
		}
	}
	return meshSubclass;
};
com_babylonhx_mesh_Mesh.__super__ = com_babylonhx_mesh_AbstractMesh;
com_babylonhx_mesh_Mesh.prototype = $extend(com_babylonhx_mesh_AbstractMesh.prototype,{
	delayLoadState: null
	,instances: null
	,delayLoadingFile: null
	,_binaryInfo: null
	,_LODLevels: null
	,onLODLevelSelection: null
	,_geometry: null
	,_onBeforeRenderCallbacks: null
	,_onAfterRenderCallbacks: null
	,_delayInfo: null
	,_delayLoadingFunction: null
	,_visibleInstances: null
	,_renderIdForInstances: null
	,_batchCache: null
	,_worldMatricesInstancesBuffer: null
	,_worldMatricesInstancesArray: null
	,_instancesBufferSize: null
	,_shouldGenerateFlatShading: null
	,_preActivateId: null
	,_sideOrientation: null
	,_areNormalsFrozen: null
	,_sourcePositions: null
	,_sourceNormals: null
	,cap: null
	,rigidBody: null
	,physicsDim: null
	,path3D: null
	,pathArray: null
	,tessellation: null
	,_closePath: null
	,_closeArray: null
	,_idx: null
	,get_hasLODLevels: function() {
		return this._LODLevels.length > 0;
	}
	,_sortLODLevels: function() {
		this._LODLevels.sort(function(a,b) {
			if(a.distance < b.distance) return 1;
			if(a.distance > b.distance) return -1;
			return 0;
		});
	}
	,addLODLevel: function(distance,mesh) {
		if(mesh != null && mesh._masterMesh != null) {
			haxe_Log.trace("You cannot use a mesh as LOD level twice",{ fileName : "Mesh.hx", lineNumber : 310, className : "com.babylonhx.mesh.Mesh", methodName : "addLODLevel"});
			return this;
		}
		var level = new com_babylonhx_mesh_MeshLODLevel(distance,mesh);
		this._LODLevels.push(level);
		if(mesh != null) mesh._masterMesh = this;
		this._sortLODLevels();
		return this;
	}
	,getLODLevelAtDistance: function(distance) {
		var _g1 = 0;
		var _g = this._LODLevels.length;
		while(_g1 < _g) {
			var index = _g1++;
			var level = this._LODLevels[index];
			if(level.distance == distance) return level.mesh;
		}
		return null;
	}
	,removeLODLevel: function(mesh) {
		var _g1 = 0;
		var _g = this._LODLevels.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this._LODLevels[index].mesh == mesh) {
				this._LODLevels.splice(index,1);
				if(mesh != null) mesh._masterMesh = null;
			}
		}
		this._sortLODLevels();
		return this;
	}
	,getLOD: function(camera,boundingSphere) {
		if(this._LODLevels == null || this._LODLevels.length == 0) return this;
		var distanceToCamera = (boundingSphere != null?boundingSphere:this.getBoundingInfo().boundingSphere).centerWorld.subtract(camera.position).length();
		if(this._LODLevels[this._LODLevels.length - 1].distance > distanceToCamera) {
			if(this.onLODLevelSelection != null) this.onLODLevelSelection(distanceToCamera,this,this._LODLevels[this._LODLevels.length - 1].mesh);
			return this;
		}
		var _g1 = 0;
		var _g = this._LODLevels.length;
		while(_g1 < _g) {
			var index = _g1++;
			var level = this._LODLevels[index];
			if(level.distance < distanceToCamera) {
				if(level.mesh != null) {
					level.mesh._preActivate();
					level.mesh._updateSubMeshesBoundingInfo(this.get_worldMatrixFromCache());
				}
				if(this.onLODLevelSelection != null) this.onLODLevelSelection(distanceToCamera,this,level.mesh);
				return level.mesh;
			}
		}
		if(this.onLODLevelSelection != null) this.onLODLevelSelection(distanceToCamera,this,this);
		return this;
	}
	,get_geometry: function() {
		return this._geometry;
	}
	,getTotalVertices: function() {
		if(this._geometry == null) return 0;
		return this._geometry.getTotalVertices();
	}
	,getVerticesData: function(kind,copyWhenShared) {
		if(copyWhenShared == null) copyWhenShared = false;
		if(this._geometry == null) return null;
		return this._geometry.getVerticesData(kind,copyWhenShared);
	}
	,getVertexBuffer: function(kind) {
		if(this._geometry == null) return null;
		return this._geometry.getVertexBuffer(kind);
	}
	,isVerticesDataPresent: function(kind) {
		if(this._geometry == null) {
			if(this._delayInfo != null) return HxOverrides.indexOf(this._delayInfo,kind,0) != -1;
			return false;
		}
		return this._geometry.isVerticesDataPresent(kind);
	}
	,getVerticesDataKinds: function() {
		if(this._geometry == null) {
			var result = [];
			if(this._delayInfo != null) {
				var _g = 0;
				var _g1 = this._delayInfo;
				while(_g < _g1.length) {
					var kind = _g1[_g];
					++_g;
					result.push(kind);
				}
			}
			return result;
		}
		return this._geometry.getVerticesDataKinds();
	}
	,getTotalIndices: function() {
		if(this._geometry == null) return 0;
		return this._geometry.getTotalIndices();
	}
	,getIndices: function(copyWhenShared) {
		if(copyWhenShared == null) copyWhenShared = false;
		if(this._geometry == null) return [];
		return this._geometry.getIndices(copyWhenShared);
	}
	,get_isBlocked: function() {
		return this._masterMesh != null;
	}
	,isReady: function() {
		if(this.delayLoadState == 2) return false;
		return com_babylonhx_mesh_AbstractMesh.prototype.isReady.call(this);
	}
	,isDisposed: function() {
		return this._isDisposed;
	}
	,get_sideOrientation: function() {
		return this._sideOrientation;
	}
	,set_sideOrientation: function(value) {
		this._sideOrientation = value;
		return value;
	}
	,get_areNormalsFrozen: function() {
		return this._areNormalsFrozen;
	}
	,freezeNormals: function() {
		this._areNormalsFrozen = true;
	}
	,unfreezeNormals: function() {
		this._areNormalsFrozen = false;
	}
	,_preActivate: function() {
		var sceneRenderId = this._scene._renderId;
		if(this._preActivateId == sceneRenderId) return;
		this._preActivateId = sceneRenderId;
		this._visibleInstances = null;
	}
	,_registerInstanceForRenderId: function(instance,renderId) {
		if(this._visibleInstances == null) this._visibleInstances = new com_babylonhx_mesh__$VisibleInstances(renderId,this._renderId);
		if(!this._visibleInstances.map.h.hasOwnProperty(renderId)) this._visibleInstances.map.h[renderId] = [];
		this._visibleInstances.map.h[renderId].push(instance);
	}
	,refreshBoundingInfo: function() {
		var data = this.getVerticesData("position");
		if(data != null) {
			var extend = com_babylonhx_tools_Tools.ExtractMinAndMax(data,0,this.getTotalVertices());
			this._boundingInfo = new com_babylonhx_culling_BoundingInfo(extend.minimum,extend.maximum);
		}
		if(this.subMeshes != null) {
			var _g1 = 0;
			var _g = this.subMeshes.length;
			while(_g1 < _g) {
				var index = _g1++;
				this.subMeshes[index].refreshBoundingInfo();
			}
		}
		if(this._boundingInfo == null) this._boundingInfo = new com_babylonhx_culling_BoundingInfo(this.get_absolutePosition(),this.get_absolutePosition()); else this._boundingInfo = this._boundingInfo;
		this._boundingInfo._update(this.get_worldMatrixFromCache());
		this._updateSubMeshesBoundingInfo(this.get_worldMatrixFromCache());
	}
	,_createGlobalSubMesh: function() {
		var totalVertices = this.getTotalVertices();
		if(totalVertices == 0 || this.getIndices() == null) return null;
		this.releaseSubMeshes();
		return new com_babylonhx_mesh_SubMesh(0,0,totalVertices,0,this.getTotalIndices(),this);
	}
	,subdivide: function(count) {
		if(count < 1) return;
		var totalIndices = this.getTotalIndices();
		var subdivisionSize = totalIndices / count | 0;
		var offset = 0;
		while(subdivisionSize % 3 != 0) subdivisionSize++;
		this.releaseSubMeshes();
		var _g = 0;
		while(_g < count) {
			var index = _g++;
			if(offset >= totalIndices) break;
			com_babylonhx_mesh_SubMesh.CreateFromIndices(0,offset,Std["int"](Math.min(subdivisionSize,totalIndices - offset)),this);
			offset += subdivisionSize;
		}
		this.synchronizeInstances();
	}
	,setVerticesData: function(kind,data,updatable,stride) {
		if(updatable == null) updatable = false;
		if(this._geometry == null) {
			var vertexData = new com_babylonhx_mesh_VertexData();
			vertexData.set(data,kind);
			var scene = this._scene;
			new com_babylonhx_mesh_Geometry(com_babylonhx_mesh_Geometry.RandomId(),scene,vertexData,updatable,this);
		} else this._geometry.setVerticesData(kind,data,updatable,stride);
	}
	,updateVerticesData: function(kind,data,updateExtends,makeItUnique) {
		if(makeItUnique == null) makeItUnique = false;
		if(updateExtends == null) updateExtends = false;
		if(this._geometry == null) return;
		if(!makeItUnique) this._geometry.updateVerticesData(kind,data,updateExtends); else {
			this.makeGeometryUnique();
			this.updateVerticesData(kind,data,updateExtends,false);
		}
	}
	,updateVerticesDataDirectly: function(kind,data,offset,makeItUnique) {
		if(makeItUnique == null) makeItUnique = false;
		if(offset == null) offset = 0;
		if(this._geometry == null) return;
		if(!makeItUnique) this._geometry.updateVerticesDataDirectly(kind,data,offset); else {
			this.makeGeometryUnique();
			this.updateVerticesDataDirectly(kind,data,offset,false);
		}
	}
	,updateMeshPositions: function(positionFunction,computeNormals) {
		if(computeNormals == null) computeNormals = true;
		var positions = this.getVerticesData("position");
		positionFunction(positions);
		this.updateVerticesData("position",positions,false,false);
		if(computeNormals) {
			var indices = this.getIndices();
			var normals = this.getVerticesData("normal");
			com_babylonhx_mesh_VertexData.ComputeNormals(positions,indices,normals);
			this.updateVerticesData("normal",normals,false,false);
		}
	}
	,makeGeometryUnique: function() {
		if(this._geometry == null) return;
		var geometry = this._geometry.copy(com_babylonhx_mesh_Geometry.RandomId());
		geometry.applyToMesh(this);
	}
	,setIndices: function(indices,totalVertices) {
		if(totalVertices == null) totalVertices = -1;
		if(this._geometry == null) {
			var vertexData = new com_babylonhx_mesh_VertexData();
			vertexData.indices = indices;
			var scene = this._scene;
			new com_babylonhx_mesh_Geometry(com_babylonhx_mesh_Geometry.RandomId(),scene,vertexData,false,this);
		} else this._geometry.setIndices(indices,totalVertices);
	}
	,_bind: function(subMesh,effect,fillMode) {
		var engine = this._scene._engine;
		var indexBufferToBind = null;
		switch(fillMode) {
		case 2:
			indexBufferToBind = null;
			break;
		case 1:
			indexBufferToBind = subMesh.getLinesIndexBuffer(this.getIndices(),engine);
			break;
		case 0:
			indexBufferToBind = this._geometry.getIndexBuffer();
			break;
		default:
			indexBufferToBind = this._geometry.getIndexBuffer();
		}
		engine.bindMultiBuffers(this._geometry.getVertexBuffers(),indexBufferToBind,effect);
	}
	,_draw: function(subMesh,fillMode,instancesCount) {
		if(this._geometry == null || this._geometry.getVertexBuffers() == null || this._geometry.getIndexBuffer() == null) return;
		var engine = this._scene._engine;
		switch(fillMode) {
		case 2:
			engine.drawPointClouds(subMesh.verticesStart,subMesh.verticesCount,instancesCount);
			break;
		case 1:
			engine.draw(false,0,subMesh.linesIndexCount,instancesCount);
			break;
		default:
			engine.draw(true,subMesh.indexStart,subMesh.indexCount,instancesCount);
		}
	}
	,registerBeforeRender: function(func) {
		this._onBeforeRenderCallbacks.push(func);
	}
	,unregisterBeforeRender: function(func) {
		var index = HxOverrides.indexOf(this._onBeforeRenderCallbacks,func,0);
		if(index > -1) this._onBeforeRenderCallbacks.splice(index,1);
	}
	,registerAfterRender: function(func) {
		this._onAfterRenderCallbacks.push(func);
	}
	,unregisterAfterRender: function(func) {
		var index = HxOverrides.indexOf(this._onAfterRenderCallbacks,func,0);
		if(index > -1) this._onAfterRenderCallbacks.splice(index,1);
	}
	,_getInstancesRenderList: function(subMeshId) {
		var scene = this._scene;
		this._batchCache.mustReturn = false;
		this._batchCache.renderSelf[subMeshId] = this.isEnabled() && this.isVisible;
		this._batchCache.visibleInstances[subMeshId] = null;
		if(this._visibleInstances != null) {
			var currentRenderId = scene._renderId;
			this._batchCache.visibleInstances[subMeshId] = this._visibleInstances.map.h[currentRenderId];
			var selfRenderId = this._renderId;
			if(this._batchCache.visibleInstances[subMeshId] == null && this._visibleInstances.defaultRenderId > 0) {
				this._batchCache.visibleInstances[subMeshId] = this._visibleInstances.map.h[this._visibleInstances.defaultRenderId];
				currentRenderId = Math.max(this._visibleInstances.defaultRenderId,currentRenderId);
				selfRenderId = Math.max(this._visibleInstances.selfDefaultRenderId,currentRenderId);
			}
			if(this._batchCache.visibleInstances[subMeshId] != null && this._batchCache.visibleInstances[subMeshId].length > 0) {
				if(this._renderIdForInstances[subMeshId] == currentRenderId) {
					this._batchCache.mustReturn = true;
					return this._batchCache;
				}
				if(currentRenderId != selfRenderId) this._batchCache.renderSelf[subMeshId] = false;
			}
			this._renderIdForInstances[subMeshId] = currentRenderId;
		}
		return this._batchCache;
	}
	,_renderWithInstances: function(subMesh,fillMode,batch,effect,engine) {
		var visibleInstances = batch.visibleInstances[subMesh._id];
		var matricesCount = visibleInstances.length + 1;
		var bufferSize = matricesCount * 16 * 4;
		while(this._instancesBufferSize < bufferSize) this._instancesBufferSize *= 2;
		if(this._worldMatricesInstancesBuffer == null || this._worldMatricesInstancesBuffer.capacity < this._instancesBufferSize) {
			if(this._worldMatricesInstancesBuffer != null) engine.deleteInstancesBuffer(this._worldMatricesInstancesBuffer);
			this._worldMatricesInstancesBuffer = engine.createInstancesBuffer(this._instancesBufferSize);
			var elements = this._instancesBufferSize / 4 | 0;
			var this1;
			if(elements != null) this1 = new Float32Array(elements); else this1 = null;
			this._worldMatricesInstancesArray = this1;
		}
		var offset = 0;
		var instancesCount = 0;
		var world = this.getWorldMatrix();
		if(batch.renderSelf[subMesh._id]) {
			world.copyToArray(this._worldMatricesInstancesArray,offset);
			offset += 16;
			instancesCount++;
		}
		if(visibleInstances != null) {
			var _g1 = 0;
			var _g = visibleInstances.length;
			while(_g1 < _g) {
				var instanceIndex = _g1++;
				var instance = visibleInstances[instanceIndex];
				instance.getWorldMatrix().copyToArray(this._worldMatricesInstancesArray,offset);
				offset += 16;
				instancesCount++;
			}
		}
		var offsetLocation0 = effect.getAttributeLocationByName("world0");
		var offsetLocation1 = effect.getAttributeLocationByName("world1");
		var offsetLocation2 = effect.getAttributeLocationByName("world2");
		var offsetLocation3 = effect.getAttributeLocationByName("world3");
		var offsetLocations = [offsetLocation0,offsetLocation1,offsetLocation2,offsetLocation3];
		engine.updateAndBindInstancesBuffer(this._worldMatricesInstancesBuffer,this._worldMatricesInstancesArray,offsetLocations);
		this._draw(subMesh,fillMode,instancesCount);
		engine.unBindInstancesBuffer(this._worldMatricesInstancesBuffer,offsetLocations);
	}
	,_processRendering: function(subMesh,effect,fillMode,batch,hardwareInstancedRendering,onBeforeDraw) {
		var scene = this._scene;
		var engine = scene._engine;
		if(hardwareInstancedRendering) this._renderWithInstances(subMesh,fillMode,batch,effect,engine); else {
			if(batch.renderSelf[subMesh._id]) {
				if(onBeforeDraw != null) onBeforeDraw(false,this.getWorldMatrix());
				this._draw(subMesh,fillMode);
			}
			if(batch.visibleInstances[subMesh._id] != null) {
				var _g1 = 0;
				var _g = batch.visibleInstances[subMesh._id].length;
				while(_g1 < _g) {
					var instanceIndex = _g1++;
					var instance = batch.visibleInstances[subMesh._id][instanceIndex];
					var world = instance.getWorldMatrix();
					if(onBeforeDraw != null) onBeforeDraw(true,world);
					this._draw(subMesh,fillMode);
				}
			}
		}
	}
	,render: function(subMesh,enableAlphaMode) {
		var scene = this._scene;
		var batch = this._getInstancesRenderList(subMesh._id);
		if(batch.mustReturn) return;
		if(this._geometry == null || this._geometry.getVertexBuffers() == null || this._geometry.getIndexBuffer() == null) return;
		var _g1 = 0;
		var _g = this._onBeforeRenderCallbacks.length;
		while(_g1 < _g) {
			var callbackIndex = _g1++;
			this._onBeforeRenderCallbacks[callbackIndex](this);
		}
		var engine = scene._engine;
		var hardwareInstancedRendering = engine.getCaps().instancedArrays != null && batch.visibleInstances[subMesh._id] != null && (batch.visibleInstances.length > subMesh._id && batch.visibleInstances[subMesh._id] != null);
		var effectiveMaterial = subMesh.getMaterial();
		if(effectiveMaterial == null || !effectiveMaterial.isReady(this,hardwareInstancedRendering)) return;
		var savedDepthWrite = engine._depthCullingState.get_depthMask();
		if(this.renderOutline) {
			engine._depthCullingState.set_depthMask(false);
			scene._outlineRenderer.render(subMesh,batch);
			engine._depthCullingState.set_depthMask(savedDepthWrite);
		}
		effectiveMaterial._preBind();
		var effect = effectiveMaterial.getEffect();
		var fillMode;
		if(scene.forcePointsCloud) fillMode = 2; else if(scene.forceWireframe) fillMode = 1; else fillMode = effectiveMaterial.get_fillMode();
		this._bind(subMesh,effect,fillMode);
		var world = this.getWorldMatrix();
		effectiveMaterial.bind(world,this);
		if(enableAlphaMode) engine.setAlphaMode(effectiveMaterial.alphaMode);
		this._processRendering(subMesh,effect,fillMode,batch,hardwareInstancedRendering,function(isInstance,world1) {
			if(isInstance) effectiveMaterial.bindOnlyWorldMatrix(world1);
		});
		effectiveMaterial.unbind();
		if(this.renderOutline && savedDepthWrite) {
			engine._depthCullingState.set_depthMask(true);
			lime_graphics_opengl_GL.context.colorMask(false,false,false,false);
			scene._outlineRenderer.render(subMesh,batch);
			lime_graphics_opengl_GL.context.colorMask(true,true,true,true);
		}
		if(this.renderOverlay) {
			var currentMode = engine._alphaMode;
			if(engine._alphaMode == 2) null; else {
				switch(2) {
				case 0:
					engine._depthCullingState.set_depthMask(true);
					engine._alphaState.set_alphaBlend(false);
					break;
				case 2:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 6:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 1:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(770,1,0,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 3:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(0,769,1,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 4:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(774,0,1,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 5:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(770,769,1,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				}
				engine._alphaMode = 2;
			}
			scene._outlineRenderer.render(subMesh,batch,true);
			if(engine._alphaMode == currentMode) null; else {
				switch(currentMode) {
				case 0:
					engine._depthCullingState.set_depthMask(true);
					engine._alphaState.set_alphaBlend(false);
					break;
				case 2:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 6:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 1:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(770,1,0,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 3:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(0,769,1,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 4:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(774,0,1,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 5:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(770,769,1,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				}
				engine._alphaMode = currentMode;
			}
		}
		var _g11 = 0;
		var _g2 = this._onAfterRenderCallbacks.length;
		while(_g11 < _g2) {
			var callbackIndex1 = _g11++;
			this._onAfterRenderCallbacks[callbackIndex1](this);
		}
	}
	,getEmittedParticleSystems: function() {
		var results = [];
		var _g1 = 0;
		var _g = this._scene.particleSystems.length;
		while(_g1 < _g) {
			var index = _g1++;
			var particleSystem = this._scene.particleSystems[index];
			if(particleSystem.emitter == this) results.push(particleSystem);
		}
		return results;
	}
	,getHierarchyEmittedParticleSystems: function() {
		var results = [];
		var descendants = this.getDescendants();
		descendants.push(this);
		var _g1 = 0;
		var _g = this._scene.particleSystems.length;
		while(_g1 < _g) {
			var index = _g1++;
			var particleSystem = this._scene.particleSystems[index];
			if((function($this) {
				var $r;
				var x = particleSystem.emitter;
				$r = HxOverrides.indexOf(descendants,x,0);
				return $r;
			}(this)) != -1) results.push(particleSystem);
		}
		return results;
	}
	,getChildren: function() {
		var results = [];
		var _g1 = 0;
		var _g = this._scene.meshes.length;
		while(_g1 < _g) {
			var index = _g1++;
			var mesh = this._scene.meshes[index];
			if(mesh.parent == this) results.push(mesh);
		}
		return results;
	}
	,_checkDelayState: function() {
		var that = this;
		var scene = this._scene;
		if(this._geometry != null) this._geometry.load(scene); else if(that.delayLoadState == 4) {
			that.delayLoadState = 2;
			scene._addPendingData(that);
			var getBinaryData = this.delayLoadingFile.indexOf(".babylonbinarymeshdata") != -1;
		}
	}
	,isInFrustum: function(frustumPlanes) {
		if(this.delayLoadState == 2) return false;
		if(!com_babylonhx_mesh_AbstractMesh.prototype.isInFrustum.call(this,frustumPlanes)) return false;
		this._checkDelayState();
		return true;
	}
	,setMaterialByID: function(id) {
		var materials = this._scene.materials;
		var _g1 = 0;
		var _g = materials.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(materials[index].id == id) {
				this.set_material(materials[index]);
				return;
			}
		}
		var multiMaterials = this._scene.multiMaterials;
		var _g11 = 0;
		var _g2 = multiMaterials.length;
		while(_g11 < _g2) {
			var index1 = _g11++;
			if(multiMaterials[index1].id == id) {
				this.set_material(multiMaterials[index1]);
				return;
			}
		}
	}
	,getAnimatables: function() {
		var results = [];
		if(this.get_material() != null) results.push(this.get_material());
		if(this.get_skeleton() != null) results.push(this.get_skeleton());
		return results;
	}
	,bakeTransformIntoVertices: function(transform) {
		if(!this.isVerticesDataPresent("position")) return;
		this._positions = null;
		var data = this.getVerticesData("position");
		var temp = [];
		var index = 0;
		while(index < data.length) {
			com_babylonhx_math_Vector3.TransformCoordinates(new com_babylonhx_math_Vector3(data[index],data[index + 1],data[index + 2]),transform).toArray(temp,index);
			index += 3;
		}
		this.setVerticesData("position",temp,this.getVertexBuffer("position").isUpdatable());
		if(!this.isVerticesDataPresent("normal")) return;
		data = this.getVerticesData("normal");
		temp = [];
		index = 0;
		while(index < data.length) {
			com_babylonhx_math_Vector3.TransformNormal(new com_babylonhx_math_Vector3(data[index],data[index + 1],data[index + 2]),transform).normalize().toArray(temp,index);
			index += 3;
		}
		this.setVerticesData("normal",temp,this.getVertexBuffer("normal").isUpdatable());
		if(transform.m[0] * transform.m[5] * transform.m[10] < 0) this.flipFaces();
	}
	,bakeCurrentTransformIntoVertices: function() {
		this.bakeTransformIntoVertices(this.computeWorldMatrix(true));
		this.scaling.copyFromFloats(1,1,1);
		this.position.copyFromFloats(0,0,0);
		this.rotation.copyFromFloats(0,0,0);
		if(this.rotationQuaternion != null) this.rotationQuaternion = new com_babylonhx_math_Quaternion(0,0,0,1);
		this._worldMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	}
	,_resetPointsArrayCache: function() {
		this._positions = null;
	}
	,_generatePointsArray: function() {
		if(this._positions != null) return true;
		this._positions = [];
		var data = this.getVerticesData("position");
		if(data == null) return false;
		var index = 0;
		while(index < data.length) {
			this._positions.push(new com_babylonhx_math_Vector3(data[index],data[index + 1],data[index + 2]));
			index += 3;
		}
		return true;
	}
	,clone: function(name,newParent,doNotCloneChildren) {
		if(doNotCloneChildren == null) doNotCloneChildren = false;
		return new com_babylonhx_mesh_Mesh(name,this._scene,newParent,this,doNotCloneChildren);
	}
	,dispose: function(doNotRecurse) {
		if(doNotRecurse == null) doNotRecurse = false;
		if(this._geometry != null) this._geometry.releaseForMesh(this,true);
		if(this._worldMatricesInstancesBuffer != null) {
			this._scene._engine.deleteInstancesBuffer(this._worldMatricesInstancesBuffer);
			this._worldMatricesInstancesBuffer = null;
		}
		while(this.instances.length > 0) this.instances[0].dispose();
		com_babylonhx_mesh_AbstractMesh.prototype.dispose.call(this,doNotRecurse);
	}
	,applyDisplacementMap: function(url,minHeight,maxHeight,onSuccess,invert) {
		if(invert == null) invert = false;
		var _g = this;
		var scene = this._scene;
		var onload = function(img) {
			_g.applyDisplacementMapFromBuffer(img.data,img.width,img.height,minHeight,maxHeight,invert);
			if(onSuccess != null) onSuccess(_g);
		};
		com_babylonhx_tools_Tools.LoadImage(url,onload);
	}
	,applyDisplacementMapFromBuffer: function(buffer,heightMapWidth,heightMapHeight,minHeight,maxHeight,invert) {
		if(invert == null) invert = false;
		if(!this.isVerticesDataPresent("position") || !this.isVerticesDataPresent("normal") || !this.isVerticesDataPresent("uv") || !this.getVertexBuffer("position").isUpdatable() || !this.getVertexBuffer("normal").isUpdatable()) {
			haxe_Log.trace("Cannot call applyDisplacementMap:Given mesh is not complete. Position, Normal or UV are missing or not updatable!",{ fileName : "Mesh.hx", lineNumber : 1167, className : "com.babylonhx.mesh.Mesh", methodName : "applyDisplacementMapFromBuffer"});
			return;
		}
		var positions = this.getVerticesData("position");
		var normals = this.getVerticesData("normal");
		var uvs = this.getVerticesData("uv");
		var position = new com_babylonhx_math_Vector3(0,0,0);
		var normal = new com_babylonhx_math_Vector3(0,0,0);
		var uv = new com_babylonhx_math_Vector2(0,0);
		var index = 0;
		while(index < positions.length) {
			position.x = positions[index];
			position.y = positions[index + 1];
			position.z = positions[index + 2];
			normal.x = normals[index];
			normal.y = normals[index + 1];
			normal.z = normals[index + 2];
			com_babylonhx_math_Vector2.FromArrayToRef(uvs,index / 3 * 2 | 0,uv);
			var u = Std["int"](Math.abs(uv.x) * heightMapWidth % heightMapWidth);
			var v = Std["int"](Math.abs(uv.y) * heightMapHeight % heightMapHeight);
			var pos = (u + v * heightMapWidth) * 4 | 0;
			var r = _$UInt_UInt_$Impl_$.toFloat(buffer[pos]) / 255.0;
			var g = _$UInt_UInt_$Impl_$.toFloat(buffer[pos + 1]) / 255.0;
			var b = _$UInt_UInt_$Impl_$.toFloat(buffer[pos + 2]) / 255.0;
			var gradient = r * 0.3 + g * 0.59 + b * 0.11;
			normal.normalize();
			normal.scaleInPlace(minHeight + (maxHeight - minHeight) * gradient);
			if(invert) {
				normal.x *= -1;
				normal.y *= -1;
				normal.z *= -1;
				normal;
			}
			position = new com_babylonhx_math_Vector3(position.x + normal.x,position.y + normal.y,position.z + normal.z);
			positions[index] = position.x;
			positions[index + 1] = position.y;
			positions[index + 2] = position.z;
			index += 3;
		}
		com_babylonhx_mesh_VertexData.ComputeNormals(positions,this.getIndices(),normals);
		this.updateVerticesData("position",positions);
		this.updateVerticesData("normal",normals);
	}
	,convertToFlatShadedMesh: function() {
		var kinds = this.getVerticesDataKinds();
		var vbs = new haxe_ds_StringMap();
		var data = new haxe_ds_StringMap();
		var newdata = new haxe_ds_StringMap();
		var updatableNormals = false;
		var kindIndex = 0;
		while(kindIndex < kinds.length) {
			var kind = kinds[kindIndex];
			var vertexBuffer = this.getVertexBuffer(kind);
			if(kind == "normal") {
				updatableNormals = vertexBuffer._updatable;
				kinds.splice(kindIndex,1);
				kindIndex--;
				continue;
			}
			{
				if(__map_reserved[kind] != null) vbs.setReserved(kind,vertexBuffer); else vbs.h[kind] = vertexBuffer;
				vertexBuffer;
			}
			var v = (__map_reserved[kind] != null?vbs.getReserved(kind):vbs.h[kind]).getData();
			if(__map_reserved[kind] != null) data.setReserved(kind,v); else data.h[kind] = v;
			v;
			var v1 = [];
			if(__map_reserved[kind] != null) newdata.setReserved(kind,v1); else newdata.h[kind] = v1;
			v1;
			kindIndex++;
		}
		var previousSubmeshes = this.subMeshes.slice(0);
		var indices = this.getIndices();
		var totalIndices = this.getTotalIndices();
		var _g = 0;
		while(_g < totalIndices) {
			var index1 = _g++;
			var vertexIndex = indices[index1];
			var _g2 = 0;
			var _g1 = kinds.length;
			while(_g2 < _g1) {
				var kindIndex1 = _g2++;
				var kind1 = kinds[kindIndex1];
				var stride = (__map_reserved[kind1] != null?vbs.getReserved(kind1):vbs.h[kind1]).getStrideSize();
				var _g3 = 0;
				while(_g3 < stride) {
					var offset = _g3++;
					(__map_reserved[kind1] != null?newdata.getReserved(kind1):newdata.h[kind1]).push((__map_reserved[kind1] != null?data.getReserved(kind1):data.h[kind1])[vertexIndex * stride + offset]);
				}
			}
		}
		var normals = [];
		var positions;
		positions = __map_reserved.position != null?newdata.getReserved("position"):newdata.h["position"];
		var index = 0;
		while(index < totalIndices) {
			indices[index] = index;
			indices[index + 1] = index + 1;
			indices[index + 2] = index + 2;
			var p1 = com_babylonhx_math_Vector3.FromArray(positions,index * 3);
			var p2 = com_babylonhx_math_Vector3.FromArray(positions,(index + 1) * 3);
			var p3 = com_babylonhx_math_Vector3.FromArray(positions,(index + 2) * 3);
			var p1p2 = new com_babylonhx_math_Vector3(p1.x - p2.x,p1.y - p2.y,p1.z - p2.z);
			var p3p2 = new com_babylonhx_math_Vector3(p3.x - p2.x,p3.y - p2.y,p3.z - p2.z);
			var normal = com_babylonhx_math_Vector3.Normalize(com_babylonhx_math_Vector3.Cross(p1p2,p3p2));
			var _g4 = 0;
			while(_g4 < 3) {
				var localIndex = _g4++;
				normals.push(normal.x);
				normals.push(normal.y);
				normals.push(normal.z);
			}
			index += 3;
		}
		this.setIndices(indices);
		this.setVerticesData("normal",normals,updatableNormals);
		var _g11 = 0;
		var _g5 = kinds.length;
		while(_g11 < _g5) {
			var kindIndex2 = _g11++;
			var kind2 = kinds[kindIndex2];
			this.setVerticesData(kind2,__map_reserved[kind2] != null?newdata.getReserved(kind2):newdata.h[kind2],(__map_reserved[kind2] != null?vbs.getReserved(kind2):vbs.h[kind2]).isUpdatable());
		}
		this.releaseSubMeshes();
		var _g12 = 0;
		var _g6 = previousSubmeshes.length;
		while(_g12 < _g6) {
			var submeshIndex = _g12++;
			var previousOne = previousSubmeshes[submeshIndex];
			var subMesh = new com_babylonhx_mesh_SubMesh(previousOne.materialIndex,previousOne.indexStart,previousOne.indexCount,previousOne.indexStart,previousOne.indexCount,this);
		}
		this.synchronizeInstances();
	}
	,flipFaces: function(flipNormals) {
		if(flipNormals == null) flipNormals = false;
		var vertex_data = com_babylonhx_mesh_VertexData.ExtractFromMesh(this);
		if(flipNormals && this.isVerticesDataPresent("normal")) {
			var _g1 = 0;
			var _g = vertex_data.normals.length;
			while(_g1 < _g) {
				var i1 = _g1++;
				vertex_data.normals[i1] *= -1;
			}
		}
		var temp = 0;
		var i = 0;
		while(i < vertex_data.indices.length) {
			temp = vertex_data.indices[i + 1];
			vertex_data.indices[i + 1] = vertex_data.indices[i + 2];
			vertex_data.indices[i + 2] = temp;
			i += 3;
		}
		vertex_data.applyToMesh(this);
	}
	,createInstance: function(name) {
		return new com_babylonhx_mesh_InstancedMesh(name,this);
	}
	,synchronizeInstances: function() {
		var _g1 = 0;
		var _g = this.instances.length;
		while(_g1 < _g) {
			var instanceIndex = _g1++;
			var instance = this.instances[instanceIndex];
			instance._syncSubMeshes();
		}
	}
	,simplify: function(settings,parallelProcessing,simplificationType,successCallback) {
		if(simplificationType == null) simplificationType = 0;
		if(parallelProcessing == null) parallelProcessing = true;
		this._scene.simplificationQueue.addTask(new com_babylonhx_mesh_simplification_SimplificationTask(settings,simplificationType,this,successCallback,parallelProcessing));
	}
	,optimizeIndices: function(successCallback) {
		var _g = this;
		var indices = this.getIndices();
		var positions = this.getVerticesData("position");
		var vectorPositions = [];
		var pos = 0;
		while(pos < positions.length) {
			vectorPositions.push(new com_babylonhx_math_Vector3(positions[pos],positions[pos + 1],positions[pos + 2]));
			pos += 3;
		}
		var dupes = [];
		com_babylonhx_tools_AsyncLoop.SyncAsyncForLoop(vectorPositions.length,40,function(iteration) {
			var realPos = vectorPositions.length - 1 - iteration;
			var testedPosition = vectorPositions[realPos];
			var _g1 = 0;
			while(_g1 < realPos) {
				var j = _g1++;
				var againstPosition = vectorPositions[j];
				if(againstPosition != null && testedPosition.x == againstPosition.x && testedPosition.y == againstPosition.y && testedPosition.z == againstPosition.z) {
					dupes[realPos] = j;
					break;
				}
			}
		},function() {
			var _g11 = 0;
			var _g2 = indices.length;
			while(_g11 < _g2) {
				var i = _g11++;
				indices[i] = dupes[indices[i]];
			}
			var originalSubMeshes = _g.subMeshes.slice(0);
			_g.setIndices(indices);
			_g.subMeshes = originalSubMeshes;
			if(successCallback != null) successCallback(_g);
		});
	}
	,setPositionsForCPUSkinning: function() {
		var source = null;
		if(this._sourcePositions == null) {
			source = this.getVerticesData("position");
			this._sourcePositions = source;
			if(!this.getVertexBuffer("position").isUpdatable()) this.setVerticesData("position",source,true);
		}
		return this._sourcePositions;
	}
	,setNormalsForCPUSkinning: function() {
		var source = null;
		if(this._sourceNormals == null) {
			source = this.getVerticesData("normal");
			this._sourceNormals = source;
			if(!this.getVertexBuffer("normal").isUpdatable()) this.setVerticesData("normal",source,true);
		}
		return this._sourceNormals;
	}
	,applySkeleton: function(skeleton) {
		if(!this.isVerticesDataPresent("position")) return this;
		if(!this.isVerticesDataPresent("normal")) return this;
		if(!this.isVerticesDataPresent("matricesIndices")) return this;
		if(!this.isVerticesDataPresent("matricesWeights")) return this;
		if(this._sourcePositions == null) {
			var source = this.getVerticesData("position");
			this._sourcePositions = source;
			if(!this.getVertexBuffer("position").isUpdatable()) this.setVerticesData("position",source,true);
		}
		if(this._sourceNormals == null) {
			var source1 = this.getVerticesData("normal");
			this._sourceNormals = source1;
			if(!this.getVertexBuffer("normal").isUpdatable()) this.setVerticesData("normal",source1,true);
		}
		var positionsData = this.getVerticesData("position");
		var normalsData = this.getVerticesData("normal");
		var matricesIndicesData = this.getVerticesData("matricesIndices");
		var matricesWeightsData = this.getVerticesData("matricesWeights");
		var needExtras = this.numBoneInfluencers > 4;
		var matricesIndicesExtraData;
		if(needExtras) matricesIndicesExtraData = this.getVerticesData("matricesIndicesExtra"); else matricesIndicesExtraData = null;
		var matricesWeightsExtraData;
		if(needExtras) matricesWeightsExtraData = this.getVerticesData("matricesWeightsExtra"); else matricesWeightsExtraData = null;
		var skeletonMatrices = skeleton._transformMatrices;
		var tempVector3 = new com_babylonhx_math_Vector3(0,0,0);
		var finalMatrix = new com_babylonhx_math_Matrix();
		var tempMatrix = new com_babylonhx_math_Matrix();
		var matWeightIdx = 0;
		var index = 0;
		while(index < positionsData.length) {
			var _g = 0;
			while(_g < 4) {
				var inf = _g++;
				var weight = matricesWeightsData[matWeightIdx + inf];
				if(weight > 0) {
					com_babylonhx_math_Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices,matricesIndicesData[matWeightIdx + inf] * 16,weight,tempMatrix);
					finalMatrix.addToSelf(tempMatrix);
				} else break;
			}
			matWeightIdx += 4;
			if(needExtras) {
				var _g1 = 0;
				while(_g1 < 4) {
					var inf1 = _g1++;
					var weight1 = matricesWeightsExtraData[matWeightIdx + inf1];
					if(weight1 > 0) {
						com_babylonhx_math_Matrix.FromFloat32ArrayToRefScaled((function($this) {
							var $r;
							var this1;
							if(skeletonMatrices != null) this1 = new Float32Array(skeletonMatrices); else this1 = null;
							$r = this1;
							return $r;
						}(this)),matricesIndicesExtraData[matWeightIdx + inf1] * 16,weight1,tempMatrix);
						finalMatrix.addToSelf(tempMatrix);
					} else break;
				}
			}
			com_babylonhx_math_Vector3.TransformCoordinatesFromFloatsToRef(this._sourcePositions[index],this._sourcePositions[index + 1],this._sourcePositions[index + 2],finalMatrix,tempVector3);
			positionsData[index] = tempVector3.x;
			positionsData[index + 1] = tempVector3.y;
			positionsData[index + 2] = tempVector3.z;
			com_babylonhx_math_Vector3.TransformNormalFromFloatsToRef(this._sourceNormals[index],this._sourceNormals[index + 1],this._sourceNormals[index + 2],finalMatrix,tempVector3);
			normalsData[index] = tempVector3.x;
			normalsData[index + 1] = tempVector3.y;
			normalsData[index + 2] = tempVector3.z;
			finalMatrix.reset();
			index += 3;
		}
		this.updateVerticesData("position",positionsData);
		this.updateVerticesData("normal",normalsData);
		return this;
	}
	,__class__: com_babylonhx_mesh_Mesh
	,__properties__: $extend(com_babylonhx_mesh_AbstractMesh.prototype.__properties__,{get_geometry:"get_geometry",get_hasLODLevels:"get_hasLODLevels",get_areNormalsFrozen:"get_areNormalsFrozen",set_sideOrientation:"set_sideOrientation",get_sideOrientation:"get_sideOrientation"})
});
var com_babylonhx_mesh_SubMesh = $hx_exports.BABYLON.SubMesh = function(materialIndex,verticesStart,verticesCount,indexStart,indexCount,mesh,renderingMesh,createBoundingBox) {
	if(createBoundingBox == null) createBoundingBox = true;
	this._renderId = 0;
	this.materialIndex = materialIndex;
	this.verticesStart = verticesStart;
	this.verticesCount = verticesCount;
	this.indexStart = indexStart;
	this.indexCount = indexCount;
	this._mesh = mesh;
	if(renderingMesh != null) this._renderingMesh = renderingMesh; else this._renderingMesh = js_Boot.__cast(mesh , com_babylonhx_mesh_Mesh);
	mesh.subMeshes.push(this);
	this._trianglePlanes = [];
	this._id = mesh.subMeshes.length - 1;
	if(createBoundingBox) {
		this.refreshBoundingInfo();
		mesh.computeWorldMatrix(true);
	}
};
$hxClasses["com.babylonhx.mesh.SubMesh"] = com_babylonhx_mesh_SubMesh;
com_babylonhx_mesh_SubMesh.__name__ = ["com","babylonhx","mesh","SubMesh"];
com_babylonhx_mesh_SubMesh.CreateFromIndices = function(materialIndex,startIndex,indexCount,mesh,renderingMesh) {
	var minVertexIndex = Infinity;
	var maxVertexIndex = -Infinity;
	if(renderingMesh != null) renderingMesh = renderingMesh; else renderingMesh = js_Boot.__cast(mesh , com_babylonhx_mesh_Mesh);
	var indices = renderingMesh.getIndices();
	var _g1 = startIndex;
	var _g = startIndex + indexCount;
	while(_g1 < _g) {
		var index = _g1++;
		var vertexIndex = indices[index];
		if(vertexIndex < minVertexIndex) minVertexIndex = vertexIndex;
		if(vertexIndex > maxVertexIndex) maxVertexIndex = vertexIndex;
	}
	return new com_babylonhx_mesh_SubMesh(materialIndex,minVertexIndex | 0,maxVertexIndex - minVertexIndex + 1 | 0,startIndex,indexCount,mesh,renderingMesh);
};
com_babylonhx_mesh_SubMesh.prototype = {
	linesIndexCount: null
	,_mesh: null
	,_renderingMesh: null
	,_boundingInfo: null
	,_linesIndexBuffer: null
	,_lastColliderWorldVertices: null
	,_trianglePlanes: null
	,_lastColliderTransformMatrix: null
	,__smartArrayFlags: null
	,_renderId: null
	,_alphaIndex: null
	,_distanceToCamera: null
	,_id: null
	,materialIndex: null
	,verticesStart: null
	,verticesCount: null
	,indexStart: null
	,indexCount: null
	,getBoundingInfo: function() {
		return this._boundingInfo;
	}
	,getMesh: function() {
		return this._mesh;
	}
	,getRenderingMesh: function() {
		return this._renderingMesh;
	}
	,getMaterial: function() {
		var rootMaterial = this._renderingMesh.get_material();
		if(rootMaterial != null && js_Boot.__instanceof(rootMaterial,com_babylonhx_materials_MultiMaterial)) {
			var multiMaterial = rootMaterial;
			return multiMaterial.getSubMaterial(this.materialIndex);
		}
		if(rootMaterial == null) return this._mesh._scene.defaultMaterial;
		return rootMaterial;
	}
	,refreshBoundingInfo: function() {
		var data = this._renderingMesh.getVerticesData("position");
		if(data == null) {
			this._boundingInfo = this._mesh._boundingInfo;
			return;
		}
		var indices = this._renderingMesh.getIndices();
		var extend = { minimum : new com_babylonhx_math_Vector3(0,0,0), maximum : new com_babylonhx_math_Vector3(0,0,0)};
		if(this.indexStart == 0 && this.indexCount == indices.length) extend = { minimum : this._renderingMesh.getBoundingInfo().minimum.clone(), maximum : this._renderingMesh.getBoundingInfo().maximum.clone()}; else extend = com_babylonhx_tools_Tools.ExtractMinAndMaxIndexed(data,indices,this.indexStart,this.indexCount);
		this._boundingInfo = new com_babylonhx_culling_BoundingInfo(extend.minimum,extend.maximum);
	}
	,_checkCollision: function(collider) {
		return this._boundingInfo._checkCollision(collider);
	}
	,updateBoundingInfo: function(world) {
		if(this._boundingInfo == null) this.refreshBoundingInfo();
		this._boundingInfo._update(world);
	}
	,isInFrustum: function(frustumPlanes) {
		return this._boundingInfo.isInFrustum(frustumPlanes);
	}
	,render: function(enableAlphaMode) {
		this._renderingMesh.render(this,enableAlphaMode);
	}
	,getLinesIndexBuffer: function(indices,engine) {
		if(this._linesIndexBuffer == null) {
			var linesIndices = [];
			var index = this.indexStart;
			while(index < this.indexStart + this.indexCount) {
				linesIndices.push(indices[index]);
				linesIndices.push(indices[index + 1]);
				linesIndices.push(indices[index + 1]);
				linesIndices.push(indices[index + 2]);
				linesIndices.push(indices[index + 2]);
				linesIndices.push(indices[index]);
				index += 3;
			}
			this._linesIndexBuffer = engine.createIndexBuffer(linesIndices);
			this.linesIndexCount = linesIndices.length;
		}
		return this._linesIndexBuffer;
	}
	,canIntersects: function(ray) {
		return ray.intersectsBox(this._boundingInfo.boundingBox);
	}
	,intersects: function(ray,positions,indices,fastCheck) {
		if(fastCheck == null) fastCheck = false;
		var intersectInfo = null;
		if(positions != null && indices != null) {
			var index = this.indexStart;
			while(index < this.indexStart + this.indexCount) {
				var p0 = positions[indices[index]];
				var p1 = positions[indices[index + 1]];
				var p2 = positions[indices[index + 2]];
				var currentIntersectInfo = ray.intersectsTriangle(p0,p1,p2);
				if(currentIntersectInfo != null) {
					if(currentIntersectInfo.distance < 0) continue;
					if(fastCheck || intersectInfo == null || currentIntersectInfo.distance < intersectInfo.distance) {
						intersectInfo = currentIntersectInfo;
						intersectInfo.faceId = index / 3 | 0;
						if(fastCheck) break;
					}
				}
				index += 3;
			}
		}
		return intersectInfo;
	}
	,clone: function(newMesh,newRenderingMesh) {
		var result = new com_babylonhx_mesh_SubMesh(this.materialIndex,this.verticesStart,this.verticesCount,this.indexStart,this.indexCount,newMesh,newRenderingMesh,false);
		result._boundingInfo = new com_babylonhx_culling_BoundingInfo(this._boundingInfo.minimum,this._boundingInfo.maximum);
		return result;
	}
	,dispose: function() {
		if(this._linesIndexBuffer != null) {
			this._mesh._scene._engine._releaseBuffer(this._linesIndexBuffer);
			this._linesIndexBuffer = null;
		}
		HxOverrides.remove(this._mesh.subMeshes,this);
	}
	,__class__: com_babylonhx_mesh_SubMesh
};
var com_babylonhx_physics_PhysicsBodyCreationOptions = $hx_exports.BABYLON.PhysicsBodyCreationOptions = function(mass,friction,restitution,name) {
	if(name == null) name = "";
	this.name = "";
	if(name != "") this.name = name; else this.name = com_babylonhx_tools_Tools.uuid();
	this.mass = mass;
	this.friction = friction;
	this.restitution = restitution;
};
$hxClasses["com.babylonhx.physics.PhysicsBodyCreationOptions"] = com_babylonhx_physics_PhysicsBodyCreationOptions;
com_babylonhx_physics_PhysicsBodyCreationOptions.__name__ = ["com","babylonhx","physics","PhysicsBodyCreationOptions"];
com_babylonhx_physics_PhysicsBodyCreationOptions.prototype = {
	name: null
	,mass: null
	,friction: null
	,restitution: null
	,__class__: com_babylonhx_physics_PhysicsBodyCreationOptions
};
var com_babylonhx_particles_ParticleSystem = $hx_exports.BABYLON.ParticleSystem = function(name,capacity,scene,customEffect) {
	this.randomColor = new com_babylonhx_math_Color4();
	this._actualFrame = 0;
	this._stopped = false;
	this._started = false;
	this._alive = true;
	this._currentRenderId = -1;
	this._scaledGravity = new com_babylonhx_math_Vector3(0,0,0);
	this._scaledDirection = new com_babylonhx_math_Vector3(0,0,0);
	this._colorDiff = new com_babylonhx_math_Color4(0,0,0,0);
	this._scaledColorStep = new com_babylonhx_math_Color4(0,0,0,0);
	this._newPartsExcess = 0;
	this._stockParticles = [];
	this._vertexStrideSize = 44;
	this._vertexDeclaration = [3,4,4];
	this.particles = [];
	this.textureMask = new com_babylonhx_math_Color4(1.0,1.0,1.0,1.0);
	this.colorDead = new com_babylonhx_math_Color4(0,0,0,0.0);
	this.color2 = new com_babylonhx_math_Color4(1.0,1.0,1.0,0.4);
	this.color1 = new com_babylonhx_math_Color4(1.0,1.0,1.0,0.5);
	this.maxEmitBox = new com_babylonhx_math_Vector3(0.5,0.5,0.5);
	this.minEmitBox = new com_babylonhx_math_Vector3(-0.5,-0.5,-0.5);
	this.direction2 = new com_babylonhx_math_Vector3(0,1.0,0);
	this.direction1 = new com_babylonhx_math_Vector3(0,1.0,0);
	this.gravity = new com_babylonhx_math_Vector3(0,0,0);
	this.forceDepthWrite = false;
	this.blendMode = com_babylonhx_particles_ParticleSystem.BLENDMODE_ONEONE;
	this.layerMask = 268435455;
	this.maxAngularSpeed = 0;
	this.minAngularSpeed = 0;
	this.maxSize = 1;
	this.minSize = 1;
	this.maxLifeTime = 1;
	this.minLifeTime = 1;
	this.maxEmitPower = 1;
	this.minEmitPower = 1;
	this.disposeOnStop = false;
	this.targetStopDuration = 0;
	this.updateSpeed = 0.01;
	this.manualEmitCount = -1;
	this.emitRate = 10;
	this.emitter = null;
	this.renderingGroupId = 0;
	var _g = this;
	this.name = name;
	this.id = name;
	this._capacity = capacity;
	this._scene = scene;
	this._engine = scene._engine;
	this._customEffect = customEffect;
	scene.particleSystems.push(this);
	this._vertexBuffer = this._engine.createDynamicVertexBuffer(capacity * this._vertexStrideSize * 4);
	var indices = [];
	var index = 0;
	var _g1 = 0;
	while(_g1 < capacity) {
		var count = _g1++;
		indices.push(index);
		indices.push(index + 1);
		indices.push(index + 2);
		indices.push(index);
		indices.push(index + 2);
		indices.push(index + 3);
		index += 4;
	}
	this._indexBuffer = this._engine.createIndexBuffer(indices);
	var elements = capacity * this._vertexStrideSize;
	var this1;
	if(elements != null) this1 = new Float32Array(elements); else this1 = null;
	this._vertices = this1;
	this.startDirectionFunction = function(emitPower,worldMatrix,directionToUpdate) {
		var randX = _g.randomNumber(_g.direction1.x,_g.direction2.x);
		var randY = _g.randomNumber(_g.direction1.y,_g.direction2.y);
		var randZ = _g.randomNumber(_g.direction1.z,_g.direction2.z);
		com_babylonhx_math_Vector3.TransformNormalFromFloatsToRef(randX * emitPower,randY * emitPower,randZ * emitPower,worldMatrix,directionToUpdate);
	};
	this.startPositionFunction = function(worldMatrix1,positionToUpdate) {
		var randX1 = _g.randomNumber(_g.minEmitBox.x,_g.maxEmitBox.x);
		var randY1 = _g.randomNumber(_g.minEmitBox.y,_g.maxEmitBox.y);
		var randZ1 = _g.randomNumber(_g.minEmitBox.z,_g.maxEmitBox.z);
		com_babylonhx_math_Vector3.TransformCoordinatesFromFloatsToRef(randX1,randY1,randZ1,worldMatrix1,positionToUpdate);
	};
	this.updateFunction = function(particles) {
		var index1 = 0;
		while(index1 < particles.length) {
			var particle = particles[index1];
			particle.age += _g._scaledUpdateSpeed;
			if(particle.age >= particle.lifeTime) {
				particles.splice(index1,1);
				_g._stockParticles.push(particle);
			} else {
				particle.colorStep.scaleToRef(_g._scaledUpdateSpeed,_g._scaledColorStep);
				particle.color.addInPlace(_g._scaledColorStep);
				if(particle.color.a < 0) particle.color.a = 0;
				particle.angle += particle.angularSpeed * _g._scaledUpdateSpeed;
				particle.direction.scaleToRef(_g._scaledUpdateSpeed,_g._scaledDirection);
				particle.position.addInPlace(_g._scaledDirection);
				_g.gravity.scaleToRef(_g._scaledUpdateSpeed,_g._scaledGravity);
				particle.direction.addInPlace(_g._scaledGravity);
				index1++;
			}
		}
	};
	this._getEffect();
};
$hxClasses["com.babylonhx.particles.ParticleSystem"] = com_babylonhx_particles_ParticleSystem;
com_babylonhx_particles_ParticleSystem.__name__ = ["com","babylonhx","particles","ParticleSystem"];
com_babylonhx_particles_ParticleSystem.__interfaces__ = [com_babylonhx_ISmartArrayCompatible,com_babylonhx_IDisposable];
com_babylonhx_particles_ParticleSystem.prototype = {
	name: null
	,id: null
	,renderingGroupId: null
	,emitter: null
	,emitRate: null
	,manualEmitCount: null
	,updateSpeed: null
	,targetStopDuration: null
	,disposeOnStop: null
	,__smartArrayFlags: null
	,minEmitPower: null
	,maxEmitPower: null
	,minLifeTime: null
	,maxLifeTime: null
	,minSize: null
	,maxSize: null
	,minAngularSpeed: null
	,maxAngularSpeed: null
	,particleTexture: null
	,layerMask: null
	,onDispose: null
	,updateFunction: null
	,blendMode: null
	,forceDepthWrite: null
	,gravity: null
	,direction1: null
	,direction2: null
	,minEmitBox: null
	,maxEmitBox: null
	,color1: null
	,color2: null
	,colorDead: null
	,textureMask: null
	,startDirectionFunction: null
	,startPositionFunction: null
	,particles: null
	,particle: null
	,_capacity: null
	,_scene: null
	,_vertexDeclaration: null
	,_vertexStrideSize: null
	,_stockParticles: null
	,_newPartsExcess: null
	,_vertexBuffer: null
	,_indexBuffer: null
	,_vertices: null
	,_effect: null
	,_customEffect: null
	,_cachedDefines: null
	,_scaledColorStep: null
	,_colorDiff: null
	,_scaledDirection: null
	,_scaledGravity: null
	,_currentRenderId: null
	,_alive: null
	,_started: null
	,_stopped: null
	,_actualFrame: null
	,_scaledUpdateSpeed: null
	,_engine: null
	,getCapacity: function() {
		return this._capacity;
	}
	,isAlive: function() {
		return this._alive;
	}
	,isStarted: function() {
		return this._started;
	}
	,start: function() {
		this._started = true;
		this._stopped = false;
		this._actualFrame = 0;
	}
	,stop: function() {
		this._stopped = true;
	}
	,_appendParticleVertex: function(index,particle,offsetX,offsetY) {
		var offset = index * 11;
		this._vertices[offset] = particle.position.x;
		this._vertices[offset + 1] = particle.position.y;
		this._vertices[offset + 2] = particle.position.z;
		this._vertices[offset + 3] = particle.color.r;
		this._vertices[offset + 4] = particle.color.g;
		this._vertices[offset + 5] = particle.color.b;
		this._vertices[offset + 6] = particle.color.a;
		this._vertices[offset + 7] = particle.angle;
		this._vertices[offset + 8] = particle.size;
		this._vertices[offset + 9] = offsetX;
		this._vertices[offset + 10] = offsetY;
	}
	,_update: function(newParticles) {
		this._alive = this.particles.length > 0;
		this.updateFunction(this.particles);
		var worldMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
		if(this.emitter.position != null) worldMatrix = this.emitter.getWorldMatrix(); else worldMatrix = com_babylonhx_math_Matrix.Translation(this.emitter.x + this.randomNumber(-500,500),this.emitter.y,this.emitter.z + this.randomNumber(-500,500));
		var _g = 0;
		while(_g < newParticles) {
			var index = _g++;
			if(this.particles.length == this._capacity) break;
			if(this._stockParticles.length != 0) {
				this.particle = this._stockParticles.pop();
				this.particle.age = 0;
			} else this.particle = new com_babylonhx_particles_Particle();
			this.particles.push(this.particle);
			var emitPower = this.randomNumber(this.minEmitPower,this.maxEmitPower);
			this.startDirectionFunction(emitPower,worldMatrix,this.particle.direction);
			this.particle.lifeTime = this.randomNumber(this.minLifeTime,this.maxLifeTime);
			this.particle.size = this.randomNumber(this.minSize,this.maxSize);
			this.particle.angularSpeed = this.randomNumber(this.minAngularSpeed,this.maxAngularSpeed);
			this.startPositionFunction(worldMatrix,this.particle.position);
			var step = this.randomNumber(0,1.0);
			com_babylonhx_math_Color4.LerpToRef(this.color1,this.color2,step,this.particle.color);
			this.colorDead.subtractToRef(this.particle.color,this._colorDiff);
			this._colorDiff.scaleToRef(1.0 / this.particle.lifeTime,this.particle.colorStep);
		}
	}
	,_getEffect: function() {
		if(this._customEffect != null) return this._customEffect;
		var defines = [];
		if(this._scene.clipPlane != null) defines.push("#define CLIPPLANE");
		var join = defines.join("\n");
		if(this._cachedDefines != join) {
			this._cachedDefines = join;
			this._effect = this._engine.createEffect("particles",["position","color","options"],["invView","view","projection","vClipPlane","textureMask"],["diffuseSampler"],join);
		}
		return this._effect;
	}
	,animate: function() {
		if(!this._started) return;
		if(this.emitter == null || !this._effect._isReady || this.particleTexture == null || !this.particleTexture.isReady()) return;
		if(this._currentRenderId == this._scene._renderId) return;
		this._currentRenderId = this._scene._renderId;
		this._scaledUpdateSpeed = this.updateSpeed * this._scene._animationRatio;
		var emitCout = 0;
		if(this.manualEmitCount > -1) {
			emitCout = this.manualEmitCount;
			this.manualEmitCount = 0;
		} else emitCout = this.emitRate;
		var newParticles = emitCout * this._scaledUpdateSpeed | 0;
		this._newPartsExcess += emitCout * this._scaledUpdateSpeed - newParticles;
		if(this._newPartsExcess > 1.0) {
			newParticles += this._newPartsExcess;
			this._newPartsExcess -= this._newPartsExcess;
		}
		this._alive = false;
		if(!this._stopped) {
			this._actualFrame += this._scaledUpdateSpeed;
			if(this.targetStopDuration != 0 && this._actualFrame >= this.targetStopDuration) this.stop();
		} else newParticles = 0;
		this._update(newParticles);
		if(this._stopped) {
			if(!this._alive) {
				this._started = false;
				if(this.disposeOnStop) this._scene._toBeDisposed.push(this);
			}
		}
		var offset = 0;
		var _g1 = 0;
		var _g = this.particles.length;
		while(_g1 < _g) {
			var index = _g1++;
			var particle = this.particles[index];
			this._appendParticleVertex(offset++,particle,0,0);
			this._appendParticleVertex(offset++,particle,1,0);
			this._appendParticleVertex(offset++,particle,1,1);
			this._appendParticleVertex(offset++,particle,0,1);
		}
		this._engine.updateDynamicVertexBuffer(this._vertexBuffer,this._vertices,null);
	}
	,render: function() {
		if(this.emitter == null || !this._effect._isReady || this.particleTexture == null || !this.particleTexture.isReady()) return 0;
		this._engine.enableEffect(this._effect);
		this._engine.setState(false,null,null,null);
		var viewMatrix = this._scene._viewMatrix;
		this._effect.setTexture("diffuseSampler",this.particleTexture);
		this._effect.setMatrix("view",viewMatrix);
		this._effect.setMatrix("projection",this._scene._projectionMatrix);
		this._effect.setFloat4("textureMask",this.textureMask.r,this.textureMask.g,this.textureMask.b,this.textureMask.a);
		if(this._scene.clipPlane != null) {
			var clipPlane = this._scene.clipPlane;
			var invView = com_babylonhx_math_Matrix.FromValues(viewMatrix.m[0],viewMatrix.m[1],viewMatrix.m[2],viewMatrix.m[3],viewMatrix.m[4],viewMatrix.m[5],viewMatrix.m[6],viewMatrix.m[7],viewMatrix.m[8],viewMatrix.m[9],viewMatrix.m[10],viewMatrix.m[11],viewMatrix.m[12],viewMatrix.m[13],viewMatrix.m[14],viewMatrix.m[15]);
			invView.invertToRef(invView);
			invView;
			this._effect.setMatrix("invView",invView);
			this._effect.setFloat4("vClipPlane",clipPlane.normal.x,clipPlane.normal.y,clipPlane.normal.z,clipPlane.d);
		}
		this._engine.bindBuffers(this._vertexBuffer,this._indexBuffer,this._vertexDeclaration,this._vertexStrideSize,this._effect);
		if(this.blendMode == com_babylonhx_particles_ParticleSystem.BLENDMODE_ONEONE) this._engine.setAlphaMode(6); else this._engine.setAlphaMode(2);
		if(this.forceDepthWrite) this._engine._depthCullingState.set_depthMask(true);
		this._engine.draw(true,0,this.particles.length * 6);
		this._engine.setAlphaMode(0);
		return this.particles.length;
	}
	,dispose: function(doNotRecurse) {
		if(doNotRecurse == null) doNotRecurse = false;
		if(this._vertexBuffer != null) {
			this._engine._releaseBuffer(this._vertexBuffer);
			this._vertexBuffer = null;
		}
		if(this._indexBuffer != null) {
			this._engine._releaseBuffer(this._indexBuffer);
			this._indexBuffer = null;
		}
		if(this.particleTexture != null) {
			this.particleTexture.dispose();
			this.particleTexture = null;
		}
		HxOverrides.remove(this._scene.particleSystems,this);
		if(this.onDispose != null) this.onDispose();
	}
	,clone: function(name,newEmitter) {
		var result = new com_babylonhx_particles_ParticleSystem(name,this._capacity,this._scene);
		if(newEmitter == null) newEmitter = this.emitter;
		result.emitter = newEmitter;
		if(this.particleTexture != null) result.particleTexture = new com_babylonhx_materials_textures_Texture(this.particleTexture.url,this._scene);
		result.start();
		return result;
	}
	,randomColor: null
	,doubleColor4: function() {
		this.randomColor.b = Math.random() * 2;
		this.randomColor.r = Math.random() * 2;
		this.randomColor.g = Math.random() * 2;
		this.randomColor.a = Math.random();
		return this.randomColor;
	}
	,randomNumber: function(min,max) {
		if(min == max) return min;
		var random = Math.random();
		return random * (max - min) + min;
	}
	,__class__: com_babylonhx_particles_ParticleSystem
};
var com_babylonhx_math_Color4 = $hx_exports.BABYLON.Color4 = function(r,g,b,a) {
	if(a == null) a = 1.0;
	if(b == null) b = 0;
	if(g == null) g = 0;
	if(r == null) r = 0;
	this.r = r;
	this.g = g;
	this.b = b;
	this.a = a;
};
$hxClasses["com.babylonhx.math.Color4"] = com_babylonhx_math_Color4;
com_babylonhx_math_Color4.__name__ = ["com","babylonhx","math","Color4"];
com_babylonhx_math_Color4.FromHexString = function(hex) {
	if(hex.substring(0,1) != "#" || hex.length != 9) {
		haxe_Log.trace("Color4.FromHexString must be called with a string like #FFFFFFFF",{ fileName : "Color4.hx", lineNumber : 110, className : "com.babylonhx.math.Color4", methodName : "FromHexString"});
		return new com_babylonhx_math_Color4(0,0,0,0);
	}
	var r = Std.parseInt(hex.substring(1,3));
	var g = Std.parseInt(hex.substring(3,5));
	var b = Std.parseInt(hex.substring(5,7));
	var a = Std.parseInt(hex.substring(7,9));
	return com_babylonhx_math_Color4.FromInts(r,g,b,a);
};
com_babylonhx_math_Color4.Lerp = function(left,right,amount) {
	var result = new com_babylonhx_math_Color4(0,0,0,0);
	com_babylonhx_math_Color4.LerpToRef(left,right,amount,result);
	return result;
};
com_babylonhx_math_Color4.LerpToRef = function(left,right,amount,result) {
	result.r = left.r + (right.r - left.r) * amount;
	result.g = left.g + (right.g - left.g) * amount;
	result.b = left.b + (right.b - left.b) * amount;
	result.a = left.a + (right.a - left.a) * amount;
	return result;
};
com_babylonhx_math_Color4.FromArray = function(array,offset) {
	if(offset == null) offset = 0;
	return new com_babylonhx_math_Color4(array[offset],array[offset + 1],array[offset + 2],array[offset + 3]);
};
com_babylonhx_math_Color4.FromInts = function(r,g,b,a) {
	return new com_babylonhx_math_Color4(r / 255.0,g / 255.0,b / 255.0,a / 255.0);
};
com_babylonhx_math_Color4.prototype = {
	r: null
	,g: null
	,b: null
	,a: null
	,addInPlace: function(right) {
		this.r += right.r;
		this.g += right.g;
		this.b += right.b;
		this.a += right.a;
		return this;
	}
	,asArray: function() {
		var result = [];
		this.toArray(result,0);
		return result;
	}
	,toArray: function(array,index) {
		if(index == null) index = 0;
		array[index] = this.r;
		array[index + 1] = this.g;
		array[index + 2] = this.b;
		array[index + 3] = this.a;
		return this;
	}
	,add: function(right) {
		return new com_babylonhx_math_Color4(this.r + right.r,this.g + right.g,this.b + right.b,this.a + right.a);
	}
	,subtract: function(right) {
		return new com_babylonhx_math_Color4(this.r - right.r,this.g - right.g,this.b - right.b,this.a - right.a);
	}
	,subtractToRef: function(right,result) {
		result.r = this.r - right.r;
		result.g = this.g - right.g;
		result.b = this.b - right.b;
		result.a = this.a - right.a;
		return this;
	}
	,scale: function(scale) {
		return new com_babylonhx_math_Color4(this.r * scale,this.g * scale,this.b * scale,this.a * scale);
	}
	,scaleToRef: function(scale,result) {
		result.r = this.r * scale;
		result.g = this.g * scale;
		result.b = this.b * scale;
		result.a = this.a * scale;
		return this;
	}
	,toString: function() {
		return "{R:" + this.r + " G:" + this.g + " B:" + this.b + " A:" + this.a + "}";
	}
	,clone: function() {
		return new com_babylonhx_math_Color4(this.r,this.g,this.b,this.a);
	}
	,copyFrom: function(source) {
		this.r = source.r;
		this.g = source.g;
		this.b = source.b;
		this.a = source.a;
		return this;
	}
	,toHexString: function() {
		var intR = this.r * 255 | 0;
		var intG = this.g * 255 | 0;
		var intB = this.b * 255 | 0;
		var intA = this.a * 255 | 0;
		return "#" + com_babylonhx_tools_Tools.ToHex(intR) + com_babylonhx_tools_Tools.ToHex(intG) + com_babylonhx_tools_Tools.ToHex(intB) + com_babylonhx_tools_Tools.ToHex(intA);
	}
	,__class__: com_babylonhx_math_Color4
};
var com_babylonhx_postprocess_PostProcess = $hx_exports.BABYLON.PostProcess = function(name,fragmentUrl,parameters,samplers,ratio,camera,samplingMode,engine,reusable,defines,textureType) {
	if(textureType == null) textureType = 0;
	if(defines == null) defines = "";
	if(reusable == null) reusable = false;
	if(samplingMode == null) samplingMode = 1;
	this._currentRenderTextureInd = 0;
	this._textures = new com_babylonhx_tools_SmartArray(2);
	this._reusable = false;
	this.height = -1;
	this.width = -1;
	if(camera != null) {
		this._camera = camera;
		this._scene = camera._scene;
		camera.attachPostProcess(this);
		this._engine = this._scene._engine;
	} else this._engine = engine;
	this.name = name;
	this._renderRatio = ratio;
	this.renderTargetSamplingMode = samplingMode;
	this._reusable = reusable;
	this._textureType = textureType;
	if(samplers != null) this._samplers = samplers; else this._samplers = [];
	this._samplers.push("textureSampler");
	this._fragmentUrl = fragmentUrl;
	if(parameters != null) this._parameters = parameters; else this._parameters = [];
	this.updateEffect(defines);
};
$hxClasses["com.babylonhx.postprocess.PostProcess"] = com_babylonhx_postprocess_PostProcess;
com_babylonhx_postprocess_PostProcess.__name__ = ["com","babylonhx","postprocess","PostProcess"];
com_babylonhx_postprocess_PostProcess.prototype = {
	name: null
	,onApply: null
	,onBeforeRender: null
	,onAfterRender: null
	,onSizeChanged: null
	,onActivate: null
	,width: null
	,height: null
	,renderTargetSamplingMode: null
	,clearColor: null
	,_camera: null
	,_scene: null
	,_engine: null
	,_renderRatio: null
	,_reusable: null
	,_textureType: null
	,_textures: null
	,_currentRenderTextureInd: null
	,_effect: null
	,_samplers: null
	,_fragmentUrl: null
	,_parameters: null
	,updateEffect: function(defines) {
		this._effect = this._engine.createEffect({ vertex : "postprocess", fragment : this._fragmentUrl},["position"],this._parameters,this._samplers,defines != null?defines:"");
	}
	,isReusable: function() {
		return this._reusable;
	}
	,activate: function(camera,sourceTexture) {
		if(camera != null) camera = camera; else camera = this._camera;
		var scene = camera._scene;
		var maxSize = camera._scene._engine.getCaps().maxTextureSize;
		var desiredWidth;
		desiredWidth = (sourceTexture != null?sourceTexture._width:this._engine.getRenderWidth()) * this._renderRatio;
		var desiredHeight;
		desiredHeight = (sourceTexture != null?sourceTexture._height:this._engine.getRenderHeight()) * this._renderRatio;
		if(this._renderRatio.width != null) desiredWidth = this._renderRatio.width; else desiredWidth = com_babylonhx_tools_Tools.GetExponantOfTwo(desiredWidth | 0,maxSize);
		if(this._renderRatio.height != null) desiredHeight = this._renderRatio.height; else desiredHeight = com_babylonhx_tools_Tools.GetExponantOfTwo(desiredHeight | 0,maxSize);
		if(this.width != desiredWidth || this.height != desiredHeight) {
			if(this._textures.length > 0) {
				var _g1 = 0;
				var _g = this._textures.length;
				while(_g1 < _g) {
					var i = _g1++;
					this._engine._releaseTexture(this._textures.data[i]);
				}
				this._textures.reset();
			}
			this.width = desiredWidth;
			this.height = desiredHeight;
			this._textures.push(this._engine.createRenderTargetTexture({ width : this.width, height : this.height},{ generateMipMaps : false, generateDepthBuffer : HxOverrides.indexOf(camera._postProcesses,this,0) == camera._postProcessesTakenIndices[0], samplingMode : this.renderTargetSamplingMode, type : this._textureType}));
			if(this._reusable) this._textures.push(this._engine.createRenderTargetTexture({ width : this.width, height : this.height},{ generateMipMaps : false, generateDepthBuffer : HxOverrides.indexOf(camera._postProcesses,this,0) == camera._postProcessesTakenIndices[0], samplingMode : this.renderTargetSamplingMode, type : this._textureType}));
			if(this.onSizeChanged != null) this.onSizeChanged();
		}
		this._engine.bindFramebuffer(this._textures.data[this._currentRenderTextureInd]);
		if(this.onActivate != null) this.onActivate(camera);
		if(this.clearColor != null) this._engine.clear(this.clearColor,true,true); else this._engine.clear(scene.clearColor,scene.autoClear || scene.forceWireframe,true);
		if(this._reusable) this._currentRenderTextureInd = (this._currentRenderTextureInd + 1) % 2;
	}
	,get_isSupported: function() {
		return this._effect.get_isSupported();
	}
	,apply: function() {
		if(!this._effect._isReady) return null;
		this._engine.enableEffect(this._effect);
		this._engine.setState(false,null,null,null);
		this._engine.setAlphaMode(0);
		this._engine._depthCullingState.set_depthTest(false);
		this._engine._depthCullingState.set_depthMask(false);
		if(this._textures.length > 0) this._effect._bindTexture("textureSampler",this._textures.data[this._currentRenderTextureInd]);
		if(this.onApply != null) this.onApply(this._effect);
		return this._effect;
	}
	,dispose: function(camera) {
		if(camera != null) camera = camera; else camera = this._camera;
		if(this._textures.length > 0) {
			var _g1 = 0;
			var _g = this._textures.length;
			while(_g1 < _g) {
				var i = _g1++;
				this._engine._releaseTexture(this._textures.data[i]);
			}
			this._textures.reset();
		}
		if(camera == null) return;
		camera.detachPostProcess(this);
		var index = HxOverrides.indexOf(camera._postProcesses,this,0);
		if(index == camera._postProcessesTakenIndices[0] && camera._postProcessesTakenIndices.length > 0) this._camera._postProcesses[camera._postProcessesTakenIndices[0]].width = -1;
	}
	,__class__: com_babylonhx_postprocess_PostProcess
	,__properties__: {get_isSupported:"get_isSupported"}
};
var com_babylonhx_postprocess_PassPostProcess = $hx_exports.BABYLON.PassPostProcess = function(name,ratio,camera,samplingMode,engine,reusable) {
	if(reusable == null) reusable = false;
	com_babylonhx_postprocess_PostProcess.call(this,name,"pass",null,null,ratio,camera,samplingMode,engine,reusable);
};
$hxClasses["com.babylonhx.postprocess.PassPostProcess"] = com_babylonhx_postprocess_PassPostProcess;
com_babylonhx_postprocess_PassPostProcess.__name__ = ["com","babylonhx","postprocess","PassPostProcess"];
com_babylonhx_postprocess_PassPostProcess.__super__ = com_babylonhx_postprocess_PostProcess;
com_babylonhx_postprocess_PassPostProcess.prototype = $extend(com_babylonhx_postprocess_PostProcess.prototype,{
	__class__: com_babylonhx_postprocess_PassPostProcess
});
var com_babylonhx_postprocess_AnaglyphPostProcess = $hx_exports.BABYLON.AnaglyphPostProcess = function(name,ratio,camera,samplingMode,engine,reusable) {
	if(reusable == null) reusable = false;
	com_babylonhx_postprocess_PostProcess.call(this,name,"anaglyph",null,["leftSampler"],ratio,camera,samplingMode,engine,reusable);
};
$hxClasses["com.babylonhx.postprocess.AnaglyphPostProcess"] = com_babylonhx_postprocess_AnaglyphPostProcess;
com_babylonhx_postprocess_AnaglyphPostProcess.__name__ = ["com","babylonhx","postprocess","AnaglyphPostProcess"];
com_babylonhx_postprocess_AnaglyphPostProcess.__super__ = com_babylonhx_postprocess_PostProcess;
com_babylonhx_postprocess_AnaglyphPostProcess.prototype = $extend(com_babylonhx_postprocess_PostProcess.prototype,{
	__class__: com_babylonhx_postprocess_AnaglyphPostProcess
});
var com_babylonhx_math_Vector4 = $hx_exports.BABYLON.Vector4 = function(x,y,z,w) {
	if(w == null) w = 0;
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["com.babylonhx.math.Vector4"] = com_babylonhx_math_Vector4;
com_babylonhx_math_Vector4.__name__ = ["com","babylonhx","math","Vector4"];
com_babylonhx_math_Vector4.FromArray = function(array,offset) {
	if(offset == null) offset = 0;
	return new com_babylonhx_math_Vector4(array[offset],array[offset + 1],array[offset + 2],array[offset + 3]);
};
com_babylonhx_math_Vector4.FromArrayToRef = function(array,offset,result) {
	result.x = array[offset];
	result.y = array[offset + 1];
	result.z = array[offset + 2];
	result.w = array[offset + 3];
};
com_babylonhx_math_Vector4.FromFloatArrayToRef = function(array,offset,result) {
	result.x = array[offset];
	result.y = array[offset + 1];
	result.z = array[offset + 2];
	result.w = array[offset + 3];
};
com_babylonhx_math_Vector4.FromFloatsToRef = function(x,y,z,w,result) {
	result.x = x;
	result.y = y;
	result.z = z;
	result.w = w;
};
com_babylonhx_math_Vector4.Zero = function() {
	return new com_babylonhx_math_Vector4(0,0,0,0);
};
com_babylonhx_math_Vector4.Normalize = function(vector) {
	var result = new com_babylonhx_math_Vector4(0,0,0,0);
	result.x = vector.x;
	result.y = vector.y;
	result.z = vector.z;
	result.w = vector.w;
	result;
	result.normalize();
	return result;
};
com_babylonhx_math_Vector4.NormalizeToRef = function(vector,result) {
	result.x = vector.x;
	result.y = vector.y;
	result.z = vector.z;
	result.w = vector.w;
	result;
	result.normalize();
};
com_babylonhx_math_Vector4.Minimize = function(left,right) {
	var min = new com_babylonhx_math_Vector4(left.x,left.y,left.z,left.w);
	if(right.x < min.x) min.x = right.x;
	if(right.y < min.y) min.y = right.y;
	if(right.z < min.z) min.z = right.z;
	if(right.w < min.w) min.w = right.w;
	min;
	return min;
};
com_babylonhx_math_Vector4.Maximize = function(left,right) {
	var max = new com_babylonhx_math_Vector4(left.x,left.y,left.z,left.w);
	if(right.x > max.x) max.x = right.x;
	if(right.y > max.y) max.y = right.y;
	if(right.z > max.z) max.z = right.z;
	if(right.w > max.w) max.w = right.w;
	max;
	return max;
};
com_babylonhx_math_Vector4.Distance = function(value1,value2) {
	return Math.sqrt(com_babylonhx_math_Vector4.DistanceSquared(value1,value2));
};
com_babylonhx_math_Vector4.DistanceSquared = function(value1,value2) {
	var x = value1.x - value2.x;
	var y = value1.y - value2.y;
	var z = value1.z - value2.z;
	var w = value1.w - value2.w;
	return x * x + y * y + z * z + w * w;
};
com_babylonhx_math_Vector4.Center = function(value1,value2) {
	var center = new com_babylonhx_math_Vector4(value1.x + value2.x,value1.y + value2.y,value1.z + value2.z,value1.w + value2.w);
	center.x *= 0.5;
	center.y *= 0.5;
	center.z *= 0.5;
	center.w *= 0.5;
	center;
	return center;
};
com_babylonhx_math_Vector4.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,toString: function() {
		return "{X:" + this.x + " Y:" + this.y + " Z:" + this.z + "W:" + this.w + "}";
	}
	,asArray: function() {
		var result = [];
		result[0] = this.x;
		result[1] = this.y;
		result[2] = this.z;
		result[3] = this.w;
		this;
		return result;
	}
	,set: function(x,y,z,w) {
		if(z == null) z = 0;
		if(y == null) y = 0;
		if(x == null) x = 0;
		this.x = x;
		this.y = y;
		this.z = z;
		if(w != null) this.w = w;
	}
	,toArray: function(array,index) {
		if(index == null) index = 0;
		array[index] = this.x;
		array[index + 1] = this.y;
		array[index + 2] = this.z;
		array[index + 3] = this.w;
		return this;
	}
	,addInPlace: function(otherVector) {
		this.x += otherVector.x;
		this.y += otherVector.y;
		this.z += otherVector.z;
		this.w += otherVector.w;
		return this;
	}
	,add: function(otherVector) {
		return new com_babylonhx_math_Vector4(this.x + otherVector.x,this.y + otherVector.y,this.z + otherVector.z,this.w + otherVector.w);
	}
	,addToRef: function(otherVector,result) {
		result.x = this.x + otherVector.x;
		result.y = this.y + otherVector.y;
		result.z = this.z + otherVector.z;
		result.w = this.w + otherVector.w;
		return this;
	}
	,subtractInPlace: function(otherVector) {
		this.x -= otherVector.x;
		this.y -= otherVector.y;
		this.z -= otherVector.z;
		this.w -= otherVector.w;
		return this;
	}
	,subtract: function(otherVector) {
		return new com_babylonhx_math_Vector4(this.x - otherVector.x,this.y - otherVector.y,this.z - otherVector.z,this.w - otherVector.w);
	}
	,subtractToRef: function(otherVector,result) {
		result.x = this.x - otherVector.x;
		result.y = this.y - otherVector.y;
		result.z = this.z - otherVector.z;
		result.w = this.w - otherVector.w;
		return this;
	}
	,subtractFromFloats: function(x,y,z,w) {
		return new com_babylonhx_math_Vector4(this.x - x,this.y - y,this.z - z,this.w - w);
	}
	,subtractFromFloatsToRef: function(x,y,z,w,result) {
		result.x = this.x - x;
		result.y = this.y - y;
		result.z = this.z - z;
		result.w = this.w - w;
		return this;
	}
	,negate: function() {
		return new com_babylonhx_math_Vector4(-this.x,-this.y,-this.z,-this.w);
	}
	,scaleInPlace: function(scale) {
		this.x *= scale;
		this.y *= scale;
		this.z *= scale;
		this.w *= scale;
		return this;
	}
	,scale: function(scale) {
		return new com_babylonhx_math_Vector4(this.x * scale,this.y * scale,this.z * scale,this.w * scale);
	}
	,scaleToRef: function(scale,result) {
		result.x = this.x * scale;
		result.y = this.y * scale;
		result.z = this.z * scale;
		result.w = this.w * scale;
		return this;
	}
	,equals: function(otherVector) {
		return otherVector != null && this.x == otherVector.x && this.y == otherVector.y && this.z == otherVector.z && this.w == otherVector.w;
	}
	,equalsWithEpsilon: function(otherVector,epsilon) {
		if(epsilon == null) epsilon = 0.001;
		return otherVector != null && com_babylonhx_tools_Tools.WithinEpsilon(this.x,otherVector.x,epsilon) && com_babylonhx_tools_Tools.WithinEpsilon(this.y,otherVector.y,epsilon) && com_babylonhx_tools_Tools.WithinEpsilon(this.z,otherVector.z,epsilon) && com_babylonhx_tools_Tools.WithinEpsilon(this.w,otherVector.w,epsilon);
	}
	,equalsToFloats: function(x,y,z,w) {
		return this.x == x && this.y == y && this.z == z && this.w == w;
	}
	,multiplyInPlace: function(otherVector) {
		this.x *= otherVector.x;
		this.y *= otherVector.y;
		this.z *= otherVector.z;
		this.w *= otherVector.w;
		return this;
	}
	,multiply: function(otherVector) {
		return new com_babylonhx_math_Vector4(this.x * otherVector.x,this.y * otherVector.y,this.z * otherVector.z,this.w * otherVector.w);
	}
	,multiplyToRef: function(otherVector,result) {
		result.x = this.x * otherVector.x;
		result.y = this.y * otherVector.y;
		result.z = this.z * otherVector.z;
		result.w = this.w * otherVector.w;
		return this;
	}
	,multiplyByFloats: function(x,y,z,w) {
		return new com_babylonhx_math_Vector4(this.x * x,this.y * y,this.z * z,this.w * w);
	}
	,divide: function(otherVector) {
		return new com_babylonhx_math_Vector4(this.x / otherVector.x,this.y / otherVector.y,this.z / otherVector.z,this.w / otherVector.w);
	}
	,divideToRef: function(otherVector,result) {
		result.x = this.x / otherVector.x;
		result.y = this.y / otherVector.y;
		result.z = this.z / otherVector.z;
		result.w = this.w / otherVector.w;
		return this;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,MinimizeInPlace: function(other) {
		if(other.x < this.x) this.x = other.x;
		if(other.y < this.y) this.y = other.y;
		if(other.z < this.z) this.z = other.z;
		if(other.w < this.w) this.w = other.w;
		return this;
	}
	,MaximizeInPlace: function(other) {
		if(other.x > this.x) this.x = other.x;
		if(other.y > this.y) this.y = other.y;
		if(other.z > this.z) this.z = other.z;
		if(other.w > this.w) this.w = other.w;
		return this;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
	}
	,normalize: function() {
		var len = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		if(len == 0) return this;
		var num = 1.0 / len;
		this.x *= num;
		this.y *= num;
		this.z *= num;
		this.w *= num;
		return this;
	}
	,clone: function() {
		return new com_babylonhx_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(source) {
		this.x = source.x;
		this.y = source.y;
		this.z = source.z;
		this.w = source.w;
		return this;
	}
	,copyFromFloats: function(x,y,z,w) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
		return this;
	}
	,__class__: com_babylonhx_math_Vector4
};
var com_babylonhx_loading_plugins_BabylonFileLoader = $hx_exports.BABYLON.BabylonFileLoader = function() { };
$hxClasses["com.babylonhx.loading.plugins.BabylonFileLoader"] = com_babylonhx_loading_plugins_BabylonFileLoader;
com_babylonhx_loading_plugins_BabylonFileLoader.__name__ = ["com","babylonhx","loading","plugins","BabylonFileLoader"];
com_babylonhx_loading_plugins_BabylonFileLoader.__properties__ = {get_plugin:"get_plugin"}
com_babylonhx_loading_plugins_BabylonFileLoader.get_plugin = function() {
	return com_babylonhx_loading_plugins_BabylonFileLoader._plugin;
};
com_babylonhx_loading_plugins_BabylonFileLoader.checkColors4 = function(colors,count) {
	if(colors.length == count * 3) {
		var colors4 = [];
		var index = 0;
		while(index < colors.length) {
			var newIndex = index / 3 * 4 | 0;
			colors4[newIndex] = colors[index];
			colors4[newIndex + 1] = colors[index + 1];
			colors4[newIndex + 2] = colors[index + 2];
			colors4[newIndex + 3] = 1.0;
			index += 3;
		}
		return colors4;
	}
	return colors;
};
com_babylonhx_loading_plugins_BabylonFileLoader.loadCubeTexture = function(rootUrl,parsedTexture,scene) {
	var texture = null;
	if((parsedTexture.name != null || parsedTexture.extensions != null) && parsedTexture.isRenderTarget == false) {
		texture = new com_babylonhx_materials_textures_CubeTexture(rootUrl + Std.string(parsedTexture.name),scene,parsedTexture.extensions);
		texture.name = parsedTexture.name;
		texture.hasAlpha = parsedTexture.hasAlpha;
		texture.level = parsedTexture.level;
		texture.coordinatesMode = parsedTexture.coordinatesMode;
	}
	return texture;
};
com_babylonhx_loading_plugins_BabylonFileLoader.loadTexture = function(rootUrl,parsedTexture,scene) {
	if(parsedTexture.isCube != null && parsedTexture.isCube == true) return com_babylonhx_loading_plugins_BabylonFileLoader.loadCubeTexture(rootUrl,parsedTexture,scene);
	if(parsedTexture.name == null && parsedTexture.isRenderTarget == false) return null;
	var texture = null;
	if(parsedTexture.mirrorPlane != null) {
		texture = new com_babylonhx_materials_textures_MirrorTexture(parsedTexture.name,parsedTexture.renderTargetSize,scene);
		(js_Boot.__cast(texture , com_babylonhx_materials_textures_MirrorTexture))._waitingRenderList = parsedTexture.renderList;
		(js_Boot.__cast(texture , com_babylonhx_materials_textures_MirrorTexture)).mirrorPlane = com_babylonhx_math_Plane.FromArray(parsedTexture.mirrorPlane);
	} else if(parsedTexture.isRenderTarget) {
		texture = new com_babylonhx_materials_textures_RenderTargetTexture(parsedTexture.name,parsedTexture.renderTargetSize,scene);
		(js_Boot.__cast(texture , com_babylonhx_materials_textures_RenderTargetTexture))._waitingRenderList = parsedTexture.renderList;
	} else texture = new com_babylonhx_materials_textures_Texture(rootUrl + Std.string(parsedTexture.name),scene);
	texture.name = parsedTexture.name;
	texture.hasAlpha = parsedTexture.hasAlpha;
	texture.getAlphaFromRGB = parsedTexture.getAlphaFromRGB;
	texture.level = parsedTexture.level;
	texture.coordinatesIndex = parsedTexture.coordinatesIndex;
	texture.coordinatesMode = parsedTexture.coordinatesMode;
	texture.uOffset = parsedTexture.uOffset;
	texture.vOffset = parsedTexture.vOffset;
	texture.uScale = parsedTexture.uScale;
	texture.vScale = parsedTexture.vScale;
	texture.uAng = parsedTexture.uAng;
	texture.vAng = parsedTexture.vAng;
	texture.wAng = parsedTexture.wAng;
	texture.wrapU = parsedTexture.wrapU;
	texture.wrapV = parsedTexture.wrapV;
	if(parsedTexture.animations != null) {
		var _g1 = 0;
		var _g = parsedTexture.animations.length;
		while(_g1 < _g) {
			var animationIndex = _g1++;
			var parsedAnimation = parsedTexture.animations[animationIndex];
			texture.animations.push(com_babylonhx_loading_plugins_BabylonFileLoader.parseAnimation(parsedAnimation));
		}
	}
	return texture;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseSkeleton = function(parsedSkeleton,scene) {
	var skeleton = new com_babylonhx_bones_Skeleton(parsedSkeleton.name,parsedSkeleton.id,scene);
	try {
		var _g1 = 0;
		var _g = parsedSkeleton.bones.length;
		while(_g1 < _g) {
			var index = _g1++;
			var parsedBone = parsedSkeleton.bones[index];
			var parentBone = null;
			if(parsedBone.parentBoneIndex > -1) parentBone = skeleton.bones[parsedBone.parentBoneIndex];
			var bone = new com_babylonhx_bones_Bone(parsedBone.name,skeleton,parentBone,com_babylonhx_math_Matrix.FromArray(parsedBone.matrix,null));
			if(parsedBone.animation != null) bone.animations.push(com_babylonhx_loading_plugins_BabylonFileLoader.parseAnimation(parsedBone.animation));
		}
	} catch( err ) {
		haxe_CallStack.lastException = err;
		if (err instanceof js__$Boot_HaxeError) err = err.val;
		haxe_Log.trace(err,{ fileName : "BabylonFileLoader.hx", lineNumber : 546, className : "com.babylonhx.loading.plugins.BabylonFileLoader", methodName : "parseSkeleton"});
	}
	return skeleton;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseFresnelParameters = function(parsedFresnelParameters) {
	var fresnelParameters = new com_babylonhx_materials_FresnelParameters();
	fresnelParameters.isEnabled = parsedFresnelParameters.isEnabled;
	fresnelParameters.leftColor = com_babylonhx_math_Color3.FromArray(parsedFresnelParameters.leftColor,null);
	fresnelParameters.rightColor = com_babylonhx_math_Color3.FromArray(parsedFresnelParameters.rightColor,null);
	fresnelParameters.bias = parsedFresnelParameters.bias;
	if(parsedFresnelParameters.power != null) fresnelParameters.power = parsedFresnelParameters.power; else fresnelParameters.power = 1.0;
	return fresnelParameters;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseMaterial = function(parsedMaterial,scene,rootUrl) {
	var material = new com_babylonhx_materials_StandardMaterial(parsedMaterial.name,scene);
	material.ambientColor = com_babylonhx_math_Color3.FromArray(parsedMaterial.ambient,null);
	material.diffuseColor = com_babylonhx_math_Color3.FromArray(parsedMaterial.diffuse,null);
	material.specularColor = com_babylonhx_math_Color3.FromArray(parsedMaterial.specular,null);
	material.specularPower = parsedMaterial.specularPower;
	material.emissiveColor = com_babylonhx_math_Color3.FromArray(parsedMaterial.emissive,null);
	material.useReflectionFresnelFromSpecular = parsedMaterial.useReflectionFresnelFromSpecular;
	material.useEmissiveAsIllumination = parsedMaterial.useEmissiveAsIllumination;
	material.alpha = parsedMaterial.alpha;
	material.id = parsedMaterial.id;
	if(parsedMaterial.disableDepthWrite != null) material.disableDepthWrite = parsedMaterial.disableDepthWrite;
	com_babylonhx_tools_Tags.AddTagsTo(material,parsedMaterial.tags);
	material.backFaceCulling = parsedMaterial.backFaceCulling;
	material.set_wireframe(parsedMaterial.wireframe);
	if(parsedMaterial.diffuseTexture != null) material.diffuseTexture = com_babylonhx_loading_plugins_BabylonFileLoader.loadTexture(rootUrl,parsedMaterial.diffuseTexture,scene);
	if(parsedMaterial.diffuseFresnelParameters != null) material.diffuseFresnelParameters = com_babylonhx_loading_plugins_BabylonFileLoader.parseFresnelParameters(parsedMaterial.diffuseFresnelParameters);
	if(parsedMaterial.ambientTexture != null) material.ambientTexture = com_babylonhx_loading_plugins_BabylonFileLoader.loadTexture(rootUrl,parsedMaterial.ambientTexture,scene);
	if(parsedMaterial.opacityTexture != null) material.opacityTexture = com_babylonhx_loading_plugins_BabylonFileLoader.loadTexture(rootUrl,parsedMaterial.opacityTexture,scene);
	if(parsedMaterial.opacityFresnelParameters != null) material.opacityFresnelParameters = com_babylonhx_loading_plugins_BabylonFileLoader.parseFresnelParameters(parsedMaterial.opacityFresnelParameters);
	if(parsedMaterial.reflectionTexture != null) material.reflectionTexture = com_babylonhx_loading_plugins_BabylonFileLoader.loadTexture(rootUrl,parsedMaterial.reflectionTexture,scene);
	if(parsedMaterial.reflectionFresnelParameters != null) material.reflectionFresnelParameters = com_babylonhx_loading_plugins_BabylonFileLoader.parseFresnelParameters(parsedMaterial.reflectionFresnelParameters);
	if(parsedMaterial.emissiveTexture != null) material.emissiveTexture = com_babylonhx_loading_plugins_BabylonFileLoader.loadTexture(rootUrl,parsedMaterial.emissiveTexture,scene);
	if(parsedMaterial.lightmapTexture != null) {
		material.lightmapTexture = com_babylonhx_loading_plugins_BabylonFileLoader.loadTexture(rootUrl,parsedMaterial.lightmapTexture,scene);
		material.lightmapThreshold = parsedMaterial.lightmapThreshold;
	}
	if(parsedMaterial.emissiveFresnelParameters != null) material.emissiveFresnelParameters = com_babylonhx_loading_plugins_BabylonFileLoader.parseFresnelParameters(parsedMaterial.emissiveFresnelParameters);
	if(parsedMaterial.specularTexture != null) material.specularTexture = com_babylonhx_loading_plugins_BabylonFileLoader.loadTexture(rootUrl,parsedMaterial.specularTexture,scene);
	if(parsedMaterial.bumpTexture != null) material.bumpTexture = com_babylonhx_loading_plugins_BabylonFileLoader.loadTexture(rootUrl,parsedMaterial.bumpTexture,scene);
	if(parsedMaterial.checkReadyOnlyOnce != null) material.checkReadyOnlyOnce = parsedMaterial.checkReadyOnlyOnce;
	return material;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseMaterialById = function(id,parsedData,scene,rootUrl) {
	var _g1 = 0;
	var _g = parsedData.materials.length;
	while(_g1 < _g) {
		var index = _g1++;
		var parsedMaterial = parsedData.materials[index];
		if(parsedMaterial.id == id) return com_babylonhx_loading_plugins_BabylonFileLoader.parseMaterial(parsedMaterial,scene,rootUrl);
	}
	return null;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseMultiMaterial = function(parsedMultiMaterial,scene) {
	var multiMaterial = new com_babylonhx_materials_MultiMaterial(parsedMultiMaterial.name,scene);
	multiMaterial.id = parsedMultiMaterial.id;
	com_babylonhx_tools_Tags.AddTagsTo(multiMaterial,parsedMultiMaterial.tags);
	var _g1 = 0;
	var _g = parsedMultiMaterial.materials.length;
	while(_g1 < _g) {
		var matIndex = _g1++;
		var subMatId = parsedMultiMaterial.materials[matIndex];
		if(subMatId != null) multiMaterial.subMaterials.push(scene.getMaterialByID(subMatId)); else multiMaterial.subMaterials.push(null);
	}
	return multiMaterial;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseLensFlareSystem = function(parsedLensFlareSystem,scene,rootUrl) {
	var emitter = scene.getLastEntryByID(parsedLensFlareSystem.emitterId);
	var lensFlareSystem = new com_babylonhx_lensflare_LensFlareSystem("lensFlareSystem#" + Std.string(parsedLensFlareSystem.emitterId),emitter,scene);
	lensFlareSystem.borderLimit = parsedLensFlareSystem.borderLimit;
	var _g1 = 0;
	var _g = parsedLensFlareSystem.flares.length;
	while(_g1 < _g) {
		var index = _g1++;
		var parsedFlare = parsedLensFlareSystem.flares[index];
		var flare = new com_babylonhx_lensflare_LensFlare(parsedFlare.size,parsedFlare.position,com_babylonhx_math_Color3.FromArray(parsedFlare.color,null),rootUrl + parsedFlare.textureName,lensFlareSystem);
	}
	return lensFlareSystem;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseParticleSystem = function(parsedParticleSystem,scene,rootUrl) {
	var emitter = scene.getLastMeshByID(parsedParticleSystem.emitterId);
	var particleSystem = new com_babylonhx_particles_ParticleSystem("particles#" + emitter.name,parsedParticleSystem.capacity,scene);
	if(parsedParticleSystem.textureName != null && parsedParticleSystem.textureName != "") {
		particleSystem.particleTexture = new com_babylonhx_materials_textures_Texture(rootUrl + Std.string(parsedParticleSystem.textureName),scene);
		particleSystem.particleTexture.name = parsedParticleSystem.textureName;
	}
	particleSystem.minAngularSpeed = parsedParticleSystem.minAngularSpeed;
	particleSystem.maxAngularSpeed = parsedParticleSystem.maxAngularSpeed;
	particleSystem.minSize = parsedParticleSystem.minSize;
	particleSystem.maxSize = parsedParticleSystem.maxSize;
	particleSystem.minLifeTime = parsedParticleSystem.minLifeTime;
	particleSystem.maxLifeTime = parsedParticleSystem.maxLifeTime;
	particleSystem.emitter = emitter;
	particleSystem.emitRate = parsedParticleSystem.emitRate;
	particleSystem.minEmitBox = com_babylonhx_math_Vector3.FromArray(parsedParticleSystem.minEmitBox,null);
	particleSystem.maxEmitBox = com_babylonhx_math_Vector3.FromArray(parsedParticleSystem.maxEmitBox,null);
	particleSystem.gravity = com_babylonhx_math_Vector3.FromArray(parsedParticleSystem.gravity,null);
	particleSystem.direction1 = com_babylonhx_math_Vector3.FromArray(parsedParticleSystem.direction1,null);
	particleSystem.direction2 = com_babylonhx_math_Vector3.FromArray(parsedParticleSystem.direction2,null);
	particleSystem.color1 = com_babylonhx_math_Color4.FromArray(parsedParticleSystem.color1);
	particleSystem.color2 = com_babylonhx_math_Color4.FromArray(parsedParticleSystem.color2);
	particleSystem.colorDead = com_babylonhx_math_Color4.FromArray(parsedParticleSystem.colorDead);
	particleSystem.updateSpeed = parsedParticleSystem.updateSpeed;
	particleSystem.targetStopDuration = parsedParticleSystem.targetStopFrame;
	particleSystem.textureMask = com_babylonhx_math_Color4.FromArray(parsedParticleSystem.textureMask);
	particleSystem.blendMode = parsedParticleSystem.blendMode;
	particleSystem.start();
	return particleSystem;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseShadowGenerator = function(parsedShadowGenerator,scene) {
	var light = scene.getLightByID(parsedShadowGenerator.lightId);
	var shadowGenerator = new com_babylonhx_lights_shadows_ShadowGenerator(parsedShadowGenerator.mapSize,light);
	var _g1 = 0;
	var _g = parsedShadowGenerator.renderList.length;
	while(_g1 < _g) {
		var meshIndex = _g1++;
		var mesh = scene.getMeshByID(parsedShadowGenerator.renderList[meshIndex]);
		shadowGenerator.getShadowMap().renderList.push(mesh);
	}
	if(parsedShadowGenerator.usePoissonSampling != null && parsedShadowGenerator.usePoissonSampling == true) shadowGenerator.set_usePoissonSampling(true); else if(parsedShadowGenerator.useVarianceShadowMap != null && parsedShadowGenerator.useVarianceShadowMap == true) shadowGenerator.set_useVarianceShadowMap(true); else if(parsedShadowGenerator.useBlurVarianceShadowMap != null && parsedShadowGenerator.useBlurVarianceShadowMap == true) {
		shadowGenerator.set_useBlurVarianceShadowMap(true);
		if(parsedShadowGenerator.blurScale != null) shadowGenerator.blurScale = parsedShadowGenerator.blurScale;
		if(parsedShadowGenerator.blurBoxOffset != null) shadowGenerator.set_blurBoxOffset(parsedShadowGenerator.blurBoxOffset);
	}
	if(parsedShadowGenerator.bias != null) shadowGenerator.set_bias(parsedShadowGenerator.bias);
	return shadowGenerator;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseAnimation = function(parsedAnimation) {
	var animation = new com_babylonhx_animations_Animation(parsedAnimation.name,parsedAnimation.property,parsedAnimation.framePerSecond,parsedAnimation.dataType,parsedAnimation.loopBehavior);
	var dataType = parsedAnimation.dataType;
	var keys = [];
	var _g1 = 0;
	var _g = parsedAnimation.keys.length;
	while(_g1 < _g) {
		var index = _g1++;
		var key = parsedAnimation.keys[index];
		var data = null;
		switch(dataType) {
		case 0:
			data = key.values[0];
			break;
		case 2:
			data = com_babylonhx_math_Quaternion.FromArray(key.values,null);
			break;
		case 3:
			data = com_babylonhx_math_Matrix.FromArray(key.values,null);
			break;
		case 1:
			data = com_babylonhx_math_Vector3.FromArray(key.values,null);
			break;
		default:
			data = com_babylonhx_math_Vector3.FromArray(key.values,null);
		}
		keys.push({ frame : key.frame, value : data});
	}
	animation.setKeys(keys);
	return animation;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseLight = function(parsedLight,scene) {
	var light = null;
	var _g = parsedLight.type;
	switch(_g) {
	case 0:
		light = new com_babylonhx_lights_PointLight(parsedLight.name,com_babylonhx_math_Vector3.FromArray(parsedLight.position,null),scene);
		break;
	case 1:
		light = new com_babylonhx_lights_DirectionalLight(parsedLight.name,com_babylonhx_math_Vector3.FromArray(parsedLight.direction,null),scene);
		(js_Boot.__cast(light , com_babylonhx_lights_DirectionalLight)).position = com_babylonhx_math_Vector3.FromArray(parsedLight.position,null);
		break;
	case 2:
		light = new com_babylonhx_lights_SpotLight(parsedLight.name,com_babylonhx_math_Vector3.FromArray(parsedLight.position,null),com_babylonhx_math_Vector3.FromArray(parsedLight.direction,null),parsedLight.angle,parsedLight.exponent,scene);
		break;
	case 3:
		light = new com_babylonhx_lights_HemisphericLight(parsedLight.name,com_babylonhx_math_Vector3.FromArray(parsedLight.direction,null),scene);
		(js_Boot.__cast(light , com_babylonhx_lights_HemisphericLight)).groundColor = com_babylonhx_math_Color3.FromArray(parsedLight.groundColor,null);
		break;
	}
	light.id = parsedLight.id;
	if(parsedLight.tags != null) com_babylonhx_tools_Tags.AddTagsTo(light,parsedLight.tags);
	if(parsedLight.intensity != null) light.intensity = parsedLight.intensity;
	if(parsedLight.range != null) light.range = parsedLight.range;
	light.diffuse = com_babylonhx_math_Color3.FromArray(parsedLight.diffuse,null);
	light.specular = com_babylonhx_math_Color3.FromArray(parsedLight.specular,null);
	if(parsedLight.excludedMeshesIds != null && parsedLight.excludedMeshesIds.length > 0) light._excludedMeshesIds = parsedLight.excludedMeshesIds;
	if(parsedLight.parentId != null) light._waitingParentId = parsedLight.parentId;
	if(parsedLight.includedOnlyMeshesIds != null && parsedLight.includedOnlyMeshesIds.length > 0) light._includedOnlyMeshesIds = parsedLight.includedOnlyMeshesIds;
	if(parsedLight.animations != null) {
		var _g1 = 0;
		var _g2 = parsedLight.animations.length;
		while(_g1 < _g2) {
			var animationIndex = _g1++;
			var parsedAnimation = parsedLight.animations[animationIndex];
			light.animations.push(com_babylonhx_loading_plugins_BabylonFileLoader.parseAnimation(parsedAnimation));
		}
	}
	if(parsedLight.autoAnimate != null) scene.beginAnimation(light,parsedLight.autoAnimateFrom,parsedLight.autoAnimateTo,parsedLight.autoAnimateLoop,1.0);
	return light;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseCamera = function(parsedCamera,scene) {
	var camera = null;
	var position = com_babylonhx_math_Vector3.FromArray(parsedCamera.position,null);
	var lockedTargetMesh;
	if(parsedCamera.lockedTargetId != null) lockedTargetMesh = scene.getLastMeshByID(parsedCamera.lockedTargetId); else lockedTargetMesh = null;
	if(parsedCamera.type == "AnaglyphArcRotateCamera" || parsedCamera.type == "ArcRotateCamera") {
		var alpha = parsedCamera.alpha;
		var beta = parsedCamera.beta;
		var radius = parsedCamera.radius;
		if(parsedCamera.type == "AnaglyphArcRotateCamera") {
			var eye_space = parsedCamera.eye_space;
			camera = new com_babylonhx_cameras_AnaglyphArcRotateCamera(parsedCamera.name,alpha,beta,radius,lockedTargetMesh,eye_space,scene);
		} else camera = new com_babylonhx_cameras_ArcRotateCamera(parsedCamera.name,alpha,beta,radius,lockedTargetMesh,scene);
	} else if(parsedCamera.type == "AnaglyphFreeCamera") {
		var eye_space1 = parsedCamera.eye_space;
		camera = new com_babylonhx_cameras_AnaglyphFreeCamera(parsedCamera.name,position,eye_space1,scene);
	} else if(parsedCamera.type == "DeviceOrientationCamera") {
	} else if(parsedCamera.type == "FollowCamera") {
		camera = new com_babylonhx_cameras_FollowCamera(parsedCamera.name,position,scene);
		(js_Boot.__cast(camera , com_babylonhx_cameras_FollowCamera)).heightOffset = parsedCamera.heightOffset;
		(js_Boot.__cast(camera , com_babylonhx_cameras_FollowCamera)).radius = parsedCamera.radius;
		(js_Boot.__cast(camera , com_babylonhx_cameras_FollowCamera)).rotationOffset = parsedCamera.rotationOffset;
		if(lockedTargetMesh != null) (js_Boot.__cast(camera , com_babylonhx_cameras_FollowCamera)).target = lockedTargetMesh;
	} else camera = new com_babylonhx_cameras_FreeCamera(parsedCamera.name,position,scene);
	if(parsedCamera.cameraRigMode != null) {
		var rigParams;
		if(parsedCamera.interaxial_distance != null) rigParams = { interaxialDistance : parsedCamera.interaxial_distance}; else rigParams = { };
		camera.setCameraRigMode(parsedCamera.cameraRigMode,rigParams);
	}
	if(lockedTargetMesh != null && js_Boot.__instanceof(camera,com_babylonhx_cameras_FreeCamera)) (js_Boot.__cast(camera , com_babylonhx_cameras_FreeCamera)).lockedTarget = lockedTargetMesh;
	camera.id = parsedCamera.id;
	com_babylonhx_tools_Tags.AddTagsTo(camera,parsedCamera.tags);
	if(parsedCamera.parentId != null) camera._waitingParentId = parsedCamera.parentId;
	if(parsedCamera.target != null) {
		if(js_Boot.__instanceof(camera,com_babylonhx_cameras_FreeCamera)) (js_Boot.__cast(camera , com_babylonhx_cameras_FreeCamera)).setTarget(com_babylonhx_math_Vector3.FromArray(parsedCamera.target,null)); else (js_Boot.__cast(camera , com_babylonhx_cameras_ArcRotateCamera)).target = com_babylonhx_math_Vector3.FromArray(parsedCamera.target,null);
	} else (js_Boot.__cast(camera , com_babylonhx_cameras_FreeCamera)).rotation = com_babylonhx_math_Vector3.FromArray(parsedCamera.rotation,null);
	camera.fov = parsedCamera.fov;
	camera.minZ = parsedCamera.minZ;
	camera.maxZ = parsedCamera.maxZ;
	(js_Boot.__cast(camera , com_babylonhx_cameras_FreeCamera)).speed = parsedCamera.speed;
	(js_Boot.__cast(camera , com_babylonhx_cameras_FreeCamera)).inertia = parsedCamera.inertia;
	(js_Boot.__cast(camera , com_babylonhx_cameras_FreeCamera)).checkCollisions = parsedCamera.checkCollisions;
	(js_Boot.__cast(camera , com_babylonhx_cameras_FreeCamera)).applyGravity = parsedCamera.applyGravity;
	if(parsedCamera.ellipsoid != null) (js_Boot.__cast(camera , com_babylonhx_cameras_FreeCamera)).ellipsoid = com_babylonhx_math_Vector3.FromArray(parsedCamera.ellipsoid,null);
	if(parsedCamera.animations != null) {
		var _g1 = 0;
		var _g = parsedCamera.animations.length;
		while(_g1 < _g) {
			var animationIndex = _g1++;
			var parsedAnimation = parsedCamera.animations[animationIndex];
			camera.animations.push(com_babylonhx_loading_plugins_BabylonFileLoader.parseAnimation(parsedAnimation));
		}
	}
	if(parsedCamera.autoAnimate != null) scene.beginAnimation(camera,parsedCamera.autoAnimateFrom,parsedCamera.autoAnimateTo,parsedCamera.autoAnimateLoop,1.0);
	if(parsedCamera.layerMask != null) camera.layerMask = Std["int"](Math.abs(Std["int"](parsedCamera.layerMask))); else camera.layerMask = -1;
	return camera;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseGeometry = function(parsedGeometry,scene) {
	var id = parsedGeometry.id;
	return scene.getGeometryByID(id);
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseBox = function(parsedBox,scene) {
	if(com_babylonhx_loading_plugins_BabylonFileLoader.parseGeometry(parsedBox,scene) != null) return null;
	var box = new com_babylonhx_mesh_primitives_Box(parsedBox.id,scene,parsedBox.size,parsedBox.canBeRegenerated,null);
	com_babylonhx_tools_Tags.AddTagsTo(box,parsedBox.tags);
	scene.pushGeometry(box,true);
	return box;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseSphere = function(parsedSphere,scene) {
	if(com_babylonhx_loading_plugins_BabylonFileLoader.parseGeometry(parsedSphere,scene) == null) return null;
	var sphere = new com_babylonhx_mesh_primitives_Sphere(parsedSphere.id,scene,parsedSphere.segments,parsedSphere.diameter,parsedSphere.canBeRegenerated,null);
	com_babylonhx_tools_Tags.AddTagsTo(sphere,parsedSphere.tags);
	scene.pushGeometry(sphere,true);
	return sphere;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseCylinder = function(parsedCylinder,scene) {
	if(com_babylonhx_loading_plugins_BabylonFileLoader.parseGeometry(parsedCylinder,scene) == null) return null;
	var cylinder = new com_babylonhx_mesh_primitives_Cylinder(parsedCylinder.id,scene,parsedCylinder.height,parsedCylinder.diameterTop,parsedCylinder.diameterBottom,parsedCylinder.tessellation,parsedCylinder.subdivisions,parsedCylinder.canBeRegenerated,null);
	com_babylonhx_tools_Tags.AddTagsTo(cylinder,parsedCylinder.tags);
	scene.pushGeometry(cylinder,true);
	return cylinder;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseTorus = function(parsedTorus,scene) {
	if(com_babylonhx_loading_plugins_BabylonFileLoader.parseGeometry(parsedTorus,scene) == null) return null;
	var torus = new com_babylonhx_mesh_primitives_Torus(parsedTorus.id,scene,parsedTorus.diameter,parsedTorus.thickness,parsedTorus.tessellation,parsedTorus.canBeRegenerated,null);
	com_babylonhx_tools_Tags.AddTagsTo(torus,parsedTorus.tags);
	scene.pushGeometry(torus,true);
	return torus;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseGround = function(parsedGround,scene) {
	if(com_babylonhx_loading_plugins_BabylonFileLoader.parseGeometry(parsedGround,scene) == null) return null;
	var ground = new com_babylonhx_mesh_primitives_Ground(parsedGround.id,scene,parsedGround.width,parsedGround.height,parsedGround.subdivisions,parsedGround.canBeRegenerated,null);
	com_babylonhx_tools_Tags.AddTagsTo(ground,parsedGround.tags);
	scene.pushGeometry(ground,true);
	return ground;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parsePlane = function(parsedPlane,scene) {
	if(com_babylonhx_loading_plugins_BabylonFileLoader.parseGeometry(parsedPlane,scene) == null) return null;
	var plane = new com_babylonhx_mesh_primitives_Plane(parsedPlane.id,scene,parsedPlane.size,parsedPlane.canBeRegenerated,null);
	com_babylonhx_tools_Tags.AddTagsTo(plane,parsedPlane.tags);
	scene.pushGeometry(plane,true);
	return plane;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseTorusKnot = function(parsedTorusKnot,scene) {
	if(com_babylonhx_loading_plugins_BabylonFileLoader.parseGeometry(parsedTorusKnot,scene) == null) return null;
	var torusKnot = new com_babylonhx_mesh_primitives_TorusKnot(parsedTorusKnot.id,scene,parsedTorusKnot.radius,parsedTorusKnot.tube,parsedTorusKnot.radialSegments,parsedTorusKnot.tubularSegments,parsedTorusKnot.p,parsedTorusKnot.q,parsedTorusKnot.canBeRegenerated,null);
	com_babylonhx_tools_Tags.AddTagsTo(torusKnot,parsedTorusKnot.tags);
	scene.pushGeometry(torusKnot,true);
	return torusKnot;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseVertexData = function(parsedVertexData,scene,rootUrl) {
	if(com_babylonhx_loading_plugins_BabylonFileLoader.parseGeometry(parsedVertexData,scene) == null) return null;
	var geometry = new com_babylonhx_mesh_Geometry(parsedVertexData.id,scene);
	com_babylonhx_tools_Tags.AddTagsTo(geometry,parsedVertexData.tags);
	if(parsedVertexData.delayLoadingFile != null && parsedVertexData.delayLoadingFile != "") {
		geometry.delayLoadState = 4;
		geometry.delayLoadingFile = rootUrl + Std.string(parsedVertexData.delayLoadingFile);
		geometry._boundingInfo = new com_babylonhx_culling_BoundingInfo(com_babylonhx_math_Vector3.FromArray(parsedVertexData.boundingBoxMinimum,null),com_babylonhx_math_Vector3.FromArray(parsedVertexData.boundingBoxMaximum,null));
		geometry._delayInfo = [];
		if(parsedVertexData.hasUVs) geometry._delayInfo.push("uv");
		if(parsedVertexData.hasUVs2) geometry._delayInfo.push("uv2");
		if(parsedVertexData.hasUVs3) geometry._delayInfo.push("uv3");
		if(parsedVertexData.hasUVs4) geometry._delayInfo.push("uv4");
		if(parsedVertexData.hasUVs5) geometry._delayInfo.push("uv5");
		if(parsedVertexData.hasUVs6) geometry._delayInfo.push("uv6");
		if(parsedVertexData.hasColors) geometry._delayInfo.push("color");
		if(parsedVertexData.hasMatricesIndices) geometry._delayInfo.push("matricesIndices");
		if(parsedVertexData.hasMatricesWeights) geometry._delayInfo.push("matricesWeights");
		geometry._delayLoadingFunction = com_babylonhx_loading_plugins_BabylonFileLoader.importVertexData;
	} else com_babylonhx_loading_plugins_BabylonFileLoader.importVertexData(parsedVertexData,geometry);
	scene.pushGeometry(geometry,true);
	return geometry;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseMesh = function(parsedMesh,scene,rootUrl) {
	var mesh = new com_babylonhx_mesh_Mesh(parsedMesh.name,scene);
	mesh.id = parsedMesh.id;
	com_babylonhx_tools_Tags.AddTagsTo(mesh,parsedMesh.tags);
	mesh.position = com_babylonhx_math_Vector3.FromArray(parsedMesh.position,null);
	if(parsedMesh.rotationQuaternion != null) mesh.rotationQuaternion = com_babylonhx_math_Quaternion.FromArray(parsedMesh.rotationQuaternion,null); else if(parsedMesh.rotation != null) mesh.rotation = com_babylonhx_math_Vector3.FromArray(parsedMesh.rotation,null);
	mesh.scaling = com_babylonhx_math_Vector3.FromArray(parsedMesh.scaling,null);
	if(parsedMesh.localMatrix != null) mesh.setPivotMatrix(com_babylonhx_math_Matrix.FromArray(parsedMesh.localMatrix,null)); else if(parsedMesh.pivotMatrix != null) mesh.setPivotMatrix(com_babylonhx_math_Matrix.FromArray(parsedMesh.pivotMatrix,null));
	mesh.setEnabled(parsedMesh.isEnabled);
	mesh.isVisible = parsedMesh.isVisible;
	mesh.infiniteDistance = parsedMesh.infiniteDistance;
	mesh.showBoundingBox = parsedMesh.showBoundingBox;
	mesh.showSubMeshesBoundingBox = parsedMesh.showSubMeshesBoundingBox;
	if(parsedMesh.applyFog != null && parsedMesh.applyFog) mesh.applyFog = parsedMesh.applyFog;
	if(parsedMesh.pickable != null) mesh.set_isPickable(parsedMesh.pickable);
	if(parsedMesh.alphaIndex != null) mesh.alphaIndex = parsedMesh.alphaIndex;
	mesh.set_receiveShadows(parsedMesh.receiveShadows);
	mesh.billboardMode = parsedMesh.billboardMode;
	if(parsedMesh.visibility != null) mesh.set_visibility(parsedMesh.visibility);
	mesh.set_checkCollisions(parsedMesh.checkCollisions);
	mesh._shouldGenerateFlatShading = parsedMesh.useFlatShading;
	if(parsedMesh.parentId != null) mesh._waitingParentId = parsedMesh.parentId;
	if(parsedMesh.actions != null) mesh._waitingActions = parsedMesh.actions;
	mesh.hasVertexAlpha = parsedMesh.hasVertexAlpha;
	if(parsedMesh.delayLoadingFile != null && parsedMesh.delayLoadingFile == true) {
		mesh.delayLoadState = 4;
		mesh.delayLoadingFile = rootUrl + Std.string(parsedMesh.delayLoadingFile);
		mesh._boundingInfo = new com_babylonhx_culling_BoundingInfo(com_babylonhx_math_Vector3.FromArray(parsedMesh.boundingBoxMinimum,null),com_babylonhx_math_Vector3.FromArray(parsedMesh.boundingBoxMaximum,null));
		if(parsedMesh._binaryInfo != null) mesh._binaryInfo = parsedMesh._binaryInfo;
		mesh._delayInfo = [];
		if(parsedMesh.hasUVs) mesh._delayInfo.push("uv");
		if(parsedMesh.hasUVs2) mesh._delayInfo.push("uv2");
		if(parsedMesh.hasColors) mesh._delayInfo.push("color");
		if(parsedMesh.hasMatricesIndices) mesh._delayInfo.push("matricesIndices");
		if(parsedMesh.hasMatricesWeights) mesh._delayInfo.push("matricesWeights");
		mesh._delayLoadingFunction = com_babylonhx_loading_plugins_BabylonFileLoader.importGeometry;
		if(com_babylonhx_loading_SceneLoader.ForceFullSceneLoadingForIncremental) mesh._checkDelayState();
	} else com_babylonhx_loading_plugins_BabylonFileLoader.importGeometry(parsedMesh,mesh);
	if(parsedMesh.materialId != null) mesh.setMaterialByID(parsedMesh.materialId); else mesh.set_material(null);
	if(parsedMesh.skeletonId > -1) mesh.set_skeleton(scene.getLastSkeletonByID(parsedMesh.skeletonId));
	if(parsedMesh.physicsImpostor != null) {
		if(!(scene._physicsEngine != null)) scene.enablePhysics();
		var physicsOptions = new com_babylonhx_physics_PhysicsBodyCreationOptions();
		physicsOptions.mass = parsedMesh.physicsMass;
		physicsOptions.friction = parsedMesh.physicsFriction;
		physicsOptions.restitution = parsedMesh.physicsRestitution;
		mesh.setPhysicsState(parsedMesh.physicsImpostor,physicsOptions);
	}
	if(parsedMesh.animations != null) {
		var _g1 = 0;
		var _g = parsedMesh.animations.length;
		while(_g1 < _g) {
			var animationIndex = _g1++;
			var parsedAnimation = parsedMesh.animations[animationIndex];
			mesh.animations.push(com_babylonhx_loading_plugins_BabylonFileLoader.parseAnimation(parsedAnimation));
		}
	}
	if(parsedMesh.autoAnimate != null) scene.beginAnimation(mesh,parsedMesh.autoAnimateFrom,parsedMesh.autoAnimateTo,parsedMesh.autoAnimateLoop,1.0);
	if(parsedMesh.layerMask != null) mesh.layerMask = Std["int"](Math.abs(parsedMesh.layerMask)); else mesh.layerMask = -1;
	if(parsedMesh.instances != null) {
		var _g11 = 0;
		var _g2 = parsedMesh.instances.length;
		while(_g11 < _g2) {
			var index = _g11++;
			var parsedInstance = parsedMesh.instances[index];
			var instance = mesh.createInstance(parsedInstance.name);
			com_babylonhx_tools_Tags.AddTagsTo(instance,parsedInstance.tags);
			instance.position = com_babylonhx_math_Vector3.FromArray(parsedInstance.position,null);
			if(parsedInstance.rotationQuaternion != null) instance.rotationQuaternion = com_babylonhx_math_Quaternion.FromArray(parsedInstance.rotationQuaternion,null); else if(parsedInstance.rotation != null) instance.rotation = com_babylonhx_math_Vector3.FromArray(parsedInstance.rotation,null);
			instance.scaling = com_babylonhx_math_Vector3.FromArray(parsedInstance.scaling,null);
			instance.set_checkCollisions(mesh.get_checkCollisions());
			if(parsedMesh.animations != null) {
				var _g3 = 0;
				var _g21 = parsedMesh.animations.length;
				while(_g3 < _g21) {
					var animationIndex1 = _g3++;
					var parsedAnimation1 = parsedMesh.animations[animationIndex1];
					instance.animations.push(com_babylonhx_loading_plugins_BabylonFileLoader.parseAnimation(parsedAnimation1));
				}
			}
		}
	}
	return mesh;
};
com_babylonhx_loading_plugins_BabylonFileLoader.parseActions = function(parsedActions,object,scene) {
	var actionManager = new com_babylonhx_actions_ActionManager(scene);
	if(object == null) scene.actionManager = actionManager; else object.actionManager = actionManager;
	var instanciate = function(name,params) {
		var newInstance = null;
		switch(name) {
		case "InterpolateValueAction":
			newInstance = Type.createInstance(com_babylonhx_actions_InterpolateValueAction,params);
			break;
		case "PlayAnimationAction":
			newInstance = Type.createInstance(com_babylonhx_actions_PlayAnimationAction,params);
			break;
		case "PlaySoundAction":
			break;
		}
		return newInstance;
	};
	var parseParameter = function(name1,value,target,propertyPath) {
		if(propertyPath == null) {
			var floatValue = parseFloat(value);
			if(value == "true" || value == "false") return value == "true"; else if(isNaN(floatValue)) return value; else return floatValue;
		}
		var effectiveTarget = propertyPath.split(".");
		var values = value.split(",");
		var _g1 = 0;
		var _g = effectiveTarget.length;
		while(_g1 < _g) {
			var i = _g1++;
			target = Reflect.field(target,effectiveTarget[i]);
		}
		if(typeof(target) == "boolean") return values[0] == "true";
		if(typeof(target) == "string") return values[0];
		var split = [];
		var _g11 = 0;
		var _g2 = values.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			split.push(parseFloat(values[i1]));
		}
		if(js_Boot.__instanceof(target,com_babylonhx_math_Vector3)) return new com_babylonhx_math_Vector3(split[0],split[1],split[2]);
		if(js_Boot.__instanceof(target,com_babylonhx_math_Vector4)) return new com_babylonhx_math_Vector4(split[0],split[1],split[2],split[3]);
		if(js_Boot.__instanceof(target,com_babylonhx_math_Color3)) return new com_babylonhx_math_Color3(split[0],split[1],split[2]);
		if(js_Boot.__instanceof(target,com_babylonhx_math_Color4)) return com_babylonhx_math_Color4.FromArray(split);
		return parseFloat(values[0]);
	};
	var traverse;
	var traverse1 = null;
	traverse1 = function(parsedAction,trigger,condition,action,combineArray) {
		if(parsedAction.detached != null && parsedAction.detached == true) return;
		var parameters = [];
		var target1 = null;
		var propertyPath1 = "";
		var combine = parsedAction.combine != null && parsedAction.combine.length > 0;
		if(parsedAction.type == 2) parameters.push(actionManager); else parameters.push(trigger);
		if(combine) {
			var actions = [];
			var _g12 = 0;
			var _g3 = parsedAction.combine.length;
			while(_g12 < _g3) {
				var j = _g12++;
				traverse1(parsedAction.combine[j],com_babylonhx_actions_ActionManager.NothingTrigger,condition,action,actions);
			}
			parameters.push(actions);
		} else {
			var _g13 = 0;
			var _g4 = parsedAction.properties.length;
			while(_g13 < _g4) {
				var i2 = _g13++;
				var value1 = parsedAction.properties[i2].value;
				var name2 = parsedAction.properties[i2].name;
				var targetType = parsedAction.properties[i2].targetType;
				if(name2 == "target") {
					if(targetType != null && targetType == "SceneProperties") value1 = target1 = scene; else value1 = target1 = scene.getNodeByName(value1);
				} else if(name2 == "parent") value1 = scene.getNodeByName(value1); else if(name2 == "sound") continue; else if(name2 != "propertyPath") {
					if(parsedAction.type == 2 && name2 == "operator") value1 = Reflect.field(com_babylonhx_actions_ValueCondition,value1); else value1 = parseParameter(name2,value1,target1,name2 == "value"?propertyPath1:null);
				} else propertyPath1 = value1;
				parameters.push(value1);
			}
		}
		if(combineArray == null) parameters.push(condition); else parameters.push(null);
		if(parsedAction.name == "InterpolateValueAction") {
			var param = parameters[parameters.length - 2];
			parameters[parameters.length - 1] = param;
			parameters[parameters.length - 2] = condition;
		}
		var newAction = instanciate(parsedAction.name,parameters);
		if(newAction != null) {
			if(js_Boot.__instanceof(newAction,com_babylonhx_actions_Condition)) {
				condition = newAction;
				newAction = action;
			} else {
				condition = null;
				if(action != null) action.then(newAction); else actionManager.registerAction(newAction);
			}
		}
		var _g14 = 0;
		var _g5 = parsedAction.children.length;
		while(_g14 < _g5) {
			var i3 = _g14++;
			traverse1(parsedAction.children[i3],trigger,condition,newAction);
		}
	};
	traverse = traverse1;
	var _g15 = 0;
	var _g6 = parsedActions.children.length;
	while(_g15 < _g6) {
		var i4 = _g15++;
		var triggerParams;
		var trigger1 = parsedActions.children[i4];
		if(trigger1.properties.length > 0) {
			var param1 = (js_Boot.__cast(trigger1.properties , Array))[0].value;
			var value2;
			if((js_Boot.__cast(trigger1.properties , Array))[0].targetType == null) value2 = param1; else value2 = scene.getMeshByName(param1);
			triggerParams = { trigger : Reflect.field(com_babylonhx_actions_ActionManager,trigger1.name), parameter : value2};
		} else triggerParams = Reflect.field(com_babylonhx_actions_ActionManager,trigger1.name);
		var _g31 = 0;
		var _g21 = trigger1.children.length;
		while(_g31 < _g21) {
			var j1 = _g31++;
			if(!trigger1.detached) traverse((js_Boot.__cast(trigger1.children , Array))[j1],triggerParams,null,null);
		}
	}
};
com_babylonhx_loading_plugins_BabylonFileLoader.isDescendantOf = function(mesh,_names,hierarchyIds) {
	var names;
	if((_names instanceof Array) && _names.__enum__ == null) names = _names; else names = [_names];
	var _g = 0;
	while(_g < names.length) {
		var name = names[_g];
		++_g;
		if(mesh.name == name) {
			hierarchyIds.push(mesh.id);
			return true;
		}
	}
	if(mesh.parentId != null && (function($this) {
		var $r;
		var x = mesh.parentId;
		$r = HxOverrides.indexOf(hierarchyIds,x,0);
		return $r;
	}(this)) != -1) {
		hierarchyIds.push(mesh.id);
		return true;
	}
	return false;
};
com_babylonhx_loading_plugins_BabylonFileLoader.importVertexData = function(parsedVertexData,geometry) {
	var vertexData = new com_babylonhx_mesh_VertexData();
	var positions = parsedVertexData.positions;
	if(positions != null) vertexData.set(positions,"position");
	var normals = parsedVertexData.normals;
	if(normals != null) vertexData.set(normals,"normal");
	var uvs = parsedVertexData.uvs;
	if(uvs != null) vertexData.set(uvs,"uv");
	var uv2s = parsedVertexData.uv2s;
	if(uv2s != null) vertexData.set(uv2s,"uv2");
	var uv3s = parsedVertexData.uv3s;
	if(uv3s != null) vertexData.set(uv3s,"uv3");
	var uv4s = parsedVertexData.uv4s;
	if(uv4s != null) vertexData.set(uv4s,"uv4");
	var uv5s = parsedVertexData.uv5s;
	if(uv5s != null) vertexData.set(uv5s,"uv5");
	var uv6s = parsedVertexData.uv6s;
	if(uv6s != null) vertexData.set(uv6s,"uv6");
	var colors = parsedVertexData.colors;
	if(colors != null) vertexData.set(com_babylonhx_loading_plugins_BabylonFileLoader.checkColors4(colors,positions.length / 3 | 0),"color");
	var matricesIndices = parsedVertexData.matricesIndices;
	if(matricesIndices != null) vertexData.set(matricesIndices,"matricesIndices");
	var matricesWeights = parsedVertexData.matricesWeights;
	if(matricesWeights != null) vertexData.set(matricesWeights,"matricesWeights");
	var indices = parsedVertexData.indices;
	if(indices != null) vertexData.indices = indices;
	geometry.setAllVerticesData(vertexData,parsedVertexData.updatable);
};
com_babylonhx_loading_plugins_BabylonFileLoader.importGeometry = function(parsedGeometry,mesh) {
	var scene = mesh._scene;
	var geometryId = parsedGeometry.geometryId;
	if(geometryId != null) {
		var geometry = scene.getGeometryByID(geometryId);
		if(geometry != null) geometry.applyToMesh(mesh);
	} else if(parsedGeometry.positions != null && parsedGeometry.normals != null && parsedGeometry.indices != null) {
		mesh.setVerticesData("position",parsedGeometry.positions,false);
		mesh.setVerticesData("normal",parsedGeometry.normals,false);
		if(parsedGeometry.uvs != null) mesh.setVerticesData("uv",parsedGeometry.uvs,false);
		if(parsedGeometry.uvs2 != null) mesh.setVerticesData("uv2",parsedGeometry.uvs2,false);
		if(parsedGeometry.colors != null) mesh.setVerticesData("color",com_babylonhx_loading_plugins_BabylonFileLoader.checkColors4(parsedGeometry.colors,parsedGeometry.positions.length / 3 | 0),false);
		if(parsedGeometry.matricesIndices != null) {
			if(!parsedGeometry.matricesIndices._isExpanded) {
				var floatIndices = [];
				var _g1 = 0;
				var _g = parsedGeometry.matricesIndices.length;
				while(_g1 < _g) {
					var i = _g1++;
					var matricesIndex = parsedGeometry.matricesIndices[i];
					floatIndices.push(matricesIndex & 255);
					floatIndices.push((matricesIndex & 65280) >> 8);
					floatIndices.push((matricesIndex & 16711680) >> 16);
					floatIndices.push(matricesIndex >> 24);
				}
				mesh.setVerticesData("matricesIndices",floatIndices,false);
			} else {
				parsedGeometry.matricesIndices._isExpanded = null;
				mesh.setVerticesData("matricesIndices",parsedGeometry.matricesIndices,false);
			}
		}
		if(parsedGeometry.matricesWeights != null) mesh.setVerticesData("matricesWeights",parsedGeometry.matricesWeights,false);
		mesh.setIndices(parsedGeometry.indices);
		if(parsedGeometry.subMeshes != null) {
			mesh.subMeshes = [];
			var _g11 = 0;
			var _g2 = parsedGeometry.subMeshes.length;
			while(_g11 < _g2) {
				var subIndex = _g11++;
				var parsedSubMesh = parsedGeometry.subMeshes[subIndex];
				var subMesh = new com_babylonhx_mesh_SubMesh(parsedSubMesh.materialIndex,parsedSubMesh.verticesStart,parsedSubMesh.verticesCount,parsedSubMesh.indexStart,parsedSubMesh.indexCount,mesh);
			}
		}
	}
	if(mesh._shouldGenerateFlatShading) {
		mesh.convertToFlatShadedMesh();
		mesh._shouldGenerateFlatShading = false;
	}
	mesh.computeWorldMatrix(true);
	if(scene._selectionOctree != null) scene._selectionOctree.addMesh(mesh);
};
var com_babylonhx_materials_Effect = $hx_exports.BABYLON.Effect = function(baseName,attributesNames,uniformsNames,samplers,engine,defines,fallbacks,onCompiled,onError) {
	this._compilationError = "";
	this._isReady = false;
	var _g = this;
	this._engine = engine;
	this.name = baseName;
	this.defines = defines;
	this._uniformsNames = uniformsNames.concat(samplers);
	this._samplers = samplers;
	this._attributesNames = attributesNames;
	this.onError = onError;
	this.onCompiled = onCompiled;
	var vertex;
	if(Object.prototype.hasOwnProperty.call(baseName,"vertex")) vertex = baseName.vertex; else vertex = baseName;
	var fragment;
	if(Object.prototype.hasOwnProperty.call(baseName,"fragment")) fragment = baseName.fragment; else fragment = baseName;
	var vertexShaderUrl = "";
	if(vertex.charAt(0) == ".") vertexShaderUrl = vertex; else vertexShaderUrl = com_babylonhx_Engine.ShadersRepository + vertex;
	var fragmentShaderUrl = "";
	if(fragment.charAt(0) == ".") fragmentShaderUrl = fragment; else fragmentShaderUrl = com_babylonhx_Engine.ShadersRepository + fragment;
	var _vertexCode = "";
	var prepareEffect = function(_fragmentCode) {
		_g._prepareEffect(_vertexCode,_fragmentCode,attributesNames,defines,fallbacks);
		_g._valueCache = new haxe_ds_StringMap();
	};
	var getFragmentCode = function() {
		var _fragmentCode1 = "";
		if(com_babylonhx_materials_ShadersStore.Shaders.exists(fragment + ".fragment")) {
			_fragmentCode1 = com_babylonhx_materials_ShadersStore.Shaders.get(fragment + ".fragment");
			prepareEffect(_fragmentCode1);
		} else com_babylonhx_tools_Tools.LoadFile(fragmentShaderUrl + ".fragment.fx",function(content) {
			_fragmentCode1 = content;
			prepareEffect(_fragmentCode1);
		},"text");
	};
	if(com_babylonhx_materials_ShadersStore.Shaders.exists(vertex + ".vertex")) {
		_vertexCode = com_babylonhx_materials_ShadersStore.Shaders.get(vertex + ".vertex");
		getFragmentCode();
	} else com_babylonhx_tools_Tools.LoadFile(vertexShaderUrl + ".vertex.fx",function(content1) {
		_vertexCode = content1;
		getFragmentCode();
	},"text");
};
$hxClasses["com.babylonhx.materials.Effect"] = com_babylonhx_materials_Effect;
com_babylonhx_materials_Effect.__name__ = ["com","babylonhx","materials","Effect"];
com_babylonhx_materials_Effect.prototype = {
	name: null
	,defines: null
	,onCompiled: null
	,onError: null
	,onBind: null
	,_engine: null
	,_uniformsNames: null
	,_samplers: null
	,_isReady: null
	,_compilationError: null
	,_attributesNames: null
	,_attributes: null
	,_uniforms: null
	,_key: null
	,_program: null
	,_valueCache: null
	,isReady: function() {
		return this._isReady;
	}
	,getProgram: function() {
		return this._program;
	}
	,getAttributesNames: function() {
		return this._attributesNames;
	}
	,getAttributeLocation: function(index) {
		return this._attributes[index];
	}
	,getAttributeLocationByName: function(name) {
		var index = HxOverrides.indexOf(this._attributesNames,name,0);
		return this._attributes[index];
	}
	,getAttributesCount: function() {
		return this._attributes.length;
	}
	,getUniformIndex: function(uniformName) {
		return HxOverrides.indexOf(this._uniformsNames,uniformName,0);
	}
	,getUniform: function(uniformName) {
		return this._uniforms.get(uniformName);
	}
	,getSamplers: function() {
		return this._samplers;
	}
	,getCompilationError: function() {
		return this._compilationError;
	}
	,_loadVertexShader: function(vertex,callbackFn) {
		if(com_babylonhx_materials_ShadersStore.Shaders.exists(vertex + "VertexShader")) {
			callbackFn(com_babylonhx_materials_ShadersStore.Shaders.get(vertex + "VertexShader"));
			return;
		}
		com_babylonhx_tools_Tools.LoadFile("../assets/shaders/" + vertex + ".vertex.fx",callbackFn,"text");
	}
	,_loadFragmentShader: function(fragment,callbackFn) {
		if(com_babylonhx_materials_ShadersStore.Shaders.exists(fragment + "PixelShader")) {
			callbackFn(com_babylonhx_materials_ShadersStore.Shaders.get(fragment + "PixelShader"));
			return;
		}
		com_babylonhx_tools_Tools.LoadFile("../assets/shaders/" + fragment + ".fragment.fx",callbackFn,"text");
	}
	,_prepareEffect: function(vertexSourceCode,fragmentSourceCode,attributesNames,defines,fallbacks) {
		try {
			var engine = this._engine;
			if(!engine.getCaps().highPrecisionShaderSupported) {
				vertexSourceCode = StringTools.replace(vertexSourceCode,"precision highp float","precision mediump float");
				fragmentSourceCode = StringTools.replace(fragmentSourceCode,"precision highp float","precision mediump float");
			}
			this._program = engine.createShaderProgram(vertexSourceCode,fragmentSourceCode,defines);
			this._uniforms = engine.getUniforms(this._program,this._uniformsNames);
			this._attributes = engine.getAttributes(this._program,attributesNames);
			var index = 0;
			while(index < this._samplers.length) {
				var sampler = this._uniforms.get(this._samplers[index]);
				if(sampler == null) {
					this._samplers.splice(index,1);
					index--;
				}
				index++;
			}
			engine.bindSamplers(this);
			this._isReady = true;
			if(this.onCompiled != null) this.onCompiled(this);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if(e.indexOf("highp") != -1) {
				vertexSourceCode = StringTools.replace(vertexSourceCode,"precision highp float","precision mediump float");
				fragmentSourceCode = StringTools.replace(fragmentSourceCode,"precision highp float","precision mediump float");
				this._prepareEffect(vertexSourceCode,fragmentSourceCode,attributesNames,defines,fallbacks);
				return;
			}
			if(fallbacks != null && fallbacks.get_isMoreFallbacks()) {
				defines = fallbacks.reduce(defines);
				this._prepareEffect(vertexSourceCode,fragmentSourceCode,attributesNames,defines,fallbacks);
			} else {
				haxe_Log.trace("Unable to compile effect: " + Std.string(this.name),{ fileName : "Effect.hx", lineNumber : 235, className : "com.babylonhx.materials.Effect", methodName : "_prepareEffect"});
				haxe_Log.trace("Defines: " + defines,{ fileName : "Effect.hx", lineNumber : 236, className : "com.babylonhx.materials.Effect", methodName : "_prepareEffect"});
				haxe_Log.trace("Error: " + Std.string(e),{ fileName : "Effect.hx", lineNumber : 238, className : "com.babylonhx.materials.Effect", methodName : "_prepareEffect"});
				this._compilationError = e;
				if(this.onError != null) this.onError(this,this._compilationError);
			}
		}
	}
	,get_isSupported: function() {
		return this._compilationError == "";
	}
	,_bindTexture: function(channel,texture) {
		this._engine._bindTexture(HxOverrides.indexOf(this._samplers,channel,0),texture);
	}
	,setTexture: function(channel,texture) {
		this._engine.setTexture(HxOverrides.indexOf(this._samplers,channel,0),texture);
	}
	,setTextureFromPostProcess: function(channel,postProcess) {
		this._engine.setTextureFromPostProcess(HxOverrides.indexOf(this._samplers,channel,0),postProcess);
	}
	,setArray: function(uniformName,array) {
		this._engine.setArray(this._uniforms.get(uniformName),array);
		return this;
	}
	,setArray2: function(uniformName,array) {
		this._engine.setArray2(this._uniforms.get(uniformName),array);
		return this;
	}
	,setArray3: function(uniformName,array) {
		this._engine.setArray3(this._uniforms.get(uniformName),array);
		return this;
	}
	,setArray4: function(uniformName,array) {
		this._engine.setArray4(this._uniforms.get(uniformName),array);
		return this;
	}
	,setMatrices: function(uniformName,matrices) {
		this._engine.setMatrices(this._uniforms.get(uniformName),matrices);
		return this;
	}
	,setMatrix: function(uniformName,matrix) {
		this._engine.setMatrix(this._uniforms.get(uniformName),matrix);
		return this;
	}
	,setMatrix3x3: function(uniformName,matrix) {
		this._engine.setMatrix3x3(this._uniforms.get(uniformName),matrix);
		return this;
	}
	,setMatrix2x2: function(uniformname,matrix) {
		this._engine.setMatrix2x2(this._uniforms.get(uniformname),matrix);
		return this;
	}
	,setFloat: function(uniformName,value) {
		this._engine.setFloat(this._uniforms.get(uniformName),value);
		return this;
	}
	,setBool: function(uniformName,bool) {
		this._engine.setBool(this._uniforms.get(uniformName),bool);
		return this;
	}
	,setVector2: function(uniformName,vector2) {
		this._engine.setFloat2(this._uniforms.get(uniformName),vector2.x,vector2.y);
		return this;
	}
	,setFloat2: function(uniformName,x,y) {
		this._engine.setFloat2(this._uniforms.get(uniformName),x,y);
		return this;
	}
	,setVector3: function(uniformName,vector3) {
		this._engine.setFloat3(this._uniforms.get(uniformName),vector3.x,vector3.y,vector3.z);
		return this;
	}
	,setFloat3: function(uniformName,x,y,z) {
		this._engine.setFloat3(this._uniforms.get(uniformName),x,y,z);
		return this;
	}
	,setVector4: function(uniformName,vector4) {
		this._engine.setFloat4(this._uniforms.get(uniformName),vector4.x,vector4.y,vector4.z,vector4.w);
		return this;
	}
	,setFloat4: function(uniformName,x,y,z,w) {
		this._engine.setFloat4(this._uniforms.get(uniformName),x,y,z,w);
		return this;
	}
	,setColor3: function(uniformName,color3) {
		this._engine.setColor3(this._uniforms.get(uniformName),color3);
		return this;
	}
	,setColor4: function(uniformName,color3,alpha) {
		this._engine.setColor4(this._uniforms.get(uniformName),color3,alpha);
		return this;
	}
	,__class__: com_babylonhx_materials_Effect
	,__properties__: {get_isSupported:"get_isSupported"}
};
var com_babylonhx_materials_EffectFallbacks = $hx_exports.BABYLON.EffectFallbacks = function() {
	this._maxRank = -1;
	this._currentRank = 32;
	this._defines = [];
};
$hxClasses["com.babylonhx.materials.EffectFallbacks"] = com_babylonhx_materials_EffectFallbacks;
com_babylonhx_materials_EffectFallbacks.__name__ = ["com","babylonhx","materials","EffectFallbacks"];
com_babylonhx_materials_EffectFallbacks.prototype = {
	_defines: null
	,_currentRank: null
	,_maxRank: null
	,_mesh: null
	,_meshRank: null
	,addFallback: function(rank,define) {
		if(this._defines[rank] == null) {
			if(rank < this._currentRank) this._currentRank = rank;
			if(rank > this._maxRank) this._maxRank = rank;
			this._defines[rank] = [];
		}
		this._defines[rank].push(define);
	}
	,addCPUSkinningFallback: function(rank,mesh) {
		this._meshRank = rank;
		this._mesh = mesh;
		if(rank > this._maxRank) this._maxRank = rank;
	}
	,reduce: function(currentDefines) {
		var currentFallbacks = this._defines[this._currentRank];
		var _g1 = 0;
		var _g = currentFallbacks.length;
		while(_g1 < _g) {
			var index = _g1++;
			currentDefines = StringTools.replace(currentDefines,"#define " + currentFallbacks[index],"");
		}
		if(this._mesh != null && this._currentRank == this._meshRank) {
			this._mesh.computeBonesUsingShaders = false;
			currentDefines = StringTools.replace(currentDefines,"#define NUM_BONE_INFLUENCERS " + this._mesh.numBoneInfluencers,"#define NUM_BONE_INFLUENCERS 0");
			haxe_Log.trace("Falling back to CPU skinning for " + this._mesh.name,{ fileName : "EffectFallbacks.hx", lineNumber : 62, className : "com.babylonhx.materials.EffectFallbacks", methodName : "reduce"});
		}
		this._currentRank++;
		return currentDefines;
	}
	,get_isMoreFallbacks: function() {
		return this._currentRank <= this._maxRank;
	}
	,__class__: com_babylonhx_materials_EffectFallbacks
	,__properties__: {get_isMoreFallbacks:"get_isMoreFallbacks"}
};
var com_babylonhx_materials_MaterialDefines = function() {
	this.result = "";
	this.ret = true;
};
$hxClasses["com.babylonhx.materials.MaterialDefines"] = com_babylonhx_materials_MaterialDefines;
com_babylonhx_materials_MaterialDefines.__name__ = ["com","babylonhx","materials","MaterialDefines"];
com_babylonhx_materials_MaterialDefines.prototype = {
	defines: null
	,_keys: null
	,ret: null
	,isEqual: function(other) {
		this.ret = true;
		var _g1 = 0;
		var _g = this.defines.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.defines[i] != other.defines[i]) {
				this.ret = false;
				break;
			}
		}
		return this.ret;
	}
	,cloneTo: function(other) {
		var _g1 = 0;
		var _g = this.defines.length;
		while(_g1 < _g) {
			var i = _g1++;
			other.defines[i] = other.defines[i];
		}
	}
	,reset: function() {
		var _g1 = 0;
		var _g = this.defines.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.defines[i] = false;
		}
	}
	,result: null
	,toString: function() {
		this.result = "";
		var _g1 = 0;
		var _g = this.defines.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.defines[i] == true) this.result += "#define " + this._keys[i] + "\n";
		}
		return this.result;
	}
	,__class__: com_babylonhx_materials_MaterialDefines
};
var com_babylonhx_materials_ShaderMaterial = $hx_exports.BABYLON.ShaderMaterial = function(name,scene,shaderPath,options) {
	this._cachedWorldViewMatrix = new com_babylonhx_math_Matrix();
	this._matrices2x2 = new haxe_ds_StringMap();
	this._matrices3x3 = new haxe_ds_StringMap();
	this._matrices = new haxe_ds_StringMap();
	this._vectors3 = new haxe_ds_StringMap();
	this._vectors2 = new haxe_ds_StringMap();
	this._colors4 = new haxe_ds_StringMap();
	this._colors3 = new haxe_ds_StringMap();
	this._floatsArrays = new haxe_ds_StringMap();
	this._floats = new haxe_ds_StringMap();
	this._textures = new haxe_ds_StringMap();
	com_babylonhx_materials_Material.call(this,name,scene);
	this._shaderPath = shaderPath;
	if(options.needAlphaBlending != null) options.needAlphaBlending = options.needAlphaBlending; else options.needAlphaBlending = false;
	if(options.needAlphaTesting != null) options.needAlphaTesting = options.needAlphaTesting; else options.needAlphaTesting = false;
	if(options.attributes != null) options.attributes = options.attributes; else options.attributes = ["position","normal","uv"];
	if(options.uniforms != null) options.uniforms = options.uniforms; else options.uniforms = ["worldViewProjection"];
	if(options.samplers != null) options.samplers = options.samplers; else options.samplers = [];
	if(options.defines != null) options.defines = options.defines; else options.defines = [];
	this._options = options;
};
$hxClasses["com.babylonhx.materials.ShaderMaterial"] = com_babylonhx_materials_ShaderMaterial;
com_babylonhx_materials_ShaderMaterial.__name__ = ["com","babylonhx","materials","ShaderMaterial"];
com_babylonhx_materials_ShaderMaterial.__super__ = com_babylonhx_materials_Material;
com_babylonhx_materials_ShaderMaterial.prototype = $extend(com_babylonhx_materials_Material.prototype,{
	_shaderPath: null
	,_options: null
	,_textures: null
	,_floats: null
	,_floatsArrays: null
	,_colors3: null
	,_colors4: null
	,_vectors2: null
	,_vectors3: null
	,_matrices: null
	,_matrices3x3: null
	,_matrices2x2: null
	,_cachedWorldViewMatrix: null
	,_renderId: null
	,needAlphaBlending: function() {
		return this._options.needAlphaBlending;
	}
	,needAlphaTesting: function() {
		return this._options.needAlphaTesting;
	}
	,_checkUniform: function(uniformName) {
		if(HxOverrides.indexOf(this._options.uniforms,uniformName,0) == -1) this._options.uniforms.push(uniformName);
	}
	,setTexture: function(name,texture) {
		if(HxOverrides.indexOf(this._options.samplers,name,0) == -1) this._options.samplers.push(name);
		{
			this._textures.set(name,texture);
			texture;
		}
		return this;
	}
	,setFloat: function(name,value) {
		if(HxOverrides.indexOf(this._options.uniforms,name,0) == -1) this._options.uniforms.push(name);
		{
			this._floats.set(name,value);
			value;
		}
		return this;
	}
	,setFloats: function(name,value) {
		if(HxOverrides.indexOf(this._options.uniforms,name,0) == -1) this._options.uniforms.push(name);
		{
			this._floatsArrays.set(name,value);
			value;
		}
		return this;
	}
	,setColor3: function(name,value) {
		if(HxOverrides.indexOf(this._options.uniforms,name,0) == -1) this._options.uniforms.push(name);
		{
			this._colors3.set(name,value);
			value;
		}
		return this;
	}
	,setColor4: function(name,value) {
		if(HxOverrides.indexOf(this._options.uniforms,name,0) == -1) this._options.uniforms.push(name);
		{
			this._colors4.set(name,value);
			value;
		}
		return this;
	}
	,setVector2: function(name,value) {
		if(HxOverrides.indexOf(this._options.uniforms,name,0) == -1) this._options.uniforms.push(name);
		{
			this._vectors2.set(name,value);
			value;
		}
		return this;
	}
	,setVector3: function(name,value) {
		if(HxOverrides.indexOf(this._options.uniforms,name,0) == -1) this._options.uniforms.push(name);
		{
			this._vectors3.set(name,value);
			value;
		}
		return this;
	}
	,setMatrix: function(name,value) {
		if(HxOverrides.indexOf(this._options.uniforms,name,0) == -1) this._options.uniforms.push(name);
		{
			this._matrices.set(name,value);
			value;
		}
		return this;
	}
	,setMatrix3x3: function(name,value) {
		if(HxOverrides.indexOf(this._options.uniforms,name,0) == -1) this._options.uniforms.push(name);
		{
			this._matrices3x3.set(name,value);
			value;
		}
		return this;
	}
	,setMatrix2x2: function(name,value) {
		if(HxOverrides.indexOf(this._options.uniforms,name,0) == -1) this._options.uniforms.push(name);
		{
			this._matrices2x2.set(name,value);
			value;
		}
		return this;
	}
	,isReady: function(mesh,useInstances) {
		if(useInstances == null) useInstances = false;
		var scene = this.getScene();
		var engine = scene._engine;
		if(!this.checkReadyOnEveryCall) {
			if(this._renderId == scene._renderId) return true;
		}
		var defines = [];
		var fallbacks = new com_babylonhx_materials_EffectFallbacks();
		if(useInstances) defines.push("#define INSTANCES");
		var _g1 = 0;
		var _g = this._options.defines.length;
		while(_g1 < _g) {
			var index = _g1++;
			defines.push(this._options.defines[index]);
		}
		if(mesh != null && mesh.get_useBones() && mesh.computeBonesUsingShaders) {
			defines.push("#define NUM_BONE_INFLUENCERS " + mesh.numBoneInfluencers);
			defines.push("#define BonesPerMesh " + (mesh.get_skeleton().bones.length + 1));
			fallbacks.addCPUSkinningFallback(0,mesh);
		}
		if(engine._alphaTest) defines.push("#define ALPHATEST");
		var previousEffect = this._effect;
		var join = defines.join("\n");
		this._effect = engine.createEffect(this._shaderPath,this._options.attributes,this._options.uniforms,this._options.samplers,join,fallbacks,this.onCompiled,this.onError);
		if(!this._effect._isReady) return false;
		if(previousEffect != this._effect) scene._cachedMaterial = null;
		this._renderId = scene._renderId;
		return true;
	}
	,bindOnlyWorldMatrix: function(world) {
		var scene = this.getScene();
		if(HxOverrides.indexOf(this._options.uniforms,"world",0) != -1) this._effect.setMatrix("world",world);
		if(HxOverrides.indexOf(this._options.uniforms,"worldView",0) != -1) {
			world.multiplyToRef(scene._viewMatrix,this._cachedWorldViewMatrix);
			this._effect.setMatrix("worldView",this._cachedWorldViewMatrix);
		}
		if(HxOverrides.indexOf(this._options.uniforms,"worldViewProjection",0) != -1) this._effect.setMatrix("worldViewProjection",world.multiply(scene._transformMatrix));
	}
	,bind: function(world,mesh) {
		this.bindOnlyWorldMatrix(world);
		if(this.getScene().getCachedMaterial() != this) {
			if(HxOverrides.indexOf(this._options.uniforms,"view",0) != -1) this._effect.setMatrix("view",this.getScene().getViewMatrix());
			if(HxOverrides.indexOf(this._options.uniforms,"projection",0) != -1) this._effect.setMatrix("projection",this.getScene().getProjectionMatrix());
			if(HxOverrides.indexOf(this._options.uniforms,"viewProjection",0) != -1) this._effect.setMatrix("viewProjection",this.getScene().getTransformMatrix());
			if(mesh != null && mesh.get_useBones() && mesh.computeBonesUsingShaders) this._effect.setMatrices("mBones",mesh.get_skeleton().getTransformMatrices());
			var $it0 = this._textures.keys();
			while( $it0.hasNext() ) {
				var name = $it0.next();
				this._effect.setTexture(name,this._textures.get(name));
			}
			var $it1 = this._floats.keys();
			while( $it1.hasNext() ) {
				var name1 = $it1.next();
				this._effect.setFloat(name1,this._floats.get(name1));
			}
			var $it2 = this._floatsArrays.keys();
			while( $it2.hasNext() ) {
				var name2 = $it2.next();
				this._effect.setArray(name2,this._floatsArrays.get(name2));
			}
			var $it3 = this._colors3.keys();
			while( $it3.hasNext() ) {
				var name3 = $it3.next();
				this._effect.setColor3(name3,this._colors3.get(name3));
			}
			var $it4 = this._colors4.keys();
			while( $it4.hasNext() ) {
				var name4 = $it4.next();
				var color = this._colors4.get(name4);
				this._effect.setFloat4(name4,color.r,color.g,color.b,color.a);
			}
			var $it5 = this._vectors2.keys();
			while( $it5.hasNext() ) {
				var name5 = $it5.next();
				this._effect.setVector2(name5,this._vectors2.get(name5));
			}
			var $it6 = this._vectors3.keys();
			while( $it6.hasNext() ) {
				var name6 = $it6.next();
				this._effect.setVector3(name6,this._vectors3.get(name6));
			}
			var $it7 = this._matrices.keys();
			while( $it7.hasNext() ) {
				var name7 = $it7.next();
				this._effect.setMatrix(name7,this._matrices.get(name7));
			}
			var $it8 = this._matrices3x3.keys();
			while( $it8.hasNext() ) {
				var name8 = $it8.next();
				this._effect.setMatrix3x3(name8,this._matrices3x3.get(name8));
			}
			var $it9 = this._matrices2x2.keys();
			while( $it9.hasNext() ) {
				var name9 = $it9.next();
				this._effect.setMatrix2x2(name9,this._matrices2x2.get(name9));
			}
		}
		com_babylonhx_materials_Material.prototype.bind.call(this,world,null);
	}
	,dispose: function(forceDisposeEffect) {
		if(forceDisposeEffect == null) forceDisposeEffect = false;
		var $it0 = this._textures.keys();
		while( $it0.hasNext() ) {
			var name = $it0.next();
			this._textures.get(name).dispose();
		}
		this._textures = null;
		com_babylonhx_materials_Material.prototype.dispose.call(this,forceDisposeEffect);
	}
	,__class__: com_babylonhx_materials_ShaderMaterial
});
var com_babylonhx_materials_ShadersStore = $hx_exports.BABYLON.ShadersStore = function() { };
$hxClasses["com.babylonhx.materials.ShadersStore"] = com_babylonhx_materials_ShadersStore;
com_babylonhx_materials_ShadersStore.__name__ = ["com","babylonhx","materials","ShadersStore"];
var com_babylonhx_materials_StandardMaterialDefines = function() {
	this.NUM_BONE_INFLUENCERS = 0;
	this.BonesPerMesh = 0;
	com_babylonhx_materials_MaterialDefines.call(this);
	var array = ["DIFFUSE","AMBIENT","OPACITY","OPACITYRGB","REFLECTION","EMISSIVE","SPECULAR","BUMP","SPECULAROVERALPHA","CLIPPLANE","ALPHATEST","ALPHAFROMDIFFUSE","POINTSIZE","FOG","LIGHT0","LIGHT1","LIGHT2","LIGHT3","SPOTLIGHT0","SPOTLIGHT1","SPOTLIGHT2","SPOTLIGHT3","HEMILIGHT0","HEMILIGHT1","HEMILIGHT2","HEMILIGHT3","POINTLIGHT0","POINTLIGHT1","POINTLIGHT2","POINTLIGHT3","DIRLIGHT0","DIRLIGHT1","DIRLIGHT2","DIRLIGHT3","SPECULARTERM","SHADOW0","SHADOW1","SHADOW2","SHADOW3","SHADOWS","SHADOWVSM0","SHADOWVSM1","SHADOWVSM2","SHADOWVSM3","SHADOWPCF0","SHADOWPCF1","SHADOWPCF2","SHADOWPCF3","DIFFUSEFRESNEL","OPACITYFRESNEL","REFLECTIONFRESNEL","EMISSIVEFRESNEL","FRESNEL","NORMAL","UV1","UV2","VERTEXCOLOR","VERTEXALPHA","INSTANCES","GLOSSINESS","ROUGHNESS","EMISSIVEASILLUMINATION","LINKEMISSIVEWITHDIFFUSE","REFLECTIONFRESNELFROMSPECULAR","LIGHTMAP","USELIGHTMAPASSHADOWMAP","REFLECTIONMAP_3D","REFLECTIONMAP_SPHERICAL","REFLECTIONMAP_PLANAR","REFLECTIONMAP_CUBIC","REFLECTIONMAP_PROJECTION","REFLECTIONMAP_SKYBOX","REFLECTIONMAP_EXPLICIT","REFLECTIONMAP_EQUIRECTANGULAR","INVERTCUBICMAP","LOGARITHMICDEPTH"];
	var vec;
	var this1;
	this1 = new Array(array.length);
	vec = this1;
	var _g1 = 0;
	var _g = array.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = array[i];
	}
	this._keys = vec;
	var this2;
	this2 = new Array(this._keys.length);
	this.defines = this2;
	var _g11 = 0;
	var _g2 = this._keys.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		this.defines[i1] = false;
	}
	this.BonesPerMesh = 0;
	this.NUM_BONE_INFLUENCERS = 0;
};
$hxClasses["com.babylonhx.materials.StandardMaterialDefines"] = com_babylonhx_materials_StandardMaterialDefines;
com_babylonhx_materials_StandardMaterialDefines.__name__ = ["com","babylonhx","materials","StandardMaterialDefines"];
com_babylonhx_materials_StandardMaterialDefines.__super__ = com_babylonhx_materials_MaterialDefines;
com_babylonhx_materials_StandardMaterialDefines.prototype = $extend(com_babylonhx_materials_MaterialDefines.prototype,{
	BonesPerMesh: null
	,NUM_BONE_INFLUENCERS: null
	,cloneTo: function(other) {
		com_babylonhx_materials_MaterialDefines.prototype.cloneTo.call(this,other);
		other.BonesPerMesh = this.BonesPerMesh;
		other.NUM_BONE_INFLUENCERS = this.NUM_BONE_INFLUENCERS;
	}
	,reset: function() {
		com_babylonhx_materials_MaterialDefines.prototype.reset.call(this);
		this.BonesPerMesh = 0;
		this.NUM_BONE_INFLUENCERS = 0;
	}
	,toString: function() {
		var result = com_babylonhx_materials_MaterialDefines.prototype.toString.call(this);
		result += "#define BonesPerMesh " + this.BonesPerMesh + "\n";
		result += "#define NUM_BONE_INFLUENCERS " + this.NUM_BONE_INFLUENCERS + "\n";
		return result;
	}
	,getLight: function(lightType,lightIndex) {
		switch(lightType) {
		case "POINTLIGHT":
			switch(lightIndex) {
			case 0:
				return 26;
			case 1:
				return 27;
			case 2:
				return 28;
			case 3:
				return 29;
			}
			break;
		case "HEMILIGHT":
			switch(lightIndex) {
			case 0:
				return 22;
			case 1:
				return 23;
			case 2:
				return 24;
			case 3:
				return 25;
			}
			break;
		case "DIRLIGHT":
			switch(lightIndex) {
			case 0:
				return 30;
			case 1:
				return 31;
			case 2:
				return 32;
			case 3:
				return 33;
			}
			break;
		case "SPOTLIGHT":
			switch(lightIndex) {
			case 0:
				return 18;
			case 1:
				return 19;
			case 2:
				return 20;
			case 3:
				return 21;
			}
			break;
		}
		return -1;
	}
	,__class__: com_babylonhx_materials_StandardMaterialDefines
});
var com_babylonhx_materials_textures_VideoTexture = $hx_exports.BABYLON.VideoTexture = function(scene) {
	com_babylonhx_materials_textures_BaseTexture.call(this,scene);
};
$hxClasses["com.babylonhx.materials.textures.VideoTexture"] = com_babylonhx_materials_textures_VideoTexture;
com_babylonhx_materials_textures_VideoTexture.__name__ = ["com","babylonhx","materials","textures","VideoTexture"];
com_babylonhx_materials_textures_VideoTexture.__super__ = com_babylonhx_materials_textures_BaseTexture;
com_babylonhx_materials_textures_VideoTexture.prototype = $extend(com_babylonhx_materials_textures_BaseTexture.prototype,{
	__class__: com_babylonhx_materials_textures_VideoTexture
});
var com_babylonhx_materials_textures_WebGLTexture = $hx_exports.BABYLON.WebGLTexture = function(url,data) {
	this.noMipmap = true;
	this.url = url;
	this.data = data;
	this.generateMipMaps = false;
	this.isCube = false;
	this.samplingMode = 3;
	this._size = null;
	this._width = 1;
	this._height = 1;
	this._baseHeight = 1;
	this._baseWidth = 1;
	this._cachedWrapU = -1;
	this._cachedWrapV = -1;
	this._framebuffer = null;
	this._depthBuffer = null;
	this._cachedCoordinatesMode = -1;
	this._isDisabled = false;
	this.isReady = false;
	this.noMipmap = false;
	this.references = 0;
};
$hxClasses["com.babylonhx.materials.textures.WebGLTexture"] = com_babylonhx_materials_textures_WebGLTexture;
com_babylonhx_materials_textures_WebGLTexture.__name__ = ["com","babylonhx","materials","textures","WebGLTexture"];
com_babylonhx_materials_textures_WebGLTexture.__interfaces__ = [com_babylonhx_ISmartArrayCompatible];
com_babylonhx_materials_textures_WebGLTexture.prototype = {
	data: null
	,_framebuffer: null
	,_depthBuffer: null
	,generateMipMaps: null
	,isCube: null
	,isReady: null
	,noMipmap: null
	,references: null
	,url: null
	,samplingMode: null
	,_size: null
	,_baseHeight: null
	,_baseWidth: null
	,_cachedWrapU: null
	,_cachedWrapV: null
	,_width: null
	,_height: null
	,_cachedCoordinatesMode: null
	,_isDisabled: null
	,_cubeFaces: null
	,__smartArrayFlags: null
	,__class__: com_babylonhx_materials_textures_WebGLTexture
};
var com_babylonhx_materials_textures_procedurals_ProceduralTexture = $hx_exports.BABYLON.ProceduralTexture = function(name,size,fragment,scene,fallbackTexture,generateMipMaps) {
	if(generateMipMaps == null) generateMipMaps = true;
	this._fallbackTextureUsed = false;
	this._matrices = new haxe_ds_StringMap();
	this._vectors3 = new haxe_ds_StringMap();
	this._vectors2 = new haxe_ds_StringMap();
	this._colors4 = new haxe_ds_StringMap();
	this._colors3 = new haxe_ds_StringMap();
	this._floatsArrays = new haxe_ds_StringMap();
	this._floats = new haxe_ds_StringMap();
	this._textures = new haxe_ds_StringMap();
	this._samplers = [];
	this._uniforms = [];
	this._vertexStrideSize = 8;
	this._vertexDeclaration = [2];
	this._refreshRate = 1;
	this._currentRefreshId = -1;
	this.isEnabled = true;
	com_babylonhx_materials_textures_Texture.call(this,null,scene,!generateMipMaps);
	scene._proceduralTextures.push(this);
	this.name = name;
	this.isRenderTarget = true;
	this._size = size;
	this._generateMipMaps = generateMipMaps;
	this.setFragment(fragment);
	this._fallbackTexture = fallbackTexture;
	this._texture = scene._engine.createRenderTargetTexture(size,generateMipMaps);
	var vertices = [];
	vertices.push(1);
	vertices.push(1);
	vertices.push(-1);
	vertices.push(1);
	vertices.push(-1);
	vertices.push(-1);
	vertices.push(1);
	vertices.push(-1);
	this._vertexBuffer = scene._engine.createVertexBuffer(vertices);
	var indices = [];
	indices.push(0);
	indices.push(1);
	indices.push(2);
	indices.push(0);
	indices.push(2);
	indices.push(3);
	this._indexBuffer = scene._engine.createIndexBuffer(indices);
};
$hxClasses["com.babylonhx.materials.textures.procedurals.ProceduralTexture"] = com_babylonhx_materials_textures_procedurals_ProceduralTexture;
com_babylonhx_materials_textures_procedurals_ProceduralTexture.__name__ = ["com","babylonhx","materials","textures","procedurals","ProceduralTexture"];
com_babylonhx_materials_textures_procedurals_ProceduralTexture.__super__ = com_babylonhx_materials_textures_Texture;
com_babylonhx_materials_textures_procedurals_ProceduralTexture.prototype = $extend(com_babylonhx_materials_textures_Texture.prototype,{
	_size: null
	,_generateMipMaps: null
	,isEnabled: null
	,_doNotChangeAspectRatio: null
	,_currentRefreshId: null
	,_refreshRate: null
	,_vertexBuffer: null
	,_indexBuffer: null
	,_effect: null
	,_vertexDeclaration: null
	,_vertexStrideSize: null
	,_uniforms: null
	,_samplers: null
	,_fragment: null
	,_textures: null
	,_floats: null
	,_floatsArrays: null
	,_colors3: null
	,_colors4: null
	,_vectors2: null
	,_vectors3: null
	,_matrices: null
	,_fallbackTexture: null
	,_fallbackTextureUsed: null
	,reset: function() {
		if(this._effect == null) return;
		var engine = this.getScene().getEngine();
		engine._releaseEffect(this._effect);
	}
	,isReady: function() {
		var _g = this;
		var engine = this.getScene().getEngine();
		var shaders = null;
		if(this._fragment == null) return false;
		if(this._fallbackTextureUsed) return true;
		if(this._fragment.fragmentElement != null) shaders = { vertex : "procedural", fragmentElement : this._fragment.fragmentElement}; else shaders = { vertex : "procedural", fragment : this._fragment};
		this._effect = engine.createEffect(shaders,["position"],this._uniforms,this._samplers,"",null,null,function(effect,msg) {
			_g.releaseInternalTexture();
			if(_g._fallbackTexture != null) {
				_g._texture = _g._fallbackTexture._texture;
				_g._texture.references++;
			}
			_g._fallbackTextureUsed = true;
		});
		return this._effect._isReady;
	}
	,resetRefreshCounter: function() {
		this._currentRefreshId = -1;
	}
	,setFragment: function(fragment) {
		this._fragment = fragment;
	}
	,get_refreshRate: function() {
		return this._refreshRate;
	}
	,set_refreshRate: function(value) {
		this._refreshRate = value;
		this._currentRefreshId = -1;
		return value;
	}
	,_shouldRender: function() {
		if(!this.isEnabled || !this.isReady() || this._texture == null) return false;
		if(this._fallbackTextureUsed) return false;
		if(this._currentRefreshId == -1) {
			this._currentRefreshId = 1;
			return true;
		}
		if(this.get_refreshRate() == this._currentRefreshId) {
			this._currentRefreshId = 1;
			return true;
		}
		this._currentRefreshId++;
		return false;
	}
	,getRenderSize: function() {
		return this._size;
	}
	,resize: function(size,generateMipMaps) {
		if(this._fallbackTextureUsed) return;
		this.releaseInternalTexture();
		this._texture = this.getScene().getEngine().createRenderTargetTexture(size,generateMipMaps);
	}
	,_checkUniform: function(uniformName) {
		if(HxOverrides.indexOf(this._uniforms,uniformName,0) == -1) this._uniforms.push(uniformName);
	}
	,setTexture: function(name,texture) {
		if(HxOverrides.indexOf(this._samplers,name,0) == -1) this._samplers.push(name);
		{
			this._textures.set(name,texture);
			texture;
		}
		return this;
	}
	,setFloat: function(name,value) {
		if(HxOverrides.indexOf(this._uniforms,name,0) == -1) this._uniforms.push(name);
		{
			this._floats.set(name,value);
			value;
		}
		return this;
	}
	,setFloats: function(name,value) {
		if(HxOverrides.indexOf(this._uniforms,name,0) == -1) this._uniforms.push(name);
		{
			this._floatsArrays.set(name,value);
			value;
		}
		return this;
	}
	,setColor3: function(name,value) {
		if(HxOverrides.indexOf(this._uniforms,name,0) == -1) this._uniforms.push(name);
		{
			this._colors3.set(name,value);
			value;
		}
		return this;
	}
	,setColor4: function(name,value) {
		if(HxOverrides.indexOf(this._uniforms,name,0) == -1) this._uniforms.push(name);
		{
			this._colors4.set(name,value);
			value;
		}
		return this;
	}
	,setVector2: function(name,value) {
		if(HxOverrides.indexOf(this._uniforms,name,0) == -1) this._uniforms.push(name);
		{
			this._vectors2.set(name,value);
			value;
		}
		return this;
	}
	,setVector3: function(name,value) {
		if(HxOverrides.indexOf(this._uniforms,name,0) == -1) this._uniforms.push(name);
		{
			this._vectors3.set(name,value);
			value;
		}
		return this;
	}
	,setMatrix: function(name,value) {
		if(HxOverrides.indexOf(this._uniforms,name,0) == -1) this._uniforms.push(name);
		{
			this._matrices.set(name,value);
			value;
		}
		return this;
	}
	,render: function(useCameraPostProcess) {
		if(useCameraPostProcess == null) useCameraPostProcess = false;
		var scene = this.getScene();
		var engine = scene._engine;
		engine.bindFramebuffer(this._texture);
		engine.clear(scene.clearColor,true,true);
		engine.enableEffect(this._effect);
		engine.setState(false,null,null,null);
		var $it0 = this._textures.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			this._effect.setTexture(key,this._textures.get(key));
		}
		var $it1 = this._floats.keys();
		while( $it1.hasNext() ) {
			var key1 = $it1.next();
			this._effect.setFloat(key1,this._floats.get(key1));
		}
		var $it2 = this._floatsArrays.keys();
		while( $it2.hasNext() ) {
			var key2 = $it2.next();
			this._effect.setArray(key2,this._floatsArrays.get(key2));
		}
		var $it3 = this._colors3.keys();
		while( $it3.hasNext() ) {
			var key3 = $it3.next();
			this._effect.setColor3(key3,this._colors3.get(key3));
		}
		var $it4 = this._colors4.keys();
		while( $it4.hasNext() ) {
			var key4 = $it4.next();
			var color = this._colors4.get(key4);
			this._effect.setFloat4(key4,color.r,color.g,color.b,color.a);
		}
		var $it5 = this._vectors2.keys();
		while( $it5.hasNext() ) {
			var key5 = $it5.next();
			this._effect.setVector2(key5,this._vectors2.get(key5));
		}
		var $it6 = this._vectors3.keys();
		while( $it6.hasNext() ) {
			var key6 = $it6.next();
			this._effect.setVector3(key6,this._vectors3.get(key6));
		}
		var $it7 = this._matrices.keys();
		while( $it7.hasNext() ) {
			var key7 = $it7.next();
			this._effect.setMatrix(key7,this._matrices.get(key7));
		}
		engine.bindBuffers(this._vertexBuffer,this._indexBuffer,this._vertexDeclaration,this._vertexStrideSize,this._effect);
		engine.draw(true,0,6);
		engine.unBindFramebuffer(this._texture,null);
	}
	,clone: function() {
		var textureSize = this.getSize();
		var newTexture = new com_babylonhx_materials_textures_procedurals_ProceduralTexture(this.name,textureSize.width,this._fragment,this.getScene(),this._fallbackTexture,this._generateMipMaps);
		newTexture.hasAlpha = this.hasAlpha;
		newTexture.level = this.level;
		newTexture.coordinatesMode = this.coordinatesMode;
		return newTexture;
	}
	,dispose: function() {
		var index;
		var _this = this.getScene()._proceduralTextures;
		index = HxOverrides.indexOf(_this,this,0);
		if(index >= 0) this.getScene()._proceduralTextures.splice(index,1);
		com_babylonhx_materials_textures_Texture.prototype.dispose.call(this);
	}
	,__class__: com_babylonhx_materials_textures_procedurals_ProceduralTexture
	,__properties__: {set_refreshRate:"set_refreshRate",get_refreshRate:"get_refreshRate"}
});
var com_babylonhx_math_Axis = $hx_exports.BABYLON.Axis = function() { };
$hxClasses["com.babylonhx.math.Axis"] = com_babylonhx_math_Axis;
com_babylonhx_math_Axis.__name__ = ["com","babylonhx","math","Axis"];
var com_babylonhx_math_Frustum = $hx_exports.BABYLON.Frustum = function() { };
$hxClasses["com.babylonhx.math.Frustum"] = com_babylonhx_math_Frustum;
com_babylonhx_math_Frustum.__name__ = ["com","babylonhx","math","Frustum"];
com_babylonhx_math_Frustum.GetPlanes = function(transform) {
	var frustumPlanes = [];
	var _g = 0;
	while(_g < 6) {
		var index = _g++;
		frustumPlanes.push(new com_babylonhx_math_Plane(0,0,0,0));
	}
	frustumPlanes[0].normal.x = transform.m[3] + transform.m[2];
	frustumPlanes[0].normal.y = transform.m[7] + transform.m[6];
	frustumPlanes[0].normal.z = transform.m[11] + transform.m[10];
	frustumPlanes[0].d = transform.m[15] + transform.m[14];
	frustumPlanes[0].normalize();
	frustumPlanes[1].normal.x = transform.m[3] - transform.m[2];
	frustumPlanes[1].normal.y = transform.m[7] - transform.m[6];
	frustumPlanes[1].normal.z = transform.m[11] - transform.m[10];
	frustumPlanes[1].d = transform.m[15] - transform.m[14];
	frustumPlanes[1].normalize();
	frustumPlanes[2].normal.x = transform.m[3] + transform.m[0];
	frustumPlanes[2].normal.y = transform.m[7] + transform.m[4];
	frustumPlanes[2].normal.z = transform.m[11] + transform.m[8];
	frustumPlanes[2].d = transform.m[15] + transform.m[12];
	frustumPlanes[2].normalize();
	frustumPlanes[3].normal.x = transform.m[3] - transform.m[0];
	frustumPlanes[3].normal.y = transform.m[7] - transform.m[4];
	frustumPlanes[3].normal.z = transform.m[11] - transform.m[8];
	frustumPlanes[3].d = transform.m[15] - transform.m[12];
	frustumPlanes[3].normalize();
	frustumPlanes[4].normal.x = transform.m[3] - transform.m[1];
	frustumPlanes[4].normal.y = transform.m[7] - transform.m[5];
	frustumPlanes[4].normal.z = transform.m[11] - transform.m[9];
	frustumPlanes[4].d = transform.m[15] - transform.m[13];
	frustumPlanes[4].normalize();
	frustumPlanes[5].normal.x = transform.m[3] + transform.m[1];
	frustumPlanes[5].normal.y = transform.m[7] + transform.m[5];
	frustumPlanes[5].normal.z = transform.m[11] + transform.m[9];
	frustumPlanes[5].d = transform.m[15] + transform.m[13];
	frustumPlanes[5].normalize();
	return frustumPlanes;
};
com_babylonhx_math_Frustum.GetPlanesToRef = function(transform,frustumPlanes) {
	frustumPlanes[0].normal.x = transform.m[3] + transform.m[2];
	frustumPlanes[0].normal.y = transform.m[7] + transform.m[6];
	frustumPlanes[0].normal.z = transform.m[11] + transform.m[10];
	frustumPlanes[0].d = transform.m[15] + transform.m[14];
	frustumPlanes[0].normalize();
	frustumPlanes[1].normal.x = transform.m[3] - transform.m[2];
	frustumPlanes[1].normal.y = transform.m[7] - transform.m[6];
	frustumPlanes[1].normal.z = transform.m[11] - transform.m[10];
	frustumPlanes[1].d = transform.m[15] - transform.m[14];
	frustumPlanes[1].normalize();
	frustumPlanes[2].normal.x = transform.m[3] + transform.m[0];
	frustumPlanes[2].normal.y = transform.m[7] + transform.m[4];
	frustumPlanes[2].normal.z = transform.m[11] + transform.m[8];
	frustumPlanes[2].d = transform.m[15] + transform.m[12];
	frustumPlanes[2].normalize();
	frustumPlanes[3].normal.x = transform.m[3] - transform.m[0];
	frustumPlanes[3].normal.y = transform.m[7] - transform.m[4];
	frustumPlanes[3].normal.z = transform.m[11] - transform.m[8];
	frustumPlanes[3].d = transform.m[15] - transform.m[12];
	frustumPlanes[3].normalize();
	frustumPlanes[4].normal.x = transform.m[3] - transform.m[1];
	frustumPlanes[4].normal.y = transform.m[7] - transform.m[5];
	frustumPlanes[4].normal.z = transform.m[11] - transform.m[9];
	frustumPlanes[4].d = transform.m[15] - transform.m[13];
	frustumPlanes[4].normalize();
	frustumPlanes[5].normal.x = transform.m[3] + transform.m[1];
	frustumPlanes[5].normal.y = transform.m[7] + transform.m[5];
	frustumPlanes[5].normal.z = transform.m[11] + transform.m[9];
	frustumPlanes[5].d = transform.m[15] + transform.m[13];
	frustumPlanes[5].normalize();
};
var com_babylonhx_math_Path3D = $hx_exports.BABYLON.Path3D = function(path,firstNormal,raw) {
	if(raw == null) raw = false;
	this._raw = false;
	this._binormals = [];
	this._normals = [];
	this._tangents = [];
	this._distances = [];
	this._curve = [];
	var _g1 = 0;
	var _g = path.length;
	while(_g1 < _g) {
		var p = _g1++;
		this._curve[p] = path[p].clone();
	}
	this._raw = raw;
	this._compute(firstNormal);
};
$hxClasses["com.babylonhx.math.Path3D"] = com_babylonhx_math_Path3D;
com_babylonhx_math_Path3D.__name__ = ["com","babylonhx","math","Path3D"];
com_babylonhx_math_Path3D.prototype = {
	path: null
	,_curve: null
	,_distances: null
	,_tangents: null
	,_normals: null
	,_binormals: null
	,_raw: null
	,getCurve: function() {
		return this._curve;
	}
	,getTangents: function() {
		return this._tangents;
	}
	,getNormals: function() {
		return this._normals;
	}
	,getBinormals: function() {
		return this._binormals;
	}
	,getDistances: function() {
		return this._distances;
	}
	,update: function(path,firstNormal) {
		var _g1 = 0;
		var _g = path.length;
		while(_g1 < _g) {
			var p = _g1++;
			this._curve[p].x = path[p].x;
			this._curve[p].y = path[p].y;
			this._curve[p].z = path[p].z;
		}
		this._compute(firstNormal);
		return this;
	}
	,_compute: function(firstNormal) {
		var l = this._curve.length;
		this._tangents[0] = this._getFirstNonNullVector(0);
		if(!this._raw) this._tangents[0].normalize();
		this._tangents[l - 1] = this._curve[l - 1].subtract(this._curve[l - 2]);
		if(!this._raw) this._tangents[l - 1].normalize();
		var tg0 = this._tangents[0];
		var pp0 = this._normalVector(this._curve[0],tg0,firstNormal);
		this._normals[0] = pp0;
		if(!this._raw) this._normals[0].normalize();
		this._binormals[0] = com_babylonhx_math_Vector3.Cross(tg0,this._normals[0]);
		if(!this._raw) this._binormals[0].normalize();
		this._distances[0] = 0;
		var prev = new com_babylonhx_math_Vector3(0,0,0);
		var cur = new com_babylonhx_math_Vector3(0,0,0);
		var curTang = new com_babylonhx_math_Vector3(0,0,0);
		var prevNorm = new com_babylonhx_math_Vector3(0,0,0);
		var prevBinor = new com_babylonhx_math_Vector3(0,0,0);
		var _g = 1;
		while(_g < l) {
			var i = _g++;
			prev = this._getLastNonNullVector(i);
			if(i < l - 1) {
				cur = this._getFirstNonNullVector(i);
				this._tangents[i] = new com_babylonhx_math_Vector3(prev.x + cur.x,prev.y + cur.y,prev.z + cur.z);
				this._tangents[i].normalize();
			}
			this._distances[i] = this._distances[i - 1] + Math.sqrt(prev.x * prev.x + prev.y * prev.y + prev.z * prev.z);
			curTang = this._tangents[i];
			prevNorm = this._normals[i - 1];
			prevBinor = this._binormals[i - 1];
			this._normals[i] = com_babylonhx_math_Vector3.Cross(prevBinor,curTang);
			if(!this._raw) this._normals[i].normalize();
			this._binormals[i] = com_babylonhx_math_Vector3.Cross(curTang,this._normals[i]);
			if(!this._raw) this._binormals[i].normalize();
		}
	}
	,_getFirstNonNullVector: function(index) {
		var i = 1;
		var nNVector = this._curve[index + i].subtract(this._curve[index]);
		while(Math.sqrt(nNVector.x * nNVector.x + nNVector.y * nNVector.y + nNVector.z * nNVector.z) == 0 && index + i + 1 < this._curve.length) {
			i++;
			nNVector = this._curve[index + i].subtract(this._curve[index]);
		}
		return nNVector;
	}
	,_getLastNonNullVector: function(index) {
		var i = 1;
		var nLVector = this._curve[index].subtract(this._curve[index - i]);
		while(Math.sqrt(nLVector.x * nLVector.x + nLVector.y * nLVector.y + nLVector.z * nLVector.z) == 0 && index > i + 1) {
			i++;
			nLVector = this._curve[index].subtract(this._curve[index - i]);
		}
		return nLVector;
	}
	,_normalVector: function(v0,vt,va) {
		var normal0 = new com_babylonhx_math_Vector3(0,0,0);
		if(va == null) {
			var point = new com_babylonhx_math_Vector3(0,0,0);
			if(!com_babylonhx_tools_Tools.WithinEpsilon(vt.y,1,0.001)) point = new com_babylonhx_math_Vector3(0,-1,0); else if(!com_babylonhx_tools_Tools.WithinEpsilon(vt.x,1,0.001)) point = new com_babylonhx_math_Vector3(1,0,0); else if(!com_babylonhx_tools_Tools.WithinEpsilon(vt.z,1,0.001)) point = new com_babylonhx_math_Vector3(0,0,1);
			normal0 = com_babylonhx_math_Vector3.Cross(vt,point);
		} else {
			normal0 = com_babylonhx_math_Vector3.Cross(vt,va);
			normal0.x = normal0.y * vt.z - normal0.z * vt.y;
			normal0.y = normal0.z * vt.x - normal0.x * vt.z;
			normal0.z = normal0.x * vt.y - normal0.y * vt.x;
		}
		normal0.normalize();
		return normal0;
	}
	,__class__: com_babylonhx_math_Path3D
};
var com_babylonhx_math_PositionNormalTextureVertex = function(position,normal,uv) {
	if(position != null) this.position = position; else this.position = new com_babylonhx_math_Vector3(0,0,0);
	if(normal != null) this.normal = normal; else this.normal = new com_babylonhx_math_Vector3(0,1.0,0);
	if(uv != null) this.uv = uv; else this.uv = new com_babylonhx_math_Vector2(0,0);
};
$hxClasses["com.babylonhx.math.PositionNormalTextureVertex"] = com_babylonhx_math_PositionNormalTextureVertex;
com_babylonhx_math_PositionNormalTextureVertex.__name__ = ["com","babylonhx","math","PositionNormalTextureVertex"];
com_babylonhx_math_PositionNormalTextureVertex.prototype = {
	position: null
	,normal: null
	,uv: null
	,clone: function() {
		return new com_babylonhx_math_PositionNormalTextureVertex(this.position.clone(),this.normal.clone(),this.uv.clone());
	}
	,__class__: com_babylonhx_math_PositionNormalTextureVertex
};
var com_babylonhx_math_PositionNormalVertex = function(position,normal) {
	if(position != null) this.position = position; else this.position = new com_babylonhx_math_Vector3(0,0,0);
	if(normal != null) this.normal = normal; else this.normal = new com_babylonhx_math_Vector3(0,1.0,0);
};
$hxClasses["com.babylonhx.math.PositionNormalVertex"] = com_babylonhx_math_PositionNormalVertex;
com_babylonhx_math_PositionNormalVertex.__name__ = ["com","babylonhx","math","PositionNormalVertex"];
com_babylonhx_math_PositionNormalVertex.prototype = {
	position: null
	,normal: null
	,clone: function() {
		return new com_babylonhx_math_PositionNormalVertex(this.position.clone(),this.normal.clone());
	}
	,__class__: com_babylonhx_math_PositionNormalVertex
};
var com_babylonhx_math_Ray = $hx_exports.BABYLON.Ray = function(origin,direction,length) {
	this.origin = origin;
	this.direction = direction;
	if(length != null) this.length = length; else {
		this.length = Infinity;
	}
};
$hxClasses["com.babylonhx.math.Ray"] = com_babylonhx_math_Ray;
com_babylonhx_math_Ray.__name__ = ["com","babylonhx","math","Ray"];
com_babylonhx_math_Ray.CreateNew = function(x,y,viewportWidth,viewportHeight,world,view,projection) {
	var start = com_babylonhx_math_Vector3.Unproject(new com_babylonhx_math_Vector3(x,y,0),viewportWidth,viewportHeight,world,view,projection);
	var end = com_babylonhx_math_Vector3.Unproject(new com_babylonhx_math_Vector3(x,y,1),viewportWidth,viewportHeight,world,view,projection);
	var direction = new com_babylonhx_math_Vector3(end.x - start.x,end.y - start.y,end.z - start.z);
	direction.normalize();
	return new com_babylonhx_math_Ray(start,direction);
};
com_babylonhx_math_Ray.CreateNewFromTo = function(origin,end,world) {
	if(world == null) world = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	var direction = new com_babylonhx_math_Vector3(end.x - origin.x,end.y - origin.y,end.z - origin.z);
	var length = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);
	direction.normalize();
	return com_babylonhx_math_Ray.Transform(new com_babylonhx_math_Ray(origin,direction,length),world);
};
com_babylonhx_math_Ray.Transform = function(ray,matrix) {
	var newOrigin = com_babylonhx_math_Vector3.TransformCoordinates(ray.origin,matrix);
	var newDirection = com_babylonhx_math_Vector3.TransformNormal(ray.direction,matrix);
	return new com_babylonhx_math_Ray(newOrigin,newDirection);
};
com_babylonhx_math_Ray.prototype = {
	origin: null
	,direction: null
	,length: null
	,_edge1: null
	,_edge2: null
	,_pvec: null
	,_tvec: null
	,_qvec: null
	,intersectsBoxMinMax: function(minimum,maximum) {
		var d = 0.0;
		var maxValue = Infinity;
		if(Math.abs(this.direction.x) < 0.0000001) {
			if(this.origin.x < minimum.x || this.origin.x > maximum.x) return false;
		} else {
			var inv = 1.0 / this.direction.x;
			var min = (minimum.x - this.origin.x) * inv;
			var max = (maximum.x - this.origin.x) * inv;
			if(max == -Infinity) max = Infinity;
			if(min > max) {
				var temp = min;
				min = max;
				max = temp;
			}
			d = Math.max(min,d);
			maxValue = Math.min(max,maxValue);
			if(d > maxValue) return false;
		}
		if(Math.abs(this.direction.y) < 0.0000001) {
			if(this.origin.y < minimum.y || this.origin.y > maximum.y) return false;
		} else {
			var inv1 = 1.0 / this.direction.y;
			var min1 = (minimum.y - this.origin.y) * inv1;
			var max1 = (maximum.y - this.origin.y) * inv1;
			if(max1 == -Infinity) max1 = Infinity;
			if(min1 > max1) {
				var temp1 = min1;
				min1 = max1;
				max1 = temp1;
			}
			d = Math.max(min1,d);
			maxValue = Math.min(max1,maxValue);
			if(d > maxValue) return false;
		}
		if(Math.abs(this.direction.z) < 0.0000001) {
			if(this.origin.z < minimum.z || this.origin.z > maximum.z) return false;
		} else {
			var inv2 = 1.0 / this.direction.z;
			var min2 = (minimum.z - this.origin.z) * inv2;
			var max2 = (maximum.z - this.origin.z) * inv2;
			if(max2 == -Infinity) max2 = Infinity;
			if(min2 > max2) {
				var temp2 = min2;
				min2 = max2;
				max2 = temp2;
			}
			d = Math.max(min2,d);
			maxValue = Math.min(max2,maxValue);
			if(d > maxValue) return false;
		}
		return true;
	}
	,intersectsBox: function(box) {
		return this.intersectsBoxMinMax(box.minimum,box.maximum);
	}
	,intersectsSphere: function(sphere) {
		var x = sphere.center.x - this.origin.x;
		var y = sphere.center.y - this.origin.y;
		var z = sphere.center.z - this.origin.z;
		var pyth = x * x + y * y + z * z;
		var rr = sphere.radius * sphere.radius;
		if(pyth <= rr) return true;
		var dot = x * this.direction.x + y * this.direction.y + z * this.direction.z;
		if(dot < 0.0) return false;
		var temp = pyth - dot * dot;
		return temp <= rr;
	}
	,intersectsTriangle: function(vertex0,vertex1,vertex2) {
		if(this._edge1 == null) {
			this._edge1 = new com_babylonhx_math_Vector3(0,0,0);
			this._edge2 = new com_babylonhx_math_Vector3(0,0,0);
			this._pvec = new com_babylonhx_math_Vector3(0,0,0);
			this._tvec = new com_babylonhx_math_Vector3(0,0,0);
			this._qvec = new com_babylonhx_math_Vector3(0,0,0);
		}
		vertex1.subtractToRef(vertex0,this._edge1);
		vertex2.subtractToRef(vertex0,this._edge2);
		com_babylonhx_math_Vector3.CrossToRef(this.direction,this._edge2,this._pvec);
		var det = com_babylonhx_math_Vector3.Dot(this._edge1,this._pvec);
		if(det == 0) return null;
		var invdet = 1 / det;
		this.origin.subtractToRef(vertex0,this._tvec);
		var bu = com_babylonhx_math_Vector3.Dot(this._tvec,this._pvec) * invdet;
		if(bu < 0 || bu > 1.0) return null;
		com_babylonhx_math_Vector3.CrossToRef(this._tvec,this._edge1,this._qvec);
		var bv = com_babylonhx_math_Vector3.Dot(this.direction,this._qvec) * invdet;
		if(bv < 0 || bu + bv > 1.0) return null;
		return new com_babylonhx_collisions_IntersectionInfo(bu,bv,com_babylonhx_math_Vector3.Dot(this._edge2,this._qvec) * invdet);
	}
	,__class__: com_babylonhx_math_Ray
};
var com_babylonhx_math_Space = $hxClasses["com.babylonhx.math.Space"] = { __ename__ : ["com","babylonhx","math","Space"], __constructs__ : ["LOCAL","WORLD"] };
com_babylonhx_math_Space.LOCAL = ["LOCAL",0];
com_babylonhx_math_Space.LOCAL.toString = $estr;
com_babylonhx_math_Space.LOCAL.__enum__ = com_babylonhx_math_Space;
com_babylonhx_math_Space.WORLD = ["WORLD",1];
com_babylonhx_math_Space.WORLD.toString = $estr;
com_babylonhx_math_Space.WORLD.__enum__ = com_babylonhx_math_Space;
var com_babylonhx_math_Vector2 = $hx_exports.BABYLON.Vector2 = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["com.babylonhx.math.Vector2"] = com_babylonhx_math_Vector2;
com_babylonhx_math_Vector2.__name__ = ["com","babylonhx","math","Vector2"];
com_babylonhx_math_Vector2.Zero = function() {
	return new com_babylonhx_math_Vector2(0,0);
};
com_babylonhx_math_Vector2.FromArray = function(array,offset) {
	if(offset == null) offset = 0;
	return new com_babylonhx_math_Vector2(array[offset],array[offset + 1]);
};
com_babylonhx_math_Vector2.FromArrayToRef = function(array,offset,result) {
	result.x = array[offset];
	result.y = array[offset + 1];
	return result;
};
com_babylonhx_math_Vector2.CatmullRom = function(value1,value2,value3,value4,amount) {
	var squared = amount * amount;
	var cubed = amount * squared;
	var x = 0.5 * (2.0 * value2.x + (-value1.x + value3.x) * amount + (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) * squared + (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);
	var y = 0.5 * (2.0 * value2.y + (-value1.y + value3.y) * amount + (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) * squared + (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);
	return new com_babylonhx_math_Vector2(x,y);
};
com_babylonhx_math_Vector2.Clamp = function(value,min,max) {
	var x = value.x;
	if(x > max.x) x = max.x; else x = x;
	if(x < min.x) x = min.x; else x = x;
	var y = value.y;
	if(y > max.y) y = max.y; else y = y;
	if(y < min.y) y = min.y; else y = y;
	return new com_babylonhx_math_Vector2(x,y);
};
com_babylonhx_math_Vector2.Hermite = function(value1,tangent1,value2,tangent2,amount) {
	var squared = amount * amount;
	var cubed = amount * squared;
	var part1 = 2.0 * cubed - 3.0 * squared + 1.0;
	var part2 = -2. * cubed + 3.0 * squared;
	var part3 = cubed - 2.0 * squared + amount;
	var part4 = cubed - squared;
	var x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;
	var y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;
	return new com_babylonhx_math_Vector2(x,y);
};
com_babylonhx_math_Vector2.Lerp = function(start,end,amount) {
	var x = start.x + (end.x - start.x) * amount;
	var y = start.y + (end.y - start.y) * amount;
	return new com_babylonhx_math_Vector2(x,y);
};
com_babylonhx_math_Vector2.Dot = function(left,right) {
	return left.x * right.x + left.y * right.y;
};
com_babylonhx_math_Vector2.Normalize = function(vector) {
	var newVector = new com_babylonhx_math_Vector2(vector.x,vector.y);
	newVector.normalize();
	return newVector;
};
com_babylonhx_math_Vector2.Minimize = function(left,right) {
	var x;
	if(left.x < right.x) x = left.x; else x = right.x;
	var y;
	if(left.y < right.y) y = left.y; else y = right.y;
	return new com_babylonhx_math_Vector2(x,y);
};
com_babylonhx_math_Vector2.Maximize = function(left,right) {
	var x;
	if(left.x > right.x) x = left.x; else x = right.x;
	var y;
	if(left.y > right.y) y = left.y; else y = right.y;
	return new com_babylonhx_math_Vector2(x,y);
};
com_babylonhx_math_Vector2.Transform = function(vector,transformation) {
	var x = vector.x * transformation.m[0] + vector.y * transformation.m[4];
	var y = vector.x * transformation.m[1] + vector.y * transformation.m[5];
	return new com_babylonhx_math_Vector2(x,y);
};
com_babylonhx_math_Vector2.Distance = function(value1,value2) {
	return Math.sqrt(com_babylonhx_math_Vector2.DistanceSquared(value1,value2));
};
com_babylonhx_math_Vector2.DistanceSquared = function(value1,value2) {
	var x = value1.x - value2.x;
	var y = value1.y - value2.y;
	return x * x + y * y;
};
com_babylonhx_math_Vector2.prototype = {
	x: null
	,y: null
	,toString: function() {
		return "{X:" + this.x + " Y:" + this.y + "}";
	}
	,toArray: function(array,index) {
		if(index == null) index = 0;
		array[index] = this.x;
		array[index + 1] = this.y;
		return this;
	}
	,asArray: function() {
		var result = [];
		this.toArray(result,0);
		return result;
	}
	,copyFrom: function(source) {
		this.x = source.x;
		this.y = source.y;
		return this;
	}
	,copyFromFloats: function(x,y) {
		this.x = x;
		this.y = y;
		return this;
	}
	,add: function(otherVector) {
		return new com_babylonhx_math_Vector2(this.x + otherVector.x,this.y + otherVector.y);
	}
	,addVector3: function(otherVector) {
		return new com_babylonhx_math_Vector2(this.x + otherVector.x,this.y + otherVector.y);
	}
	,subtract: function(otherVector) {
		return new com_babylonhx_math_Vector2(this.x - otherVector.x,this.y - otherVector.y);
	}
	,subtractInPlace: function(otherVector) {
		this.x -= otherVector.x;
		this.y -= otherVector.y;
		return this;
	}
	,multiplyInPlace: function(otherVector) {
		this.x *= otherVector.x;
		this.y *= otherVector.y;
		return this;
	}
	,multiply: function(otherVector) {
		return new com_babylonhx_math_Vector2(this.x * otherVector.x,this.y * otherVector.y);
	}
	,multiplyToRef: function(otherVector,result) {
		result.x = this.x * otherVector.x;
		result.y = this.y * otherVector.y;
		return this;
	}
	,multiplyByFloats: function(x,y) {
		return new com_babylonhx_math_Vector2(this.x * x,this.y * y);
	}
	,divide: function(otherVector) {
		return new com_babylonhx_math_Vector2(this.x / otherVector.x,this.y / otherVector.y);
	}
	,divideToRef: function(otherVector,result) {
		result.x = this.x / otherVector.x;
		result.y = this.y / otherVector.y;
		return this;
	}
	,negate: function() {
		return new com_babylonhx_math_Vector2(-this.x,-this.y);
	}
	,scaleInPlace: function(scale) {
		this.x *= scale;
		this.y *= scale;
		return this;
	}
	,scale: function(scale) {
		return new com_babylonhx_math_Vector2(this.x * scale,this.y * scale);
	}
	,equals: function(otherVector) {
		return otherVector != null && this.x == otherVector.x && this.y == otherVector.y;
	}
	,equalsWithEpsilon: function(otherVector,epsilon) {
		if(epsilon == null) epsilon = 0.001;
		return otherVector != null && com_babylonhx_tools_Tools.WithinEpsilon(this.x,otherVector.x,epsilon) && com_babylonhx_tools_Tools.WithinEpsilon(this.y,otherVector.y,epsilon);
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,lengthSquared: function() {
		return this.x * this.x + this.y * this.y;
	}
	,normalize: function() {
		var len = Math.sqrt(this.x * this.x + this.y * this.y);
		if(len == 0) return this;
		var num = 1.0 / len;
		this.x *= num;
		this.y *= num;
		return this;
	}
	,clone: function() {
		return new com_babylonhx_math_Vector2(this.x,this.y);
	}
	,__class__: com_babylonhx_math_Vector2
};
var com_babylonhx_math_Viewport = $hx_exports.BABYLON.Viewport = function(x,y,width,height) {
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["com.babylonhx.math.Viewport"] = com_babylonhx_math_Viewport;
com_babylonhx_math_Viewport.__name__ = ["com","babylonhx","math","Viewport"];
com_babylonhx_math_Viewport.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,toGlobal: function(engine) {
		var width = engine.getRenderWidth();
		var height = engine.getRenderHeight();
		return new com_babylonhx_math_Viewport(this.x * width,this.y * height,this.width * width,this.height * height);
	}
	,__class__: com_babylonhx_math_Viewport
};
var com_babylonhx_mesh_GroundMesh = $hx_exports.BABYLON.GroundMesh = function(name,scene) {
	this._worldInverse = new com_babylonhx_math_Matrix();
	this.generateOctree = false;
	com_babylonhx_mesh_Mesh.call(this,name,scene);
};
$hxClasses["com.babylonhx.mesh.GroundMesh"] = com_babylonhx_mesh_GroundMesh;
com_babylonhx_mesh_GroundMesh.__name__ = ["com","babylonhx","mesh","GroundMesh"];
com_babylonhx_mesh_GroundMesh.__super__ = com_babylonhx_mesh_Mesh;
com_babylonhx_mesh_GroundMesh.prototype = $extend(com_babylonhx_mesh_Mesh.prototype,{
	generateOctree: null
	,_worldInverse: null
	,_subdivisions: null
	,optimize: function(chunksCount,octreeBlocksSize) {
		if(octreeBlocksSize == null) octreeBlocksSize = 32;
		this._subdivisions = chunksCount;
		this.subdivide(this._subdivisions);
		this.createOrUpdateSubmeshesOctree(octreeBlocksSize,null);
	}
	,getHeightAtCoordinates: function(x,z) {
		var ray = new com_babylonhx_math_Ray(new com_babylonhx_math_Vector3(x,this.getBoundingInfo().boundingBox.maximumWorld.y + 1,z),new com_babylonhx_math_Vector3(0,-1,0));
		this.getWorldMatrix().invertToRef(this._worldInverse);
		ray = com_babylonhx_math_Ray.Transform(ray,this._worldInverse);
		var pickInfo = this.intersects(ray);
		if(pickInfo.hit) return pickInfo.pickedPoint.y;
		return 0;
	}
	,__class__: com_babylonhx_mesh_GroundMesh
});
var com_babylonhx_mesh_InstancedMesh = $hx_exports.BABYLON.InstancedMesh = function(name,source) {
	com_babylonhx_mesh_AbstractMesh.call(this,name,source._scene);
	source.instances.push(this);
	this._sourceMesh = source;
	this.position.copyFrom(source.position);
	this.rotation.copyFrom(source.rotation);
	this.scaling.copyFrom(source.scaling);
	if(source.rotationQuaternion != null) this.rotationQuaternion = source.rotationQuaternion.clone();
	this.infiniteDistance = source.infiniteDistance;
	this._pivotMatrix = source._pivotMatrix;
	this._cache.pivotMatrixUpdated = true;
	this.refreshBoundingInfo();
	this._syncSubMeshes();
};
$hxClasses["com.babylonhx.mesh.InstancedMesh"] = com_babylonhx_mesh_InstancedMesh;
com_babylonhx_mesh_InstancedMesh.__name__ = ["com","babylonhx","mesh","InstancedMesh"];
com_babylonhx_mesh_InstancedMesh.__interfaces__ = [com_babylonhx_animations_IAnimatable];
com_babylonhx_mesh_InstancedMesh.__super__ = com_babylonhx_mesh_AbstractMesh;
com_babylonhx_mesh_InstancedMesh.prototype = $extend(com_babylonhx_mesh_AbstractMesh.prototype,{
	_sourceMesh: null
	,_currentLOD: null
	,get_receiveShadows: function() {
		return this._sourceMesh.get_receiveShadows();
	}
	,get_material: function() {
		return this._sourceMesh.get_material();
	}
	,get_visibility: function() {
		return this._sourceMesh.get_visibility();
	}
	,get_skeleton: function() {
		return this._sourceMesh.get_skeleton();
	}
	,getTotalVertices: function() {
		return this._sourceMesh.getTotalVertices();
	}
	,sourceMesh: null
	,get_sourceMesh: function() {
		return this._sourceMesh;
	}
	,getVerticesData: function(kind,copyWhenShared) {
		if(copyWhenShared == null) copyWhenShared = false;
		return this._sourceMesh.getVerticesData(kind,copyWhenShared);
	}
	,isVerticesDataPresent: function(kind) {
		return this._sourceMesh.isVerticesDataPresent(kind);
	}
	,getIndices: function(copyWhenShared) {
		if(copyWhenShared == null) copyWhenShared = false;
		return this._sourceMesh.getIndices(copyWhenShared);
	}
	,get_positions: function() {
		return this._sourceMesh._positions;
	}
	,refreshBoundingInfo: function() {
		var meshBB = this._sourceMesh.getBoundingInfo();
		this._boundingInfo = new com_babylonhx_culling_BoundingInfo(meshBB.minimum.clone(),meshBB.maximum.clone());
		if(this._boundingInfo == null) this._boundingInfo = new com_babylonhx_culling_BoundingInfo(this.get_absolutePosition(),this.get_absolutePosition()); else this._boundingInfo = this._boundingInfo;
		this._boundingInfo._update(this.get_worldMatrixFromCache());
		this._updateSubMeshesBoundingInfo(this.get_worldMatrixFromCache());
	}
	,_preActivate: function() {
		if(this._currentLOD != null) this._currentLOD._preActivate();
	}
	,_activate: function(renderId) {
		if(this._currentLOD != null) this.get_sourceMesh()._registerInstanceForRenderId(this,renderId);
	}
	,getLOD: function(camera,boundingSphere) {
		this._currentLOD = this.get_sourceMesh().getLOD(this._scene.activeCamera,this.getBoundingInfo().boundingSphere);
		if(this._currentLOD == this.get_sourceMesh()) return this;
		return this._currentLOD;
	}
	,_syncSubMeshes: function() {
		this.releaseSubMeshes();
		if(this._sourceMesh.subMeshes != null) {
			var _g1 = 0;
			var _g = this._sourceMesh.subMeshes.length;
			while(_g1 < _g) {
				var index = _g1++;
				this._sourceMesh.subMeshes[index].clone(this,this._sourceMesh);
			}
		}
	}
	,_generatePointsArray: function() {
		return this._sourceMesh._generatePointsArray();
	}
	,clone: function(name,newParent,doNotCloneChildren) {
		if(doNotCloneChildren == null) doNotCloneChildren = false;
		var result = this._sourceMesh.createInstance(name);
		this.refreshBoundingInfo();
		if(newParent != null) result.parent = newParent;
		if(!doNotCloneChildren) {
			var _g1 = 0;
			var _g = this._scene.meshes.length;
			while(_g1 < _g) {
				var index = _g1++;
				var mesh = this._scene.meshes[index];
				if(mesh.parent == this) mesh.clone(mesh.name,result);
			}
		}
		result.computeWorldMatrix(true);
		return result;
	}
	,dispose: function(doNotRecurse) {
		if(doNotRecurse == null) doNotRecurse = false;
		HxOverrides.remove(this._sourceMesh.instances,this);
		com_babylonhx_mesh_AbstractMesh.prototype.dispose.call(this,doNotRecurse);
	}
	,__class__: com_babylonhx_mesh_InstancedMesh
	,__properties__: $extend(com_babylonhx_mesh_AbstractMesh.prototype.__properties__,{get_sourceMesh:"get_sourceMesh"})
});
var com_babylonhx_mesh_LinesMesh = $hx_exports.BABYLON.LinesMesh = function(name,scene,parent,source,doNotCloneChildren) {
	if(doNotCloneChildren == null) doNotCloneChildren = false;
	this.gapSize = 0;
	this.dashSize = 0;
	this.alpha = 1;
	this.color = new com_babylonhx_math_Color3(1,1,1);
	com_babylonhx_mesh_Mesh.call(this,name,scene,parent,source,doNotCloneChildren);
	this._colorShader = new com_babylonhx_materials_ShaderMaterial("colorShader",scene,"color",{ attributes : ["position"], uniforms : ["worldViewProjection","color"], needAlphaBlending : true});
};
$hxClasses["com.babylonhx.mesh.LinesMesh"] = com_babylonhx_mesh_LinesMesh;
com_babylonhx_mesh_LinesMesh.__name__ = ["com","babylonhx","mesh","LinesMesh"];
com_babylonhx_mesh_LinesMesh.__super__ = com_babylonhx_mesh_Mesh;
com_babylonhx_mesh_LinesMesh.prototype = $extend(com_babylonhx_mesh_Mesh.prototype,{
	color: null
	,alpha: null
	,dashSize: null
	,gapSize: null
	,_colorShader: null
	,get_material: function() {
		return this._colorShader;
	}
	,get_isPickable: function() {
		return false;
	}
	,get_checkCollisions: function() {
		return false;
	}
	,_bind: function(subMesh,effect,fillMode) {
		var engine = this._scene._engine;
		var indexToBind = this._geometry.getIndexBuffer();
		engine.bindBuffers(this._geometry.getVertexBuffer("position").getBuffer(),indexToBind,[3],12,this._colorShader.getEffect());
		this._colorShader.setColor4("color",this.color.toColor4(this.alpha));
	}
	,_draw: function(subMesh,fillMode,instancesCount) {
		if(this._geometry == null || this._geometry.getVertexBuffers() == null || this._geometry.getIndexBuffer() == null) return;
		var engine = this._scene._engine;
		engine.draw(false,subMesh.indexStart,subMesh.indexCount);
	}
	,intersects: function(ray,fastCheck) {
		if(fastCheck == null) fastCheck = false;
		return null;
	}
	,dispose: function(doNotRecurse) {
		if(doNotRecurse == null) doNotRecurse = false;
		this._colorShader.dispose();
		com_babylonhx_mesh_Mesh.prototype.dispose.call(this,doNotRecurse);
	}
	,clone: function(name,newParent,doNotCloneChildren) {
		if(doNotCloneChildren == null) doNotCloneChildren = false;
		return new com_babylonhx_mesh_LinesMesh(name,this._scene,newParent,this,doNotCloneChildren);
	}
	,__class__: com_babylonhx_mesh_LinesMesh
});
var com_babylonhx_mesh_MeshBuilder = function() { };
$hxClasses["com.babylonhx.mesh.MeshBuilder"] = com_babylonhx_mesh_MeshBuilder;
com_babylonhx_mesh_MeshBuilder.__name__ = ["com","babylonhx","mesh","MeshBuilder"];
com_babylonhx_mesh_MeshBuilder.CreateBox = function(name,options,scene) {
	var box = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreateBox(options);
	if(scene._physicsEngine != null) {
		box.physicsDim = { };
		box.physicsDim.size = options;
	}
	vertexData.applyToMesh(box,options.updatable);
	return box;
};
com_babylonhx_mesh_MeshBuilder.CreateSphere = function(name,options,scene) {
	var sphere = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreateSphere(options);
	vertexData.applyToMesh(sphere,options.updatable);
	if(scene._physicsEngine != null) {
		sphere.physicsDim = { };
		sphere.physicsDim.diameter = options.diameterX / 2;
	}
	return sphere;
};
com_babylonhx_mesh_MeshBuilder.CreateIcoSphere = function(name,options,scene) {
	var sphere = new com_babylonhx_mesh_Mesh(name,scene);
	if(options.sideOrientation == null) options.sideOrientation = 0;
	if(options.updatable == null) options.updatable = false;
	var vertexData = com_babylonhx_mesh_VertexData.CreateIcoSphere(options);
	vertexData.applyToMesh(sphere,options.updatable);
	return sphere;
};
com_babylonhx_mesh_MeshBuilder.CreateDisc = function(name,options,scene) {
	var disc = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreateDisc(options);
	vertexData.applyToMesh(disc,options.updatable);
	return disc;
};
com_babylonhx_mesh_MeshBuilder.CreateRibbon = function(name,options,scene) {
	var pathArray = options.pathArray;
	var closeArray = options.closeArray;
	var closePath = options.closePath;
	var offset = options.offset;
	var updatable = options.updatable;
	var sideOrientation = options.sideOrientation;
	var ribbonInstance = options.instance;
	if(ribbonInstance != null) {
		var positionFunction = function(positions) {
			var minlg = pathArray[0].length;
			var i = 0;
			var ns;
			if(ribbonInstance._sideOrientation == 2) ns = 2; else ns = 1;
			var _g1 = 1;
			var _g = ns + 1;
			while(_g1 < _g) {
				var si = _g1++;
				var _g3 = 0;
				var _g2 = pathArray.length;
				while(_g3 < _g2) {
					var p = _g3++;
					var path = pathArray[p];
					var l = path.length;
					if(minlg < l) minlg = minlg; else minlg = l;
					var j = 0;
					while(j < minlg) {
						positions[i] = path[j].x;
						positions[i + 1] = path[j].y;
						positions[i + 2] = path[j].z;
						j++;
						i += 3;
					}
					if(ribbonInstance._closePath) {
						positions[i] = path[0].x;
						positions[i + 1] = path[0].y;
						positions[i + 2] = path[0].z;
						i += 3;
					}
				}
			}
		};
		var positions1 = ribbonInstance.getVerticesData("position");
		positionFunction(positions1);
		ribbonInstance.updateVerticesData("position",positions1,true,false);
		if(!ribbonInstance._areNormalsFrozen) {
			var indices = ribbonInstance.getIndices();
			var normals = ribbonInstance.getVerticesData("normal");
			com_babylonhx_mesh_VertexData.ComputeNormals(positions1,indices,normals);
			if(ribbonInstance._closePath) {
				var indexFirst = 0;
				var indexLast = 0;
				var _g11 = 0;
				var _g4 = pathArray.length;
				while(_g11 < _g4) {
					var p1 = _g11++;
					indexFirst = ribbonInstance._idx[p1] * 3;
					if(p1 + 1 < pathArray.length) indexLast = (ribbonInstance._idx[p1 + 1] - 1) * 3; else indexLast = normals.length - 3;
					normals[indexFirst] = (normals[indexFirst] + normals[indexLast]) * 0.5;
					normals[indexFirst + 1] = (normals[indexFirst + 1] + normals[indexLast + 1]) * 0.5;
					normals[indexFirst + 2] = (normals[indexFirst + 2] + normals[indexLast + 2]) * 0.5;
					normals[indexLast] = normals[indexFirst];
					normals[indexLast + 1] = normals[indexFirst + 1];
					normals[indexLast + 2] = normals[indexFirst + 2];
				}
			}
			ribbonInstance.updateVerticesData("normal",normals,true,false);
		}
		return ribbonInstance;
	} else {
		var ribbon = new com_babylonhx_mesh_Mesh(name,scene);
		ribbon._sideOrientation = sideOrientation;
		sideOrientation;
		var vertexData = com_babylonhx_mesh_VertexData.CreateRibbon({ pathArray : pathArray, closeArray : closeArray, closePath : closePath, offset : offset, sideOrientation : sideOrientation});
		if(closePath) ribbon._idx = vertexData._idx;
		ribbon._closePath = closePath;
		ribbon._closeArray = closeArray;
		vertexData.applyToMesh(ribbon,updatable);
		return ribbon;
	}
};
com_babylonhx_mesh_MeshBuilder.CreateCylinder = function(name,options,scene) {
	var cylinder = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreateCylinder(options);
	if(scene._physicsEngine != null) {
		cylinder.physicsDim = { };
		cylinder.physicsDim.height = options.height;
		if(options.diameterBottom > options.diameterTop) cylinder.physicsDim.diameter = options.diameterBottom; else cylinder.physicsDim.diameter = options.diameterTop;
	}
	vertexData.applyToMesh(cylinder,options.updatable);
	return cylinder;
};
com_babylonhx_mesh_MeshBuilder.CreateTorus = function(name,options,scene) {
	var torus = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreateTorus(options);
	vertexData.applyToMesh(torus,options.updatable);
	return torus;
};
com_babylonhx_mesh_MeshBuilder.CreateTorusKnot = function(name,options,scene) {
	var torusKnot = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreateTorusKnot(options);
	vertexData.applyToMesh(torusKnot,options.updatable);
	return torusKnot;
};
com_babylonhx_mesh_MeshBuilder.CreateLines = function(name,options,scene) {
	var linesInstance = options.instance;
	var points = options.points;
	if(linesInstance != null) {
		var positionFunction = function(positions) {
			var i = 0;
			var _g1 = 0;
			var _g = points.length;
			while(_g1 < _g) {
				var p = _g1++;
				positions[i] = points[p].x;
				positions[i + 1] = points[p].y;
				positions[i + 2] = points[p].z;
				i += 3;
			}
		};
		linesInstance.updateMeshPositions(positionFunction,false);
		return linesInstance;
	}
	var lines = new com_babylonhx_mesh_LinesMesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreateLines(options);
	vertexData.applyToMesh(lines,options.updatable);
	return lines;
};
com_babylonhx_mesh_MeshBuilder.CreateDashedLines = function(name,options,scene) {
	var points = options.points;
	var linesInstance = options.instance;
	var gapSize = options.gapSize;
	var dashNb = options.dashNb;
	var dashSize = options.dashSize;
	if(linesInstance != null) {
		var positionFunction = function(positions) {
			var curvect = new com_babylonhx_math_Vector3(0,0,0);
			var nbSeg = positions.length / 6;
			var lg = 0;
			var nb = 0;
			var shft = 0;
			var dashshft = 0;
			var curshft = 0;
			var p = 0;
			var i = 0;
			var j = 0;
			var _g1 = 0;
			var _g = points.length - 1;
			while(_g1 < _g) {
				var i1 = _g1++;
				points[i1 + 1].subtractToRef(points[i1],curvect);
				lg += Math.sqrt(curvect.x * curvect.x + curvect.y * curvect.y + curvect.z * curvect.z);
			}
			shft = lg / nbSeg;
			dashshft = linesInstance.dashSize * shft / (linesInstance.dashSize + linesInstance.gapSize);
			while(i < points.length - 1) {
				points[i + 1].subtractToRef(points[i],curvect);
				nb = Math.floor(Math.sqrt(curvect.x * curvect.x + curvect.y * curvect.y + curvect.z * curvect.z) / shft);
				curvect.normalize();
				j = 0;
				while(j < nb && p < positions.length) {
					curshft = shft * j;
					positions[p] = points[i].x + curshft * curvect.x;
					positions[p + 1] = points[i].y + curshft * curvect.y;
					positions[p + 2] = points[i].z + curshft * curvect.z;
					positions[p + 3] = points[i].x + (curshft + dashshft) * curvect.x;
					positions[p + 4] = points[i].y + (curshft + dashshft) * curvect.y;
					positions[p + 5] = points[i].z + (curshft + dashshft) * curvect.z;
					p += 6;
					j++;
				}
				++i;
			}
			while(p < positions.length) {
				positions[p] = points[i].x;
				positions[p + 1] = points[i].y;
				positions[p + 2] = points[i].z;
				p += 3;
			}
		};
		linesInstance.updateMeshPositions(positionFunction,false);
		return linesInstance;
	}
	var dashedLines = new com_babylonhx_mesh_LinesMesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreateDashedLines(options);
	vertexData.applyToMesh(dashedLines,options.updatable);
	dashedLines.dashSize = dashSize;
	dashedLines.gapSize = gapSize;
	return dashedLines;
};
com_babylonhx_mesh_MeshBuilder.ExtrudeShape = function(name,options,scene) {
	var path = options.path;
	var shape = options.shape;
	var scale;
	if(options.scale != null) scale = options.scale; else scale = 1;
	var rotation;
	if(options.rotation != null) rotation = options.rotation; else rotation = 0;
	var cap;
	if(options.cap != null) cap = options.cap; else cap = 0;
	var updatable = options.updatable;
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	var extrudedInstance = options.extrudedInstance;
	return com_babylonhx_mesh_MeshBuilder._ExtrudeShapeGeneric(name,shape,path,scale,rotation,null,null,false,false,cap,false,scene,updatable,sideOrientation,extrudedInstance);
};
com_babylonhx_mesh_MeshBuilder.ExtrudeShapeCustom = function(name,options,scene) {
	var path = options.path;
	var shape = options.shape;
	var scaleFunction;
	if(options.scaleFunction != null) scaleFunction = options.scaleFunction; else scaleFunction = function(dummy1,dummy2) {
		if(dummy2 == null) dummy2 = 0;
		if(dummy1 == null) dummy1 = 0;
		return 1;
	};
	var rotationFunction;
	if(options.rotationFunction != null) rotationFunction = options.rotationFunction; else rotationFunction = function(dummy11,dummy21) {
		if(dummy21 == null) dummy21 = 0;
		if(dummy11 == null) dummy11 = 0;
		return 0;
	};
	var ribbonCloseArray;
	if(options.ribbonCloseArray != null) ribbonCloseArray = options.ribbonCloseArray; else ribbonCloseArray = false;
	var ribbonClosePath;
	if(options.ribbonClosePath != null) ribbonClosePath = options.ribbonClosePath; else ribbonClosePath = false;
	var cap;
	if(options.cap != null) cap = options.cap; else cap = 0;
	var updatable = options.updatable;
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	var extrudedInstance = options.extrudedInstance;
	return com_babylonhx_mesh_MeshBuilder._ExtrudeShapeGeneric(name,shape,path,null,null,scaleFunction,rotationFunction,ribbonCloseArray,ribbonClosePath,cap,true,scene,updatable,sideOrientation,extrudedInstance);
};
com_babylonhx_mesh_MeshBuilder.CreateLathe = function(name,options,scene) {
	var arc;
	if(options.arc != null) arc = options.arc; else arc = 1.0;
	if(arc <= 0) arc = 1.0;
	var closed;
	if(options.closed == null) closed = true; else closed = options.closed;
	var shape = options.shape;
	var radius;
	if(options.radius != null) radius = options.radius; else radius = 1;
	var tessellation;
	if(options.tessellation != null) tessellation = options.tessellation; else tessellation = 64;
	var updatable = options.updatable;
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	var pi2 = Math.PI * 2;
	var shapeLathe = [];
	var i = 0;
	while(shape[i].x == 0) i++;
	var pt = shape[i];
	var _g1 = 0;
	var _g = shape.length;
	while(_g1 < _g) {
		var i1 = _g1++;
		shapeLathe.push(shape[i1].subtract(pt));
	}
	var step = pi2 / tessellation;
	var rotated = null;
	var path = [];
	var _g2 = 0;
	while(_g2 < tessellation) {
		var i2 = _g2++;
		rotated = new com_babylonhx_math_Vector3(Math.cos(i2 * step) * radius,0,Math.sin(i2 * step) * radius);
		path.push(rotated);
	}
	if(closed) path.push(path[0]);
	var scaleFunction = function(dummy1,dummy2) {
		if(dummy2 == null) dummy2 = 0;
		if(dummy1 == null) dummy1 = 0;
		return 1;
	};
	var rotateFunction = function(dummy11,dummy21) {
		if(dummy21 == null) dummy21 = 0;
		if(dummy11 == null) dummy11 = 0;
		return 0;
	};
	var lathe = com_babylonhx_mesh_MeshBuilder.ExtrudeShapeCustom(name,options,scene);
	return lathe;
};
com_babylonhx_mesh_MeshBuilder.CreatePlane = function(name,options,scene) {
	var plane = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreatePlane(options);
	vertexData.applyToMesh(plane,options.updatable);
	return plane;
};
com_babylonhx_mesh_MeshBuilder.CreateGround = function(name,options,scene) {
	var ground = new com_babylonhx_mesh_GroundMesh(name,scene);
	ground._setReady(false);
	if(options.subdivision != null) ground._subdivisions = options.subdivision; else ground._subdivisions = 1;
	var vertexData = com_babylonhx_mesh_VertexData.CreateGround(options);
	vertexData.applyToMesh(ground,options.updatable);
	ground._setReady(true);
	return ground;
};
com_babylonhx_mesh_MeshBuilder.CreateTiledGround = function(name,options,scene) {
	var tiledGround = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreateTiledGround(options);
	vertexData.applyToMesh(tiledGround,options.updatable);
	return tiledGround;
};
com_babylonhx_mesh_MeshBuilder.CreateGroundFromHeightMap = function(name,url,options,scene) {
	var width;
	if(options.width != null) width = options.width; else width = 10;
	var height;
	if(options.height != null) height = options.height; else height = 10;
	var subdivisions;
	if(options.subdivisions != null) subdivisions = options.subdivisions; else subdivisions = 1;
	var minHeight;
	if(options.minHeight != null) minHeight = options.minHeight; else minHeight = 0;
	var maxHeight;
	if(options.maxHeight != null) maxHeight = options.maxHeight; else maxHeight = 10;
	var updatable = options.updatable;
	var onReady = options.onReady;
	var ground = new com_babylonhx_mesh_GroundMesh(name,scene);
	ground._subdivisions = subdivisions;
	ground._setReady(false);
	var onload = function(img) {
		options.buffer = img.data;
		options.bufferWidth = img.width;
		options.bufferHeight = img.height;
		var vertexData = com_babylonhx_mesh_VertexData.CreateGroundFromHeightMap(options);
		vertexData.applyToMesh(ground,updatable);
		ground._setReady(true);
		if(onReady != null) onReady(ground);
	};
	com_babylonhx_tools_Tools.LoadImage(url,onload);
	return ground;
};
com_babylonhx_mesh_MeshBuilder.CreateTube = function(name,options,scene) {
	var path = options.path;
	var radius;
	if(options.radius != null) radius = options.radius; else radius = 1;
	var tessellation;
	if(options.tessellation != null) tessellation = options.tessellation; else tessellation = 64;
	var radiusFunction = options.radiusFunction;
	var cap;
	if(options.cap != null) cap = options.cap; else cap = 0;
	var updatable = options.updatable;
	var sideOrientation;
	if(options.sideOrientation != null) sideOrientation = options.sideOrientation; else sideOrientation = 0;
	var tubeInstance = options.instance;
	var tubePathArray = function(path1,path3D,circlePaths,radius1,tessellation1,radiusFunction1,cap1) {
		var tangents = path3D.getTangents();
		var normals = path3D.getNormals();
		var distances = path3D.getDistances();
		var pi2 = Math.PI * 2;
		var step = pi2 / tessellation1;
		var returnRadius = function(i,distance) {
			return radius1;
		};
		var radiusFunctionFinal;
		if(radiusFunction1 != null) radiusFunctionFinal = radiusFunction1; else radiusFunctionFinal = returnRadius;
		var circlePath = [];
		var rad = 0;
		var normal = new com_babylonhx_math_Vector3(0,0,0);
		var rotated = new com_babylonhx_math_Vector3(0,0,0);
		var rotationMatrix;
		var index = 0;
		var _g1 = 0;
		var _g2 = path1.length;
		while(_g1 < _g2) {
			var i2 = _g1++;
			rad = radiusFunctionFinal(i2,distances[i2]);
			circlePath = [];
			normal = normals[i2];
			var ang = 0.0;
			var _g21 = 0;
			while(_g21 < tessellation1) {
				var t = _g21++;
				rotationMatrix = com_babylonhx_math_Matrix.RotationAxis(tangents[i2],step * t);
				rotated = com_babylonhx_math_Vector3.TransformCoordinates(normal,rotationMatrix).scaleInPlace(rad).add(path1[i2]);
				circlePath.push(rotated);
			}
			circlePath.push(circlePath[0]);
			circlePaths[index] = circlePath;
			index++;
		}
		var capPath = function(nbPoints,pathIndex) {
			var pointCap = [];
			var _g = 0;
			while(_g < nbPoints) {
				var i1 = _g++;
				pointCap.push(path1[pathIndex]);
			}
			return pointCap;
		};
		switch(cap1) {
		case 0:
			break;
		case 1:
			circlePaths.unshift(capPath(tessellation1 + 1,0));
			break;
		case 2:
			circlePaths.push(capPath(tessellation1 + 1,path1.length - 1));
			break;
		case 3:
			circlePaths.unshift(capPath(tessellation1 + 1,0));
			circlePaths.push(capPath(tessellation1 + 1,path1.length - 1));
			break;
		default:
		}
		return circlePaths;
	};
	if(tubeInstance != null) {
		var path3D2 = tubeInstance.path3D.update(path);
		var pathArray1 = tubePathArray(path,path3D2,tubeInstance.pathArray,radius,tubeInstance.tessellation,radiusFunction,tubeInstance.cap);
		tubeInstance = com_babylonhx_mesh_MeshBuilder.CreateRibbon(null,{ pathArray : pathArray1, instance : tubeInstance},scene);
		return tubeInstance;
	}
	var path3D1 = new com_babylonhx_math_Path3D(path);
	var newPathArray = [];
	if(cap < 0 || cap > 3) cap = 0; else cap = cap;
	var pathArray = tubePathArray(path,path3D1,newPathArray,radius,tessellation,radiusFunction,cap);
	var tube = com_babylonhx_mesh_MeshBuilder.CreateRibbon(name,{ pathArray : pathArray, closeArray : false, closePath : true, offset : 0, updatable : updatable, sideOrientation : sideOrientation},scene);
	tube.pathArray = pathArray;
	tube.path3D = path3D1;
	tube.tessellation = tessellation;
	tube.cap = cap;
	return tube;
};
com_babylonhx_mesh_MeshBuilder.CreatePolyhedron = function(name,options,scene) {
	var polyhedron = new com_babylonhx_mesh_Mesh(name,scene);
	var vertexData = com_babylonhx_mesh_VertexData.CreatePolyhedron(options);
	vertexData.applyToMesh(polyhedron,options.updatable);
	return polyhedron;
};
com_babylonhx_mesh_MeshBuilder.CreateDecal = function(name,sourceMesh,options) {
	var position;
	if(options.position != null) position = options.position; else position = new com_babylonhx_math_Vector3(0,0,0);
	var normal = options.normal;
	var size;
	if(options.size != null) size = options.size; else size = new com_babylonhx_math_Vector3(1,1,1);
	var angle = options.angle;
	com_babylonhx_mesh_MeshBuilder.CreateDecal_indices = sourceMesh.getIndices();
	com_babylonhx_mesh_MeshBuilder.CreateDecal_positions = sourceMesh.getVerticesData("position");
	com_babylonhx_mesh_MeshBuilder.CreateDecal_normals = sourceMesh.getVerticesData("normal");
	if(normal == null) {
		var camera = sourceMesh._scene.activeCamera;
		com_babylonhx_mesh_MeshBuilder.CreateDecal_cameraWorldTarget = com_babylonhx_math_Vector3.TransformCoordinates(com_babylonhx_mesh_MeshBuilder.CreateDecal_target,camera.getWorldMatrix());
		normal = camera.get_globalPosition().subtract(com_babylonhx_mesh_MeshBuilder.CreateDecal_cameraWorldTarget);
	}
	var yaw = -Math.atan2(normal.z,normal.x) - Math.PI / 2;
	var len = Math.sqrt(normal.x * normal.x + normal.z * normal.z);
	var pitch = Math.atan2(normal.y,len);
	com_babylonhx_mesh_MeshBuilder.decalWorldMatrix = com_babylonhx_math_Matrix.RotationYawPitchRoll(yaw,pitch,angle).multiply(com_babylonhx_math_Matrix.Translation(position.x,position.y,position.z));
	com_babylonhx_mesh_MeshBuilder.inverseDecalWorldMatrix = com_babylonhx_math_Matrix.Invert(com_babylonhx_mesh_MeshBuilder.decalWorldMatrix);
	com_babylonhx_mesh_MeshBuilder.CreateDecal_meshWorldMatrix = sourceMesh.getWorldMatrix();
	com_babylonhx_mesh_MeshBuilder.CreateDecal_transformMatrix = com_babylonhx_mesh_MeshBuilder.CreateDecal_meshWorldMatrix.multiply(com_babylonhx_mesh_MeshBuilder.inverseDecalWorldMatrix);
	com_babylonhx_mesh_MeshBuilder.CreateDecal_vertexData.indices = [];
	com_babylonhx_mesh_MeshBuilder.CreateDecal_vertexData.positions = [];
	com_babylonhx_mesh_MeshBuilder.CreateDecal_vertexData.normals = [];
	com_babylonhx_mesh_MeshBuilder.CreateDecal_vertexData.uvs = [];
	var currentCreateDecal_vertexDataIndex = 0;
	var extractDecalVector3 = function(indexId) {
		var vertexId = com_babylonhx_mesh_MeshBuilder.CreateDecal_indices[indexId];
		var result = new com_babylonhx_math_PositionNormalVertex();
		result.position = new com_babylonhx_math_Vector3(com_babylonhx_mesh_MeshBuilder.CreateDecal_positions[vertexId * 3],com_babylonhx_mesh_MeshBuilder.CreateDecal_positions[vertexId * 3 + 1],com_babylonhx_mesh_MeshBuilder.CreateDecal_positions[vertexId * 3 + 2]);
		result.position = com_babylonhx_math_Vector3.TransformCoordinates(result.position,com_babylonhx_mesh_MeshBuilder.CreateDecal_transformMatrix);
		result.normal = new com_babylonhx_math_Vector3(com_babylonhx_mesh_MeshBuilder.CreateDecal_normals[vertexId * 3],com_babylonhx_mesh_MeshBuilder.CreateDecal_normals[vertexId * 3 + 1],com_babylonhx_mesh_MeshBuilder.CreateDecal_normals[vertexId * 3 + 2]);
		return result;
	};
	var clip = function(vertices,axis) {
		if(vertices.length == 0) return vertices;
		var clipSize = 0.5 * Math.abs(size.x * axis.x + size.y * axis.y + size.z * axis.z);
		var clipVertices = function(v0,v1) {
			var clipFactor = com_babylonhx_math_Vector3.GetClipFactor(v0.position,v1.position,axis,clipSize);
			return new com_babylonhx_math_PositionNormalVertex(com_babylonhx_math_Vector3.Lerp(v0.position,v1.position,clipFactor),com_babylonhx_math_Vector3.Lerp(v0.normal,v1.normal,clipFactor));
		};
		var result1 = [];
		var v1Out = false;
		var v2Out = false;
		var v3Out = false;
		var total = 0;
		var nV1 = null;
		var nV2 = null;
		var nV3 = null;
		var nV4 = null;
		var d1 = 0.0;
		var d2 = 0.0;
		var d3 = 0.0;
		var index = 0;
		while(index < vertices.length) {
			d1 = com_babylonhx_math_Vector3.Dot(vertices[index].position,axis) - clipSize;
			d2 = com_babylonhx_math_Vector3.Dot(vertices[index + 1].position,axis) - clipSize;
			d3 = com_babylonhx_math_Vector3.Dot(vertices[index + 2].position,axis) - clipSize;
			v1Out = d1 > 0;
			v2Out = d2 > 0;
			v3Out = d3 > 0;
			total = (v1Out?1:0) + (v2Out?1:0) + (v3Out?1:0);
			switch(total) {
			case 0:
				result1.push(vertices[index]);
				result1.push(vertices[index + 1]);
				result1.push(vertices[index + 2]);
				break;
			case 1:
				if(v1Out) {
					nV1 = vertices[index + 1];
					nV2 = vertices[index + 2];
					nV3 = clipVertices(vertices[index],nV1);
					nV4 = clipVertices(vertices[index],nV2);
				}
				if(v2Out) {
					nV1 = vertices[index];
					nV2 = vertices[index + 2];
					nV3 = clipVertices(vertices[index + 1],nV1);
					nV4 = clipVertices(vertices[index + 1],nV2);
					result1.push(nV3);
					result1.push(nV2.clone());
					result1.push(nV1.clone());
					result1.push(nV2.clone());
					result1.push(nV3.clone());
					result1.push(nV4);
				} else {
					if(v3Out) {
						nV1 = vertices[index];
						nV2 = vertices[index + 1];
						nV3 = clipVertices(vertices[index + 2],nV1);
						nV4 = clipVertices(vertices[index + 2],nV2);
					}
					result1.push(nV1.clone());
					result1.push(nV2.clone());
					result1.push(nV3);
					result1.push(nV4);
					result1.push(nV3.clone());
					result1.push(nV2.clone());
				}
				break;
			case 2:
				if(!v1Out) {
					nV1 = vertices[index].clone();
					nV2 = clipVertices(nV1,vertices[index + 1]);
					nV3 = clipVertices(nV1,vertices[index + 2]);
					result1.push(nV1);
					result1.push(nV2);
					result1.push(nV3);
				}
				if(!v2Out) {
					nV1 = vertices[index + 1].clone();
					nV2 = clipVertices(nV1,vertices[index + 2]);
					nV3 = clipVertices(nV1,vertices[index]);
					result1.push(nV1);
					result1.push(nV2);
					result1.push(nV3);
				}
				if(!v3Out) {
					nV1 = vertices[index + 2].clone();
					nV2 = clipVertices(nV1,vertices[index]);
					nV3 = clipVertices(nV1,vertices[index + 1]);
					result1.push(nV1);
					result1.push(nV2);
					result1.push(nV3);
				}
				break;
			case 3:
				break;
			}
			index += 3;
		}
		return result1;
	};
	var faceVertices = [];
	var index1 = 0;
	while(index1 < com_babylonhx_mesh_MeshBuilder.CreateDecal_indices.length) {
		faceVertices = [];
		faceVertices.push(extractDecalVector3(index1));
		faceVertices.push(extractDecalVector3(index1 + 1));
		faceVertices.push(extractDecalVector3(index1 + 2));
		faceVertices = clip(faceVertices,new com_babylonhx_math_Vector3(1,0,0));
		faceVertices = clip(faceVertices,new com_babylonhx_math_Vector3(-1,0,0));
		faceVertices = clip(faceVertices,new com_babylonhx_math_Vector3(0,1,0));
		faceVertices = clip(faceVertices,new com_babylonhx_math_Vector3(0,-1,0));
		faceVertices = clip(faceVertices,new com_babylonhx_math_Vector3(0,0,1));
		faceVertices = clip(faceVertices,new com_babylonhx_math_Vector3(0,0,-1));
		if(faceVertices.length == 0) {
			index1 += 3;
			continue;
		}
		var localRotationMatrix = com_babylonhx_math_Matrix.RotationYawPitchRoll(yaw,pitch,angle);
		var vertex = null;
		var _g1 = 0;
		var _g = faceVertices.length;
		while(_g1 < _g) {
			var vIndex = _g1++;
			vertex = faceVertices[vIndex];
			com_babylonhx_mesh_MeshBuilder.CreateDecal_vertexData.indices.push(currentCreateDecal_vertexDataIndex);
			vertex.position.toArray(com_babylonhx_mesh_MeshBuilder.CreateDecal_vertexData.positions,currentCreateDecal_vertexDataIndex * 3);
			vertex.normal.toArray(com_babylonhx_mesh_MeshBuilder.CreateDecal_vertexData.normals,currentCreateDecal_vertexDataIndex * 3);
			com_babylonhx_mesh_MeshBuilder.CreateDecal_vertexData.uvs.push(0.5 + vertex.position.x / size.x);
			com_babylonhx_mesh_MeshBuilder.CreateDecal_vertexData.uvs.push(0.5 + vertex.position.y / size.y);
			currentCreateDecal_vertexDataIndex++;
		}
		index1 += 3;
	}
	var decal = new com_babylonhx_mesh_Mesh(name,sourceMesh._scene);
	com_babylonhx_mesh_MeshBuilder.CreateDecal_vertexData.applyToMesh(decal);
	decal.position = new com_babylonhx_math_Vector3(position.x,position.y,position.z);
	decal.rotation = new com_babylonhx_math_Vector3(pitch,yaw,angle);
	return decal;
};
com_babylonhx_mesh_MeshBuilder._ExtrudeShapeGeneric = function(name,shape,curve,scale,rotation,scaleFunction,rotateFunction,rbCA,rbCP,cap,custom,scene,updtbl,side,instance) {
	var extrusionPathArray = function(shape1,curve1,path3D,shapePaths,scale1,rotation1,scaleFunction1,rotateFunction1,cap1,custom1) {
		if(custom1 == null) custom1 = false;
		var tangents = path3D.getTangents();
		var normals = path3D.getNormals();
		var binormals = path3D.getBinormals();
		var distances = path3D.getDistances();
		var angle = 0;
		var returnScale = function(i,distance) {
			return scale1;
		};
		var returnRotation = function(i1,distance1) {
			return rotation1;
		};
		var rotate;
		if(rotateFunction1 != null) rotate = rotateFunction1; else rotate = returnRotation;
		var scl;
		if(scaleFunction1 != null) scl = scaleFunction1; else scl = returnScale;
		var index = 0;
		var _g12 = 0;
		var _g3 = curve1.length;
		while(_g12 < _g3) {
			var i4 = _g12++;
			var shapePath1 = [];
			var angleStep = rotate(i4,distances[i4]);
			var scaleRatio = scl(i4,distances[i4]);
			var _g31 = 0;
			var _g21 = shape1.length;
			while(_g31 < _g21) {
				var p = _g31++;
				var rotationMatrix = com_babylonhx_math_Matrix.RotationAxis(tangents[i4],angle);
				var planed = tangents[i4].scale(shape1[p].z).add(normals[i4].scale(shape1[p].x)).add(binormals[i4].scale(shape1[p].y));
				var rotated = com_babylonhx_math_Vector3.TransformCoordinates(planed,rotationMatrix).scaleInPlace(scaleRatio).add(curve1[i4]);
				shapePath1.push(rotated);
			}
			shapePaths[index] = shapePath1;
			angle += angleStep;
			index++;
		}
		var capPath = function(shapePath) {
			var pointCap = [];
			var barycenter = new com_babylonhx_math_Vector3(0,0,0);
			var _g1 = 0;
			var _g = shapePath.length;
			while(_g1 < _g) {
				var i2 = _g1++;
				barycenter.addInPlace(shapePath[i2]);
			}
			barycenter.scaleInPlace(1 / shapePath.length);
			var _g11 = 0;
			var _g2 = shapePath.length;
			while(_g11 < _g2) {
				var i3 = _g11++;
				pointCap.push(barycenter);
			}
			return pointCap;
		};
		switch(cap1) {
		case 0:
			break;
		case 1:
			shapePaths.unshift(capPath(shapePaths[0]));
			break;
		case 2:
			shapePaths.push(capPath(shapePaths[shapePaths.length - 1]));
			break;
		case 3:
			shapePaths.unshift(capPath(shapePaths[0]));
			shapePaths.push(capPath(shapePaths[shapePaths.length - 1]));
			break;
		default:
		}
		return shapePaths;
	};
	if(instance != null) {
		var path3D2 = instance.path3D.update(curve);
		var pathArray1 = extrusionPathArray(shape,curve,instance.path3D,instance.pathArray,scale,rotation,scaleFunction,rotateFunction,instance.cap,custom);
		instance = com_babylonhx_mesh_Mesh.CreateRibbon(null,pathArray1,false,false,0,null,false,0,instance);
		return instance;
	}
	var path3D1 = new com_babylonhx_math_Path3D(curve);
	var newShapePaths = [];
	if(cap < 0 || cap > 3) cap = 0; else cap = cap;
	var pathArray = extrusionPathArray(shape,curve,path3D1,newShapePaths,scale,rotation,scaleFunction,rotateFunction,cap,custom);
	var extrudedGeneric = com_babylonhx_mesh_Mesh.CreateRibbon(name,pathArray,rbCA,rbCP,0,scene,updtbl,side);
	extrudedGeneric.pathArray = pathArray;
	extrudedGeneric.path3D = path3D1;
	extrudedGeneric.cap = cap;
	return extrudedGeneric;
};
var com_babylonhx_mesh_MeshLODLevel = $hx_exports.BABYLON.MeshLODLevel = function(distance,mesh) {
	this.distance = distance;
	this.mesh = mesh;
};
$hxClasses["com.babylonhx.mesh.MeshLODLevel"] = com_babylonhx_mesh_MeshLODLevel;
com_babylonhx_mesh_MeshLODLevel.__name__ = ["com","babylonhx","mesh","MeshLODLevel"];
com_babylonhx_mesh_MeshLODLevel.prototype = {
	mesh: null
	,distance: null
	,__class__: com_babylonhx_mesh_MeshLODLevel
};
var com_babylonhx_mesh_VertexBuffer = $hx_exports.BABYLON.VertexBuffer = function(engine,data,kind,updatable,postponeInternalCreation,stride) {
	if(postponeInternalCreation == null) postponeInternalCreation = false;
	this._engine = engine;
	this._updatable = updatable;
	this._data = data;
	if(!postponeInternalCreation) this.create();
	this._kind = kind;
	if(stride != null) {
		this._strideSize = stride;
		return;
	}
	switch(kind) {
	case "position":
		this._strideSize = 3;
		break;
	case "normal":
		this._strideSize = 3;
		break;
	case "uv":case "uv2":case "uv3":case "uv4":case "uv5":case "uv6":
		this._strideSize = 2;
		break;
	case "color":
		this._strideSize = 4;
		break;
	case "matricesIndices":case "matricesIndicesExtra":
		this._strideSize = 4;
		break;
	case "matricesWeights":case "matricesWeightsExtra":
		this._strideSize = 4;
		break;
	}
};
$hxClasses["com.babylonhx.mesh.VertexBuffer"] = com_babylonhx_mesh_VertexBuffer;
com_babylonhx_mesh_VertexBuffer.__name__ = ["com","babylonhx","mesh","VertexBuffer"];
com_babylonhx_mesh_VertexBuffer.prototype = {
	_mesh: null
	,_engine: null
	,_buffer: null
	,_data: null
	,_updatable: null
	,_kind: null
	,_strideSize: null
	,isUpdatable: function() {
		return this._updatable;
	}
	,getData: function() {
		return this._data;
	}
	,getBuffer: function() {
		return this._buffer;
	}
	,getStrideSize: function() {
		return this._strideSize;
	}
	,create: function(data) {
		if(data == null && this._buffer != null) return;
		if(data != null) data = data; else data = this._data;
		if(this._buffer == null) {
			if(this._updatable) this._buffer = this._engine.createDynamicVertexBuffer(data.length * 4); else this._buffer = this._engine.createVertexBuffer(data);
		}
		if(this._updatable) {
			this._engine.updateDynamicVertexBuffer(this._buffer,data,null);
			this._data = data;
		}
	}
	,update: function(data) {
		this.create(data);
	}
	,updateDirectly: function(data,offset) {
		if(this._buffer == null) return;
		if(this._updatable) {
			this._engine.updateDynamicVertexBuffer(this._buffer,data,offset);
			this._data = null;
		}
	}
	,dispose: function() {
		if(this._buffer != null) {
			if(this._engine._releaseBuffer(this._buffer)) this._buffer = null;
		}
	}
	,__class__: com_babylonhx_mesh_VertexBuffer
};
var com_babylonhx_mesh_WebGLBuffer = $hx_exports.BABYLON.WebGLBuffer = function(buffer) {
	this.is32Bits = false;
	this.capacity = 0;
	this.buffer = buffer;
	this.references = 1;
};
$hxClasses["com.babylonhx.mesh.WebGLBuffer"] = com_babylonhx_mesh_WebGLBuffer;
com_babylonhx_mesh_WebGLBuffer.__name__ = ["com","babylonhx","mesh","WebGLBuffer"];
com_babylonhx_mesh_WebGLBuffer.prototype = {
	buffer: null
	,references: null
	,capacity: null
	,is32Bits: null
	,__class__: com_babylonhx_mesh_WebGLBuffer
};
var com_babylonhx_mesh__$InstancesBatch = $hx_exports.BABYLON._InstancesBatch = function() {
	this.renderSelf = [];
	this.visibleInstances = [];
	this.mustReturn = false;
	this.mustReturn = false;
	this.visibleInstances = [];
	this.renderSelf = [];
};
$hxClasses["com.babylonhx.mesh._InstancesBatch"] = com_babylonhx_mesh__$InstancesBatch;
com_babylonhx_mesh__$InstancesBatch.__name__ = ["com","babylonhx","mesh","_InstancesBatch"];
com_babylonhx_mesh__$InstancesBatch.prototype = {
	mustReturn: null
	,visibleInstances: null
	,renderSelf: null
	,__class__: com_babylonhx_mesh__$InstancesBatch
};
var com_babylonhx_mesh__$VisibleInstances = $hx_exports.BABYLON._VisibleInstances = function(defaultRenderId,selfDefaultRenderId) {
	this.map = new haxe_ds_IntMap();
	this.defaultRenderId = defaultRenderId;
	this.selfDefaultRenderId = selfDefaultRenderId;
};
$hxClasses["com.babylonhx.mesh._VisibleInstances"] = com_babylonhx_mesh__$VisibleInstances;
com_babylonhx_mesh__$VisibleInstances.__name__ = ["com","babylonhx","mesh","_VisibleInstances"];
com_babylonhx_mesh__$VisibleInstances.prototype = {
	map: null
	,defaultRenderId: null
	,selfDefaultRenderId: null
	,__class__: com_babylonhx_mesh__$VisibleInstances
};
var com_babylonhx_mesh_simplification_DecimationTriangle = $hx_exports.BABYLON.DecimationTriangle = function(vertices) {
	this.error = [];
	this.deleted = false;
	this.isDirty = false;
	this.borderFactor = 0;
	this.vertices = vertices;
	this.deletePending = false;
};
$hxClasses["com.babylonhx.mesh.simplification.DecimationTriangle"] = com_babylonhx_mesh_simplification_DecimationTriangle;
com_babylonhx_mesh_simplification_DecimationTriangle.__name__ = ["com","babylonhx","mesh","simplification","DecimationTriangle"];
com_babylonhx_mesh_simplification_DecimationTriangle.prototype = {
	vertices: null
	,normal: null
	,error: null
	,deleted: null
	,isDirty: null
	,borderFactor: null
	,deletePending: null
	,originalOffset: null
	,__class__: com_babylonhx_mesh_simplification_DecimationTriangle
};
var com_babylonhx_mesh_simplification_DecimationVertex = $hx_exports.BABYLON.DecimationVertex = function(position,id) {
	this.id = id;
	this.position = position;
	this.isBorder = true;
	this.q = new com_babylonhx_mesh_simplification_QuadraticMatrix();
	this.triangleCount = 0;
	this.triangleStart = 0;
	this.originalOffsets = [];
};
$hxClasses["com.babylonhx.mesh.simplification.DecimationVertex"] = com_babylonhx_mesh_simplification_DecimationVertex;
com_babylonhx_mesh_simplification_DecimationVertex.__name__ = ["com","babylonhx","mesh","simplification","DecimationVertex"];
com_babylonhx_mesh_simplification_DecimationVertex.prototype = {
	id: null
	,position: null
	,q: null
	,isBorder: null
	,triangleStart: null
	,triangleCount: null
	,originalOffsets: null
	,updatePosition: function(newPosition) {
		this.position.copyFrom(newPosition);
	}
	,__class__: com_babylonhx_mesh_simplification_DecimationVertex
};
var com_babylonhx_mesh_simplification_ISimplificationSettings = $hx_exports.BABYLON.ISimplificationSettings = function() { };
$hxClasses["com.babylonhx.mesh.simplification.ISimplificationSettings"] = com_babylonhx_mesh_simplification_ISimplificationSettings;
com_babylonhx_mesh_simplification_ISimplificationSettings.__name__ = ["com","babylonhx","mesh","simplification","ISimplificationSettings"];
com_babylonhx_mesh_simplification_ISimplificationSettings.prototype = {
	quality: null
	,distance: null
	,optimizeMesh: null
	,__class__: com_babylonhx_mesh_simplification_ISimplificationSettings
};
var com_babylonhx_mesh_simplification_ISimplifier = $hx_exports.BABYLON.ISimplifier = function() { };
$hxClasses["com.babylonhx.mesh.simplification.ISimplifier"] = com_babylonhx_mesh_simplification_ISimplifier;
com_babylonhx_mesh_simplification_ISimplifier.__name__ = ["com","babylonhx","mesh","simplification","ISimplifier"];
com_babylonhx_mesh_simplification_ISimplifier.prototype = {
	simplify: null
	,__class__: com_babylonhx_mesh_simplification_ISimplifier
};
var com_babylonhx_mesh_simplification_QuadraticErrorSimplification = $hx_exports.BABYLON.QuadraticErrorSimplification = function(mesh) {
	this.syncIterations = 5000;
	this.initialised = false;
	this.aggressiveness = 7;
	this.decimationIterations = 100;
	this.boundingBoxEpsilon = 0.001;
};
$hxClasses["com.babylonhx.mesh.simplification.QuadraticErrorSimplification"] = com_babylonhx_mesh_simplification_QuadraticErrorSimplification;
com_babylonhx_mesh_simplification_QuadraticErrorSimplification.__name__ = ["com","babylonhx","mesh","simplification","QuadraticErrorSimplification"];
com_babylonhx_mesh_simplification_QuadraticErrorSimplification.__interfaces__ = [com_babylonhx_mesh_simplification_ISimplifier];
com_babylonhx_mesh_simplification_QuadraticErrorSimplification.prototype = {
	triangles: null
	,vertices: null
	,references: null
	,initialised: null
	,_reconstructedMesh: null
	,syncIterations: null
	,aggressiveness: null
	,decimationIterations: null
	,boundingBoxEpsilon: null
	,_mesh: null
	,simplify: function(settings,successCallback,errorCallback) {
		var _g = this;
		this.initDecimatedMesh();
		com_babylonhx_tools_AsyncLoop.Run(this._mesh.subMeshes.length,function(loop) {
			_g.initWithMesh(loop.index,function() {
				_g.runDecimation(settings,loop.index,function() {
					loop.executeNext();
				});
			});
		},function() {
			com_babylonhx_tools_Tools.delay(function() {
				successCallback(_g._reconstructedMesh);
			},0);
		});
	}
	,isTriangleOnBoundingBox: function(triangle) {
		var gCount = 0;
		var _g = 0;
		var _g1 = triangle.vertices;
		while(_g < _g1.length) {
			var vertex = _g1[_g];
			++_g;
			var count = 0;
			var vPos = vertex.position;
			var bbox = this._mesh.getBoundingInfo().boundingBox;
			if(bbox.maximum.x - vPos.x < this.boundingBoxEpsilon || vPos.x - bbox.minimum.x > this.boundingBoxEpsilon) ++count;
			if(bbox.maximum.y == vPos.y || vPos.y == bbox.minimum.y) ++count;
			if(bbox.maximum.z == vPos.z || vPos.z == bbox.minimum.z) ++count;
			if(count > 1) ++gCount;
		}
		if(gCount > 1) {
			haxe_Log.trace(triangle,{ fileName : "QuadraticErrorSimplification.hx", lineNumber : 82, className : "com.babylonhx.mesh.simplification.QuadraticErrorSimplification", methodName : "isTriangleOnBoundingBox"});
			haxe_Log.trace(gCount,{ fileName : "QuadraticErrorSimplification.hx", lineNumber : 83, className : "com.babylonhx.mesh.simplification.QuadraticErrorSimplification", methodName : "isTriangleOnBoundingBox"});
		}
		return gCount > 1;
	}
	,runDecimation: function(settings,submeshIndex,successCallback) {
		var _g = this;
		var targetCount = this.triangles.length * settings.quality | 0;
		var deletedTriangles = 0;
		var triangleCount = this.triangles.length;
		var iterationFunction = function(iteration,cback) {
			com_babylonhx_tools_Tools.delay(function() {
				if(iteration % 5 == 0) _g.updateMesh(iteration == 0);
				var _g22 = 0;
				var _g11 = _g.triangles.length;
				while(_g22 < _g11) {
					var i1 = _g22++;
					_g.triangles[i1].isDirty = false;
				}
				var threshold = 0.000000001 * Math.pow(iteration + 3,_g.aggressiveness);
				var trianglesIterator = function(i) {
					var tIdx = (_g.triangles.length / 2 + i) % _g.triangles.length | 0;
					var t = _g.triangles[tIdx];
					if(t == null) return;
					if(t.error[3] > threshold || t.deleted || t.isDirty) return;
					var _g1 = 0;
					while(_g1 < 3) {
						var j = _g1++;
						if(t.error[j] < threshold) {
							var deleted0 = [];
							var deleted1 = [];
							var v0 = t.vertices[j];
							var v1 = t.vertices[(j + 1) % 3];
							if(v0.isBorder != v1.isBorder) continue;
							var p = new com_babylonhx_math_Vector3(0,0,0);
							var n = new com_babylonhx_math_Vector3(0,0,0);
							var uv = new com_babylonhx_math_Vector2(0,0);
							var color = new com_babylonhx_math_Color4(0,0,0,1);
							_g.calculateError(v0,v1,p,n,uv,color);
							var delTr = [];
							if(_g.isFlipped(v0,v1,p,deleted0,t.borderFactor,delTr)) continue;
							if(_g.isFlipped(v1,v0,p,deleted1,t.borderFactor,delTr)) continue;
							if(HxOverrides.indexOf(deleted0,true,0) < 0 || HxOverrides.indexOf(deleted1,true,0) < 0) continue;
							var uniqueArray = [];
							var _g2 = 0;
							while(_g2 < delTr.length) {
								var deletedT = delTr[_g2];
								++_g2;
								if(HxOverrides.indexOf(uniqueArray,deletedT,0) == -1) {
									deletedT.deletePending = true;
									uniqueArray.push(deletedT);
								}
							}
							if(uniqueArray.length % 2 != 0) continue;
							v0.q = v1.q.add(v0.q);
							v0.updatePosition(p);
							var tStart = _g.references.length;
							deletedTriangles = _g.updateTriangles(v0,v0,deleted0,deletedTriangles);
							deletedTriangles = _g.updateTriangles(v0,v1,deleted1,deletedTriangles);
							var tCount = _g.references.length - tStart;
							if(tCount <= v0.triangleCount) {
								if(tCount > 0) {
									var _g21 = 0;
									while(_g21 < tCount) {
										var c = _g21++;
										_g.references[v0.triangleStart + c] = _g.references[tStart + c];
									}
								}
							} else v0.triangleStart = tStart;
							v0.triangleCount = tCount;
							break;
						}
					}
				};
				com_babylonhx_tools_AsyncLoop.SyncAsyncForLoop(_g.triangles.length,_g.syncIterations,trianglesIterator,cback,function() {
					return triangleCount - deletedTriangles <= targetCount;
				});
			},0);
		};
		com_babylonhx_tools_AsyncLoop.Run(this.decimationIterations,function(loop) {
			if(triangleCount - deletedTriangles <= targetCount) loop.breakLoop(); else iterationFunction(loop.index,$bind(loop,loop.executeNext));
		},function() {
			com_babylonhx_tools_Tools.delay(function() {
				_g.reconstructMesh(submeshIndex);
				successCallback();
			},0);
		});
	}
	,initWithMesh: function(submeshIndex,callbackFn,optimizeMesh) {
		if(optimizeMesh == null) optimizeMesh = false;
		var _g = this;
		this.vertices = [];
		this.triangles = [];
		var positionData = this._mesh.getVerticesData("position");
		var indices = this._mesh.getIndices();
		var submesh = this._mesh.subMeshes[submeshIndex];
		var findInVertices = function(positionToSearch) {
			if(optimizeMesh) {
				var _g2 = 0;
				var _g1 = _g.vertices.length;
				while(_g2 < _g1) {
					var ii = _g2++;
					if(_g.vertices[ii].position.equals(positionToSearch)) return _g.vertices[ii];
				}
			}
			return null;
		};
		var vertexReferences = [];
		var vertexInit = function(i) {
			var offset = i + submesh.verticesStart;
			var position = com_babylonhx_math_Vector3.FromArray(positionData,offset * 3);
			var vertex = findInVertices(position);
			if(vertex == null) vertex = new com_babylonhx_mesh_simplification_DecimationVertex(position,_g.vertices.length);
			vertex.originalOffsets.push(offset);
			if(vertex.id == _g.vertices.length) _g.vertices.push(vertex);
			vertexReferences.push(vertex.id);
		};
		var totalVertices = submesh.verticesCount;
		com_babylonhx_tools_AsyncLoop.SyncAsyncForLoop(totalVertices,this.syncIterations / 4 | 0,vertexInit,function() {
			var indicesInit = function(i1) {
				var offset1 = submesh.indexStart / 3 + i1;
				var pos = offset1 * 3 | 0;
				var i0 = indices[pos];
				var i11 = indices[pos + 1];
				var i2 = indices[pos + 2];
				var v0 = _g.vertices[vertexReferences[i0 - submesh.verticesStart]];
				var v1 = _g.vertices[vertexReferences[i11 - submesh.verticesStart]];
				var v2 = _g.vertices[vertexReferences[i2 - submesh.verticesStart]];
				var triangle = new com_babylonhx_mesh_simplification_DecimationTriangle([v0,v1,v2]);
				triangle.originalOffset = pos;
				_g.triangles.push(triangle);
			};
			com_babylonhx_tools_AsyncLoop.SyncAsyncForLoop(indices.length / 3 | 0,_g.syncIterations,indicesInit,function() {
				_g.init(callbackFn);
			});
		});
	}
	,init: function(callbackFn) {
		var _g = this;
		var triangleInit1 = function(i) {
			var t = _g.triangles[i];
			t.normal = com_babylonhx_math_Vector3.Cross(t.vertices[1].position.subtract(t.vertices[0].position),t.vertices[2].position.subtract(t.vertices[0].position)).normalize();
			var _g1 = 0;
			while(_g1 < 3) {
				var j = _g1++;
				t.vertices[j].q.addArrayInPlace(com_babylonhx_mesh_simplification_QuadraticMatrix.DataFromNumbers(t.normal.x,t.normal.y,t.normal.z,-com_babylonhx_math_Vector3.Dot(t.normal,t.vertices[0].position)));
			}
		};
		com_babylonhx_tools_AsyncLoop.SyncAsyncForLoop(this.triangles.length,this.syncIterations,triangleInit1,function() {
			var triangleInit2 = function(i1) {
				var t1 = _g.triangles[i1];
				var _g11 = 0;
				while(_g11 < 3) {
					var j1 = _g11++;
					t1.error[j1] = _g.calculateError(t1.vertices[j1],t1.vertices[(j1 + 1) % 3]);
				}
				t1.error[3] = Math.min(t1.error[0],t1.error[1]);
				t1.error[3] = Math.min(t1.error[3],t1.error[2]);
			};
			com_babylonhx_tools_AsyncLoop.SyncAsyncForLoop(_g.triangles.length,_g.syncIterations,triangleInit2,function() {
				_g.initialised = true;
				callbackFn();
			});
		});
	}
	,reconstructMesh: function(submeshIndex) {
		var newTriangles = [];
		var _g1 = 0;
		var _g = this.vertices.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.vertices[i].triangleCount = 0;
		}
		var t = null;
		var _g11 = 0;
		var _g2 = this.triangles.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			if(!this.triangles[i1].deleted) {
				t = this.triangles[i1];
				var _g21 = 0;
				while(_g21 < 3) {
					var j = _g21++;
					t.vertices[j].triangleCount = 1;
				}
				newTriangles.push(t);
			}
		}
		var newPositionData = this._reconstructedMesh.getVerticesData("position");
		if(newPositionData == null) newPositionData = [];
		var newNormalData = this._reconstructedMesh.getVerticesData("normal");
		if(newNormalData == null) newNormalData = [];
		var newUVsData = this._reconstructedMesh.getVerticesData("uv");
		if(newUVsData == null) newUVsData = [];
		var newColorsData = this._reconstructedMesh.getVerticesData("color");
		if(newColorsData == null) newColorsData = [];
		var normalData = this._mesh.getVerticesData("normal");
		var uvs = this._mesh.getVerticesData("uv");
		var colorsData = this._mesh.getVerticesData("color");
		var vertexCount = 0;
		var _g12 = 0;
		var _g3 = this.vertices.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var vertex = this.vertices[i2];
			vertex.id = vertexCount;
			if(vertex.triangleCount > 0) {
				var _g22 = 0;
				var _g31 = vertex.originalOffsets;
				while(_g22 < _g31.length) {
					var originalOffset = _g31[_g22];
					++_g22;
					newPositionData.push(vertex.position.x);
					newPositionData.push(vertex.position.y);
					newPositionData.push(vertex.position.z);
					newNormalData.push(normalData[originalOffset * 3]);
					newNormalData.push(normalData[originalOffset * 3 + 1]);
					newNormalData.push(normalData[originalOffset * 3 + 2]);
					if(uvs != null && uvs.length > 0) {
						newUVsData.push(uvs[originalOffset * 2]);
						newUVsData.push(uvs[originalOffset * 2 + 1]);
					} else if(colorsData != null && colorsData.length > 0) {
						newColorsData.push(colorsData[originalOffset * 4]);
						newColorsData.push(colorsData[originalOffset * 4 + 1]);
						newColorsData.push(colorsData[originalOffset * 4 + 2]);
						newColorsData.push(colorsData[originalOffset * 4 + 3]);
					}
					++vertexCount;
				}
			}
		}
		var startingIndex = this._reconstructedMesh.getTotalIndices();
		var startingVertex = this._reconstructedMesh.getTotalVertices();
		var submeshesArray = this._reconstructedMesh.subMeshes;
		this._reconstructedMesh.subMeshes = [];
		var newIndicesArray = this._reconstructedMesh.getIndices();
		var originalIndices = this._mesh.getIndices();
		var _g13 = 0;
		var _g4 = newTriangles.length;
		while(_g13 < _g4) {
			var i3 = _g13++;
			var t1 = newTriangles[i3];
			var _g23 = 0;
			var _g32 = [0,1,2];
			while(_g23 < _g32.length) {
				var idx = _g32[_g23];
				++_g23;
				var id = originalIndices[t1.originalOffset + idx];
				var offset = HxOverrides.indexOf(t1.vertices[idx].originalOffsets,id,0);
				if(offset < 0) offset = 0;
				newIndicesArray.push(t1.vertices[idx].id + offset + startingVertex);
			}
		}
		this._reconstructedMesh.setIndices(newIndicesArray);
		this._reconstructedMesh.setVerticesData("position",newPositionData);
		this._reconstructedMesh.setVerticesData("normal",newNormalData);
		if(newUVsData.length > 0) this._reconstructedMesh.setVerticesData("uv",newUVsData);
		if(newColorsData.length > 0) this._reconstructedMesh.setVerticesData("color",newColorsData);
		var originalSubmesh = this._mesh.subMeshes[submeshIndex];
		if(submeshIndex > 0) {
			this._reconstructedMesh.subMeshes = [];
			var _g5 = 0;
			while(_g5 < submeshesArray.length) {
				var submesh = submeshesArray[_g5];
				++_g5;
				new com_babylonhx_mesh_SubMesh(submesh.materialIndex,submesh.verticesStart,submesh.verticesCount,submesh.indexStart,submesh.indexCount,submesh._mesh);
			}
			var newSubmesh = new com_babylonhx_mesh_SubMesh(originalSubmesh.materialIndex,startingVertex,vertexCount,startingIndex,newTriangles.length * 3,this._reconstructedMesh);
		}
	}
	,initDecimatedMesh: function() {
		this._reconstructedMesh = new com_babylonhx_mesh_Mesh(this._mesh.name + "Decimated",this._mesh._scene);
		this._reconstructedMesh.set_material(this._mesh.get_material());
		this._reconstructedMesh.parent = this._mesh.parent;
		this._reconstructedMesh.isVisible = false;
	}
	,isFlipped: function(vertex1,vertex2,point,deletedArray,borderFactor,delTr) {
		var _g1 = 0;
		var _g = vertex1.triangleCount;
		while(_g1 < _g) {
			var i = _g1++;
			var t = this.triangles[this.references[vertex1.triangleStart + i].triangleId];
			if(t.deleted) continue;
			var s = this.references[vertex1.triangleStart + i].vertexId;
			var v1 = t.vertices[(s + 1) % 3];
			var v2 = t.vertices[(s + 2) % 3];
			if(v1 == vertex2 || v2 == vertex2) {
				deletedArray[i] = true;
				delTr.push(t);
				continue;
			}
			var d1 = v1.position.subtract(point);
			d1 = d1.normalize();
			var d2 = v2.position.subtract(point);
			d2 = d2.normalize();
			if(Math.abs(d1.x * d2.x + d1.y * d2.y + d1.z * d2.z) > 0.999) return true;
			var normal = com_babylonhx_math_Vector3.Cross(d1,d2).normalize();
			deletedArray[i] = false;
			if(com_babylonhx_math_Vector3.Dot(normal,t.normal) < 0.2) return true;
		}
		return false;
	}
	,updateTriangles: function(origVertex,vertex,deletedArray,deletedTriangles) {
		var newDeleted = deletedTriangles;
		var _g1 = 0;
		var _g = vertex.triangleCount;
		while(_g1 < _g) {
			var i = _g1++;
			var ref = this.references[vertex.triangleStart + i];
			var t = this.triangles[ref.triangleId];
			if(t.deleted) continue;
			if(deletedArray[i] && t.deletePending) {
				t.deleted = true;
				newDeleted++;
				continue;
			}
			t.vertices[ref.vertexId] = origVertex;
			t.isDirty = true;
			t.error[0] = this.calculateError(t.vertices[0],t.vertices[1]) + t.borderFactor / 2;
			t.error[1] = this.calculateError(t.vertices[1],t.vertices[2]) + t.borderFactor / 2;
			t.error[2] = this.calculateError(t.vertices[2],t.vertices[0]) + t.borderFactor / 2;
			t.error[3] = Math.min(t.error[0],t.error[1]);
			t.error[3] = Math.min(t.error[3],t.error[2]);
			this.references.push(ref);
		}
		return newDeleted;
	}
	,identifyBorder: function() {
		var _g1 = 0;
		var _g = this.vertices.length;
		while(_g1 < _g) {
			var i = _g1++;
			var vCount = [];
			var vId = [];
			var v = this.vertices[i];
			var _g3 = 0;
			var _g2 = v.triangleCount;
			while(_g3 < _g2) {
				var j = _g3++;
				var triangle = this.triangles[this.references[v.triangleStart + j].triangleId];
				var _g4 = 0;
				while(_g4 < 3) {
					var ii = _g4++;
					var ofs = 0;
					var vv = triangle.vertices[ii];
					while(ofs < vCount.length) {
						if(vId[ofs] == vv.id) break;
						++ofs;
					}
					if(ofs == vCount.length) {
						vCount.push(1);
						vId.push(vv.id);
					} else vCount[ofs]++;
				}
			}
			var _g31 = 0;
			var _g21 = vCount.length;
			while(_g31 < _g21) {
				var j1 = _g31++;
				if(vCount[j1] == 1) this.vertices[vId[j1]].isBorder = true; else this.vertices[vId[j1]].isBorder = false;
			}
		}
	}
	,updateMesh: function(identifyBorders) {
		if(identifyBorders == null) identifyBorders = false;
		if(!identifyBorders) {
			var newTrianglesVector = [];
			var _g1 = 0;
			var _g = this.triangles.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(!this.triangles[i].deleted) newTrianglesVector.push(this.triangles[i]);
			}
			this.triangles = newTrianglesVector;
		}
		var _g11 = 0;
		var _g2 = this.vertices.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.vertices[i1].triangleCount = 0;
			this.vertices[i1].triangleStart = 0;
		}
		var t = null;
		var v = null;
		var _g12 = 0;
		var _g3 = this.triangles.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			t = this.triangles[i2];
			var _g21 = 0;
			while(_g21 < 3) {
				var j = _g21++;
				v = t.vertices[j];
				v.triangleCount++;
			}
		}
		var tStart = 0;
		var _g13 = 0;
		var _g4 = this.vertices.length;
		while(_g13 < _g4) {
			var i3 = _g13++;
			this.vertices[i3].triangleStart = tStart;
			tStart += this.vertices[i3].triangleCount;
			this.vertices[i3].triangleCount = 0;
		}
		var newReferences = [];
		var _g14 = 0;
		var _g5 = this.triangles.length;
		while(_g14 < _g5) {
			var i4 = _g14++;
			t = this.triangles[i4];
			var _g22 = 0;
			while(_g22 < 3) {
				var j1 = _g22++;
				v = t.vertices[j1];
				newReferences[v.triangleStart + v.triangleCount] = new com_babylonhx_mesh_simplification_Reference(j1,i4);
				v.triangleCount++;
			}
		}
		this.references = newReferences;
		if(identifyBorders) this.identifyBorder();
	}
	,vertexError: function(q,point) {
		var x = point.x;
		var y = point.y;
		var z = point.z;
		return q.data[0] * x * x + 2 * q.data[1] * x * y + 2 * q.data[2] * x * z + 2 * q.data[3] * x + q.data[4] * y * y + 2 * q.data[5] * y * z + 2 * q.data[6] * y + q.data[7] * z * z + 2 * q.data[8] * z + q.data[9];
	}
	,calculateError: function(vertex1,vertex2,pointResult,normalResult,uvResult,colorResult) {
		var q = vertex1.q.add(vertex2.q);
		var border = vertex1.isBorder && vertex2.isBorder;
		var error = 0.0;
		var qDet = q.det(0,1,2,1,4,5,2,5,7);
		if(qDet != 0 && !border) {
			if(pointResult == null) pointResult = new com_babylonhx_math_Vector3(0,0,0);
			pointResult.x = -1 / qDet * q.det(1,2,3,4,5,6,5,7,8);
			pointResult.y = 1 / qDet * q.det(0,2,3,1,5,6,2,7,8);
			pointResult.z = -1 / qDet * q.det(0,1,3,1,4,6,2,5,8);
			error = this.vertexError(q,pointResult);
		} else {
			var p3 = vertex1.position.add(vertex2.position).divide(new com_babylonhx_math_Vector3(2,2,2));
			var error1 = this.vertexError(q,vertex1.position);
			var error2 = this.vertexError(q,vertex2.position);
			var error3 = this.vertexError(q,p3);
			error = Math.min(error1,error2);
			error = Math.min(error,error3);
			if(error == error1) {
				if(pointResult != null) pointResult.copyFrom(vertex1.position);
			} else if(error == error2) {
				if(pointResult != null) pointResult.copyFrom(vertex2.position);
			} else if(pointResult != null) {
				pointResult.x = p3.x;
				pointResult.y = p3.y;
				pointResult.z = p3.z;
			}
		}
		return error;
	}
	,__class__: com_babylonhx_mesh_simplification_QuadraticErrorSimplification
};
var com_babylonhx_mesh_simplification_QuadraticMatrix = $hx_exports.BABYLON.QuadraticMatrix = function(data) {
	this.data = [];
	if(data != null) {
		var _g = 0;
		while(_g < 10) {
			var i = _g++;
			if(i <= data.length) this.data[i] = data[i]; else this.data[i] = 0;
		}
	}
};
$hxClasses["com.babylonhx.mesh.simplification.QuadraticMatrix"] = com_babylonhx_mesh_simplification_QuadraticMatrix;
com_babylonhx_mesh_simplification_QuadraticMatrix.__name__ = ["com","babylonhx","mesh","simplification","QuadraticMatrix"];
com_babylonhx_mesh_simplification_QuadraticMatrix.FromData = function(a,b,c,d) {
	return new com_babylonhx_mesh_simplification_QuadraticMatrix(com_babylonhx_mesh_simplification_QuadraticMatrix.DataFromNumbers(a,b,c,d));
};
com_babylonhx_mesh_simplification_QuadraticMatrix.DataFromNumbers = function(a,b,c,d) {
	return [a * a,a * b,a * c,a * d,b * b,b * c,b * d,c * c,c * d,d * d];
};
com_babylonhx_mesh_simplification_QuadraticMatrix.prototype = {
	data: null
	,det: function(a11,a12,a13,a21,a22,a23,a31,a32,a33) {
		var det = this.data[a11] * this.data[a22] * this.data[a33] + this.data[a13] * this.data[a21] * this.data[a32] + this.data[a12] * this.data[a23] * this.data[a31] - this.data[a13] * this.data[a22] * this.data[a31] - this.data[a11] * this.data[a23] * this.data[a32] - this.data[a12] * this.data[a21] * this.data[a33];
		return det;
	}
	,addInPlace: function(matrix) {
		var _g = 0;
		while(_g < 10) {
			var i = _g++;
			this.data[i] += matrix.data[i];
		}
	}
	,addArrayInPlace: function(data) {
		var _g = 0;
		while(_g < 10) {
			var i = _g++;
			this.data[i] += data[i];
		}
	}
	,add: function(matrix) {
		var m = new com_babylonhx_mesh_simplification_QuadraticMatrix();
		var _g = 0;
		while(_g < 10) {
			var i = _g++;
			m.data[i] = this.data[i] + matrix.data[i];
		}
		return m;
	}
	,__class__: com_babylonhx_mesh_simplification_QuadraticMatrix
};
var com_babylonhx_mesh_simplification_Reference = $hx_exports.BABYLON.Reference = function(vertexId,triangleId) {
	this.vertexId = vertexId;
	this.triangleId = triangleId;
};
$hxClasses["com.babylonhx.mesh.simplification.Reference"] = com_babylonhx_mesh_simplification_Reference;
com_babylonhx_mesh_simplification_Reference.__name__ = ["com","babylonhx","mesh","simplification","Reference"];
com_babylonhx_mesh_simplification_Reference.prototype = {
	vertexId: null
	,triangleId: null
	,__class__: com_babylonhx_mesh_simplification_Reference
};
var com_babylonhx_mesh_simplification_SimplificationQueue = $hx_exports.BABYLON.SimplificationQueue = function() {
	this.running = false;
	this._simplificationArray = [];
};
$hxClasses["com.babylonhx.mesh.simplification.SimplificationQueue"] = com_babylonhx_mesh_simplification_SimplificationQueue;
com_babylonhx_mesh_simplification_SimplificationQueue.__name__ = ["com","babylonhx","mesh","simplification","SimplificationQueue"];
com_babylonhx_mesh_simplification_SimplificationQueue.prototype = {
	_simplificationArray: null
	,running: null
	,addTask: function(task) {
		this._simplificationArray.push(task);
	}
	,executeNext: function() {
		var task = this._simplificationArray.pop();
		if(task != null) {
			this.running = true;
			this.runSimplification(task);
		} else this.running = false;
	}
	,runSimplification: function(task) {
		var _g2 = this;
		if(task.parallelProcessing) {
			var _g = 0;
			var _g1 = task.settings;
			while(_g < _g1.length) {
				var setting = [_g1[_g]];
				++_g;
				var simplifier = this.getSimplifier(task);
				simplifier.simplify(setting[0],(function(setting) {
					return function(newMesh) {
						task.mesh.addLODLevel(setting[0].distance,newMesh);
						newMesh.isVisible = true;
						if(setting[0].quality == task.settings[task.settings.length - 1].quality && task.successCallback != null) task.successCallback();
						_g2.executeNext();
					};
				})(setting));
			}
		} else {
			var simplifier1 = this.getSimplifier(task);
			var runDecimation = function(setting1,callback) {
				simplifier1.simplify(setting1,function(newMesh1) {
					task.mesh.addLODLevel(setting1.distance,newMesh1);
					newMesh1.isVisible = true;
					callback();
				});
			};
			com_babylonhx_tools_AsyncLoop.Run(task.settings.length,function(loop) {
				runDecimation(task.settings[loop.index],function() {
					loop.executeNext();
				});
			},function() {
				if(task.successCallback != null) task.successCallback();
				_g2.executeNext();
			});
		}
	}
	,getSimplifier: function(task) {
		var _g = task.simplificationType;
		switch(_g) {
		case 0:
			return new com_babylonhx_mesh_simplification_QuadraticErrorSimplification(task.mesh);
		default:
			return new com_babylonhx_mesh_simplification_QuadraticErrorSimplification(task.mesh);
		}
		return null;
	}
	,__class__: com_babylonhx_mesh_simplification_SimplificationQueue
};
var com_babylonhx_mesh_simplification_SimplificationSettings = $hx_exports.BABYLON.SimplificationSettings = function(quality,distance,optimizeMesh) {
	if(optimizeMesh == null) optimizeMesh = false;
	this.quality = quality;
	this.distance = distance;
	this.optimizeMesh = optimizeMesh;
};
$hxClasses["com.babylonhx.mesh.simplification.SimplificationSettings"] = com_babylonhx_mesh_simplification_SimplificationSettings;
com_babylonhx_mesh_simplification_SimplificationSettings.__name__ = ["com","babylonhx","mesh","simplification","SimplificationSettings"];
com_babylonhx_mesh_simplification_SimplificationSettings.__interfaces__ = [com_babylonhx_mesh_simplification_ISimplificationSettings];
com_babylonhx_mesh_simplification_SimplificationSettings.prototype = {
	quality: null
	,distance: null
	,optimizeMesh: null
	,__class__: com_babylonhx_mesh_simplification_SimplificationSettings
};
var com_babylonhx_mesh_simplification_SimplificationTask = $hx_exports.BABYLON.SimplificationTask = function(settings,simplificationType,mesh,successCallback,parallelProcessing) {
	if(parallelProcessing == null) parallelProcessing = false;
	this.settings = settings;
	this.simplificationType = simplificationType;
	this.mesh = mesh;
	this.successCallback = successCallback;
	this.parallelProcessing = parallelProcessing;
};
$hxClasses["com.babylonhx.mesh.simplification.SimplificationTask"] = com_babylonhx_mesh_simplification_SimplificationTask;
com_babylonhx_mesh_simplification_SimplificationTask.__name__ = ["com","babylonhx","mesh","simplification","SimplificationTask"];
com_babylonhx_mesh_simplification_SimplificationTask.prototype = {
	settings: null
	,simplificationType: null
	,mesh: null
	,successCallback: null
	,parallelProcessing: null
	,__class__: com_babylonhx_mesh_simplification_SimplificationTask
};
var com_babylonhx_particles_Particle = $hx_exports.BABYLON.Particle = function() {
	this.angularSpeed = 0;
	this.angle = 0;
	this.size = 0;
	this.age = 0;
	this.lifeTime = 1.0;
	this.colorStep = new com_babylonhx_math_Color4(0,0,0,0);
	this.color = new com_babylonhx_math_Color4(0,0,0,0);
	this.direction = new com_babylonhx_math_Vector3(0,0,0);
	this.position = new com_babylonhx_math_Vector3(0,0,0);
};
$hxClasses["com.babylonhx.particles.Particle"] = com_babylonhx_particles_Particle;
com_babylonhx_particles_Particle.__name__ = ["com","babylonhx","particles","Particle"];
com_babylonhx_particles_Particle.prototype = {
	position: null
	,direction: null
	,color: null
	,colorStep: null
	,lifeTime: null
	,age: null
	,size: null
	,angle: null
	,angularSpeed: null
	,__class__: com_babylonhx_particles_Particle
};
var com_babylonhx_physics_IPhysicsEnginePlugin = $hx_exports.BABYLON.IPhysicsEnginePlugin = function() { };
$hxClasses["com.babylonhx.physics.IPhysicsEnginePlugin"] = com_babylonhx_physics_IPhysicsEnginePlugin;
com_babylonhx_physics_IPhysicsEnginePlugin.__name__ = ["com","babylonhx","physics","IPhysicsEnginePlugin"];
com_babylonhx_physics_IPhysicsEnginePlugin.prototype = {
	initialize: null
	,setGravity: null
	,runOneStep: null
	,registerMesh: null
	,registerMeshesAsCompound: null
	,unregisterMesh: null
	,applyImpulse: null
	,createLink: null
	,dispose: null
	,isSupported: null
	,updateBodyPosition: null
	,__class__: com_babylonhx_physics_IPhysicsEnginePlugin
};
var com_babylonhx_physics_PhysicsCompoundBodyPart = $hx_exports.BABYLON.PhysicsCompoundBodyPart = function() { };
$hxClasses["com.babylonhx.physics.PhysicsCompoundBodyPart"] = com_babylonhx_physics_PhysicsCompoundBodyPart;
com_babylonhx_physics_PhysicsCompoundBodyPart.__name__ = ["com","babylonhx","physics","PhysicsCompoundBodyPart"];
com_babylonhx_physics_PhysicsCompoundBodyPart.prototype = {
	mesh: null
	,impostor: null
	,__class__: com_babylonhx_physics_PhysicsCompoundBodyPart
};
var com_babylonhx_physics_PhysicsEngine = $hx_exports.BABYLON.PhysicsEngine = function(plugin) {
	this._currentPlugin = plugin;
};
$hxClasses["com.babylonhx.physics.PhysicsEngine"] = com_babylonhx_physics_PhysicsEngine;
com_babylonhx_physics_PhysicsEngine.__name__ = ["com","babylonhx","physics","PhysicsEngine"];
com_babylonhx_physics_PhysicsEngine.prototype = {
	gravity: null
	,_currentPlugin: null
	,_initialize: function(gravity) {
		this._currentPlugin.initialize();
		this._setGravity(gravity);
	}
	,_runOneStep: function(delta) {
		if(delta > 0.1) delta = 0.1; else if(delta <= 0) delta = 0.0166666666666666664;
		this._currentPlugin.runOneStep(delta);
	}
	,_setGravity: function(gravity) {
		if(gravity != null) this.gravity = gravity; else this.gravity = new com_babylonhx_math_Vector3(0,-9.82,0);
		this._currentPlugin.setGravity(this.gravity);
	}
	,_registerMesh: function(mesh,impostor,options) {
		return this._currentPlugin.registerMesh(mesh,impostor,options);
	}
	,_registerMeshesAsCompound: function(parts,options) {
		return this._currentPlugin.registerMeshesAsCompound(parts,options);
	}
	,_unregisterMesh: function(mesh) {
		this._currentPlugin.unregisterMesh(mesh);
	}
	,_applyImpulse: function(mesh,force,contactPoint) {
		this._currentPlugin.applyImpulse(mesh,force,contactPoint);
	}
	,_createLink: function(mesh1,mesh2,pivot1,pivot2,options) {
		return this._currentPlugin.createLink(mesh1,mesh2,pivot1,pivot2,options);
	}
	,_updateBodyPosition: function(mesh) {
		this._currentPlugin.updateBodyPosition(mesh);
	}
	,dispose: function() {
		this._currentPlugin.dispose();
	}
	,isSupported: function() {
		if(this._currentPlugin != null) return this._currentPlugin.isSupported();
		return false;
	}
	,__class__: com_babylonhx_physics_PhysicsEngine
};
var com_babylonhx_postprocess_DisplayPassPostProcess = $hx_exports.BABYLON.DisplayPassPostProcess = function(name,ratio,camera,samplingMode,engine,reusable) {
	if(reusable == null) reusable = false;
	com_babylonhx_postprocess_PostProcess.call(this,name,"displayPass",["passSampler"],["passSampler"],ratio,camera,samplingMode,engine,reusable);
};
$hxClasses["com.babylonhx.postprocess.DisplayPassPostProcess"] = com_babylonhx_postprocess_DisplayPassPostProcess;
com_babylonhx_postprocess_DisplayPassPostProcess.__name__ = ["com","babylonhx","postprocess","DisplayPassPostProcess"];
com_babylonhx_postprocess_DisplayPassPostProcess.__super__ = com_babylonhx_postprocess_PostProcess;
com_babylonhx_postprocess_DisplayPassPostProcess.prototype = $extend(com_babylonhx_postprocess_PostProcess.prototype,{
	__class__: com_babylonhx_postprocess_DisplayPassPostProcess
});
var com_babylonhx_postprocess_PostProcessManager = $hx_exports.BABYLON.PostProcessManager = function(scene) {
	this._vertexStrideSize = 8;
	this._vertexDeclaration = [2];
	this._scene = scene;
};
$hxClasses["com.babylonhx.postprocess.PostProcessManager"] = com_babylonhx_postprocess_PostProcessManager;
com_babylonhx_postprocess_PostProcessManager.__name__ = ["com","babylonhx","postprocess","PostProcessManager"];
com_babylonhx_postprocess_PostProcessManager.prototype = {
	_scene: null
	,_indexBuffer: null
	,_vertexDeclaration: null
	,_vertexStrideSize: null
	,_vertexBuffer: null
	,_prepareBuffers: function() {
		if(this._vertexBuffer != null) return;
		var vertices = [];
		vertices.push(1);
		vertices.push(1);
		vertices.push(-1);
		vertices.push(1);
		vertices.push(-1);
		vertices.push(-1);
		vertices.push(1);
		vertices.push(-1);
		this._vertexBuffer = this._scene._engine.createVertexBuffer(vertices);
		var indices = [];
		indices.push(0);
		indices.push(1);
		indices.push(2);
		indices.push(0);
		indices.push(2);
		indices.push(3);
		this._indexBuffer = this._scene._engine.createIndexBuffer(indices);
	}
	,_prepareFrame: function(sourceTexture) {
		var postProcesses = this._scene.activeCamera._postProcesses;
		var postProcessesTakenIndices = this._scene.activeCamera._postProcessesTakenIndices;
		if(postProcessesTakenIndices.length == 0 || !this._scene.postProcessesEnabled) return false;
		postProcesses[this._scene.activeCamera._postProcessesTakenIndices[0]].activate(this._scene.activeCamera,sourceTexture);
		return true;
	}
	,directRender: function(postProcesses,targetTexture) {
		var engine = this._scene._engine;
		var _g1 = 0;
		var _g = postProcesses.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(index < postProcesses.length - 1) postProcesses[index + 1].activate(this._scene.activeCamera,targetTexture); else if(targetTexture != null) engine.bindFramebuffer(targetTexture); else {
				engine._currentRenderTarget = null;
				lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
				engine.setViewport(engine._cachedViewport,null,null);
				engine.wipeCaches();
			}
			var pp = postProcesses[index];
			var effect = pp.apply();
			if(effect != null) {
				if(pp.onBeforeRender != null) pp.onBeforeRender(effect);
				this._prepareBuffers();
				engine.bindBuffers(this._vertexBuffer,this._indexBuffer,this._vertexDeclaration,this._vertexStrideSize,effect);
				engine.draw(true,0,6);
				if(pp.onAfterRender != null) pp.onAfterRender(effect);
			}
		}
		engine._depthCullingState.set_depthTest(true);
		engine._depthCullingState.set_depthMask(true);
	}
	,_finalizeFrame: function(doNotPresent,targetTexture,faceIndex,postProcesses) {
		if(doNotPresent == null) doNotPresent = false;
		if(postProcesses == null) postProcesses = this._scene.activeCamera._postProcesses;
		var postProcessesTakenIndices = this._scene.activeCamera._postProcessesTakenIndices;
		if(postProcessesTakenIndices.length == 0 || !this._scene.postProcessesEnabled) return;
		var engine = this._scene._engine;
		var _g1 = 0;
		var _g = postProcessesTakenIndices.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(index < postProcessesTakenIndices.length - 1) postProcesses[postProcessesTakenIndices[index + 1]].activate(this._scene.activeCamera); else if(targetTexture != null) engine.bindFramebuffer(targetTexture,faceIndex); else {
				engine._currentRenderTarget = null;
				lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
				engine.setViewport(engine._cachedViewport,null,null);
				engine.wipeCaches();
			}
			if(doNotPresent) break;
			var pp = postProcesses[postProcessesTakenIndices[index]];
			var effect = pp.apply();
			if(effect != null) {
				if(pp.onBeforeRender != null) pp.onBeforeRender(effect);
				this._prepareBuffers();
				engine.bindBuffers(this._vertexBuffer,this._indexBuffer,this._vertexDeclaration,this._vertexStrideSize,effect);
				engine.draw(true,0,6);
				if(pp.onAfterRender != null) pp.onAfterRender(effect);
			}
		}
		engine._depthCullingState.set_depthTest(true);
		engine._depthCullingState.set_depthMask(true);
	}
	,dispose: function() {
		if(this._vertexBuffer != null) {
			this._scene._engine._releaseBuffer(this._vertexBuffer);
			this._vertexBuffer = null;
		}
		if(this._indexBuffer != null) {
			this._scene._engine._releaseBuffer(this._indexBuffer);
			this._indexBuffer = null;
		}
	}
	,__class__: com_babylonhx_postprocess_PostProcessManager
};
var com_babylonhx_postprocess_StereoscopicInterlacePostProcess = function(name,camB,postProcessA,isStereoscopicHoriz,samplingMode) {
	var _g = this;
	com_babylonhx_postprocess_PostProcess.call(this,name,"stereoscopicInterlace",["stepSize"],["camASampler"],1,camB,samplingMode,camB._scene._engine,false,isStereoscopicHoriz?"#define IS_STEREOSCOPIC_HORIZ 1":null);
	this._stepSize = new com_babylonhx_math_Vector2(1 / this.width,1 / this.height);
	this.onSizeChanged = function() {
		_g._stepSize = new com_babylonhx_math_Vector2(1 / _g.width,1 / _g.height);
	};
	this.onApply = function(effect) {
		effect._engine.setTextureFromPostProcess(HxOverrides.indexOf(effect._samplers,"camASampler",0),postProcessA);
		effect._engine.setFloat2(effect._uniforms.get("stepSize"),_g._stepSize.x,_g._stepSize.y);
		effect;
	};
};
$hxClasses["com.babylonhx.postprocess.StereoscopicInterlacePostProcess"] = com_babylonhx_postprocess_StereoscopicInterlacePostProcess;
com_babylonhx_postprocess_StereoscopicInterlacePostProcess.__name__ = ["com","babylonhx","postprocess","StereoscopicInterlacePostProcess"];
com_babylonhx_postprocess_StereoscopicInterlacePostProcess.__super__ = com_babylonhx_postprocess_PostProcess;
com_babylonhx_postprocess_StereoscopicInterlacePostProcess.prototype = $extend(com_babylonhx_postprocess_PostProcess.prototype,{
	_stepSize: null
	,__class__: com_babylonhx_postprocess_StereoscopicInterlacePostProcess
});
var com_babylonhx_postprocess_VRDistortionCorrectionPostProcess = function(name,camera,isRightEye,vrMetrics) {
	var _g = this;
	com_babylonhx_postprocess_PostProcess.call(this,name,"vrDistortionCorrection",["LensCenter","Scale","ScaleIn","HmdWarpParam"],null,vrMetrics.postProcessScaleFactor,camera,2,null,false);
	this._isRightEye = isRightEye;
	this._distortionFactors = vrMetrics.distortionK;
	this._postProcessScaleFactor = vrMetrics.postProcessScaleFactor;
	this._lensCenterOffset = vrMetrics.lensCenterOffset;
	this.onSizeChanged = function() {
		_g.aspectRatio = _g.width * .5 / _g.height;
		_g._scaleIn = new com_babylonhx_math_Vector2(2,2 / _g.aspectRatio);
		_g._scaleFactor = new com_babylonhx_math_Vector2(.5 * (1 / _g._postProcessScaleFactor),.5 * (1 / _g._postProcessScaleFactor) * _g.aspectRatio);
		_g._lensCenter = new com_babylonhx_math_Vector2(_g._isRightEye?0.5 - _g._lensCenterOffset * 0.5:0.5 + _g._lensCenterOffset * 0.5,0.5);
	};
	this.onApply = function(effect) {
		effect._engine.setFloat2(effect._uniforms.get("LensCenter"),_g._lensCenter.x,_g._lensCenter.y);
		effect;
		effect._engine.setFloat2(effect._uniforms.get("Scale"),_g._scaleFactor.x,_g._scaleFactor.y);
		effect;
		effect._engine.setFloat2(effect._uniforms.get("ScaleIn"),_g._scaleIn.x,_g._scaleIn.y);
		effect;
		effect._engine.setFloat4(effect._uniforms.get("HmdWarpParam"),_g._distortionFactors[0],_g._distortionFactors[1],_g._distortionFactors[2],_g._distortionFactors[3]);
		effect;
	};
};
$hxClasses["com.babylonhx.postprocess.VRDistortionCorrectionPostProcess"] = com_babylonhx_postprocess_VRDistortionCorrectionPostProcess;
com_babylonhx_postprocess_VRDistortionCorrectionPostProcess.__name__ = ["com","babylonhx","postprocess","VRDistortionCorrectionPostProcess"];
com_babylonhx_postprocess_VRDistortionCorrectionPostProcess.__super__ = com_babylonhx_postprocess_PostProcess;
com_babylonhx_postprocess_VRDistortionCorrectionPostProcess.prototype = $extend(com_babylonhx_postprocess_PostProcess.prototype,{
	aspectRatio: null
	,_isRightEye: null
	,_distortionFactors: null
	,_postProcessScaleFactor: null
	,_lensCenterOffset: null
	,_scaleIn: null
	,_scaleFactor: null
	,_lensCenter: null
	,__class__: com_babylonhx_postprocess_VRDistortionCorrectionPostProcess
});
var com_babylonhx_postprocess_renderpipeline_PostProcessRenderEffect = $hx_exports.BABYLON.PostProcessRenderEffect = function(engine,name,getPostProcess,singleInstance) {
	if(singleInstance == null) singleInstance = true;
	this._engine = engine;
	this._name = name;
	this._singleInstance = singleInstance;
	this._getPostProcess = getPostProcess;
	this._cameras = new haxe_ds_StringMap();
	this._indicesForCamera = new haxe_ds_StringMap();
	this._postProcesses = new haxe_ds_StringMap();
	this._renderPasses = new haxe_ds_StringMap();
	this._renderEffectAsPasses = new haxe_ds_StringMap();
};
$hxClasses["com.babylonhx.postprocess.renderpipeline.PostProcessRenderEffect"] = com_babylonhx_postprocess_renderpipeline_PostProcessRenderEffect;
com_babylonhx_postprocess_renderpipeline_PostProcessRenderEffect.__name__ = ["com","babylonhx","postprocess","renderpipeline","PostProcessRenderEffect"];
com_babylonhx_postprocess_renderpipeline_PostProcessRenderEffect.prototype = {
	_engine: null
	,_postProcesses: null
	,_getPostProcess: null
	,_singleInstance: null
	,_cameras: null
	,_indicesForCamera: null
	,_renderPasses: null
	,_renderEffectAsPasses: null
	,_name: null
	,applyParameters: null
	,get_isSupported: function() {
		var $it0 = this._postProcesses.keys();
		while( $it0.hasNext() ) {
			var index = $it0.next();
			if(!this._postProcesses.get(index).get_isSupported()) return false;
		}
		return true;
	}
	,_update: function() {
		var $it0 = this._renderPasses.keys();
		while( $it0.hasNext() ) {
			var renderPassName = $it0.next();
			this._renderPasses.get(renderPassName)._update();
		}
	}
	,addPass: function(renderPass) {
		this._renderPasses.set(renderPass._name,renderPass);
		this._linkParameters();
	}
	,removePass: function(renderPass) {
		{
			this._renderPasses.set(renderPass._name,null);
			null;
		}
		this._renderPasses.remove(renderPass._name);
		this._linkParameters();
	}
	,addRenderEffectAsPass: function(renderEffect) {
		this._renderEffectAsPasses.set(renderEffect._name,renderEffect);
		this._linkParameters();
	}
	,getPass: function(passName) {
		var $it0 = this._renderPasses.keys();
		while( $it0.hasNext() ) {
			var renderPassName = $it0.next();
			if(renderPassName == passName) return this._renderPasses.get(passName);
		}
		return null;
	}
	,emptyPasses: function() {
		this._renderPasses = new haxe_ds_StringMap();
		this._linkParameters();
	}
	,_attachCameras: function(cameras) {
		var cameraKey = "";
		var _cam = com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras);
		var _g = 0;
		while(_g < _cam.length) {
			var c = _cam[_g];
			++_g;
			var camera = c;
			var cameraName = camera.name;
			if(this._singleInstance) cameraKey = "0"; else cameraKey = cameraName;
			var value;
			if(this._postProcesses.exists(cameraKey)) value = this._postProcesses.get(cameraKey); else value = this._getPostProcess();
			this._postProcesses.set(cameraKey,value);
			var index = camera.attachPostProcess(this._postProcesses.get(cameraKey));
			if(!this._indicesForCamera.exists(cameraName)) this._indicesForCamera.set(cameraName,[]);
			this._indicesForCamera.get(cameraName).push(index);
			if(!this._cameras.exists(camera.name)) this._cameras.set(cameraName,camera);
			var $it0 = this._renderPasses.keys();
			while( $it0.hasNext() ) {
				var passName = $it0.next();
				this._renderPasses.get(passName)._incRefCount();
			}
		}
		this._linkParameters();
	}
	,_detachCameras: function(cameras) {
		var _cam = com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras);
		var _g = 0;
		while(_g < _cam.length) {
			var c = _cam[_g];
			++_g;
			var camera = c;
			var cameraName = camera.name;
			camera.detachPostProcess(this._postProcesses.get(this._singleInstance?"0":cameraName),this._indicesForCamera.get(cameraName));
			this._cameras.remove(cameraName);
			this._indicesForCamera.remove(cameraName);
			var $it0 = this._renderPasses.keys();
			while( $it0.hasNext() ) {
				var passName = $it0.next();
				this._renderPasses.get(passName)._decRefCount();
			}
		}
	}
	,_enable: function(cameras) {
		var _cam = com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras);
		var _g = 0;
		while(_g < _cam.length) {
			var c = _cam[_g];
			++_g;
			var camera = c;
			var cameraName = camera.name;
			var _g2 = 0;
			var _g1 = this._indicesForCamera.get(cameraName).length;
			while(_g2 < _g1) {
				var j = _g2++;
				if(camera._postProcesses[this._indicesForCamera.get(cameraName)[j]] == null) c.attachPostProcess(this._postProcesses.get(this._singleInstance?"0":cameraName),this._indicesForCamera.get(cameraName)[j]);
			}
			var $it0 = this._renderPasses.keys();
			while( $it0.hasNext() ) {
				var passName = $it0.next();
				this._renderPasses.get(passName)._incRefCount();
			}
		}
	}
	,_disable: function(cameras) {
		var _cam = com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras);
		var _g = 0;
		while(_g < _cam.length) {
			var c = _cam[_g];
			++_g;
			var camera = c;
			var cameraName = c.name;
			camera.detachPostProcess(this._postProcesses.get(this._singleInstance?"0":cameraName),this._indicesForCamera.get(cameraName));
			var $it0 = this._renderPasses.keys();
			while( $it0.hasNext() ) {
				var passName = $it0.next();
				this._renderPasses.get(passName)._decRefCount();
			}
		}
	}
	,getPostProcess: function(camera) {
		if(this._singleInstance) return this._postProcesses.get("0"); else return this._postProcesses.get(camera.name);
	}
	,_linkParameters: function() {
		var _g = this;
		var $it0 = this._postProcesses.keys();
		while( $it0.hasNext() ) {
			var index = $it0.next();
			if(this.applyParameters != null) this.applyParameters(this._postProcesses.get(index));
			this._postProcesses.get(index).onBeforeRender = function(effect) {
				_g._linkTextures(effect);
			};
		}
	}
	,_linkTextures: function(effect) {
		var $it0 = this._renderPasses.keys();
		while( $it0.hasNext() ) {
			var renderPassName = $it0.next();
			effect.setTexture(renderPassName,this._renderPasses.get(renderPassName).getRenderTexture());
		}
		var $it1 = this._renderEffectAsPasses.keys();
		while( $it1.hasNext() ) {
			var renderEffectName = $it1.next();
			effect.setTextureFromPostProcess(renderEffectName + "Sampler",this._renderEffectAsPasses.get(renderEffectName).getPostProcess());
		}
	}
	,__class__: com_babylonhx_postprocess_renderpipeline_PostProcessRenderEffect
	,__properties__: {get_isSupported:"get_isSupported"}
};
var com_babylonhx_postprocess_renderpipeline_PostProcessRenderPass = $hx_exports.BABYLON.PostProcessRenderPass = function(scene,name,size,renderList,beforeRender,afterRender) {
	this._refCount = 0;
	this._enabled = true;
	this._name = name;
	this._renderTexture = new com_babylonhx_materials_textures_RenderTargetTexture(name,size,scene);
	this.setRenderList(renderList);
	this._renderTexture.onBeforeRender = beforeRender;
	this._renderTexture.onAfterRender = afterRender;
	this._scene = scene;
	this._renderList = renderList;
};
$hxClasses["com.babylonhx.postprocess.renderpipeline.PostProcessRenderPass"] = com_babylonhx_postprocess_renderpipeline_PostProcessRenderPass;
com_babylonhx_postprocess_renderpipeline_PostProcessRenderPass.__name__ = ["com","babylonhx","postprocess","renderpipeline","PostProcessRenderPass"];
com_babylonhx_postprocess_renderpipeline_PostProcessRenderPass.prototype = {
	_enabled: null
	,_renderList: null
	,_renderTexture: null
	,_scene: null
	,_refCount: null
	,_name: null
	,_incRefCount: function() {
		if(this._refCount == 0) this._scene.customRenderTargets.push(this._renderTexture);
		return ++this._refCount;
	}
	,_decRefCount: function() {
		this._refCount--;
		if(this._refCount <= 0) this._scene.customRenderTargets.splice(HxOverrides.indexOf(this._scene.customRenderTargets,this._renderTexture,0),1);
		return this._refCount;
	}
	,_update: function() {
		this.setRenderList(this._renderList);
	}
	,setRenderList: function(renderList) {
		this._renderTexture.renderList = renderList;
	}
	,getRenderTexture: function() {
		return this._renderTexture;
	}
	,__class__: com_babylonhx_postprocess_renderpipeline_PostProcessRenderPass
};
var com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipeline = $hx_exports.BABYLON.PostProcessRenderPipeline = function(engine,name) {
	this._engine = engine;
	this._name = name;
	this._renderEffects = new haxe_ds_StringMap();
	this._renderEffectsForIsolatedPass = new haxe_ds_StringMap();
	this._cameras = new haxe_ds_StringMap();
};
$hxClasses["com.babylonhx.postprocess.renderpipeline.PostProcessRenderPipeline"] = com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipeline;
com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipeline.__name__ = ["com","babylonhx","postprocess","renderpipeline","PostProcessRenderPipeline"];
com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipeline.prototype = {
	_engine: null
	,_renderEffects: null
	,_renderEffectsForIsolatedPass: null
	,_cameras: null
	,_name: null
	,get_isSupported: function() {
		var $it0 = this._renderEffects.keys();
		while( $it0.hasNext() ) {
			var renderEffectName = $it0.next();
			if(!this._renderEffects.get(renderEffectName).get_isSupported()) return false;
		}
		return true;
	}
	,addEffect: function(renderEffect) {
		this._renderEffects.set(renderEffect._name,renderEffect);
	}
	,_enableEffect: function(renderEffectName,cameras) {
		var renderEffects = this._renderEffects.get(renderEffectName);
		if(renderEffects == null) return;
		renderEffects._enable(cameras != null?cameras:this._cameras);
	}
	,_disableEffect: function(renderEffectName,cameras) {
		var renderEffects = this._renderEffects.get(renderEffectName);
		if(renderEffects == null) return;
		renderEffects._disable(com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras));
	}
	,_attachCameras: function(cameras,unique) {
		var _cam = com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras);
		var indicesToDelete = [];
		var _g1 = 0;
		var _g = _cam.length;
		while(_g1 < _g) {
			var i = _g1++;
			var camera = _cam[i];
			var cameraName = camera.name;
			if(!this._cameras.exists(cameraName)) this._cameras.set(cameraName,camera); else if(unique) indicesToDelete.push(i);
		}
		var _g11 = 0;
		var _g2 = indicesToDelete.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			_cam.splice(indicesToDelete[i1],1);
		}
		var $it0 = this._renderEffects.keys();
		while( $it0.hasNext() ) {
			var renderEffectName = $it0.next();
			this._renderEffects.get(renderEffectName)._attachCameras(_cam);
		}
	}
	,_detachCameras: function(cameras) {
		var _cam = com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras);
		var $it0 = this._renderEffects.keys();
		while( $it0.hasNext() ) {
			var renderEffectName = $it0.next();
			this._renderEffects.get(renderEffectName)._detachCameras(_cam);
		}
		var _g = 0;
		while(_g < _cam.length) {
			var c = _cam[_g];
			++_g;
			var key = c.name;
			this._cameras.remove(key);
		}
	}
	,_enableDisplayOnlyPass: function(passName,cameras) {
		var _g1 = this;
		var _cam = com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras);
		var pass = null;
		var $it0 = this._renderEffects.keys();
		while( $it0.hasNext() ) {
			var renderEffectName = $it0.next();
			pass = this._renderEffects.get(renderEffectName).getPass(passName);
			if(pass != null) break;
		}
		if(pass == null) return;
		var $it1 = this._renderEffects.keys();
		while( $it1.hasNext() ) {
			var renderEffectName1 = $it1.next();
			this._renderEffects.get(renderEffectName1)._disable(_cam);
		}
		pass._name = "passSampler";
		var _g = 0;
		while(_g < _cam.length) {
			var c = _cam[_g];
			++_g;
			var camera = c;
			var cameraName = c.name;
			var v;
			if(this._renderEffectsForIsolatedPass.get(cameraName) != null) v = this._renderEffectsForIsolatedPass.get(cameraName); else v = new com_babylonhx_postprocess_renderpipeline_PostProcessRenderEffect(this._engine,"passEffect",function() {
				return new com_babylonhx_postprocess_DisplayPassPostProcess("passEffect",1.0,null,null,_g1._engine,true);
			});
			this._renderEffectsForIsolatedPass.set(cameraName,v);
			v;
			this._renderEffectsForIsolatedPass.get(cameraName).emptyPasses();
			this._renderEffectsForIsolatedPass.get(cameraName).addPass(pass);
			this._renderEffectsForIsolatedPass.get(cameraName)._attachCameras(camera);
		}
	}
	,_disableDisplayOnlyPass: function(cameras) {
		var _g1 = this;
		var _cam = com_babylonhx_tools_Tools.MakeArray(cameras != null?cameras:this._cameras);
		var _g = 0;
		while(_g < _cam.length) {
			var c = _cam[_g];
			++_g;
			var camera = c;
			var cameraName = c.name;
			var v;
			if(this._renderEffectsForIsolatedPass.get(cameraName) != null) v = this._renderEffectsForIsolatedPass.get(cameraName); else v = new com_babylonhx_postprocess_renderpipeline_PostProcessRenderEffect(this._engine,"passEffect",function() {
				return new com_babylonhx_postprocess_DisplayPassPostProcess("passEffect",1.0,null,null,_g1._engine,true);
			});
			this._renderEffectsForIsolatedPass.set(cameraName,v);
			v;
			this._renderEffectsForIsolatedPass.get(cameraName)._disable(camera);
		}
		var $it0 = this._renderEffects.keys();
		while( $it0.hasNext() ) {
			var renderEffectName = $it0.next();
			this._renderEffects.get(renderEffectName)._enable(_cam);
		}
	}
	,_update: function() {
		var $it0 = this._renderEffects.keys();
		while( $it0.hasNext() ) {
			var renderEffectName = $it0.next();
			this._renderEffects.get(renderEffectName)._update();
		}
		var $it1 = this._cameras.keys();
		while( $it1.hasNext() ) {
			var key = $it1.next();
			var cameraName = this._cameras.get(key).name;
			if(this._renderEffectsForIsolatedPass.exists(cameraName)) this._renderEffectsForIsolatedPass.get(cameraName)._update();
		}
	}
	,dispose: function(disableDepthRender) {
		if(disableDepthRender == null) disableDepthRender = false;
	}
	,__class__: com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipeline
	,__properties__: {get_isSupported:"get_isSupported"}
};
var com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipelineManager = $hx_exports.BABYLON.PostProcessRenderPipelineManager = function() {
	this._renderPipelines = new haxe_ds_StringMap();
};
$hxClasses["com.babylonhx.postprocess.renderpipeline.PostProcessRenderPipelineManager"] = com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipelineManager;
com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipelineManager.__name__ = ["com","babylonhx","postprocess","renderpipeline","PostProcessRenderPipelineManager"];
com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipelineManager.prototype = {
	_renderPipelines: null
	,addPipeline: function(renderPipeline) {
		this._renderPipelines.set(renderPipeline._name,renderPipeline);
	}
	,attachCamerasToRenderPipeline: function(renderPipelineName,cameras,unique) {
		if(unique == null) unique = false;
		var renderPipeline = this._renderPipelines.get(renderPipelineName);
		if(renderPipeline == null) return;
		renderPipeline._attachCameras(cameras,unique);
	}
	,detachCamerasFromRenderPipeline: function(renderPipelineName,cameras) {
		var renderPipeline = this._renderPipelines.get(renderPipelineName);
		if(renderPipeline == null) return;
		renderPipeline._detachCameras(cameras);
	}
	,enableEffectInPipeline: function(renderPipelineName,renderEffectName,cameras) {
		var renderPipeline = this._renderPipelines.get(renderPipelineName);
		if(renderPipeline == null) return;
		renderPipeline._enableEffect(renderEffectName,cameras);
	}
	,disableEffectInPipeline: function(renderPipelineName,renderEffectName,cameras) {
		var renderPipeline = this._renderPipelines.get(renderPipelineName);
		if(renderPipeline == null) return;
		renderPipeline._disableEffect(renderEffectName,cameras);
	}
	,enableDisplayOnlyPassInPipeline: function(renderPipelineName,passName,cameras) {
		var renderPipeline = this._renderPipelines.get(renderPipelineName);
		if(renderPipeline == null) return;
		renderPipeline._enableDisplayOnlyPass(passName,cameras);
	}
	,disableDisplayOnlyPassInPipeline: function(renderPipelineName,cameras) {
		var renderPipeline = this._renderPipelines.get(renderPipelineName);
		if(renderPipeline == null) return;
		renderPipeline._disableDisplayOnlyPass(cameras);
	}
	,update: function() {
		var $it0 = this._renderPipelines.keys();
		while( $it0.hasNext() ) {
			var renderPipelineName = $it0.next();
			var pipeline = this._renderPipelines.get(renderPipelineName);
			if(!pipeline.get_isSupported()) {
				pipeline.dispose();
				this._renderPipelines.remove(renderPipelineName);
			} else pipeline._update();
		}
	}
	,__class__: com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipelineManager
};
var com_babylonhx_probes_ReflectionProbe = function(name,size,scene,generateMipMaps) {
	if(generateMipMaps == null) generateMipMaps = true;
	this.position = new com_babylonhx_math_Vector3(0,0,0);
	this._add = new com_babylonhx_math_Vector3(0,0,0);
	this._target = new com_babylonhx_math_Vector3(0,0,0);
	this._viewMatrix = com_babylonhx_math_Matrix.FromValues(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,0,0,0,1.0);
	var _g = this;
	this._scene = scene;
	this._scene.reflectionProbes.push(this);
	this._renderTargetTexture = new com_babylonhx_materials_textures_RenderTargetTexture(name,size,scene,generateMipMaps,true,0,true);
	this._renderTargetTexture.onBeforeRender = function(faceIndex) {
		switch(faceIndex) {
		case 0:
			_g._add.copyFromFloats(1,0,0);
			break;
		case 1:
			_g._add.copyFromFloats(-1,0,0);
			break;
		case 2:
			_g._add.copyFromFloats(0,-1,0);
			break;
		case 3:
			_g._add.copyFromFloats(0,1,0);
			break;
		case 4:
			_g._add.copyFromFloats(0,0,1);
			break;
		case 5:
			_g._add.copyFromFloats(0,0,-1);
			break;
		}
		if(_g._attachedMesh != null) _g.position.copyFrom(_g._attachedMesh.getAbsolutePosition());
		_g.position.addToRef(_g._add,_g._target);
		com_babylonhx_math_Matrix.LookAtLHToRef(_g.position,_g._target,new com_babylonhx_math_Vector3(0,1.0,0),_g._viewMatrix);
		scene._viewMatrix = _g._viewMatrix;
		scene._projectionMatrix = _g._projectionMatrix;
		scene._viewMatrix.multiplyToRef(scene._projectionMatrix,scene._transformMatrix);
	};
	this._renderTargetTexture.onAfterUnbind = function() {
		scene.setTransformMatrix(scene.activeCamera.getViewMatrix(),scene.activeCamera.getProjectionMatrix(true));
	};
	this._projectionMatrix = com_babylonhx_math_Matrix.PerspectiveFovLH(Math.PI / 2,1,scene.activeCamera.minZ,scene.activeCamera.maxZ);
};
$hxClasses["com.babylonhx.probes.ReflectionProbe"] = com_babylonhx_probes_ReflectionProbe;
com_babylonhx_probes_ReflectionProbe.__name__ = ["com","babylonhx","probes","ReflectionProbe"];
com_babylonhx_probes_ReflectionProbe.prototype = {
	_scene: null
	,_renderTargetTexture: null
	,_projectionMatrix: null
	,_viewMatrix: null
	,_target: null
	,_add: null
	,_attachedMesh: null
	,position: null
	,name: null
	,size: null
	,get_refreshRate: function() {
		return this._renderTargetTexture.get_refreshRate();
	}
	,set_refreshRate: function(value) {
		this._renderTargetTexture.set_refreshRate(value);
		return value;
	}
	,getScene: function() {
		return this._scene;
	}
	,get_cubeTexture: function() {
		return this._renderTargetTexture;
	}
	,get_renderList: function() {
		return this._renderTargetTexture.renderList;
	}
	,attachToMesh: function(mesh) {
		this._attachedMesh = mesh;
	}
	,dispose: function() {
		var index = HxOverrides.indexOf(this._scene.reflectionProbes,this,0);
		if(index != -1) this._scene.reflectionProbes.splice(index,1);
	}
	,__class__: com_babylonhx_probes_ReflectionProbe
	,__properties__: {get_renderList:"get_renderList",get_cubeTexture:"get_cubeTexture",set_refreshRate:"set_refreshRate",get_refreshRate:"get_refreshRate"}
};
var com_babylonhx_rendering_BoundingBoxRenderer = $hx_exports.BABYLON.BoundingBoxRenderer = function(scene) {
	this.renderList = new com_babylonhx_tools_SmartArray(32);
	this.showBackLines = true;
	this.backColor = new com_babylonhx_math_Color3(0.1,0.1,0.1);
	this.frontColor = new com_babylonhx_math_Color3(1,1,1);
	this._scene = scene;
};
$hxClasses["com.babylonhx.rendering.BoundingBoxRenderer"] = com_babylonhx_rendering_BoundingBoxRenderer;
com_babylonhx_rendering_BoundingBoxRenderer.__name__ = ["com","babylonhx","rendering","BoundingBoxRenderer"];
com_babylonhx_rendering_BoundingBoxRenderer.prototype = {
	frontColor: null
	,backColor: null
	,showBackLines: null
	,renderList: null
	,_scene: null
	,_colorShader: null
	,_vb: null
	,_ib: null
	,_prepareRessources: function() {
		if(this._colorShader != null) return;
		this._colorShader = new com_babylonhx_materials_ShaderMaterial("colorShader",this._scene,"color",{ attributes : ["position"], uniforms : ["worldViewProjection","color"]});
		var engine = this._scene._engine;
		var boxdata = com_babylonhx_mesh_VertexData.CreateBox(1.0);
		this._vb = new com_babylonhx_mesh_VertexBuffer(engine,boxdata.positions,"position",false);
		this._ib = engine.createIndexBuffer([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,7,1,6,2,5,3,4]);
	}
	,reset: function() {
		this.renderList.reset();
	}
	,render: function() {
		if(this.renderList.length == 0) return;
		this._prepareRessources();
		if(!this._colorShader.isReady()) return;
		var engine = this._scene._engine;
		engine._depthCullingState.set_depthMask(false);
		this._colorShader._preBind();
		var _g1 = 0;
		var _g = this.renderList.length;
		while(_g1 < _g) {
			var boundingBoxIndex = _g1++;
			var boundingBox = this.renderList.data[boundingBoxIndex];
			var min = boundingBox.minimum;
			var max = boundingBox.maximum;
			var diff = new com_babylonhx_math_Vector3(max.x - min.x,max.y - min.y,max.z - min.z);
			var median = min.add(new com_babylonhx_math_Vector3(diff.x * 0.5,diff.y * 0.5,diff.z * 0.5));
			var worldMatrix = com_babylonhx_math_Matrix.Scaling(diff.x,diff.y,diff.z).multiply(com_babylonhx_math_Matrix.Translation(median.x,median.y,median.z)).multiply(boundingBox._worldMatrix);
			engine.bindBuffers(this._vb._buffer,this._ib,[3],12,this._colorShader.getEffect());
			if(this.showBackLines) {
				engine._depthCullingState.set_depthFunc(518);
				this._scene._cachedMaterial = null;
				this._colorShader.setColor4("color",this.backColor.toColor4(null));
				this._colorShader.bind(worldMatrix);
				engine.draw(false,0,24);
			}
			engine._depthCullingState.set_depthFunc(513);
			this._scene._cachedMaterial = null;
			this._colorShader.setColor4("color",this.frontColor.toColor4(null));
			this._colorShader.bind(worldMatrix);
			engine.draw(false,0,24);
		}
		this._colorShader.unbind();
		engine._depthCullingState.set_depthFunc(515);
		engine._depthCullingState.set_depthMask(true);
	}
	,dispose: function() {
		if(this._colorShader == null) return;
		this._colorShader.dispose();
		this._vb.dispose();
		this._scene._engine._releaseBuffer(this._ib);
	}
	,__class__: com_babylonhx_rendering_BoundingBoxRenderer
};
var com_babylonhx_rendering_DepthRenderer = $hx_exports.BABYLON.DepthRenderer = function(scene,type) {
	if(type == null) type = 1;
	this._worldViewProjection = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._transformMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._projectionMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this._viewMatrix = com_babylonhx_math_Matrix.FromValues(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	var _g = this;
	this._scene = scene;
	var engine = scene._engine;
	this._depthMap = new com_babylonhx_materials_textures_RenderTargetTexture("depthMap",{ width : engine.getRenderWidth(), height : engine.getRenderHeight()},this._scene,false,true,type);
	this._depthMap.wrapU = 0;
	this._depthMap.wrapV = 0;
	this._depthMap.set_refreshRate(1);
	this._depthMap.renderParticles = false;
	this._depthMap.renderList = null;
	this._depthMap.onClear = function(engine2) {
		engine2.clear(new com_babylonhx_math_Color4(1.0,1.0,1.0,1.0),true,true);
	};
	var renderSubMesh = function(subMesh) {
		var mesh = subMesh._renderingMesh;
		var scene1 = _g._scene;
		var engine1 = scene1._engine;
		engine1.setState(subMesh.getMaterial().backFaceCulling,null,null,null);
		var batch = mesh._getInstancesRenderList(subMesh._id);
		if(batch.mustReturn) return;
		var hardwareInstancedRendering = engine1.getCaps().instancedArrays != null && batch.visibleInstances[subMesh._id] != null;
		if(_g.isReady(subMesh,hardwareInstancedRendering)) {
			engine1.enableEffect(_g._effect);
			mesh._bind(subMesh,_g._effect,0);
			var material = subMesh.getMaterial();
			_g._effect.setMatrix("viewProjection",scene1._transformMatrix);
			_g._effect.setFloat("far",scene1.activeCamera.maxZ);
			if(material != null && material.needAlphaTesting()) {
				var alphaTexture = material.getAlphaTestTexture();
				_g._effect.setTexture("diffuseSampler",alphaTexture);
				_g._effect.setMatrix("diffuseMatrix",alphaTexture.getTextureMatrix());
			}
			if(mesh.get_useBones() && mesh.computeBonesUsingShaders) _g._effect.setMatrices("mBones",mesh.get_skeleton().getTransformMatrices());
			mesh._processRendering(subMesh,_g._effect,0,batch,hardwareInstancedRendering,function(isInstance,world) {
				_g._effect.setMatrix("world",world);
			});
		}
	};
	this._depthMap.customRenderFunction = function(opaqueSubMeshes,alphaTestSubMeshes) {
		var _g1 = 0;
		var _g2 = opaqueSubMeshes.length;
		while(_g1 < _g2) {
			var index = _g1++;
			renderSubMesh(opaqueSubMeshes.data[index]);
		}
		var _g11 = 0;
		var _g3 = alphaTestSubMeshes.length;
		while(_g11 < _g3) {
			var index1 = _g11++;
			renderSubMesh(alphaTestSubMeshes.data[index1]);
		}
	};
};
$hxClasses["com.babylonhx.rendering.DepthRenderer"] = com_babylonhx_rendering_DepthRenderer;
com_babylonhx_rendering_DepthRenderer.__name__ = ["com","babylonhx","rendering","DepthRenderer"];
com_babylonhx_rendering_DepthRenderer.prototype = {
	_scene: null
	,_depthMap: null
	,_effect: null
	,_viewMatrix: null
	,_projectionMatrix: null
	,_transformMatrix: null
	,_worldViewProjection: null
	,_cachedDefines: null
	,isReady: function(subMesh,useInstances) {
		var defines = [];
		var attribs = ["position"];
		var mesh = subMesh._mesh;
		var scene = mesh._scene;
		var material = subMesh.getMaterial();
		if(material != null && material.needAlphaTesting()) {
			defines.push("#define ALPHATEST");
			if(mesh.isVerticesDataPresent("uv")) {
				attribs.push("uv");
				defines.push("#define UV1");
			}
			if(mesh.isVerticesDataPresent("uv2")) {
				attribs.push("uv2");
				defines.push("#define UV2");
			}
		}
		if(mesh.get_useBones() && mesh.computeBonesUsingShaders) {
			attribs.push("matricesIndices");
			attribs.push("matricesWeights");
			if(mesh.numBoneInfluencers > 4) {
				attribs.push("matricesIndicesExtra");
				attribs.push("matricesWeightsExtra");
			}
			defines.push("#define NUM_BONE_INFLUENCERS " + mesh.numBoneInfluencers);
			defines.push("#define BonesPerMesh " + (mesh.get_skeleton().bones.length + 1));
		}
		if(useInstances) {
			defines.push("#define INSTANCES");
			attribs.push("world0");
			attribs.push("world1");
			attribs.push("world2");
			attribs.push("world3");
		}
		var join = defines.join("\n");
		if(this._cachedDefines != join) {
			this._cachedDefines = join;
			this._effect = this._scene._engine.createEffect("depth",attribs,["world","mBones","viewProjection","diffuseMatrix","far"],["diffuseSampler"],join);
		}
		return this._effect._isReady;
	}
	,getDepthMap: function() {
		return this._depthMap;
	}
	,dispose: function() {
		this._depthMap.dispose();
	}
	,__class__: com_babylonhx_rendering_DepthRenderer
};
var com_babylonhx_rendering_FaceAdjacencies = function() {
	this.edgesConnectedCount = 0;
	this.edges = [];
};
$hxClasses["com.babylonhx.rendering.FaceAdjacencies"] = com_babylonhx_rendering_FaceAdjacencies;
com_babylonhx_rendering_FaceAdjacencies.__name__ = ["com","babylonhx","rendering","FaceAdjacencies"];
com_babylonhx_rendering_FaceAdjacencies.prototype = {
	edges: null
	,p0: null
	,p1: null
	,p2: null
	,edgesConnectedCount: null
	,__class__: com_babylonhx_rendering_FaceAdjacencies
};
var com_babylonhx_rendering_EdgesRenderer = function(source,epsilon,checkVerticesInsteadOfIndices) {
	if(checkVerticesInsteadOfIndices == null) checkVerticesInsteadOfIndices = false;
	if(epsilon == null) epsilon = 0.95;
	this._checkVerticesInsteadOfIndices = false;
	this._buffers = new haxe_ds_StringMap();
	this._linesIndices = [];
	this._linesNormals = [];
	this._linesPositions = [];
	this._source = source;
	this._checkVerticesInsteadOfIndices = checkVerticesInsteadOfIndices;
	this._epsilon = epsilon;
	this._prepareRessources();
	this._generateEdgesLines();
};
$hxClasses["com.babylonhx.rendering.EdgesRenderer"] = com_babylonhx_rendering_EdgesRenderer;
com_babylonhx_rendering_EdgesRenderer.__name__ = ["com","babylonhx","rendering","EdgesRenderer"];
com_babylonhx_rendering_EdgesRenderer.__interfaces__ = [com_babylonhx_ISmartArrayCompatible];
com_babylonhx_rendering_EdgesRenderer.prototype = {
	_source: null
	,_linesPositions: null
	,_linesNormals: null
	,_linesIndices: null
	,_epsilon: null
	,_indicesCount: null
	,_lineShader: null
	,_vb0: null
	,_vb1: null
	,_ib: null
	,_buffers: null
	,_checkVerticesInsteadOfIndices: null
	,__smartArrayFlags: null
	,_prepareRessources: function() {
		if(this._lineShader != null) return;
		this._lineShader = new com_babylonhx_materials_ShaderMaterial("lineShader",this._source._scene,"line",{ attributes : ["position","normal"], uniforms : ["worldViewProjection","color","width","aspectRatio"]});
		this._lineShader.disableDepthWrite = true;
		this._lineShader.backFaceCulling = false;
	}
	,dispose: function() {
		this._vb0.dispose();
		this._vb1.dispose();
		this._source._scene._engine._releaseBuffer(this._ib);
		this._lineShader.dispose();
	}
	,_processEdgeForAdjacencies: function(pa,pb,p0,p1,p2) {
		if(pa == p0 && pb == p1 || pa == p1 && pb == p0) return 0;
		if(pa == p1 && pb == p2 || pa == p2 && pb == p1) return 1;
		if(pa == p2 && pb == p0 || pa == p0 && pb == p2) return 2;
		return -1;
	}
	,_processEdgeForAdjacenciesWithVertices: function(pa,pb,p0,p1,p2) {
		if(p0 != null && com_babylonhx_tools_Tools.WithinEpsilon(pa.x,p0.x,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pa.y,p0.y,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pa.z,p0.z,0.001) && (p1 != null && com_babylonhx_tools_Tools.WithinEpsilon(pb.x,p1.x,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pb.y,p1.y,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pb.z,p1.z,0.001)) || p1 != null && com_babylonhx_tools_Tools.WithinEpsilon(pa.x,p1.x,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pa.y,p1.y,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pa.z,p1.z,0.001) && (p0 != null && com_babylonhx_tools_Tools.WithinEpsilon(pb.x,p0.x,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pb.y,p0.y,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pb.z,p0.z,0.001))) return 0;
		if(p1 != null && com_babylonhx_tools_Tools.WithinEpsilon(pa.x,p1.x,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pa.y,p1.y,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pa.z,p1.z,0.001) && (p2 != null && com_babylonhx_tools_Tools.WithinEpsilon(pb.x,p2.x,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pb.y,p2.y,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pb.z,p2.z,0.001)) || p2 != null && com_babylonhx_tools_Tools.WithinEpsilon(pa.x,p2.x,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pa.y,p2.y,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pa.z,p2.z,0.001) && (p1 != null && com_babylonhx_tools_Tools.WithinEpsilon(pb.x,p1.x,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pb.y,p1.y,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pb.z,p1.z,0.001))) return 1;
		if(p2 != null && com_babylonhx_tools_Tools.WithinEpsilon(pa.x,p2.x,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pa.y,p2.y,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pa.z,p2.z,0.001) && (p0 != null && com_babylonhx_tools_Tools.WithinEpsilon(pb.x,p0.x,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pb.y,p0.y,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pb.z,p0.z,0.001)) || p0 != null && com_babylonhx_tools_Tools.WithinEpsilon(pa.x,p0.x,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pa.y,p0.y,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pa.z,p0.z,0.001) && (p2 != null && com_babylonhx_tools_Tools.WithinEpsilon(pb.x,p2.x,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pb.y,p2.y,0.001) && com_babylonhx_tools_Tools.WithinEpsilon(pb.z,p2.z,0.001))) return 2;
		return -1;
	}
	,_checkEdge: function(faceIndex,edge,faceNormals,p0,p1) {
		if(edge == null) edge = -1;
		var needToCreateLine = false;
		if(edge == -1) needToCreateLine = true; else {
			var dotProduct = com_babylonhx_math_Vector3.Dot(faceNormals[faceIndex],faceNormals[edge]);
			needToCreateLine = dotProduct < this._epsilon;
		}
		if(needToCreateLine) {
			var offset = this._linesPositions.length / 3 | 0;
			var normal = new com_babylonhx_math_Vector3(p0.x - p1.x,p0.y - p1.y,p0.z - p1.z);
			normal.normalize();
			this._linesPositions.push(p0.x);
			this._linesPositions.push(p0.y);
			this._linesPositions.push(p0.z);
			this._linesPositions.push(p0.x);
			this._linesPositions.push(p0.y);
			this._linesPositions.push(p0.z);
			this._linesPositions.push(p1.x);
			this._linesPositions.push(p1.y);
			this._linesPositions.push(p1.z);
			this._linesPositions.push(p1.x);
			this._linesPositions.push(p1.y);
			this._linesPositions.push(p1.z);
			this._linesNormals.push(p1.x);
			this._linesNormals.push(p1.y);
			this._linesNormals.push(p1.z);
			this._linesNormals.push(-1);
			this._linesNormals.push(p1.x);
			this._linesNormals.push(p1.y);
			this._linesNormals.push(p1.z);
			this._linesNormals.push(1);
			this._linesNormals.push(p0.x);
			this._linesNormals.push(p0.y);
			this._linesNormals.push(p0.z);
			this._linesNormals.push(-1);
			this._linesNormals.push(p0.x);
			this._linesNormals.push(p0.y);
			this._linesNormals.push(p0.z);
			this._linesNormals.push(1);
			this._linesIndices.push(offset);
			this._linesIndices.push(offset + 1);
			this._linesIndices.push(offset + 2);
			this._linesIndices.push(offset);
			this._linesIndices.push(offset + 2);
			this._linesIndices.push(offset + 3);
		}
	}
	,_generateEdgesLines: function() {
		var positions = this._source.getVerticesData("position");
		var indices = this._source.getIndices();
		var adjacencies = [];
		var faceNormals = [];
		var faceAdjacencies;
		var index = 0;
		while(index < indices.length) {
			faceAdjacencies = new com_babylonhx_rendering_FaceAdjacencies();
			var p0Index = indices[index];
			var p1Index = indices[index + 1];
			var p2Index = indices[index + 2];
			faceAdjacencies.p0 = new com_babylonhx_math_Vector3(positions[p0Index * 3],positions[p0Index * 3 + 1],positions[p0Index * 3 + 2]);
			faceAdjacencies.p1 = new com_babylonhx_math_Vector3(positions[p1Index * 3],positions[p1Index * 3 + 1],positions[p1Index * 3 + 2]);
			faceAdjacencies.p2 = new com_babylonhx_math_Vector3(positions[p2Index * 3],positions[p2Index * 3 + 1],positions[p2Index * 3 + 2]);
			var faceNormal = com_babylonhx_math_Vector3.Cross(faceAdjacencies.p1.subtract(faceAdjacencies.p0),faceAdjacencies.p2.subtract(faceAdjacencies.p1));
			faceNormal.normalize();
			faceNormals.push(faceNormal);
			adjacencies.push(faceAdjacencies);
			index += 3;
		}
		var _g1 = 0;
		var _g = adjacencies.length;
		while(_g1 < _g) {
			var index1 = _g1++;
			faceAdjacencies = adjacencies[index1];
			var _g3 = index1 + 1;
			var _g2 = adjacencies.length;
			while(_g3 < _g2) {
				var otherIndex = _g3++;
				var otherFaceAdjacencies = adjacencies[otherIndex];
				if(faceAdjacencies.edgesConnectedCount == 3) break;
				if(otherFaceAdjacencies.edgesConnectedCount == 3) continue;
				var otherP0 = indices[otherIndex * 3];
				var otherP1 = indices[otherIndex * 3 + 1];
				var otherP2 = indices[otherIndex * 3 + 2];
				var _g4 = 0;
				while(_g4 < 3) {
					var edgeIndex = _g4++;
					var otherEdgeIndex = 0;
					if(faceAdjacencies.edges.length < edgeIndex) continue;
					switch(edgeIndex) {
					case 0:
						if(this._checkVerticesInsteadOfIndices) otherEdgeIndex = this._processEdgeForAdjacenciesWithVertices(faceAdjacencies.p0,faceAdjacencies.p1,otherFaceAdjacencies.p0,otherFaceAdjacencies.p1,otherFaceAdjacencies.p2); else otherEdgeIndex = this._processEdgeForAdjacencies(indices[index1 * 3],indices[index1 * 3 + 1],otherP0,otherP1,otherP2);
						break;
					case 1:
						if(this._checkVerticesInsteadOfIndices) otherEdgeIndex = this._processEdgeForAdjacenciesWithVertices(faceAdjacencies.p1,faceAdjacencies.p2,otherFaceAdjacencies.p0,otherFaceAdjacencies.p1,otherFaceAdjacencies.p2); else otherEdgeIndex = this._processEdgeForAdjacencies(indices[index1 * 3 + 1],indices[index1 * 3 + 2],otherP0,otherP1,otherP2);
						break;
					case 2:
						if(this._checkVerticesInsteadOfIndices) otherEdgeIndex = this._processEdgeForAdjacenciesWithVertices(faceAdjacencies.p2,faceAdjacencies.p0,otherFaceAdjacencies.p0,otherFaceAdjacencies.p1,otherFaceAdjacencies.p2); else otherEdgeIndex = this._processEdgeForAdjacencies(indices[index1 * 3 + 2],indices[index1 * 3],otherP0,otherP1,otherP2);
						break;
					}
					if(otherEdgeIndex == -1) continue;
					faceAdjacencies.edges[edgeIndex] = otherIndex;
					otherFaceAdjacencies.edges[otherEdgeIndex] = index1;
					faceAdjacencies.edgesConnectedCount++;
					otherFaceAdjacencies.edgesConnectedCount++;
					if(faceAdjacencies.edgesConnectedCount == 3) break;
				}
			}
		}
		var _g11 = 0;
		var _g5 = adjacencies.length;
		while(_g11 < _g5) {
			var index2 = _g11++;
			var current = adjacencies[index2];
			this._checkEdge(index2,current.edges[0],faceNormals,current.p0,current.p1);
			this._checkEdge(index2,current.edges[1],faceNormals,current.p1,current.p2);
			this._checkEdge(index2,current.edges[2],faceNormals,current.p2,current.p0);
		}
		var engine = this._source._scene._engine;
		this._vb0 = new com_babylonhx_mesh_VertexBuffer(engine,this._linesPositions,"position",false);
		this._vb1 = new com_babylonhx_mesh_VertexBuffer(engine,this._linesNormals,"normal",false,false,4);
		var v = this._vb0;
		this._buffers.set("position",v);
		v;
		var v1 = this._vb1;
		this._buffers.set("normal",v1);
		v1;
		this._ib = engine.createIndexBuffer(this._linesIndices);
		this._indicesCount = this._linesIndices.length;
	}
	,render: function() {
		if(!this._lineShader.isReady()) return;
		var scene = this._source._scene;
		var engine = scene._engine;
		this._lineShader._preBind();
		engine.bindMultiBuffers(this._buffers,this._ib,this._lineShader.getEffect());
		scene._cachedMaterial = null;
		this._lineShader.setColor4("color",this._source.edgesColor);
		this._lineShader.setFloat("width",this._source.edgesWidth / 50.0);
		this._lineShader.setFloat("aspectRatio",engine.getAspectRatio(scene.activeCamera));
		this._lineShader.bind(this._source.getWorldMatrix());
		engine.draw(true,0,this._indicesCount);
		this._lineShader.unbind();
		engine._depthCullingState.set_depthMask(true);
	}
	,__class__: com_babylonhx_rendering_EdgesRenderer
};
var com_babylonhx_rendering_OutlineRenderer = $hx_exports.BABYLON.OutlineRenderer = function(scene) {
	this._scene = scene;
};
$hxClasses["com.babylonhx.rendering.OutlineRenderer"] = com_babylonhx_rendering_OutlineRenderer;
com_babylonhx_rendering_OutlineRenderer.__name__ = ["com","babylonhx","rendering","OutlineRenderer"];
com_babylonhx_rendering_OutlineRenderer.prototype = {
	_scene: null
	,_effect: null
	,_cachedDefines: null
	,render: function(subMesh,batch,useOverlay) {
		if(useOverlay == null) useOverlay = false;
		var _g = this;
		var scene = this._scene;
		var engine = this._scene._engine;
		var hardwareInstancedRendering = engine.getCaps().instancedArrays != null && batch.visibleInstances[subMesh._id] != null;
		if(!this.isReady(subMesh,hardwareInstancedRendering)) return;
		var mesh = subMesh._renderingMesh;
		var material = subMesh.getMaterial();
		engine.enableEffect(this._effect);
		this._effect.setFloat("offset",useOverlay?0:mesh.outlineWidth);
		this._effect.setColor4("color",useOverlay?mesh.overlayColor:mesh.outlineColor,useOverlay?mesh.overlayAlpha:1.0);
		this._effect.setMatrix("viewProjection",scene._transformMatrix);
		if(mesh.get_useBones() && mesh.computeBonesUsingShaders) this._effect.setMatrices("mBones",mesh.get_skeleton().getTransformMatrices());
		mesh._bind(subMesh,this._effect,0);
		if(material != null && material.needAlphaTesting()) {
			var alphaTexture = material.getAlphaTestTexture();
			this._effect.setTexture("diffuseSampler",alphaTexture);
			this._effect.setMatrix("diffuseMatrix",alphaTexture.getTextureMatrix());
		}
		mesh._processRendering(subMesh,this._effect,0,batch,hardwareInstancedRendering,function(isInstance,world) {
			_g._effect.setMatrix("world",world);
		});
	}
	,isReady: function(subMesh,useInstances) {
		var defines = [];
		var attribs = ["position","normal"];
		var mesh = subMesh._mesh;
		var material = subMesh.getMaterial();
		if(material != null && material.needAlphaTesting()) {
			defines.push("#define ALPHATEST");
			if(mesh.isVerticesDataPresent("uv")) {
				attribs.push("uv");
				defines.push("#define UV1");
			}
			if(mesh.isVerticesDataPresent("uv2")) {
				attribs.push("uv2");
				defines.push("#define UV2");
			}
		}
		if(mesh.get_useBones() && mesh.computeBonesUsingShaders) {
			attribs.push("matricesIndices");
			attribs.push("matricesWeights");
			if(mesh.numBoneInfluencers > 4) {
				attribs.push("matricesIndicesExtra");
				attribs.push("matricesWeightsExtra");
			}
			defines.push("#define NUM_BONE_INFLUENCERS " + mesh.numBoneInfluencers);
			defines.push("#define BonesPerMesh " + (mesh.get_skeleton().bones.length + 1));
		} else defines.push("#define NUM_BONE_INFLUENCERS 0");
		if(useInstances) {
			defines.push("#define INSTANCES");
			attribs.push("world0");
			attribs.push("world1");
			attribs.push("world2");
			attribs.push("world3");
		}
		var join = defines.join("\n");
		if(this._cachedDefines != join) {
			this._cachedDefines = join;
			this._effect = this._scene._engine.createEffect("outline",attribs,["world","mBones","viewProjection","diffuseMatrix","offset","color"],["diffuseSampler"],join);
		}
		return this._effect._isReady;
	}
	,__class__: com_babylonhx_rendering_OutlineRenderer
};
var com_babylonhx_rendering_RenderingGroup = $hx_exports.BABYLON.RenderingGroup = function(index,scene) {
	this.submesh = null;
	this._activeVertices = 0;
	this._alphaTestSubMeshes = new com_babylonhx_tools_SmartArray();
	this._transparentSubMeshes = new com_babylonhx_tools_SmartArray();
	this._opaqueSubMeshes = new com_babylonhx_tools_SmartArray();
	this._scene = scene;
	this.index = index;
};
$hxClasses["com.babylonhx.rendering.RenderingGroup"] = com_babylonhx_rendering_RenderingGroup;
com_babylonhx_rendering_RenderingGroup.__name__ = ["com","babylonhx","rendering","RenderingGroup"];
com_babylonhx_rendering_RenderingGroup.prototype = {
	index: null
	,_scene: null
	,_opaqueSubMeshes: null
	,_transparentSubMeshes: null
	,_alphaTestSubMeshes: null
	,_activeVertices: null
	,onBeforeTransparentRendering: null
	,submesh: null
	,render: function(customRenderFunction) {
		if(customRenderFunction != null) {
			customRenderFunction(this._opaqueSubMeshes,this._alphaTestSubMeshes,this._transparentSubMeshes);
			return true;
		}
		if(this._opaqueSubMeshes.length == 0 && this._alphaTestSubMeshes.length == 0 && this._transparentSubMeshes.length == 0) {
			if(this.onBeforeTransparentRendering != null) this.onBeforeTransparentRendering();
			return false;
		}
		var engine = this._scene._engine;
		var _g1 = 0;
		var _g = this._opaqueSubMeshes.length;
		while(_g1 < _g) {
			var subIndex = _g1++;
			this.submesh = this._opaqueSubMeshes.data[subIndex];
			this.submesh.render(false);
		}
		engine._alphaTest = true;
		var _g11 = 0;
		var _g2 = this._alphaTestSubMeshes.length;
		while(_g11 < _g2) {
			var subIndex1 = _g11++;
			this.submesh = this._alphaTestSubMeshes.data[subIndex1];
			this.submesh.render(false);
		}
		engine._alphaTest = false;
		if(this.onBeforeTransparentRendering != null) this.onBeforeTransparentRendering();
		if(this._transparentSubMeshes.length > 0) {
			var _g12 = 0;
			var _g3 = this._transparentSubMeshes.length;
			while(_g12 < _g3) {
				var subIndex2 = _g12++;
				this.submesh = this._transparentSubMeshes.data[subIndex2];
				this.submesh._alphaIndex = this.submesh._mesh.alphaIndex;
				this.submesh._distanceToCamera = this.submesh._boundingInfo.boundingSphere.centerWorld.subtract(this._scene.activeCamera.get_globalPosition()).length();
			}
			var sortedArray = this._transparentSubMeshes.data.slice(0,this._transparentSubMeshes.length);
			sortedArray.sort(function(a,b) {
				if(a._alphaIndex > b._alphaIndex) return 1;
				if(a._alphaIndex < b._alphaIndex) return -1;
				if(a._distanceToCamera < b._distanceToCamera) return 1;
				if(a._distanceToCamera > b._distanceToCamera) return -1;
				return 0;
			});
			var _g13 = 0;
			var _g4 = sortedArray.length;
			while(_g13 < _g4) {
				var subIndex3 = _g13++;
				this.submesh = sortedArray[subIndex3];
				this.submesh.render(true);
			}
			if(engine._alphaMode == 0) null; else {
				switch(0) {
				case 0:
					engine._depthCullingState.set_depthMask(true);
					engine._alphaState.set_alphaBlend(false);
					break;
				case 2:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 6:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 1:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(770,1,0,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 3:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(0,769,1,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 4:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(774,0,1,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				case 5:
					engine._depthCullingState.set_depthMask(false);
					engine._alphaState.setAlphaBlendFunctionParameters(770,769,1,1);
					engine._alphaState.set_alphaBlend(true);
					break;
				}
				engine._alphaMode = 0;
			}
		}
		return true;
	}
	,prepare: function() {
		this._opaqueSubMeshes.reset();
		this._transparentSubMeshes.reset();
		this._alphaTestSubMeshes.reset();
	}
	,material: null
	,mesh: null
	,dispatch: function(subMesh) {
		this.material = subMesh.getMaterial();
		this.mesh = subMesh._mesh;
		if(this.material.needAlphaBlending() || this.mesh.get_visibility() < 1.0 || this.mesh.hasVertexAlpha) this._transparentSubMeshes.push(subMesh); else if(this.material.needAlphaTesting()) this._alphaTestSubMeshes.push(subMesh); else this._opaqueSubMeshes.push(subMesh);
	}
	,__class__: com_babylonhx_rendering_RenderingGroup
};
var com_babylonhx_sprites_Sprite = $hx_exports.BABYLON.Sprite = function(name,manager) {
	this._time = 0;
	this._frameCount = 0;
	this._direction = 1;
	this._delay = 0;
	this._toIndex = 0;
	this._fromIndex = 0;
	this._loopAnimation = false;
	this._animationStarted = false;
	this.isPickable = false;
	this.animations = [];
	this.invertV = false;
	this.invertU = false;
	this.cellIndex = 0;
	this.angle = 0;
	this.height = 1.0;
	this.width = 1.0;
	this.color = new com_babylonhx_math_Color4(1.0,1.0,1.0,1.0);
	this.name = name;
	this._manager = manager;
	this._manager.sprites.push(this);
	this.position = new com_babylonhx_math_Vector3(0,0,0);
};
$hxClasses["com.babylonhx.sprites.Sprite"] = com_babylonhx_sprites_Sprite;
com_babylonhx_sprites_Sprite.__name__ = ["com","babylonhx","sprites","Sprite"];
com_babylonhx_sprites_Sprite.prototype = {
	name: null
	,position: null
	,color: null
	,width: null
	,height: null
	,angle: null
	,cellIndex: null
	,invertU: null
	,invertV: null
	,disposeWhenFinishedAnimating: null
	,animations: null
	,isPickable: null
	,actionManager: null
	,_animationStarted: null
	,_loopAnimation: null
	,_fromIndex: null
	,_toIndex: null
	,_delay: null
	,_direction: null
	,_frameCount: null
	,_manager: null
	,_time: null
	,get_size: function() {
		return this.width;
	}
	,set_size: function(value) {
		this.width = value;
		this.height = value;
		return value;
	}
	,playAnimation: function(from,to,loop,delay) {
		this._fromIndex = from;
		this._toIndex = to;
		this._loopAnimation = loop;
		this._delay = delay;
		this._animationStarted = true;
		if(from < to) this._direction = 1; else this._direction = -1;
		this.cellIndex = from;
		this._time = 0;
	}
	,stopAnimation: function() {
		this._animationStarted = false;
	}
	,_animate: function(deltaTime) {
		if(this._animationStarted) {
			this._time += deltaTime;
			if(this._time > this._delay) {
				this._time = this._time % this._delay;
				this.cellIndex += this._direction;
				if(this.cellIndex == this._toIndex) {
					if(this._loopAnimation) this.cellIndex = this._fromIndex; else {
						this._animationStarted = false;
						if(this.disposeWhenFinishedAnimating) this.dispose();
					}
				}
			}
		}
	}
	,dispose: function() {
		var _g1 = 0;
		var _g = this._manager.sprites.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this._manager.sprites[i] == this) this._manager.sprites.splice(i,1);
		}
	}
	,__class__: com_babylonhx_sprites_Sprite
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var com_babylonhx_sprites_SpriteManager = $hx_exports.BABYLON.SpriteManager = function(name,imgUrl,capacity,cellSize,scene,epsilon,samplingMode) {
	if(samplingMode == null) samplingMode = 3;
	this._vertexStrideSize = 64;
	this._vertexDeclaration = [4,4,4,4];
	this.isPickable = false;
	this.fogEnabled = true;
	this.layerMask = 268435455;
	this.renderingGroupId = 0;
	this.sprites = [];
	this.name = name;
	this.cellSize = cellSize;
	this._capacity = capacity;
	this._spriteTexture = new com_babylonhx_materials_textures_Texture(imgUrl,scene,true,false,samplingMode);
	this._spriteTexture.wrapU = 0;
	this._spriteTexture.wrapV = 0;
	if(epsilon == null) this._epsilon = 0.01; else this._epsilon = epsilon;
	if(samplingMode == 1) this._spriteTexture.anisotropicFilteringLevel = 1;
	this._scene = scene;
	this._scene.spriteManagers.push(this);
	this._vertexBuffer = scene._engine.createDynamicVertexBuffer(capacity * this._vertexStrideSize * 4);
	var indices = [];
	var index = 0;
	var _g = 0;
	while(_g < capacity) {
		var count = _g++;
		indices.push(index);
		indices.push(index + 1);
		indices.push(index + 2);
		indices.push(index);
		indices.push(index + 2);
		indices.push(index + 3);
		index += 4;
	}
	this._indexBuffer = scene._engine.createIndexBuffer(indices);
	var elements = capacity * this._vertexStrideSize;
	var this1;
	if(elements != null) this1 = new Float32Array(elements); else this1 = null;
	this._vertices = this1;
	this._effectBase = this._scene._engine.createEffect("sprites",["position","options","cellInfo","color"],["view","projection","textureInfos","alphaTest"],["diffuseSampler"],"");
	this._effectFog = this._scene._engine.createEffect("sprites",["position","options","cellInfo","color"],["view","projection","textureInfos","alphaTest","vFogInfos","vFogColor"],["diffuseSampler"],"#define FOG");
};
$hxClasses["com.babylonhx.sprites.SpriteManager"] = com_babylonhx_sprites_SpriteManager;
com_babylonhx_sprites_SpriteManager.__name__ = ["com","babylonhx","sprites","SpriteManager"];
com_babylonhx_sprites_SpriteManager.prototype = {
	name: null
	,sprites: null
	,renderingGroupId: null
	,layerMask: null
	,onDispose: null
	,fogEnabled: null
	,isPickable: null
	,cellSize: null
	,_capacity: null
	,_spriteTexture: null
	,_epsilon: null
	,_scene: null
	,_vertexDeclaration: null
	,_vertexStrideSize: null
	,_vertexBuffer: null
	,_indexBuffer: null
	,_vertices: null
	,_effectBase: null
	,_effectFog: null
	,_appendSpriteVertex: function(index,sprite,offsetX,offsetY,rowSize) {
		var arrayOffset = index * 16;
		if(offsetX == 0) offsetX = this._epsilon; else if(offsetX == 1) offsetX = 1 - this._epsilon;
		if(offsetY == 0) offsetY = this._epsilon; else if(offsetY == 1) offsetY = 1 - this._epsilon;
		this._vertices[arrayOffset] = sprite.position.x;
		this._vertices[arrayOffset + 1] = sprite.position.y;
		this._vertices[arrayOffset + 2] = sprite.position.z;
		this._vertices[arrayOffset + 3] = sprite.angle;
		this._vertices[arrayOffset + 4] = sprite.width;
		this._vertices[arrayOffset + 5] = sprite.height;
		this._vertices[arrayOffset + 6] = offsetX;
		this._vertices[arrayOffset + 7] = offsetY;
		if(sprite.invertU) this._vertices[arrayOffset + 8] = 1; else this._vertices[arrayOffset + 8] = 0;
		if(sprite.invertV) this._vertices[arrayOffset + 9] = 1; else this._vertices[arrayOffset + 9] = 0;
		var offset = sprite.cellIndex / rowSize | 0;
		this._vertices[arrayOffset + 10] = sprite.cellIndex - offset * rowSize;
		this._vertices[arrayOffset + 11] = offset;
		this._vertices[arrayOffset + 12] = sprite.color.r;
		this._vertices[arrayOffset + 13] = sprite.color.g;
		this._vertices[arrayOffset + 14] = sprite.color.b;
		this._vertices[arrayOffset + 15] = sprite.color.a;
	}
	,intersects: function(ray,camera,predicate,fastCheck) {
		if(fastCheck == null) fastCheck = false;
		var count = Std["int"](Math.min(this._capacity,this.sprites.length));
		var min = new com_babylonhx_math_Vector3(0,0,0);
		var max = new com_babylonhx_math_Vector3(0,0,0);
		var distance = Infinity;
		var currentSprite = null;
		var cameraSpacePosition = new com_babylonhx_math_Vector3(0,0,0);
		var cameraView = camera.getViewMatrix();
		var _g = 0;
		while(_g < count) {
			var index = _g++;
			var sprite = this.sprites[index];
			if(sprite == null) continue;
			if(predicate != null) {
				if(!predicate(sprite)) continue;
			} else if(!sprite.isPickable) continue;
			com_babylonhx_math_Vector3.TransformCoordinatesToRef(sprite.position,cameraView,cameraSpacePosition);
			min.x = cameraSpacePosition.x - sprite.width / 2;
			min.y = cameraSpacePosition.y - sprite.height / 2;
			min.z = cameraSpacePosition.z;
			min;
			max.x = cameraSpacePosition.x + sprite.width / 2;
			max.y = cameraSpacePosition.y + sprite.height / 2;
			max.z = cameraSpacePosition.z;
			max;
			if(ray.intersectsBoxMinMax(min,max)) {
				var currentDistance = Math.sqrt(com_babylonhx_math_Vector3.DistanceSquared(cameraSpacePosition,ray.origin));
				if(distance > currentDistance) {
					distance = currentDistance;
					currentSprite = sprite;
					if(fastCheck) break;
				}
			}
		}
		if(currentSprite != null) {
			var result = new com_babylonhx_collisions_PickingInfo();
			result.hit = true;
			result.pickedSprite = currentSprite;
			result.distance = distance;
			return result;
		}
		return null;
	}
	,render: function() {
		if(!this._effectBase._isReady || !this._effectFog._isReady || this._spriteTexture == null || !this._spriteTexture.isReady()) return;
		var engine = this._scene._engine;
		var baseSize = this._spriteTexture.getBaseSize();
		var deltaTime = engine.deltaTime;
		var max = Math.min(this._capacity,this.sprites.length);
		var rowSize = baseSize.width / this.cellSize;
		var offset = 0;
		var _g = 0;
		while(_g < max) {
			var index = _g++;
			var sprite = this.sprites[index];
			if(sprite == null) continue;
			if(sprite._animationStarted) {
				sprite._time += deltaTime;
				if(sprite._time > sprite._delay) {
					sprite._time = sprite._time % sprite._delay;
					sprite.cellIndex += sprite._direction;
					if(sprite.cellIndex == sprite._toIndex) {
						if(sprite._loopAnimation) sprite.cellIndex = sprite._fromIndex; else {
							sprite._animationStarted = false;
							if(sprite.disposeWhenFinishedAnimating) sprite.dispose();
						}
					}
				}
			}
			this._appendSpriteVertex(offset++,sprite,0,0,rowSize);
			this._appendSpriteVertex(offset++,sprite,1,0,rowSize);
			this._appendSpriteVertex(offset++,sprite,1,1,rowSize);
			this._appendSpriteVertex(offset++,sprite,0,1,rowSize);
		}
		engine.updateDynamicVertexBuffer(this._vertexBuffer,this._vertices,null);
		var effect = this._effectBase;
		if(this._scene.fogEnabled && this._scene.fogMode != com_babylonhx_Scene.FOGMODE_NONE && this.fogEnabled) effect = this._effectFog;
		engine.enableEffect(effect);
		var viewMatrix = this._scene._viewMatrix;
		effect._engine.setTexture(HxOverrides.indexOf(effect._samplers,"diffuseSampler",0),this._spriteTexture);
		effect._engine.setMatrix(effect._uniforms.get("view"),viewMatrix);
		effect;
		effect._engine.setMatrix(effect._uniforms.get("projection"),this._scene._projectionMatrix);
		effect;
		effect._engine.setFloat2(effect._uniforms.get("textureInfos"),this.cellSize / baseSize.width,this.cellSize / baseSize.height);
		effect;
		if(this._scene.fogEnabled && this._scene.fogMode != com_babylonhx_Scene.FOGMODE_NONE && this.fogEnabled) {
			effect._engine.setFloat4(effect._uniforms.get("vFogInfos"),this._scene.fogMode,this._scene.fogStart,this._scene.fogEnd,this._scene.fogDensity);
			effect;
			effect._engine.setColor3(effect._uniforms.get("vFogColor"),this._scene.fogColor);
			effect;
		}
		engine.bindBuffers(this._vertexBuffer,this._indexBuffer,this._vertexDeclaration,this._vertexStrideSize,effect);
		engine._depthCullingState.set_depthFunc(515);
		effect._engine.setBool(effect._uniforms.get("alphaTest"),true);
		effect;
		lime_graphics_opengl_GL.context.colorMask(false,false,false,false);
		engine.draw(true,0,max * 6);
		lime_graphics_opengl_GL.context.colorMask(true,true,true,true);
		effect._engine.setBool(effect._uniforms.get("alphaTest"),false);
		effect;
		if(engine._alphaMode == 2) null; else {
			switch(2) {
			case 0:
				engine._depthCullingState.set_depthMask(true);
				engine._alphaState.set_alphaBlend(false);
				break;
			case 2:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 6:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 1:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 3:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(0,769,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 4:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(774,0,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 5:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,769,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			}
			engine._alphaMode = 2;
		}
		engine.draw(true,0,max * 6);
		if(engine._alphaMode == 0) null; else {
			switch(0) {
			case 0:
				engine._depthCullingState.set_depthMask(true);
				engine._alphaState.set_alphaBlend(false);
				break;
			case 2:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,771,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 6:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(1,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 1:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,1,0,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 3:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(0,769,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 4:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(774,0,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			case 5:
				engine._depthCullingState.set_depthMask(false);
				engine._alphaState.setAlphaBlendFunctionParameters(770,769,1,1);
				engine._alphaState.set_alphaBlend(true);
				break;
			}
			engine._alphaMode = 0;
		}
	}
	,dispose: function() {
		if(this._vertexBuffer != null) {
			this._scene._engine._releaseBuffer(this._vertexBuffer);
			this._vertexBuffer = null;
		}
		if(this._indexBuffer != null) {
			this._scene._engine._releaseBuffer(this._indexBuffer);
			this._indexBuffer = null;
		}
		if(this._spriteTexture != null) {
			this._spriteTexture.dispose();
			this._spriteTexture = null;
		}
		HxOverrides.remove(this._scene.spriteManagers,this);
		if(this.onDispose != null) this.onDispose();
	}
	,__class__: com_babylonhx_sprites_SpriteManager
};
var com_babylonhx_tools_AsyncLoop = $hx_exports.BABYLON.AsyncLoop = function(iterations,_fn,_successCallback,offset) {
	if(offset == null) offset = 0;
	this.iterations = iterations;
	this._fn = _fn;
	this._successCallback = _successCallback;
	this.index = offset - 1;
	this._done = false;
};
$hxClasses["com.babylonhx.tools.AsyncLoop"] = com_babylonhx_tools_AsyncLoop;
com_babylonhx_tools_AsyncLoop.__name__ = ["com","babylonhx","tools","AsyncLoop"];
com_babylonhx_tools_AsyncLoop.Run = function(iterations,_fn,_successCallback,offset) {
	if(offset == null) offset = 0;
	var loop = new com_babylonhx_tools_AsyncLoop(iterations,_fn,_successCallback,offset);
	loop.executeNext();
	return loop;
};
com_babylonhx_tools_AsyncLoop.SyncAsyncForLoop = function(iterations,syncedIterations,fn,cback,breakFunction,timeout) {
	if(timeout == null) timeout = 0;
	com_babylonhx_tools_AsyncLoop.Run(Math.ceil(iterations / syncedIterations),function(loop) {
		if(breakFunction != null && breakFunction()) loop.breakLoop(); else com_babylonhx_tools_Tools.delay(function() {
			var _g = 0;
			while(_g < syncedIterations) {
				var i = _g++;
				var iteration = loop.index * syncedIterations + i;
				if(iteration >= iterations) break;
				fn(iteration);
				if(breakFunction != null && breakFunction()) {
					loop.breakLoop();
					break;
				}
			}
			loop.executeNext();
		},timeout);
	},cback);
};
com_babylonhx_tools_AsyncLoop.prototype = {
	iterations: null
	,index: null
	,_done: null
	,_fn: null
	,_successCallback: null
	,executeNext: function() {
		if(!this._done) {
			if(this.index + 1 < this.iterations) {
				++this.index;
				this._fn(this);
			} else this.breakLoop();
		}
	}
	,breakLoop: function() {
		this._done = true;
		this._successCallback();
	}
	,__class__: com_babylonhx_tools_AsyncLoop
};
var com_babylonhx_tools_SmartArray = $hx_exports.BABYLON.SmartArray = function(capacity) {
	if(capacity == null) capacity = 256;
	this._duplicateId = 0;
	this.length = 0;
	this.data = [];
	this._id = com_babylonhx_tools_SmartArray._GlobalId++;
};
$hxClasses["com.babylonhx.tools.SmartArray"] = com_babylonhx_tools_SmartArray;
com_babylonhx_tools_SmartArray.__name__ = ["com","babylonhx","tools","SmartArray"];
com_babylonhx_tools_SmartArray.prototype = {
	data: null
	,length: null
	,__smartArrayFlags: null
	,_id: null
	,_duplicateId: null
	,push: function(value) {
		this.data[this.length++] = value;
		if(value.__smartArrayFlags == null) value.__smartArrayFlags = [];
		value.__smartArrayFlags[this._id] = this._duplicateId;
	}
	,pushNoDuplicate: function(value) {
		if(value.__smartArrayFlags != null && value.__smartArrayFlags[this._id] == this._duplicateId) return;
		this.data[this.length++] = value;
		if(value.__smartArrayFlags == null) value.__smartArrayFlags = [];
		value.__smartArrayFlags[this._id] = this._duplicateId;
	}
	,sort: function(compareFn) {
		this.data.sort(compareFn);
	}
	,reset: function() {
		this.length = 0;
		this._duplicateId++;
	}
	,concatArray: function(array) {
		if(array.length != 0) {
			var _g1 = 0;
			var _g = array.length;
			while(_g1 < _g) {
				var index = _g1++;
				this.data[this.length++] = array[index];
			}
		}
	}
	,concatSmartArray: function(array) {
		if(array.length != 0) {
			var _g1 = 0;
			var _g = array.length;
			while(_g1 < _g) {
				var index = _g1++;
				this.data[this.length++] = array.data[index];
			}
		}
	}
	,concatArrayWithNoDuplicate: function(array) {
		if(array.length != 0) {
			var _g1 = 0;
			var _g = array.length;
			while(_g1 < _g) {
				var index = _g1++;
				var item = array[index];
				this.pushNoDuplicate(item);
			}
		}
	}
	,concatSmartArrayWithNoDuplicate: function(array) {
		if(array.length != 0) {
			var _g1 = 0;
			var _g = array.length;
			while(_g1 < _g) {
				var index = _g1++;
				var item = array.data[index];
				this.pushNoDuplicate(item);
			}
		}
	}
	,indexOf: function(value) {
		var position = HxOverrides.indexOf(this.data,value,0);
		if(position >= this.length) return -1;
		return position;
	}
	,__class__: com_babylonhx_tools_SmartArray
};
var com_babylonhx_utils_Image = function(data,width,height) {
	this.width = 0;
	this.height = 0;
	this.width = width;
	this.height = height;
	if(data != null) this.data = data; else {
		var elements = width * height * 4;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		this.data = this1;
	}
};
$hxClasses["com.babylonhx.utils.Image"] = com_babylonhx_utils_Image;
com_babylonhx_utils_Image.__name__ = ["com","babylonhx","utils","Image"];
com_babylonhx_utils_Image.prototype = {
	data: null
	,height: null
	,width: null
	,__class__: com_babylonhx_utils_Image
};
var com_babylonhx_utils_Scancodes = function() { };
$hxClasses["com.babylonhx.utils.Scancodes"] = com_babylonhx_utils_Scancodes;
com_babylonhx_utils_Scancodes.__name__ = ["com","babylonhx","utils","Scancodes"];
com_babylonhx_utils_Scancodes.$name = function(scancode) {
	var res = null;
	if(scancode >= 0 && scancode < com_babylonhx_utils_Scancodes.scancode_names.length) res = com_babylonhx_utils_Scancodes.scancode_names[scancode];
	if(res != null) return res; else return "";
};
var com_babylonhx_utils_Keycodes = function() { };
$hxClasses["com.babylonhx.utils.Keycodes"] = com_babylonhx_utils_Keycodes;
com_babylonhx_utils_Keycodes.__name__ = ["com","babylonhx","utils","Keycodes"];
com_babylonhx_utils_Keycodes.from_scan = function(scancode) {
	return scancode | com_babylonhx_utils_Scancodes.MASK;
};
com_babylonhx_utils_Keycodes.to_scan = function(keycode) {
	if((keycode & com_babylonhx_utils_Scancodes.MASK) != 0) return keycode & ~com_babylonhx_utils_Scancodes.MASK;
	switch(keycode) {
	case 13:
		return com_babylonhx_utils_Scancodes.enter;
	case 27:
		return com_babylonhx_utils_Scancodes.escape;
	case 8:
		return com_babylonhx_utils_Scancodes.backspace;
	case 9:
		return com_babylonhx_utils_Scancodes.tab;
	case 32:
		return com_babylonhx_utils_Scancodes.space;
	case 47:
		return com_babylonhx_utils_Scancodes.slash;
	case 48:
		return com_babylonhx_utils_Scancodes.key_0;
	case 49:
		return com_babylonhx_utils_Scancodes.key_1;
	case 50:
		return com_babylonhx_utils_Scancodes.key_2;
	case 51:
		return com_babylonhx_utils_Scancodes.key_3;
	case 52:
		return com_babylonhx_utils_Scancodes.key_4;
	case 53:
		return com_babylonhx_utils_Scancodes.key_5;
	case 54:
		return com_babylonhx_utils_Scancodes.key_6;
	case 55:
		return com_babylonhx_utils_Scancodes.key_7;
	case 56:
		return com_babylonhx_utils_Scancodes.key_8;
	case 57:
		return com_babylonhx_utils_Scancodes.key_9;
	case 59:
		return com_babylonhx_utils_Scancodes.semicolon;
	case 61:
		return com_babylonhx_utils_Scancodes.equals;
	case 91:
		return com_babylonhx_utils_Scancodes.leftbracket;
	case 92:
		return com_babylonhx_utils_Scancodes.backslash;
	case 93:
		return com_babylonhx_utils_Scancodes.rightbracket;
	case 96:
		return com_babylonhx_utils_Scancodes.grave;
	case 97:
		return com_babylonhx_utils_Scancodes.key_a;
	case 98:
		return com_babylonhx_utils_Scancodes.key_b;
	case 99:
		return com_babylonhx_utils_Scancodes.key_c;
	case 100:
		return com_babylonhx_utils_Scancodes.key_d;
	case 101:
		return com_babylonhx_utils_Scancodes.key_e;
	case 102:
		return com_babylonhx_utils_Scancodes.key_f;
	case 103:
		return com_babylonhx_utils_Scancodes.key_g;
	case 104:
		return com_babylonhx_utils_Scancodes.key_h;
	case 105:
		return com_babylonhx_utils_Scancodes.key_i;
	case 106:
		return com_babylonhx_utils_Scancodes.key_j;
	case 107:
		return com_babylonhx_utils_Scancodes.key_k;
	case 108:
		return com_babylonhx_utils_Scancodes.key_l;
	case 109:
		return com_babylonhx_utils_Scancodes.key_m;
	case 110:
		return com_babylonhx_utils_Scancodes.key_n;
	case 111:
		return com_babylonhx_utils_Scancodes.key_o;
	case 112:
		return com_babylonhx_utils_Scancodes.key_p;
	case 113:
		return com_babylonhx_utils_Scancodes.key_q;
	case 114:
		return com_babylonhx_utils_Scancodes.key_r;
	case 115:
		return com_babylonhx_utils_Scancodes.key_s;
	case 116:
		return com_babylonhx_utils_Scancodes.key_t;
	case 117:
		return com_babylonhx_utils_Scancodes.key_u;
	case 118:
		return com_babylonhx_utils_Scancodes.key_v;
	case 119:
		return com_babylonhx_utils_Scancodes.key_w;
	case 120:
		return com_babylonhx_utils_Scancodes.key_x;
	case 121:
		return com_babylonhx_utils_Scancodes.key_y;
	case 122:
		return com_babylonhx_utils_Scancodes.key_z;
	}
	return com_babylonhx_utils_Scancodes.unknown;
};
com_babylonhx_utils_Keycodes.$name = function(keycode) {
	if((keycode & com_babylonhx_utils_Scancodes.MASK) != 0) return com_babylonhx_utils_Scancodes.$name(keycode & ~com_babylonhx_utils_Scancodes.MASK);
	switch(keycode) {
	case 13:
		return com_babylonhx_utils_Scancodes.$name(com_babylonhx_utils_Scancodes.enter);
	case 27:
		return com_babylonhx_utils_Scancodes.$name(com_babylonhx_utils_Scancodes.escape);
	case 8:
		return com_babylonhx_utils_Scancodes.$name(com_babylonhx_utils_Scancodes.backspace);
	case 9:
		return com_babylonhx_utils_Scancodes.$name(com_babylonhx_utils_Scancodes.tab);
	case 32:
		return com_babylonhx_utils_Scancodes.$name(com_babylonhx_utils_Scancodes.space);
	case 127:
		return com_babylonhx_utils_Scancodes.$name(com_babylonhx_utils_Scancodes["delete"]);
	default:
		var decoder = new haxe_Utf8();
		decoder.__b += String.fromCharCode(keycode);
		return decoder.__b;
	}
};
var flixel_FlxCamera = function(X,Y,Width,Height,Zoom) {
	if(Zoom == null) Zoom = 0;
	if(Height == null) Height = 0;
	if(Width == null) Width = 0;
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this._fxShakeDirection = 0;
	this._fxShakeComplete = null;
	this._fxShakeDuration = 0;
	this._fxShakeIntensity = 0;
	this._fxFadeAlpha = 0;
	this._fxFadeComplete = null;
	this._fxFadeIn = false;
	this._fxFadeDuration = 0;
	this._fxFadeColor = 0;
	this._fxFlashAlpha = 0;
	this._fxFlashComplete = null;
	this._fxFlashDuration = 0;
	this._fxFlashColor = 0;
	this.antialiasing = false;
	this.color = -1;
	this.angle = 0;
	this.alpha = 1;
	this.useBgAlphaBlending = false;
	this.regen = false;
	this.bounds = null;
	this.deadzone = null;
	this.followLerp = 0;
	this.target = null;
	flixel_FlxBasic.call(this);
	this._scrollTarget = flixel_util_FlxPoint.get(null,null);
	this.x = X;
	this.y = Y;
	this.set_width(Width <= 0?flixel_FlxG.width:Width);
	this.set_height(Height <= 0?flixel_FlxG.height:Height);
	this.scroll = flixel_util_FlxPoint.get(null,null);
	this.followLead = flixel_util_FlxPoint.get(null,null);
	this._point = flixel_util_FlxPoint.get(null,null);
	this._flashOffset = flixel_util_FlxPoint.get(null,null);
	this.screen = new flixel_FlxSprite();
	this.buffer = new openfl_display_BitmapData(this.width,this.height,true,0);
	this.screen.set_pixels(this.buffer);
	this.screen.origin.set();
	this._flashBitmap = new openfl_display_Bitmap(this.buffer);
	this._flashBitmap.set_x(-this.width * 0.5);
	this._flashBitmap.set_y(-this.height * 0.5);
	this.set_color(16777215);
	this.flashSprite = new openfl_display_Sprite();
	this.set_zoom(Zoom);
	this._flashOffset.set(this.width * 0.5 * this.zoom,this.height * 0.5 * this.zoom);
	this.flashSprite.set_x(this.x + this._flashOffset.x);
	this.flashSprite.set_y(this.y + this._flashOffset.y);
	this.flashSprite.addChild(this._flashBitmap);
	this._flashRect = new openfl_geom_Rectangle(0,0,this.width,this.height);
	this._flashPoint = new openfl_geom_Point();
	this._fxShakeOffset = flixel_util_FlxPoint.get(null,null);
	this._fill = new openfl_display_BitmapData(this.width,this.height,true,0);
	this.bgColor = flixel_FlxG.cameras.get_bgColor();
};
$hxClasses["flixel.FlxCamera"] = flixel_FlxCamera;
flixel_FlxCamera.__name__ = ["flixel","FlxCamera"];
flixel_FlxCamera.defaultZoom = null;
flixel_FlxCamera.defaultCameras = null;
flixel_FlxCamera.__super__ = flixel_FlxBasic;
flixel_FlxCamera.prototype = $extend(flixel_FlxBasic.prototype,{
	x: null
	,y: null
	,style: null
	,target: null
	,followLerp: null
	,deadzone: null
	,bounds: null
	,scroll: null
	,buffer: null
	,regen: null
	,bgColor: null
	,screen: null
	,useBgAlphaBlending: null
	,flashSprite: null
	,width: null
	,height: null
	,zoom: null
	,alpha: null
	,angle: null
	,color: null
	,antialiasing: null
	,followLead: null
	,_flashRect: null
	,_flashPoint: null
	,_flashOffset: null
	,_fxFlashColor: null
	,_fxFlashDuration: null
	,_fxFlashComplete: null
	,_fxFlashAlpha: null
	,_fxFadeColor: null
	,_lastTargetPosition: null
	,_scrollTarget: null
	,_fxFadeDuration: null
	,_fxFadeIn: null
	,_fxFadeComplete: null
	,_fxFadeAlpha: null
	,_fxShakeIntensity: null
	,_fxShakeDuration: null
	,_fxShakeComplete: null
	,_fxShakeOffset: null
	,_fxShakeDirection: null
	,_point: null
	,_fill: null
	,_flashBitmap: null
	,destroy: function() {
		this.screen = flixel_util_FlxDestroyUtil.destroy(this.screen);
		this.buffer = null;
		this._flashBitmap = null;
		this._fill = flixel_util_FlxDestroyUtil.dispose(this._fill);
		this.scroll = flixel_util_FlxDestroyUtil.put(this.scroll);
		this.deadzone = flixel_util_FlxDestroyUtil.put(this.deadzone);
		this.bounds = flixel_util_FlxDestroyUtil.put(this.bounds);
		this.target = null;
		this.flashSprite = null;
		this._flashRect = null;
		this._flashPoint = null;
		this._fxFlashComplete = null;
		this._fxFadeComplete = null;
		this._fxShakeComplete = null;
		this._fxShakeOffset = null;
		flixel_FlxBasic.prototype.destroy.call(this);
	}
	,update: function() {
		if(this.target != null) this.updateFollow();
		if(this.bounds != null) {
			this.scroll.set_x(flixel_util_FlxMath.bound(this.scroll.x,this.bounds.x,this.bounds.get_right() - this.width));
			this.scroll.set_y(flixel_util_FlxMath.bound(this.scroll.y,this.bounds.y,this.bounds.get_bottom() - this.height));
		}
		this.updateFlash();
		this.updateFade();
		this.updateShake();
	}
	,updateFollow: function() {
		if(this.deadzone == null) this.focusOn(this.target.getMidpoint(this._point)); else {
			var edge;
			var targetX = this.target.x;
			var targetY = this.target.y;
			if(this.style == 4) {
				if(targetX > this.scroll.x + this.width) {
					var _g = this._scrollTarget;
					_g.set_x(_g.x + this.width);
				} else if(targetX < this.scroll.x) {
					var _g1 = this._scrollTarget;
					_g1.set_x(_g1.x - this.width);
				}
				if(targetY > this.scroll.y + this.height) {
					var _g2 = this._scrollTarget;
					_g2.set_y(_g2.y + this.height);
				} else if(targetY < this.scroll.y) {
					var _g3 = this._scrollTarget;
					_g3.set_y(_g3.y - this.height);
				}
			} else {
				edge = targetX - this.deadzone.x;
				if(this._scrollTarget.x > edge) this._scrollTarget.set_x(edge);
				edge = targetX + this.target.get_width() - this.deadzone.x - this.deadzone.width;
				if(this._scrollTarget.x < edge) this._scrollTarget.set_x(edge);
				edge = targetY - this.deadzone.y;
				if(this._scrollTarget.y > edge) this._scrollTarget.set_y(edge);
				edge = targetY + this.target.get_height() - this.deadzone.y - this.deadzone.height;
				if(this._scrollTarget.y < edge) this._scrollTarget.set_y(edge);
			}
			if(js_Boot.__instanceof(this.target,flixel_FlxSprite)) {
				if(this._lastTargetPosition == null) this._lastTargetPosition = flixel_util_FlxPoint.get(this.target.x,this.target.y);
				var _g4 = this._scrollTarget;
				_g4.set_x(_g4.x + (this.target.x - this._lastTargetPosition.x) * this.followLead.x);
				var _g5 = this._scrollTarget;
				_g5.set_y(_g5.y + (this.target.y - this._lastTargetPosition.y) * this.followLead.y);
				this._lastTargetPosition.set_x(this.target.x);
				this._lastTargetPosition.set_y(this.target.y);
			}
			if(this.followLerp == 0) this.scroll.copyFrom(this._scrollTarget); else {
				var _g6 = this.scroll;
				_g6.set_x(_g6.x + (this._scrollTarget.x - this.scroll.x) * flixel_FlxG.elapsed / (flixel_FlxG.elapsed + this.followLerp * flixel_FlxG.elapsed));
				var _g7 = this.scroll;
				_g7.set_y(_g7.y + (this._scrollTarget.y - this.scroll.y) * flixel_FlxG.elapsed / (flixel_FlxG.elapsed + this.followLerp * flixel_FlxG.elapsed));
			}
		}
	}
	,updateFlash: function() {
		if(this._fxFlashAlpha > 0.0) {
			this._fxFlashAlpha -= flixel_FlxG.elapsed / this._fxFlashDuration;
			if(this._fxFlashAlpha <= 0 && this._fxFlashComplete != null) this._fxFlashComplete();
		}
	}
	,updateFade: function() {
		if(this._fxFadeAlpha > 0.0 && this._fxFadeAlpha < 1.0) {
			if(this._fxFadeIn) {
				this._fxFadeAlpha -= flixel_FlxG.elapsed / this._fxFadeDuration;
				if(this._fxFadeAlpha <= 0.0) {
					this._fxFadeAlpha = 0.0;
					if(this._fxFadeComplete != null) this._fxFadeComplete();
				}
			} else {
				this._fxFadeAlpha += flixel_FlxG.elapsed / this._fxFadeDuration;
				if(this._fxFadeAlpha >= 1.0) {
					this._fxFadeAlpha = 1.0;
					if(this._fxFadeComplete != null) this._fxFadeComplete();
				}
			}
		}
	}
	,updateShake: function() {
		if(this._fxShakeDuration > 0) {
			this._fxShakeDuration -= flixel_FlxG.elapsed;
			if(this._fxShakeDuration <= 0) {
				this._fxShakeOffset.set();
				if(this._fxShakeComplete != null) this._fxShakeComplete();
			} else {
				if(this._fxShakeDirection == 0 || this._fxShakeDirection == 1) this._fxShakeOffset.set_x(((flixel_util_FlxRandom._internalSeed = flixel_util_FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647) / 2147483647 * this._fxShakeIntensity * this.width * 2 - this._fxShakeIntensity * this.width) * this.zoom);
				if(this._fxShakeDirection == 0 || this._fxShakeDirection == 2) this._fxShakeOffset.set_y(((flixel_util_FlxRandom._internalSeed = flixel_util_FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647) / 2147483647 * this._fxShakeIntensity * this.height * 2 - this._fxShakeIntensity * this.height) * this.zoom);
			}
			if(this.target != null) {
				this.flashSprite.set_x(this.x + this._flashOffset.x);
				this.flashSprite.set_y(this.y + this._flashOffset.y);
			}
		}
	}
	,follow: function(Target,Style,Offset,Lerp) {
		if(Lerp == null) Lerp = 0;
		if(Style == null) Style = 0;
		this.style = Style;
		this.target = Target;
		this.followLerp = Lerp;
		var helper;
		var w = 0;
		var h = 0;
		this._lastTargetPosition = null;
		switch(Style) {
		case 1:
			var w1;
			w1 = this.width / 8 + (Offset != null?Offset.x:0);
			var h1;
			h1 = this.height / 3 + (Offset != null?Offset.y:0);
			this.deadzone = flixel_util_FlxRect.get((this.width - w1) / 2,(this.height - h1) / 2 - h1 * 0.25,w1,h1);
			break;
		case 2:
			helper = Math.max(this.width,this.height) / 4;
			this.deadzone = flixel_util_FlxRect.get((this.width - helper) / 2,(this.height - helper) / 2,helper,helper);
			break;
		case 3:
			helper = Math.max(this.width,this.height) / 8;
			this.deadzone = flixel_util_FlxRect.get((this.width - helper) / 2,(this.height - helper) / 2,helper,helper);
			break;
		case 0:
			if(this.target != null) {
				w = this.target.get_width() + (Offset != null?Offset.x:0);
				h = this.target.get_height() + (Offset != null?Offset.y:0);
			}
			this.deadzone = flixel_util_FlxRect.get((this.width - w) / 2,(this.height - h) / 2 - h * 0.25,w,h);
			break;
		case 4:
			this.deadzone = flixel_util_FlxRect.get(0,0,this.width,this.height);
			break;
		default:
			this.deadzone = null;
		}
	}
	,focusOn: function(point) {
		this.scroll.set(point.x - this.width * 0.5,point.y - this.height * 0.5);
	}
	,flash: function(Color,Duration,OnComplete,Force) {
		if(Force == null) Force = false;
		if(Duration == null) Duration = 1;
		if(Color == null) Color = -1;
		if(!Force && this._fxFlashAlpha > 0.0) return;
		this._fxFlashColor = Color;
		if(Duration <= 0) Duration = 0.0000000000000001;
		this._fxFlashDuration = Duration;
		this._fxFlashComplete = OnComplete;
		this._fxFlashAlpha = 1.0;
	}
	,fade: function(Color,Duration,FadeIn,OnComplete,Force) {
		if(Force == null) Force = false;
		if(FadeIn == null) FadeIn = false;
		if(Duration == null) Duration = 1;
		if(Color == null) Color = -16777216;
		if(!Force && this._fxFadeAlpha > 0.0) return;
		this._fxFadeColor = Color;
		if(Duration <= 0) Duration = 0.0000000000000001;
		this._fxFadeIn = FadeIn;
		this._fxFadeDuration = Duration;
		this._fxFadeComplete = OnComplete;
		if(this._fxFadeIn) this._fxFadeAlpha = 0.999999; else this._fxFadeAlpha = 0.0000000000000001;
	}
	,shake: function(Intensity,Duration,OnComplete,Force,Direction) {
		if(Direction == null) Direction = 0;
		if(Force == null) Force = true;
		if(Duration == null) Duration = 0.5;
		if(Intensity == null) Intensity = 0.05;
		if(!Force && (this._fxShakeOffset.x != 0 || this._fxShakeOffset.y != 0)) return;
		this._fxShakeIntensity = Intensity;
		this._fxShakeDuration = Duration;
		this._fxShakeComplete = OnComplete;
		this._fxShakeDirection = Direction;
		this._fxShakeOffset.set();
	}
	,stopFX: function() {
		this._fxFlashAlpha = 0.0;
		this._fxFadeAlpha = 0.0;
		this._fxShakeDuration = 0;
		this.flashSprite.set_x(this.x + this._flashOffset.x);
		this.flashSprite.set_y(this.y + this._flashOffset.y);
	}
	,copyFrom: function(Camera) {
		if(Camera.bounds == null) this.bounds = null; else {
			if(this.bounds == null) this.bounds = flixel_util_FlxRect.get(null,null,null,null);
			this.bounds.copyFrom(Camera.bounds);
		}
		this.target = Camera.target;
		if(this.target != null) {
			if(Camera.deadzone == null) this.deadzone = null; else {
				if(this.deadzone == null) this.deadzone = flixel_util_FlxRect.get(null,null,null,null);
				this.deadzone.copyFrom(Camera.deadzone);
			}
		}
		return this;
	}
	,fill: function(Color,BlendAlpha,FxAlpha,graphics) {
		if(FxAlpha == null) FxAlpha = 1.0;
		if(BlendAlpha == null) BlendAlpha = true;
		if(BlendAlpha) {
			this._fill.fillRect(this._flashRect,Color);
			this.buffer.copyPixels(this._fill,this._flashRect,this._flashPoint,null,null,BlendAlpha);
		} else this.buffer.fillRect(this._flashRect,Color);
	}
	,drawFX: function() {
		var alphaComponent;
		if(this._fxFlashAlpha > 0.0) {
			alphaComponent = this._fxFlashColor >> 24 & 255;
			this.fill((((alphaComponent <= 0?255:alphaComponent) * this._fxFlashAlpha | 0) << 24) + (this._fxFlashColor & 16777215));
		}
		if(this._fxFadeAlpha > 0.0) {
			alphaComponent = this._fxFadeColor >> 24 & 255;
			this.fill((((alphaComponent <= 0?255:alphaComponent) * this._fxFadeAlpha | 0) << 24) + (this._fxFadeColor & 16777215));
		}
		if(this._fxShakeOffset.x != 0 || this._fxShakeOffset.y != 0) {
			var _g = this.flashSprite;
			_g.set_x(_g.get_x() + this._fxShakeOffset.x);
			var _g1 = this.flashSprite;
			_g1.set_y(_g1.get_y() + this._fxShakeOffset.y);
		}
	}
	,checkResize: function() {
		if(this.regen) {
			if(this.width != this.buffer.width || this.height != this.buffer.height) {
				flixel_FlxG.bitmap.remove(this.screen.cachedGraphics.key);
				this.buffer = new openfl_display_BitmapData(this.width,this.height,true,0);
				this.screen.set_pixels(this.buffer);
				this.screen.origin.set();
				this._flashBitmap.bitmapData = this.buffer;
				this._flashRect.width = this.width;
				this._flashRect.height = this.height;
				this._fill.dispose();
				this._fill = new openfl_display_BitmapData(this.width,this.height,true,0);
			}
			this.regen = false;
		}
	}
	,setSize: function(Width,Height) {
		this.set_width(Width);
		this.set_height(Height);
	}
	,setPosition: function(X,Y) {
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		this.x = X;
		this.y = Y;
	}
	,setBounds: function(X,Y,Width,Height,UpdateWorld) {
		if(UpdateWorld == null) UpdateWorld = false;
		if(Height == null) Height = 0;
		if(Width == null) Width = 0;
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		if(this.bounds == null) this.bounds = flixel_util_FlxRect.get(null,null,null,null);
		this.bounds.set(X,Y,Width,Height);
		if(UpdateWorld) flixel_FlxG.worldBounds.copyFrom(this.bounds);
		this.update();
	}
	,setScale: function(X,Y) {
		this.flashSprite.set_scaleX(X);
		this.flashSprite.set_scaleY(Y);
		this._flashOffset.set_x(this.width * 0.5 * X);
		this._flashOffset.set_y(this.height * 0.5 * Y);
	}
	,getScale: function() {
		return this._point.set(this.flashSprite.get_scaleX(),this.flashSprite.get_scaleY());
	}
	,set_width: function(Value) {
		if(Value > 0) {
			this.width = Value;
			if(this._flashBitmap != null) {
				this.regen = Value != this.buffer.width;
				this._flashOffset.set_x(this.width * 0.5 * this.zoom);
				this._flashBitmap.set_x(-this.width * 0.5);
			}
		}
		return Value;
	}
	,set_height: function(Value) {
		if(Value > 0) {
			this.height = Value;
			if(this._flashBitmap != null) {
				this.regen = Value != this.buffer.height;
				this._flashOffset.set_y(this.height * 0.5 * this.zoom);
				this._flashBitmap.set_y(-this.height * 0.5);
			}
		}
		return Value;
	}
	,set_zoom: function(Zoom) {
		if(Zoom == 0) this.zoom = flixel_FlxCamera.defaultZoom; else this.zoom = Zoom;
		this.setScale(this.zoom,this.zoom);
		return this.zoom;
	}
	,set_alpha: function(Alpha) {
		this.alpha = flixel_util_FlxMath.bound(Alpha,0,1);
		this._flashBitmap.set_alpha(Alpha);
		return Alpha;
	}
	,set_angle: function(Angle) {
		this.angle = Angle;
		this.flashSprite.set_rotation(Angle);
		return Angle;
	}
	,set_color: function(Color) {
		this.color = Color & 16777215;
		if(this._flashBitmap != null) {
			var colorTransform = this._flashBitmap.get_transform().get_colorTransform();
			colorTransform.redMultiplier = (this.color >> 16) / 255;
			colorTransform.greenMultiplier = (this.color >> 8 & 255) / 255;
			colorTransform.blueMultiplier = (this.color & 255) / 255;
			this._flashBitmap.get_transform().set_colorTransform(colorTransform);
		}
		return Color;
	}
	,set_antialiasing: function(Antialiasing) {
		this.antialiasing = Antialiasing;
		this._flashBitmap.smoothing = Antialiasing;
		return Antialiasing;
	}
	,__class__: flixel_FlxCamera
	,__properties__: $extend(flixel_FlxBasic.prototype.__properties__,{set_antialiasing:"set_antialiasing",set_color:"set_color",set_angle:"set_angle",set_alpha:"set_alpha",set_zoom:"set_zoom",set_height:"set_height",set_width:"set_width"})
});
var flixel_system_FlxVersion = function(Major,Minor,Patch,PatchVersion) {
	if(PatchVersion == null) PatchVersion = "";
	this.major = Major;
	this.minor = Minor;
	this.patch = Patch;
	this.patchVersion = PatchVersion;
};
$hxClasses["flixel.system.FlxVersion"] = flixel_system_FlxVersion;
flixel_system_FlxVersion.__name__ = ["flixel","system","FlxVersion"];
flixel_system_FlxVersion.prototype = {
	major: null
	,minor: null
	,patch: null
	,patchVersion: null
	,toString: function() {
		var patchVer = "";
		if(this.patchVersion != null && this.patchVersion != "") patchVer = "-" + this.patchVersion;
		return "HaxeFlixel " + this.major + "." + this.minor + "." + this.patch + patchVer;
	}
	,__class__: flixel_system_FlxVersion
};
var flixel_interfaces_IFlxPooled = function() { };
$hxClasses["flixel.interfaces.IFlxPooled"] = flixel_interfaces_IFlxPooled;
flixel_interfaces_IFlxPooled.__name__ = ["flixel","interfaces","IFlxPooled"];
flixel_interfaces_IFlxPooled.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_interfaces_IFlxPooled.prototype = {
	put: null
	,_inPool: null
	,__class__: flixel_interfaces_IFlxPooled
};
var flixel_util_FlxPool = function(classObj) {
	this._pool = [];
	this._class = classObj;
};
$hxClasses["flixel.util.FlxPool"] = flixel_util_FlxPool;
flixel_util_FlxPool.__name__ = ["flixel","util","FlxPool"];
flixel_util_FlxPool.prototype = {
	_pool: null
	,_class: null
	,get: function() {
		var obj = this._pool.pop();
		if(obj == null) obj = Type.createInstance(this._class,[]);
		return obj;
	}
	,put: function(obj) {
		if(obj != null && HxOverrides.indexOf(this._pool,obj,0) < 0) {
			obj.destroy();
			this._pool.push(obj);
		}
	}
	,putUnsafe: function(obj) {
		if(obj != null) {
			obj.destroy();
			this._pool.push(obj);
		}
	}
	,preAllocate: function(numObjects) {
		var _g = 0;
		while(_g < numObjects) {
			var i = _g++;
			this._pool.push(Type.createInstance(this._class,[]));
		}
	}
	,clear: function() {
		var oldPool = this._pool;
		this._pool = [];
		return oldPool;
	}
	,get_length: function() {
		return this._pool.length;
	}
	,__class__: flixel_util_FlxPool
	,__properties__: {get_length:"get_length"}
};
var flixel_util_FlxPoint = function(X,Y) {
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this._inPool = false;
	this._weak = false;
	this.y = 0;
	this.x = 0;
	this.set(X,Y);
};
$hxClasses["flixel.util.FlxPoint"] = flixel_util_FlxPoint;
flixel_util_FlxPoint.__name__ = ["flixel","util","FlxPoint"];
flixel_util_FlxPoint.__interfaces__ = [flixel_interfaces_IFlxPooled];
flixel_util_FlxPoint.get = function(X,Y) {
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	var point = flixel_util_FlxPoint._pool.get().set(X,Y);
	point._inPool = false;
	return point;
};
flixel_util_FlxPoint.weak = function(X,Y) {
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	var point = flixel_util_FlxPoint.get(null,null).set(X,Y);
	point._weak = true;
	return point;
};
flixel_util_FlxPoint.prototype = {
	x: null
	,y: null
	,_weak: null
	,_inPool: null
	,put: function() {
		if(!this._inPool) {
			this._inPool = true;
			this._weak = false;
			flixel_util_FlxPoint._pool.putUnsafe(this);
		}
	}
	,putWeak: function() {
		if(this._weak) this.put();
	}
	,set: function(X,Y) {
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		this.set_x(X);
		this.set_y(Y);
		return this;
	}
	,add: function(X,Y) {
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		var _g = this;
		_g.set_x(_g.x + X);
		var _g1 = this;
		_g1.set_y(_g1.y + Y);
		return this;
	}
	,addPoint: function(point) {
		var _g = this;
		_g.set_x(_g.x + point.x);
		var _g1 = this;
		_g1.set_y(_g1.y + point.y);
		if(point._weak) point.put();
		return this;
	}
	,subtract: function(X,Y) {
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		var _g = this;
		_g.set_x(_g.x - X);
		var _g1 = this;
		_g1.set_y(_g1.y - Y);
		return this;
	}
	,subtractPoint: function(point) {
		var _g = this;
		_g.set_x(_g.x - point.x);
		var _g1 = this;
		_g1.set_y(_g1.y - point.y);
		if(point._weak) point.put();
		return this;
	}
	,copyFrom: function(point) {
		this.set_x(point.x);
		this.set_y(point.y);
		return this;
	}
	,copyTo: function(point) {
		if(point == null) point = flixel_util_FlxPoint.get(null,null);
		point.set_x(this.x);
		point.set_y(this.y);
		return point;
	}
	,copyFromFlash: function(FlashPoint) {
		this.set_x(FlashPoint.x);
		this.set_y(FlashPoint.y);
		return this;
	}
	,copyToFlash: function(FlashPoint) {
		FlashPoint.x = this.x;
		FlashPoint.y = this.y;
		return FlashPoint;
	}
	,inCoords: function(RectX,RectY,RectWidth,RectHeight) {
		return flixel_util_FlxMath.pointInCoordinates(this.x,this.y,RectX,RectY,RectWidth,RectHeight);
	}
	,inFlxRect: function(Rect) {
		return flixel_util_FlxMath.pointInFlxRect(this.x,this.y,Rect);
	}
	,distanceTo: function(AnotherPoint) {
		return flixel_util_FlxMath.getDistance(this,AnotherPoint);
	}
	,floor: function() {
		this.set_x(Math.floor(this.x));
		this.set_y(Math.floor(this.y));
		return this;
	}
	,ceil: function() {
		this.set_x(Math.ceil(this.x));
		this.set_y(Math.ceil(this.y));
		return this;
	}
	,destroy: function() {
	}
	,toString: function() {
		return flixel_util_FlxStringUtil.getDebugString([flixel_util_LabelValuePair._pool.get().create("x",this.x),flixel_util_LabelValuePair._pool.get().create("y",this.y)]);
	}
	,set_x: function(Value) {
		return this.x = Value;
	}
	,set_y: function(Value) {
		return this.y = Value;
	}
	,__class__: flixel_util_FlxPoint
	,__properties__: {set_y:"set_y",set_x:"set_x"}
};
var flixel_system_scaleModes_BaseScaleMode = function() {
	this.deviceSize = flixel_util_FlxPoint.get(null,null);
	this.gameSize = flixel_util_FlxPoint.get(null,null);
	this.scale = flixel_util_FlxPoint.get(null,null);
	this.offset = flixel_util_FlxPoint.get(null,null);
};
$hxClasses["flixel.system.scaleModes.BaseScaleMode"] = flixel_system_scaleModes_BaseScaleMode;
flixel_system_scaleModes_BaseScaleMode.__name__ = ["flixel","system","scaleModes","BaseScaleMode"];
flixel_system_scaleModes_BaseScaleMode.prototype = {
	deviceSize: null
	,gameSize: null
	,scale: null
	,offset: null
	,onMeasure: function(Width,Height) {
		this.updateGameSize(Width,Height);
		this.updateDeviceSize(Width,Height);
		this.updateScaleOffset();
		this.updateGameScale();
		this.updateGamePosition();
	}
	,updateGameSize: function(Width,Height) {
		this.gameSize.set(Width,Height);
	}
	,updateDeviceSize: function(Width,Height) {
		this.deviceSize.set(Width,Height);
	}
	,updateScaleOffset: function() {
		this.scale.set_x(this.gameSize.x / flixel_FlxG.width);
		this.scale.set_y(this.gameSize.y / flixel_FlxG.height);
		flixel_system_scaleModes_BaseScaleMode.zoom.set(flixel_FlxCamera.defaultZoom,flixel_FlxCamera.defaultZoom);
		if(flixel_FlxG.camera != null) {
			flixel_system_scaleModes_BaseScaleMode.zoom.set_x(flixel_FlxG.camera.getScale().x);
			flixel_system_scaleModes_BaseScaleMode.zoom.set_y(flixel_FlxG.camera.getScale().y);
		}
		var _g = this.scale;
		_g.set_x(_g.x / flixel_system_scaleModes_BaseScaleMode.zoom.x);
		var _g1 = this.scale;
		_g1.set_y(_g1.y / flixel_system_scaleModes_BaseScaleMode.zoom.y);
		this.offset.set_x(Math.ceil((this.deviceSize.x - this.gameSize.x) * 0.5));
		this.offset.set_y(Math.ceil((this.deviceSize.y - this.gameSize.y) * 0.5));
	}
	,updateGameScale: function() {
	}
	,updateGamePosition: function() {
		flixel_FlxG.game.set_x(this.offset.x);
		flixel_FlxG.game.set_y(this.offset.y);
	}
	,__class__: flixel_system_scaleModes_BaseScaleMode
};
var flixel_system_scaleModes_RatioScaleMode = function() {
	flixel_system_scaleModes_BaseScaleMode.call(this);
};
$hxClasses["flixel.system.scaleModes.RatioScaleMode"] = flixel_system_scaleModes_RatioScaleMode;
flixel_system_scaleModes_RatioScaleMode.__name__ = ["flixel","system","scaleModes","RatioScaleMode"];
flixel_system_scaleModes_RatioScaleMode.__super__ = flixel_system_scaleModes_BaseScaleMode;
flixel_system_scaleModes_RatioScaleMode.prototype = $extend(flixel_system_scaleModes_BaseScaleMode.prototype,{
	updateGameSize: function(Width,Height) {
		var ratio = flixel_FlxG.width / flixel_FlxG.height;
		var realRatio = Width / Height;
		if(realRatio < ratio) {
			this.gameSize.set_x(Width);
			this.gameSize.set_y(Math.floor(this.gameSize.x / ratio));
		} else {
			this.gameSize.set_y(Height);
			this.gameSize.set_x(Math.floor(this.gameSize.y * ratio));
		}
	}
	,__class__: flixel_system_scaleModes_RatioScaleMode
});
var flixel_system_frontEnds_BitmapFrontEnd = function() {
	this.clearCache();
};
$hxClasses["flixel.system.frontEnds.BitmapFrontEnd"] = flixel_system_frontEnds_BitmapFrontEnd;
flixel_system_frontEnds_BitmapFrontEnd.__name__ = ["flixel","system","frontEnds","BitmapFrontEnd"];
flixel_system_frontEnds_BitmapFrontEnd.prototype = {
	_cache: null
	,dumpCache: function() {
	}
	,checkCache: function(Key) {
		return this._cache.exists(Key) && this._cache.get(Key) != null;
	}
	,create: function(Width,Height,Color,Unique,Key) {
		if(Unique == null) Unique = false;
		var key = Key;
		if(key == null) {
			key = Width + "x" + Height + ":" + Color;
			if(Unique && (this._cache.exists(key) && this._cache.get(key) != null)) key = this.getUniqueKey(key);
		}
		if(!(this._cache.exists(key) && this._cache.get(key) != null)) {
			var value = new flixel_util_loaders_CachedGraphics(key,new openfl_display_BitmapData(Width,Height,true,Color));
			this._cache.set(key,value);
		}
		return this._cache.get(key);
	}
	,add: function(Graphic,Unique,Key) {
		if(Unique == null) Unique = false;
		return this.addWithSpaces(Graphic,0,0,1,1,Unique,Key);
	}
	,addWithSpaces: function(Graphic,FrameWidth,FrameHeight,SpacingX,SpacingY,Unique,Key) {
		if(Unique == null) Unique = false;
		if(SpacingY == null) SpacingY = 1;
		if(SpacingX == null) SpacingX = 1;
		if(Graphic == null) return null;
		var region = null;
		var graphic = null;
		var isClass = false;
		var isBitmap = false;
		var isRegion = false;
		var isGraphics = false;
		if(js_Boot.__instanceof(Graphic,flixel_util_loaders_CachedGraphics)) {
			isGraphics = true;
			graphic = js_Boot.__cast(Graphic , flixel_util_loaders_CachedGraphics);
			if(!Unique && (FrameWidth <= 0 && FrameHeight <= 0)) return graphic;
		} else if(js_Boot.__instanceof(Graphic,Class)) isClass = true; else if(js_Boot.__instanceof(Graphic,openfl_display_BitmapData)) isBitmap = true; else if(js_Boot.__instanceof(Graphic,flixel_util_loaders_TextureRegion)) {
			isRegion = true;
			region = js_Boot.__cast(Graphic , flixel_util_loaders_TextureRegion);
		} else if(typeof(Graphic) == "string") {
		} else return null;
		var additionalKey = "";
		if(FrameWidth > 0 || FrameHeight > 0) additionalKey = "FrameSize:" + FrameWidth + "_" + FrameHeight + "_Spacing:" + SpacingX + "_" + SpacingY;
		var key = Key;
		if(key == null) {
			if(isClass) key = Type.getClassName(js_Boot.__cast(Graphic , Class)); else if(isBitmap) {
				if(!Unique) {
					key = this.getCacheKeyFor(Graphic);
					if(key == null) key = this.getUniqueKey();
				}
			} else if(isRegion) key = region.data.key; else if(isGraphics) key = graphic.key; else key = Graphic;
			key += additionalKey;
			if(Unique) key = this.getUniqueKey(key == null?"pixels":key);
		}
		if(!(this._cache.exists(key) && this._cache.get(key) != null)) {
			var bd = null;
			if(isClass) bd = Type.createInstance(js_Boot.__cast(Graphic , Class),[0,0]); else if(isBitmap) bd = Graphic; else if(isRegion) bd = region.data.bitmap; else if(isGraphics) bd = graphic.bitmap; else bd = flixel_system_FlxAssets.getBitmapData(Graphic);
			if(FrameWidth > 0 || FrameHeight > 0) {
				var numHorizontalFrames;
				if(FrameWidth == 0) numHorizontalFrames = 1; else numHorizontalFrames = bd.width / FrameWidth | 0;
				var numVerticalFrames;
				if(FrameHeight == 0) numVerticalFrames = 1; else numVerticalFrames = bd.height / FrameHeight | 0;
				if(FrameWidth == 0) FrameWidth = bd.width; else FrameWidth = FrameWidth;
				if(FrameHeight == 0) FrameHeight = bd.height; else FrameHeight = FrameHeight;
				var tempBitmap = new openfl_display_BitmapData(bd.width + numHorizontalFrames * SpacingX,bd.height + numVerticalFrames * SpacingY,true,0);
				tempBitmap.lock();
				var tempRect = new openfl_geom_Rectangle(0,0,FrameWidth,FrameHeight);
				var tempPoint = new openfl_geom_Point();
				var _g = 0;
				while(_g < numHorizontalFrames) {
					var i = _g++;
					tempPoint.x = i * (FrameWidth + SpacingX);
					tempRect.x = i * FrameWidth;
					var _g2 = 0;
					var _g1 = numVerticalFrames;
					while(_g2 < _g1) {
						var j = _g2++;
						tempPoint.y = j * (FrameHeight + SpacingY);
						tempRect.y = j * FrameHeight;
						tempBitmap.copyPixels(bd,tempRect,tempPoint);
					}
				}
				tempBitmap.unlock();
				bd = tempBitmap;
			}
			if(Unique) bd = bd.clone();
			var co = new flixel_util_loaders_CachedGraphics(key,bd);
			if(isClass && !Unique) co.assetsClass = Graphic; else if(!isClass && !isBitmap && !isRegion && !Unique) co.assetsKey = Graphic;
			this._cache.set(key,co);
		}
		return this._cache.get(key);
	}
	,get: function(key) {
		return this._cache.get(key);
	}
	,getCacheKeyFor: function(bmd) {
		var $it0 = this._cache.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			var data = this._cache.get(key).bitmap;
			if(data == bmd) return key;
		}
		return null;
	}
	,getUniqueKey: function(baseKey) {
		if(baseKey == null) baseKey = "pixels";
		if(this._cache.exists(baseKey) && this._cache.get(baseKey) != null) {
			var inc = 0;
			var ukey;
			do ukey = baseKey + inc++; while(this._cache.exists(ukey) && this._cache.get(ukey) != null);
			baseKey = ukey;
		}
		return baseKey;
	}
	,remove: function(key) {
		if(key != null && this._cache.exists(key)) {
			var obj = this._cache.get(key);
			this.removeFromOpenFLCache(key);
			this._cache.remove(key);
			obj.destroy();
		}
	}
	,removeFromOpenFLCache: function(key) {
		openfl_Assets.cache.removeBitmapData(key);
	}
	,clearCache: function() {
		var obj;
		if(this._cache == null) this._cache = new haxe_ds_StringMap();
		var $it0 = this._cache.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			obj = this._cache.get(key);
			if(obj != null && !obj.persist) {
				this.removeFromOpenFLCache(key);
				this._cache.remove(key);
				obj.destroy();
				obj = null;
			}
		}
	}
	,clearUnused: function() {
		var obj;
		if(this._cache != null) {
			var $it0 = this._cache.keys();
			while( $it0.hasNext() ) {
				var key = $it0.next();
				obj = this._cache.get(key);
				if(obj != null && obj.useCount <= 0 && !obj.persist && obj.destroyOnNoUse) this.remove(obj.key);
			}
		}
	}
	,__class__: flixel_system_frontEnds_BitmapFrontEnd
};
var flixel_system_frontEnds_BitmapLogFrontEnd = function() {
};
$hxClasses["flixel.system.frontEnds.BitmapLogFrontEnd"] = flixel_system_frontEnds_BitmapLogFrontEnd;
flixel_system_frontEnds_BitmapLogFrontEnd.__name__ = ["flixel","system","frontEnds","BitmapLogFrontEnd"];
flixel_system_frontEnds_BitmapLogFrontEnd.prototype = {
	add: function(Data,Name) {
		if(Name == null) Name = "";
		flixel_FlxG.game["debugger"].bitmapLog.add(Data,Name);
	}
	,clear: function() {
		flixel_FlxG.game["debugger"].bitmapLog.clear();
	}
	,clearAt: function(Index) {
		if(Index == null) Index = -1;
		flixel_FlxG.game["debugger"].bitmapLog.clearAt(Index);
	}
	,viewCache: function() {
		flixel_FlxG.game["debugger"].bitmapLog.clear();
		var $it0 = flixel_FlxG.bitmap._cache.iterator();
		while( $it0.hasNext() ) {
			var cachedGraphic = $it0.next();
			flixel_FlxG.game["debugger"].bitmapLog.add(cachedGraphic.bitmap,cachedGraphic.key);
		}
	}
	,__class__: flixel_system_frontEnds_BitmapLogFrontEnd
};
var flixel_system_frontEnds_CameraFrontEnd = function() {
	this.useBufferLocking = false;
	this._cameraRect = new openfl_geom_Rectangle();
	this.list = [];
	flixel_FlxCamera.defaultCameras = this.list;
};
$hxClasses["flixel.system.frontEnds.CameraFrontEnd"] = flixel_system_frontEnds_CameraFrontEnd;
flixel_system_frontEnds_CameraFrontEnd.__name__ = ["flixel","system","frontEnds","CameraFrontEnd"];
flixel_system_frontEnds_CameraFrontEnd.prototype = {
	add_flixel_FlxCamera: function(NewCamera) {
		flixel_FlxG.game.addChildAt(NewCamera.flashSprite,flixel_FlxG.game.getChildIndex(flixel_FlxG.game._inputContainer));
		flixel_FlxG.cameras.list.push(NewCamera);
		NewCamera.ID = flixel_FlxG.cameras.list.length - 1;
		return NewCamera;
	}
	,list: null
	,useBufferLocking: null
	,_cameraRect: null
	,remove: function(Camera,Destroy) {
		if(Destroy == null) Destroy = true;
		var index = HxOverrides.indexOf(this.list,Camera,0);
		if(Camera != null && index != -1) {
			flixel_FlxG.game.removeChild(Camera.flashSprite);
			this.list.splice(index,1);
		} else flixel_FlxG.log.advanced("FlxG.cameras.remove(): The camera you attemped to remove is not a part of the game.",flixel_system_debug_LogStyle.WARNING,true);
		if(Destroy) Camera.destroy();
	}
	,reset: function(NewCamera) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			flixel_FlxG.game.removeChild(camera.flashSprite);
			camera.destroy();
		}
		this.list.splice(0,this.list.length);
		if(NewCamera == null) NewCamera = new flixel_FlxCamera(0,0,flixel_FlxG.width,flixel_FlxG.height);
		flixel_FlxG.game.addChildAt(NewCamera.flashSprite,flixel_FlxG.game.getChildIndex(flixel_FlxG.game._inputContainer));
		flixel_FlxG.cameras.list.push(NewCamera);
		NewCamera.ID = flixel_FlxG.cameras.list.length - 1;
		flixel_FlxG.camera = NewCamera;
		NewCamera.ID = 0;
		flixel_FlxCamera.defaultCameras = this.list;
	}
	,flash: function(Color,Duration,OnComplete,Force) {
		if(Force == null) Force = false;
		if(Duration == null) Duration = 1;
		if(Color == null) Color = -1;
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.flash(Color,Duration,OnComplete,Force);
		}
	}
	,fade: function(Color,Duration,FadeIn,OnComplete,Force) {
		if(Force == null) Force = false;
		if(FadeIn == null) FadeIn = false;
		if(Duration == null) Duration = 1;
		if(Color == null) Color = -16777216;
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.fade(Color,Duration,FadeIn,OnComplete,Force);
		}
	}
	,shake: function(Intensity,Duration,OnComplete,Force,Direction) {
		if(Direction == null) Direction = 0;
		if(Force == null) Force = true;
		if(Duration == null) Duration = 0.5;
		if(Intensity == null) Intensity = 0.05;
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.shake(Intensity,Duration,OnComplete,Force,Direction);
		}
	}
	,lock: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera == null || !camera.exists || !camera.visible) continue;
			camera.checkResize();
			if(this.useBufferLocking) camera.buffer.lock();
			camera.fill(camera.bgColor,camera.useBgAlphaBlending);
			camera.screen.dirty = true;
		}
	}
	,unlock: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera == null || !camera.exists || !camera.visible) continue;
			camera.drawFX();
			if(this.useBufferLocking) camera.buffer.unlock();
			camera.screen.dirty = true;
		}
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera != null && camera.exists) {
				if(camera.active) camera.update();
				camera.flashSprite.set_x(camera.x + camera._flashOffset.x);
				camera.flashSprite.set_y(camera.y + camera._flashOffset.y);
				camera.flashSprite.set_visible(camera.visible);
			}
		}
	}
	,get_bgColor: function() {
		if(flixel_FlxG.camera == null) return -16777216; else return flixel_FlxG.camera.bgColor;
	}
	,set_bgColor: function(Color) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.bgColor = Color;
		}
		return Color;
	}
	,__class__: flixel_system_frontEnds_CameraFrontEnd
	,__properties__: {set_bgColor:"set_bgColor",get_bgColor:"get_bgColor"}
};
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl_geom_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new openfl_geom_Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new openfl_geom_Rectangle();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toLimeRectangle: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl_geom_Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl_geom_Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var flixel_system_frontEnds_ConsoleFrontEnd = function() {
	this.autoPause = true;
};
$hxClasses["flixel.system.frontEnds.ConsoleFrontEnd"] = flixel_system_frontEnds_ConsoleFrontEnd;
flixel_system_frontEnds_ConsoleFrontEnd.__name__ = ["flixel","system","frontEnds","ConsoleFrontEnd"];
flixel_system_frontEnds_ConsoleFrontEnd.prototype = {
	autoPause: null
	,registerFunction: function(FunctionAlias,Function) {
		flixel_FlxG.game["debugger"].console.registerFunction(FunctionAlias,Function);
	}
	,registerObject: function(ObjectAlias,AnyObject) {
		flixel_FlxG.game["debugger"].console.registerObject(ObjectAlias,AnyObject);
	}
	,addCommand: function(Aliases,ProcessFunction,Help,ParamHelp,NumParams,ParamCutoff) {
		if(ParamCutoff == null) ParamCutoff = -1;
		if(NumParams == null) NumParams = 0;
		flixel_FlxG.game["debugger"].console.commands.push({ aliases : Aliases, processFunction : ProcessFunction, help : Help, paramHelp : ParamHelp, numParams : NumParams, paramCutoff : ParamCutoff});
	}
	,__class__: flixel_system_frontEnds_ConsoleFrontEnd
};
var flixel_system_frontEnds_DebuggerFrontEnd = function() {
	this.visible = false;
	this.drawDebug = false;
	this.precision = 3;
	this.toggleKeys = ["GRAVEACCENT","BACKSLASH"];
	this.drawDebugChanged = new flixel_util__$FlxSignal_FlxSignal0();
};
$hxClasses["flixel.system.frontEnds.DebuggerFrontEnd"] = flixel_system_frontEnds_DebuggerFrontEnd;
flixel_system_frontEnds_DebuggerFrontEnd.__name__ = ["flixel","system","frontEnds","DebuggerFrontEnd"];
flixel_system_frontEnds_DebuggerFrontEnd.prototype = {
	precision: null
	,toggleKeys: null
	,drawDebug: null
	,drawDebugChanged: null
	,visible: null
	,setLayout: function(Layout) {
		flixel_FlxG.game["debugger"].setLayout(Layout);
	}
	,resetLayout: function() {
		flixel_FlxG.game["debugger"].resetLayout();
	}
	,addButton: function(Alignment,Icon,UpHandler,ToggleMode,UpdateLayout) {
		if(UpdateLayout == null) UpdateLayout = true;
		if(ToggleMode == null) ToggleMode = false;
		return flixel_FlxG.game["debugger"].addButton(Alignment,Icon,UpHandler,ToggleMode,UpdateLayout);
	}
	,track: function(Object,WindowTitle) {
		if((function($this) {
			var $r;
			var x = Object;
			$r = HxOverrides.indexOf(flixel_system_debug_Tracker.objectsBeingTracked,x,0);
			return $r;
		}(this)) == -1) {
			var profile = flixel_system_debug_Tracker.findProfile(Object);
			if(profile == null) {
				flixel_FlxG.log.error("FlxG.debugger.track(): Could not find a tracking profile for this object of class '" + (function($this) {
					var $r;
					var cl;
					if(js_Boot.__instanceof(Object,Class)) cl = Object; else cl = Type.getClass(Object);
					var s = Type.getClassName(cl);
					if(s != null) {
						s = StringTools.replace(s,"::",".");
						var pos = s.lastIndexOf(".") + 1;
						s = HxOverrides.substr(s,pos,null);
					}
					$r = s;
					return $r;
				}(this)) + "'.");
				return null;
			} else return flixel_FlxG.game["debugger"].addWindow(new flixel_system_debug_Tracker(profile,Object,WindowTitle));
		} else return null;
	}
	,addTrackerProfile: function(Profile) {
		if(Profile != null) flixel_system_debug_Tracker.profiles.push(Profile);
	}
	,removeButton: function(Button,UpdateLayout) {
		if(UpdateLayout == null) UpdateLayout = true;
		flixel_FlxG.game["debugger"].removeButton(Button,UpdateLayout);
	}
	,set_drawDebug: function(Value) {
		if(Value != this.drawDebug) this.drawDebugChanged.dispatch();
		return this.drawDebug = Value;
	}
	,set_visible: function(Value) {
		flixel_FlxG.game["debugger"].set_visible(Value);
		return this.visible = Value;
	}
	,__class__: flixel_system_frontEnds_DebuggerFrontEnd
	,__properties__: {set_visible:"set_visible",set_drawDebug:"set_drawDebug"}
};
var flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$ = {};
$hxClasses["flixel.util._FlxSignal.FlxTypedSignal_Impl_"] = flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$;
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.__name__ = ["flixel","util","_FlxSignal","FlxTypedSignal_Impl_"];
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.__properties__ = {get_dispatch:"get_dispatch"}
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$._new = null;
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.add = function(this1,listener) {
	this1.add(listener);
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.addOnce = function(this1,listener) {
	this1.addOnce(listener);
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.remove = function(this1,listener) {
	this1.remove(listener);
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.has = function(this1,listener) {
	return this1.has(listener);
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.removeAll = function(this1) {
	this1.removeAll();
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.get_dispatch = function(this1) {
	return this1.dispatch;
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.toSignal0 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal0();
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.toSignal1 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal1();
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.toSignal2 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal2();
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.toSignal3 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal3();
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.toSignal4 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal4();
};
var flixel_system_frontEnds_HTML5FrontEnd = function() {
};
$hxClasses["flixel.system.frontEnds.HTML5FrontEnd"] = flixel_system_frontEnds_HTML5FrontEnd;
flixel_system_frontEnds_HTML5FrontEnd.__name__ = ["flixel","system","frontEnds","HTML5FrontEnd"];
flixel_system_frontEnds_HTML5FrontEnd.prototype = {
	browserPosition: null
	,get_browser: function() {
		if(window.navigator.userAgent.indexOf(" OPR/") > -1) return "Opera"; else if(window.navigator.userAgent.toLowerCase().indexOf("chrome") > -1) return "Chrome"; else if(window.navigator.appName == "Netscape") return "Firefox"; else if(!(!document.documentMode)) return "Internet Explorer"; else if(Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor") > 0) return "Safari";
		return "Unknown";
	}
	,get_browserPosition: function() {
		if(this.browserPosition == null) this.browserPosition = flixel_util_FlxPoint.get(0,0);
		this.browserPosition.set(window.screenX,window.screenY);
		return this.browserPosition;
	}
	,get_browserWidth: function() {
		return window.innerWidth;
	}
	,get_browserHeight: function() {
		return window.innerHeight;
	}
	,__class__: flixel_system_frontEnds_HTML5FrontEnd
	,__properties__: {get_browserPosition:"get_browserPosition",get_browserHeight:"get_browserHeight",get_browserWidth:"get_browserWidth",get_browser:"get_browser"}
};
var flixel_system_frontEnds_InputFrontEnd = function() {
	this.list = [];
};
$hxClasses["flixel.system.frontEnds.InputFrontEnd"] = flixel_system_frontEnds_InputFrontEnd;
flixel_system_frontEnds_InputFrontEnd.__name__ = ["flixel","system","frontEnds","InputFrontEnd"];
flixel_system_frontEnds_InputFrontEnd.prototype = {
	replace_flixel_input_mouse_FlxMouse: function(Old,New) {
		var i = 0;
		var success = false;
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(input == Old) {
				this.list[i] = New;
				success = true;
				break;
			}
			i++;
		}
		if(success) return New;
		return null;
	}
	,add_flixel_input_gamepad_FlxGamepadManager: function(Input) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.sameClassName(Input,input,null)) return Input;
		}
		this.list.push(Input);
		return Input;
	}
	,add_flixel_input_touch_FlxTouchManager: function(Input) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.sameClassName(Input,input,null)) return Input;
		}
		this.list.push(Input);
		return Input;
	}
	,add_flixel_input_mouse_FlxMouse: function(Input) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.sameClassName(Input,input,null)) return Input;
		}
		this.list.push(Input);
		return Input;
	}
	,add_flixel_input_keyboard_FlxKeyboard: function(Input) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.sameClassName(Input,input,null)) return Input;
		}
		this.list.push(Input);
		return Input;
	}
	,list: null
	,reset: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.reset();
		}
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.update();
		}
	}
	,onFocus: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.onFocus();
		}
	}
	,onFocusLost: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.onFocusLost();
		}
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.destroy();
			input = null;
		}
	}
	,__class__: flixel_system_frontEnds_InputFrontEnd
};
var flixel_system_frontEnds_LogFrontEnd = function() {
	this.redirectTraces = false;
	this._standardTraceFunction = haxe_Log.trace;
};
$hxClasses["flixel.system.frontEnds.LogFrontEnd"] = flixel_system_frontEnds_LogFrontEnd;
flixel_system_frontEnds_LogFrontEnd.__name__ = ["flixel","system","frontEnds","LogFrontEnd"];
flixel_system_frontEnds_LogFrontEnd.prototype = {
	redirectTraces: null
	,_standardTraceFunction: null
	,add: function(Data) {
		this.advanced(Data,flixel_system_debug_LogStyle.NORMAL);
	}
	,warn: function(Data) {
		this.advanced(Data,flixel_system_debug_LogStyle.WARNING,true);
	}
	,error: function(Data) {
		this.advanced(Data,flixel_system_debug_LogStyle.ERROR,true);
	}
	,notice: function(Data) {
		this.advanced(Data,flixel_system_debug_LogStyle.NOTICE);
	}
	,advanced: function(Data,Style,FireOnce) {
		if(FireOnce == null) FireOnce = false;
		if(flixel_FlxG.game["debugger"] == null) {
			this._standardTraceFunction(Data);
			return;
		}
		if(Style == null) Style = flixel_system_debug_LogStyle.NORMAL;
		if(!((Data instanceof Array) && Data.__enum__ == null)) Data = [Data];
		if(flixel_FlxG.game["debugger"].log.add(Data,Style,FireOnce)) {
			if(Style.errorSound != null) flixel_FlxG.sound.load(flixel_system_FlxAssets.getSound(Style.errorSound).play());
			if(Style.openConsole) {
				flixel_FlxG.game["debugger"].set_visible(true);
				flixel_FlxG["debugger"].visible = true;
			}
			if(Style.callbackFunction = null) Style.callbackFunction();
		}
	}
	,clear: function() {
		flixel_FlxG.game["debugger"].log.clear();
	}
	,set_redirectTraces: function(Redirect) {
		if(Redirect) haxe_Log.trace = $bind(this,this.processTraceData); else haxe_Log.trace = this._standardTraceFunction;
		return this.redirectTraces = Redirect;
	}
	,processTraceData: function(Data,Info) {
		var paramArray = [Data];
		if(Info.customParams != null) {
			var _g = 0;
			var _g1 = Info.customParams;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				paramArray.push(i);
			}
		}
		this.advanced(paramArray,flixel_system_debug_LogStyle.NORMAL);
	}
	,__class__: flixel_system_frontEnds_LogFrontEnd
	,__properties__: {set_redirectTraces:"set_redirectTraces"}
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var flixel_system_frontEnds_PluginFrontEnd = function() {
	this.list = [];
	this.add_flixel_plugin_PathManager(flixel_util_FlxPath.manager = new flixel_plugin_PathManager());
	this.add_flixel_plugin_TimerManager(flixel_util_FlxTimer.manager = new flixel_plugin_TimerManager());
	this.add_flixel_plugin_TweenManager(flixel_tweens_FlxTween.manager = new flixel_plugin_TweenManager());
};
$hxClasses["flixel.system.frontEnds.PluginFrontEnd"] = flixel_system_frontEnds_PluginFrontEnd;
flixel_system_frontEnds_PluginFrontEnd.__name__ = ["flixel","system","frontEnds","PluginFrontEnd"];
flixel_system_frontEnds_PluginFrontEnd.prototype = {
	add_flixel_plugin_TweenManager: function(Plugin) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.sameClassName(Plugin,plugin,null)) return Plugin;
		}
		this.list.push(Plugin);
		return Plugin;
	}
	,add_flixel_plugin_TimerManager: function(Plugin) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.sameClassName(Plugin,plugin,null)) return Plugin;
		}
		this.list.push(Plugin);
		return Plugin;
	}
	,add_flixel_plugin_PathManager: function(Plugin) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.sameClassName(Plugin,plugin,null)) return Plugin;
		}
		this.list.push(Plugin);
		return Plugin;
	}
	,list: null
	,get: function(ClassType) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(plugin,ClassType)) return plugin;
		}
		return null;
	}
	,remove: function(Plugin) {
		var i = this.list.length - 1;
		while(i >= 0) {
			if(this.list[i] == Plugin) {
				this.list.splice(i,1);
				return Plugin;
			}
			i--;
		}
		return Plugin;
	}
	,removeType: function(ClassType) {
		var results = false;
		var i = this.list.length - 1;
		while(i >= 0) {
			if(js_Boot.__instanceof(this.list[i],ClassType)) {
				this.list.splice(i,1);
				results = true;
			}
			i--;
		}
		return results;
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(plugin.exists && plugin.active) plugin.update();
		}
	}
	,draw: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(plugin.exists && plugin.visible) plugin.draw();
		}
	}
	,onStateSwitch: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(plugin.exists) plugin.onStateSwitch();
		}
	}
	,onResize: function(Width,Height) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(plugin.exists) plugin.onResize(Width,Height);
		}
	}
	,__class__: flixel_system_frontEnds_PluginFrontEnd
};
var flixel_util_FlxPath = function(Object,Nodes,Speed,Mode,AutoRotate) {
	if(AutoRotate == null) AutoRotate = false;
	if(Mode == null) Mode = 0;
	if(Speed == null) Speed = 100;
	this._inManager = false;
	this._autoRotate = false;
	this._inc = 1;
	this._nodeIndex = 0;
	this.finished = false;
	this.ignoreDrawDebug = false;
	this.debugScrollY = 1.0;
	this.debugScrollX = 1.0;
	this.debugColor = 16777215;
	this.active = true;
	this.autoCenter = true;
	this.angle = 0;
	this.speed = 0;
	if(Object != null) this.start(Object,Nodes,Speed,Mode,AutoRotate);
};
$hxClasses["flixel.util.FlxPath"] = flixel_util_FlxPath;
flixel_util_FlxPath.__name__ = ["flixel","util","FlxPath"];
flixel_util_FlxPath.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_util_FlxPath.manager = null;
flixel_util_FlxPath.prototype = {
	nodes: null
	,object: null
	,speed: null
	,angle: null
	,autoCenter: null
	,active: null
	,onComplete: null
	,debugColor: null
	,debugScrollX: null
	,debugScrollY: null
	,ignoreDrawDebug: null
	,finished: null
	,_nodeIndex: null
	,_mode: null
	,_inc: null
	,_autoRotate: null
	,_inManager: null
	,reset: function() {
		this.debugScrollX = 1.0;
		this.debugScrollY = 1.0;
		this.debugColor = 16777215;
		this.ignoreDrawDebug = false;
		this.autoCenter = true;
		return this;
	}
	,start: function(Object,Nodes,Speed,Mode,AutoRotate) {
		if(AutoRotate == null) AutoRotate = false;
		if(Mode == null) Mode = 0;
		if(Speed == null) Speed = 100;
		this.object = Object;
		this.nodes = Nodes;
		this.speed = Math.abs(Speed);
		this._mode = Mode;
		this._autoRotate = AutoRotate;
		this.restart();
		return this;
	}
	,restart: function() {
		if(flixel_util_FlxPath.manager != null && !this._inManager) {
			flixel_util_FlxPath.manager.add(this);
			this._inManager = true;
		}
		this.finished = false;
		this.active = true;
		if(this.nodes.length <= 0) this.active = false;
		if(this._mode == 1 || this._mode == 256) {
			this._nodeIndex = this.nodes.length - 1;
			this._inc = -1;
		} else {
			this._nodeIndex = 0;
			this._inc = 1;
		}
		this.object.set_immovable(true);
		return this;
	}
	,setNode: function(NodeIndex) {
		if(NodeIndex < 0) NodeIndex = 0; else if(NodeIndex > this.nodes.length - 1) NodeIndex = this.nodes.length - 1;
		this._nodeIndex = NodeIndex;
		this.advancePath();
	}
	,update: function() {
		flixel_util_FlxPath._point.set_x(this.object.x);
		flixel_util_FlxPath._point.set_y(this.object.y);
		if(this.autoCenter) {
			var _g = flixel_util_FlxPath._point;
			_g.set_x(_g.x + this.object.get_width() * 0.5);
			var _g1 = flixel_util_FlxPath._point;
			_g1.set_y(_g1.y + this.object.get_height() * 0.5);
		}
		var node = this.nodes[this._nodeIndex];
		var deltaX = node.x - flixel_util_FlxPath._point.x;
		var deltaY = node.y - flixel_util_FlxPath._point.y;
		var horizontalOnly = (this._mode & 65536) > 0;
		var verticalOnly = (this._mode & 1048576) > 0;
		if(horizontalOnly) {
			if((deltaX > 0?deltaX:-deltaX) < this.speed * flixel_FlxG.elapsed) node = this.advancePath();
		} else if(verticalOnly) {
			if((deltaY > 0?deltaY:-deltaY) < this.speed * flixel_FlxG.elapsed) node = this.advancePath();
		} else if(Math.sqrt(deltaX * deltaX + deltaY * deltaY) < this.speed * flixel_FlxG.elapsed) node = this.advancePath();
		if(this.speed != 0) {
			flixel_util_FlxPath._point.set_x(this.object.x);
			flixel_util_FlxPath._point.set_y(this.object.y);
			if(this.autoCenter) {
				var _g2 = flixel_util_FlxPath._point;
				_g2.set_x(_g2.x + this.object.get_width() * 0.5);
				var _g3 = flixel_util_FlxPath._point;
				_g3.set_y(_g3.y + this.object.get_height() * 0.5);
			}
			if(horizontalOnly || flixel_util_FlxPath._point.y == node.y) {
				this.object.velocity.set_x(flixel_util_FlxPath._point.x < node.x?this.speed:-this.speed);
				if(this.object.velocity.x < 0) this.angle = -90; else this.angle = 90;
				if(!horizontalOnly) this.object.velocity.set_y(0);
			} else if(verticalOnly || flixel_util_FlxPath._point.x == node.x) {
				this.object.velocity.set_y(flixel_util_FlxPath._point.y < node.y?this.speed:-this.speed);
				if(this.object.velocity.y < 0) this.angle = 0; else this.angle = 180;
				if(!verticalOnly) this.object.velocity.set_x(0);
			} else {
				this.object.velocity.set_x(flixel_util_FlxPath._point.x < node.x?this.speed:-this.speed);
				this.object.velocity.set_y(flixel_util_FlxPath._point.y < node.y?this.speed:-this.speed);
				this.angle = flixel_util_FlxAngle.getAngle(flixel_util_FlxPath._point,node);
				flixel_util_FlxAngle.rotatePoint(0,this.speed,0,0,this.angle,this.object.velocity);
			}
			if(this._autoRotate) {
				this.object.angularVelocity = 0;
				this.object.angularAcceleration = 0;
				this.object.set_angle(this.angle);
			}
			if(this.finished) this.cancel();
		}
	}
	,advancePath: function(Snap) {
		if(Snap == null) Snap = true;
		if(Snap) {
			var oldNode = this.nodes[this._nodeIndex];
			if(oldNode != null) {
				if((this._mode & 1048576) == 0) {
					this.object.set_x(oldNode.x);
					if(this.autoCenter) {
						var _g = this.object;
						_g.set_x(_g.x - this.object.get_width() * 0.5);
					}
				}
				if((this._mode & 65536) == 0) {
					this.object.set_y(oldNode.y);
					if(this.autoCenter) {
						var _g1 = this.object;
						_g1.set_y(_g1.y - this.object.get_height() * 0.5);
					}
				}
			}
		}
		var callComplete = false;
		this._nodeIndex += this._inc;
		if((this._mode & 1) > 0) {
			if(this._nodeIndex < 0) {
				this._nodeIndex = 0;
				this.finished = callComplete = true;
			}
		} else if((this._mode & 16) > 0) {
			if(this._nodeIndex >= this.nodes.length) {
				callComplete = true;
				this._nodeIndex = 0;
			}
		} else if((this._mode & 256) > 0) {
			if(this._nodeIndex < 0) {
				this._nodeIndex = this.nodes.length - 1;
				callComplete = true;
				if(this._nodeIndex < 0) this._nodeIndex = 0;
			}
		} else if((this._mode & 4096) > 0) {
			if(this._inc > 0) {
				if(this._nodeIndex >= this.nodes.length) {
					this._nodeIndex = this.nodes.length - 2;
					callComplete = true;
					if(this._nodeIndex < 0) this._nodeIndex = 0;
					this._inc = -this._inc;
				}
			} else if(this._nodeIndex < 0) {
				this._nodeIndex = 1;
				callComplete = true;
				if(this._nodeIndex >= this.nodes.length) this._nodeIndex = this.nodes.length - 1;
				if(this._nodeIndex < 0) this._nodeIndex = 0;
				this._inc = -this._inc;
			}
		} else if(this._nodeIndex >= this.nodes.length) {
			this._nodeIndex = this.nodes.length - 1;
			this.finished = callComplete = true;
		}
		if(callComplete && this.onComplete != null) this.onComplete(this);
		return this.nodes[this._nodeIndex];
	}
	,cancel: function() {
		this.finished = true;
		if(this.object != null) this.object.velocity.set(0,0);
		if(flixel_util_FlxPath.manager != null && this._inManager) {
			flixel_util_FlxPath.manager.remove(this);
			this._inManager = false;
		}
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.nodes;
		while(_g < _g1.length) {
			var point = _g1[_g];
			++_g;
			point = flixel_util_FlxDestroyUtil.put(point);
		}
		this.nodes = null;
		this.object = null;
		this.onComplete = null;
	}
	,add: function(X,Y) {
		this.nodes.push(flixel_util_FlxPoint.get(X,Y));
		return this;
	}
	,addAt: function(X,Y,Index) {
		if(Index < 0) return this;
		if(Index > this.nodes.length) Index = this.nodes.length;
		var x = flixel_util_FlxPoint.get(X,Y);
		this.nodes.splice(Index,0,x);
		return this;
	}
	,addPoint: function(Node,AsReference) {
		if(AsReference == null) AsReference = false;
		if(AsReference) this.nodes.push(Node); else this.nodes.push(flixel_util_FlxPoint.get(Node.x,Node.y));
		return this;
	}
	,addPointAt: function(Node,Index,AsReference) {
		if(AsReference == null) AsReference = false;
		if(Index < 0) return this;
		if(Index > this.nodes.length) Index = this.nodes.length;
		if(AsReference) this.nodes.splice(Index,0,Node); else {
			var x = flixel_util_FlxPoint.get(Node.x,Node.y);
			this.nodes.splice(Index,0,x);
		}
		return this;
	}
	,remove: function(Node) {
		var index = HxOverrides.indexOf(this.nodes,Node,0);
		if(index >= 0) return this.nodes.splice(index,1)[0]; else return null;
	}
	,removeAt: function(Index) {
		if(this.nodes.length <= 0) return null;
		if(Index >= this.nodes.length) Index = this.nodes.length - 1;
		return this.nodes.splice(Index,1)[0];
	}
	,head: function() {
		if(this.nodes.length > 0) return this.nodes[0];
		return null;
	}
	,tail: function() {
		if(this.nodes.length > 0) return this.nodes[this.nodes.length - 1];
		return null;
	}
	,drawDebug: function(Camera) {
		if(this.nodes == null || this.nodes.length <= 0) return;
		if(Camera == null) Camera = flixel_FlxG.camera;
		var gfx = flixel_util_FlxSpriteUtil.flashGfx;
		gfx.clear();
		var node;
		var nextNode;
		var i = 0;
		var l = this.nodes.length;
		while(i < l) {
			node = this.nodes[i];
			flixel_util_FlxPath._point.set_x(node.x - Camera.scroll.x * this.debugScrollX);
			flixel_util_FlxPath._point.set_y(node.y - Camera.scroll.y * this.debugScrollY);
			var nodeSize = 2;
			if(i == 0 || i == l - 1) nodeSize *= 2;
			var nodeColor = this.debugColor;
			if(l > 1) {
				if(i == 0) nodeColor = -16744448; else if(i == l - 1) nodeColor = -65536;
			}
			gfx.beginFill(nodeColor,0.5);
			gfx.lineStyle();
			gfx.drawRect(flixel_util_FlxPath._point.x - nodeSize * 0.5,flixel_util_FlxPath._point.y - nodeSize * 0.5,nodeSize,nodeSize);
			gfx.endFill();
			var linealpha = 0.3;
			if(i < l - 1) nextNode = this.nodes[i + 1]; else nextNode = this.nodes[i];
			gfx.moveTo(flixel_util_FlxPath._point.x,flixel_util_FlxPath._point.y);
			gfx.lineStyle(1,this.debugColor,linealpha);
			flixel_util_FlxPath._point.set_x(nextNode.x - Camera.scroll.x * this.debugScrollX);
			flixel_util_FlxPath._point.set_y(nextNode.y - Camera.scroll.y * this.debugScrollY);
			gfx.lineTo(flixel_util_FlxPath._point.x,flixel_util_FlxPath._point.y);
			i++;
		}
		Camera.buffer.draw(flixel_util_FlxSpriteUtil.flashGfxSprite);
	}
	,__class__: flixel_util_FlxPath
};
var flixel_plugin_FlxPlugin = function() {
	flixel_FlxBasic.call(this);
};
$hxClasses["flixel.plugin.FlxPlugin"] = flixel_plugin_FlxPlugin;
flixel_plugin_FlxPlugin.__name__ = ["flixel","plugin","FlxPlugin"];
flixel_plugin_FlxPlugin.__super__ = flixel_FlxBasic;
flixel_plugin_FlxPlugin.prototype = $extend(flixel_FlxBasic.prototype,{
	onStateSwitch: function() {
	}
	,onResize: function(Width,Height) {
	}
	,__class__: flixel_plugin_FlxPlugin
});
var flixel_plugin_PathManager = function() {
	this._paths = [];
	flixel_plugin_FlxPlugin.call(this);
	this.set_visible(false);
};
$hxClasses["flixel.plugin.PathManager"] = flixel_plugin_PathManager;
flixel_plugin_PathManager.__name__ = ["flixel","plugin","PathManager"];
flixel_plugin_PathManager.__super__ = flixel_plugin_FlxPlugin;
flixel_plugin_PathManager.prototype = $extend(flixel_plugin_FlxPlugin.prototype,{
	_paths: null
	,destroy: function() {
		flixel_util_FlxArrayUtil.clearArray(this._paths);
		this._paths = null;
		flixel_plugin_FlxPlugin.prototype.destroy.call(this);
	}
	,update: function() {
		var _g = 0;
		var _g1 = this._paths;
		while(_g < _g1.length) {
			var path = _g1[_g];
			++_g;
			if(path.active) path.update();
		}
	}
	,draw: function() {
		flixel_plugin_FlxPlugin.prototype.draw.call(this);
		if(flixel_FlxG["debugger"].drawDebug) {
			var _g = 0;
			var _g1 = this._paths;
			while(_g < _g1.length) {
				var path = _g1[_g];
				++_g;
				if(path != null && !path.ignoreDrawDebug) path.drawDebug();
			}
		}
	}
	,add: function(Path) {
		this._paths.push(Path);
	}
	,remove: function(Path,ReturnInPool) {
		if(ReturnInPool == null) ReturnInPool = true;
		flixel_util_FlxArrayUtil.fastSplice_flixel_util_FlxPath(this._paths,Path);
	}
	,clear: function() {
		flixel_util_FlxArrayUtil.clearArray(this._paths);
	}
	,onStateSwitch: function() {
		flixel_util_FlxArrayUtil.clearArray(this._paths);
	}
	,__class__: flixel_plugin_PathManager
});
var flixel_util_FlxTimer = function(Time,Callback,Loops) {
	if(Loops == null) Loops = 1;
	this._inManager = false;
	this._loopsCounter = 0;
	this._timeCounter = 0;
	this.finished = false;
	this.active = true;
	this.loops = 0;
	this.time = 0;
	if(Time != null) this.start(Time,Callback,Loops);
};
$hxClasses["flixel.util.FlxTimer"] = flixel_util_FlxTimer;
flixel_util_FlxTimer.__name__ = ["flixel","util","FlxTimer"];
flixel_util_FlxTimer.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_util_FlxTimer.manager = null;
flixel_util_FlxTimer.prototype = {
	time: null
	,loops: null
	,active: null
	,finished: null
	,complete: null
	,_timeCounter: null
	,_loopsCounter: null
	,_inManager: null
	,destroy: function() {
		this.complete = null;
	}
	,start: function(Time,Callback,Loops) {
		if(Loops == null) Loops = 1;
		if(Time == null) Time = 1;
		if(flixel_util_FlxTimer.manager != null && !this._inManager) {
			flixel_util_FlxTimer.manager.add(this);
			this._inManager = true;
		}
		this.active = true;
		this.finished = false;
		this.time = Math.abs(Time);
		if(Loops < 0) Loops *= -1;
		this.loops = Loops;
		this.complete = Callback;
		this._timeCounter = 0;
		this._loopsCounter = 0;
		return this;
	}
	,reset: function(NewTime) {
		if(NewTime == null) NewTime = -1;
		if(NewTime < 0) NewTime = this.time;
		this.start(NewTime,this.complete,this.loops);
		return this;
	}
	,cancel: function() {
		this.finished = true;
		if(flixel_util_FlxTimer.manager != null && this._inManager) {
			flixel_util_FlxTimer.manager.remove(this);
			this._inManager = false;
		}
	}
	,update: function() {
		this._timeCounter += flixel_FlxG.elapsed;
		while(this._timeCounter >= this.time && this.active && !this.finished) {
			this._timeCounter -= this.time;
			this._loopsCounter++;
			if(this.complete != null) this.complete(this);
			if(this.loops > 0 && this._loopsCounter >= this.loops) this.cancel();
		}
	}
	,get_timeLeft: function() {
		return this.time - this._timeCounter;
	}
	,get_elapsedTime: function() {
		return this._timeCounter;
	}
	,get_loopsLeft: function() {
		return this.loops - this._loopsCounter;
	}
	,get_elapsedLoops: function() {
		return this._loopsCounter;
	}
	,get_progress: function() {
		if(this.time > 0) return this._timeCounter / this.time; else return 0;
	}
	,__class__: flixel_util_FlxTimer
	,__properties__: {get_progress:"get_progress",get_elapsedLoops:"get_elapsedLoops",get_loopsLeft:"get_loopsLeft",get_elapsedTime:"get_elapsedTime",get_timeLeft:"get_timeLeft"}
};
var flixel_plugin_TimerManager = function() {
	flixel_plugin_FlxPlugin.call(this);
	this._timers = [];
	this.set_visible(false);
};
$hxClasses["flixel.plugin.TimerManager"] = flixel_plugin_TimerManager;
flixel_plugin_TimerManager.__name__ = ["flixel","plugin","TimerManager"];
flixel_plugin_TimerManager.__super__ = flixel_plugin_FlxPlugin;
flixel_plugin_TimerManager.prototype = $extend(flixel_plugin_FlxPlugin.prototype,{
	_timers: null
	,destroy: function() {
		flixel_util_FlxArrayUtil.clearArray(this._timers);
		this._timers = null;
		flixel_plugin_FlxPlugin.prototype.destroy.call(this);
	}
	,update: function() {
		var _g = 0;
		var _g1 = this._timers;
		while(_g < _g1.length) {
			var timer = _g1[_g];
			++_g;
			if(timer.active && !timer.finished && timer.time >= 0) timer.update();
		}
	}
	,add: function(Timer) {
		this._timers.push(Timer);
	}
	,remove: function(Timer) {
		flixel_util_FlxArrayUtil.fastSplice_flixel_util_FlxTimer(this._timers,Timer);
	}
	,clear: function() {
		flixel_util_FlxArrayUtil.clearArray(this._timers);
	}
	,onStateSwitch: function() {
		flixel_util_FlxArrayUtil.clearArray(this._timers);
	}
	,__class__: flixel_plugin_TimerManager
});
var flixel_tweens_FlxTween = function(Options) {
	this._delayToUse = 0;
	this._secondsSinceStart = 0;
	this.loopDelay = 0;
	this.startDelay = 0;
	this.executions = 0;
	this.duration = 0;
	this.active = true;
	Options = this.resolveTweenOptions(Options);
	this.set_type(Options.type);
	this.complete = Options.complete;
	this.ease = Options.ease;
	this.setDelays(Options.startDelay,Options.loopDelay);
};
$hxClasses["flixel.tweens.FlxTween"] = flixel_tweens_FlxTween;
flixel_tweens_FlxTween.__name__ = ["flixel","tweens","FlxTween"];
flixel_tweens_FlxTween.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_tweens_FlxTween.manager = null;
flixel_tweens_FlxTween.tween = function(Object,Values,Duration,Options) {
	if(Duration == null) Duration = 1;
	var tween = new flixel_tweens_misc_VarTween(Options);
	tween.tween(Object,Values,Duration);
	return flixel_tweens_FlxTween.manager.add_flixel_tweens_misc_VarTween(tween);
};
flixel_tweens_FlxTween.num = function(FromValue,ToValue,Duration,Options,TweenFunction) {
	if(Duration == null) Duration = 1;
	var tween = new flixel_tweens_misc_NumTween(Options);
	tween.tween(FromValue,ToValue,Duration,TweenFunction);
	return flixel_tweens_FlxTween.manager.add_flixel_tweens_misc_NumTween(tween);
};
flixel_tweens_FlxTween.angle = function(Sprite,FromAngle,ToAngle,Duration,Options) {
	if(Duration == null) Duration = 1;
	var tween = new flixel_tweens_misc_AngleTween(Options);
	tween.tween(FromAngle,ToAngle,Duration,Sprite);
	return flixel_tweens_FlxTween.manager.add_flixel_tweens_misc_AngleTween(tween);
};
flixel_tweens_FlxTween.color = function(Sprite,Duration,FromColor,ToColor,FromAlpha,ToAlpha,Options) {
	if(ToAlpha == null) ToAlpha = 1;
	if(FromAlpha == null) FromAlpha = 1;
	if(Duration == null) Duration = 1;
	var tween = new flixel_tweens_misc_ColorTween(Options);
	tween.tween(Duration,FromColor,ToColor,FromAlpha,ToAlpha,Sprite);
	return flixel_tweens_FlxTween.manager.add_flixel_tweens_misc_ColorTween(tween);
};
flixel_tweens_FlxTween.linearMotion = function(Object,FromX,FromY,ToX,ToY,DurationOrSpeed,UseDuration,Options) {
	if(UseDuration == null) UseDuration = true;
	if(DurationOrSpeed == null) DurationOrSpeed = 1;
	var tween = new flixel_tweens_motion_LinearMotion(Options);
	tween.setObject(Object);
	tween.setMotion(FromX,FromY,ToX,ToY,DurationOrSpeed,UseDuration);
	return flixel_tweens_FlxTween.manager.add_flixel_tweens_motion_LinearMotion(tween);
};
flixel_tweens_FlxTween.quadMotion = function(Object,FromX,FromY,ControlX,ControlY,ToX,ToY,DurationOrSpeed,UseDuration,Options) {
	if(UseDuration == null) UseDuration = true;
	if(DurationOrSpeed == null) DurationOrSpeed = 1;
	var tween = new flixel_tweens_motion_QuadMotion(Options);
	tween.setObject(Object);
	tween.setMotion(FromX,FromY,ControlX,ControlY,ToX,ToY,DurationOrSpeed,UseDuration);
	return flixel_tweens_FlxTween.manager.add_flixel_tweens_motion_QuadMotion(tween);
};
flixel_tweens_FlxTween.cubicMotion = function(Object,FromX,FromY,aX,aY,bX,bY,ToX,ToY,Duration,Options) {
	if(Duration == null) Duration = 1;
	var tween = new flixel_tweens_motion_CubicMotion(Options);
	tween.setObject(Object);
	tween.setMotion(FromX,FromY,aX,aY,bX,bY,ToX,ToY,Duration);
	return flixel_tweens_FlxTween.manager.add_flixel_tweens_motion_CubicMotion(tween);
};
flixel_tweens_FlxTween.circularMotion = function(Object,CenterX,CenterY,Radius,Angle,Clockwise,DurationOrSpeed,UseDuration,Options) {
	if(UseDuration == null) UseDuration = true;
	if(DurationOrSpeed == null) DurationOrSpeed = 1;
	var tween = new flixel_tweens_motion_CircularMotion(Options);
	tween.setObject(Object);
	tween.setMotion(CenterX,CenterY,Radius,Angle,Clockwise,DurationOrSpeed,UseDuration);
	return flixel_tweens_FlxTween.manager.add_flixel_tweens_motion_CircularMotion(tween);
};
flixel_tweens_FlxTween.linearPath = function(Object,Points,DurationOrSpeed,UseDuration,Options) {
	if(UseDuration == null) UseDuration = true;
	if(DurationOrSpeed == null) DurationOrSpeed = 1;
	var tween = new flixel_tweens_motion_LinearPath(Options);
	if(Points != null) {
		var _g = 0;
		while(_g < Points.length) {
			var point = Points[_g];
			++_g;
			tween.addPoint(point.x,point.y);
		}
	}
	tween.setObject(Object);
	tween.setMotion(DurationOrSpeed,UseDuration);
	return flixel_tweens_FlxTween.manager.add_flixel_tweens_motion_LinearPath(tween);
};
flixel_tweens_FlxTween.quadPath = function(Object,Points,DurationOrSpeed,UseDuration,Options) {
	if(UseDuration == null) UseDuration = true;
	if(DurationOrSpeed == null) DurationOrSpeed = 1;
	var tween = new flixel_tweens_motion_QuadPath(Options);
	if(Points != null) {
		var _g = 0;
		while(_g < Points.length) {
			var point = Points[_g];
			++_g;
			tween.addPoint(point.x,point.y);
		}
	}
	tween.setObject(Object);
	tween.setMotion(DurationOrSpeed,UseDuration);
	return flixel_tweens_FlxTween.manager.add_flixel_tweens_motion_QuadPath(tween);
};
flixel_tweens_FlxTween.prototype = {
	active: null
	,duration: null
	,ease: null
	,complete: null
	,type: null
	,finished: null
	,scale: null
	,backward: null
	,executions: null
	,startDelay: null
	,loopDelay: null
	,_secondsSinceStart: null
	,_delayToUse: null
	,resolveTweenOptions: function(Options) {
		if(Options == null) Options = { type : 8};
		if(Options.type == null) Options.type = 8;
		return Options;
	}
	,destroy: function() {
		this.complete = null;
		this.ease = null;
	}
	,update: function() {
		this._secondsSinceStart += flixel_FlxG.elapsed;
		var delay;
		if(this.executions > 0) delay = this.loopDelay; else delay = this.startDelay;
		this.scale = Math.max(this._secondsSinceStart - delay,0) / this.duration;
		if(this.ease != null) this.scale = this.ease(this.scale);
		if(this.backward) this.scale = 1 - this.scale;
		if(this._secondsSinceStart >= this.duration + delay) {
			if(this.backward) this.scale = 0; else this.scale = 1;
			this.finished = true;
		}
	}
	,start: function() {
		this._secondsSinceStart = 0;
		if(this.executions > 0) this._delayToUse = this.loopDelay; else this._delayToUse = this.startDelay;
		if(this.duration == 0) {
			this.active = false;
			return this;
		}
		this.active = true;
		this.finished = false;
		return this;
	}
	,cancel: function() {
		this.active = false;
		this.finished = true;
		flixel_tweens_FlxTween.manager.remove(this);
	}
	,finish: function() {
		this.executions++;
		if(this.complete != null) this.complete(this);
		var _g = this.type & -17;
		switch(_g) {
		case 1:
			this._secondsSinceStart = this.duration + this.startDelay;
			this.active = false;
			this.finished = true;
			break;
		case 8:
			this.active = false;
			this.finished = true;
			this._secondsSinceStart = this.duration + this.startDelay;
			flixel_tweens_FlxTween.manager.remove(this);
			break;
		case 2:
			this._secondsSinceStart = (this._secondsSinceStart - this._delayToUse) % this.duration + this._delayToUse;
			this.scale = Math.max(this._secondsSinceStart - this._delayToUse,0) / this.duration;
			if(this.ease != null && this.scale > 0 && this.scale < 1) this.scale = this.ease(this.scale);
			this.start();
			break;
		case 4:
			this._secondsSinceStart = (this._secondsSinceStart - this._delayToUse) % this.duration + this._delayToUse;
			this.scale = Math.max(this._secondsSinceStart - this._delayToUse,0) / this.duration;
			if(this.ease != null && this.scale > 0 && this.scale < 1) this.scale = this.ease(this.scale);
			this.backward = !this.backward;
			if(this.backward) this.scale = 1 - this.scale;
			this.start();
			break;
		}
	}
	,setDelays: function(StartDelay,LoopDelay) {
		this.set_startDelay(StartDelay != null?StartDelay:0);
		this.set_loopDelay(LoopDelay != null?LoopDelay:0);
		return this;
	}
	,set_startDelay: function(value) {
		var dly = Math.abs(value);
		if(this.executions == 0) {
			this._secondsSinceStart = this.duration * (Math.max(this._secondsSinceStart - this._delayToUse,0) / this.duration) + Math.max(dly - this.startDelay,0);
			this._delayToUse = dly;
		}
		return this.startDelay = dly;
	}
	,set_loopDelay: function(value) {
		var dly = Math.abs(value);
		if(this.executions > 0) {
			this._secondsSinceStart = this.duration * (Math.max(this._secondsSinceStart - this._delayToUse,0) / this.duration) + Math.max(dly - this.loopDelay,0);
			this._delayToUse = dly;
		}
		return this.loopDelay = dly;
	}
	,get_percent: function() {
		return Math.max(this._secondsSinceStart - this._delayToUse,0) / this.duration;
	}
	,set_percent: function(value) {
		return this._secondsSinceStart = this.duration * value + this._delayToUse;
	}
	,set_type: function(value) {
		if(value == 0) value = 8; else if(value == 16) value = 17;
		this.backward = (value & 16) > 0;
		return this.type = value;
	}
	,__class__: flixel_tweens_FlxTween
	,__properties__: {set_loopDelay:"set_loopDelay",set_startDelay:"set_startDelay",set_percent:"set_percent",get_percent:"get_percent",set_type:"set_type"}
};
var flixel_plugin_TweenManager = function() {
	this._tweens = [];
	flixel_plugin_FlxPlugin.call(this);
	this.set_visible(false);
};
$hxClasses["flixel.plugin.TweenManager"] = flixel_plugin_TweenManager;
flixel_plugin_TweenManager.__name__ = ["flixel","plugin","TweenManager"];
flixel_plugin_TweenManager.__super__ = flixel_plugin_FlxPlugin;
flixel_plugin_TweenManager.prototype = $extend(flixel_plugin_FlxPlugin.prototype,{
	add_flixel_tweens_motion_QuadPath: function(Tween,Start) {
		if(Start == null) Start = false;
		if(Tween == null) return null;
		this._tweens.push(Tween);
		if(Start) Tween.start();
		return Tween;
	}
	,add_flixel_tweens_motion_LinearPath: function(Tween,Start) {
		if(Start == null) Start = false;
		if(Tween == null) return null;
		this._tweens.push(Tween);
		if(Start) Tween.start();
		return Tween;
	}
	,add_flixel_tweens_motion_CircularMotion: function(Tween,Start) {
		if(Start == null) Start = false;
		if(Tween == null) return null;
		this._tweens.push(Tween);
		if(Start) Tween.start();
		return Tween;
	}
	,add_flixel_tweens_motion_CubicMotion: function(Tween,Start) {
		if(Start == null) Start = false;
		if(Tween == null) return null;
		this._tweens.push(Tween);
		if(Start) Tween.start();
		return Tween;
	}
	,add_flixel_tweens_motion_QuadMotion: function(Tween,Start) {
		if(Start == null) Start = false;
		if(Tween == null) return null;
		this._tweens.push(Tween);
		if(Start) Tween.start();
		return Tween;
	}
	,add_flixel_tweens_motion_LinearMotion: function(Tween,Start) {
		if(Start == null) Start = false;
		if(Tween == null) return null;
		this._tweens.push(Tween);
		if(Start) Tween.start();
		return Tween;
	}
	,add_flixel_tweens_misc_ColorTween: function(Tween,Start) {
		if(Start == null) Start = false;
		if(Tween == null) return null;
		this._tweens.push(Tween);
		if(Start) Tween.start();
		return Tween;
	}
	,add_flixel_tweens_misc_AngleTween: function(Tween,Start) {
		if(Start == null) Start = false;
		if(Tween == null) return null;
		this._tweens.push(Tween);
		if(Start) Tween.start();
		return Tween;
	}
	,add_flixel_tweens_misc_NumTween: function(Tween,Start) {
		if(Start == null) Start = false;
		if(Tween == null) return null;
		this._tweens.push(Tween);
		if(Start) Tween.start();
		return Tween;
	}
	,add_flixel_tweens_misc_VarTween: function(Tween,Start) {
		if(Start == null) Start = false;
		if(Tween == null) return null;
		this._tweens.push(Tween);
		if(Start) Tween.start();
		return Tween;
	}
	,_tweens: null
	,update: function() {
		var finishedTweens = null;
		var _g = 0;
		var _g1 = this._tweens;
		while(_g < _g1.length) {
			var tween = _g1[_g];
			++_g;
			if(tween.active) {
				tween.update();
				if(tween.finished) {
					if(finishedTweens == null) finishedTweens = [];
					finishedTweens.push(tween);
				}
			}
		}
		if(finishedTweens != null) while(finishedTweens.length > 0) finishedTweens.shift().finish();
	}
	,remove: function(Tween) {
		if(Tween == null) return null;
		Tween.active = false;
		Tween.destroy();
		flixel_util_FlxArrayUtil.fastSplice_flixel_tweens_FlxTween(this._tweens,Tween);
		return Tween;
	}
	,clear: function() {
		while(this._tweens.length > 0) this.remove(this._tweens[0]);
	}
	,onStateSwitch: function() {
		this.clear();
	}
	,__class__: flixel_plugin_TweenManager
});
var flixel_util_FlxSave = function() {
	this.destroy();
};
$hxClasses["flixel.util.FlxSave"] = flixel_util_FlxSave;
flixel_util_FlxSave.__name__ = ["flixel","util","FlxSave"];
flixel_util_FlxSave.prototype = {
	data: null
	,name: null
	,_sharedObject: null
	,_onComplete: null
	,_closeRequested: null
	,destroy: function() {
		this._sharedObject = null;
		this.name = null;
		this.data = null;
		this._onComplete = null;
		this._closeRequested = false;
	}
	,bind: function(Name) {
		this.destroy();
		this.name = Name;
		try {
			this._sharedObject = openfl_net_SharedObject.getLocal(this.name);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
				flixel_FlxG.log.advanced("There was a problem binding to\nthe shared object data from FlxSave.",flixel_system_debug_LogStyle.ERROR,true);
				this.destroy();
				return false;
			} else throw(e);
		}
		this.data = this._sharedObject.data;
		return true;
	}
	,close: function(MinFileSize,OnComplete) {
		if(MinFileSize == null) MinFileSize = 0;
		this._closeRequested = true;
		return this.flush(MinFileSize,OnComplete);
	}
	,flush: function(MinFileSize,OnComplete) {
		if(MinFileSize == null) MinFileSize = 0;
		if(!this.checkBinding()) return false;
		this._onComplete = OnComplete;
		var result;
		try {
			result = this._sharedObject.flush();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
				return this.onDone(flixel_util_FlxSave.ERROR);
			} else throw(e);
		}
		if(result == openfl_net_SharedObjectFlushStatus.PENDING) {
		}
		return this.onDone(result == openfl_net_SharedObjectFlushStatus.FLUSHED?flixel_util_FlxSave.SUCCESS:flixel_util_FlxSave.PENDING);
	}
	,erase: function() {
		if(!this.checkBinding()) return false;
		this._sharedObject.clear();
		this.data = { };
		return true;
	}
	,onDone: function(Result) {
		switch(Result) {
		case 1:
			flixel_FlxG.log.advanced("FlxSave is requesting extra storage space.",flixel_system_debug_LogStyle.WARNING,true);
			break;
		case 2:
			flixel_FlxG.log.advanced("There was a problem flushing\nthe shared object data from FlxSave.",flixel_system_debug_LogStyle.ERROR,true);
			break;
		}
		if(this._onComplete != null) this._onComplete(Result == flixel_util_FlxSave.SUCCESS);
		if(this._closeRequested) this.destroy();
		return Result == flixel_util_FlxSave.SUCCESS;
	}
	,checkBinding: function() {
		if(this._sharedObject == null) {
			flixel_FlxG.log.advanced("You must call FlxSave.bind()\nbefore you can read or write data.",flixel_system_debug_LogStyle.WARNING,true);
			return false;
		}
		return true;
	}
	,__class__: flixel_util_FlxSave
};
var flixel_system_frontEnds_SignalFrontEnd = function() {
	this.stateSwitched = new flixel_util__$FlxSignal_FlxSignal0();
	this.gameResized = new flixel_util__$FlxSignal_FlxSignal2();
	this.gameReset = new flixel_util__$FlxSignal_FlxSignal0();
	this.gameStarted = new flixel_util__$FlxSignal_FlxSignal0();
	this.preUpdate = new flixel_util__$FlxSignal_FlxSignal0();
	this.postUpdate = new flixel_util__$FlxSignal_FlxSignal0();
	this.preDraw = new flixel_util__$FlxSignal_FlxSignal0();
	this.postDraw = new flixel_util__$FlxSignal_FlxSignal0();
	this.focusGained = new flixel_util__$FlxSignal_FlxSignal0();
	this.focusLost = new flixel_util__$FlxSignal_FlxSignal0();
};
$hxClasses["flixel.system.frontEnds.SignalFrontEnd"] = flixel_system_frontEnds_SignalFrontEnd;
flixel_system_frontEnds_SignalFrontEnd.__name__ = ["flixel","system","frontEnds","SignalFrontEnd"];
flixel_system_frontEnds_SignalFrontEnd.prototype = {
	stateSwitched: null
	,gameResized: null
	,gameReset: null
	,gameStarted: null
	,preUpdate: null
	,postUpdate: null
	,preDraw: null
	,postDraw: null
	,focusGained: null
	,focusLost: null
	,__class__: flixel_system_frontEnds_SignalFrontEnd
};
var flixel_system_frontEnds_SoundFrontEnd = function() {
	this.volume = 1;
	this.soundTrayEnabled = true;
	this.muted = false;
	this.volumeUpKeys = ["PLUS","NUMPADPLUS"];
	this.volumeDownKeys = ["MINUS","NUMPADMINUS"];
	this.muteKeys = ["ZERO","NUMPADZERO"];
	this.list = new flixel_group_FlxTypedGroup();
	this._soundCache = new haxe_ds_StringMap();
};
$hxClasses["flixel.system.frontEnds.SoundFrontEnd"] = flixel_system_frontEnds_SoundFrontEnd;
flixel_system_frontEnds_SoundFrontEnd.__name__ = ["flixel","system","frontEnds","SoundFrontEnd"];
flixel_system_frontEnds_SoundFrontEnd.prototype = {
	music: null
	,muted: null
	,volumeHandler: null
	,volumeUpKeys: null
	,volumeDownKeys: null
	,muteKeys: null
	,soundTrayEnabled: null
	,list: null
	,volume: null
	,_soundCache: null
	,playMusic: function(Music,Volume,Looped) {
		if(Looped == null) Looped = true;
		if(Volume == null) Volume = 1;
		if(this.music == null) this.music = new flixel_system_FlxSound(); else if(this.music.active) this.music.stop();
		this.music.loadEmbedded(Music,Looped);
		this.music.set_volume(Volume);
		this.music.persist = true;
		this.music.play();
	}
	,load: function(EmbeddedSound,Volume,Looped,AutoDestroy,AutoPlay,URL,OnComplete) {
		if(AutoPlay == null) AutoPlay = false;
		if(AutoDestroy == null) AutoDestroy = false;
		if(Looped == null) Looped = false;
		if(Volume == null) Volume = 1;
		if(EmbeddedSound == null && URL == null) {
			flixel_FlxG.log.warn("FlxG.loadSound() requires either\nan embedded sound or a URL to work.");
			return null;
		}
		var sound = this.list.recycle(flixel_system_FlxSound);
		if(EmbeddedSound != null) sound.loadEmbedded(EmbeddedSound,Looped,AutoDestroy,OnComplete); else sound.loadStream(URL,Looped,AutoDestroy,OnComplete);
		sound.set_volume(Volume);
		if(AutoPlay) sound.play();
		return sound;
	}
	,cache: function(EmbeddedSound) {
		if(this._soundCache.exists(EmbeddedSound)) return this._soundCache.get(EmbeddedSound); else {
			var sound = openfl_Assets.getSound(EmbeddedSound);
			this._soundCache.set(EmbeddedSound,sound);
			return sound;
		}
	}
	,play: function(EmbeddedSound,Volume,Looped,AutoDestroy,OnComplete) {
		if(AutoDestroy == null) AutoDestroy = true;
		if(Looped == null) Looped = false;
		if(Volume == null) Volume = 1;
		var sound = null;
		if(this._soundCache.exists(EmbeddedSound)) sound = this._soundCache.get(EmbeddedSound); else {
			sound = openfl_Assets.getSound(EmbeddedSound);
			this._soundCache.set(EmbeddedSound,sound);
		}
		var flixelSound = this.list.recycle(flixel_system_FlxSound).loadEmbedded(sound,Looped,AutoDestroy,OnComplete);
		flixelSound.set_volume(Volume);
		return flixelSound.play();
	}
	,stream: function(URL,Volume,Looped,AutoDestroy,OnComplete) {
		if(AutoDestroy == null) AutoDestroy = true;
		if(Looped == null) Looped = false;
		if(Volume == null) Volume = 1;
		return this.load(null,Volume,Looped,AutoDestroy,true,URL,OnComplete);
	}
	,pause: function() {
		if(this.music != null && this.music.exists && this.music.active) this.music.pause();
		var _g = 0;
		var _g1 = this.list.members;
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			if(sound != null && sound.exists && sound.active) sound.pause();
		}
	}
	,resume: function() {
		if(this.music != null && this.music.exists) this.music.resume();
		var _g = 0;
		var _g1 = this.list.members;
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			if(sound != null && sound.exists) sound.resume();
		}
	}
	,destroy: function(ForceDestroy) {
		if(ForceDestroy == null) ForceDestroy = false;
		if(this.music != null && (ForceDestroy || !this.music.persist)) {
			this.music.destroy();
			this.music = null;
		}
		var _g = 0;
		var _g1 = this.list.members;
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			if(sound != null && (ForceDestroy || !sound.persist)) sound.destroy();
		}
	}
	,update: function() {
		if(this.music != null && this.music.active) this.music.update();
		if(this.list != null && this.list.active) this.list.update();
	}
	,onFocusLost: function() {
		if(this.music != null) this.music.onFocusLost();
		var _g = 0;
		var _g1 = this.list.members;
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			if(sound != null) sound.onFocusLost();
		}
	}
	,onFocus: function() {
		if(this.music != null) this.music.onFocus();
		var _g = 0;
		var _g1 = this.list.members;
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			if(sound != null) sound.onFocus();
		}
	}
	,loadSavedPrefs: function() {
		if(flixel_FlxG.save.data.volume != null) this.set_volume(flixel_FlxG.save.data.volume); else this.set_volume(0.5);
		if(flixel_FlxG.save.data.mute != null) this.muted = flixel_FlxG.save.data.mute; else this.muted = false;
	}
	,set_volume: function(Volume) {
		Volume = flixel_util_FlxMath.bound(Volume,0,1);
		if(this.volumeHandler != null) {
			var param;
			if(this.muted) param = 0; else param = Volume;
			this.volumeHandler(param);
		}
		return this.volume = Volume;
	}
	,__class__: flixel_system_frontEnds_SoundFrontEnd
	,__properties__: {set_volume:"set_volume"}
};
var flixel_system_frontEnds_VCRFrontEnd = function() {
	this.stepRequested = false;
	this.paused = false;
};
$hxClasses["flixel.system.frontEnds.VCRFrontEnd"] = flixel_system_frontEnds_VCRFrontEnd;
flixel_system_frontEnds_VCRFrontEnd.__name__ = ["flixel","system","frontEnds","VCRFrontEnd"];
flixel_system_frontEnds_VCRFrontEnd.prototype = {
	paused: null
	,stepRequested: null
	,pause: function() {
		if(!this.paused) {
			if(!flixel_FlxG.mouse.useSystemCursor) openfl_ui_Mouse.show();
			this.paused = true;
			flixel_FlxG.game["debugger"].vcr.onPause();
		}
	}
	,resume: function() {
		if(this.paused) {
			if(!flixel_FlxG.mouse.useSystemCursor) openfl_ui_Mouse.hide();
			this.paused = false;
			flixel_FlxG.game["debugger"].vcr.onResume();
		}
	}
	,__class__: flixel_system_frontEnds_VCRFrontEnd
};
var flixel_system_frontEnds_WatchFrontEnd = function() {
};
$hxClasses["flixel.system.frontEnds.WatchFrontEnd"] = flixel_system_frontEnds_WatchFrontEnd;
flixel_system_frontEnds_WatchFrontEnd.__name__ = ["flixel","system","frontEnds","WatchFrontEnd"];
flixel_system_frontEnds_WatchFrontEnd.prototype = {
	add: function(AnyObject,VariableName,DisplayName) {
		flixel_FlxG.game["debugger"].watch.add(AnyObject,VariableName,DisplayName);
	}
	,remove: function(AnyObject,VariableName) {
		flixel_FlxG.game["debugger"].watch.remove(AnyObject,VariableName);
	}
	,addQuick: function(Name,NewValue) {
		flixel_FlxG.game["debugger"].watch.updateQuickWatch(Name,NewValue);
	}
	,removeQuick: function(Name) {
		flixel_FlxG.game["debugger"].watch.remove(null,null,Name);
	}
	,addMouse: function() {
		flixel_FlxG.game["debugger"].watch.add(flixel_FlxG,"mouse","Mouse Position");
	}
	,removeMouse: function() {
		flixel_FlxG.game["debugger"].watch.remove(flixel_FlxG,"mouse");
	}
	,__class__: flixel_system_frontEnds_WatchFrontEnd
};
var flixel_util_FlxRect = function(X,Y,Width,Height) {
	if(Height == null) Height = 0;
	if(Width == null) Width = 0;
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this._inPool = false;
	this.x = X;
	this.y = Y;
	this.width = Width;
	this.height = Height;
	this;
};
$hxClasses["flixel.util.FlxRect"] = flixel_util_FlxRect;
flixel_util_FlxRect.__name__ = ["flixel","util","FlxRect"];
flixel_util_FlxRect.__interfaces__ = [flixel_interfaces_IFlxPooled];
flixel_util_FlxRect.get = function(X,Y,Width,Height) {
	if(Height == null) Height = 0;
	if(Width == null) Width = 0;
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	var rect = flixel_util_FlxRect._pool.get().set(X,Y,Width,Height);
	rect._inPool = false;
	return rect;
};
flixel_util_FlxRect.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,_inPool: null
	,put: function() {
		if(!this._inPool) {
			this._inPool = true;
			flixel_util_FlxRect._pool.putUnsafe(this);
		}
	}
	,setSize: function(Width,Height) {
		this.width = Width;
		this.height = Height;
		return this;
	}
	,set: function(X,Y,Width,Height) {
		if(Height == null) Height = 0;
		if(Width == null) Width = 0;
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		this.x = X;
		this.y = Y;
		this.width = Width;
		this.height = Height;
		return this;
	}
	,copyFrom: function(Rect) {
		this.x = Rect.x;
		this.y = Rect.y;
		this.width = Rect.width;
		this.height = Rect.height;
		return this;
	}
	,copyTo: function(Rect) {
		Rect.x = this.x;
		Rect.y = this.y;
		Rect.width = this.width;
		Rect.height = this.height;
		return Rect;
	}
	,copyFromFlash: function(FlashRect) {
		this.x = FlashRect.x;
		this.y = FlashRect.y;
		this.width = FlashRect.width;
		this.height = FlashRect.height;
		return this;
	}
	,copyToFlash: function(FlashRect) {
		FlashRect.x = this.x;
		FlashRect.y = this.y;
		FlashRect.width = this.width;
		FlashRect.height = this.height;
		return FlashRect;
	}
	,overlaps: function(Rect) {
		return Rect.x + Rect.width > this.x && Rect.x < this.x + this.width && Rect.y + Rect.height > this.y && Rect.y < this.y + this.height;
	}
	,containsFlxPoint: function(Point) {
		return flixel_util_FlxMath.pointInFlxRect(Point.x,Point.y,this);
	}
	,union: function(Rect) {
		var minX = Math.min(this.x,Rect.x);
		var minY = Math.min(this.y,Rect.y);
		var maxX = Math.max(this.x + this.width,Rect.x + Rect.width);
		var maxY = Math.max(this.y + this.height,Rect.y + Rect.height);
		this.x = minX;
		this.y = minY;
		this.width = maxX - minX;
		this.height = maxY - minY;
		return this;
	}
	,destroy: function() {
	}
	,toString: function() {
		return flixel_util_FlxStringUtil.getDebugString([flixel_util_LabelValuePair._pool.get().create("x",this.x),flixel_util_LabelValuePair._pool.get().create("y",this.y),flixel_util_LabelValuePair._pool.get().create("w",this.width),flixel_util_LabelValuePair._pool.get().create("h",this.height)]);
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(Value) {
		this.width -= Value - this.x;
		return this.x = Value;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(Value) {
		this.width = Value - this.x;
		return Value;
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(Value) {
		this.height -= Value - this.y;
		return this.y = Value;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(Value) {
		this.height = Value - this.y;
		return Value;
	}
	,__class__: flixel_util_FlxRect
	,__properties__: {set_bottom:"set_bottom",get_bottom:"get_bottom",set_top:"set_top",get_top:"get_top",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left"}
};
var flixel_FlxG = function() { };
$hxClasses["flixel.FlxG"] = flixel_FlxG;
flixel_FlxG.__name__ = ["flixel","FlxG"];
flixel_FlxG.__properties__ = {set_mouse:"set_mouse",set_fullscreen:"set_fullscreen",set_scaleMode:"set_scaleMode",set_drawFramerate:"set_drawFramerate",set_updateFramerate:"set_updateFramerate",get_updateFramerate:"get_updateFramerate",get_state:"get_state",get_stage:"get_stage"}
flixel_FlxG.camera = null;
flixel_FlxG.game = null;
flixel_FlxG.drawFramerate = null;
flixel_FlxG.width = null;
flixel_FlxG.height = null;
flixel_FlxG.scaleMode = null;
flixel_FlxG.mouse = null;
flixel_FlxG.touches = null;
flixel_FlxG.keys = null;
flixel_FlxG.gamepads = null;
flixel_FlxG.resizeGame = function(Width,Height) {
	flixel_FlxG._scaleMode.onMeasure(Width,Height);
};
flixel_FlxG.resetGame = function() {
	flixel_FlxG.game._resetGame = true;
};
flixel_FlxG.switchState = function(State) {
	flixel_FlxG.game._requestedState = State;
};
flixel_FlxG.resetState = function() {
	flixel_FlxG.switchState(Type.createInstance(Type.getClass(flixel_FlxG.game._state),[]));
};
flixel_FlxG.overlap = function(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,ProcessCallback) {
	if(ObjectOrGroup1 == null) ObjectOrGroup1 = flixel_FlxG.game._state;
	if(ObjectOrGroup2 == ObjectOrGroup1) ObjectOrGroup2 = null;
	flixel_system_FlxQuadTree.divisions = flixel_FlxG.worldDivisions;
	var quadTree = flixel_system_FlxQuadTree.recycle(flixel_FlxG.worldBounds.x,flixel_FlxG.worldBounds.y,flixel_FlxG.worldBounds.width,flixel_FlxG.worldBounds.height);
	quadTree.load(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,ProcessCallback);
	var result = quadTree.execute();
	quadTree.destroy();
	return result;
};
flixel_FlxG.pixelPerfectOverlap = function(Sprite1,Sprite2,AlphaTolerance,Camera) {
	if(AlphaTolerance == null) AlphaTolerance = 255;
	return flixel_util_FlxCollision.pixelPerfectCheck(Sprite1,Sprite2,AlphaTolerance,Camera);
};
flixel_FlxG.collide = function(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback) {
	return flixel_FlxG.overlap(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,flixel_FlxObject.separate);
};
flixel_FlxG.openURL = function(URL,Target) {
	if(Target == null) Target = "_blank";
	var prefix = "";
	if(!new EReg("^https?://","").match(URL)) prefix = "http://";
	openfl_Lib.getURL(new openfl_net_URLRequest(prefix + URL),Target);
};
flixel_FlxG.init = function(Game,Width,Height,Zoom) {
	flixel_FlxG.game = Game;
	flixel_FlxG.width = Std["int"](Math.abs(Width));
	flixel_FlxG.height = Std["int"](Math.abs(Height));
	flixel_FlxCamera.defaultZoom = Zoom;
	flixel_FlxG._scaleMode.onMeasure(openfl_Lib.current.stage.stageWidth,openfl_Lib.current.stage.stageHeight);
	flixel_FlxG.keys = flixel_FlxG.inputs.add_flixel_input_keyboard_FlxKeyboard(new flixel_input_keyboard_FlxKeyboard());
	flixel_FlxG.set_mouse(flixel_FlxG.inputs.add_flixel_input_mouse_FlxMouse(new flixel_input_mouse_FlxMouse(flixel_FlxG.game._inputContainer)));
	flixel_FlxG.touches = flixel_FlxG.inputs.add_flixel_input_touch_FlxTouchManager(new flixel_input_touch_FlxTouchManager());
	flixel_FlxG.gamepads = flixel_FlxG.inputs.add_flixel_input_gamepad_FlxGamepadManager(new flixel_input_gamepad_FlxGamepadManager());
	flixel_FlxG.save.bind("flixel");
	flixel_FlxG.sound.loadSavedPrefs();
};
flixel_FlxG.reset = function() {
	flixel_text_pxText_PxBitmapFont.clearStorage();
	flixel_util_FlxRandom.set_globalSeed(Std["int"](Math.random() * 2147483647));
	flixel_FlxG.bitmap.clearCache();
	flixel_FlxG.inputs.reset();
	flixel_FlxG.sound.destroy(true);
	flixel_FlxG.autoPause = true;
	flixel_FlxG.fixedTimestep = true;
	flixel_FlxG.timeScale = 1.0;
	flixel_FlxG.elapsed = 0;
	flixel_FlxG.maxElapsed = 0.1;
	flixel_FlxG.worldBounds.set(-10,-10,flixel_FlxG.width + 20,flixel_FlxG.height + 20);
	flixel_FlxG.worldDivisions = 6;
};
flixel_FlxG.set_scaleMode = function(ScaleMode) {
	flixel_FlxG._scaleMode = ScaleMode;
	flixel_FlxG.game.onResize(null);
	return ScaleMode;
};
flixel_FlxG.set_mouse = function(NewMouse) {
	if(flixel_FlxG.mouse == null) {
		flixel_FlxG.mouse = flixel_FlxG.inputs.add_flixel_input_mouse_FlxMouse(NewMouse);
		return flixel_FlxG.mouse;
	}
	var oldMouse = flixel_FlxG.mouse;
	var result = flixel_FlxG.inputs.replace_flixel_input_mouse_FlxMouse(oldMouse,NewMouse);
	if(result != null) {
		flixel_FlxG.mouse = result;
		oldMouse.destroy();
		return NewMouse;
	}
	return oldMouse;
};
flixel_FlxG.get_updateFramerate = function() {
	return 1000 / flixel_FlxG.game._stepMS | 0;
};
flixel_FlxG.set_updateFramerate = function(Framerate) {
	if(Framerate < flixel_FlxG.drawFramerate) flixel_FlxG.log.advanced("FlxG.framerate: The game's framerate shouldn't be smaller than the flash framerate, since it can stop your game from updating.",flixel_system_debug_LogStyle.WARNING,true);
	flixel_FlxG.game._stepMS = Std["int"](Math.abs(1000 / Framerate));
	flixel_FlxG.game._stepSeconds = flixel_FlxG.game._stepMS / 1000;
	if(flixel_FlxG.game._maxAccumulation < flixel_FlxG.game._stepMS) flixel_FlxG.game._maxAccumulation = flixel_FlxG.game._stepMS;
	return Framerate;
};
flixel_FlxG.set_drawFramerate = function(Framerate) {
	if(Framerate > (1000 / flixel_FlxG.game._stepMS | 0)) flixel_FlxG.log.advanced("FlxG.drawFramerate: The update framerate shouldn't be smaller than the draw framerate, since it can stop your game from updating.",flixel_system_debug_LogStyle.WARNING,true);
	flixel_FlxG.drawFramerate = Std["int"](Math.abs(Framerate));
	if(flixel_FlxG.game.stage != null) flixel_FlxG.game.stage.set_frameRate(flixel_FlxG.drawFramerate);
	flixel_FlxG.game._maxAccumulation = (2000 / flixel_FlxG.drawFramerate | 0) - 1;
	if(flixel_FlxG.game._maxAccumulation < flixel_FlxG.game._stepMS) flixel_FlxG.game._maxAccumulation = flixel_FlxG.game._stepMS;
	return Framerate;
};
flixel_FlxG.set_fullscreen = function(Value) {
	if(Value) openfl_Lib.current.stage.set_displayState(openfl_display_StageDisplayState.FULL_SCREEN); else openfl_Lib.current.stage.set_displayState(openfl_display_StageDisplayState.NORMAL);
	return flixel_FlxG.fullscreen = Value;
};
flixel_FlxG.get_stage = function() {
	return openfl_Lib.current.stage;
};
flixel_FlxG.get_state = function() {
	return flixel_FlxG.game._state;
};
var flixel_FlxGame = function(GameSizeX,GameSizeY,InitialState,Zoom,UpdateFramerate,DrawFramerate,SkipSplash,StartFullscreen) {
	if(StartFullscreen == null) StartFullscreen = false;
	if(SkipSplash == null) SkipSplash = false;
	if(DrawFramerate == null) DrawFramerate = 60;
	if(UpdateFramerate == null) UpdateFramerate = 60;
	if(Zoom == null) Zoom = 1;
	if(GameSizeY == null) GameSizeY = 480;
	if(GameSizeX == null) GameSizeX = 640;
	this._resetGame = false;
	this._skipSplash = false;
	this._customFocusLostScreen = flixel_system_ui_FlxFocusLostScreen;
	this._customSoundTray = flixel_system_ui_FlxSoundTray;
	this._lostFocus = false;
	this._total = 0;
	this._gameJustStarted = false;
	this.ticks = 0;
	this.focusLostFramerate = 10;
	openfl_display_Sprite.call(this);
	this._inputContainer = new openfl_display_Sprite();
	flixel_FlxG.init(this,GameSizeX,GameSizeY,Zoom);
	flixel_FlxG.set_updateFramerate(UpdateFramerate);
	flixel_FlxG.set_drawFramerate(DrawFramerate);
	this._accumulator = this._stepMS;
	this._skipSplash = SkipSplash;
	if(InitialState == null) this._initialState = flixel_FlxState; else this._initialState = InitialState;
	this.addEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.create));
};
$hxClasses["flixel.FlxGame"] = flixel_FlxGame;
flixel_FlxGame.__name__ = ["flixel","FlxGame"];
flixel_FlxGame.__super__ = openfl_display_Sprite;
flixel_FlxGame.prototype = $extend(openfl_display_Sprite.prototype,{
	focusLostFramerate: null
	,soundTray: null
	,'debugger': null
	,ticks: null
	,_gameJustStarted: null
	,_initialState: null
	,_state: null
	,_total: null
	,_accumulator: null
	,_elapsedMS: null
	,_stepMS: null
	,_stepSeconds: null
	,_maxAccumulation: null
	,_lostFocus: null
	,_focusLostScreen: null
	,_inputContainer: null
	,_customSoundTray: null
	,_customFocusLostScreen: null
	,_skipSplash: null
	,_requestedState: null
	,_resetGame: null
	,create: function(_) {
		if(this.stage == null) return;
		this.removeEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.create));
		this._total = openfl_Lib.getTimer();
		this.stage.scaleMode = openfl_display_StageScaleMode.NO_SCALE;
		this.stage.align = openfl_display_StageAlign.TOP_LEFT;
		this.stage.set_frameRate(flixel_FlxG.drawFramerate);
		this.addChild(this._inputContainer);
		this["debugger"] = new flixel_system_debug_FlxDebugger(openfl_Lib.current.stage.stageWidth,openfl_Lib.current.stage.stageHeight);
		this.addChild(this["debugger"]);
		this.soundTray = Type.createInstance(this._customSoundTray,[]);
		this.addChild(this.soundTray);
		this._focusLostScreen = Type.createInstance(this._customFocusLostScreen,[]);
		this.addChild(this._focusLostScreen);
		this.stage.addEventListener(openfl_events_Event.DEACTIVATE,$bind(this,this.onFocusLost));
		this.stage.addEventListener(openfl_events_Event.ACTIVATE,$bind(this,this.onFocus));
		flixel_FlxG.signals.gameReset.dispatch();
		this._skipSplash = true;
		if(this._skipSplash || flixel_system_FlxSplash.nextState != null) {
			this._requestedState = Type.createInstance(this._initialState,[]);
			if(flixel_system_FlxSplash.nextState == null) this._gameJustStarted = true;
		} else {
			flixel_system_FlxSplash.nextState = this._initialState;
			this._requestedState = new flixel_system_FlxSplash();
			this._skipSplash = true;
		}
		if(js_Boot.__instanceof(this._requestedState,flixel_FlxSubState)) throw new js__$Boot_HaxeError("You can't set FlxSubState class instance as the state for you game");
		flixel_FlxG.reset();
		this.switchState();
		if((1000 / flixel_FlxG.game._stepMS | 0) < flixel_FlxG.drawFramerate) flixel_FlxG.log.advanced("FlxG.updateFramerate: The update framerate shouldn't be smaller than the draw framerate, since it can slow down your game.",flixel_system_debug_LogStyle.WARNING,true);
		this.stage.addEventListener(openfl_events_Event.ENTER_FRAME,$bind(this,this.onEnterFrame));
		this.stage.addEventListener(openfl_events_Event.RESIZE,$bind(this,this.onResize));
		this.resizeGame(openfl_Lib.current.stage.stageWidth,openfl_Lib.current.stage.stageHeight);
	}
	,onFocus: function(_) {
		this._lostFocus = false;
		flixel_FlxG.signals.focusGained.dispatch();
		if(!flixel_FlxG.autoPause) {
			this._state.onFocus();
			return;
		}
		if(this._focusLostScreen != null) this._focusLostScreen.set_visible(false);
		this["debugger"].stats.onFocus();
		this.stage.set_frameRate(flixel_FlxG.drawFramerate);
		flixel_FlxG.sound.onFocus();
		flixel_FlxG.inputs.onFocus();
	}
	,onFocusLost: function(_) {
		this._lostFocus = true;
		flixel_FlxG.signals.focusLost.dispatch();
		if(!flixel_FlxG.autoPause) {
			this._state.onFocusLost();
			return;
		}
		if(this._focusLostScreen != null) this._focusLostScreen.set_visible(true);
		this["debugger"].stats.onFocusLost();
		this.stage.set_frameRate(this.focusLostFramerate);
		flixel_FlxG.sound.onFocusLost();
		flixel_FlxG.inputs.onFocusLost();
	}
	,onResize: function(_) {
		var width = openfl_Lib.current.stage.stageWidth;
		var height = openfl_Lib.current.stage.stageHeight;
		this._state.onResize(width,height);
		flixel_FlxG.plugins.onResize(width,height);
		flixel_FlxG.signals.gameResized.dispatch(width,height);
		this.resizeGame(width,height);
	}
	,resizeGame: function(width,height) {
		flixel_FlxG._scaleMode.onMeasure(width,height);
		this["debugger"].onResize(width,height);
		if(this._focusLostScreen != null) this._focusLostScreen.draw();
		if(this.soundTray != null) this.soundTray.screenCenter();
		this._inputContainer.set_scaleX(1 / flixel_FlxG.game.get_scaleX());
		this._inputContainer.set_scaleY(1 / flixel_FlxG.game.get_scaleY());
	}
	,onEnterFrame: function(_) {
		this.ticks = openfl_Lib.getTimer();
		this._elapsedMS = this.ticks - this._total;
		this._total = this.ticks;
		if(this.soundTray != null && this.soundTray.active) this.soundTray.update(this._elapsedMS);
		if(!this._lostFocus || !flixel_FlxG.autoPause) {
			if(flixel_FlxG.vcr.paused) {
				if(flixel_FlxG.vcr.stepRequested) flixel_FlxG.vcr.stepRequested = false; else if(this._state == this._requestedState) return;
			}
			if(flixel_FlxG.fixedTimestep) {
				this._accumulator += this._elapsedMS;
				if(this._accumulator > this._maxAccumulation) this._accumulator = this._maxAccumulation;
				while(this._accumulator > this._stepMS) {
					this.step();
					this._accumulator = this._accumulator - this._stepMS;
				}
			} else this.step();
			flixel_FlxBasic._VISIBLECOUNT = 0;
			this.draw();
			this["debugger"].stats.visibleObjects(flixel_FlxBasic._VISIBLECOUNT);
			this["debugger"].update();
		}
	}
	,resetGame: function() {
		flixel_FlxG.signals.gameReset.dispatch();
		this._skipSplash = true;
		if(this._skipSplash || flixel_system_FlxSplash.nextState != null) {
			this._requestedState = Type.createInstance(this._initialState,[]);
			if(flixel_system_FlxSplash.nextState == null) this._gameJustStarted = true;
		} else {
			flixel_system_FlxSplash.nextState = this._initialState;
			this._requestedState = new flixel_system_FlxSplash();
			this._skipSplash = true;
		}
		if(js_Boot.__instanceof(this._requestedState,flixel_FlxSubState)) throw new js__$Boot_HaxeError("You can't set FlxSubState class instance as the state for you game");
		flixel_FlxG.reset();
	}
	,switchState: function() {
		flixel_text_pxText_PxBitmapFont.clearStorage();
		flixel_FlxG.bitmap.clearCache();
		flixel_FlxG.cameras.reset();
		flixel_FlxG.inputs.reset();
		flixel_FlxG.sound.destroy();
		flixel_FlxG.plugins.onStateSwitch();
		flixel_FlxG.signals.stateSwitched.dispatch();
		if(this._state != null) this._state.destroy();
		this._state = this._requestedState;
		this._state.create();
		if(this._gameJustStarted) this.gameStart();
		this["debugger"].console.registerObject("state",this._state);
	}
	,gameStart: function() {
		flixel_FlxG.signals.gameStarted.dispatch();
		this._gameJustStarted = false;
	}
	,step: function() {
		if(this._resetGame) {
			flixel_FlxG.signals.gameReset.dispatch();
			this._skipSplash = true;
			if(this._skipSplash || flixel_system_FlxSplash.nextState != null) {
				this._requestedState = Type.createInstance(this._initialState,[]);
				if(flixel_system_FlxSplash.nextState == null) this._gameJustStarted = true;
			} else {
				flixel_system_FlxSplash.nextState = this._initialState;
				this._requestedState = new flixel_system_FlxSplash();
				this._skipSplash = true;
			}
			if(js_Boot.__instanceof(this._requestedState,flixel_FlxSubState)) throw new js__$Boot_HaxeError("You can't set FlxSubState class instance as the state for you game");
			flixel_FlxG.reset();
			this._resetGame = false;
		}
		flixel_FlxBasic._ACTIVECOUNT = 0;
		this.update();
		this["debugger"].stats.activeObjects(flixel_FlxBasic._ACTIVECOUNT);
	}
	,update: function() {
		if(!this._state.active || !this._state.exists) return;
		if(this._state != this._requestedState) this.switchState();
		if(flixel_FlxG["debugger"].visible) this.ticks = openfl_Lib.getTimer();
		flixel_FlxG.signals.preUpdate.dispatch();
		if(flixel_FlxG.fixedTimestep) flixel_FlxG.elapsed = flixel_FlxG.timeScale * this._stepSeconds; else {
			flixel_FlxG.elapsed = flixel_FlxG.timeScale * (this._elapsedMS / 1000);
			var max = flixel_FlxG.maxElapsed * flixel_FlxG.timeScale;
			if(flixel_FlxG.elapsed > max) flixel_FlxG.elapsed = max;
		}
		this.updateInput();
		flixel_FlxG.sound.update();
		flixel_FlxG.plugins.update();
		this._state.tryUpdate();
		flixel_FlxG.cameras.update();
		flixel_FlxG.signals.postUpdate.dispatch();
		this["debugger"].stats.flixelUpdate(openfl_Lib.getTimer() - this.ticks);
		var _g = 0;
		var _g1 = flixel_FlxG.swipes;
		while(_g < _g1.length) {
			var swipe = _g1[_g];
			++_g;
			swipe = null;
		}
		flixel_util_FlxArrayUtil.clearArray(flixel_FlxG.swipes);
	}
	,updateInput: function() {
		flixel_FlxG.inputs.update();
	}
	,draw: function() {
		if(!this._state.visible || !this._state.exists) return;
		if(flixel_FlxG["debugger"].visible) this.ticks = openfl_Lib.getTimer();
		flixel_FlxG.signals.preDraw.dispatch();
		flixel_FlxG.cameras.lock();
		flixel_FlxG.plugins.draw();
		this._state.draw();
		flixel_FlxG.cameras.unlock();
		flixel_FlxG.signals.postDraw.dispatch();
		this["debugger"].stats.flixelDraw(openfl_Lib.getTimer() - this.ticks);
	}
	,__class__: flixel_FlxGame
});
var flixel_FlxObject = function(X,Y,Width,Height) {
	if(Height == null) Height = 0;
	if(Width == null) Width = 0;
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this.ignoreDrawDebug = false;
	this.debugBoundingBoxColor = null;
	this.collisonXDrag = true;
	this.allowCollisions = 4369;
	this.wasTouching = 0;
	this.touching = 0;
	this.health = 1;
	this.maxAngular = 10000;
	this.angularDrag = 0;
	this.angularAcceleration = 0;
	this.angularVelocity = 0;
	this.elasticity = 0;
	this.mass = 1;
	this.immovable = false;
	this.moves = true;
	this.angle = 0;
	this.pixelPerfectRender = true;
	this.y = 0;
	this.x = 0;
	flixel_FlxBasic.call(this);
	this.set_x(X);
	this.set_y(Y);
	this.set_width(Width);
	this.set_height(Height);
	this.initVars();
};
$hxClasses["flixel.FlxObject"] = flixel_FlxObject;
flixel_FlxObject.__name__ = ["flixel","FlxObject"];
flixel_FlxObject.separate = function(Object1,Object2) {
	var separatedX = flixel_FlxObject.separateX(Object1,Object2);
	var separatedY = flixel_FlxObject.separateY(Object1,Object2);
	return separatedX || separatedY;
};
flixel_FlxObject.separateX = function(Object1,Object2) {
	var obj1immovable = Object1.immovable;
	var obj2immovable = Object2.immovable;
	if(obj1immovable && obj2immovable) return false;
	if(Object1.collisionType == 3) return (js_Boot.__cast(Object1 , flixel_tile_FlxTilemap)).overlapsWithCallback(Object2,flixel_FlxObject.separateX);
	if(Object2.collisionType == 3) return (js_Boot.__cast(Object2 , flixel_tile_FlxTilemap)).overlapsWithCallback(Object1,flixel_FlxObject.separateX,true);
	var overlap = 0;
	var obj1delta = Object1.x - Object1.last.x;
	var obj2delta = Object2.x - Object2.last.x;
	if(obj1delta != obj2delta) {
		var obj1deltaAbs;
		if(obj1delta > 0) obj1deltaAbs = obj1delta; else obj1deltaAbs = -obj1delta;
		var obj2deltaAbs;
		if(obj2delta > 0) obj2deltaAbs = obj2delta; else obj2deltaAbs = -obj2delta;
		var obj1rect = flixel_FlxObject._firstSeparateFlxRect.set(Object1.x - (obj1delta > 0?obj1delta:0),Object1.last.y,Object1.get_width() + obj1deltaAbs,Object1.get_height());
		var obj2rect = flixel_FlxObject._secondSeparateFlxRect.set(Object2.x - (obj2delta > 0?obj2delta:0),Object2.last.y,Object2.get_width() + obj2deltaAbs,Object2.get_height());
		if(obj1rect.x + obj1rect.width > obj2rect.x && obj1rect.x < obj2rect.x + obj2rect.width && obj1rect.y + obj1rect.height > obj2rect.y && obj1rect.y < obj2rect.y + obj2rect.height) {
			var maxOverlap = obj1deltaAbs + obj2deltaAbs + flixel_FlxObject.SEPARATE_BIAS;
			if(obj1delta > obj2delta) {
				overlap = Object1.x + Object1.get_width() - Object2.x;
				if(overlap > maxOverlap || (Object1.allowCollisions & 16) == 0 || (Object2.allowCollisions & 1) == 0) overlap = 0; else {
					Object1.touching |= 16;
					Object2.touching |= 1;
				}
			} else if(obj1delta < obj2delta) {
				overlap = Object1.x - Object2.get_width() - Object2.x;
				if(-overlap > maxOverlap || (Object1.allowCollisions & 1) == 0 || (Object2.allowCollisions & 16) == 0) overlap = 0; else {
					Object1.touching |= 1;
					Object2.touching |= 16;
				}
			}
		}
	}
	if(overlap != 0) {
		var obj1v = Object1.velocity.x;
		var obj2v = Object2.velocity.x;
		if(!obj1immovable && !obj2immovable) {
			overlap *= 0.5;
			Object1.set_x(Object1.x - overlap);
			var _g = Object2;
			_g.set_x(_g.x + overlap);
			var obj1velocity;
			obj1velocity = Math.sqrt(obj2v * obj2v * Object2.mass / Object1.mass) * (obj2v > 0?1:-1);
			var obj2velocity;
			obj2velocity = Math.sqrt(obj1v * obj1v * Object1.mass / Object2.mass) * (obj1v > 0?1:-1);
			var average = (obj1velocity + obj2velocity) * 0.5;
			obj1velocity -= average;
			obj2velocity -= average;
			Object1.velocity.set_x(average + obj1velocity * Object1.elasticity);
			Object2.velocity.set_x(average + obj2velocity * Object2.elasticity);
		} else if(!obj1immovable) {
			Object1.set_x(Object1.x - overlap);
			Object1.velocity.set_x(obj2v - obj1v * Object1.elasticity);
		} else if(!obj2immovable) {
			var _g1 = Object2;
			_g1.set_x(_g1.x + overlap);
			Object2.velocity.set_x(obj1v - obj2v * Object2.elasticity);
		}
		return true;
	} else return false;
};
flixel_FlxObject.separateY = function(Object1,Object2) {
	var obj1immovable = Object1.immovable;
	var obj2immovable = Object2.immovable;
	if(obj1immovable && obj2immovable) return false;
	if(Object1.collisionType == 3) return (js_Boot.__cast(Object1 , flixel_tile_FlxTilemap)).overlapsWithCallback(Object2,flixel_FlxObject.separateY);
	if(Object2.collisionType == 3) return (js_Boot.__cast(Object2 , flixel_tile_FlxTilemap)).overlapsWithCallback(Object1,flixel_FlxObject.separateY,true);
	var overlap = 0;
	var obj1delta = Object1.y - Object1.last.y;
	var obj2delta = Object2.y - Object2.last.y;
	if(obj1delta != obj2delta) {
		var obj1deltaAbs;
		if(obj1delta > 0) obj1deltaAbs = obj1delta; else obj1deltaAbs = -obj1delta;
		var obj2deltaAbs;
		if(obj2delta > 0) obj2deltaAbs = obj2delta; else obj2deltaAbs = -obj2delta;
		var obj1rect = flixel_FlxObject._firstSeparateFlxRect.set(Object1.x,Object1.y - (obj1delta > 0?obj1delta:0),Object1.get_width(),Object1.get_height() + obj1deltaAbs);
		var obj2rect = flixel_FlxObject._secondSeparateFlxRect.set(Object2.x,Object2.y - (obj2delta > 0?obj2delta:0),Object2.get_width(),Object2.get_height() + obj2deltaAbs);
		if(obj1rect.x + obj1rect.width > obj2rect.x && obj1rect.x < obj2rect.x + obj2rect.width && obj1rect.y + obj1rect.height > obj2rect.y && obj1rect.y < obj2rect.y + obj2rect.height) {
			var maxOverlap = obj1deltaAbs + obj2deltaAbs + flixel_FlxObject.SEPARATE_BIAS;
			if(obj1delta > obj2delta) {
				overlap = Object1.y + Object1.get_height() - Object2.y;
				if(overlap > maxOverlap || (Object1.allowCollisions & 4096) == 0 || (Object2.allowCollisions & 256) == 0) overlap = 0; else {
					Object1.touching |= 4096;
					Object2.touching |= 256;
				}
			} else if(obj1delta < obj2delta) {
				overlap = Object1.y - Object2.get_height() - Object2.y;
				if(-overlap > maxOverlap || (Object1.allowCollisions & 256) == 0 || (Object2.allowCollisions & 4096) == 0) overlap = 0; else {
					Object1.touching |= 256;
					Object2.touching |= 4096;
				}
			}
		}
	}
	if(overlap != 0) {
		var obj1v = Object1.velocity.y;
		var obj2v = Object2.velocity.y;
		if(!obj1immovable && !obj2immovable) {
			overlap *= 0.5;
			Object1.set_y(Object1.y - overlap);
			var _g = Object2;
			_g.set_y(_g.y + overlap);
			var obj1velocity;
			obj1velocity = Math.sqrt(obj2v * obj2v * Object2.mass / Object1.mass) * (obj2v > 0?1:-1);
			var obj2velocity;
			obj2velocity = Math.sqrt(obj1v * obj1v * Object1.mass / Object2.mass) * (obj1v > 0?1:-1);
			var average = (obj1velocity + obj2velocity) * 0.5;
			obj1velocity -= average;
			obj2velocity -= average;
			Object1.velocity.set_y(average + obj1velocity * Object1.elasticity);
			Object2.velocity.set_y(average + obj2velocity * Object2.elasticity);
		} else if(!obj1immovable) {
			Object1.set_y(Object1.y - overlap);
			Object1.velocity.set_y(obj2v - obj1v * Object1.elasticity);
			if(Object1.collisonXDrag && Object2.active && Object2.moves && obj1delta > obj2delta) {
				var _g1 = Object1;
				_g1.set_x(_g1.x + (Object2.x - Object2.last.x));
			}
		} else if(!obj2immovable) {
			var _g2 = Object2;
			_g2.set_y(_g2.y + overlap);
			Object2.velocity.set_y(obj1v - obj2v * Object2.elasticity);
			if(Object2.collisonXDrag && Object1.active && Object1.moves && obj1delta < obj2delta) {
				var _g3 = Object2;
				_g3.set_x(_g3.x + (Object1.x - Object1.last.x));
			}
		}
		return true;
	} else return false;
};
flixel_FlxObject.__super__ = flixel_FlxBasic;
flixel_FlxObject.prototype = $extend(flixel_FlxBasic.prototype,{
	x: null
	,y: null
	,width: null
	,height: null
	,pixelPerfectRender: null
	,angle: null
	,moves: null
	,immovable: null
	,scrollFactor: null
	,velocity: null
	,acceleration: null
	,drag: null
	,maxVelocity: null
	,last: null
	,mass: null
	,elasticity: null
	,angularVelocity: null
	,angularAcceleration: null
	,angularDrag: null
	,maxAngular: null
	,health: null
	,touching: null
	,wasTouching: null
	,allowCollisions: null
	,collisonXDrag: null
	,debugBoundingBoxColor: null
	,ignoreDrawDebug: null
	,_point: null
	,_cameras: null
	,initVars: function() {
		this.collisionType = 1;
		this.last = flixel_util_FlxPoint.get(this.x,this.y);
		this.scrollFactor = flixel_util_FlxPoint.get(1,1);
		this._point = flixel_util_FlxPoint.get(null,null);
		this.velocity = flixel_util_FlxPoint.get(null,null);
		this.acceleration = flixel_util_FlxPoint.get(null,null);
		this.drag = flixel_util_FlxPoint.get(null,null);
		this.maxVelocity = flixel_util_FlxPoint.get(10000,10000);
	}
	,initMotionVars: function() {
		this.velocity = flixel_util_FlxPoint.get(null,null);
		this.acceleration = flixel_util_FlxPoint.get(null,null);
		this.drag = flixel_util_FlxPoint.get(null,null);
		this.maxVelocity = flixel_util_FlxPoint.get(10000,10000);
	}
	,destroy: function() {
		flixel_FlxBasic.prototype.destroy.call(this);
		this.velocity = flixel_util_FlxDestroyUtil.put(this.velocity);
		this.acceleration = flixel_util_FlxDestroyUtil.put(this.acceleration);
		this.drag = flixel_util_FlxDestroyUtil.put(this.drag);
		this.maxVelocity = flixel_util_FlxDestroyUtil.put(this.maxVelocity);
		this.scrollFactor = flixel_util_FlxDestroyUtil.put(this.scrollFactor);
		this.last = flixel_util_FlxDestroyUtil.put(this.last);
		this._point = flixel_util_FlxDestroyUtil.put(this._point);
		this._cameras = null;
	}
	,update: function() {
		flixel_FlxBasic.prototype.update.call(this);
		this.last.set_x(this.x);
		this.last.set_y(this.y);
		if(this.moves) this.updateMotion();
		this.wasTouching = this.touching;
		this.touching = 0;
	}
	,updateMotion: function() {
		var dt = flixel_FlxG.elapsed;
		var velocityDelta = 0.5 * (flixel_util_FlxVelocity.computeVelocity(this.angularVelocity,this.angularAcceleration,this.angularDrag,this.maxAngular) - this.angularVelocity);
		this.angularVelocity += velocityDelta;
		var _g = this;
		_g.set_angle(_g.angle + this.angularVelocity * dt);
		this.angularVelocity += velocityDelta;
		velocityDelta = 0.5 * (flixel_util_FlxVelocity.computeVelocity(this.velocity.x,this.acceleration.x,this.drag.x,this.maxVelocity.x) - this.velocity.x);
		var _g1 = this.velocity;
		_g1.set_x(_g1.x + velocityDelta);
		var delta = this.velocity.x * dt;
		var _g2 = this.velocity;
		_g2.set_x(_g2.x + velocityDelta);
		var _g3 = this;
		_g3.set_x(_g3.x + delta);
		velocityDelta = 0.5 * (flixel_util_FlxVelocity.computeVelocity(this.velocity.y,this.acceleration.y,this.drag.y,this.maxVelocity.y) - this.velocity.y);
		var _g4 = this.velocity;
		_g4.set_y(_g4.y + velocityDelta);
		delta = this.velocity.y * dt;
		var _g5 = this.velocity;
		_g5.set_y(_g5.y + velocityDelta);
		var _g6 = this;
		_g6.set_y(_g6.y + delta);
	}
	,draw: function() {
		flixel_FlxBasic.prototype.draw.call(this);
		if(flixel_FlxG["debugger"].drawDebug) this.drawDebug();
	}
	,overlaps: function(ObjectOrGroup,InScreenSpace,Camera) {
		if(InScreenSpace == null) InScreenSpace = false;
		var group = flixel_group_FlxGroup.resolveGroup(ObjectOrGroup);
		if(group != null) return flixel_group_FlxGroup.overlaps($bind(this,this.overlapsCallback),group,0,0,InScreenSpace,Camera);
		if(ObjectOrGroup.collisionType == 3) return (js_Boot.__cast(ObjectOrGroup , flixel_tile_FlxTilemap)).overlaps(this,InScreenSpace,Camera);
		var object;
		object = js_Boot.__cast(ObjectOrGroup , flixel_FlxObject);
		if(!InScreenSpace) return object.x + object.get_width() > this.x && object.x < this.x + this.get_width() && object.y + object.get_height() > this.y && object.y < this.y + this.get_height();
		if(Camera == null) Camera = flixel_FlxG.camera;
		var objectScreenPos = object.getScreenXY(null,Camera);
		this.getScreenXY(this._point,Camera);
		return objectScreenPos.x + object.get_width() > this._point.x && objectScreenPos.x < this._point.x + this.get_width() && objectScreenPos.y + object.get_height() > this._point.y && objectScreenPos.y < this._point.y + this.get_height();
	}
	,overlapsCallback: function(ObjectOrGroup,X,Y,InScreenSpace,Camera) {
		return this.overlaps(ObjectOrGroup,InScreenSpace,Camera);
	}
	,overlapsAt: function(X,Y,ObjectOrGroup,InScreenSpace,Camera) {
		if(InScreenSpace == null) InScreenSpace = false;
		var group = flixel_group_FlxGroup.resolveGroup(ObjectOrGroup);
		if(group != null) return flixel_group_FlxGroup.overlaps($bind(this,this.overlapsAtCallback),group,X,Y,InScreenSpace,Camera);
		if(ObjectOrGroup.collisionType == 3) {
			var tilemap;
			tilemap = js_Boot.__cast(ObjectOrGroup , flixel_tile_FlxTilemap);
			return tilemap.overlapsAt(tilemap.x - (X - this.x),tilemap.y - (Y - this.y),this,InScreenSpace,Camera);
		}
		var object;
		object = js_Boot.__cast(ObjectOrGroup , flixel_FlxObject);
		if(!InScreenSpace) return object.x + object.get_width() > X && object.x < X + this.get_width() && object.y + object.get_height() > Y && object.y < Y + this.get_height();
		if(Camera == null) Camera = flixel_FlxG.camera;
		var objectScreenPos = object.getScreenXY(null,Camera);
		this.getScreenXY(this._point,Camera);
		return objectScreenPos.x + object.get_width() > this._point.x && objectScreenPos.x < this._point.x + this.get_width() && objectScreenPos.y + object.get_height() > this._point.y && objectScreenPos.y < this._point.y + this.get_height();
	}
	,overlapsAtCallback: function(ObjectOrGroup,X,Y,InScreenSpace,Camera) {
		return this.overlapsAt(X,Y,ObjectOrGroup,InScreenSpace,Camera);
	}
	,overlapsPoint: function(point,InScreenSpace,Camera) {
		if(InScreenSpace == null) InScreenSpace = false;
		if(!InScreenSpace) return point.x > this.x && point.x < this.x + this.get_width() && point.y > this.y && point.y < this.y + this.get_height();
		if(Camera == null) Camera = flixel_FlxG.camera;
		var X = point.x - Camera.scroll.x;
		var Y = point.y - Camera.scroll.y;
		this.getScreenXY(this._point,Camera);
		if(point._weak) point.put();
		return X > this._point.x && X < this._point.x + this.get_width() && Y > this._point.y && Y < this._point.y + this.get_height();
	}
	,inWorldBounds: function() {
		return this.x + this.get_width() > flixel_FlxG.worldBounds.x && this.x < flixel_FlxG.worldBounds.get_right() && this.y + this.get_height() > flixel_FlxG.worldBounds.y && this.y < flixel_FlxG.worldBounds.get_bottom();
	}
	,getScreenXY: function(point,Camera) {
		if(point == null) point = flixel_util_FlxPoint.get(null,null);
		if(Camera == null) Camera = flixel_FlxG.camera;
		return point.set(this.x - Camera.scroll.x * this.scrollFactor.x,this.y - Camera.scroll.y * this.scrollFactor.y);
	}
	,getMidpoint: function(point) {
		if(point == null) point = flixel_util_FlxPoint.get(null,null);
		return point.set(this.x + this.get_width() * 0.5,this.y + this.get_height() * 0.5);
	}
	,reset: function(X,Y) {
		this.revive();
		this.touching = 0;
		this.wasTouching = 0;
		this.setPosition(X,Y);
		this.last.set(this.x,this.y);
		this.velocity.set();
	}
	,isOnScreen: function(Camera) {
		if(Camera == null) Camera = flixel_FlxG.camera;
		this.getScreenXY(this._point,Camera);
		return this._point.x + this.get_width() > 0 && this._point.x < Camera.width && this._point.y + this.get_height() > 0 && this._point.y < Camera.height;
	}
	,isTouching: function(Direction) {
		return (this.touching & Direction) > 0;
	}
	,justTouched: function(Direction) {
		return (this.touching & Direction) > 0 && (this.wasTouching & Direction) <= 0;
	}
	,hurt: function(Damage) {
		this.health = this.health - Damage;
		if(this.health <= 0) this.kill();
	}
	,setPosition: function(X,Y) {
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		this.set_x(X);
		this.set_y(Y);
	}
	,setSize: function(Width,Height) {
		this.set_width(Width);
		this.set_height(Height);
	}
	,drawDebug: function() {
		if(!this.ignoreDrawDebug) {
			var _g = 0;
			var _g1 = this.get_cameras();
			while(_g < _g1.length) {
				var camera = _g1[_g];
				++_g;
				this.drawDebugOnCamera(camera);
			}
		}
	}
	,drawDebugOnCamera: function(Camera) {
		if(!Camera.visible || !Camera.exists || !this.isOnScreen(Camera)) return;
		var boundingBoxX = this.x - Camera.scroll.x * this.scrollFactor.x;
		var boundingBoxY = this.y - Camera.scroll.y * this.scrollFactor.y;
		if(this.pixelPerfectRender) {
			boundingBoxX = Math.floor(boundingBoxX);
			boundingBoxY = Math.floor(boundingBoxY);
		}
		var boundingBoxWidth = Std["int"](this.get_width());
		var boundingBoxHeight = Std["int"](this.get_height());
		var color = this.debugBoundingBoxColor;
		if(color == null) {
			if(this.allowCollisions != 0) {
				if(this.allowCollisions != 4369) color = -16181;
				if(this.immovable) color = -16744448; else color = -65536;
			}
			if(color == null) color = -16776961;
		}
		var gfx = flixel_util_FlxSpriteUtil.flashGfx;
		gfx.clear();
		gfx.moveTo(boundingBoxX,boundingBoxY);
		gfx.lineStyle(1,color,0.5);
		gfx.lineTo(boundingBoxX + boundingBoxWidth,boundingBoxY);
		gfx.lineTo(boundingBoxX + boundingBoxWidth,boundingBoxY + boundingBoxHeight);
		gfx.lineTo(boundingBoxX,boundingBoxY + boundingBoxHeight);
		gfx.lineTo(boundingBoxX,boundingBoxY);
		Camera.buffer.draw(flixel_util_FlxSpriteUtil.flashGfxSprite);
	}
	,toString: function() {
		return flixel_util_FlxStringUtil.getDebugString([flixel_util_LabelValuePair._pool.get().create("x",this.x),flixel_util_LabelValuePair._pool.get().create("y",this.y),flixel_util_LabelValuePair.weak("w",this.get_width()),flixel_util_LabelValuePair.weak("h",this.get_height()),flixel_util_LabelValuePair._pool.get().create("visible",this.visible),flixel_util_LabelValuePair._pool.get().create("velocity",this.velocity)]);
	}
	,set_x: function(NewX) {
		return this.x = NewX;
	}
	,set_y: function(NewY) {
		return this.y = NewY;
	}
	,set_width: function(Width) {
		if(Width < 0) flixel_FlxG.log.advanced("An object's width cannot be smaller than 0. Use offset for sprites to control the hitbox position!",flixel_system_debug_LogStyle.WARNING,true); else this.width = Width;
		return Width;
	}
	,set_height: function(Height) {
		if(Height < 0) flixel_FlxG.log.advanced("An object's height cannot be smaller than 0. Use offset for sprites to control the hitbox position!",flixel_system_debug_LogStyle.WARNING,true); else this.height = Height;
		return Height;
	}
	,get_width: function() {
		return this.width;
	}
	,get_height: function() {
		return this.height;
	}
	,get_solid: function() {
		return (this.allowCollisions & 4369) > 0;
	}
	,set_solid: function(Solid) {
		if(Solid) this.allowCollisions = 4369; else this.allowCollisions = 0;
		return Solid;
	}
	,set_angle: function(Value) {
		return this.angle = Value;
	}
	,set_moves: function(Value) {
		return this.moves = Value;
	}
	,set_immovable: function(Value) {
		return this.immovable = Value;
	}
	,get_camera: function() {
		if(this._cameras == null || this._cameras.length == 0) return flixel_FlxCamera.defaultCameras[0]; else return this._cameras[0];
	}
	,set_camera: function(Value) {
		if(this._cameras == null) this._cameras = [Value]; else this._cameras[0] = Value;
		return Value;
	}
	,get_cameras: function() {
		if(this._cameras == null) return flixel_FlxCamera.defaultCameras; else return this._cameras;
	}
	,set_cameras: function(Value) {
		return this._cameras = Value;
	}
	,set_pixelPerfectRender: function(Value) {
		return this.pixelPerfectRender = Value;
	}
	,__class__: flixel_FlxObject
	,__properties__: $extend(flixel_FlxBasic.prototype.__properties__,{set_solid:"set_solid",get_solid:"get_solid",set_immovable:"set_immovable",set_moves:"set_moves",set_angle:"set_angle",set_pixelPerfectRender:"set_pixelPerfectRender",set_cameras:"set_cameras",get_cameras:"get_cameras",set_camera:"set_camera",get_camera:"get_camera",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",set_x:"set_x"})
});
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) fillColor = -1;
	if(transparent == null) transparent = true;
	this.__usingPingPongTexture = false;
	this.transparent = transparent;
	if(width == null) width = 0; else width = width;
	if(height == null) height = 0; else height = height;
	if(width < 0) width = 0; else width = width;
	if(height < 0) height = 0; else height = height;
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) fillColor = 0;
		} else fillColor = -16777216 | fillColor & 16777215;
		fillColor = fillColor << 8 | fillColor >> 24 & 255;
		this.image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
	}
	this.__createUVs();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.fromBase64 = function(base64,type,onload) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	bitmapData.__fromBase64(base64,type,onload);
	return bitmapData;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha,onload) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	bitmapData.__fromBytes(bytes,rawAlpha,onload);
	return bitmapData;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) transparent = true;
	if(canvas == null) return null;
	var bitmapData = new openfl_display_BitmapData(0,0,transparent);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path,onload,onerror) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	bitmapData.__fromFile(path,onload,onerror);
	return bitmapData;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) transparent = true;
	if(image == null || image.buffer == null) return null;
	var bitmapData = new openfl_display_BitmapData(0,0,transparent);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.__asRenderTexture = function(width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	var b = new openfl_display_BitmapData(0,0);
	b.__resize(width,height);
	return b;
};
openfl_display_BitmapData.__ucompare = function(n1,n2) {
	var tmp1;
	var tmp2;
	tmp1 = n1 >> 24 & 255;
	tmp2 = n2 >> 24 & 255;
	if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
		tmp1 = n1 >> 16 & 255;
		tmp2 = n2 >> 16 & 255;
		if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
			tmp1 = n1 >> 8 & 255;
			tmp2 = n2 >> 8 & 255;
			if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else return 0;
			}
		}
	}
};
openfl_display_BitmapData.prototype = {
	height: null
	,image: null
	,rect: null
	,transparent: null
	,width: null
	,__worldTransform: null
	,__worldColorTransform: null
	,__cacheAsBitmap: null
	,__blendMode: null
	,__shader: null
	,__buffer: null
	,__isValid: null
	,__surface: null
	,__texture: null
	,__textureImage: null
	,__pingPongTexture: null
	,__usingPingPongTexture: null
	,__uvData: null
	,applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid) return;
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(this.image);
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceBitmapData.image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(sourceBitmapData.image);
		filter.__applyFilter(this.image.buffer.__srcImageData,sourceBitmapData.image.buffer.__srcImageData,sourceRect,destPoint);
		this.image.dirty = true;
	}
	,clone: function() {
		if(!this.__isValid) return new openfl_display_BitmapData(this.width,this.height,this.transparent); else return openfl_display_BitmapData.fromImage(this.image.clone(),this.transparent);
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.__isValid) return;
		this.image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
		this.__usingPingPongTexture = false;
	}
	,compare: function(otherBitmapData) {
		if(otherBitmapData == this) return 0; else if(otherBitmapData == null) return -1; else if(this.__isValid == false || otherBitmapData.__isValid == false) return -2; else if(this.width != otherBitmapData.width) return -3; else if(this.height != otherBitmapData.height) return -4;
		if(this.image != null && otherBitmapData.image != null && this.image.get_format() == otherBitmapData.image.get_format()) {
			var bytes = this.image.get_data();
			var otherBytes = otherBitmapData.image.get_data();
			var equal = true;
			var _g1 = 0;
			var _g = bytes.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(bytes[i] != otherBytes[i]) {
					equal = false;
					break;
				}
			}
			if(equal) return 0;
		}
		var bitmapData = null;
		var foundDifference;
		var pixel;
		var otherPixel;
		var comparePixel;
		var r;
		var g;
		var b;
		var a;
		var _g11 = 0;
		var _g2 = this.height;
		while(_g11 < _g2) {
			var y = _g11++;
			var _g3 = 0;
			var _g21 = this.width;
			while(_g3 < _g21) {
				var x = _g3++;
				foundDifference = false;
				pixel = this.getPixel32(x,y);
				otherPixel = otherBitmapData.getPixel32(x,y);
				comparePixel = 0;
				if(pixel != otherPixel) {
					r = (pixel >> 16 & 255) - (otherPixel >> 16 & 255);
					g = (pixel >> 8 & 255) - (otherPixel >> 8 & 255);
					b = (pixel & 255) - (otherPixel & 255);
					if(r < 0) r *= -1;
					if(g < 0) g *= -1;
					if(b < 0) b *= -1;
					if(r == 0 && g == 0 && b == 0) {
						a = (pixel >> 24 & 255) - (otherPixel >> 24 & 255);
						if(a != 0) {
							comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | 16711680 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							255;
							comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | 65280 | comparePixel & 255 & 255;
							255;
							comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | 255;
							255;
							comparePixel = (a & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							a;
							foundDifference = true;
						}
					} else {
						comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						r;
						comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (g & 255) << 8 | comparePixel & 255 & 255;
						g;
						comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | b & 255;
						b;
						comparePixel = -16777216 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						255;
						foundDifference = true;
					}
				}
				if(foundDifference) {
					if(bitmapData == null) bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent || otherBitmapData.transparent,0);
					bitmapData.setPixel32(x,y,comparePixel);
				}
			}
		}
		if(bitmapData == null) return 0;
		return bitmapData;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.__isValid) return;
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.image.copyChannel(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
		this.__usingPingPongTexture = false;
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(!this.__isValid || sourceBitmapData == null) return;
		this.image.copyPixels(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null?alphaBitmapData.image:null,alphaPoint != null?alphaPoint.__toLimeVector2():null,mergeAlpha);
		this.__usingPingPongTexture = false;
	}
	,dispose: function() {
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		if(this.__texture != null) {
			var renderer = openfl_Lib.current.stage.__renderer;
			if(renderer != null) {
				var renderSession = renderer.renderSession;
				var gl = renderSession.gl;
				if(gl != null) {
					gl.deleteTexture(this.__texture);
					this.__texture = null;
				}
			}
		}
		if(this.__pingPongTexture != null) {
			this.__pingPongTexture.destroy();
			this.__pingPongTexture = null;
		}
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) smoothing = false;
		if(!this.__isValid) return;
		if(colorTransform != null) {
			var copy = new openfl_display_BitmapData(Reflect.getProperty(source,"width"),Reflect.getProperty(source,"height"),true,0);
			copy.draw(source);
			copy.colorTransform(copy.rect,colorTransform);
			source = copy;
		}
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,true);
		var buffer = this.image.buffer;
		var renderSession = new openfl__$internal_renderer_RenderSession();
		renderSession.context = buffer.__srcContext;
		renderSession.roundPixels = true;
		renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(renderSession);
		if(!smoothing) {
			buffer.__srcContext.mozImageSmoothingEnabled = false;
			buffer.__srcContext.msImageSmoothingEnabled = false;
			buffer.__srcContext.imageSmoothingEnabled = false;
		}
		if(clipRect != null) renderSession.maskManager.pushRect(clipRect,new openfl_geom_Matrix());
		var matrixCache = source.__worldTransform;
		source.__updateTransforms(matrix != null?matrix:new openfl_geom_Matrix());
		source.__updateChildren(false);
		source.__renderCanvas(renderSession);
		source.__updateTransforms(matrixCache);
		source.__updateChildren(true);
		if(!smoothing) {
			buffer.__srcContext.mozImageSmoothingEnabled = true;
			buffer.__srcContext.msImageSmoothingEnabled = true;
			buffer.__srcContext.imageSmoothingEnabled = true;
		}
		if(clipRect != null) renderSession.maskManager.popMask();
		buffer.__srcContext.setTransform(1,0,0,1,0,0);
		buffer.__srcImageData = null;
		buffer.data = null;
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.__isValid || rect == null) return byteArray = null;
		if(js_Boot.__instanceof(compressor,openfl_display_PNGEncoderOptions)) return byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.encode("png")); else if(js_Boot.__instanceof(compressor,openfl_display_JPEGEncoderOptions)) return byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.encode("jpg",(js_Boot.__cast(compressor , openfl_display_JPEGEncoderOptions)).quality));
		return byteArray = null;
	}
	,fillRect: function(rect,color) {
		if(!this.__isValid || rect == null) return;
		if(this.transparent && (color & -16777216) == 0) color = 0;
		this.image.fillRect(rect.__toLimeRectangle(),color,1);
		this.__usingPingPongTexture = false;
	}
	,floodFill: function(x,y,color) {
		if(!this.__isValid) return;
		this.image.floodFill(x,y,color,1);
		this.__usingPingPongTexture = false;
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getBuffer: function(gl) {
		if(this.__buffer == null) {
			var data = [this.width,this.height,0,1,1,0,this.height,0,0,1,this.width,0,0,1,0,0,0,0,0,0];
			this.__buffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			gl.bufferData(gl.ARRAY_BUFFER,(function($this) {
				var $r;
				var this1;
				if(data != null) this1 = new Float32Array(data); else this1 = null;
				$r = this1;
				return $r;
			}(this)),gl.STATIC_DRAW);
			gl.bindBuffer(gl.ARRAY_BUFFER,null);
		}
		return this.__buffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) findColor = true;
		if(!this.__isValid) return new openfl_geom_Rectangle(0,0,this.width,this.height);
		if(!this.transparent || (mask >> 24 & 255) > 0) {
			var color1 = color;
			if((color1 >> 24 & 255) == 0) color1 = 0;
		}
		var rect = this.image.getColorBoundsRect(mask,color,findColor,1);
		return new openfl_geom_Rectangle(rect.x,rect.y,rect.width,rect.height);
	}
	,getPixel: function(x,y) {
		if(!this.__isValid) return 0;
		return this.image.getPixel(x,y,1);
	}
	,getPixel32: function(x,y) {
		if(!this.__isValid) return 0;
		return this.image.getPixel32(x,y,1);
	}
	,getPixels: function(rect) {
		if(!this.__isValid) return null;
		if(rect == null) rect = this.rect;
		return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.getPixels(rect.__toLimeRectangle(),1));
	}
	,getSurface: function() {
		if(!this.__isValid) return null;
		if(this.__surface == null) this.__surface = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage(this.image);
		return this.__surface;
	}
	,getTexture: function(gl) {
		if(!this.__isValid) return null;
		if(this.__usingPingPongTexture && this.__pingPongTexture != null) return this.__pingPongTexture.get_texture();
		if(this.__texture == null) {
			this.__texture = gl.createTexture();
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
			this.image.dirty = true;
		}
		if(this.image != null && this.image.dirty) {
			var internalFormat;
			var format;
			if(this.__surface != null) lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush(this.__surface);
			if(this.image.buffer.bitsPerPixel == 1) {
				internalFormat = gl.ALPHA;
				format = gl.ALPHA;
			} else {
				internalFormat = gl.RGBA;
				format = gl.RGBA;
			}
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			var textureImage = this.image;
			if(!textureImage.get_premultiplied() && textureImage.get_transparent() || textureImage.get_format() != 0) {
				textureImage = textureImage.clone();
				textureImage.set_format(0);
				textureImage.set_premultiplied(true);
			}
			gl.texImage2D(gl.TEXTURE_2D,0,internalFormat,this.width,this.height,0,format,gl.UNSIGNED_BYTE,textureImage.get_data());
			gl.bindTexture(gl.TEXTURE_2D,null);
			this.image.dirty = false;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = Std["int"](openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels) / 4);
		var result;
		var this1;
		this1 = new openfl_VectorData();
		var this2;
		this2 = new Array(length);
		this1.data = this2;
		this1.length = length;
		this1.fixed = true;
		result = this1;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var value = pixels.readUnsignedInt();
			if(!result.fixed) {
				if(i >= result.length) result.length = i + 1;
				if(result.data.length < result.length) {
					var data;
					var this3;
					this3 = new Array(result.data.length + 10);
					data = this3;
					haxe_ds__$Vector_Vector_$Impl_$.blit(result.data,0,data,0,result.data.length);
					result.data = data;
				}
			}
			result.data[i] = value;
		}
		return result;
	}
	,histogram: function(hRect) {
		var rect;
		if(hRect != null) rect = hRect; else rect = new openfl_geom_Rectangle(0,0,this.width,this.height);
		var pixels = this.getPixels(rect);
		var result;
		var _g = [];
		var _g1 = 0;
		while(_g1 < 4) {
			var i = _g1++;
			_g.push((function($this) {
				var $r;
				var _g2 = [];
				{
					var _g3 = 0;
					while(_g3 < 256) {
						var j = _g3++;
						_g2.push(0);
					}
				}
				$r = _g2;
				return $r;
			}(this)));
		}
		result = _g;
		var _g21 = 0;
		var _g11 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels);
		while(_g21 < _g11) {
			var i1 = _g21++;
			++result[i1 % 4][pixels.readUnsignedByte()];
		}
		return result;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) secondAlphaThreshold = 1;
		if(!this.__isValid) return false;
		if(js_Boot.__instanceof(secondObject,openfl_display_Bitmap)) secondObject = (js_Boot.__cast(secondObject , openfl_display_Bitmap)).bitmapData;
		if(js_Boot.__instanceof(secondObject,openfl_geom_Point)) {
			var secondPoint = secondObject;
			var x = secondPoint.x - firstPoint.x | 0;
			var y = secondPoint.y - firstPoint.y | 0;
			if(this.rect.contains(x,y)) {
				var pixel = this.getPixel32(x,y);
				if((pixel >> 24 & 255) >= firstAlphaThreshold) return true;
			}
		} else if(js_Boot.__instanceof(secondObject,openfl_display_BitmapData)) {
			var secondBitmapData = secondObject;
			var x1;
			var y1;
			if(secondBitmapDataPoint == null) {
				x1 = 0;
				y1 = 0;
			} else {
				x1 = secondBitmapDataPoint.x - firstPoint.x | 0;
				y1 = secondBitmapDataPoint.y - firstPoint.y | 0;
			}
			if(this.rect.contains(x1,y1)) {
				var hitRect = openfl_geom_Rectangle.__temp;
				hitRect.setTo(x1,y1,Math.min(secondBitmapData.width,this.width - x1),Math.min(secondBitmapData.height,this.height - y1));
				var pixels = this.getPixels(hitRect);
				hitRect.offset(-x1,-y1);
				var testPixels = secondBitmapData.getPixels(hitRect);
				var length = hitRect.width * hitRect.height | 0;
				var pixel1;
				var testPixel;
				var _g = 0;
				while(_g < length) {
					var i = _g++;
					pixel1 = pixels.readUnsignedInt();
					testPixel = testPixels.readUnsignedInt();
					if((pixel1 >> 24 & 255) >= firstAlphaThreshold && (testPixel >> 24 & 255) >= secondAlphaThreshold) return true;
				}
				return false;
			}
		} else if(js_Boot.__instanceof(secondObject,openfl_geom_Rectangle)) {
			var secondRectangle = openfl_geom_Rectangle.__temp;
			secondRectangle.copyFrom(secondObject);
			secondRectangle.offset(-firstPoint.x,-firstPoint.y);
			secondRectangle.__contract(0,0,this.width,this.height);
			if(secondRectangle.width > 0 && secondRectangle.height > 0) {
				var pixels1 = this.getPixels(secondRectangle);
				var length1 = Std["int"](openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels1) / 4);
				var pixel2;
				var _g1 = 0;
				while(_g1 < length1) {
					var i1 = _g1++;
					pixel2 = pixels1.readUnsignedInt();
					if((pixel2 >> 24 & 255) >= firstAlphaThreshold) return true;
				}
			}
		}
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid || sourceRect == null || destPoint == null) return;
		this.image.merge(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
		this.__usingPingPongTexture = false;
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		if(high == null) high = 255;
		if(low == null) low = 0;
		if(!this.__isValid) return;
		openfl_Lib.notImplemented("BitmapData.noise");
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = this.getPixels(sourceRect);
		pixels.position = 0;
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var c1;
		var c2;
		var c3;
		var c4;
		var _g1 = 0;
		var _g = sh * sw;
		while(_g1 < _g) {
			var i = _g1++;
			pixelValue = pixels.readUnsignedInt();
			if(alphaArray == null) c1 = pixelValue & -16777216; else c1 = alphaArray[pixelValue >> 24 & 255];
			if(redArray == null) c2 = pixelValue & 16711680; else c2 = redArray[pixelValue >> 16 & 255];
			if(greenArray == null) c3 = pixelValue & 65280; else c3 = greenArray[pixelValue >> 8 & 255];
			if(blueArray == null) c4 = pixelValue & 255; else c4 = blueArray[pixelValue & 255];
			a = (c1 >> 24 & 255) + (c2 >> 24 & 255) + (c3 >> 24 & 255) + (c4 >> 24 & 255);
			if(a > 255) a == 255;
			r = (c1 >> 16 & 255) + (c2 >> 16 & 255) + (c3 >> 16 & 255) + (c4 >> 16 & 255);
			if(r > 255) r == 255;
			g = (c1 >> 8 & 255) + (c2 >> 8 & 255) + (c3 >> 8 & 255) + (c4 >> 8 & 255);
			if(g > 255) g == 255;
			b = (c1 & 255) + (c2 & 255) + (c3 & 255) + (c4 & 255);
			if(b > 255) b == 255;
			color = a << 24 | r << 16 | g << 8 | b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		var destRect = new openfl_geom_Rectangle(destPoint.x,destPoint.y,sw,sh);
		this.setPixels(destRect,pixels);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		openfl_Lib.notImplemented("BitmapData.perlinNoise");
	}
	,scroll: function(x,y) {
		if(!this.__isValid) return;
		this.image.scroll(x,y);
		this.__usingPingPongTexture = false;
	}
	,setPixel: function(x,y,color) {
		if(!this.__isValid) return;
		this.image.setPixel(x,y,color,1);
		this.__usingPingPongTexture = false;
	}
	,setPixel32: function(x,y,color) {
		if(!this.__isValid) return;
		this.image.setPixel32(x,y,color,1);
		this.__usingPingPongTexture = false;
	}
	,setPixels: function(rect,byteArray) {
		if(!this.__isValid || rect == null) return;
		this.image.setPixels(rect.__toLimeRectangle(),openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(byteArray),1);
		this.__usingPingPongTexture = false;
	}
	,setVector: function(rect,inputVector) {
		var byteArray = new openfl_utils_ByteArrayData(0);
		openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length(byteArray,inputVector.length * 4);
		var _g = 0;
		while(_g < inputVector.length) {
			var color = inputVector.data[_g];
			++_g;
			byteArray.writeUnsignedInt(color);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) copySource = false;
		if(mask == null) mask = -1;
		if(color == null) color = 0;
		if(sourceBitmapData == null || sourceRect == null || destPoint == null || sourceRect.x > sourceBitmapData.width || sourceRect.y > sourceBitmapData.height || destPoint.x > this.width || destPoint.y > this.height) return 0;
		if(sourceBitmapData == this && sourceRect.equals(this.rect) && destPoint.x == 0 && destPoint.y == 0) {
			var hits = 0;
			var memory = new openfl_utils_ByteArrayData(this.width * this.height * 4);
			memory = this.getPixels(this.rect);
			memory.position = 0;
			openfl_Memory.select(memory);
			var thresholdMask = threshold & mask;
			var width_yy;
			var position;
			var pixelMask;
			var pixelValue;
			var i;
			var test;
			var _g1 = 0;
			var _g = this.height;
			while(_g1 < _g) {
				var yy = _g1++;
				width_yy = this.width * yy;
				var _g3 = 0;
				var _g2 = this.width;
				while(_g3 < _g2) {
					var xx = _g3++;
					position = (width_yy + xx) * 4;
					pixelValue = openfl_Memory._setPositionTemporarily(position,function() {
						return openfl_Memory.gcRef.readInt();
					});
					pixelMask = pixelValue & mask;
					i = openfl_display_BitmapData.__ucompare(pixelMask,thresholdMask);
					test = false;
					if(operation == "==") test = i == 0; else if(operation == "<") test = i == -1; else if(operation == ">") test = i == 1; else if(operation == "!=") test = i != 0; else if(operation == "<=") test = i == 0 || i == -1; else if(operation == ">=") test = i == 0 || i == 1;
					if(test) {
						openfl_Memory.setI32(position,color);
						hits++;
					}
				}
			}
			memory.position = 0;
			this.setPixels(this.rect,memory);
			openfl_Memory.select(null);
			return hits;
		} else {
			sourceRect = sourceRect.clone();
			if(sourceRect.get_right() > sourceBitmapData.width) sourceRect.width = sourceBitmapData.width - sourceRect.x;
			if(sourceRect.get_bottom() > sourceBitmapData.height) sourceRect.height = sourceBitmapData.height - sourceRect.y;
			var targetRect = sourceRect.clone();
			targetRect.offsetPoint(destPoint);
			if(targetRect.get_right() > this.width) targetRect.width = this.width - targetRect.x;
			if(targetRect.get_bottom() > this.height) targetRect.height = this.height - targetRect.y;
			sourceRect.width = Math.min(sourceRect.width,targetRect.width);
			sourceRect.height = Math.min(sourceRect.height,targetRect.height);
			var sx = sourceRect.x | 0;
			var sy = sourceRect.y | 0;
			var sw = sourceRect.width | 0;
			var sh = sourceRect.height | 0;
			var dx = destPoint.x | 0;
			var dy = destPoint.y | 0;
			var bw = this.width - sw - dx;
			var bh = this.height - sh - dy;
			var dw;
			if(bw < 0) dw = sw + (this.width - sw - dx); else dw = sw;
			var dh;
			if(bw < 0) dh = sh + (this.height - sh - dy); else dh = sh;
			var hits1 = 0;
			var canvasMemory = sw * sh * 4;
			var sourceMemory = sw * sh * 4;
			var totalMemory = canvasMemory + sourceMemory;
			var memory1 = new openfl_utils_ByteArrayData(totalMemory);
			memory1.position = 0;
			var pixels = sourceBitmapData.getPixels(sourceRect);
			if(copySource) memory1.writeBytes(pixels); else memory1.writeBytes(this.getPixels(targetRect));
			memory1.position = canvasMemory;
			memory1.writeBytes(pixels);
			memory1.position = 0;
			openfl_Memory.select(memory1);
			var thresholdMask1 = threshold & mask;
			var position1;
			var pixelMask1;
			var pixelValue1;
			var i1;
			var test1;
			var _g4 = 0;
			while(_g4 < dh) {
				var yy1 = _g4++;
				var _g11 = 0;
				while(_g11 < dw) {
					var xx1 = _g11++;
					position1 = (xx1 + sx + (yy1 + sy) * sw) * 4;
					pixelValue1 = openfl_Memory._setPositionTemporarily(canvasMemory + position1,function() {
						return openfl_Memory.gcRef.readInt();
					});
					pixelMask1 = pixelValue1 & mask;
					i1 = openfl_display_BitmapData.__ucompare(pixelMask1,thresholdMask1);
					test1 = false;
					if(operation == "==") test1 = i1 == 0; else if(operation == "<") test1 = i1 == -1; else if(operation == ">") test1 = i1 == 1; else if(operation == "!=") test1 = i1 != 0; else if(operation == "<=") test1 = i1 == 0 || i1 == -1; else if(operation == ">=") test1 = i1 == 0 || i1 == 1;
					if(test1) {
						openfl_Memory.setI32(position1,color);
						hits1++;
					}
				}
			}
			memory1.position = 0;
			this.setPixels(targetRect,memory1);
			openfl_Memory.select(null);
			return hits1;
		}
	}
	,unlock: function(changeRect) {
	}
	,__createUVs: function(x0,y0,x1,y1,x2,y2,x3,y3) {
		if(y3 == null) y3 = 1;
		if(x3 == null) x3 = 0;
		if(y2 == null) y2 = 1;
		if(x2 == null) x2 = 1;
		if(y1 == null) y1 = 0;
		if(x1 == null) x1 = 1;
		if(y0 == null) y0 = 0;
		if(x0 == null) x0 = 0;
		if(this.__uvData == null) this.__uvData = new openfl_display_TextureUvs();
		this.__uvData.x0 = x0;
		this.__uvData.y0 = y0;
		this.__uvData.x1 = x1;
		this.__uvData.y1 = y1;
		this.__uvData.x2 = x2;
		this.__uvData.y2 = y2;
		this.__uvData.x3 = x3;
		this.__uvData.y3 = y3;
	}
	,__drawGL: function(renderSession,source,matrix,colorTransform,blendMode,clipRect,smoothing,drawSelf,clearBuffer,readPixels,powerOfTwo) {
		if(powerOfTwo == null) powerOfTwo = true;
		if(readPixels == null) readPixels = false;
		if(clearBuffer == null) clearBuffer = false;
		if(drawSelf == null) drawSelf = false;
		if(smoothing == null) smoothing = false;
		this.__pingPongTexture = openfl__$internal_renderer_opengl_GLBitmap.pushFramebuffer(renderSession,this.__pingPongTexture,this.rect,smoothing,this.transparent,clearBuffer,powerOfTwo);
		openfl__$internal_renderer_opengl_GLBitmap.drawBitmapDrawable(renderSession,drawSelf?this:null,source,matrix,colorTransform,blendMode,clipRect);
		openfl__$internal_renderer_opengl_GLBitmap.popFramebuffer(renderSession,readPixels?this.image:null);
		var uv = this.__pingPongTexture.get_renderTexture().__uvData;
		this.__createUVs(uv.x0,uv.y0,uv.x1,uv.y1,uv.x2,uv.y2,uv.x3,uv.y3);
		this.__isValid = true;
		this.__usingPingPongTexture = true;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		lime_graphics_Image.fromBase64(base64,type,function(image) {
			_g.__fromImage(image);
			if(onload != null) onload(_g);
		});
	}
	,__fromBytes: function(bytes,rawAlpha,onload) {
		var _g = this;
		lime_graphics_Image.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),function(image) {
			_g.__fromImage(image);
			if(rawAlpha != null) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
				lime_graphics_utils_ImageCanvasUtil.createImageData(image);
				var data = image.buffer.data;
				var _g2 = 0;
				var _g1 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(rawAlpha);
				while(_g2 < _g1) {
					var i = _g2++;
					var val = rawAlpha.readUnsignedByte();
					data[i * 4 + 3] = val;
				}
				image.dirty = true;
			}
			if(onload != null) onload(_g);
		});
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		lime_graphics_Image.fromFile(path,function(image) {
			_g.__fromImage(image);
			if(onload != null) onload(_g);
		},onerror);
	}
	,__fromImage: function(image) {
		if(image != null && image.buffer != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.__isValid = true;
		}
	}
	,__renderCairo: function(renderSession) {
		if(!this.__isValid) return;
		var cairo = renderSession.cairo;
		if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else cairo.set_matrix(transform.__toMatrix3());
		var surface = this.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
			if(cairo.get_antialias() == 1) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,3); else lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,1);
			cairo.set_source(pattern);
			cairo.paint();
		}
	}
	,__renderCairoMask: function(renderSession) {
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__isValid) return;
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
		var context = renderSession.context;
		if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
		context.globalAlpha = 1;
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.drawImage(this.image.get_src(),0,0);
	}
	,__renderCanvasMask: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		renderSession.spriteBatch.renderBitmapData(this,false,this.__worldTransform,this.__worldColorTransform,this.__worldColorTransform.alphaMultiplier,this.__blendMode,this.__shader);
	}
	,__resize: function(width,height) {
		this.width = width;
		this.height = height;
		this.rect.width = width;
		this.rect.height = height;
	}
	,__sync: function() {
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
	}
	,__updateChildren: function(transformOnly) {
	}
	,__updateMask: function(maskGraphics) {
	}
	,__updateTransforms: function(overrideTransform) {
		if(overrideTransform == null) this.__worldTransform.identity(); else this.__worldTransform = overrideTransform;
	}
	,__class__: openfl_display_BitmapData
};
var flixel__$FlxSprite_GraphicDefault = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel__$FlxSprite_GraphicDefault.preload != null) {
		this.image = flixel__$FlxSprite_GraphicDefault.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel__$FlxSprite_GraphicDefault.resourceName),flixel__$FlxSprite_GraphicDefault.resourceType,function(b) {
		if(flixel__$FlxSprite_GraphicDefault.preload == null) flixel__$FlxSprite_GraphicDefault.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel._FlxSprite.GraphicDefault"] = flixel__$FlxSprite_GraphicDefault;
flixel__$FlxSprite_GraphicDefault.__name__ = ["flixel","_FlxSprite","GraphicDefault"];
flixel__$FlxSprite_GraphicDefault.preload = null;
flixel__$FlxSprite_GraphicDefault.__super__ = openfl_display_BitmapData;
flixel__$FlxSprite_GraphicDefault.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel__$FlxSprite_GraphicDefault
});
var flixel_FlxSprite = function(X,Y,SimpleGraphic) {
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this._facingFlip = new haxe_ds_IntMap();
	this._angleChanged = false;
	this._cosAngle = 1;
	this._sinAngle = 0;
	this.useColorTransform = false;
	this.color = 16777215;
	this.flipY = false;
	this.flipX = false;
	this.facing = 16;
	this.alpha = 1.0;
	this.bakedRotationAngle = 0;
	this.frames = 0;
	this.frameHeight = 0;
	this.frameWidth = 0;
	this.dirty = true;
	this.antialiasing = false;
	flixel_FlxObject.call(this,X,Y);
	if(SimpleGraphic != null) this.loadGraphic(SimpleGraphic);
};
$hxClasses["flixel.FlxSprite"] = flixel_FlxSprite;
flixel_FlxSprite.__name__ = ["flixel","FlxSprite"];
flixel_FlxSprite.__super__ = flixel_FlxObject;
flixel_FlxSprite.prototype = $extend(flixel_FlxObject.prototype,{
	animation: null
	,framePixels: null
	,antialiasing: null
	,dirty: null
	,frame: null
	,frameWidth: null
	,frameHeight: null
	,frames: null
	,region: null
	,framesData: null
	,cachedGraphics: null
	,bakedRotationAngle: null
	,alpha: null
	,facing: null
	,flipX: null
	,flipY: null
	,origin: null
	,offset: null
	,scale: null
	,blend: null
	,color: null
	,colorTransform: null
	,useColorTransform: null
	,_flashPoint: null
	,_flashRect: null
	,_flashRect2: null
	,_flashPointZero: null
	,_matrix: null
	,_halfWidth: null
	,_halfHeight: null
	,_sinAngle: null
	,_cosAngle: null
	,_angleChanged: null
	,_facingFlip: null
	,initVars: function() {
		flixel_FlxObject.prototype.initVars.call(this);
		this.animation = new flixel_animation_FlxAnimationController(this);
		this._flashPoint = new openfl_geom_Point();
		this._flashRect = new openfl_geom_Rectangle();
		this._flashRect2 = new openfl_geom_Rectangle();
		this._flashPointZero = new openfl_geom_Point();
		this.offset = flixel_util_FlxPoint.get(null,null);
		this.origin = flixel_util_FlxPoint.get(null,null);
		this.scale = flixel_util_FlxPoint.get(1,1);
		this._matrix = new openfl_geom_Matrix();
	}
	,destroy: function() {
		flixel_FlxObject.prototype.destroy.call(this);
		this.animation = flixel_util_FlxDestroyUtil.destroy(this.animation);
		this.offset = flixel_util_FlxDestroyUtil.put(this.offset);
		this.origin = flixel_util_FlxDestroyUtil.put(this.origin);
		this.scale = flixel_util_FlxDestroyUtil.put(this.scale);
		this.framePixels = flixel_util_FlxDestroyUtil.dispose(this.framePixels);
		this._flashPoint = null;
		this._flashRect = null;
		this._flashRect2 = null;
		this._flashPointZero = null;
		this._matrix = null;
		this.colorTransform = null;
		this.set_blend(null);
		this.set_frame(null);
		this.framesData = null;
		this.set_cachedGraphics(null);
		this.region = null;
	}
	,clone: function(NewSprite) {
		if(NewSprite == null) NewSprite = new flixel_FlxSprite();
		return NewSprite.loadGraphicFromSprite(this);
	}
	,loadGraphicFromSprite: function(Sprite) {
		if(!this.exists) flixel_FlxG.log.warn("Warning, trying to clone " + Type.getClassName(js_Boot.getClass(this)) + " object that doesn't exist.");
		this.region = Sprite.region.clone();
		this.bakedRotationAngle = Sprite.bakedRotationAngle;
		this.set_cachedGraphics(Sprite.cachedGraphics);
		this.set_width(this.frameWidth = Sprite.frameWidth);
		this.set_height(this.frameHeight = Sprite.frameHeight);
		if(this.bakedRotationAngle > 0) {
			this.set_width(Sprite.get_width());
			this.set_height(Sprite.get_height());
			this.centerOffsets();
		}
		this.updateFrameData();
		this.resetHelpers();
		this.antialiasing = Sprite.antialiasing;
		this.animation.copyFrom(Sprite.animation);
		return this;
	}
	,loadGraphic: function(Graphic,Animated,Width,Height,Unique,Key) {
		if(Unique == null) Unique = false;
		if(Height == null) Height = 0;
		if(Width == null) Width = 0;
		if(Animated == null) Animated = false;
		this.bakedRotationAngle = 0;
		this.set_cachedGraphics(flixel_FlxG.bitmap.addWithSpaces(Graphic,0,0,1,1,Unique,Key));
		if(Width == 0) {
			if(Animated == true) Width = this.cachedGraphics.bitmap.height; else Width = this.cachedGraphics.bitmap.width;
			if(Width > this.cachedGraphics.bitmap.width) Width = this.cachedGraphics.bitmap.width; else Width = Width;
		}
		if(Height == 0) {
			if(Animated == true) Height = Width; else Height = this.cachedGraphics.bitmap.height;
			if(Height > this.cachedGraphics.bitmap.height) Height = this.cachedGraphics.bitmap.height; else Height = Height;
		}
		if(!js_Boot.__instanceof(Graphic,flixel_util_loaders_TextureRegion)) {
			this.region = new flixel_system_layer_Region(0,0,Width,Height);
			this.region.width = this.cachedGraphics.bitmap.width;
			this.region.height = this.cachedGraphics.bitmap.height;
		} else {
			this.region = (js_Boot.__cast(Graphic , flixel_util_loaders_TextureRegion)).region.clone();
			if(this.region.tileWidth > 0) Width = this.region.tileWidth; else this.region.tileWidth = this.region.width;
			if(this.region.tileHeight > 0) Height = this.region.tileWidth; else this.region.tileHeight = this.region.height;
		}
		this.set_width(this.frameWidth = Width);
		this.set_height(this.frameHeight = Height);
		this.animation.destroyAnimations();
		this.updateFrameData();
		this.resetHelpers();
		return this;
	}
	,loadRotatedGraphic: function(Graphic,Rotations,Frame,AntiAliasing,AutoBuffer,Key) {
		if(AutoBuffer == null) AutoBuffer = false;
		if(AntiAliasing == null) AntiAliasing = false;
		if(Frame == null) Frame = -1;
		if(Rotations == null) Rotations = 16;
		var rows = Std["int"](Math.sqrt(Rotations));
		var brush = flixel_FlxG.bitmap.addWithSpaces(Graphic,0,0,1,1,false,Key).bitmap;
		var isRegion = js_Boot.__instanceof(Graphic,flixel_util_loaders_TextureRegion);
		var spriteRegion;
		if(isRegion == true) spriteRegion = Graphic; else spriteRegion = null;
		var tempRegion;
		if(isRegion == true) tempRegion = spriteRegion.region; else tempRegion = null;
		if(Frame >= 0 || isRegion) {
			var full = brush;
			if(isRegion) {
				brush = new openfl_display_BitmapData(tempRegion.width,tempRegion.height);
				this._flashRect.x = tempRegion.startX;
				this._flashRect.y = tempRegion.startY;
				this._flashRect.width = tempRegion.width;
				this._flashRect.height = tempRegion.height;
				brush.copyPixels(full,this._flashRect,this._flashPointZero);
			} else {
				brush = new openfl_display_BitmapData(full.height,full.height);
				var rx = Frame * brush.width;
				var ry = 0;
				var fw = full.width;
				if(rx >= fw) {
					ry = (rx / fw | 0) * brush.height;
					rx %= fw;
				}
				this._flashRect.x = rx;
				this._flashRect.y = ry;
				this._flashRect.width = brush.width;
				this._flashRect.height = brush.height;
				brush.copyPixels(full,this._flashRect,this._flashPointZero);
			}
		}
		var max = brush.width;
		if(brush.height > max) max = brush.height;
		if(AutoBuffer) max = max * 1.5 | 0;
		var columns = Math.ceil(Rotations / rows);
		this.set_width(max * columns);
		this.set_height(max * rows);
		var key = "";
		if(typeof(Graphic) == "string") key = Graphic; else if(js_Boot.__instanceof(Graphic,Class)) key = Type.getClassName(Graphic); else if(js_Boot.__instanceof(Graphic,openfl_display_BitmapData) && Key != null) key = Key; else if(isRegion) {
			key = spriteRegion.data.key;
			key += ":" + tempRegion.startX + ":" + tempRegion.startY + ":" + tempRegion.width + ":" + tempRegion.height + ":" + Rotations;
		} else return null;
		if(!isRegion) key += ":" + Frame + ":" + this.get_width() + "x" + this.get_height() + ":" + Rotations;
		var skipGen = flixel_FlxG.bitmap.checkCache(key);
		this.set_cachedGraphics(flixel_FlxG.bitmap.create(Std["int"](this.get_width()) + columns - 1,Std["int"](this.get_height()) + rows - 1,0,true,key));
		this.bakedRotationAngle = 360 / Rotations;
		if(!skipGen) {
			var row = 0;
			var column;
			var bakedAngle = 0;
			var halfBrushWidth = brush.width * 0.5 | 0;
			var halfBrushHeight = brush.height * 0.5 | 0;
			var midpointX = max * 0.5 | 0;
			var midpointY = max * 0.5 | 0;
			while(row < rows) {
				column = 0;
				while(column < columns) {
					this._matrix.identity();
					this._matrix.translate(-halfBrushWidth,-halfBrushHeight);
					this._matrix.rotate(bakedAngle * (Math.PI / 180));
					this._matrix.translate(max * column + midpointX + column,midpointY + row);
					bakedAngle += this.bakedRotationAngle;
					this.cachedGraphics.bitmap.draw(brush,this._matrix,null,null,null,AntiAliasing);
					column++;
				}
				midpointY += max;
				row++;
			}
		}
		this.frameWidth = this.frameHeight = max;
		this.set_width(this.set_height(max));
		this.region = new flixel_system_layer_Region(0,0,max,max,1,1);
		this.region.width = this.cachedGraphics.bitmap.width;
		this.region.height = this.cachedGraphics.bitmap.height;
		this.updateFrameData();
		if(AutoBuffer) {
			this.set_width(brush.width);
			this.set_height(brush.height);
			this.centerOffsets();
		}
		this.animation.createPrerotated();
		this.resetHelpers();
		return this;
	}
	,loadGraphicFromTexture: function(Data,Unique,FrameName) {
		if(Unique == null) Unique = false;
		this.bakedRotationAngle = 0;
		if(js_Boot.__instanceof(Data,flixel_util_loaders_CachedGraphics)) {
			this.set_cachedGraphics(Data);
			if(this.cachedGraphics.data == null) return null;
		} else if(js_Boot.__instanceof(Data,flixel_util_loaders_TexturePackerData)) {
			this.set_cachedGraphics(flixel_FlxG.bitmap.addWithSpaces(Data.assetName,0,0,1,1,Unique,null));
			this.cachedGraphics.data = Data;
		} else return null;
		this.region = new flixel_system_layer_Region();
		this.region.width = this.cachedGraphics.bitmap.width;
		this.region.height = this.cachedGraphics.bitmap.height;
		this.animation.destroyAnimations();
		this.updateFrameData();
		this.resetHelpers();
		if(FrameName != null) this.animation.set_frameName(FrameName);
		this.set_width(this.frameWidth);
		this.set_height(this.frameHeight);
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
		return this;
	}
	,loadRotatedGraphicFromTexture: function(Data,Image,Rotations,AntiAliasing,AutoBuffer) {
		if(AutoBuffer == null) AutoBuffer = false;
		if(AntiAliasing == null) AntiAliasing = false;
		if(Rotations == null) Rotations = 16;
		var temp = this.loadGraphicFromTexture(Data);
		if(temp == null) return null;
		this.animation.set_frameName(Image);
		var key = Std.string(Data.assetName) + ":" + Image;
		var frameBitmapData = this.getFlxFrameBitmapData();
		if(flixel_FlxG.bitmap.get(key) == null) frameBitmapData = frameBitmapData.clone();
		this.loadRotatedGraphic(frameBitmapData,Rotations,-1,AntiAliasing,AutoBuffer,key);
		return this;
	}
	,makeGraphic: function(Width,Height,Color,Unique,Key) {
		if(Unique == null) Unique = false;
		if(Color == null) Color = -1;
		this.bakedRotationAngle = 0;
		this.set_cachedGraphics(flixel_FlxG.bitmap.create(Width,Height,Color,Unique,Key));
		this.region = new flixel_system_layer_Region();
		this.region.width = Width;
		this.region.height = Height;
		this.set_width(this.region.tileWidth = this.frameWidth = this.cachedGraphics.bitmap.width);
		this.set_height(this.region.tileHeight = this.frameHeight = this.cachedGraphics.bitmap.height);
		this.animation.destroyAnimations();
		this.updateFrameData();
		this.resetHelpers();
		return this;
	}
	,resetSize: function() {
		this._flashRect.x = 0;
		this._flashRect.y = 0;
		this._flashRect.width = this.frameWidth;
		this._flashRect.height = this.frameHeight;
	}
	,resetFrameSize: function() {
		this.frameWidth = this.frame.sourceSize.x | 0;
		this.frameHeight = this.frame.sourceSize.y | 0;
		this._flashRect.x = 0;
		this._flashRect.y = 0;
		this._flashRect.width = this.frameWidth;
		this._flashRect.height = this.frameHeight;
	}
	,resetSizeFromFrame: function() {
		this.set_width(this.frameWidth);
		this.set_height(this.frameHeight);
	}
	,setGraphicSize: function(Width,Height) {
		if(Height == null) Height = 0;
		if(Width == null) Width = 0;
		if(Width <= 0 && Height <= 0) return;
		var newScaleX = Width / this.frameWidth;
		var newScaleY = Height / this.frameHeight;
		this.scale.set(newScaleX,newScaleY);
		if(Width <= 0) this.scale.set_x(newScaleY); else if(Height <= 0) this.scale.set_y(newScaleX);
	}
	,updateHitbox: function() {
		var newWidth = this.scale.x * this.frameWidth;
		var newHeight = this.scale.y * this.frameHeight;
		this.set_width(newWidth);
		this.set_height(newHeight);
		this.offset.set(-((newWidth - this.frameWidth) * 0.5),-((newHeight - this.frameHeight) * 0.5));
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
	}
	,resetHelpers: function() {
		this._flashRect.x = 0;
		this._flashRect.y = 0;
		this._flashRect.width = this.frameWidth;
		this._flashRect.height = this.frameHeight;
		this._flashRect2.x = 0;
		this._flashRect2.y = 0;
		this._flashRect2.width = this.cachedGraphics.bitmap.width;
		this._flashRect2.height = this.cachedGraphics.bitmap.height;
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
		this.dirty = true;
		this.getFlxFrameBitmapData();
		this._halfWidth = this.frameWidth * 0.5;
		this._halfHeight = this.frameHeight * 0.5;
	}
	,update: function() {
		flixel_FlxObject.prototype.update.call(this);
		this.animation.update();
	}
	,draw: function() {
		if(this.alpha == 0) return;
		if(this.dirty) this.calcFrame();
		var simpleRender = this.isSimpleRender();
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(!camera.visible || !camera.exists || !this.isOnScreen(camera)) continue;
			this._point.set_x(this.x - camera.scroll.x * this.scrollFactor.x - this.offset.x);
			this._point.set_y(this.y - camera.scroll.y * this.scrollFactor.y - this.offset.y);
			if(simpleRender) {
				this._flashPoint.x = Math.floor(this._point.x);
				this._flashPoint.y = Math.floor(this._point.y);
				camera.buffer.copyPixels(this.framePixels,this._flashRect,this._flashPoint,null,null,true);
			} else {
				this._matrix.identity();
				this._matrix.translate(-this.origin.x,-this.origin.y);
				this._matrix.scale(this.scale.x,this.scale.y);
				if(this.angle != 0 && this.bakedRotationAngle <= 0) this._matrix.rotate(this.angle * (Math.PI / 180));
				var _g2 = this._point;
				_g2.set_x(_g2.x + this.origin.x);
				var _g21 = this._point;
				_g21.set_y(_g21.y + this.origin.y);
				if(this.pixelPerfectRender) this._point.floor();
				this._matrix.translate(this._point.x,this._point.y);
				camera.buffer.draw(this.framePixels,this._matrix,null,this.blend,null,this.antialiasing || camera.antialiasing);
			}
			flixel_FlxBasic._VISIBLECOUNT++;
		}
		if(flixel_FlxG["debugger"].drawDebug) this.drawDebug();
	}
	,stamp: function(Brush,X,Y) {
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		if(Brush.dirty) {
			Brush.dirty = true;
			Brush.calcFrame();
		}
		var bitmapData = Brush.framePixels;
		if((Brush.angle == 0 || Brush.bakedRotationAngle > 0) && Brush.scale.x == 1 && Brush.scale.y == 1 && Brush.blend == null) {
			this._flashPoint.x = X + this.region.startX;
			this._flashPoint.y = Y + this.region.startY;
			this._flashRect2.width = bitmapData.width;
			this._flashRect2.height = bitmapData.height;
			this.cachedGraphics.bitmap.copyPixels(bitmapData,this._flashRect2,this._flashPoint,null,null,true);
			this._flashRect2.width = this.cachedGraphics.bitmap.width;
			this._flashRect2.height = this.cachedGraphics.bitmap.height;
			this.cachedGraphics.get_tilesheet().destroyFrameBitmapDatas();
			this.dirty = true;
			this.calcFrame();
			return;
		}
		this._matrix.identity();
		this._matrix.translate(-Brush.origin.x,-Brush.origin.y);
		this._matrix.scale(Brush.scale.x,Brush.scale.y);
		if(Brush.angle != 0) this._matrix.rotate(Brush.angle * (Math.PI / 180));
		this._matrix.translate(X + this.region.startX + Brush.origin.x,Y + this.region.startY + Brush.origin.y);
		var brushBlend = Brush.blend;
		this.cachedGraphics.bitmap.draw(bitmapData,this._matrix,null,brushBlend,null,Brush.antialiasing);
		this.cachedGraphics.get_tilesheet().destroyFrameBitmapDatas();
		this.dirty = true;
		this.calcFrame();
	}
	,drawFrame: function(Force) {
		if(Force == null) Force = false;
		if(Force || this.dirty) {
			this.dirty = true;
			this.calcFrame();
		}
	}
	,centerOffsets: function(AdjustPosition) {
		if(AdjustPosition == null) AdjustPosition = false;
		this.offset.set_x((this.frameWidth - this.get_width()) * 0.5);
		this.offset.set_y((this.frameHeight - this.get_height()) * 0.5);
		if(AdjustPosition) {
			var _g = this;
			_g.set_x(_g.x + this.offset.x);
			var _g1 = this;
			_g1.set_y(_g1.y + this.offset.y);
		}
	}
	,centerOrigin: function() {
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
	}
	,replaceColor: function(Color,NewColor,FetchPositions) {
		if(FetchPositions == null) FetchPositions = false;
		var positions = null;
		if(FetchPositions) positions = [];
		var row = this.region.startY;
		var column;
		var rows = this.region.height;
		var columns = this.region.width;
		this.cachedGraphics.bitmap.lock();
		while(row < rows) {
			column = this.region.startX;
			while(column < columns) {
				if(this.cachedGraphics.bitmap.getPixel32(column,row) == Color) {
					this.cachedGraphics.bitmap.setPixel32(column,row,NewColor);
					if(FetchPositions) positions.push(flixel_util_FlxPoint.get(column,row));
					this.dirty = true;
				}
				column++;
			}
			row++;
		}
		this.cachedGraphics.bitmap.unlock();
		this.cachedGraphics.get_tilesheet().destroyFrameBitmapDatas();
		return positions;
	}
	,setColorTransform: function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
		if(alphaOffset == null) alphaOffset = 0;
		if(blueOffset == null) blueOffset = 0;
		if(greenOffset == null) greenOffset = 0;
		if(redOffset == null) redOffset = 0;
		if(alphaMultiplier == null) alphaMultiplier = 1.0;
		if(blueMultiplier == null) blueMultiplier = 1.0;
		if(greenMultiplier == null) greenMultiplier = 1.0;
		if(redMultiplier == null) redMultiplier = 1.0;
		this.set_color((redMultiplier * 255 | 0) << 16 | (greenMultiplier * 255 | 0) << 8 | (blueMultiplier * 255 | 0));
		this.set_alpha(alphaMultiplier);
		if(this.colorTransform == null) this.colorTransform = new openfl_geom_ColorTransform(); else {
			this.colorTransform.redMultiplier = redMultiplier;
			this.colorTransform.greenMultiplier = greenMultiplier;
			this.colorTransform.blueMultiplier = blueMultiplier;
			this.colorTransform.alphaMultiplier = alphaMultiplier;
			this.colorTransform.redOffset = redOffset;
			this.colorTransform.greenOffset = greenOffset;
			this.colorTransform.blueOffset = blueOffset;
			this.colorTransform.alphaOffset = alphaOffset;
		}
		this.useColorTransform = this.alpha != 1 || this.color != 16777215 || redOffset != 0 || greenOffset != 0 || blueOffset != 0 || alphaOffset != 0;
		this.dirty = true;
	}
	,updateColorTransform: function() {
		if(this.alpha != 1 || this.color != 16777215) {
			if(this.colorTransform == null) this.colorTransform = new openfl_geom_ColorTransform((this.color >> 16) / 255,(this.color >> 8 & 255) / 255,(this.color & 255) / 255,this.alpha); else {
				this.colorTransform.redMultiplier = (this.color >> 16) / 255;
				this.colorTransform.greenMultiplier = (this.color >> 8 & 255) / 255;
				this.colorTransform.blueMultiplier = (this.color & 255) / 255;
				this.colorTransform.alphaMultiplier = this.alpha;
			}
			this.useColorTransform = true;
		} else {
			if(this.colorTransform != null) {
				this.colorTransform.redMultiplier = 1;
				this.colorTransform.greenMultiplier = 1;
				this.colorTransform.blueMultiplier = 1;
				this.colorTransform.alphaMultiplier = 1;
			}
			this.useColorTransform = false;
		}
		this.dirty = true;
	}
	,pixelsOverlapPoint: function(point,Mask,Camera) {
		if(Mask == null) Mask = 255;
		if(Camera == null) Camera = flixel_FlxG.camera;
		this.getScreenXY(this._point,Camera);
		this._point.set_x(this._point.x - this.offset.x);
		this._point.set_y(this._point.y - this.offset.y);
		this._flashPoint.x = point.x - Camera.scroll.x - this._point.x;
		this._flashPoint.y = point.y - Camera.scroll.y - this._point.y;
		if(point._weak) point.put();
		if(this._flashPoint.x < 0 || this._flashPoint.x > this.frameWidth || this._flashPoint.y < 0 || this._flashPoint.y > this.frameHeight) return false; else {
			var frameData = this.getFlxFrameBitmapData();
			var pixelColor = frameData.getPixel32(this._flashPoint.x | 0,this._flashPoint.y | 0);
			var pixelAlpha = pixelColor >> 24 & 255;
			return pixelAlpha * this.alpha >= Mask;
		}
	}
	,calcFrame: function(RunOnCpp) {
		if(RunOnCpp == null) RunOnCpp = false;
		if(this.cachedGraphics == null) this.loadGraphic(flixel__$FlxSprite_GraphicDefault);
		this.getFlxFrameBitmapData();
	}
	,updateFrameData: function() {
		if(this.cachedGraphics == null) return;
		if(this.cachedGraphics.data != null && (this.region.tileWidth == 0 && this.region.tileHeight == 0)) this.framesData = this.cachedGraphics.get_tilesheet().getTexturePackerFrames(this.cachedGraphics.data); else this.framesData = this.cachedGraphics.get_tilesheet().getSpriteSheetFrames(this.region,null);
		this.frames = this.framesData.frames.length;
		this.animation.set_frameIndex(0);
		this.set_frame(this.framesData.frames[0]);
		this.set_width(this.frameWidth);
		this.set_height(this.frameHeight);
	}
	,getFlxFrameBitmapData: function() {
		if(this.frame != null && this.dirty) {
			if(!this.flipX && !this.flipY && this.frame.type == flixel_system_layer_frames_FrameType.REGULAR) this.framePixels = this.frame.paintOnBitmap(this.framePixels); else {
				var frameBmd = null;
				if(this.flipX && this.flipY) frameBmd = this.frame.getHVReversedBitmap(); else if(this.flipX) frameBmd = this.frame.getHReversedBitmap(); else if(this.flipY) frameBmd = this.frame.getVReversedBitmap(); else frameBmd = this.frame.getBitmap();
				if(this.framePixels == null || this.framePixels.width != this.frameWidth || this.framePixels.height != this.frameHeight) {
					if(this.framePixels != null) this.framePixels.dispose();
					this.framePixels = new openfl_display_BitmapData(this.frame.sourceSize.x | 0,this.frame.sourceSize.y | 0);
				}
				this.framePixels.copyPixels(frameBmd,this._flashRect,this._flashPointZero);
			}
			if(this.useColorTransform) this.framePixels.colorTransform(this._flashRect,this.colorTransform);
			this.dirty = false;
		}
		return this.framePixels;
	}
	,getGraphicMidpoint: function(point) {
		if(point == null) point = flixel_util_FlxPoint.get(null,null);
		return point.set(this.x + this.frameWidth * 0.5,this.y + this.frameHeight * 0.5);
	}
	,resetFrameBitmapDatas: function() {
		this.cachedGraphics.get_tilesheet().destroyFrameBitmapDatas();
	}
	,isOnScreen: function(Camera) {
		if(Camera == null) Camera = flixel_FlxG.camera;
		var minX = this.x - this.offset.x - Camera.scroll.x * this.scrollFactor.x;
		var minY = this.y - this.offset.y - Camera.scroll.y * this.scrollFactor.y;
		var maxX = 0;
		var maxY = 0;
		if((this.angle == 0 || this.bakedRotationAngle > 0) && this.scale.x == 1 && this.scale.y == 1) {
			maxX = minX + this.frameWidth;
			maxY = minY + this.frameHeight;
		} else {
			var radiusX = this._halfWidth;
			var radiusY = this._halfHeight;
			if(this.origin.x == this._halfWidth) radiusX = Math.abs(this._halfWidth * this.scale.x); else {
				var sox = this.scale.x * this.origin.x;
				var sfw = this.scale.x * this.frameWidth;
				var x1 = Math.abs(sox);
				var x2 = Math.abs(sfw - sox);
				radiusX = Math.max(x2,x1);
			}
			if(this.origin.y == this._halfHeight) radiusY = Math.abs(this._halfHeight * this.scale.y); else {
				var soy = this.scale.y * this.origin.y;
				var sfh = this.scale.y * this.frameHeight;
				var y1 = Math.abs(soy);
				var y2 = Math.abs(sfh - soy);
				radiusY = Math.max(y2,y1);
			}
			var radius = Math.max(radiusX,radiusY);
			radius *= 1.41421356237;
			minX += this.origin.x;
			maxX = minX + radius;
			minX -= radius;
			minY += this.origin.y;
			maxY = minY + radius;
			minY -= radius;
		}
		if(maxX < 0 || minX > Camera.width) return false;
		if(maxY < 0 || minY > Camera.height) return false;
		return true;
	}
	,isSimpleRender: function() {
		return (this.angle == 0 || this.bakedRotationAngle > 0) && this.scale.x == 1 && this.scale.y == 1 && this.blend == null && this.pixelPerfectRender;
	}
	,setFacingFlip: function(Direction,FlipX,FlipY) {
		this._facingFlip.h[Direction] = { x : FlipX, y : FlipY};
	}
	,get_pixels: function() {
		return this.cachedGraphics.bitmap;
	}
	,set_pixels: function(Pixels) {
		var key = flixel_FlxG.bitmap.getCacheKeyFor(Pixels);
		if(key == null) {
			key = flixel_FlxG.bitmap.getUniqueKey();
			this.set_cachedGraphics(flixel_FlxG.bitmap.addWithSpaces(Pixels,0,0,1,1,false,key));
			this.cachedGraphics.set_destroyOnNoUse(true);
		} else this.set_cachedGraphics(flixel_FlxG.bitmap.get(key));
		if(this.region == null) this.region = new flixel_system_layer_Region();
		this.region.startX = 0;
		this.region.startY = 0;
		this.region.tileWidth = this.region.width = this.cachedGraphics.bitmap.width;
		this.region.tileHeight = this.region.height = this.cachedGraphics.bitmap.height;
		this.region.spacingX = 0;
		this.region.spacingY = 0;
		this.set_width(this.frameWidth = this.cachedGraphics.bitmap.width);
		this.set_height(this.frameHeight = this.cachedGraphics.bitmap.height);
		this.animation.destroyAnimations();
		this.updateFrameData();
		this.resetHelpers();
		this.cachedGraphics.get_tilesheet().destroyFrameBitmapDatas();
		return Pixels;
	}
	,set_frame: function(Value) {
		this.frame = Value;
		if(this.frame != null) {
			this.frameWidth = this.frame.sourceSize.x | 0;
			this.frameHeight = this.frame.sourceSize.y | 0;
			this._flashRect.x = 0;
			this._flashRect.y = 0;
			this._flashRect.width = this.frameWidth;
			this._flashRect.height = this.frameHeight;
			this.dirty = true;
		} else if(this.framesData != null && this.framesData.frames != null && this.framesData.frames.length > 0) {
			this.frame = this.framesData.frames[0];
			this.dirty = true;
		}
		return this.frame;
	}
	,set_facing: function(Direction) {
		var flip = this._facingFlip.h[Direction];
		if(flip != null) {
			this.set_flipX(flip.x);
			this.set_flipY(flip.y);
		}
		return this.facing = Direction;
	}
	,set_alpha: function(Alpha) {
		if(Alpha > 1) Alpha = 1;
		if(Alpha < 0) Alpha = 0;
		if(Alpha == this.alpha) return this.alpha;
		this.alpha = Alpha;
		this.updateColorTransform();
		return this.alpha;
	}
	,set_color: function(Color) {
		Color &= 16777215;
		if(this.color == Color) return Color;
		this.color = Color;
		this.updateColorTransform();
		return this.color;
	}
	,set_angle: function(Value) {
		this._angleChanged = this.angle != Value || this._angleChanged;
		return flixel_FlxObject.prototype.set_angle.call(this,Value);
	}
	,set_blend: function(Value) {
		return this.blend = Value;
	}
	,set_cachedGraphics: function(Value) {
		var oldCached = this.cachedGraphics;
		if(this.cachedGraphics != Value && Value != null) {
			var _g = Value;
			var _g1 = _g.useCount;
			_g.set_useCount(_g1 + 1);
			_g1;
		}
		if(oldCached != null && oldCached != Value) {
			var _g2 = oldCached;
			var _g11 = _g2.useCount;
			_g2.set_useCount(_g11 - 1);
			_g11;
		}
		return this.cachedGraphics = Value;
	}
	,set_flipX: function(Value) {
		if(this.flipX != Value) this.dirty = true;
		return this.flipX = Value;
	}
	,set_flipY: function(Value) {
		if(this.flipY != Value) this.dirty = true;
		return this.flipY = Value;
	}
	,__class__: flixel_FlxSprite
	,__properties__: $extend(flixel_FlxObject.prototype.__properties__,{set_color:"set_color",set_blend:"set_blend",set_flipY:"set_flipY",set_flipX:"set_flipX",set_facing:"set_facing",set_alpha:"set_alpha",set_cachedGraphics:"set_cachedGraphics",set_frame:"set_frame",set_pixels:"set_pixels",get_pixels:"get_pixels"})
});
var flixel_FlxSubState = function(BGColor) {
	if(BGColor == null) BGColor = 0;
	this._created = false;
	flixel_FlxState.call(this);
	this.closeCallback = null;
	this.set_bgColor(BGColor);
};
$hxClasses["flixel.FlxSubState"] = flixel_FlxSubState;
flixel_FlxSubState.__name__ = ["flixel","FlxSubState"];
flixel_FlxSubState.__super__ = flixel_FlxState;
flixel_FlxSubState.prototype = $extend(flixel_FlxState.prototype,{
	closeCallback: null
	,_parentState: null
	,_bgColor: null
	,_created: null
	,draw: function() {
		var _g = 0;
		var _g1 = flixel_FlxG.cameras.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.fill(this._bgColor);
		}
		flixel_FlxState.prototype.draw.call(this);
	}
	,destroy: function() {
		flixel_FlxState.prototype.destroy.call(this);
		this.closeCallback = null;
		this._parentState = null;
	}
	,close: function() {
		if(this._parentState != null && this._parentState.subState == this) this._parentState._requestSubStateReset = true;
	}
	,get_bgColor: function() {
		return this._bgColor;
	}
	,set_bgColor: function(Value) {
		return this._bgColor = Value;
	}
	,__class__: flixel_FlxSubState
});
var flixel_animation_FlxBaseAnimation = function(Parent,Name) {
	this.curIndex = 0;
	this.parent = Parent;
	this.name = Name;
};
$hxClasses["flixel.animation.FlxBaseAnimation"] = flixel_animation_FlxBaseAnimation;
flixel_animation_FlxBaseAnimation.__name__ = ["flixel","animation","FlxBaseAnimation"];
flixel_animation_FlxBaseAnimation.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_animation_FlxBaseAnimation.prototype = {
	parent: null
	,name: null
	,curIndex: null
	,set_curIndex: function(Value) {
		this.curIndex = Value;
		if(this.parent != null && this.parent._curAnim == this) this.parent.set_frameIndex(Value);
		return Value;
	}
	,destroy: function() {
		this.parent = null;
		this.name = null;
	}
	,update: function() {
	}
	,clone: function(Parent) {
		return null;
	}
	,__class__: flixel_animation_FlxBaseAnimation
	,__properties__: {set_curIndex:"set_curIndex"}
};
var flixel_animation_FlxAnimation = function(Parent,Name,Frames,FrameRate,Looped) {
	if(Looped == null) Looped = true;
	if(FrameRate == null) FrameRate = 0;
	this._frameTimer = 0;
	this.looped = true;
	this.paused = true;
	this.finished = true;
	this.delay = 0;
	this.curFrame = 0;
	flixel_animation_FlxBaseAnimation.call(this,Parent,Name);
	this.set_frameRate(FrameRate);
	this._frames = Frames;
	this.looped = Looped;
};
$hxClasses["flixel.animation.FlxAnimation"] = flixel_animation_FlxAnimation;
flixel_animation_FlxAnimation.__name__ = ["flixel","animation","FlxAnimation"];
flixel_animation_FlxAnimation.__super__ = flixel_animation_FlxBaseAnimation;
flixel_animation_FlxAnimation.prototype = $extend(flixel_animation_FlxBaseAnimation.prototype,{
	frameRate: null
	,curFrame: null
	,numFrames: null
	,delay: null
	,finished: null
	,paused: null
	,looped: null
	,_frames: null
	,_frameTimer: null
	,destroy: function() {
		this._frames = null;
		this.name = null;
		flixel_animation_FlxBaseAnimation.prototype.destroy.call(this);
	}
	,play: function(Force,Frame) {
		if(Frame == null) Frame = 0;
		if(Force == null) Force = false;
		if(!Force && (this.looped || !this.finished)) {
			this.paused = false;
			this.finished = false;
			this.set_curFrame(this.curFrame);
			return;
		}
		this.paused = false;
		this._frameTimer = 0;
		if(this.delay <= 0 || Frame == this._frames.length - 1) this.finished = true; else this.finished = false;
		if(Frame < 0) this.set_curFrame(flixel_util_FlxRandom.intRanged(0,this._frames.length - 1)); else if(this._frames.length > Frame) this.set_curFrame(Frame); else this.set_curFrame(0);
	}
	,restart: function() {
		this.play(true);
	}
	,stop: function() {
		this.finished = true;
		this.paused = true;
	}
	,update: function() {
		if(this.delay > 0 && (this.looped || !this.finished) && !this.paused) {
			this._frameTimer += flixel_FlxG.elapsed;
			while(this._frameTimer > this.delay) {
				this._frameTimer = this._frameTimer - this.delay;
				if(this.looped && this.curFrame == this._frames.length - 1) this.set_curFrame(0); else {
					var _g = this;
					var _g1 = _g.curFrame;
					_g.set_curFrame(_g1 + 1);
					_g1;
				}
			}
		}
	}
	,clone: function(Parent) {
		return new flixel_animation_FlxAnimation(Parent,this.name,this._frames,this.frameRate,this.looped);
	}
	,set_frameRate: function(value) {
		this.delay = 0;
		this.frameRate = value;
		if(value > 0) this.delay = 1.0 / value;
		return value;
	}
	,set_curFrame: function(Frame) {
		if(Frame >= 0) {
			if(!this.looped && Frame >= this._frames.length) {
				this.finished = true;
				this.curFrame = this._frames.length - 1;
			} else this.curFrame = Frame;
		} else this.curFrame = flixel_util_FlxRandom.intRanged(0,this._frames.length - 1);
		this.set_curIndex(this._frames[this.curFrame]);
		return Frame;
	}
	,get_numFrames: function() {
		return this._frames.length;
	}
	,__class__: flixel_animation_FlxAnimation
	,__properties__: $extend(flixel_animation_FlxBaseAnimation.prototype.__properties__,{get_numFrames:"get_numFrames",set_curFrame:"set_curFrame",set_frameRate:"set_frameRate"})
});
var flixel_animation_FlxAnimationController = function(Sprite) {
	this.frameIndex = -1;
	this._sprite = Sprite;
	this._animations = new haxe_ds_StringMap();
};
$hxClasses["flixel.animation.FlxAnimationController"] = flixel_animation_FlxAnimationController;
flixel_animation_FlxAnimationController.__name__ = ["flixel","animation","FlxAnimationController"];
flixel_animation_FlxAnimationController.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_animation_FlxAnimationController.frameSortFunction = function(frame1,frame2) {
	var name1 = frame1.name;
	var name2 = frame2.name;
	var num1 = Std.parseInt(name1.substring(flixel_animation_FlxAnimationController.prefixLength,name1.length - flixel_animation_FlxAnimationController.postfixLength));
	var num2 = Std.parseInt(name2.substring(flixel_animation_FlxAnimationController.prefixLength,name2.length - flixel_animation_FlxAnimationController.postfixLength));
	if(num1 > num2) return 1; else if(num2 > num1) return -1;
	return 0;
};
flixel_animation_FlxAnimationController.prototype = {
	frameIndex: null
	,frames: null
	,callback: null
	,_sprite: null
	,_curAnim: null
	,_animations: null
	,_prerotated: null
	,update: function() {
		if(this._curAnim != null) this._curAnim.update(); else if(this._prerotated != null) this._prerotated.set_angle(this._sprite.angle);
	}
	,copyFrom: function(controller) {
		this.destroyAnimations();
		var $it0 = controller._animations.iterator();
		while( $it0.hasNext() ) {
			var anim = $it0.next();
			this.add(anim.name,anim._frames,anim.frameRate,anim.looped);
		}
		if(controller._prerotated != null) this.createPrerotated();
		if(controller.get_name() != null) this.set_name(controller.get_name());
		this.set_frameIndex(controller.frameIndex);
		return this;
	}
	,createPrerotated: function(Controller) {
		this.destroyAnimations();
		if(Controller != null) Controller = Controller; else Controller = this;
		this._prerotated = new flixel_animation_FlxPrerotatedAnimation(Controller,Controller._sprite.bakedRotationAngle);
	}
	,destroyAnimations: function() {
		this.clearAnimations();
		this.clearPrerotated();
	}
	,destroy: function() {
		this.destroyAnimations();
		this._animations = null;
		this.callback = null;
		this._sprite = null;
	}
	,clearPrerotated: function() {
		if(this._prerotated != null) this._prerotated.destroy();
		this._prerotated = null;
	}
	,clearAnimations: function() {
		if(this._animations != null) {
			var anim;
			var $it0 = this._animations.keys();
			while( $it0.hasNext() ) {
				var key = $it0.next();
				anim = this._animations.get(key);
				if(anim != null) anim.destroy();
				this._animations.remove(key);
			}
		}
		this._curAnim = null;
	}
	,get: function(Name) {
		return this._animations.get(Name);
	}
	,add: function(Name,Frames,FrameRate,Looped) {
		if(Looped == null) Looped = true;
		if(FrameRate == null) FrameRate = 30;
		var numFrames = Frames.length - 1;
		var i = numFrames;
		while(i >= 0) {
			if(Frames[i] >= this._sprite.frames) Frames.splice(i,1);
			i--;
		}
		if(Frames.length > 0) {
			var anim = new flixel_animation_FlxAnimation(this,Name,Frames,FrameRate,Looped);
			this._animations.set(Name,anim);
		}
	}
	,append: function(Name,Frames) {
		var anim = this._animations.get(Name);
		if(anim == null) {
			flixel_FlxG.log.advanced("No animation called \"" + Name + "\"",flixel_system_debug_LogStyle.WARNING,true);
			return;
		}
		var numFrames = Frames.length - 1;
		var i = numFrames;
		while(i >= 0) {
			if(Frames[numFrames - i] < this._sprite.frames) anim._frames.push(Frames[numFrames - i]);
			i--;
		}
	}
	,addByNames: function(Name,FrameNames,FrameRate,Looped) {
		if(Looped == null) Looped = true;
		if(FrameRate == null) FrameRate = 30;
		if(this._sprite.cachedGraphics != null && this._sprite.cachedGraphics.data != null) {
			var indices = [];
			this.byNamesHelper(indices,FrameNames);
			if(indices.length > 0) {
				var anim = new flixel_animation_FlxAnimation(this,Name,indices,FrameRate,Looped);
				this._animations.set(Name,anim);
			}
		}
	}
	,appendByNames: function(Name,FrameNames) {
		var anim = this._animations.get(Name);
		if(anim == null) {
			flixel_FlxG.log.advanced("No animation called \"" + Name + "\"",flixel_system_debug_LogStyle.WARNING,true);
			return;
		}
		if(this._sprite.cachedGraphics != null && this._sprite.cachedGraphics.data != null) this.byNamesHelper(anim._frames,FrameNames);
	}
	,addByStringIndices: function(Name,Prefix,Indices,Postfix,FrameRate,Looped) {
		if(Looped == null) Looped = true;
		if(FrameRate == null) FrameRate = 30;
		if(this._sprite.cachedGraphics != null && this._sprite.cachedGraphics.data != null) {
			var frameIndices = [];
			this.byStringIndicesHelper(frameIndices,Prefix,Indices,Postfix);
			if(frameIndices.length > 0) {
				var anim = new flixel_animation_FlxAnimation(this,Name,frameIndices,FrameRate,Looped);
				this._animations.set(Name,anim);
			}
		}
	}
	,appendByStringIndices: function(Name,Prefix,Indices,Postfix) {
		var anim = this._animations.get(Name);
		if(anim == null) {
			flixel_FlxG.log.advanced("No animation called \"" + Name + "\"",flixel_system_debug_LogStyle.WARNING,true);
			return;
		}
		if(this._sprite.cachedGraphics != null && this._sprite.cachedGraphics.data != null) this.byStringIndicesHelper(anim._frames,Prefix,Indices,Postfix);
	}
	,addByIndices: function(Name,Prefix,Indices,Postfix,FrameRate,Looped) {
		if(Looped == null) Looped = true;
		if(FrameRate == null) FrameRate = 30;
		if(this._sprite.cachedGraphics != null && this._sprite.cachedGraphics.data != null) {
			var frameIndices = [];
			this.byIndicesHelper(frameIndices,Prefix,Indices,Postfix);
			if(frameIndices.length > 0) {
				var anim = new flixel_animation_FlxAnimation(this,Name,frameIndices,FrameRate,Looped);
				this._animations.set(Name,anim);
			}
		}
	}
	,appendByIndices: function(Name,Prefix,Indices,Postfix) {
		var anim = this._animations.get(Name);
		if(anim == null) {
			flixel_FlxG.log.advanced("No animation called \"" + Name + "\"",flixel_system_debug_LogStyle.WARNING,true);
			return;
		}
		if(this._sprite.cachedGraphics != null && this._sprite.cachedGraphics.data != null) this.byIndicesHelper(anim._frames,Prefix,Indices,Postfix);
	}
	,findSpriteFrame: function(Prefix,Index,Postfix) {
		var numFrames = this._sprite.frames;
		var flxFrames = this._sprite.framesData.frames;
		var _g = 0;
		while(_g < numFrames) {
			var i = _g++;
			var name = flxFrames[i].name;
			if(StringTools.startsWith(name,Prefix) && StringTools.endsWith(name,Postfix)) {
				var index = Std.parseInt(name.substring(Prefix.length,name.length - Postfix.length));
				if(index != null && index == Index) return i;
			}
		}
		return -1;
	}
	,addByPrefix: function(Name,Prefix,FrameRate,Looped) {
		if(Looped == null) Looped = true;
		if(FrameRate == null) FrameRate = 30;
		if(this._sprite.cachedGraphics != null && this._sprite.cachedGraphics.data != null) {
			var animFrames = [];
			this.findByPrefix(animFrames,Prefix);
			if(animFrames.length > 0) {
				var frameIndices = [];
				this.byPrefixHelper(frameIndices,animFrames,Prefix);
				if(frameIndices.length > 0) {
					var anim = new flixel_animation_FlxAnimation(this,Name,frameIndices,FrameRate,Looped);
					this._animations.set(Name,anim);
				}
			}
		}
	}
	,appendByPrefix: function(Name,Prefix) {
		var anim = this._animations.get(Name);
		if(anim == null) {
			flixel_FlxG.log.advanced("No animation called \"" + Name + "\"",flixel_system_debug_LogStyle.WARNING,true);
			return;
		}
		if(this._sprite.cachedGraphics != null && this._sprite.cachedGraphics.data != null) {
			var animFrames = [];
			this.findByPrefix(animFrames,Prefix);
			if(animFrames.length > 0) this.byPrefixHelper(anim._frames,animFrames,Prefix);
		}
	}
	,play: function(AnimName,Force,Frame) {
		if(Frame == null) Frame = 0;
		if(Force == null) Force = false;
		if(AnimName == null) {
			if(this._curAnim != null) this._curAnim.stop();
			this._curAnim = null;
		}
		if(AnimName == null || this._animations.get(AnimName) == null) {
			flixel_FlxG.log.advanced("No animation called \"" + AnimName + "\"",flixel_system_debug_LogStyle.WARNING,true);
			return;
		}
		if(this._curAnim != null && AnimName != this._curAnim.name) this._curAnim.stop();
		this._curAnim = this._animations.get(AnimName);
		this._curAnim.play(Force,Frame);
	}
	,pause: function() {
		if(this._curAnim != null) this._curAnim.paused = true;
	}
	,resume: function() {
		if(this._curAnim != null) this._curAnim.paused = false;
	}
	,getByName: function(Name) {
		return this._animations.get(Name);
	}
	,randomFrame: function() {
		if(this._curAnim != null) {
			this._curAnim.stop();
			this._curAnim = null;
		}
		this.set_frameIndex(flixel_util_FlxRandom.intRanged(0,this._sprite.frames - 1));
	}
	,fireCallback: function() {
		if(this.callback != null) {
			var name;
			if(this._curAnim != null) name = this._curAnim.name; else name = null;
			var number;
			if(this._curAnim != null) number = this._curAnim.curFrame; else number = this.frameIndex;
			this.callback(name,number,this.frameIndex);
		}
	}
	,byNamesHelper: function(AddTo,FrameNames) {
		var l = FrameNames.length;
		var _g = 0;
		while(_g < l) {
			var i = _g++;
			var name = FrameNames[i];
			if(this._sprite.framesData.framesHash.exists(name)) {
				var frameToAdd = this._sprite.framesData.framesHash.get(name);
				AddTo.push(HxOverrides.indexOf(this._sprite.framesData.frames,frameToAdd,0));
			}
		}
	}
	,byStringIndicesHelper: function(AddTo,Prefix,Indices,Postfix) {
		var l = Indices.length;
		var _g = 0;
		while(_g < l) {
			var i = _g++;
			var name = Prefix + Indices[i] + Postfix;
			if(this._sprite.framesData.framesHash.exists(name)) {
				var frameToAdd = this._sprite.framesData.framesHash.get(name);
				AddTo.push(HxOverrides.indexOf(this._sprite.framesData.frames,frameToAdd,0));
			}
		}
	}
	,byIndicesHelper: function(AddTo,Prefix,Indices,Postfix) {
		var l = Indices.length;
		var _g = 0;
		while(_g < l) {
			var i = _g++;
			var indexToAdd = this.findSpriteFrame(Prefix,Indices[i],Postfix);
			if(indexToAdd != -1) AddTo.push(indexToAdd);
		}
	}
	,byPrefixHelper: function(AddTo,AnimFrames,Prefix) {
		var name = AnimFrames[0].name;
		var postIndex = name.indexOf(".",Prefix.length);
		var postFix = name.substring(postIndex == -1?name.length:postIndex,name.length);
		flixel_animation_FlxAnimationController.prefixLength = Prefix.length;
		flixel_animation_FlxAnimationController.postfixLength = postFix.length;
		AnimFrames.sort(flixel_animation_FlxAnimationController.frameSortFunction);
		var l = AnimFrames.length;
		var _g = 0;
		while(_g < l) {
			var i = _g++;
			AddTo.push(HxOverrides.indexOf(this._sprite.framesData.frames,AnimFrames[i],0));
		}
	}
	,findByPrefix: function(AnimFrames,Prefix) {
		var l = this._sprite.framesData.frames.length;
		var _g = 0;
		while(_g < l) {
			var i = _g++;
			if(StringTools.startsWith(this._sprite.framesData.frames[i].name,Prefix)) AnimFrames.push(this._sprite.framesData.frames[i]);
		}
	}
	,set_frameIndex: function(Frame) {
		if(this._sprite.framesData != null) {
			Frame = Frame % this._sprite.frames;
			if(Frame != this.frameIndex) {
				this._sprite.set_frame(this._sprite.framesData.frames[Frame]);
				this.fireCallback();
			}
		}
		return this.frameIndex = Frame;
	}
	,get_frameName: function() {
		return this._sprite.frame.name;
	}
	,set_frameName: function(Value) {
		if(this._sprite.framesData != null && this._sprite.framesData.framesHash.exists(Value)) {
			if(this._curAnim != null) {
				this._curAnim.stop();
				this._curAnim = null;
			}
			var frame = this._sprite.framesData.framesHash.get(Value);
			if(frame != null) this.set_frameIndex(HxOverrides.indexOf(this._sprite.framesData.frames,frame,0));
		}
		return Value;
	}
	,get_name: function() {
		var animName = null;
		if(this._curAnim != null) animName = this._curAnim.name;
		return animName;
	}
	,set_name: function(AnimName) {
		this.play(AnimName);
		return AnimName;
	}
	,get_curAnim: function() {
		var anim = null;
		if(this._curAnim != null && this._curAnim.delay > 0 && (this._curAnim.looped || !this._curAnim.finished)) anim = this._curAnim;
		return anim;
	}
	,set_curAnim: function(Anim) {
		if(Anim != null && Anim != this._curAnim) {
			if(this._curAnim != null) this._curAnim.stop();
			Anim.play();
		}
		return this._curAnim = Anim;
	}
	,get_paused: function() {
		var paused = false;
		if(this._curAnim != null) paused = this._curAnim.paused;
		return paused;
	}
	,set_paused: function(Value) {
		if(this._curAnim != null) this._curAnim.paused = Value;
		return Value;
	}
	,get_finished: function() {
		var finished = true;
		if(this._curAnim != null) finished = this._curAnim.finished;
		return finished;
	}
	,set_finished: function(Value) {
		if(Value == true && this._curAnim != null) {
			this._curAnim.finished = true;
			this.set_frameIndex(this._curAnim._frames.length - 1);
		}
		return Value;
	}
	,get_frames: function() {
		return this._sprite.frames;
	}
	,getFrameIndex: function(Frame) {
		return HxOverrides.indexOf(this._sprite.framesData.frames,Frame,0);
	}
	,__class__: flixel_animation_FlxAnimationController
	,__properties__: {get_frames:"get_frames",set_finished:"set_finished",get_finished:"get_finished",set_paused:"set_paused",get_paused:"get_paused",set_name:"set_name",get_name:"get_name",set_frameName:"set_frameName",get_frameName:"get_frameName",set_frameIndex:"set_frameIndex",set_curAnim:"set_curAnim",get_curAnim:"get_curAnim"}
};
var flixel_animation_FlxPrerotatedAnimation = function(Parent,Baked) {
	this.angle = 0;
	flixel_animation_FlxBaseAnimation.call(this,Parent,"prerotated_animation");
	this.baked = Baked;
	this.rotations = Math.round(360 / Baked);
};
$hxClasses["flixel.animation.FlxPrerotatedAnimation"] = flixel_animation_FlxPrerotatedAnimation;
flixel_animation_FlxPrerotatedAnimation.__name__ = ["flixel","animation","FlxPrerotatedAnimation"];
flixel_animation_FlxPrerotatedAnimation.__super__ = flixel_animation_FlxBaseAnimation;
flixel_animation_FlxPrerotatedAnimation.prototype = $extend(flixel_animation_FlxBaseAnimation.prototype,{
	rotations: null
	,baked: null
	,angle: null
	,set_angle: function(Value) {
		var oldIndex = this.curIndex;
		var angleHelper = Math.floor(Value % 360);
		while(angleHelper < 0) angleHelper += 360;
		var newIndex = Math.floor(angleHelper / this.baked + 0.5);
		newIndex = newIndex % this.rotations | 0;
		if(oldIndex != newIndex) this.set_curIndex(newIndex);
		return this.angle = Value;
	}
	,set_curIndex: function(Value) {
		this.curIndex = Value;
		if(this.parent != null) this.parent.set_frameIndex(Value);
		return Value;
	}
	,clone: function(Parent) {
		return new flixel_animation_FlxPrerotatedAnimation(Parent,this.baked);
	}
	,__class__: flixel_animation_FlxPrerotatedAnimation
	,__properties__: $extend(flixel_animation_FlxBaseAnimation.prototype.__properties__,{set_angle:"set_angle"})
});
var flixel_effects_FlxFlicker = function() {
};
$hxClasses["flixel.effects.FlxFlicker"] = flixel_effects_FlxFlicker;
flixel_effects_FlxFlicker.__name__ = ["flixel","effects","FlxFlicker"];
flixel_effects_FlxFlicker.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_effects_FlxFlicker.flicker = function(Object,Duration,Interval,EndVisibility,ForceRestart,CompletionCallback,ProgressCallback) {
	if(ForceRestart == null) ForceRestart = true;
	if(EndVisibility == null) EndVisibility = true;
	if(Interval == null) Interval = 0.04;
	if(Duration == null) Duration = 1;
	if(flixel_effects_FlxFlicker.isFlickering(Object)) {
		if(ForceRestart) flixel_effects_FlxFlicker.stopFlickering(Object); else return;
	}
	if(Interval <= 0) Interval = flixel_FlxG.elapsed;
	var flicker = flixel_effects_FlxFlicker._pool.get();
	flicker.start(Object,Duration,Interval,EndVisibility,CompletionCallback,ProgressCallback);
	{
		flixel_effects_FlxFlicker._boundObjects.set(Object,flicker);
		flicker;
	}
};
flixel_effects_FlxFlicker.isFlickering = function(Object) {
	return flixel_effects_FlxFlicker._boundObjects.h.__keys__[Object.__id__] != null;
};
flixel_effects_FlxFlicker.stopFlickering = function(Object) {
	var boundFlicker = flixel_effects_FlxFlicker._boundObjects.h[Object.__id__];
	if(boundFlicker != null) boundFlicker.stop();
};
flixel_effects_FlxFlicker.prototype = {
	object: null
	,endVisibility: null
	,timer: null
	,completionCallback: null
	,progressCallback: null
	,duration: null
	,interval: null
	,destroy: function() {
		this.object = null;
		this.timer = null;
		this.completionCallback = null;
		this.progressCallback = null;
	}
	,start: function(Object,Duration,Interval,EndVisibility,CompletionCallback,ProgressCallback) {
		this.object = Object;
		this.duration = Duration;
		this.interval = Interval;
		this.completionCallback = CompletionCallback;
		this.progressCallback = ProgressCallback;
		this.endVisibility = EndVisibility;
		this.timer = new flixel_util_FlxTimer(this.interval,$bind(this,this.flickerProgress),this.duration / this.interval | 0);
	}
	,stop: function() {
		this.timer.cancel();
		this.object.set_visible(true);
		this.release();
	}
	,release: function() {
		flixel_effects_FlxFlicker._boundObjects.remove(this.object);
		flixel_effects_FlxFlicker._pool.put(this);
	}
	,flickerProgress: function(Timer) {
		this.object.set_visible(!this.object.visible);
		if(this.progressCallback != null) this.progressCallback(this);
		if(Timer.loops > 0 && Timer.loops - Timer._loopsCounter == 0) {
			this.object.set_visible(this.endVisibility);
			if(this.completionCallback != null) this.completionCallback(this);
			this.release();
		}
	}
	,__class__: flixel_effects_FlxFlicker
};
var flixel_group_FlxTypedSpriteGroup = function(X,Y,MaxSize) {
	if(MaxSize == null) MaxSize = 0;
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this._isDrawnDebug = false;
	this._skipTransformChildren = false;
	flixel_FlxSprite.call(this,X,Y);
	this.group = new flixel_group_FlxTypedGroup(MaxSize);
	this._sprites = this.group.members;
};
$hxClasses["flixel.group.FlxTypedSpriteGroup"] = flixel_group_FlxTypedSpriteGroup;
flixel_group_FlxTypedSpriteGroup.__name__ = ["flixel","group","FlxTypedSpriteGroup"];
flixel_group_FlxTypedSpriteGroup.__super__ = flixel_FlxSprite;
flixel_group_FlxTypedSpriteGroup.prototype = $extend(flixel_FlxSprite.prototype,{
	transformChildren_openfl_display_BlendMode: function(Function,Value) {
		if(this.group == null) return;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists) Function(sprite,Value);
		}
	}
	,transformChildren_Int: function(Function,Value) {
		if(this.group == null) return;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists) Function(sprite,Value);
		}
	}
	,transformChildren_Float: function(Function,Value) {
		if(this.group == null) return;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists) Function(sprite,Value);
		}
	}
	,transformChildren_Bool: function(Function,Value) {
		if(this.group == null) return;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists) Function(sprite,Value);
		}
	}
	,transformChildren_Array_flixel_FlxCamera: function(Function,Value) {
		if(this.group == null) return;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists) Function(sprite,Value);
		}
	}
	,multiTransformChildren_Float: function(FunctionArray,ValueArray) {
		if(this.group == null) return;
		var numProps = FunctionArray.length;
		if(numProps > ValueArray.length) return;
		var lambda;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists) {
				var _g2 = 0;
				while(_g2 < numProps) {
					var i = _g2++;
					lambda = FunctionArray[i];
					lambda(sprite,ValueArray[i]);
				}
			}
		}
	}
	,transformChildren_flixel_util_FlxPoint: function(Function,Value) {
		if(this.group == null) return;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists) Function(sprite,Value);
		}
	}
	,group: null
	,members: null
	,length: null
	,_skipTransformChildren: null
	,_isDrawnDebug: null
	,_sprites: null
	,initVars: function() {
		this.collisionType = 4;
		this.offset = new flixel_util_FlxCallbackPoint($bind(this,this.offsetCallback));
		this.origin = new flixel_util_FlxCallbackPoint($bind(this,this.originCallback));
		this.scale = new flixel_util_FlxCallbackPoint($bind(this,this.scaleCallback));
		this.scrollFactor = new flixel_util_FlxCallbackPoint($bind(this,this.scrollFactorCallback));
		this.scale.set(1,1);
		this.scrollFactor.set(1,1);
		this.velocity = flixel_util_FlxPoint.get(null,null);
		this.acceleration = flixel_util_FlxPoint.get(null,null);
		this.drag = flixel_util_FlxPoint.get(null,null);
		this.maxVelocity = flixel_util_FlxPoint.get(10000,10000);
	}
	,destroy: function() {
		this.offset = flixel_util_FlxDestroyUtil.destroy(this.offset);
		this.origin = flixel_util_FlxDestroyUtil.destroy(this.origin);
		this.scale = flixel_util_FlxDestroyUtil.destroy(this.scale);
		this.scrollFactor = flixel_util_FlxDestroyUtil.destroy(this.scrollFactor);
		this.group = flixel_util_FlxDestroyUtil.destroy(this.group);
		this._sprites = null;
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,clone: function(NewSprite) {
		if(NewSprite == null || !js_Boot.__instanceof(NewSprite,flixel_group_FlxTypedSpriteGroup)) NewSprite = new flixel_group_FlxTypedSpriteGroup(0,0,this.group.maxSize);
		var cloned = NewSprite;
		cloned.group.set_maxSize(this.group.maxSize);
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) cloned.add(sprite.clone());
		}
		return cloned;
	}
	,isOnScreen: function(Camera) {
		var result = false;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists && sprite.visible) result = result || sprite.isOnScreen(Camera);
		}
		return result;
	}
	,overlapsPoint: function(point,InScreenSpace,Camera) {
		if(InScreenSpace == null) InScreenSpace = false;
		var result = false;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists && sprite.visible) result = result || sprite.overlapsPoint(point,InScreenSpace,Camera);
		}
		return result;
	}
	,pixelsOverlapPoint: function(point,Mask,Camera) {
		if(Mask == null) Mask = 255;
		var result = false;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists && sprite.visible) result = result || sprite.pixelsOverlapPoint(point,Mask,Camera);
		}
		return result;
	}
	,update: function() {
		this.group.update();
		if(this.moves) this.updateMotion();
	}
	,draw: function() {
		this.group.draw();
		this._isDrawnDebug = false;
	}
	,replaceColor: function(Color,NewColor,FetchPositions) {
		if(FetchPositions == null) FetchPositions = false;
		var positions = null;
		if(FetchPositions) positions = [];
		var spritePositions;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				spritePositions = sprite.replaceColor(Color,NewColor,FetchPositions);
				if(FetchPositions) positions = positions.concat(spritePositions);
			}
		}
		return positions;
	}
	,add: function(Sprite) {
		var sprite = Sprite;
		var _g = sprite;
		_g.set_x(_g.x + this.x);
		var _g1 = sprite;
		_g1.set_y(_g1.y + this.y);
		var _g2 = sprite;
		_g2.set_alpha(_g2.alpha * this.alpha);
		sprite.scrollFactor.copyFrom(this.scrollFactor);
		sprite.set_cameras(this._cameras);
		return this.group.add(Sprite);
	}
	,recycle: function(ObjectClass,ContructorArgs,Force) {
		if(Force == null) Force = false;
		return this.group.recycle(ObjectClass,ContructorArgs,Force);
	}
	,remove: function(Object,Splice) {
		if(Splice == null) Splice = false;
		return this.group.remove(Object,Splice);
	}
	,replace: function(OldObject,NewObject) {
		return this.group.replace(OldObject,NewObject);
	}
	,sort: function(Function,Order) {
		if(Order == null) Order = -1;
		this.group.sort(Function,Order);
	}
	,setAll: function(VariableName,Value,Recurse) {
		if(Recurse == null) Recurse = true;
		this.group.setAll(VariableName,Value,Recurse);
	}
	,callAll: function(FunctionName,Args,Recurse) {
		if(Recurse == null) Recurse = true;
		this.group.callAll(FunctionName,Args,Recurse);
	}
	,getFirstAvailable: function(ObjectClass,Force) {
		if(Force == null) Force = false;
		return this.group.getFirstAvailable(ObjectClass,Force);
	}
	,getFirstNull: function() {
		return this.group.getFirstNull();
	}
	,getFirstExisting: function() {
		return this.group.getFirstExisting();
	}
	,getFirstAlive: function() {
		return this.group.getFirstAlive();
	}
	,getFirstDead: function() {
		return this.group.getFirstDead();
	}
	,countLiving: function() {
		return this.group.countLiving();
	}
	,countDead: function() {
		return this.group.countDead();
	}
	,getRandom: function(StartIndex,Length) {
		if(Length == null) Length = 0;
		if(StartIndex == null) StartIndex = 0;
		return this.group.getRandom(StartIndex,Length);
	}
	,forEach: function(Function) {
		this.group.forEach(Function);
	}
	,forEachAlive: function(Function) {
		this.group.forEachAlive(Function);
	}
	,forEachDead: function(Function) {
		this.group.forEachDead(Function);
	}
	,forEachExists: function(Function) {
		this.group.forEachExists(Function);
	}
	,forEachOfType: function(ObjectClass,Function) {
		this.group.forEachOfType(ObjectClass,Function);
	}
	,clear: function() {
		this.group.clear();
	}
	,kill: function() {
		flixel_FlxSprite.prototype.kill.call(this);
		this.group.kill();
	}
	,revive: function() {
		flixel_FlxSprite.prototype.revive.call(this);
		this.group.revive();
	}
	,reset: function(X,Y) {
		this.revive();
		this.setPosition(X,Y);
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) sprite.reset(X,Y);
		}
	}
	,setPosition: function(X,Y) {
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		var dx = X - this.x;
		var dy = Y - this.y;
		this.multiTransformChildren_Float([$bind(this,this.xTransform),$bind(this,this.yTransform)],[dx,dy]);
		this._skipTransformChildren = true;
		this.set_x(X);
		this.set_y(Y);
		this._skipTransformChildren = false;
	}
	,set_cameras: function(Value) {
		if(this.get_cameras() != Value) this.transformChildren_Array_flixel_FlxCamera($bind(this,this.camerasTransform),Value);
		return flixel_FlxSprite.prototype.set_cameras.call(this,Value);
	}
	,set_exists: function(Value) {
		if(this.exists != Value) this.transformChildren_Bool($bind(this,this.existsTransform),Value);
		return flixel_FlxSprite.prototype.set_exists.call(this,Value);
	}
	,set_visible: function(Value) {
		if(this.exists && this.visible != Value) this.transformChildren_Bool($bind(this,this.visibleTransform),Value);
		return flixel_FlxSprite.prototype.set_visible.call(this,Value);
	}
	,set_active: function(Value) {
		if(this.exists && this.active != Value) this.transformChildren_Bool($bind(this,this.activeTransform),Value);
		return flixel_FlxSprite.prototype.set_active.call(this,Value);
	}
	,set_alive: function(Value) {
		if(this.exists && this.alive != Value) this.transformChildren_Bool($bind(this,this.aliveTransform),Value);
		return flixel_FlxSprite.prototype.set_alive.call(this,Value);
	}
	,set_x: function(Value) {
		if(!this._skipTransformChildren && this.exists && this.x != Value) {
			var offset = Value - this.x;
			this.transformChildren_Float($bind(this,this.xTransform),offset);
		}
		return this.x = Value;
	}
	,set_y: function(Value) {
		if(!this._skipTransformChildren && this.exists && this.y != Value) {
			var offset = Value - this.y;
			this.transformChildren_Float($bind(this,this.yTransform),offset);
		}
		return this.y = Value;
	}
	,set_angle: function(Value) {
		if(this.exists && this.angle != Value) {
			var offset = Value - this.angle;
			this.transformChildren_Float($bind(this,this.angleTransform),offset);
		}
		return this.angle = Value;
	}
	,set_alpha: function(Value) {
		if(Value > 1) Value = 1; else if(Value < 0) Value = 0;
		if(this.exists && this.alpha != Value) {
			var factor;
			if(this.alpha > 0) factor = Value / this.alpha; else factor = 0;
			this.transformChildren_Float($bind(this,this.alphaTransform),factor);
		}
		return this.alpha = Value;
	}
	,set_facing: function(Value) {
		if(this.exists && this.facing != Value) this.transformChildren_Int($bind(this,this.facingTransform),Value);
		return this.facing = Value;
	}
	,set_flipX: function(Value) {
		if(this.exists && this.flipX != Value) this.transformChildren_Bool($bind(this,this.flipXTransform),Value);
		return this.flipX = Value;
	}
	,set_flipY: function(Value) {
		if(this.exists && this.flipY != Value) this.transformChildren_Bool($bind(this,this.flipYTransform),Value);
		return this.flipY = Value;
	}
	,set_moves: function(Value) {
		if(this.exists && this.moves != Value) this.transformChildren_Bool($bind(this,this.movesTransform),Value);
		return this.moves = Value;
	}
	,set_immovable: function(Value) {
		if(this.exists && this.immovable != Value) this.transformChildren_Bool($bind(this,this.immovableTransform),Value);
		return this.immovable = Value;
	}
	,set_solid: function(Value) {
		if(this.exists && (this.allowCollisions & 4369) > 0 != Value) this.transformChildren_Bool($bind(this,this.solidTransform),Value);
		return flixel_FlxSprite.prototype.set_solid.call(this,Value);
	}
	,set_color: function(Value) {
		if(this.exists && this.color != Value) this.transformChildren_Int($bind(this,this.gColorTransform),Value);
		return this.color = Value;
	}
	,set_blend: function(Value) {
		if(this.exists && this.blend != Value) this.transformChildren_openfl_display_BlendMode($bind(this,this.blendTransform),Value);
		return this.blend = Value;
	}
	,set_pixelPerfectRender: function(Value) {
		if(this.exists && this.pixelPerfectRender != Value) this.transformChildren_Bool($bind(this,this.pixelPerfectTransform),Value);
		return flixel_FlxSprite.prototype.set_pixelPerfectRender.call(this,Value);
	}
	,set_width: function(Value) {
		return Value;
	}
	,get_width: function() {
		if(this.group.length == 0) return 0;
		var minX = Infinity;
		var maxX = -Infinity;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var member = _g1[_g];
			++_g;
			var minMemberX = member.x;
			var maxMemberX = minMemberX + member.get_width();
			if(maxMemberX > maxX) maxX = maxMemberX;
			if(minMemberX < minX) minX = minMemberX;
		}
		return maxX - minX;
	}
	,set_height: function(Value) {
		return Value;
	}
	,get_height: function() {
		if(this.group.length == 0) return 0;
		var minY = Infinity;
		var maxY = -Infinity;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var member = _g1[_g];
			++_g;
			var minMemberY = member.y;
			var maxMemberY = minMemberY + member.get_height();
			if(maxMemberY > maxY) maxY = maxMemberY;
			if(minMemberY < minY) minY = minMemberY;
		}
		return maxY - minY;
	}
	,get_length: function() {
		return this.group.length;
	}
	,get_maxSize: function() {
		return this.group.maxSize;
	}
	,set_maxSize: function(Size) {
		return this.group.set_maxSize(Size);
	}
	,get_members: function() {
		return this.group.members;
	}
	,xTransform: function(Sprite,X) {
		var _g = Sprite;
		_g.set_x(_g.x + X);
	}
	,yTransform: function(Sprite,Y) {
		var _g = Sprite;
		_g.set_y(_g.y + Y);
	}
	,angleTransform: function(Sprite,Angle) {
		var _g = Sprite;
		_g.set_angle(_g.angle + Angle);
	}
	,alphaTransform: function(Sprite,Alpha) {
		var _g = Sprite;
		_g.set_alpha(_g.alpha * Alpha);
	}
	,facingTransform: function(Sprite,Facing) {
		Sprite.set_facing(Facing);
	}
	,flipXTransform: function(Sprite,FlipX) {
		Sprite.set_flipX(FlipX);
	}
	,flipYTransform: function(Sprite,FlipY) {
		Sprite.set_flipY(FlipY);
	}
	,movesTransform: function(Sprite,Moves) {
		Sprite.set_moves(Moves);
	}
	,pixelPerfectTransform: function(Sprite,PixelPerfect) {
		Sprite.set_pixelPerfectRender(PixelPerfect);
	}
	,gColorTransform: function(Sprite,Color) {
		Sprite.set_color(Color);
	}
	,blendTransform: function(Sprite,Blend) {
		Sprite.set_blend(Blend);
	}
	,immovableTransform: function(Sprite,Immovable) {
		Sprite.set_immovable(Immovable);
	}
	,visibleTransform: function(Sprite,Visible) {
		Sprite.set_visible(Visible);
	}
	,activeTransform: function(Sprite,Active) {
		Sprite.set_active(Active);
	}
	,solidTransform: function(Sprite,Solid) {
		Sprite.set_solid(Solid);
	}
	,aliveTransform: function(Sprite,Alive) {
		Sprite.set_alive(Alive);
	}
	,existsTransform: function(Sprite,Exists) {
		Sprite.set_exists(Exists);
	}
	,camerasTransform: function(Sprite,Cameras) {
		Sprite.set_cameras(Cameras);
	}
	,offsetTransform: function(Sprite,Offset) {
		Sprite.offset.copyFrom(Offset);
	}
	,originTransform: function(Sprite,Origin) {
		Sprite.origin.copyFrom(Origin);
	}
	,scaleTransform: function(Sprite,Scale) {
		Sprite.scale.copyFrom(Scale);
	}
	,scrollFactorTransform: function(Sprite,ScrollFactor) {
		Sprite.scrollFactor.copyFrom(ScrollFactor);
	}
	,offsetCallback: function(Offset) {
		this.transformChildren_flixel_util_FlxPoint($bind(this,this.offsetTransform),Offset);
	}
	,originCallback: function(Origin) {
		this.transformChildren_flixel_util_FlxPoint($bind(this,this.originTransform),Origin);
	}
	,scaleCallback: function(Scale) {
		this.transformChildren_flixel_util_FlxPoint($bind(this,this.scaleTransform),Scale);
	}
	,scrollFactorCallback: function(ScrollFactor) {
		this.transformChildren_flixel_util_FlxPoint($bind(this,this.scrollFactorTransform),ScrollFactor);
	}
	,loadGraphicFromSprite: function(Sprite) {
		flixel_FlxG.log.advanced("loadGraphicFromSprite() is not supported in FlxSpriteGroups.",flixel_system_debug_LogStyle.ERROR,true);
		return this;
	}
	,loadGraphic: function(Graphic,Animated,Width,Height,Unique,Key) {
		if(Unique == null) Unique = false;
		if(Height == null) Height = 0;
		if(Width == null) Width = 0;
		if(Animated == null) Animated = false;
		return this;
	}
	,loadRotatedGraphic: function(Graphic,Rotations,Frame,AntiAliasing,AutoBuffer,Key) {
		if(AutoBuffer == null) AutoBuffer = false;
		if(AntiAliasing == null) AntiAliasing = false;
		if(Frame == null) Frame = -1;
		if(Rotations == null) Rotations = 16;
		flixel_FlxG.log.advanced("loadRotatedGraphic() is not supported in FlxSpriteGroups.",flixel_system_debug_LogStyle.ERROR,true);
		return this;
	}
	,makeGraphic: function(Width,Height,Color,Unique,Key) {
		if(Unique == null) Unique = false;
		if(Color == null) Color = -1;
		flixel_FlxG.log.advanced("makeGraphic() is not supported in FlxSpriteGroups.",flixel_system_debug_LogStyle.ERROR,true);
		return this;
	}
	,loadGraphicFromTexture: function(Data,Unique,FrameName) {
		if(Unique == null) Unique = false;
		flixel_FlxG.log.advanced("loadGraphicFromTexture() is not supported in FlxSpriteGroups.",flixel_system_debug_LogStyle.ERROR,true);
		return this;
	}
	,loadRotatedGraphicFromTexture: function(Data,Image,Rotations,AntiAliasing,AutoBuffer) {
		if(AutoBuffer == null) AutoBuffer = false;
		if(AntiAliasing == null) AntiAliasing = false;
		if(Rotations == null) Rotations = 16;
		flixel_FlxG.log.advanced("loadRotatedGraphicFromTexture() is not supported in FlxSpriteGroups.",flixel_system_debug_LogStyle.ERROR,true);
		return this;
	}
	,set_pixels: function(Value) {
		return Value;
	}
	,set_frame: function(Value) {
		return Value;
	}
	,get_pixels: function() {
		return null;
	}
	,calcFrame: function(RunOnCpp) {
		if(RunOnCpp == null) RunOnCpp = false;
	}
	,resetHelpers: function() {
	}
	,stamp: function(Brush,X,Y) {
		if(Y == null) Y = 0;
		if(X == null) X = 0;
	}
	,updateColorTransform: function() {
	}
	,updateFrameData: function() {
	}
	,__class__: flixel_group_FlxTypedSpriteGroup
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{set_maxSize:"set_maxSize",get_maxSize:"get_maxSize",get_length:"get_length",get_members:"get_members"})
});
var flixel_group_FlxSpriteGroup = function(X,Y,MaxSize) {
	if(MaxSize == null) MaxSize = 0;
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	flixel_group_FlxTypedSpriteGroup.call(this,X,Y);
	this.group.set_maxSize(MaxSize);
};
$hxClasses["flixel.group.FlxSpriteGroup"] = flixel_group_FlxSpriteGroup;
flixel_group_FlxSpriteGroup.__name__ = ["flixel","group","FlxSpriteGroup"];
flixel_group_FlxSpriteGroup.__super__ = flixel_group_FlxTypedSpriteGroup;
flixel_group_FlxSpriteGroup.prototype = $extend(flixel_group_FlxTypedSpriteGroup.prototype,{
	__class__: flixel_group_FlxSpriteGroup
});
var flixel_group_FlxTypedGroupIterator = function(GroupMembers,filter) {
	this._groupMembers = GroupMembers;
	this._filter = filter;
	this._cursor = 0;
	this._length = this._groupMembers.length;
};
$hxClasses["flixel.group.FlxTypedGroupIterator"] = flixel_group_FlxTypedGroupIterator;
flixel_group_FlxTypedGroupIterator.__name__ = ["flixel","group","FlxTypedGroupIterator"];
flixel_group_FlxTypedGroupIterator.prototype = {
	_groupMembers: null
	,_filter: null
	,_cursor: null
	,_length: null
	,next: function() {
		if(this.hasNext()) return this._groupMembers[this._cursor++]; else return null;
	}
	,hasNext: function() {
		while(this._cursor < this._length && (this._groupMembers[this._cursor] == null || this._filter != null && !this._filter(this._groupMembers[this._cursor]))) this._cursor++;
		return this._cursor < this._length;
	}
	,__class__: flixel_group_FlxTypedGroupIterator
};
var flixel_input_FlxSwipe = function(ID,StartPosition,EndPosition,StartTimeInTicks) {
	this.ID = ID;
	this.startPosition = StartPosition;
	this.endPosition = EndPosition;
	this._startTimeInTicks = StartTimeInTicks;
	this._endTimeInTicks = flixel_FlxG.game.ticks;
};
$hxClasses["flixel.input.FlxSwipe"] = flixel_input_FlxSwipe;
flixel_input_FlxSwipe.__name__ = ["flixel","input","FlxSwipe"];
flixel_input_FlxSwipe.prototype = {
	ID: null
	,startPosition: null
	,endPosition: null
	,_startTimeInTicks: null
	,_endTimeInTicks: null
	,toString: function() {
		return flixel_util_FlxStringUtil.getDebugString([flixel_util_LabelValuePair._pool.get().create("ID",this.ID),flixel_util_LabelValuePair._pool.get().create("start",this.startPosition),flixel_util_LabelValuePair._pool.get().create("end",this.endPosition),flixel_util_LabelValuePair.weak("distance",flixel_util_FlxMath.vectorLength(this.startPosition.x - this.endPosition.x,this.startPosition.y - this.endPosition.y)),flixel_util_LabelValuePair.weak("angle",flixel_util_FlxAngle.getAngle(this.startPosition,this.endPosition)),flixel_util_LabelValuePair._pool.get().create("duration",(this._endTimeInTicks - this._startTimeInTicks) / 1000)]);
	}
	,get_distance: function() {
		return flixel_util_FlxMath.vectorLength(this.startPosition.x - this.endPosition.x,this.startPosition.y - this.endPosition.y);
	}
	,get_angle: function() {
		return flixel_util_FlxAngle.getAngle(this.startPosition,this.endPosition);
	}
	,get_duration: function() {
		return this._endTimeInTicks - this._startTimeInTicks;
	}
	,__class__: flixel_input_FlxSwipe
	,__properties__: {get_duration:"get_duration",get_angle:"get_angle",get_distance:"get_distance"}
};
var flixel_input_gamepad_FlxGamepad = function(ID,GlobalDeadZone) {
	if(GlobalDeadZone == null) GlobalDeadZone = 0;
	this.dpadRight = false;
	this.dpadLeft = false;
	this.dpadDown = false;
	this.dpadUp = false;
	this.deadZone = 0.15;
	this.buttons = [];
	var _g = [];
	var _g1 = 0;
	while(_g1 < 6) {
		var i = _g1++;
		_g.push(0);
	}
	this.axis = _g;
	this.id = ID;
	if(GlobalDeadZone != 0) this.deadZone = GlobalDeadZone;
	this.ball = flixel_util_FlxPoint.get(null,null);
	this.hat = flixel_util_FlxPoint.get(null,null);
};
$hxClasses["flixel.input.gamepad.FlxGamepad"] = flixel_input_gamepad_FlxGamepad;
flixel_input_gamepad_FlxGamepad.__name__ = ["flixel","input","gamepad","FlxGamepad"];
flixel_input_gamepad_FlxGamepad.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_input_gamepad_FlxGamepad.prototype = {
	id: null
	,buttons: null
	,deadZone: null
	,hat: null
	,ball: null
	,dpadUp: null
	,dpadDown: null
	,dpadLeft: null
	,dpadRight: null
	,axis: null
	,getButton: function(ButtonID) {
		var gamepadButton = this.buttons[ButtonID];
		if(gamepadButton == null) {
			gamepadButton = new flixel_input_gamepad_FlxGamepadButton(ButtonID);
			this.buttons[ButtonID] = gamepadButton;
		}
		return gamepadButton;
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button == null) continue;
			if(button.last == -1 && button.current == -1) button.current = 0; else if(button.last == 2 && button.current == 2) button.current = 1;
			button.last = button.current;
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button != null) {
				button.current = 0;
				button.last = 0;
			}
		}
		var numAxis = this.axis.length;
		var _g2 = 0;
		while(_g2 < numAxis) {
			var i = _g2++;
			this.axis[i] = 0;
		}
		this.hat.set();
		this.ball.set();
	}
	,destroy: function() {
		this.buttons = null;
		this.axis = null;
		this.hat = flixel_util_FlxDestroyUtil.put(this.hat);
		this.ball = flixel_util_FlxDestroyUtil.put(this.ball);
		this.hat = null;
		this.ball = null;
	}
	,checkStatus: function(ButtonID,Status) {
		if(this.buttons[ButtonID] != null) return this.buttons[ButtonID].current == Status;
		return false;
	}
	,anyPressed: function(ButtonIDArray) {
		var _g = 0;
		while(_g < ButtonIDArray.length) {
			var b = ButtonIDArray[_g];
			++_g;
			if(this.buttons[b] != null) {
				if(this.buttons[b].current > 0) return true;
			}
		}
		return false;
	}
	,anyJustPressed: function(ButtonIDArray) {
		var _g = 0;
		while(_g < ButtonIDArray.length) {
			var b = ButtonIDArray[_g];
			++_g;
			if(this.buttons[b] != null) {
				if(this.buttons[b].current == 2) return true;
			}
		}
		return false;
	}
	,anyJustReleased: function(ButtonIDArray) {
		var _g = 0;
		while(_g < ButtonIDArray.length) {
			var b = ButtonIDArray[_g];
			++_g;
			if(this.buttons[b] != null) {
				if(this.buttons[b].current == -1) return true;
			}
		}
		return false;
	}
	,pressed: function(ButtonID) {
		if(this.buttons[ButtonID] != null) return this.buttons[ButtonID].current > 0;
		return false;
	}
	,justPressed: function(ButtonID) {
		if(this.buttons[ButtonID] != null) return this.buttons[ButtonID].current == 2;
		return false;
	}
	,justReleased: function(ButtonID) {
		if(this.buttons[ButtonID] != null) return this.buttons[ButtonID].current == -1;
		return false;
	}
	,firstPressedButtonID: function() {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button != null && button.current > 0) return button.id;
		}
		return -1;
	}
	,firstJustPressedButtonID: function() {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button != null && button.current == 2) return button.id;
		}
		return -1;
	}
	,firstJustReleasedButtonID: function() {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button != null && button.current == -1) return button.id;
		}
		return -1;
	}
	,getAxis: function(AxisID) {
		return this.getAxisValue(AxisID);
	}
	,getXAxis: function(AxisID) {
		return this.getAxisValue(AxisID);
	}
	,getYAxis: function(AxisID) {
		var axisValue = this.getAxisValue(AxisID);
		return axisValue;
	}
	,anyButton: function() {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button != null && button.current > 0) return true;
		}
		return false;
	}
	,anyInput: function() {
		if(this.anyButton()) return true;
		var numAxis = this.axis.length;
		var _g = 0;
		while(_g < numAxis) {
			var i = _g++;
			if(this.axis[0] != 0) return true;
		}
		if(this.ball.x != 0 || this.ball.y != 0) return true;
		if(this.hat.x != 0 || this.hat.y != 0) return true;
		return false;
	}
	,getAxisValue: function(AxisID) {
		if(AxisID < 0 || AxisID >= this.axis.length) return 0;
		var axisValue = 0;
		axisValue = this.axis[AxisID];
		if(Math.abs(axisValue) > this.deadZone) return axisValue;
		return 0;
	}
	,get_dpadUp: function() {
		return this.hat.y < 0;
	}
	,get_dpadDown: function() {
		return this.hat.y > 0;
	}
	,get_dpadLeft: function() {
		return this.hat.x < 0;
	}
	,get_dpadRight: function() {
		return this.hat.x > 0;
	}
	,__class__: flixel_input_gamepad_FlxGamepad
	,__properties__: {get_dpadRight:"get_dpadRight",get_dpadLeft:"get_dpadLeft",get_dpadDown:"get_dpadDown",get_dpadUp:"get_dpadUp"}
};
var flixel_input_gamepad_FlxGamepadButton = function(ID,Current,Last) {
	if(Last == null) Last = 0;
	if(Current == null) Current = 0;
	this.id = ID;
	this.current = Current;
	this.last = Last;
};
$hxClasses["flixel.input.gamepad.FlxGamepadButton"] = flixel_input_gamepad_FlxGamepadButton;
flixel_input_gamepad_FlxGamepadButton.__name__ = ["flixel","input","gamepad","FlxGamepadButton"];
flixel_input_gamepad_FlxGamepadButton.prototype = {
	id: null
	,current: null
	,last: null
	,reset: function() {
		this.current = 0;
		this.last = 0;
	}
	,release: function() {
		this.last = this.current;
		if(this.current > 0) this.current = -1; else this.current = 0;
	}
	,press: function() {
		this.last = this.current;
		if(this.current > 0) this.current = 1; else this.current = 2;
	}
	,__class__: flixel_input_gamepad_FlxGamepadButton
};
var flixel_interfaces_IFlxInput = function() { };
$hxClasses["flixel.interfaces.IFlxInput"] = flixel_interfaces_IFlxInput;
flixel_interfaces_IFlxInput.__name__ = ["flixel","interfaces","IFlxInput"];
flixel_interfaces_IFlxInput.prototype = {
	reset: null
	,update: null
	,onFocus: null
	,onFocusLost: null
	,destroy: null
	,__class__: flixel_interfaces_IFlxInput
};
var flixel_input_gamepad_FlxGamepadManager = function() {
	this.globalDeadZone = 0;
	this._gamepads = [];
};
$hxClasses["flixel.input.gamepad.FlxGamepadManager"] = flixel_input_gamepad_FlxGamepadManager;
flixel_input_gamepad_FlxGamepadManager.__name__ = ["flixel","input","gamepad","FlxGamepadManager"];
flixel_input_gamepad_FlxGamepadManager.__interfaces__ = [flixel_interfaces_IFlxInput];
flixel_input_gamepad_FlxGamepadManager.prototype = {
	firstActive: null
	,lastActive: null
	,numActiveGamepads: null
	,globalDeadZone: null
	,_gamepads: null
	,getByID: function(GamepadID) {
		var gamepad = this._gamepads[GamepadID];
		if(gamepad == null) {
			gamepad = new flixel_input_gamepad_FlxGamepad(GamepadID,this.globalDeadZone);
			this._gamepads[GamepadID] = gamepad;
		}
		if(this.firstActive == null) this.firstActive = gamepad;
		this.lastActive = gamepad;
		return gamepad;
	}
	,getActiveGamepadIDs: function(IDsArray) {
		if(IDsArray == null) IDsArray = [];
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.anyInput()) IDsArray.push(gamepad.id);
		}
		return IDsArray;
	}
	,getActiveGamepads: function(GamepadArray) {
		if(GamepadArray == null) GamepadArray = [];
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.anyInput()) GamepadArray.push(gamepad);
		}
		return GamepadArray;
	}
	,getFirstActiveGamepadID: function() {
		var firstActive = this.getFirstActiveGamepad();
		if(firstActive == null) return -1; else return firstActive.id;
	}
	,getFirstActiveGamepad: function() {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.anyInput()) return gamepad;
		}
		return null;
	}
	,anyButton: function() {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.anyButton()) return true;
		}
		return false;
	}
	,anyInput: function() {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.anyInput()) return true;
		}
		return false;
	}
	,anyPressed: function(ButtonID) {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.pressed(ButtonID)) return true;
		}
		return false;
	}
	,anyJustPressed: function(ButtonID) {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.justPressed(ButtonID)) return true;
		}
		return false;
	}
	,anyJustReleased: function(ButtonID) {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.justReleased(ButtonID)) return true;
		}
		return false;
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			gamepad = flixel_util_FlxDestroyUtil.destroy(gamepad);
		}
		this.firstActive = null;
		this.lastActive = null;
		this._gamepads = null;
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null) gamepad.reset();
		}
	}
	,update: function() {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null) gamepad.update();
		}
	}
	,onFocus: function() {
	}
	,onFocusLost: function() {
		this.reset();
	}
	,get_numActiveGamepads: function() {
		var count = 0;
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null) count++;
		}
		return count;
	}
	,set_globalDeadZone: function(DeadZone) {
		this.globalDeadZone = DeadZone;
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null) gamepad.deadZone = DeadZone;
		}
		return this.globalDeadZone;
	}
	,__class__: flixel_input_gamepad_FlxGamepadManager
	,__properties__: {set_globalDeadZone:"set_globalDeadZone",get_numActiveGamepads:"get_numActiveGamepads"}
};
var flixel_input_keyboard_FlxKey = function(Name) {
	this.last = 0;
	this.current = 0;
	this.name = Name;
};
$hxClasses["flixel.input.keyboard.FlxKey"] = flixel_input_keyboard_FlxKey;
flixel_input_keyboard_FlxKey.__name__ = ["flixel","input","keyboard","FlxKey"];
flixel_input_keyboard_FlxKey.prototype = {
	name: null
	,current: null
	,last: null
	,__class__: flixel_input_keyboard_FlxKey
};
var flixel_input_keyboard_FlxKeyList = function(CheckStatus) {
	this.checkStatus = CheckStatus;
};
$hxClasses["flixel.input.keyboard.FlxKeyList"] = flixel_input_keyboard_FlxKeyList;
flixel_input_keyboard_FlxKeyList.__name__ = ["flixel","input","keyboard","FlxKeyList"];
flixel_input_keyboard_FlxKeyList.prototype = {
	checkStatus: null
	,get_A: function() {
		return flixel_FlxG.keys.checkStatus(65,this.checkStatus);
	}
	,get_B: function() {
		return flixel_FlxG.keys.checkStatus(66,this.checkStatus);
	}
	,get_C: function() {
		return flixel_FlxG.keys.checkStatus(67,this.checkStatus);
	}
	,get_D: function() {
		return flixel_FlxG.keys.checkStatus(68,this.checkStatus);
	}
	,get_E: function() {
		return flixel_FlxG.keys.checkStatus(69,this.checkStatus);
	}
	,get_F: function() {
		return flixel_FlxG.keys.checkStatus(70,this.checkStatus);
	}
	,get_G: function() {
		return flixel_FlxG.keys.checkStatus(71,this.checkStatus);
	}
	,get_H: function() {
		return flixel_FlxG.keys.checkStatus(72,this.checkStatus);
	}
	,get_I: function() {
		return flixel_FlxG.keys.checkStatus(73,this.checkStatus);
	}
	,get_J: function() {
		return flixel_FlxG.keys.checkStatus(74,this.checkStatus);
	}
	,get_K: function() {
		return flixel_FlxG.keys.checkStatus(75,this.checkStatus);
	}
	,get_L: function() {
		return flixel_FlxG.keys.checkStatus(76,this.checkStatus);
	}
	,get_M: function() {
		return flixel_FlxG.keys.checkStatus(77,this.checkStatus);
	}
	,get_N: function() {
		return flixel_FlxG.keys.checkStatus(78,this.checkStatus);
	}
	,get_O: function() {
		return flixel_FlxG.keys.checkStatus(79,this.checkStatus);
	}
	,get_P: function() {
		return flixel_FlxG.keys.checkStatus(80,this.checkStatus);
	}
	,get_Q: function() {
		return flixel_FlxG.keys.checkStatus(81,this.checkStatus);
	}
	,get_R: function() {
		return flixel_FlxG.keys.checkStatus(82,this.checkStatus);
	}
	,get_S: function() {
		return flixel_FlxG.keys.checkStatus(83,this.checkStatus);
	}
	,get_T: function() {
		return flixel_FlxG.keys.checkStatus(84,this.checkStatus);
	}
	,get_U: function() {
		return flixel_FlxG.keys.checkStatus(85,this.checkStatus);
	}
	,get_V: function() {
		return flixel_FlxG.keys.checkStatus(86,this.checkStatus);
	}
	,get_W: function() {
		return flixel_FlxG.keys.checkStatus(87,this.checkStatus);
	}
	,get_X: function() {
		return flixel_FlxG.keys.checkStatus(88,this.checkStatus);
	}
	,get_Y: function() {
		return flixel_FlxG.keys.checkStatus(89,this.checkStatus);
	}
	,get_Z: function() {
		return flixel_FlxG.keys.checkStatus(90,this.checkStatus);
	}
	,get_ZERO: function() {
		return flixel_FlxG.keys.checkStatus(48,this.checkStatus);
	}
	,get_ONE: function() {
		return flixel_FlxG.keys.checkStatus(49,this.checkStatus);
	}
	,get_TWO: function() {
		return flixel_FlxG.keys.checkStatus(50,this.checkStatus);
	}
	,get_THREE: function() {
		return flixel_FlxG.keys.checkStatus(51,this.checkStatus);
	}
	,get_FOUR: function() {
		return flixel_FlxG.keys.checkStatus(52,this.checkStatus);
	}
	,get_FIVE: function() {
		return flixel_FlxG.keys.checkStatus(53,this.checkStatus);
	}
	,get_SIX: function() {
		return flixel_FlxG.keys.checkStatus(54,this.checkStatus);
	}
	,get_SEVEN: function() {
		return flixel_FlxG.keys.checkStatus(55,this.checkStatus);
	}
	,get_EIGHT: function() {
		return flixel_FlxG.keys.checkStatus(56,this.checkStatus);
	}
	,get_NINE: function() {
		return flixel_FlxG.keys.checkStatus(57,this.checkStatus);
	}
	,get_PAGEUP: function() {
		return flixel_FlxG.keys.checkStatus(33,this.checkStatus);
	}
	,get_PAGEDOWN: function() {
		return flixel_FlxG.keys.checkStatus(34,this.checkStatus);
	}
	,get_HOME: function() {
		return flixel_FlxG.keys.checkStatus(36,this.checkStatus);
	}
	,get_END: function() {
		return flixel_FlxG.keys.checkStatus(35,this.checkStatus);
	}
	,get_INSERT: function() {
		return flixel_FlxG.keys.checkStatus(45,this.checkStatus);
	}
	,get_ESCAPE: function() {
		return flixel_FlxG.keys.checkStatus(27,this.checkStatus);
	}
	,get_MINUS: function() {
		return flixel_FlxG.keys.checkStatus(189,this.checkStatus);
	}
	,get_PLUS: function() {
		return flixel_FlxG.keys.checkStatus(187,this.checkStatus);
	}
	,get_DELETE: function() {
		return flixel_FlxG.keys.checkStatus(46,this.checkStatus);
	}
	,get_BACKSPACE: function() {
		return flixel_FlxG.keys.checkStatus(8,this.checkStatus);
	}
	,get_LBRACKET: function() {
		return flixel_FlxG.keys.checkStatus(219,this.checkStatus);
	}
	,get_RBRACKET: function() {
		return flixel_FlxG.keys.checkStatus(221,this.checkStatus);
	}
	,get_BACKSLASH: function() {
		return flixel_FlxG.keys.checkStatus(220,this.checkStatus);
	}
	,get_CAPSLOCK: function() {
		return flixel_FlxG.keys.checkStatus(20,this.checkStatus);
	}
	,get_SEMICOLON: function() {
		return flixel_FlxG.keys.checkStatus(186,this.checkStatus);
	}
	,get_QUOTE: function() {
		return flixel_FlxG.keys.checkStatus(222,this.checkStatus);
	}
	,get_ENTER: function() {
		return flixel_FlxG.keys.checkStatus(13,this.checkStatus);
	}
	,get_SHIFT: function() {
		return flixel_FlxG.keys.checkStatus(16,this.checkStatus);
	}
	,get_COMMA: function() {
		return flixel_FlxG.keys.checkStatus(188,this.checkStatus);
	}
	,get_PERIOD: function() {
		return flixel_FlxG.keys.checkStatus(190,this.checkStatus);
	}
	,get_SLASH: function() {
		return flixel_FlxG.keys.checkStatus(191,this.checkStatus);
	}
	,get_NUMPADSLASH: function() {
		return flixel_FlxG.keys.checkStatus(191,this.checkStatus);
	}
	,get_GRAVEACCENT: function() {
		return flixel_FlxG.keys.checkStatus(192,this.checkStatus);
	}
	,get_CONTROL: function() {
		return flixel_FlxG.keys.checkStatus(17,this.checkStatus);
	}
	,get_ALT: function() {
		return flixel_FlxG.keys.checkStatus(18,this.checkStatus);
	}
	,get_SPACE: function() {
		return flixel_FlxG.keys.checkStatus(32,this.checkStatus);
	}
	,get_UP: function() {
		return flixel_FlxG.keys.checkStatus(38,this.checkStatus);
	}
	,get_DOWN: function() {
		return flixel_FlxG.keys.checkStatus(40,this.checkStatus);
	}
	,get_LEFT: function() {
		return flixel_FlxG.keys.checkStatus(37,this.checkStatus);
	}
	,get_RIGHT: function() {
		return flixel_FlxG.keys.checkStatus(39,this.checkStatus);
	}
	,get_TAB: function() {
		return flixel_FlxG.keys.checkStatus(9,this.checkStatus);
	}
	,get_PRINTSCREEN: function() {
		return flixel_FlxG.keys.checkStatus(301,this.checkStatus);
	}
	,get_F1: function() {
		return flixel_FlxG.keys.checkStatus(112,this.checkStatus);
	}
	,get_F2: function() {
		return flixel_FlxG.keys.checkStatus(113,this.checkStatus);
	}
	,get_F3: function() {
		return flixel_FlxG.keys.checkStatus(114,this.checkStatus);
	}
	,get_F4: function() {
		return flixel_FlxG.keys.checkStatus(115,this.checkStatus);
	}
	,get_F5: function() {
		return flixel_FlxG.keys.checkStatus(116,this.checkStatus);
	}
	,get_F6: function() {
		return flixel_FlxG.keys.checkStatus(117,this.checkStatus);
	}
	,get_F7: function() {
		return flixel_FlxG.keys.checkStatus(118,this.checkStatus);
	}
	,get_F8: function() {
		return flixel_FlxG.keys.checkStatus(119,this.checkStatus);
	}
	,get_F9: function() {
		return flixel_FlxG.keys.checkStatus(120,this.checkStatus);
	}
	,get_F10: function() {
		return flixel_FlxG.keys.checkStatus(121,this.checkStatus);
	}
	,get_F11: function() {
		return flixel_FlxG.keys.checkStatus(122,this.checkStatus);
	}
	,get_F12: function() {
		return flixel_FlxG.keys.checkStatus(123,this.checkStatus);
	}
	,get_NUMPADONE: function() {
		return flixel_FlxG.keys.checkStatus(97,this.checkStatus);
	}
	,get_NUMPADTWO: function() {
		return flixel_FlxG.keys.checkStatus(98,this.checkStatus);
	}
	,get_NUMPADTHREE: function() {
		return flixel_FlxG.keys.checkStatus(99,this.checkStatus);
	}
	,get_NUMPADFOUR: function() {
		return flixel_FlxG.keys.checkStatus(100,this.checkStatus);
	}
	,get_NUMPADFIVE: function() {
		return flixel_FlxG.keys.checkStatus(101,this.checkStatus);
	}
	,get_NUMPADSIX: function() {
		return flixel_FlxG.keys.checkStatus(102,this.checkStatus);
	}
	,get_NUMPADSEVEN: function() {
		return flixel_FlxG.keys.checkStatus(103,this.checkStatus);
	}
	,get_NUMPADEIGHT: function() {
		return flixel_FlxG.keys.checkStatus(104,this.checkStatus);
	}
	,get_NUMPADNINE: function() {
		return flixel_FlxG.keys.checkStatus(105,this.checkStatus);
	}
	,get_NUMPADZERO: function() {
		return flixel_FlxG.keys.checkStatus(96,this.checkStatus);
	}
	,get_NUMPADMINUS: function() {
		return flixel_FlxG.keys.checkStatus(109,this.checkStatus);
	}
	,get_NUMPADPLUS: function() {
		return flixel_FlxG.keys.checkStatus(107,this.checkStatus);
	}
	,get_NUMPADPERIOD: function() {
		return flixel_FlxG.keys.checkStatus(110,this.checkStatus);
	}
	,get_NUMPADMULTIPLY: function() {
		return flixel_FlxG.keys.checkStatus(106,this.checkStatus);
	}
	,get_ANY: function() {
		var key = null;
		var keyCode = 256;
		while(keyCode-- >= 0) {
			key = flixel_FlxG.keys._keyList[keyCode];
			if(key != null) {
				if(flixel_FlxG.keys.checkStatus(keyCode,this.checkStatus)) return true;
			}
		}
		return false;
	}
	,check: function(keyCode) {
		return flixel_FlxG.keys.checkStatus(keyCode,this.checkStatus);
	}
	,__class__: flixel_input_keyboard_FlxKeyList
	,__properties__: {get_ANY:"get_ANY",get_NUMPADMULTIPLY:"get_NUMPADMULTIPLY",get_NUMPADPERIOD:"get_NUMPADPERIOD",get_NUMPADPLUS:"get_NUMPADPLUS",get_NUMPADMINUS:"get_NUMPADMINUS",get_NUMPADZERO:"get_NUMPADZERO",get_NUMPADNINE:"get_NUMPADNINE",get_NUMPADEIGHT:"get_NUMPADEIGHT",get_NUMPADSEVEN:"get_NUMPADSEVEN",get_NUMPADSIX:"get_NUMPADSIX",get_NUMPADFIVE:"get_NUMPADFIVE",get_NUMPADFOUR:"get_NUMPADFOUR",get_NUMPADTHREE:"get_NUMPADTHREE",get_NUMPADTWO:"get_NUMPADTWO",get_NUMPADONE:"get_NUMPADONE",get_F12:"get_F12",get_F11:"get_F11",get_F10:"get_F10",get_F9:"get_F9",get_F8:"get_F8",get_F7:"get_F7",get_F6:"get_F6",get_F5:"get_F5",get_F4:"get_F4",get_F3:"get_F3",get_F2:"get_F2",get_F1:"get_F1",get_PRINTSCREEN:"get_PRINTSCREEN",get_TAB:"get_TAB",get_RIGHT:"get_RIGHT",get_LEFT:"get_LEFT",get_DOWN:"get_DOWN",get_UP:"get_UP",get_SPACE:"get_SPACE",get_ALT:"get_ALT",get_CONTROL:"get_CONTROL",get_GRAVEACCENT:"get_GRAVEACCENT",get_NUMPADSLASH:"get_NUMPADSLASH",get_SLASH:"get_SLASH",get_PERIOD:"get_PERIOD",get_COMMA:"get_COMMA",get_SHIFT:"get_SHIFT",get_ENTER:"get_ENTER",get_QUOTE:"get_QUOTE",get_SEMICOLON:"get_SEMICOLON",get_CAPSLOCK:"get_CAPSLOCK",get_BACKSLASH:"get_BACKSLASH",get_RBRACKET:"get_RBRACKET",get_LBRACKET:"get_LBRACKET",get_BACKSPACE:"get_BACKSPACE",get_DELETE:"get_DELETE",get_PLUS:"get_PLUS",get_MINUS:"get_MINUS",get_ESCAPE:"get_ESCAPE",get_INSERT:"get_INSERT",get_END:"get_END",get_HOME:"get_HOME",get_PAGEDOWN:"get_PAGEDOWN",get_PAGEUP:"get_PAGEUP",get_NINE:"get_NINE",get_EIGHT:"get_EIGHT",get_SEVEN:"get_SEVEN",get_SIX:"get_SIX",get_FIVE:"get_FIVE",get_FOUR:"get_FOUR",get_THREE:"get_THREE",get_TWO:"get_TWO",get_ONE:"get_ONE",get_ZERO:"get_ZERO",get_Z:"get_Z",get_Y:"get_Y",get_X:"get_X",get_W:"get_W",get_V:"get_V",get_U:"get_U",get_T:"get_T",get_S:"get_S",get_R:"get_R",get_Q:"get_Q",get_P:"get_P",get_O:"get_O",get_N:"get_N",get_M:"get_M",get_L:"get_L",get_K:"get_K",get_J:"get_J",get_I:"get_I",get_H:"get_H",get_G:"get_G",get_F:"get_F",get_E:"get_E",get_D:"get_D",get_C:"get_C",get_B:"get_B",get_A:"get_A"}
};
var flixel_input_keyboard_FlxKeyboard = function() {
	this.enabled = true;
	this._keyLookup = new haxe_ds_StringMap();
	this._keyList = [];
	flixel_util_FlxArrayUtil.setLength_flixel_input_keyboard_FlxKey(this._keyList,256);
	var i;
	i = 65;
	while(i <= 90) {
		this.addKey(String.fromCharCode(i),i);
		i++;
	}
	i = 48;
	this.addKey("ZERO",i++);
	this.addKey("ONE",i++);
	this.addKey("TWO",i++);
	this.addKey("THREE",i++);
	this.addKey("FOUR",i++);
	this.addKey("FIVE",i++);
	this.addKey("SIX",i++);
	this.addKey("SEVEN",i++);
	this.addKey("EIGHT",i++);
	this.addKey("NINE",i++);
	i = 96;
	this.addKey("NUMPADZERO",i++);
	this.addKey("NUMPADONE",i++);
	this.addKey("NUMPADTWO",i++);
	this.addKey("NUMPADTHREE",i++);
	this.addKey("NUMPADFOUR",i++);
	this.addKey("NUMPADFIVE",i++);
	this.addKey("NUMPADSIX",i++);
	this.addKey("NUMPADSEVEN",i++);
	this.addKey("NUMPADEIGHT",i++);
	this.addKey("NUMPADNINE",i++);
	this.addKey("PAGEUP",33);
	this.addKey("PAGEDOWN",34);
	this.addKey("HOME",36);
	this.addKey("END",35);
	this.addKey("INSERT",45);
	i = 1;
	while(i <= 12) {
		this.addKey("F" + i,111 + i);
		i++;
	}
	this.addKey("ESCAPE",27);
	this.addKey("MINUS",189);
	this.addKey("PLUS",187);
	this.addKey("DELETE",46);
	this.addKey("BACKSPACE",8);
	this.addKey("LBRACKET",219);
	this.addKey("RBRACKET",221);
	this.addKey("BACKSLASH",220);
	this.addKey("CAPSLOCK",20);
	this.addKey("SEMICOLON",186);
	this.addKey("QUOTE",222);
	this.addKey("ENTER",13);
	this.addKey("SHIFT",16);
	this.addKey("COMMA",188);
	this.addKey("PERIOD",190);
	this.addKey("SLASH",191);
	this.addKey("NUMPADSLASH",191);
	this.addKey("GRAVEACCENT",192);
	this.addKey("CONTROL",17);
	this.addKey("ALT",18);
	this.addKey("SPACE",32);
	this.addKey("UP",38);
	this.addKey("DOWN",40);
	this.addKey("LEFT",37);
	this.addKey("RIGHT",39);
	this.addKey("TAB",9);
	this.addKey("PRINTSCREEN",301);
	this.addKey("NUMPADMULTIPLY",106);
	this.addKey("NUMPADMINUS",109);
	this.addKey("NUMPADPLUS",107);
	this.addKey("NUMPADPERIOD",110);
	openfl_Lib.current.stage.addEventListener(openfl_events_KeyboardEvent.KEY_DOWN,$bind(this,this.onKeyDown));
	openfl_Lib.current.stage.addEventListener(openfl_events_KeyboardEvent.KEY_UP,$bind(this,this.onKeyUp));
	this.pressed = new flixel_input_keyboard_FlxKeyList(1);
	this.justPressed = new flixel_input_keyboard_FlxKeyList(2);
	this.justReleased = new flixel_input_keyboard_FlxKeyList(-1);
};
$hxClasses["flixel.input.keyboard.FlxKeyboard"] = flixel_input_keyboard_FlxKeyboard;
flixel_input_keyboard_FlxKeyboard.__name__ = ["flixel","input","keyboard","FlxKeyboard"];
flixel_input_keyboard_FlxKeyboard.__interfaces__ = [flixel_interfaces_IFlxInput];
flixel_input_keyboard_FlxKeyboard.prototype = {
	enabled: null
	,pressed: null
	,justPressed: null
	,justReleased: null
	,_keyList: null
	,_keyLookup: null
	,anyPressed: function(KeyArray) {
		return this.checkKeyStatus(KeyArray,1);
	}
	,anyJustPressed: function(KeyArray) {
		return this.checkKeyStatus(KeyArray,2);
	}
	,anyJustReleased: function(KeyArray) {
		return this.checkKeyStatus(KeyArray,-1);
	}
	,firstPressed: function() {
		var _g = 0;
		var _g1 = this._keyList;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null && key.current == 1) return key.name;
		}
		return "";
	}
	,firstJustPressed: function() {
		var _g = 0;
		var _g1 = this._keyList;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null && key.current == 2) return key.name;
		}
		return "";
	}
	,firstJustReleased: function() {
		var _g = 0;
		var _g1 = this._keyList;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null && key.current == -1) return key.name;
		}
		return "";
	}
	,checkStatus: function(KeyCode,Status) {
		var k = this._keyList[KeyCode];
		if(k != null) {
			if(k.current == Status) return true; else if(Status == 1 && k.current == 2) return true; else if(Status == 0 && k.current == -1) return true;
		} else flixel_FlxG.log.advanced("Invalid Key: `" + KeyCode + "`.",flixel_system_debug_LogStyle.ERROR,true);
		return false;
	}
	,getKeyCode: function(KeyName) {
		return this._keyLookup.get(KeyName);
	}
	,getIsDown: function() {
		var keysDown = [];
		var _g = 0;
		var _g1 = this._keyList;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null && key.current > 0) keysDown.push(key);
		}
		return keysDown;
	}
	,destroy: function() {
		this._keyList = null;
		this._keyLookup = null;
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this._keyList;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null) {
				key.current = 0;
				key.last = 0;
			}
		}
	}
	,addKey: function(KeyName,KeyCode) {
		this._keyLookup.set(KeyName,KeyCode);
		this._keyList[KeyCode] = new flixel_input_keyboard_FlxKey(KeyName);
	}
	,update: function() {
		var _g = 0;
		var _g1 = this._keyList;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key == null) continue;
			if(key.last == -1 && key.current == -1) key.current = 0; else if(key.last == 2 && key.current == 2) key.current = 1;
			key.last = key.current;
		}
	}
	,checkKeyStatus: function(KeyArray,Status) {
		if(KeyArray == null) return false;
		var _g = 0;
		while(_g < KeyArray.length) {
			var code = KeyArray[_g];
			++_g;
			var key;
			code = code.toUpperCase();
			key = this._keyList[this._keyLookup.get(code)];
			if(key != null) {
				if(key.current == Status) return true; else if(Status == 1 && key.current == 2) return true; else if(Status == 0 && key.current == -1) return true;
			}
		}
		return false;
	}
	,onKeyUp: function(FlashEvent) {
		var c = FlashEvent.keyCode;
		if(flixel_FlxG.game["debugger"] != null && this.inKeyArray(flixel_FlxG["debugger"].toggleKeys,c)) flixel_FlxG["debugger"].set_visible(!flixel_FlxG["debugger"].visible);
		if(!this.enabled) return;
		if(this.inKeyArray(flixel_FlxG.sound.muteKeys,c)) {
			flixel_FlxG.sound.muted = !flixel_FlxG.sound.muted;
			if(flixel_FlxG.sound.volumeHandler != null) flixel_FlxG.sound.volumeHandler(flixel_FlxG.sound.muted?0:flixel_FlxG.sound.volume);
			if(flixel_FlxG.game.soundTray != null && flixel_FlxG.sound.soundTrayEnabled) flixel_FlxG.game.soundTray.show();
		} else if(this.inKeyArray(flixel_FlxG.sound.volumeDownKeys,c)) {
			flixel_FlxG.sound.muted = false;
			var _g = flixel_FlxG.sound;
			_g.set_volume(_g.volume - 0.1);
			if(flixel_FlxG.game.soundTray != null && flixel_FlxG.sound.soundTrayEnabled) flixel_FlxG.game.soundTray.show();
		} else if(this.inKeyArray(flixel_FlxG.sound.volumeUpKeys,c)) {
			flixel_FlxG.sound.muted = false;
			var _g1 = flixel_FlxG.sound;
			_g1.set_volume(_g1.volume + 0.1);
			if(flixel_FlxG.game.soundTray != null && flixel_FlxG.sound.soundTrayEnabled) flixel_FlxG.game.soundTray.show();
		}
		this.updateKeyStates(c,false);
	}
	,onKeyDown: function(FlashEvent) {
		var c = FlashEvent.keyCode;
		if(this.enabled) this.updateKeyStates(c,true);
	}
	,inKeyArray: function(KeyArray,KeyCode) {
		if(KeyArray == null) return false; else {
			var _g = 0;
			while(_g < KeyArray.length) {
				var keyString = KeyArray[_g];
				++_g;
				if(keyString == "ANY" || this._keyLookup.get(keyString) == KeyCode) return true;
			}
		}
		return false;
	}
	,resolveKeyCode: function(e) {
		return e.keyCode;
	}
	,updateKeyStates: function(KeyCode,Down) {
		var obj = this._keyList[KeyCode];
		if(obj != null) {
			if(obj.current > 0) {
				if(Down) obj.current = 1; else obj.current = -1;
			} else if(Down) obj.current = 2; else obj.current = 0;
		}
	}
	,onFocus: function() {
	}
	,onFocusLost: function() {
		this.reset();
	}
	,record: function() {
		var data = null;
		var i = 0;
		while(i < 256) {
			var key = this._keyList[i++];
			if(key == null || key.current == 0) continue;
			if(data == null) data = [];
			data.push(new flixel_system_replay_CodeValuePair(i - 1,key.current));
		}
		return data;
	}
	,playback: function(Record) {
		var i = 0;
		var l = Record.length;
		var o;
		var o2;
		while(i < l) {
			o = Record[i++];
			o2 = this._keyList[o.code];
			o2.current = o.value;
		}
	}
	,__class__: flixel_input_keyboard_FlxKeyboard
};
var flixel_input_mouse__$FlxMouse_GraphicCursor = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_input_mouse__$FlxMouse_GraphicCursor.preload != null) {
		this.image = flixel_input_mouse__$FlxMouse_GraphicCursor.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_input_mouse__$FlxMouse_GraphicCursor.resourceName),flixel_input_mouse__$FlxMouse_GraphicCursor.resourceType,function(b) {
		if(flixel_input_mouse__$FlxMouse_GraphicCursor.preload == null) flixel_input_mouse__$FlxMouse_GraphicCursor.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.input.mouse._FlxMouse.GraphicCursor"] = flixel_input_mouse__$FlxMouse_GraphicCursor;
flixel_input_mouse__$FlxMouse_GraphicCursor.__name__ = ["flixel","input","mouse","_FlxMouse","GraphicCursor"];
flixel_input_mouse__$FlxMouse_GraphicCursor.preload = null;
flixel_input_mouse__$FlxMouse_GraphicCursor.__super__ = openfl_display_BitmapData;
flixel_input_mouse__$FlxMouse_GraphicCursor.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_input_mouse__$FlxMouse_GraphicCursor
});
var flixel_input_mouse_FlxMouse = function(CursorContainer) {
	this._lastWheel = 0;
	this._lastY = 0;
	this._lastX = 0;
	this._visibleWhenFocusLost = true;
	this._wheelUsed = false;
	this._cursor = null;
	this.useSystemCursor = false;
	this.visible = true;
	this.screenY = 0;
	this.screenX = 0;
	this.wheel = 0;
	flixel_util_FlxPoint.call(this);
	this.cursorContainer = CursorContainer;
	this.cursorContainer.mouseChildren = false;
	this.cursorContainer.mouseEnabled = false;
	this._point = flixel_util_FlxPoint.get(null,null);
	this._globalScreenPosition = flixel_util_FlxPoint.get(null,null);
	this._leftButton = new flixel_input_mouse_FlxMouseButton(-1);
	this._stage = openfl_Lib.current.stage;
	this._stage.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,($_=this._leftButton,$bind($_,$_.onDown)));
	this._stage.addEventListener(openfl_events_MouseEvent.MOUSE_UP,($_=this._leftButton,$bind($_,$_.onUp)));
	this._middleButton = new flixel_input_mouse_FlxMouseButton(-2);
	this._rightButton = new flixel_input_mouse_FlxMouseButton(-3);
	this._stage.addEventListener(openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN,($_=this._middleButton,$bind($_,$_.onDown)));
	this._stage.addEventListener(openfl_events_MouseEvent.MIDDLE_MOUSE_UP,($_=this._middleButton,$bind($_,$_.onUp)));
	this._stage.addEventListener(openfl_events_MouseEvent.RIGHT_MOUSE_DOWN,($_=this._rightButton,$bind($_,$_.onDown)));
	this._stage.addEventListener(openfl_events_MouseEvent.RIGHT_MOUSE_UP,($_=this._rightButton,$bind($_,$_.onUp)));
	this._stage.addEventListener(openfl_events_Event.MOUSE_LEAVE,$bind(this,this.onMouseLeave));
	this._stage.addEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this.onMouseWheel));
	flixel_FlxG.signals.gameStarted.add($bind(this,this.onGameStart));
	openfl_ui_Mouse.hide();
};
$hxClasses["flixel.input.mouse.FlxMouse"] = flixel_input_mouse_FlxMouse;
flixel_input_mouse_FlxMouse.__name__ = ["flixel","input","mouse","FlxMouse"];
flixel_input_mouse_FlxMouse.__interfaces__ = [flixel_interfaces_IFlxInput];
flixel_input_mouse_FlxMouse.__super__ = flixel_util_FlxPoint;
flixel_input_mouse_FlxMouse.prototype = $extend(flixel_util_FlxPoint.prototype,{
	wheel: null
	,screenX: null
	,screenY: null
	,cursorContainer: null
	,visible: null
	,useSystemCursor: null
	,_leftButton: null
	,_middleButton: null
	,_rightButton: null
	,_cursor: null
	,_cursorBitmapData: null
	,_wheelUsed: null
	,_visibleWhenFocusLost: null
	,_lastX: null
	,_lastY: null
	,_lastWheel: null
	,_point: null
	,_globalScreenPosition: null
	,_stage: null
	,load: function(Graphic,Scale,XOffset,YOffset) {
		if(YOffset == null) YOffset = 0;
		if(XOffset == null) XOffset = 0;
		if(Scale == null) Scale = 1;
		if(this._cursor != null) this.cursorContainer.removeChild(this._cursor);
		if(Graphic == null) Graphic = new flixel_input_mouse__$FlxMouse_GraphicCursor(0,0);
		if(js_Boot.__instanceof(Graphic,Class)) this._cursor = Type.createInstance(Graphic,[]); else if(js_Boot.__instanceof(Graphic,openfl_display_BitmapData)) this._cursor = new openfl_display_Bitmap(js_Boot.__cast(Graphic , openfl_display_BitmapData)); else if(typeof(Graphic) == "string") this._cursor = new openfl_display_Bitmap(flixel_system_FlxAssets.getBitmapData(Graphic)); else this._cursor = new openfl_display_Bitmap(new flixel_input_mouse__$FlxMouse_GraphicCursor(0,0));
		this._cursor.set_x(XOffset);
		this._cursor.set_y(YOffset);
		this._cursor.set_scaleX(Scale);
		this._cursor.set_scaleY(Scale);
		this.cursorContainer.addChild(this._cursor);
	}
	,unload: function() {
		if(this._cursor != null) {
			if(this.cursorContainer.get_visible()) this.load(); else {
				this.cursorContainer.removeChild(this._cursor);
				this._cursor = null;
			}
		}
	}
	,getWorldPosition: function(Camera,point) {
		if(Camera == null) Camera = flixel_FlxG.camera;
		if(point == null) point = flixel_util_FlxPoint.get(null,null);
		this.getScreenPosition(Camera,this._point);
		point.set(this._point.x + Camera.scroll.x,this._point.y + Camera.scroll.y);
		return point;
	}
	,getScreenPosition: function(Camera,point) {
		if(Camera == null) Camera = flixel_FlxG.camera;
		if(point == null) point = flixel_util_FlxPoint.get(null,null);
		point.set_x((this._globalScreenPosition.x - Camera.x) / Camera.zoom);
		point.set_y((this._globalScreenPosition.y - Camera.y) / Camera.zoom);
		return point;
	}
	,destroy: function() {
		if(this._stage != null) {
			this._stage.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,($_=this._leftButton,$bind($_,$_.onDown)));
			this._stage.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,($_=this._leftButton,$bind($_,$_.onUp)));
			this._stage.removeEventListener(openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN,($_=this._middleButton,$bind($_,$_.onDown)));
			this._stage.removeEventListener(openfl_events_MouseEvent.MIDDLE_MOUSE_UP,($_=this._middleButton,$bind($_,$_.onUp)));
			this._stage.removeEventListener(openfl_events_MouseEvent.RIGHT_MOUSE_DOWN,($_=this._rightButton,$bind($_,$_.onDown)));
			this._stage.removeEventListener(openfl_events_MouseEvent.RIGHT_MOUSE_UP,($_=this._rightButton,$bind($_,$_.onUp)));
			this._stage.removeEventListener(openfl_events_Event.MOUSE_LEAVE,$bind(this,this.onMouseLeave));
			this._stage.removeEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this.onMouseWheel));
		}
		this._point = flixel_util_FlxDestroyUtil.put(this._point);
		this._globalScreenPosition = flixel_util_FlxDestroyUtil.put(this._globalScreenPosition);
		this.cursorContainer = null;
		this._cursor = null;
		this._leftButton = flixel_util_FlxDestroyUtil.destroy(this._leftButton);
		this._middleButton = flixel_util_FlxDestroyUtil.destroy(this._middleButton);
		this._rightButton = flixel_util_FlxDestroyUtil.destroy(this._rightButton);
		this._cursorBitmapData = flixel_util_FlxDestroyUtil.dispose(this._cursorBitmapData);
		flixel_FlxG.signals.gameStarted.remove($bind(this,this.onGameStart));
		flixel_util_FlxPoint.prototype.destroy.call(this);
	}
	,setGlobalScreenPositionUnsafe: function(X,Y) {
		this._globalScreenPosition.set(X,Y);
	}
	,reset: function() {
		this._leftButton.reset();
		this._middleButton.reset();
		this._rightButton.reset();
	}
	,update: function() {
		this._globalScreenPosition.set_x(Math.floor(flixel_FlxG.game.get_mouseX()));
		this._globalScreenPosition.set_y(Math.floor(flixel_FlxG.game.get_mouseY()));
		if(this.visible) {
			this.cursorContainer.set_x(this._globalScreenPosition.x);
			this.cursorContainer.set_y(this._globalScreenPosition.y);
		}
		this.updateCursor();
		this._leftButton.update();
		this._middleButton.update();
		this._rightButton.update();
		if(!this._wheelUsed) this.wheel = 0;
		this._wheelUsed = false;
	}
	,onFocus: function() {
		this.reset();
		this.set_useSystemCursor(this.useSystemCursor);
		this.set_visible(this._visibleWhenFocusLost);
	}
	,onFocusLost: function() {
		this._visibleWhenFocusLost = this.visible;
		if(this.visible) this.set_visible(false);
		openfl_ui_Mouse.show();
	}
	,onGameStart: function() {
		this.set_visible(this.visible);
	}
	,updateCursor: function() {
		this.getScreenPosition(null,this._point);
		this.screenX = this._point.x | 0;
		this.screenY = this._point.y | 0;
		this.getWorldPosition(null,this);
	}
	,onMouseWheel: function(FlashEvent) {
		if(flixel_FlxG["debugger"].visible && flixel_FlxG.game["debugger"].hasMouse) return;
		this._wheelUsed = true;
		this.wheel = FlashEvent.delta;
	}
	,onMouseLeave: function(E) {
		this._rightButton.onUp();
		this._middleButton.onUp();
	}
	,get_pressed: function() {
		return this._leftButton.current > 0;
	}
	,get_justPressed: function() {
		return this._leftButton.justPressed();
	}
	,get_justReleased: function() {
		return this._leftButton.justReleased();
	}
	,get_pressedRight: function() {
		return this._rightButton.current > 0;
	}
	,get_justPressedRight: function() {
		return this._rightButton.justPressed();
	}
	,get_justReleasedRight: function() {
		return this._rightButton.justReleased();
	}
	,get_pressedMiddle: function() {
		return this._middleButton.current > 0;
	}
	,get_justPressedMiddle: function() {
		return this._middleButton.justPressed();
	}
	,get_justReleasedMiddle: function() {
		return this._middleButton.justReleased();
	}
	,showSystemCursor: function() {
		openfl_ui_Mouse.show();
		this.cursorContainer.set_visible(false);
	}
	,hideSystemCursor: function() {
		openfl_ui_Mouse.hide();
		if(this.visible) this.cursorContainer.set_visible(true);
	}
	,set_useSystemCursor: function(Value) {
		if(Value) this.showSystemCursor(); else this.hideSystemCursor();
		return this.useSystemCursor = Value;
	}
	,set_visible: function(Value) {
		if(Value) {
			if(this.useSystemCursor) openfl_ui_Mouse.show(); else {
				if(this._cursor == null) this.load();
				this.cursorContainer.set_visible(true);
				openfl_ui_Mouse.hide();
			}
		} else {
			this.cursorContainer.set_visible(false);
			openfl_ui_Mouse.hide();
		}
		return this.visible = Value;
	}
	,record: function() {
		if(this._lastX == this._globalScreenPosition.x && this._lastY == this._globalScreenPosition.y && this._leftButton.current == 0 && this._lastWheel == this.wheel) return null;
		this._lastX = Math.floor(this._globalScreenPosition.x);
		this._lastY = Math.floor(this._globalScreenPosition.y);
		this._lastWheel = this.wheel;
		return new flixel_system_replay_MouseRecord(this._lastX,this._lastY,this._leftButton.current,this._lastWheel);
	}
	,playback: function(Record) {
		this._leftButton.current = Record.button;
		this.wheel = Record.wheel;
		this._globalScreenPosition.copyFrom(Record);
		this.updateCursor();
	}
	,__class__: flixel_input_mouse_FlxMouse
	,__properties__: $extend(flixel_util_FlxPoint.prototype.__properties__,{get_justReleasedMiddle:"get_justReleasedMiddle",get_justPressedMiddle:"get_justPressedMiddle",get_pressedMiddle:"get_pressedMiddle",get_justReleasedRight:"get_justReleasedRight",get_justPressedRight:"get_justPressedRight",get_pressedRight:"get_pressedRight",get_justReleased:"get_justReleased",get_justPressed:"get_justPressed",get_pressed:"get_pressed",set_useSystemCursor:"set_useSystemCursor",set_visible:"set_visible"})
});
var flixel_input_mouse_FlxMouseButton = function(ID) {
	this.last = 0;
	this.current = 0;
	this._ID = ID;
	this._justPressedPosition = flixel_util_FlxPoint.get(null,null);
};
$hxClasses["flixel.input.mouse.FlxMouseButton"] = flixel_input_mouse_FlxMouseButton;
flixel_input_mouse_FlxMouseButton.__name__ = ["flixel","input","mouse","FlxMouseButton"];
flixel_input_mouse_FlxMouseButton.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_input_mouse_FlxMouseButton.prototype = {
	current: null
	,last: null
	,_ID: null
	,_justPressedPosition: null
	,_justPressedTimeInTicks: null
	,update: function() {
		if(this.last == -1 && this.current == -1) this.current = 0; else if(this.last == 2 && this.current == 2) this.current = 1; else if(this.last == -2 && this.current == -2) this.current = 0;
		this.last = this.current;
		if(this.current == 2 || this.current == -2) {
			this._justPressedPosition.set(flixel_FlxG.mouse.screenX,flixel_FlxG.mouse.screenY);
			this._justPressedTimeInTicks = flixel_FlxG.game.ticks;
		} else if(this.current == -1 || this.current == -2) flixel_FlxG.swipes.push(new flixel_input_FlxSwipe(this._ID,this._justPressedPosition,flixel_FlxG.mouse.getScreenPosition(),this._justPressedTimeInTicks));
	}
	,destroy: function() {
		this._justPressedPosition = flixel_util_FlxDestroyUtil.put(this._justPressedPosition);
	}
	,onDown: function(FlashEvent) {
		if(this._ID == -1 && flixel_FlxG["debugger"].visible) {
			if(flixel_FlxG.game["debugger"].hasMouse) return;
			if(flixel_FlxG.game["debugger"].watch.editing) flixel_FlxG.game["debugger"].watch.submit();
		}
		if(this.current > 0) this.current = 1; else this.current = 2;
	}
	,onUp: function(FlashEvent) {
		if(flixel_FlxG["debugger"].visible && flixel_FlxG.game["debugger"].hasMouse) return;
		if(this.current == 2) this.current = -2; else if(this.current > 0) this.current = -1; else this.current = 0;
	}
	,reset: function() {
		this.current = 0;
		this.last = 0;
	}
	,pressed: function() {
		return this.current > 0;
	}
	,justPressed: function() {
		return this.current == 2 || this.current == -2;
	}
	,justReleased: function() {
		return this.current == -1 || this.current == -2;
	}
	,__class__: flixel_input_mouse_FlxMouseButton
};
var flixel_input_touch_FlxTouch = function(X,Y,PointID) {
	if(PointID == null) PointID = 0;
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this._last = 0;
	this._current = 0;
	this.screenY = 0;
	this.screenX = 0;
	flixel_util_FlxPoint.call(this);
	this._point = flixel_util_FlxPoint.get(null,null);
	this._globalScreenPosition = flixel_util_FlxPoint.get(null,null);
	this._justPressedPosition = flixel_util_FlxPoint.get(null,null);
	this._flashPoint = new openfl_geom_Point();
	this.updatePosition(X,Y);
	this.touchPointID = PointID;
};
$hxClasses["flixel.input.touch.FlxTouch"] = flixel_input_touch_FlxTouch;
flixel_input_touch_FlxTouch.__name__ = ["flixel","input","touch","FlxTouch"];
flixel_input_touch_FlxTouch.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_input_touch_FlxTouch.__super__ = flixel_util_FlxPoint;
flixel_input_touch_FlxTouch.prototype = $extend(flixel_util_FlxPoint.prototype,{
	screenX: null
	,screenY: null
	,touchPointID: null
	,_current: null
	,_last: null
	,_point: null
	,_globalScreenPosition: null
	,_flashPoint: null
	,_justPressedPosition: null
	,_justPressedTimeInTicks: null
	,destroy: function() {
		this._point = flixel_util_FlxDestroyUtil.put(this._point);
		this._globalScreenPosition = flixel_util_FlxDestroyUtil.put(this._globalScreenPosition);
		this._justPressedPosition = flixel_util_FlxDestroyUtil.put(this._justPressedPosition);
		this._point = null;
		this._globalScreenPosition = null;
		this._flashPoint = null;
		this._justPressedPosition = null;
		flixel_util_FlxPoint.prototype.destroy.call(this);
	}
	,getWorldPosition: function(Camera,point) {
		if(Camera == null) Camera = flixel_FlxG.camera;
		if(point == null) point = flixel_util_FlxPoint.get(null,null);
		this.getScreenPosition(Camera,this._point);
		point.set_x(this._point.x + Camera.scroll.x);
		point.set_y(this._point.y + Camera.scroll.y);
		return point;
	}
	,getScreenPosition: function(Camera,point) {
		if(Camera == null) Camera = flixel_FlxG.camera;
		if(point == null) point = flixel_util_FlxPoint.get(null,null);
		point.set_x((this._globalScreenPosition.x - Camera.x) / Camera.zoom);
		point.set_y((this._globalScreenPosition.y - Camera.y) / Camera.zoom);
		return point;
	}
	,overlaps: function(ObjectOrGroup,Camera) {
		if(js_Boot.__instanceof(ObjectOrGroup,flixel_group_FlxTypedGroup)) {
			var i = 0;
			var results = false;
			var basic;
			var grp = ObjectOrGroup;
			var members = grp.members;
			while(i < grp.length) {
				basic = members[i++];
				if(basic != null && basic.exists && this.overlaps(basic,Camera)) {
					results = true;
					break;
				}
			}
			return results;
		}
		return (js_Boot.__cast(ObjectOrGroup , flixel_FlxObject)).overlapsPoint(this,true,Camera);
	}
	,reset: function(X,Y,PointID) {
		this.updatePosition(X,Y);
		this.touchPointID = PointID;
		this._current = 0;
		this._last = 0;
	}
	,deactivate: function() {
		this._current = 0;
		this._last = 0;
	}
	,update: function() {
		if(this._last == -1 && this._current == -1) this._current = 0; else if(this._last == 2 && this._current == 2) this._current = 1;
		this._last = this._current;
		if(this._current == 2) {
			this._justPressedPosition.set(this.screenX,this.screenY);
			this._justPressedTimeInTicks = flixel_FlxG.game.ticks;
		} else if(this._current == -1) flixel_FlxG.swipes.push(new flixel_input_FlxSwipe(this.touchPointID,this._justPressedPosition,this.getScreenPosition(),this._justPressedTimeInTicks));
	}
	,updateCursor: function() {
		var camera = flixel_FlxG.camera;
		this.screenX = Math.floor((this._globalScreenPosition.x - camera.x) / camera.zoom);
		this.screenY = Math.floor((this._globalScreenPosition.y - camera.y) / camera.zoom);
		this.set_x(this.screenX + camera.scroll.x);
		this.set_y(this.screenY + camera.scroll.y);
	}
	,updatePosition: function(X,Y) {
		this._flashPoint.x = X;
		this._flashPoint.y = Y;
		this._flashPoint = flixel_FlxG.game.globalToLocal(this._flashPoint);
		this._globalScreenPosition.set_x(this._flashPoint.x);
		this._globalScreenPosition.set_y(this._flashPoint.y);
		this.updateCursor();
	}
	,get_pressed: function() {
		return this._current > 0;
	}
	,get_justPressed: function() {
		return this._current == 2;
	}
	,get_justReleased: function() {
		return this._current == -1;
	}
	,get_isActive: function() {
		return this._current != 0;
	}
	,__class__: flixel_input_touch_FlxTouch
	,__properties__: $extend(flixel_util_FlxPoint.prototype.__properties__,{get_isActive:"get_isActive",get_justReleased:"get_justReleased",get_justPressed:"get_justPressed",get_pressed:"get_pressed"})
});
var flixel_input_touch_FlxTouchManager = function() {
	this.list = [];
	this._inactiveTouches = [];
	this._touchesCache = new haxe_ds_IntMap();
	flixel_input_touch_FlxTouchManager.maxTouchPoints = openfl_ui_Multitouch.maxTouchPoints;
	openfl_ui_Multitouch.set_inputMode(openfl_ui_MultitouchInputMode.TOUCH_POINT);
	openfl_Lib.current.stage.addEventListener("touchBegin",$bind(this,this.handleTouchBegin));
	openfl_Lib.current.stage.addEventListener("touchEnd",$bind(this,this.handleTouchEnd));
	openfl_Lib.current.stage.addEventListener("touchMove",$bind(this,this.handleTouchMove));
};
$hxClasses["flixel.input.touch.FlxTouchManager"] = flixel_input_touch_FlxTouchManager;
flixel_input_touch_FlxTouchManager.__name__ = ["flixel","input","touch","FlxTouchManager"];
flixel_input_touch_FlxTouchManager.__interfaces__ = [flixel_interfaces_IFlxInput];
flixel_input_touch_FlxTouchManager.prototype = {
	list: null
	,_inactiveTouches: null
	,_touchesCache: null
	,getByID: function(TouchPointID) {
		return this._touchesCache.h[TouchPointID];
	}
	,getFirst: function() {
		if(this.list[0] != null) return this.list[0]; else return null;
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			touch.destroy();
		}
		this.list = null;
		var _g2 = 0;
		var _g11 = this._inactiveTouches;
		while(_g2 < _g11.length) {
			var touch1 = _g11[_g2];
			++_g2;
			touch1.destroy();
		}
		this._inactiveTouches = null;
		this._touchesCache = null;
	}
	,justStarted: function(TouchArray) {
		if(TouchArray == null) TouchArray = [];
		var touchLen = TouchArray.length;
		if(touchLen > 0) TouchArray.splice(0,touchLen);
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			if(touch._current == 2) TouchArray.push(touch);
		}
		return TouchArray;
	}
	,justReleased: function(TouchArray) {
		if(TouchArray == null) TouchArray = [];
		var touchLen = TouchArray.length;
		if(touchLen > 0) TouchArray.splice(0,touchLen);
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			if(touch._current == -1) TouchArray.push(touch);
		}
		return TouchArray;
	}
	,reset: function() {
		var $it0 = this._touchesCache.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			this._touchesCache.remove(key);
		}
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			touch.deactivate();
			this._inactiveTouches.push(touch);
		}
		this.list.splice(0,this.list.length);
	}
	,handleTouchBegin: function(FlashEvent) {
		var touch = this._touchesCache.h[FlashEvent.touchPointID];
		if(touch != null) {
			touch.updatePosition(FlashEvent.stageX,FlashEvent.stageY);
			if(touch._current > 0) touch._current = 1; else touch._current = 2;
		} else {
			touch = this.recycle(FlashEvent.stageX,FlashEvent.stageY,FlashEvent.touchPointID);
			touch._current = 2;
		}
	}
	,handleTouchEnd: function(FlashEvent) {
		var touch = this._touchesCache.h[FlashEvent.touchPointID];
		if(touch != null) {
			if(touch._current > 0) touch._current = -1; else touch._current = 0;
		}
	}
	,handleTouchMove: function(FlashEvent) {
		var touch = this._touchesCache.h[FlashEvent.touchPointID];
		if(touch != null) touch.updatePosition(FlashEvent.stageX,FlashEvent.stageY);
	}
	,add: function(Touch) {
		this.list.push(Touch);
		this._touchesCache.h[Touch.touchPointID] = Touch;
		return Touch;
	}
	,recycle: function(X,Y,PointID) {
		if(this._inactiveTouches.length > 0) {
			var touch = this._inactiveTouches.pop();
			touch.reset(X,Y,PointID);
			return this.add(touch);
		}
		return this.add(new flixel_input_touch_FlxTouch(X,Y,PointID));
	}
	,update: function() {
		var i = this.list.length - 1;
		var touch;
		while(i >= 0) {
			touch = this.list[i];
			if(touch._current == 0) {
				touch.deactivate();
				this._touchesCache.remove(touch.touchPointID);
				this.list.splice(i,1);
				this._inactiveTouches.push(touch);
			} else touch.update();
			i--;
		}
	}
	,onFocus: function() {
	}
	,onFocusLost: function() {
		this.reset();
	}
	,__class__: flixel_input_touch_FlxTouchManager
};
var flixel_interfaces_IFlxSignal = function() { };
$hxClasses["flixel.interfaces.IFlxSignal"] = flixel_interfaces_IFlxSignal;
flixel_interfaces_IFlxSignal.__name__ = ["flixel","interfaces","IFlxSignal"];
flixel_interfaces_IFlxSignal.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_interfaces_IFlxSignal.prototype = {
	dispatch: null
	,add: null
	,addOnce: null
	,remove: null
	,removeAll: null
	,has: null
	,__class__: flixel_interfaces_IFlxSignal
};
var flixel_system_FlxAssets = function() { };
$hxClasses["flixel.system.FlxAssets"] = flixel_system_FlxAssets;
flixel_system_FlxAssets.__name__ = ["flixel","system","FlxAssets"];
flixel_system_FlxAssets.drawLogo = function(graph) {
	graph.beginFill(47394);
	graph.moveTo(50,13);
	graph.lineTo(51,13);
	graph.lineTo(87,50);
	graph.lineTo(87,51);
	graph.lineTo(51,87);
	graph.lineTo(50,87);
	graph.lineTo(13,51);
	graph.lineTo(13,50);
	graph.lineTo(50,13);
	graph.endFill();
	graph.beginFill(16761138);
	graph.moveTo(0,0);
	graph.lineTo(25,0);
	graph.lineTo(50,13);
	graph.lineTo(13,50);
	graph.lineTo(0,25);
	graph.lineTo(0,0);
	graph.endFill();
	graph.beginFill(16066382);
	graph.moveTo(100,0);
	graph.lineTo(75,0);
	graph.lineTo(51,13);
	graph.lineTo(87,50);
	graph.lineTo(100,25);
	graph.lineTo(100,0);
	graph.endFill();
	graph.beginFill(3555839);
	graph.moveTo(0,100);
	graph.lineTo(25,100);
	graph.lineTo(50,87);
	graph.lineTo(13,51);
	graph.lineTo(0,75);
	graph.lineTo(0,100);
	graph.endFill();
	graph.beginFill(314875);
	graph.moveTo(100,100);
	graph.lineTo(75,100);
	graph.lineTo(51,87);
	graph.lineTo(87,51);
	graph.lineTo(100,75);
	graph.lineTo(100,100);
	graph.endFill();
};
flixel_system_FlxAssets.getBitmapData = function(id) {
	return openfl_Assets.getBitmapData(id,false);
};
flixel_system_FlxAssets.getSound = function(id) {
	var extension = "";
	extension = ".ogg";
	return openfl_Assets.getSound(id + extension);
};
flixel_system_FlxAssets.cacheSounds = function() {
	var _g = 0;
	var _g1 = openfl_Assets.list("SOUND");
	while(_g < _g1.length) {
		var id = _g1[_g];
		++_g;
		flixel_FlxG.sound.cache(id);
	}
};
var flixel_system_FlxList = function() {
	this.exists = true;
};
$hxClasses["flixel.system.FlxList"] = flixel_system_FlxList;
flixel_system_FlxList.__name__ = ["flixel","system","FlxList"];
flixel_system_FlxList.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_system_FlxList._cachedListsHead = null;
flixel_system_FlxList.recycle = function() {
	if(flixel_system_FlxList._cachedListsHead != null) {
		var cachedList = flixel_system_FlxList._cachedListsHead;
		flixel_system_FlxList._cachedListsHead = flixel_system_FlxList._cachedListsHead.next;
		flixel_system_FlxList._NUM_CACHED_FLX_LIST--;
		cachedList.exists = true;
		cachedList.next = null;
		return cachedList;
	} else return new flixel_system_FlxList();
};
flixel_system_FlxList.clearCache = function() {
	while(flixel_system_FlxList._cachedListsHead != null) {
		var node = flixel_system_FlxList._cachedListsHead;
		flixel_system_FlxList._cachedListsHead = flixel_system_FlxList._cachedListsHead.next;
		node.object = null;
		node.next = null;
	}
	flixel_system_FlxList._NUM_CACHED_FLX_LIST = 0;
};
flixel_system_FlxList.prototype = {
	object: null
	,next: null
	,exists: null
	,destroy: function() {
		if(!this.exists) return;
		this.object = null;
		if(this.next != null) this.next.destroy();
		this.exists = false;
		this.next = flixel_system_FlxList._cachedListsHead;
		flixel_system_FlxList._cachedListsHead = this;
		flixel_system_FlxList._NUM_CACHED_FLX_LIST++;
	}
	,__class__: flixel_system_FlxList
};
var flixel_system_FlxQuadTree = function(X,Y,Width,Height,Parent) {
	flixel_util_FlxRect.call(this);
	this.x = X;
	this.y = Y;
	this.width = Width;
	this.height = Height;
	this;
	this.reset(X,Y,Width,Height,Parent);
};
$hxClasses["flixel.system.FlxQuadTree"] = flixel_system_FlxQuadTree;
flixel_system_FlxQuadTree.__name__ = ["flixel","system","FlxQuadTree"];
flixel_system_FlxQuadTree.divisions = null;
flixel_system_FlxQuadTree._min = null;
flixel_system_FlxQuadTree._object = null;
flixel_system_FlxQuadTree._objectLeftEdge = null;
flixel_system_FlxQuadTree._objectTopEdge = null;
flixel_system_FlxQuadTree._objectRightEdge = null;
flixel_system_FlxQuadTree._objectBottomEdge = null;
flixel_system_FlxQuadTree._list = null;
flixel_system_FlxQuadTree._useBothLists = null;
flixel_system_FlxQuadTree._processingCallback = null;
flixel_system_FlxQuadTree._notifyCallback = null;
flixel_system_FlxQuadTree._iterator = null;
flixel_system_FlxQuadTree._objectHullX = null;
flixel_system_FlxQuadTree._objectHullY = null;
flixel_system_FlxQuadTree._objectHullWidth = null;
flixel_system_FlxQuadTree._objectHullHeight = null;
flixel_system_FlxQuadTree._checkObjectHullX = null;
flixel_system_FlxQuadTree._checkObjectHullY = null;
flixel_system_FlxQuadTree._checkObjectHullWidth = null;
flixel_system_FlxQuadTree._checkObjectHullHeight = null;
flixel_system_FlxQuadTree._cachedTreesHead = null;
flixel_system_FlxQuadTree.recycle = function(X,Y,Width,Height,Parent) {
	if(flixel_system_FlxQuadTree._cachedTreesHead != null) {
		var cachedTree = flixel_system_FlxQuadTree._cachedTreesHead;
		flixel_system_FlxQuadTree._cachedTreesHead = flixel_system_FlxQuadTree._cachedTreesHead.next;
		flixel_system_FlxQuadTree._NUM_CACHED_QUAD_TREES--;
		cachedTree.reset(X,Y,Width,Height,Parent);
		return cachedTree;
	} else return new flixel_system_FlxQuadTree(X,Y,Width,Height,Parent);
};
flixel_system_FlxQuadTree.clearCache = function() {
	while(flixel_system_FlxQuadTree._cachedTreesHead != null) {
		var node = flixel_system_FlxQuadTree._cachedTreesHead;
		flixel_system_FlxQuadTree._cachedTreesHead = flixel_system_FlxQuadTree._cachedTreesHead.next;
		node.next = null;
	}
	flixel_system_FlxQuadTree._NUM_CACHED_QUAD_TREES = 0;
};
flixel_system_FlxQuadTree.__super__ = flixel_util_FlxRect;
flixel_system_FlxQuadTree.prototype = $extend(flixel_util_FlxRect.prototype,{
	exists: null
	,_canSubdivide: null
	,_headA: null
	,_tailA: null
	,_headB: null
	,_tailB: null
	,_northWestTree: null
	,_northEastTree: null
	,_southEastTree: null
	,_southWestTree: null
	,_leftEdge: null
	,_rightEdge: null
	,_topEdge: null
	,_bottomEdge: null
	,_halfWidth: null
	,_halfHeight: null
	,_midpointX: null
	,_midpointY: null
	,next: null
	,reset: function(X,Y,Width,Height,Parent) {
		this.exists = true;
		this.x = X;
		this.y = Y;
		this.width = Width;
		this.height = Height;
		this;
		this._headA = this._tailA = flixel_system_FlxList.recycle();
		this._headB = this._tailB = flixel_system_FlxList.recycle();
		if(Parent != null) {
			var iterator;
			var ot;
			if(Parent._headA.object != null) {
				iterator = Parent._headA;
				while(iterator != null) {
					if(this._tailA.object != null) {
						ot = this._tailA;
						this._tailA = flixel_system_FlxList.recycle();
						ot.next = this._tailA;
					}
					this._tailA.object = iterator.object;
					iterator = iterator.next;
				}
			}
			if(Parent._headB.object != null) {
				iterator = Parent._headB;
				while(iterator != null) {
					if(this._tailB.object != null) {
						ot = this._tailB;
						this._tailB = flixel_system_FlxList.recycle();
						ot.next = this._tailB;
					}
					this._tailB.object = iterator.object;
					iterator = iterator.next;
				}
			}
		} else flixel_system_FlxQuadTree._min = Math.floor((this.width + this.height) / (2 * flixel_system_FlxQuadTree.divisions));
		this._canSubdivide = this.width > flixel_system_FlxQuadTree._min || this.height > flixel_system_FlxQuadTree._min;
		this._northWestTree = null;
		this._northEastTree = null;
		this._southEastTree = null;
		this._southWestTree = null;
		this._leftEdge = this.x;
		this._rightEdge = this.x + this.width;
		this._halfWidth = this.width / 2;
		this._midpointX = this._leftEdge + this._halfWidth;
		this._topEdge = this.y;
		this._bottomEdge = this.y + this.height;
		this._halfHeight = this.height / 2;
		this._midpointY = this._topEdge + this._halfHeight;
	}
	,destroy: function() {
		this._headA = flixel_util_FlxDestroyUtil.destroy(this._headA);
		this._headB = flixel_util_FlxDestroyUtil.destroy(this._headB);
		this._tailA = flixel_util_FlxDestroyUtil.destroy(this._tailA);
		this._tailB = flixel_util_FlxDestroyUtil.destroy(this._tailB);
		this._northWestTree = flixel_util_FlxDestroyUtil.destroy(this._northWestTree);
		this._northEastTree = flixel_util_FlxDestroyUtil.destroy(this._northEastTree);
		this._southWestTree = flixel_util_FlxDestroyUtil.destroy(this._southWestTree);
		this._southEastTree = flixel_util_FlxDestroyUtil.destroy(this._southEastTree);
		flixel_system_FlxQuadTree._object = null;
		flixel_system_FlxQuadTree._processingCallback = null;
		flixel_system_FlxQuadTree._notifyCallback = null;
		this.exists = false;
		this.next = flixel_system_FlxQuadTree._cachedTreesHead;
		flixel_system_FlxQuadTree._cachedTreesHead = this;
		flixel_system_FlxQuadTree._NUM_CACHED_QUAD_TREES++;
		flixel_util_FlxRect.prototype.destroy.call(this);
	}
	,load: function(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,ProcessCallback) {
		this.add(ObjectOrGroup1,0);
		if(ObjectOrGroup2 != null) {
			this.add(ObjectOrGroup2,1);
			flixel_system_FlxQuadTree._useBothLists = true;
		} else flixel_system_FlxQuadTree._useBothLists = false;
		flixel_system_FlxQuadTree._notifyCallback = NotifyCallback;
		flixel_system_FlxQuadTree._processingCallback = ProcessCallback;
	}
	,add: function(ObjectOrGroup,list) {
		flixel_system_FlxQuadTree._list = list;
		var group = flixel_group_FlxGroup.resolveGroup(ObjectOrGroup);
		if(group != null) {
			var i = 0;
			var basic;
			var members = group.members;
			var l = group.length;
			while(i < l) {
				basic = members[i++];
				if(basic != null && basic.exists) {
					group = flixel_group_FlxGroup.resolveGroup(basic);
					if(group != null) this.add(group,list); else {
						flixel_system_FlxQuadTree._object = js_Boot.__cast(basic , flixel_FlxObject);
						if(flixel_system_FlxQuadTree._object.exists && flixel_system_FlxQuadTree._object.allowCollisions != 0) {
							flixel_system_FlxQuadTree._objectLeftEdge = flixel_system_FlxQuadTree._object.x;
							flixel_system_FlxQuadTree._objectTopEdge = flixel_system_FlxQuadTree._object.y;
							flixel_system_FlxQuadTree._objectRightEdge = flixel_system_FlxQuadTree._object.x + flixel_system_FlxQuadTree._object.get_width();
							flixel_system_FlxQuadTree._objectBottomEdge = flixel_system_FlxQuadTree._object.y + flixel_system_FlxQuadTree._object.get_height();
							this.addObject();
						}
					}
				}
			}
		} else {
			flixel_system_FlxQuadTree._object = js_Boot.__cast(ObjectOrGroup , flixel_FlxObject);
			if(flixel_system_FlxQuadTree._object.exists && flixel_system_FlxQuadTree._object.allowCollisions != 0) {
				flixel_system_FlxQuadTree._objectLeftEdge = flixel_system_FlxQuadTree._object.x;
				flixel_system_FlxQuadTree._objectTopEdge = flixel_system_FlxQuadTree._object.y;
				flixel_system_FlxQuadTree._objectRightEdge = flixel_system_FlxQuadTree._object.x + flixel_system_FlxQuadTree._object.get_width();
				flixel_system_FlxQuadTree._objectBottomEdge = flixel_system_FlxQuadTree._object.y + flixel_system_FlxQuadTree._object.get_height();
				this.addObject();
			}
		}
	}
	,addObject: function() {
		if(!this._canSubdivide || this._leftEdge >= flixel_system_FlxQuadTree._objectLeftEdge && this._rightEdge <= flixel_system_FlxQuadTree._objectRightEdge && this._topEdge >= flixel_system_FlxQuadTree._objectTopEdge && this._bottomEdge <= flixel_system_FlxQuadTree._objectBottomEdge) {
			this.addToList();
			return;
		}
		if(flixel_system_FlxQuadTree._objectLeftEdge > this._leftEdge && flixel_system_FlxQuadTree._objectRightEdge < this._midpointX) {
			if(flixel_system_FlxQuadTree._objectTopEdge > this._topEdge && flixel_system_FlxQuadTree._objectBottomEdge < this._midpointY) {
				if(this._northWestTree == null) this._northWestTree = flixel_system_FlxQuadTree.recycle(this._leftEdge,this._topEdge,this._halfWidth,this._halfHeight,this);
				this._northWestTree.addObject();
				return;
			}
			if(flixel_system_FlxQuadTree._objectTopEdge > this._midpointY && flixel_system_FlxQuadTree._objectBottomEdge < this._bottomEdge) {
				if(this._southWestTree == null) this._southWestTree = flixel_system_FlxQuadTree.recycle(this._leftEdge,this._midpointY,this._halfWidth,this._halfHeight,this);
				this._southWestTree.addObject();
				return;
			}
		}
		if(flixel_system_FlxQuadTree._objectLeftEdge > this._midpointX && flixel_system_FlxQuadTree._objectRightEdge < this._rightEdge) {
			if(flixel_system_FlxQuadTree._objectTopEdge > this._topEdge && flixel_system_FlxQuadTree._objectBottomEdge < this._midpointY) {
				if(this._northEastTree == null) this._northEastTree = flixel_system_FlxQuadTree.recycle(this._midpointX,this._topEdge,this._halfWidth,this._halfHeight,this);
				this._northEastTree.addObject();
				return;
			}
			if(flixel_system_FlxQuadTree._objectTopEdge > this._midpointY && flixel_system_FlxQuadTree._objectBottomEdge < this._bottomEdge) {
				if(this._southEastTree == null) this._southEastTree = flixel_system_FlxQuadTree.recycle(this._midpointX,this._midpointY,this._halfWidth,this._halfHeight,this);
				this._southEastTree.addObject();
				return;
			}
		}
		if(flixel_system_FlxQuadTree._objectRightEdge > this._leftEdge && flixel_system_FlxQuadTree._objectLeftEdge < this._midpointX && flixel_system_FlxQuadTree._objectBottomEdge > this._topEdge && flixel_system_FlxQuadTree._objectTopEdge < this._midpointY) {
			if(this._northWestTree == null) this._northWestTree = flixel_system_FlxQuadTree.recycle(this._leftEdge,this._topEdge,this._halfWidth,this._halfHeight,this);
			this._northWestTree.addObject();
		}
		if(flixel_system_FlxQuadTree._objectRightEdge > this._midpointX && flixel_system_FlxQuadTree._objectLeftEdge < this._rightEdge && flixel_system_FlxQuadTree._objectBottomEdge > this._topEdge && flixel_system_FlxQuadTree._objectTopEdge < this._midpointY) {
			if(this._northEastTree == null) this._northEastTree = flixel_system_FlxQuadTree.recycle(this._midpointX,this._topEdge,this._halfWidth,this._halfHeight,this);
			this._northEastTree.addObject();
		}
		if(flixel_system_FlxQuadTree._objectRightEdge > this._midpointX && flixel_system_FlxQuadTree._objectLeftEdge < this._rightEdge && flixel_system_FlxQuadTree._objectBottomEdge > this._midpointY && flixel_system_FlxQuadTree._objectTopEdge < this._bottomEdge) {
			if(this._southEastTree == null) this._southEastTree = flixel_system_FlxQuadTree.recycle(this._midpointX,this._midpointY,this._halfWidth,this._halfHeight,this);
			this._southEastTree.addObject();
		}
		if(flixel_system_FlxQuadTree._objectRightEdge > this._leftEdge && flixel_system_FlxQuadTree._objectLeftEdge < this._midpointX && flixel_system_FlxQuadTree._objectBottomEdge > this._midpointY && flixel_system_FlxQuadTree._objectTopEdge < this._bottomEdge) {
			if(this._southWestTree == null) this._southWestTree = flixel_system_FlxQuadTree.recycle(this._leftEdge,this._midpointY,this._halfWidth,this._halfHeight,this);
			this._southWestTree.addObject();
		}
	}
	,addToList: function() {
		var ot;
		if(flixel_system_FlxQuadTree._list == 0) {
			if(this._tailA.object != null) {
				ot = this._tailA;
				this._tailA = flixel_system_FlxList.recycle();
				ot.next = this._tailA;
			}
			this._tailA.object = flixel_system_FlxQuadTree._object;
		} else {
			if(this._tailB.object != null) {
				ot = this._tailB;
				this._tailB = flixel_system_FlxList.recycle();
				ot.next = this._tailB;
			}
			this._tailB.object = flixel_system_FlxQuadTree._object;
		}
		if(!this._canSubdivide) return;
		if(this._northWestTree != null) this._northWestTree.addToList();
		if(this._northEastTree != null) this._northEastTree.addToList();
		if(this._southEastTree != null) this._southEastTree.addToList();
		if(this._southWestTree != null) this._southWestTree.addToList();
	}
	,execute: function() {
		var overlapProcessed = false;
		var iterator;
		if(this._headA.object != null) {
			iterator = this._headA;
			while(iterator != null) {
				flixel_system_FlxQuadTree._object = iterator.object;
				if(flixel_system_FlxQuadTree._useBothLists) flixel_system_FlxQuadTree._iterator = this._headB; else flixel_system_FlxQuadTree._iterator = iterator.next;
				if(flixel_system_FlxQuadTree._object != null && flixel_system_FlxQuadTree._object.exists && flixel_system_FlxQuadTree._object.allowCollisions > 0 && flixel_system_FlxQuadTree._iterator != null && flixel_system_FlxQuadTree._iterator.object != null && this.overlapNode()) overlapProcessed = true;
				iterator = iterator.next;
			}
		}
		if(this._northWestTree != null && this._northWestTree.execute()) overlapProcessed = true;
		if(this._northEastTree != null && this._northEastTree.execute()) overlapProcessed = true;
		if(this._southEastTree != null && this._southEastTree.execute()) overlapProcessed = true;
		if(this._southWestTree != null && this._southWestTree.execute()) overlapProcessed = true;
		return overlapProcessed;
	}
	,overlapNode: function() {
		if(flixel_system_FlxQuadTree._object.x < flixel_system_FlxQuadTree._object.last.x) flixel_system_FlxQuadTree._objectHullX = flixel_system_FlxQuadTree._object.x; else flixel_system_FlxQuadTree._objectHullX = flixel_system_FlxQuadTree._object.last.x;
		if(flixel_system_FlxQuadTree._object.y < flixel_system_FlxQuadTree._object.last.y) flixel_system_FlxQuadTree._objectHullY = flixel_system_FlxQuadTree._object.y; else flixel_system_FlxQuadTree._objectHullY = flixel_system_FlxQuadTree._object.last.y;
		flixel_system_FlxQuadTree._objectHullWidth = flixel_system_FlxQuadTree._object.x - flixel_system_FlxQuadTree._object.last.x;
		flixel_system_FlxQuadTree._objectHullWidth = flixel_system_FlxQuadTree._object.get_width() + (flixel_system_FlxQuadTree._objectHullWidth > 0?flixel_system_FlxQuadTree._objectHullWidth:-flixel_system_FlxQuadTree._objectHullWidth);
		flixel_system_FlxQuadTree._objectHullHeight = flixel_system_FlxQuadTree._object.y - flixel_system_FlxQuadTree._object.last.y;
		flixel_system_FlxQuadTree._objectHullHeight = flixel_system_FlxQuadTree._object.get_height() + (flixel_system_FlxQuadTree._objectHullHeight > 0?flixel_system_FlxQuadTree._objectHullHeight:-flixel_system_FlxQuadTree._objectHullHeight);
		var overlapProcessed = false;
		var checkObject;
		while(flixel_system_FlxQuadTree._iterator != null) {
			checkObject = flixel_system_FlxQuadTree._iterator.object;
			if(flixel_system_FlxQuadTree._object == checkObject || !checkObject.exists || checkObject.allowCollisions <= 0) {
				flixel_system_FlxQuadTree._iterator = flixel_system_FlxQuadTree._iterator.next;
				continue;
			}
			if(checkObject.x < checkObject.last.x) flixel_system_FlxQuadTree._checkObjectHullX = checkObject.x; else flixel_system_FlxQuadTree._checkObjectHullX = checkObject.last.x;
			if(checkObject.y < checkObject.last.y) flixel_system_FlxQuadTree._checkObjectHullY = checkObject.y; else flixel_system_FlxQuadTree._checkObjectHullY = checkObject.last.y;
			flixel_system_FlxQuadTree._checkObjectHullWidth = checkObject.x - checkObject.last.x;
			flixel_system_FlxQuadTree._checkObjectHullWidth = checkObject.get_width() + (flixel_system_FlxQuadTree._checkObjectHullWidth > 0?flixel_system_FlxQuadTree._checkObjectHullWidth:-flixel_system_FlxQuadTree._checkObjectHullWidth);
			flixel_system_FlxQuadTree._checkObjectHullHeight = checkObject.y - checkObject.last.y;
			flixel_system_FlxQuadTree._checkObjectHullHeight = checkObject.get_height() + (flixel_system_FlxQuadTree._checkObjectHullHeight > 0?flixel_system_FlxQuadTree._checkObjectHullHeight:-flixel_system_FlxQuadTree._checkObjectHullHeight);
			if(flixel_system_FlxQuadTree._objectHullX + flixel_system_FlxQuadTree._objectHullWidth > flixel_system_FlxQuadTree._checkObjectHullX && flixel_system_FlxQuadTree._objectHullX < flixel_system_FlxQuadTree._checkObjectHullX + flixel_system_FlxQuadTree._checkObjectHullWidth && flixel_system_FlxQuadTree._objectHullY + flixel_system_FlxQuadTree._objectHullHeight > flixel_system_FlxQuadTree._checkObjectHullY && flixel_system_FlxQuadTree._objectHullY < flixel_system_FlxQuadTree._checkObjectHullY + flixel_system_FlxQuadTree._checkObjectHullHeight) {
				if(flixel_system_FlxQuadTree._processingCallback == null || flixel_system_FlxQuadTree._processingCallback(flixel_system_FlxQuadTree._object,checkObject)) {
					overlapProcessed = true;
					if(flixel_system_FlxQuadTree._notifyCallback != null) flixel_system_FlxQuadTree._notifyCallback(flixel_system_FlxQuadTree._object,checkObject);
				}
			}
			if(flixel_system_FlxQuadTree._iterator != null) flixel_system_FlxQuadTree._iterator = flixel_system_FlxQuadTree._iterator.next;
		}
		return overlapProcessed;
	}
	,__class__: flixel_system_FlxQuadTree
});
var flixel_system_FlxSound = function() {
	this._alreadyPaused = false;
	this._volumeAdjust = 1.0;
	flixel_FlxBasic.call(this);
	this.reset();
};
$hxClasses["flixel.system.FlxSound"] = flixel_system_FlxSound;
flixel_system_FlxSound.__name__ = ["flixel","system","FlxSound"];
flixel_system_FlxSound.__super__ = flixel_FlxBasic;
flixel_system_FlxSound.prototype = $extend(flixel_FlxBasic.prototype,{
	x: null
	,y: null
	,persist: null
	,name: null
	,artist: null
	,amplitude: null
	,amplitudeLeft: null
	,amplitudeRight: null
	,autoDestroy: null
	,onComplete: null
	,playing: null
	,time: null
	,_sound: null
	,_channel: null
	,_transform: null
	,_paused: null
	,_volume: null
	,_volumeAdjust: null
	,_looped: null
	,_target: null
	,_radius: null
	,_proximityPan: null
	,_alreadyPaused: null
	,reset: function() {
		this.destroy();
		this.x = 0;
		this.y = 0;
		this.time = 0;
		this._paused = false;
		this._volume = 1.0;
		this._volumeAdjust = 1.0;
		this._looped = false;
		this._target = null;
		this._radius = 0;
		this._proximityPan = false;
		this.set_visible(false);
		this.amplitude = 0;
		this.amplitudeLeft = 0;
		this.amplitudeRight = 0;
		this.autoDestroy = false;
		if(this._transform == null) this._transform = new openfl_media_SoundTransform();
		this._transform.pan = 0;
	}
	,destroy: function() {
		this._transform = null;
		this.set_exists(false);
		this.set_active(false);
		this._target = null;
		this.name = null;
		this.artist = null;
		if(this._channel != null) {
			this._channel.removeEventListener(openfl_events_Event.SOUND_COMPLETE,$bind(this,this.stopped));
			this._channel.stop();
			this._channel = null;
		}
		if(this._sound != null) {
			this._sound.removeEventListener(openfl_events_Event.ID3,$bind(this,this.gotID3));
			this._sound = null;
		}
		this.onComplete = null;
		flixel_FlxBasic.prototype.destroy.call(this);
	}
	,update: function() {
		if(!(this._channel != null)) return;
		this.time = this._channel.get_position();
		var radialMultiplier = 1.0;
		var fadeMultiplier = 1.0;
		if(this._target != null) {
			radialMultiplier = flixel_util_FlxMath.getDistance(flixel_util_FlxPoint.get(this._target.x,this._target.y),flixel_util_FlxPoint.get(this.x,this.y)) / this._radius;
			if(radialMultiplier < 0) radialMultiplier = 0;
			if(radialMultiplier > 1) radialMultiplier = 1;
			radialMultiplier = 1 - radialMultiplier;
			if(this._proximityPan) {
				var d = (this.x - this._target.x) / this._radius;
				if(d < -1) d = -1; else if(d > 1) d = 1;
				this._transform.pan = d;
			}
		}
		this._volumeAdjust = radialMultiplier * fadeMultiplier;
		this.updateTransform();
		if(this._transform.volume > 0) {
			this.amplitudeLeft = this._channel.leftPeak / this._transform.volume;
			this.amplitudeRight = this._channel.rightPeak / this._transform.volume;
			this.amplitude = (this.amplitudeLeft + this.amplitudeRight) * 0.5;
		} else {
			this.amplitudeLeft = 0;
			this.amplitudeRight = 0;
			this.amplitude = 0;
		}
	}
	,kill: function() {
		flixel_FlxBasic.prototype.kill.call(this);
		this.cleanup(false);
	}
	,loadEmbedded: function(EmbeddedSound,Looped,AutoDestroy,OnComplete) {
		if(AutoDestroy == null) AutoDestroy = false;
		if(Looped == null) Looped = false;
		this.cleanup(true);
		if(js_Boot.__instanceof(EmbeddedSound,openfl_media_Sound)) this._sound = EmbeddedSound; else if(js_Boot.__instanceof(EmbeddedSound,Class)) this._sound = Type.createInstance(EmbeddedSound,[]); else if(typeof(EmbeddedSound) == "string") this._sound = openfl_Assets.getSound(EmbeddedSound);
		this._looped = Looped;
		this.autoDestroy = AutoDestroy;
		this.updateTransform();
		this.set_exists(true);
		this.onComplete = OnComplete;
		return this;
	}
	,loadStream: function(SoundURL,Looped,AutoDestroy,OnComplete) {
		if(AutoDestroy == null) AutoDestroy = false;
		if(Looped == null) Looped = false;
		this.cleanup(true);
		this._sound = new openfl_media_Sound();
		this._sound.addEventListener(openfl_events_Event.ID3,$bind(this,this.gotID3));
		this._sound.load(new openfl_net_URLRequest(SoundURL));
		this._looped = Looped;
		this.autoDestroy = AutoDestroy;
		this.updateTransform();
		this.set_exists(true);
		this.onComplete = OnComplete;
		return this;
	}
	,loadByteArray: function(Bytes,Looped,AutoDestroy,OnComplete) {
		if(AutoDestroy == null) AutoDestroy = false;
		if(Looped == null) Looped = false;
		this.cleanup(true);
		this.onComplete();
		return this;
	}
	,proximity: function(X,Y,TargetObject,Radius,Pan) {
		if(Pan == null) Pan = true;
		this.x = X;
		this.y = Y;
		this._target = TargetObject;
		this._radius = Radius;
		this._proximityPan = Pan;
		return this;
	}
	,play: function(ForceRestart) {
		if(ForceRestart == null) ForceRestart = false;
		if(!this.exists) return this;
		if(ForceRestart) this.cleanup(false,true,true); else if(this._channel != null) return this;
		if(this._paused) this.resume(); else this.startSound(0);
		return this;
	}
	,resume: function() {
		if(this._paused) this.startSound(this.time);
		return this;
	}
	,pause: function() {
		if(!(this._channel != null)) return this;
		this.time = this._channel.get_position();
		this._paused = true;
		this.cleanup(false,false,false);
		return this;
	}
	,stop: function() {
		this.cleanup(this.autoDestroy,true,true);
		return this;
	}
	,fadeOut: function(Duration,To) {
		if(To == null) To = 0;
		if(Duration == null) Duration = 1;
		flixel_tweens_FlxTween.num(this._volume,To,Duration,null,$bind(this,this.volumeTween));
		return this;
	}
	,fadeIn: function(Duration,From,To) {
		if(To == null) To = 1;
		if(From == null) From = 0;
		if(Duration == null) Duration = 1;
		flixel_tweens_FlxTween.num(From,To,Duration,null,$bind(this,this.volumeTween));
		return this;
	}
	,volumeTween: function(f) {
		this.set_volume(f);
	}
	,getActualVolume: function() {
		return this._volume * this._volumeAdjust;
	}
	,setPosition: function(X,Y) {
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		this.x = X;
		this.y = Y;
	}
	,updateTransform: function() {
		this._transform.volume = (flixel_FlxG.sound.muted?0:1) * flixel_FlxG.sound.volume * this._volume * this._volumeAdjust;
		if(this._channel != null) this._channel.set_soundTransform(this._transform);
	}
	,startSound: function(Position) {
		var numLoops;
		if(this._looped && Position == 0) numLoops = 9999; else numLoops = 0;
		this.time = Position;
		this._paused = false;
		this._channel = this._sound.play(this.time,numLoops,this._transform);
		if(this._channel != null) {
			this._channel.addEventListener(openfl_events_Event.SOUND_COMPLETE,$bind(this,this.stopped));
			this.set_active(true);
		} else {
			this.set_exists(false);
			this.set_active(false);
		}
	}
	,stopped: function(event) {
		if(this.onComplete != null) this.onComplete();
		if(this._looped) {
			this.cleanup(false);
			this.play();
		} else this.cleanup(this.autoDestroy);
	}
	,cleanup: function(destroySound,resetPosition,resetFading) {
		if(resetFading == null) resetFading = true;
		if(resetPosition == null) resetPosition = true;
		if(destroySound) {
			this.reset();
			return;
		}
		if(this._channel != null) {
			this._channel.removeEventListener(openfl_events_Event.SOUND_COMPLETE,$bind(this,this.stopped));
			this._channel.stop();
			this._channel = null;
		}
		this.set_active(false);
		if(resetPosition) {
			this.time = 0;
			this._paused = false;
		}
	}
	,gotID3: function(event) {
		flixel_FlxG.log.advanced("Got ID3 info.",flixel_system_debug_LogStyle.NOTICE);
		this.name = this._sound.get_id3().songName;
		this.artist = this._sound.get_id3().artist;
		this._sound.removeEventListener(openfl_events_Event.ID3,$bind(this,this.gotID3));
	}
	,onFocus: function() {
		if(!this._alreadyPaused) this.resume();
	}
	,onFocusLost: function() {
		this._alreadyPaused = this._paused;
		this.pause();
	}
	,get_playing: function() {
		return this._channel != null;
	}
	,get_volume: function() {
		return this._volume;
	}
	,set_volume: function(Volume) {
		this._volume = Volume;
		if(this._volume < 0) this._volume = 0; else if(this._volume > 1) this._volume = 1;
		this.updateTransform();
		return Volume;
	}
	,get_pan: function() {
		return this._transform.pan;
	}
	,set_pan: function(pan) {
		return this._transform.pan = pan;
	}
	,__class__: flixel_system_FlxSound
	,__properties__: $extend(flixel_FlxBasic.prototype.__properties__,{set_volume:"set_volume",get_volume:"get_volume",get_playing:"get_playing",set_pan:"set_pan",get_pan:"get_pan"})
});
var flixel_system_FlxSplash = function(MaxSize) {
	this._curPart = 0;
	flixel_FlxState.call(this,MaxSize);
};
$hxClasses["flixel.system.FlxSplash"] = flixel_system_FlxSplash;
flixel_system_FlxSplash.__name__ = ["flixel","system","FlxSplash"];
flixel_system_FlxSplash.nextState = null;
flixel_system_FlxSplash.__super__ = flixel_FlxState;
flixel_system_FlxSplash.prototype = $extend(flixel_FlxState.prototype,{
	_sprite: null
	,_gfx: null
	,_text: null
	,_times: null
	,_colors: null
	,_functions: null
	,_curPart: null
	,_cachedBgColor: null
	,_cachedTimestep: null
	,_cachedAutoPause: null
	,create: function() {
		this._cachedBgColor = flixel_FlxG.cameras.get_bgColor();
		flixel_FlxG.cameras.set_bgColor(-16777216);
		this._cachedTimestep = flixel_FlxG.fixedTimestep;
		flixel_FlxG.fixedTimestep = false;
		this._cachedAutoPause = flixel_FlxG.autoPause;
		flixel_FlxG.autoPause = false;
		flixel_FlxG.keys.enabled = false;
		this._times = [0.041,0.184,0.334,0.495,0.636];
		this._colors = [47394,16761138,16066382,3555839,314875];
		this._functions = [$bind(this,this.drawGreen),$bind(this,this.drawYellow),$bind(this,this.drawRed),$bind(this,this.drawBlue),$bind(this,this.drawLightBlue)];
		var _g = 0;
		var _g1 = this._times;
		while(_g < _g1.length) {
			var time = _g1[_g];
			++_g;
			new flixel_util_FlxTimer(time,$bind(this,this.timerCallback));
		}
		var stageWidth = openfl_Lib.current.stage.stageWidth;
		var stageHeight = openfl_Lib.current.stage.stageHeight;
		this._sprite = new openfl_display_Sprite();
		openfl_Lib.current.stage.addChild(this._sprite);
		this._gfx = this._sprite.get_graphics();
		this._text = new openfl_text_TextField();
		this._text.set_selectable(false);
		this._text.set_embedFonts(true);
		var dtf = new openfl_text_TextFormat(flixel_system_FlxAssets.FONT_DEFAULT,16,16777215);
		dtf.align = openfl_text_TextFormatAlign.CENTER;
		this._text.set_defaultTextFormat(dtf);
		this._text.set_text("HaxeFlixel");
		openfl_Lib.current.stage.addChild(this._text);
		this.onResize(stageWidth,stageHeight);
		flixel_FlxG.sound.load(flixel_system_FlxAssets.getSound("../assets/sounds/flixel")).play();
	}
	,destroy: function() {
		this._sprite = null;
		this._gfx = null;
		this._text = null;
		this._times = null;
		this._colors = null;
		this._functions = null;
		flixel_FlxState.prototype.destroy.call(this);
	}
	,onResize: function(Width,Height) {
		flixel_FlxState.prototype.onResize.call(this,Width,Height);
		this._sprite.set_x(Width / 2);
		this._sprite.set_y(Height / 2 - 20 * flixel_FlxG.game.get_scaleY());
		this._text.set_width(Width / flixel_FlxG.game.get_scaleX());
		this._text.set_x(0);
		this._text.set_y(this._sprite.get_y() + 80 * flixel_FlxG.game.get_scaleY());
		this._sprite.set_scaleX(this._text.set_scaleX(flixel_FlxG.game.get_scaleX()));
		this._sprite.set_scaleY(this._text.set_scaleY(flixel_FlxG.game.get_scaleY()));
	}
	,timerCallback: function(Timer) {
		this._functions[this._curPart]();
		this._text.set_textColor(this._colors[this._curPart]);
		this._text.set_text("HaxeFlixel");
		this._curPart++;
		if(this._curPart == 5) {
			flixel_tweens_FlxTween.tween(this._sprite,{ alpha : 0},3.0,{ ease : flixel_tweens_FlxEase.quadOut, complete : $bind(this,this.onComplete)});
			flixel_tweens_FlxTween.tween(this._text,{ alpha : 0},3.0,{ ease : flixel_tweens_FlxEase.quadOut});
		}
	}
	,drawGreen: function() {
		this._gfx.beginFill(47394);
		this._gfx.moveTo(0,-37);
		this._gfx.lineTo(1,-37);
		this._gfx.lineTo(37,0);
		this._gfx.lineTo(37,1);
		this._gfx.lineTo(1,37);
		this._gfx.lineTo(0,37);
		this._gfx.lineTo(-37,1);
		this._gfx.lineTo(-37,0);
		this._gfx.lineTo(0,-37);
		this._gfx.endFill();
	}
	,drawYellow: function() {
		this._gfx.beginFill(16761138);
		this._gfx.moveTo(-50,-50);
		this._gfx.lineTo(-25,-50);
		this._gfx.lineTo(0,-37);
		this._gfx.lineTo(-37,0);
		this._gfx.lineTo(-50,-25);
		this._gfx.lineTo(-50,-50);
		this._gfx.endFill();
	}
	,drawRed: function() {
		this._gfx.beginFill(16066382);
		this._gfx.moveTo(50,-50);
		this._gfx.lineTo(25,-50);
		this._gfx.lineTo(1,-37);
		this._gfx.lineTo(37,0);
		this._gfx.lineTo(50,-25);
		this._gfx.lineTo(50,-50);
		this._gfx.endFill();
	}
	,drawBlue: function() {
		this._gfx.beginFill(3555839);
		this._gfx.moveTo(-50,50);
		this._gfx.lineTo(-25,50);
		this._gfx.lineTo(0,37);
		this._gfx.lineTo(-37,1);
		this._gfx.lineTo(-50,25);
		this._gfx.lineTo(-50,50);
		this._gfx.endFill();
	}
	,drawLightBlue: function() {
		this._gfx.beginFill(314875);
		this._gfx.moveTo(50,50);
		this._gfx.lineTo(25,50);
		this._gfx.lineTo(1,37);
		this._gfx.lineTo(37,1);
		this._gfx.lineTo(50,25);
		this._gfx.lineTo(50,50);
		this._gfx.endFill();
	}
	,onComplete: function(Tween) {
		flixel_FlxG.cameras.set_bgColor(this._cachedBgColor);
		flixel_FlxG.fixedTimestep = this._cachedTimestep;
		flixel_FlxG.autoPause = this._cachedAutoPause;
		flixel_FlxG.keys.enabled = true;
		openfl_Lib.current.stage.removeChild(this._sprite);
		openfl_Lib.current.stage.removeChild(this._text);
		flixel_FlxG.switchState(Type.createInstance(flixel_system_FlxSplash.nextState,[]));
		flixel_FlxG.game._gameJustStarted = true;
	}
	,__class__: flixel_system_FlxSplash
});
var flixel_system_debug_Window = function(Title,Icon,Width,Height,Resizable,Bounds,Closable) {
	if(Closable == null) Closable = false;
	if(Resizable == null) Resizable = true;
	if(Height == null) Height = 0;
	if(Width == null) Width = 0;
	openfl_display_Sprite.call(this);
	this.minSize = new openfl_geom_Point(50,30);
	this._width = Std["int"](Math.abs(Width));
	this._height = Std["int"](Math.abs(Height));
	this.updateBounds(Bounds);
	this._drag = new openfl_geom_Point();
	this._resizable = Resizable;
	this._shadow = new openfl_display_Bitmap(new openfl_display_BitmapData(1,2,true,-16777216));
	this._background = new openfl_display_Bitmap(new openfl_display_BitmapData(1,1,true,-580952225));
	this._header = new openfl_display_Bitmap(new openfl_display_BitmapData(1,15,true,-1157627904));
	this._background.set_y(this._header.get_height());
	this._title = new openfl_text_TextField();
	this._title.set_x(2);
	this._title.set_y(-1);
	this._title.set_alpha(0.8);
	this._title.set_height(20);
	this._title.set_selectable(false);
	this._title.set_multiline(false);
	this._title.set_embedFonts(true);
	this._title.set_defaultTextFormat(new openfl_text_TextFormat(flixel_system_FlxAssets.FONT_DEBUGGER,12,16777215));
	this._title.set_text(Title);
	this.addChild(this._shadow);
	this.addChild(this._background);
	this.addChild(this._header);
	this.addChild(this._title);
	if(Icon != null) {
		var _icon = new openfl_display_Bitmap(Icon);
		_icon.set_x(5);
		_icon.set_y(2);
		_icon.set_alpha(0.8);
		this._title.set_x(_icon.get_x() + _icon.get_width() + 2);
		this.addChild(_icon);
	}
	if(this._resizable) {
		this._handle = new openfl_display_Bitmap(new flixel_system_debug__$Window_GraphicWindowHandle(0,0));
		this.addChild(this._handle);
	}
	if(Closable) {
		this._closeButton = new flixel_system_ui_FlxSystemButton(new flixel_system_debug__$Window_GraphicCloseButton(0,0),$bind(this,this.close));
		this._closeButton.set_alpha(0.8);
		this.addChild(this._closeButton);
	} else {
		this._id = flixel_system_debug_Window.WINDOW_AMOUNT;
		this.loadSaveData();
		flixel_system_debug_Window.WINDOW_AMOUNT++;
	}
	if(this._width != 0 || this._height != 0) this.updateSize();
	this.bound();
	this.addEventListener(openfl_events_Event.ENTER_FRAME,$bind(this,this.init));
};
$hxClasses["flixel.system.debug.Window"] = flixel_system_debug_Window;
flixel_system_debug_Window.__name__ = ["flixel","system","debug","Window"];
flixel_system_debug_Window.__super__ = openfl_display_Sprite;
flixel_system_debug_Window.prototype = $extend(openfl_display_Sprite.prototype,{
	minSize: null
	,maxSize: null
	,toggleButton: null
	,_width: null
	,_height: null
	,_bounds: null
	,_background: null
	,_header: null
	,_shadow: null
	,_title: null
	,_handle: null
	,_closeButton: null
	,_overHeader: null
	,_overHandle: null
	,_drag: null
	,_dragging: null
	,_resizing: null
	,_resizable: null
	,_id: null
	,destroy: function() {
		this.minSize = null;
		this.maxSize = null;
		this._bounds = null;
		if(this._shadow != null) this.removeChild(this._shadow);
		this._shadow = null;
		if(this._background != null) this.removeChild(this._background);
		this._background = null;
		if(this._header != null) this.removeChild(this._header);
		this._header = null;
		if(this._title != null) this.removeChild(this._title);
		this._title = null;
		if(this._handle != null) this.removeChild(this._handle);
		this._handle = null;
		this._drag = null;
		this._closeButton = flixel_util_FlxDestroyUtil.destroy(this._closeButton);
		var stage = openfl_Lib.current.stage;
		if(stage.hasEventListener(openfl_events_MouseEvent.MOUSE_MOVE)) stage.removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.onMouseMove));
		if(this.hasEventListener(openfl_events_MouseEvent.MOUSE_DOWN)) this.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseDown));
		if(stage.hasEventListener(openfl_events_MouseEvent.MOUSE_UP)) stage.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onMouseUp));
	}
	,resize: function(Width,Height) {
		this._width = Std["int"](Math.abs(Width));
		this._height = Std["int"](Math.abs(Height));
		this.updateSize();
	}
	,reposition: function(X,Y) {
		this.set_x(X);
		this.set_y(Y);
		this.bound();
	}
	,updateBounds: function(Bounds) {
		this._bounds = Bounds;
		if(this._bounds != null) this.maxSize = new openfl_geom_Point(this._bounds.width,this._bounds.height); else this.maxSize = new openfl_geom_Point(1.79e+308,1.79e+308);
	}
	,setVisible: function(Value) {
		this.set_visible(Value);
		flixel_FlxG.save.data.windowSettings[this._id] = this.get_visible();
		flixel_FlxG.save.flush();
		if(this.toggleButton != null) this.toggleButton.set_toggled(!this.get_visible());
		if(this.get_visible()) this.parent.addChild(this);
	}
	,toggleVisible: function() {
		this.setVisible(!this.get_visible());
	}
	,putOnTop: function() {
		this.parent.addChild(this);
	}
	,loadSaveData: function() {
		if(flixel_FlxG.save.data.windowSettings != null) this.set_visible(flixel_FlxG.save.data.windowSettings[this._id]); else {
			this.initSaveData();
			this.loadSaveData();
		}
	}
	,initSaveData: function() {
		var settings = [];
		var _g = 0;
		while(_g < 10) {
			var i = _g++;
			settings[i] = true;
		}
		flixel_FlxG.save.data.windowSettings = settings;
		flixel_FlxG.save.flush();
	}
	,update: function() {
	}
	,init: function(E) {
		if(this.stage == null) return;
		this.removeEventListener(openfl_events_Event.ENTER_FRAME,$bind(this,this.init));
		this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.onMouseMove));
		this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onMouseUp));
		this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseDown));
	}
	,onMouseMove: function(E) {
		var mouseX;
		if(this.get_mouseX() < 0) mouseX = 0; else mouseX = this.get_mouseX();
		var mouseY;
		if(this.get_mouseY() < 0) mouseY = 0; else mouseY = this.get_mouseY();
		if(!this.parent.get_visible()) {
			this._overHandle = this._overHeader = false;
			return;
		}
		if(this._dragging) {
			this._overHeader = true;
			this.reposition(this.parent.get_mouseX() - this._drag.x,this.parent.get_mouseY() - this._drag.y);
		} else if(this._resizing) {
			this._overHandle = true;
			this.resize(mouseX - this._drag.x,mouseY - this._drag.y);
		} else if(mouseX >= 0 && mouseX <= this._width && mouseY >= 0 && mouseY <= this._height) {
			this._overHeader = mouseX <= this._header.get_width() && mouseY <= this._header.get_height();
			if(this._resizable) this._overHandle = mouseX >= this._width - this._handle.get_width() && mouseY >= this._height - this._handle.get_height();
		} else this._overHandle = this._overHeader = false;
	}
	,onMouseDown: function(E) {
		if(this._overHeader) {
			this.parent.addChild(this);
			this._dragging = true;
			this._drag.x = this.get_mouseX();
			this._drag.y = this.get_mouseY();
		} else if(this._overHandle) {
			this.parent.addChild(this);
			this._resizing = true;
			this._drag.x = this._width - this.get_mouseX();
			this._drag.y = this._height - this.get_mouseY();
		}
	}
	,onMouseUp: function(E) {
		this._dragging = false;
		this._resizing = false;
	}
	,bound: function() {
		if(this._bounds != null) {
			this.set_x(flixel_util_FlxMath.bound(this.get_x(),this._bounds.get_left(),this._bounds.get_right() - this._width));
			this.set_y(flixel_util_FlxMath.bound(this.get_y(),this._bounds.get_top(),this._bounds.get_bottom() - this._height));
		}
	}
	,updateSize: function() {
		this._width = Std["int"](flixel_util_FlxMath.bound(this._width,this.minSize.x,this.maxSize.x));
		this._height = Std["int"](flixel_util_FlxMath.bound(this._height,this.minSize.y,this.maxSize.y));
		this._header.set_scaleX(this._width);
		this._background.set_scaleX(this._width);
		this._background.set_scaleY(this._height - this._header.get_height());
		this._shadow.set_scaleX(this._width);
		this._shadow.set_y(this._height);
		this._title.set_width(this._width - 4);
		if(this._resizable) {
			this._handle.set_x(this._width - this._handle.get_width());
			this._handle.set_y(this._height - this._handle.get_height());
		}
		if(this._closeButton != null) {
			this._closeButton.set_x(this._width - this._closeButton.get_width() - 3);
			this._closeButton.set_y(3);
		}
	}
	,close: function() {
		this.destroy();
		flixel_FlxG.game["debugger"].removeWindow(this);
	}
	,__class__: flixel_system_debug_Window
});
var flixel_system_debug_BitmapLog = function() {
	this._middleMouseDown = false;
	this._matrix = new openfl_geom_Matrix();
	this._curMouseOffset = flixel_util_FlxPoint.get(null,null);
	this._lastMousePos = flixel_util_FlxPoint.get(null,null);
	this._point = flixel_util_FlxPoint.get(null,null);
	this._curIndex = 0;
	this._entries = [];
	this.zoom = 1;
	flixel_system_debug_Window.call(this,"bitmapLog",new flixel_system_debug_GraphicBitmapLog(0,0));
	this.minSize.x = 165;
	this.minSize.y = 31;
	this._canvasBitmap = new openfl_display_Bitmap(new openfl_display_BitmapData(Std["int"](this.get_width()),Std["int"](this.get_height() - 15),true,0));
	this._canvasBitmap.set_x(0);
	this._canvasBitmap.set_y(15);
	this.addChild(this._canvasBitmap);
	this.createHeaderUI();
	this.createFooterUI();
	this.setVisible(false);
	this.addEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this.onMouseWheel));
	this.addEventListener(openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN,$bind(this,this.onMiddleDown));
	this.addEventListener(openfl_events_MouseEvent.MIDDLE_MOUSE_UP,$bind(this,this.onMiddleUp));
	flixel_FlxG.signals.stateSwitched.add($bind(this,this.clear));
	this.removeChild(this._handle);
	this.addChild(this._handle);
	this.removeChild(this._shadow);
};
$hxClasses["flixel.system.debug.BitmapLog"] = flixel_system_debug_BitmapLog;
flixel_system_debug_BitmapLog.__name__ = ["flixel","system","debug","BitmapLog"];
flixel_system_debug_BitmapLog.__super__ = flixel_system_debug_Window;
flixel_system_debug_BitmapLog.prototype = $extend(flixel_system_debug_Window.prototype,{
	zoom: null
	,_canvasBitmap: null
	,_entries: null
	,_curIndex: null
	,_point: null
	,_lastMousePos: null
	,_curMouseOffset: null
	,_matrix: null
	,_buttonLeft: null
	,_buttonText: null
	,_buttonRight: null
	,_counterText: null
	,_dimensionsText: null
	,_ui: null
	,_middleMouseDown: null
	,_footer: null
	,_footerText: null
	,createHeaderUI: function() {
		var _g = this;
		this._ui = new openfl_display_Sprite();
		this._ui.set_y(2);
		this._buttonLeft = new flixel_system_ui_FlxSystemButton(new flixel_system_debug_GraphicArrowLeft(0,0),$bind(this,this.previous));
		this._dimensionsText = flixel_system_debug_DebuggerUtil.createTextField();
		this._counterText = flixel_system_debug_DebuggerUtil.createTextField(0,-3);
		this._counterText.set_text("0/0");
		this._buttonText = new flixel_system_ui_FlxSystemButton(null,function() {
			_g.set_zoom(1);
			_g._curMouseOffset.set();
			_g.refreshCanvas();
		});
		this._buttonText.addChild(this._counterText);
		this._buttonRight = new flixel_system_ui_FlxSystemButton(new flixel_system_debug_GraphicArrowRight(0,0),$bind(this,this.next));
		this._buttonRight.set_x(60);
		this._ui.addChild(this._buttonLeft);
		this._ui.addChild(this._buttonText);
		this._ui.addChild(this._buttonRight);
		this.addChild(this._ui);
		this.addChild(this._dimensionsText);
	}
	,createFooterUI: function() {
		this._footer = new openfl_display_Bitmap(new openfl_display_BitmapData(1,15,true,-1157627904));
		this._footer.set_alpha(0.8);
		this.addChild(this._footer);
		this._footerText = flixel_system_debug_DebuggerUtil.createTextField();
		this.addChild(this._footerText);
	}
	,destroy: function() {
		flixel_system_debug_Window.prototype.destroy.call(this);
		this.clear();
		this.removeChild(this._canvasBitmap);
		flixel_util_FlxDestroyUtil.dispose(this._canvasBitmap.bitmapData);
		this._canvasBitmap.bitmapData = null;
		this._canvasBitmap = null;
		this._entries = null;
		this.removeEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this.onMouseWheel));
		this.removeEventListener(openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN,$bind(this,this.onMiddleDown));
		this.removeEventListener(openfl_events_MouseEvent.MIDDLE_MOUSE_UP,$bind(this,this.onMiddleUp));
		flixel_FlxG.signals.stateSwitched.remove($bind(this,this.clear));
	}
	,update: function() {
		if(this._middleMouseDown) {
			var delta = flixel_util_FlxPoint.get(this.get_mouseX(),this.get_mouseY());
			this._curMouseOffset.addPoint(delta.subtractPoint(this._lastMousePos));
			this.refreshCanvas();
			this._lastMousePos.set(this.get_mouseX(),this.get_mouseY());
		}
	}
	,updateSize: function() {
		flixel_system_debug_Window.prototype.updateSize.call(this);
		this._background.set_scaleY(this._height - this._header.get_height() * 2);
	}
	,resize: function(Width,Height) {
		flixel_system_debug_Window.prototype.resize.call(this,Width,Height);
		this._canvasBitmap.bitmapData = flixel_util_FlxDestroyUtil.dispose(this._canvasBitmap.bitmapData);
		this._canvasBitmap.bitmapData = new openfl_display_BitmapData(Std["int"](this._width - this._canvasBitmap.get_x()),Std["int"](this._height - this._canvasBitmap.get_y() - this._footer.get_height()),true,0);
		this.refreshCanvas(this._curIndex);
		this._ui.set_x(this._header.get_width() - this._ui.get_width() + 43);
		this._footer.set_width(this._width);
		this._footer.set_y(this._height - this._footer.get_height());
		this.resizeTexts();
	}
	,resizeTexts: function() {
		this._dimensionsText.set_x(this._header.get_width() / 2 - this._dimensionsText.get_textWidth() / 2);
		this._dimensionsText.set_visible(this._width > 200);
		this._footerText.set_y(this._height - this._footer.get_height());
		this._footerText.set_x(this._width / 2 - this._footerText.get_textWidth() / 2);
		this._footerText.set_width(this._footer.get_width());
		if(this._footerText.get_x() < 0) this._footerText.set_x(0);
		var start = this._buttonLeft.get_x() + this._buttonLeft.get_width();
		var range = this._buttonRight.get_x() - start;
		this._buttonText.set_x(33 - this._counterText.get_textWidth() / 2);
	}
	,next: function() {
		this.set_zoom(1);
		this._curMouseOffset.set();
		this.refreshCanvas(this._curIndex + 1);
	}
	,previous: function() {
		this.set_zoom(1);
		this._curMouseOffset.set();
		this.refreshCanvas(this._curIndex - 1);
	}
	,resetSettings: function() {
		this.set_zoom(1);
		this._curMouseOffset.set();
	}
	,add: function(bmp,name) {
		if(name == null) name = "";
		if(bmp == null) return false;
		this.setVisible(true);
		this._entries.push({ bitmap : bmp.clone(), name : name});
		return this.refreshCanvas();
	}
	,clearAt: function(Index) {
		if(Index == null) Index = -1;
		if(Index == -1) Index = this._entries.length - 1;
		flixel_util_FlxDestroyUtil.dispose(this._entries[Index].bitmap);
		this._entries[Index] = null;
		this._entries.splice(Index,1);
		if(this._curIndex > this._entries.length - 1) this._curIndex = this._entries.length - 1;
		this.refreshCanvas(this._curIndex);
	}
	,clear: function() {
		var _g1 = 0;
		var _g = this._entries.length;
		while(_g1 < _g) {
			var i = _g1++;
			flixel_util_FlxDestroyUtil.dispose(this._entries[i].bitmap);
			this._entries[i] = null;
		}
		this._entries = [];
		this._canvasBitmap.bitmapData.fillRect(this._canvasBitmap.bitmapData.rect,0);
		this._dimensionsText.set_text("");
		this._counterText.set_text("0/0");
		this._footerText.set_text("");
	}
	,refreshCanvas: function(Index) {
		if(this._entries == null || this._entries.length <= 0) {
			this._curIndex = 0;
			return false;
		}
		if(Index == null) Index = this._curIndex;
		this._canvasBitmap.bitmapData.fillRect(this._canvasBitmap.bitmapData.rect,0);
		if(Index < 0) Index = this._entries.length - 1; else if(Index >= this._entries.length) Index = 0;
		this._curIndex = Index;
		this._point.set_x(this._canvasBitmap.bitmapData.width / 2 - this._entries[this._curIndex].bitmap.width * this.zoom / 2);
		this._point.set_y(this._canvasBitmap.bitmapData.height / 2 - this._entries[this._curIndex].bitmap.height * this.zoom / 2);
		this._point.addPoint(this._curMouseOffset);
		this._matrix.identity();
		this._matrix.scale(this.zoom,this.zoom);
		this._matrix.translate(this._point.x,this._point.y);
		this._canvasBitmap.bitmapData.draw(this._entries[this._curIndex].bitmap,this._matrix,null,null,this._canvasBitmap.bitmapData.rect,false);
		this.drawBoundingBox(this._entries[this._curIndex].bitmap);
		this._canvasBitmap.bitmapData.draw(flixel_util_FlxSpriteUtil.flashGfxSprite,this._matrix,null,null,this._canvasBitmap.bitmapData.rect,false);
		this.refreshTexts();
		return true;
	}
	,refreshTexts: function() {
		this._dimensionsText.set_text(this._entries[this._curIndex].bitmap.width + "x" + this._entries[this._curIndex].bitmap.height);
		this._counterText.set_text("" + (this._curIndex + 1) + "/" + this._entries.length);
		var entryName = this._entries[this._curIndex].name;
		var name;
		if(entryName == "") name = ""; else name = "\"" + entryName + "\" | ";
		this._footerText.set_text(name + flixel_util_FlxStringUtil.formatBytes(flixel_util_FlxBitmapUtil.getMemorySize(this._entries[this._curIndex].bitmap)));
		this.resizeTexts();
	}
	,drawBoundingBox: function(bitmap) {
		var gfx = flixel_util_FlxSpriteUtil.flashGfx;
		gfx.clear();
		gfx.lineStyle(1,-65536,0.75,false,openfl_display_LineScaleMode.NONE);
		gfx.drawRect(0,0,bitmap.width,bitmap.height);
	}
	,onMouseWheel: function(e) {
		var _g = this;
		_g.set_zoom(_g.zoom + (e.delta < 0?-1:1) * 0.25 * this.zoom);
		this.refreshCanvas();
	}
	,onMiddleDown: function(e) {
		this._middleMouseDown = true;
		this._lastMousePos.set(this.get_mouseX(),this.get_mouseY());
	}
	,onMiddleUp: function(e) {
		this._middleMouseDown = false;
	}
	,set_zoom: function(Value) {
		if(Value < 0) Value = 0;
		return this.zoom = Value;
	}
	,get__canvas: function() {
		return this._canvasBitmap.bitmapData;
	}
	,get__curEntry: function() {
		return this._entries[this._curIndex];
	}
	,get__curBitmap: function() {
		return this._entries[this._curIndex].bitmap;
	}
	,__class__: flixel_system_debug_BitmapLog
	,__properties__: $extend(flixel_system_debug_Window.prototype.__properties__,{get__curBitmap:"get__curBitmap",get__curEntry:"get__curEntry",get__canvas:"get__canvas",set_zoom:"set_zoom"})
});
var flixel_system_debug_Console = function() {
	this._historyIndex = 0;
	flixel_system_debug_Window.call(this,"console",new flixel_system_debug_GraphicConsole(0,0),0,0,false);
	this.commands = [];
	this.registeredObjects = new haxe_ds_StringMap();
	this.registeredFunctions = new haxe_ds_StringMap();
	this.objectStack = [];
	this.cmdHistory = [];
	if(flixel_FlxG.save.data.history != null) {
		this.cmdHistory = flixel_FlxG.save.data.history;
		this._historyIndex = this.cmdHistory.length;
	} else {
		this.cmdHistory = [];
		flixel_FlxG.save.data.history = this.cmdHistory;
	}
	this._input = new openfl_text_TextField();
	this._input.set_type(openfl_text_TextFieldType.INPUT);
	this._input.set_embedFonts(true);
	this._input.set_defaultTextFormat(new openfl_text_TextFormat(flixel_system_FlxAssets.FONT_DEBUGGER,13,16777215,false,false,false));
	this._input.set_text("(Click here / press [Tab] to enter command. Type 'help' for help.)");
	this._input.set_width(this._width - 4);
	this._input.set_height(this._height - 15);
	this._input.set_x(2);
	this._input.set_y(15);
	this.addChild(this._input);
	this._input.addEventListener(openfl_events_FocusEvent.FOCUS_IN,$bind(this,this.onFocus));
	this._input.addEventListener(openfl_events_FocusEvent.FOCUS_OUT,$bind(this,this.onFocusLost));
	this._input.addEventListener(openfl_events_KeyboardEvent.KEY_DOWN,$bind(this,this.onKeyPress));
	new flixel_system_debug_ConsoleCommands(this);
};
$hxClasses["flixel.system.debug.Console"] = flixel_system_debug_Console;
flixel_system_debug_Console.__name__ = ["flixel","system","debug","Console"];
flixel_system_debug_Console.__super__ = flixel_system_debug_Window;
flixel_system_debug_Console.prototype = $extend(flixel_system_debug_Window.prototype,{
	registeredObjects: null
	,registeredFunctions: null
	,objectStack: null
	,cmdHistory: null
	,commands: null
	,_historyIndex: null
	,_input: null
	,onFocus: function(e) {
		flixel_FlxG.keys.enabled = false;
		if(this._input.get_text() == "(Click here / press [Tab] to enter command. Type 'help' for help.)") this._input.set_text("");
	}
	,onFocusLost: function(e) {
		flixel_FlxG.keys.enabled = true;
		if(this._input.get_text() == "") this._input.set_text("(Click here / press [Tab] to enter command. Type 'help' for help.)");
	}
	,onKeyPress: function(e) {
		if(e.keyCode == 32 && this._input.get_text() == " ") this._input.set_text("");
		if(e.keyCode == 13 && this._input.get_text() != "") this.processCommand(); else if(e.keyCode == 27) openfl_Lib.current.stage.set_focus(null); else if(e.keyCode == 46) this._input.set_text(""); else if(e.keyCode == 38) {
			if(this.cmdHistory.length == 0) return;
			this._input.set_text((function($this) {
				var $r;
				if($this._historyIndex > 0) $this._historyIndex--;
				$r = $this.cmdHistory[$this._historyIndex];
				return $r;
			}(this)));
			this.addEventListener(openfl_events_Event.RENDER,$bind(this,this.overrideDefaultSelection));
			openfl_Lib.current.stage.invalidate();
		} else if(e.keyCode == 40) {
			if(this.cmdHistory.length == 0) return;
			this._input.set_text((function($this) {
				var $r;
				if($this._historyIndex < $this.cmdHistory.length) $this._historyIndex++;
				$r = $this.cmdHistory[$this._historyIndex] != null?$this.cmdHistory[$this._historyIndex]:"";
				return $r;
			}(this)));
		}
	}
	,processCommand: function() {
		var args = StringTools.rtrim(this._input.get_text()).split(" ");
		var alias = args.shift();
		var command = flixel_system_debug_ConsoleUtil.findCommand(alias,this.commands);
		if(command != null) {
			var func = command.processFunction;
			if((function($this) {
				var $r;
				if($this._historyIndex > 0) $this._historyIndex--;
				$r = $this.cmdHistory[$this._historyIndex];
				return $r;
			}(this)) != this._input.get_text()) {
				this.cmdHistory.push(this._input.get_text());
				flixel_FlxG.save.flush();
				if(this.cmdHistory.length > 25) this.cmdHistory.shift();
			}
			this._historyIndex = this.cmdHistory.length;
			if(Reflect.isFunction(func)) {
				if(command.paramCutoff > 0) {
					var start = command.paramCutoff - 1;
					args[start] = args.slice(start,args.length);
					args = args.slice(0,command.paramCutoff);
				}
				flixel_system_debug_ConsoleUtil.callFunction(func,args);
			}
			this._input.set_text("");
		} else flixel_FlxG.log.advanced("Console: Invalid command: '" + alias + "'",flixel_system_debug_LogStyle.ERROR,true);
	}
	,overrideDefaultSelection: function(e) {
		this._input.setSelection(this._input.get_text().length,this._input.get_text().length);
		this.removeEventListener(openfl_events_Event.RENDER,$bind(this,this.overrideDefaultSelection));
	}
	,getPreviousCommand: function() {
		if(this._historyIndex > 0) this._historyIndex--;
		return this.cmdHistory[this._historyIndex];
	}
	,getNextCommand: function() {
		if(this._historyIndex < this.cmdHistory.length) this._historyIndex++;
		if(this.cmdHistory[this._historyIndex] != null) return this.cmdHistory[this._historyIndex]; else return "";
	}
	,registerObject: function(ObjectAlias,AnyObject) {
		var value = AnyObject;
		this.registeredObjects.set(ObjectAlias,value);
	}
	,registerFunction: function(FunctionAlias,Function) {
		var value = Function;
		this.registeredFunctions.set(FunctionAlias,value);
	}
	,addCommand: function(Aliases,ProcessFunction,Help,ParamHelp,NumParams,ParamCutoff) {
		if(ParamCutoff == null) ParamCutoff = -1;
		if(NumParams == null) NumParams = 0;
		this.commands.push({ aliases : Aliases, processFunction : ProcessFunction, help : Help, paramHelp : ParamHelp, numParams : NumParams, paramCutoff : ParamCutoff});
	}
	,destroy: function() {
		flixel_system_debug_Window.prototype.destroy.call(this);
		this._input.removeEventListener(openfl_events_FocusEvent.FOCUS_IN,$bind(this,this.onFocus));
		this._input.removeEventListener(openfl_events_FocusEvent.FOCUS_OUT,$bind(this,this.onFocusLost));
		this._input.removeEventListener(openfl_events_KeyboardEvent.KEY_DOWN,$bind(this,this.onKeyPress));
		if(this._input != null) {
			this.removeChild(this._input);
			this._input = null;
		}
		this.commands = null;
		this.registeredObjects = null;
		this.registeredFunctions = null;
		this.objectStack = null;
	}
	,updateSize: function() {
		flixel_system_debug_Window.prototype.updateSize.call(this);
		this._input.set_width(this._width - 4);
		this._input.set_height(this._height - 15);
	}
	,__class__: flixel_system_debug_Console
});
var flixel_system_debug_ConsoleCommands = function(console) {
	this._watchingMouse = false;
	this._console = console;
	console.commands.push({ aliases : ["help","h"], processFunction : $bind(this,this.help), help : null, paramHelp : "(Command)", numParams : 1, paramCutoff : -1});
	console.commands.push({ aliases : ["close","cl"], processFunction : $bind(this,this.close), help : "Closes the debugger overlay.", paramHelp : null, numParams : 0, paramCutoff : -1});
	console.commands.push({ aliases : ["clearHistory","ch"], processFunction : $bind(this,this.clearHistory), help : "Clears the command history.", paramHelp : null, numParams : 0, paramCutoff : -1});
	console.commands.push({ aliases : ["clearLog","clear"], processFunction : ($_=flixel_FlxG.log,$bind($_,$_.clear)), help : "Clears the log window.", paramHelp : null, numParams : 0, paramCutoff : -1});
	console.commands.push({ aliases : ["resetState","rs"], processFunction : $bind(this,this.resetState), help : "Resets the current state.", paramHelp : null, numParams : 0, paramCutoff : -1});
	console.commands.push({ aliases : ["switchState","ss"], processFunction : $bind(this,this.switchState), help : "Switches to a specified state.", paramHelp : "[FlxState]", numParams : 0, paramCutoff : -1});
	console.commands.push({ aliases : ["resetGame","rg"], processFunction : $bind(this,this.resetGame), help : "Resets the game.", paramHelp : null, numParams : 0, paramCutoff : -1});
	console.commands.push({ aliases : ["create","cr"], processFunction : $bind(this,this.create), help : "Creates a new FlxObject and registers it - by default at the mouse position.", paramHelp : "[FlxObject] (MousePos = true)", numParams : 3, paramCutoff : 3});
	console.commands.push({ aliases : ["set","s"], processFunction : $bind(this,this.set), help : "Sets a variable within a registered object.", paramHelp : "[Path to function]", numParams : 3, paramCutoff : -1});
	console.commands.push({ aliases : ["call","c"], processFunction : $bind(this,this.call), help : "Calls a registered function / function within a registered object.", paramHelp : null, numParams : 3, paramCutoff : 2});
	console.commands.push({ aliases : ["fields","f"], processFunction : $bind(this,this.fields), help : "Lists the fields of a class or instance", paramHelp : "[Class or path to instance] [NumSuperClassesToInclude]", numParams : 2, paramCutoff : -1});
	console.commands.push({ aliases : ["listObjects","lo"], processFunction : $bind(this,this.listObjects), help : "Lists all the aliases of the registered objects.", paramHelp : null, numParams : 0, paramCutoff : -1});
	console.commands.push({ aliases : ["listFunctions","lf"], processFunction : $bind(this,this.listFunctions), help : "Lists all the aliases of the registered objects.", paramHelp : null, numParams : 0, paramCutoff : -1});
	console.commands.push({ aliases : ["watchMouse","wm"], processFunction : $bind(this,this.watchMouse), help : "Adds the mouse coordinates to the watch window.", paramHelp : null, numParams : 0, paramCutoff : -1});
	console.commands.push({ aliases : ["track","t"], processFunction : $bind(this,this.track), help : "Adds a tracker window for the specified object.", paramHelp : null, numParams : 0, paramCutoff : -1});
	console.commands.push({ aliases : ["pause","p"], processFunction : $bind(this,this.pause), help : "Toggle between paused and unpaused", paramHelp : null, numParams : 0, paramCutoff : -1});
	console.commands.push({ aliases : ["clearBitmapLog","cbl"], processFunction : ($_=flixel_FlxG.bitmapLog,$bind($_,$_.clear)), help : "Clears the bitmapLog window.", paramHelp : null, numParams : 0, paramCutoff : -1});
	console.commands.push({ aliases : ["viewCache","vc"], processFunction : ($_=flixel_FlxG.bitmapLog,$bind($_,$_.viewCache)), help : "Adds the cache to the bitmapLog window", paramHelp : null, numParams : 0, paramCutoff : -1});
	console.registerObject("FlxG",flixel_FlxG);
};
$hxClasses["flixel.system.debug.ConsoleCommands"] = flixel_system_debug_ConsoleCommands;
flixel_system_debug_ConsoleCommands.__name__ = ["flixel","system","debug","ConsoleCommands"];
flixel_system_debug_ConsoleCommands.prototype = {
	_console: null
	,_watchingMouse: null
	,help: function(Alias) {
		if(Alias == null) {
			var output = "System commands: ";
			var _g = 0;
			var _g1 = this._console.commands;
			while(_g < _g1.length) {
				var command = _g1[_g];
				++_g;
				output += command.aliases[0] + ", ";
			}
			flixel_FlxG.log.advanced([output],flixel_system_debug_LogStyle.CONSOLE);
			flixel_FlxG.log.advanced(["help (Command) for more information about a specific command"],flixel_system_debug_LogStyle.CONSOLE);
		} else {
			var command1 = flixel_system_debug_ConsoleUtil.findCommand(Alias,this._console.commands);
			if(command1 != null) {
				flixel_FlxG.log.advanced("",flixel_system_debug_LogStyle.NORMAL);
				flixel_FlxG.log.advanced([command1.aliases],flixel_system_debug_LogStyle.CONSOLE);
				if(command1.help != null) flixel_FlxG.log.advanced([command1.help],flixel_system_debug_LogStyle.CONSOLE);
				var cutoffHelp = "";
				if(command1.paramCutoff > 0) cutoffHelp = " [param0...paramX]";
				if(command1.paramHelp != null || cutoffHelp != "") flixel_FlxG.log.advanced(["Params: " + command1.paramHelp + cutoffHelp],flixel_system_debug_LogStyle.CONSOLE);
			} else flixel_FlxG.log.advanced("A command named '" + Alias + "' does not exist",flixel_system_debug_LogStyle.ERROR,true);
		}
	}
	,close: function() {
		flixel_FlxG.game["debugger"].set_visible(false);
		flixel_FlxG["debugger"].visible = false;
	}
	,clearHistory: function() {
		this._console.cmdHistory = [];
		flixel_FlxG.save.flush();
		flixel_FlxG.log.advanced(["clearHistory: Command history cleared"],flixel_system_debug_LogStyle.CONSOLE);
	}
	,resetState: function() {
		flixel_FlxG.switchState(Type.createInstance(Type.getClass(flixel_FlxG.game._state),[]));
		flixel_FlxG.log.advanced(["resetState: State has been reset"],flixel_system_debug_LogStyle.CONSOLE);
	}
	,switchState: function(ClassName) {
		var instance = flixel_system_debug_ConsoleUtil.attemptToCreateInstance_flixel_FlxState(ClassName,flixel_FlxState);
		if(instance == null) return;
		flixel_FlxG.switchState(instance);
		flixel_FlxG.log.advanced(["switchState: New '" + ClassName + "' created"],flixel_system_debug_LogStyle.CONSOLE);
	}
	,resetGame: function() {
		flixel_FlxG.game._resetGame = true;
		flixel_FlxG.log.advanced(["resetGame: Game has been reset"],flixel_system_debug_LogStyle.CONSOLE);
	}
	,create: function(ClassName,MousePos,Params) {
		if(MousePos == null) MousePos = "true";
		if(Params == null) Params = [];
		var instance = flixel_system_debug_ConsoleUtil.attemptToCreateInstance_flixel_FlxObject(ClassName,flixel_FlxObject,Params);
		if(instance == null) return;
		var obj = instance;
		if(MousePos == "true") {
			obj.set_x(flixel_FlxG.game.get_mouseX());
			obj.set_y(flixel_FlxG.game.get_mouseY());
		}
		flixel_FlxG.game._state.add(instance);
		if(Params.length == 0) flixel_FlxG.log.advanced(["create: New " + ClassName + " created at X = " + obj.x + " Y = " + obj.y],flixel_system_debug_LogStyle.CONSOLE); else flixel_FlxG.log.advanced(["create: New " + ClassName + " created at X = " + obj.x + " Y = " + obj.y + " with params " + Std.string(Params)],flixel_system_debug_LogStyle.CONSOLE);
		this._console.objectStack.push(instance);
		this._console.registerObject(Std.string(this._console.objectStack.length),instance);
		flixel_FlxG.log.advanced(["create: " + ClassName + " registered as object '" + this._console.objectStack.length + "'"],flixel_system_debug_LogStyle.CONSOLE);
	}
	,set: function(ObjectAndVariable,NewVariableValue,WatchName) {
		var pathToVariable = flixel_system_debug_ConsoleUtil.resolveObjectAndVariableFromMap(ObjectAndVariable,this._console.registeredObjects);
		if(pathToVariable == null) return;
		var object = pathToVariable.object;
		var varName = pathToVariable.variableName;
		var variable = null;
		try {
			variable = Reflect.getProperty(object,varName);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return;
		}
		if(variable == null) {
			flixel_FlxG.log.advanced("set: '" + ObjectAndVariable + "' could not be found",flixel_system_debug_LogStyle.ERROR,true);
			return;
		}
		if(typeof(variable) == "boolean") {
			var oldVal = NewVariableValue;
			NewVariableValue = flixel_system_debug_ConsoleUtil.parseBool(NewVariableValue);
			if(NewVariableValue == null) {
				flixel_FlxG.log.advanced("set: '" + oldVal + "' is not a valid value for Bool '" + varName + "'",flixel_system_debug_LogStyle.ERROR,true);
				return;
			}
		}
		if(typeof(variable) == "number" && (function($this) {
			var $r;
			var f = Std.parseFloat(NewVariableValue);
			$r = isNaN(f);
			return $r;
		}(this))) {
			flixel_FlxG.log.advanced("set: '" + Std.string(NewVariableValue) + "' is not a valid value for number '" + varName + "'",flixel_system_debug_LogStyle.ERROR,true);
			return;
		} else if(!(typeof(variable) == "number") && !(typeof(variable) == "boolean") && !(typeof(variable) == "string")) {
			flixel_FlxG.log.error("set: '" + varName + ":" + (function($this) {
				var $r;
				var cl;
				if(js_Boot.__instanceof(variable,Class)) cl = variable; else cl = Type.getClass(variable);
				var s = Type.getClassName(cl);
				if(s != null) {
					s = StringTools.replace(s,"::",".");
					var pos = s.lastIndexOf(".") + 1;
					s = HxOverrides.substr(s,pos,null);
				}
				$r = s;
				return $r;
			}(this)) + "' is not of a simple type (number, bool or string)");
			return;
		}
		Reflect.setProperty(object,varName,NewVariableValue);
		flixel_system_debug_ConsoleUtil.log("set: " + (function($this) {
			var $r;
			var cl1;
			if(js_Boot.__instanceof(object,Class)) cl1 = object; else cl1 = Type.getClass(object);
			var s1 = Type.getClassName(cl1);
			if(s1 != null) {
				s1 = StringTools.replace(s1,"::",".");
				var pos1 = s1.lastIndexOf(".") + 1;
				s1 = HxOverrides.substr(s1,pos1,null);
			}
			$r = s1;
			return $r;
		}(this)) + "." + varName + " is now " + Std.string(NewVariableValue));
		if(WatchName != null) flixel_FlxG.game["debugger"].watch.add(object,varName,WatchName);
	}
	,fields: function(ObjectAndVariable,NumSuperClassesToInclude) {
		if(NumSuperClassesToInclude == null) NumSuperClassesToInclude = 0;
		var pathToVariable = flixel_system_debug_ConsoleUtil.resolveObjectAndVariableFromMap(ObjectAndVariable,this._console.registeredObjects);
		if(pathToVariable == null) return;
		var fields = [];
		if(js_Boot.__instanceof(pathToVariable.object,Class) && pathToVariable.variableName == "") fields = Type.getClassFields(pathToVariable.object); else {
			var instance = Reflect.getProperty(pathToVariable.object,pathToVariable.variableName);
			if(instance == null) return;
			var cl;
			if(instance == null) cl = null; else cl = js_Boot.getClass(instance);
			fields = flixel_system_debug_ConsoleUtil.getInstanceFieldsAdvanced(cl,NumSuperClassesToInclude);
		}
		flixel_FlxG.log.advanced(["fields: list of fields for " + ObjectAndVariable],flixel_system_debug_LogStyle.CONSOLE);
		var output = "";
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			output += field + "\n";
		}
		flixel_FlxG.log.advanced([output],flixel_system_debug_LogStyle.CONSOLE);
	}
	,call: function(FunctionAlias,Params) {
		if(Params == null) Params = [];
		var func = this._console.registeredFunctions.get(FunctionAlias);
		if(!Reflect.isFunction(func)) {
			var searchArr = FunctionAlias.split(".");
			var objectName = searchArr.shift();
			var object = this._console.registeredObjects.get(objectName);
			if(!Reflect.isObject(object)) {
				flixel_FlxG.log.error("call: '" + (function($this) {
					var $r;
					var cl;
					if(js_Boot.__instanceof(object,Class)) cl = object; else cl = Type.getClass(object);
					var s = Type.getClassName(cl);
					if(s != null) {
						s = StringTools.replace(s,"::",".");
						var pos = s.lastIndexOf(".") + 1;
						s = HxOverrides.substr(s,pos,null);
					}
					$r = s;
					return $r;
				}(this)) + "' is not a valid Object to call");
				return;
			}
			var tempObj = object;
			var tempVarName = "";
			var funcName = "";
			var l = searchArr.length - 1;
			var _g = 0;
			while(_g < l) {
				var i = _g++;
				tempVarName = searchArr[i];
				try {
					var prop = Reflect.getProperty(tempObj,tempVarName);
				} catch( e ) {
					haxe_CallStack.lastException = e;
					if (e instanceof js__$Boot_HaxeError) e = e.val;
					flixel_FlxG.log.error("call: " + (function($this) {
						var $r;
						var cl1;
						if(js_Boot.__instanceof(tempObj,Class)) cl1 = tempObj; else cl1 = Type.getClass(tempObj);
						var s1 = Type.getClassName(cl1);
						if(s1 != null) {
							s1 = StringTools.replace(s1,"::",".");
							var pos1 = s1.lastIndexOf(".") + 1;
							s1 = HxOverrides.substr(s1,pos1,null);
						}
						$r = s1;
						return $r;
					}(this)) + " does not have a field '" + tempVarName + "' to call");
					return;
				}
				tempObj = Reflect.getProperty(tempObj,tempVarName);
			}
			func = Reflect.field(tempObj,searchArr[l]);
			if(func == null) {
				flixel_FlxG.log.error("call: " + (function($this) {
					var $r;
					var cl2;
					if(js_Boot.__instanceof(tempObj,Class)) cl2 = tempObj; else cl2 = Type.getClass(tempObj);
					var s2 = Type.getClassName(cl2);
					if(s2 != null) {
						s2 = StringTools.replace(s2,"::",".");
						var pos2 = s2.lastIndexOf(".") + 1;
						s2 = HxOverrides.substr(s2,pos2,null);
					}
					$r = s2;
					return $r;
				}(this)) + " does not have a method '" + searchArr[l] + "' to call");
				return;
			}
		}
		if(Reflect.isFunction(func)) {
			var success = flixel_system_debug_ConsoleUtil.callFunction(func,Params);
			if(Params.length == 0 && success) flixel_FlxG.log.advanced(["call: Called '" + FunctionAlias + "()'"],flixel_system_debug_LogStyle.CONSOLE); else if(success) flixel_FlxG.log.advanced(["call: Called '" + FunctionAlias + "()' with params " + Std.string(Params)],flixel_system_debug_LogStyle.CONSOLE);
		} else flixel_FlxG.log.advanced("call: '" + FunctionAlias + "' is not a valid function",flixel_system_debug_LogStyle.ERROR,true);
	}
	,listObjects: function() {
		flixel_system_debug_ConsoleUtil.log("Objects registered: \n" + flixel_util_FlxStringUtil.formatStringMap(this._console.registeredObjects));
	}
	,listFunctions: function() {
		flixel_system_debug_ConsoleUtil.log("Functions registered: \n" + flixel_util_FlxStringUtil.formatStringMap(this._console.registeredFunctions));
	}
	,watchMouse: function() {
		if(!this._watchingMouse) {
			flixel_FlxG.game["debugger"].watch.add(flixel_FlxG,"mouse","Mouse Position");
			flixel_FlxG.log.advanced(["watchMouse: Mouse position added to watch window"],flixel_system_debug_LogStyle.CONSOLE);
		} else {
			flixel_FlxG.game["debugger"].watch.remove(flixel_FlxG,"mouse");
			flixel_FlxG.log.advanced(["watchMouse: Mouse position removed from watch window"],flixel_system_debug_LogStyle.CONSOLE);
		}
		this._watchingMouse = !this._watchingMouse;
	}
	,track: function(ObjectAndVariable) {
		var pathToVariable = flixel_system_debug_ConsoleUtil.resolveObjectAndVariableFromMap(ObjectAndVariable,this._console.registeredObjects);
		flixel_FlxG["debugger"].track(Reflect.getProperty(pathToVariable.object,pathToVariable.variableName));
	}
	,pause: function() {
		if(flixel_FlxG.vcr.paused) {
			flixel_FlxG.vcr.resume();
			flixel_FlxG.log.advanced(["pause: Game unpaused"],flixel_system_debug_LogStyle.CONSOLE);
		} else {
			flixel_FlxG.vcr.pause();
			flixel_FlxG.log.advanced(["pause: Game paused"],flixel_system_debug_LogStyle.CONSOLE);
		}
	}
	,__class__: flixel_system_debug_ConsoleCommands
};
var flixel_system_debug_ConsoleUtil = function() { };
$hxClasses["flixel.system.debug.ConsoleUtil"] = flixel_system_debug_ConsoleUtil;
flixel_system_debug_ConsoleUtil.__name__ = ["flixel","system","debug","ConsoleUtil"];
flixel_system_debug_ConsoleUtil.attemptToCreateInstance_flixel_FlxObject = function(ClassName,type,Params) {
	if(Params == null) Params = [];
	var obj = Type.resolveClass(ClassName);
	if(!Reflect.isObject(obj)) {
		flixel_FlxG.log.advanced(ClassName + "' is not a valid class name. Try passing the full class path. Also make sure the class is being compiled.",flixel_system_debug_LogStyle.ERROR,true);
		return null;
	}
	var instance = Type.createInstance(obj,Params);
	if(!js_Boot.__instanceof(instance,type)) {
		flixel_FlxG.log.error(ClassName + "' is not a " + Type.getClassName(type));
		return null;
	}
	return instance;
};
flixel_system_debug_ConsoleUtil.attemptToCreateInstance_flixel_FlxState = function(ClassName,type,Params) {
	if(Params == null) Params = [];
	var obj = Type.resolveClass(ClassName);
	if(!Reflect.isObject(obj)) {
		flixel_FlxG.log.advanced(ClassName + "' is not a valid class name. Try passing the full class path. Also make sure the class is being compiled.",flixel_system_debug_LogStyle.ERROR,true);
		return null;
	}
	var instance = Type.createInstance(obj,Params);
	if(!js_Boot.__instanceof(instance,type)) {
		flixel_FlxG.log.error(ClassName + "' is not a " + Type.getClassName(type));
		return null;
	}
	return instance;
};
flixel_system_debug_ConsoleUtil.callFunction = function(Function,Args) {
	try {
		Reflect.callMethod(null,Function,Args);
		return true;
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,openfl_errors_ArgumentError) ) {
			if(e.errorID == 1063) {
				var expected = Std.parseInt(flixel_util_FlxStringUtil.filterDigits(e.message).charAt(4));
				if(expected < Args.length) {
					var shortenedArgs = Args.slice(0,expected);
					Reflect.callMethod(null,Function,shortenedArgs);
				} else {
					flixel_FlxG.log.advanced("Invalid number or parameters: " + expected + " expected, " + Args.length + " passed",flixel_system_debug_LogStyle.ERROR,true);
					return false;
				}
				return true;
			}
			return false;
		} else throw(e);
	}
};
flixel_system_debug_ConsoleUtil.findCommand = function(Alias,Commands) {
	var _g1 = 0;
	var _g = Commands.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(HxOverrides.indexOf(Commands[i].aliases,Alias,0) != -1) return Commands[i];
	}
	return null;
};
flixel_system_debug_ConsoleUtil.resolveObjectAndVariable = function(ObjectAndVariable,Object) {
	var searchArr = ObjectAndVariable.split(".");
	if(searchArr.length == 1) return { object : Object, variableName : ObjectAndVariable};
	var variableName = searchArr.join(".");
	if(!Reflect.isObject(Object)) {
		flixel_FlxG.log.error("'" + (function($this) {
			var $r;
			var cl;
			if(js_Boot.__instanceof(Object,Class)) cl = Object; else cl = Type.getClass(Object);
			var s = Type.getClassName(cl);
			if(s != null) {
				s = StringTools.replace(s,"::",".");
				var pos = s.lastIndexOf(".") + 1;
				s = HxOverrides.substr(s,pos,null);
			}
			$r = s;
			return $r;
		}(this)) + "' is not a valid Object");
		return null;
	}
	var l = searchArr.length;
	var tempObj = Object;
	var tempVarName = "";
	var _g = 0;
	while(_g < l) {
		var i = _g++;
		tempVarName = searchArr[i];
		try {
			if(i < l - 1) tempObj = Reflect.getProperty(tempObj,tempVarName);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			flixel_FlxG.log.error("'" + (function($this) {
				var $r;
				var cl1;
				if(js_Boot.__instanceof(tempObj,Class)) cl1 = tempObj; else cl1 = Type.getClass(tempObj);
				var s1 = Type.getClassName(cl1);
				if(s1 != null) {
					s1 = StringTools.replace(s1,"::",".");
					var pos1 = s1.lastIndexOf(".") + 1;
					s1 = HxOverrides.substr(s1,pos1,null);
				}
				$r = s1;
				return $r;
			}(this)) + "' does not have a field '" + tempVarName + "'");
			return null;
		}
	}
	return { object : tempObj, variableName : tempVarName};
};
flixel_system_debug_ConsoleUtil.resolveObjectAndVariableFromMap = function(ObjectAndVariable,ObjectMap) {
	var splitString = ObjectAndVariable.split(".");
	var object = ObjectMap.get(splitString[0]);
	splitString.shift();
	ObjectAndVariable = splitString.join(".");
	return flixel_system_debug_ConsoleUtil.resolveObjectAndVariable(ObjectAndVariable,object);
};
flixel_system_debug_ConsoleUtil.getInstanceFieldsAdvanced = function(cl,numSuperClassesToInclude) {
	if(numSuperClassesToInclude == null) numSuperClassesToInclude = 0;
	var fields = Type.getInstanceFields(cl);
	if(numSuperClassesToInclude >= 0) {
		var curClass = Type.getSuperClass(cl);
		var superClasses = [];
		while(curClass != null) {
			superClasses.push(curClass);
			curClass = Type.getSuperClass(curClass);
		}
		superClasses.reverse();
		if(numSuperClassesToInclude > superClasses.length) numSuperClassesToInclude = superClasses.length;
		var _g1 = 0;
		var _g = superClasses.length - numSuperClassesToInclude;
		while(_g1 < _g) {
			var i = _g1++;
			var superFields = Type.getInstanceFields(superClasses[i]);
			var _g2 = 0;
			while(_g2 < superFields.length) {
				var superField = superFields[_g2];
				++_g2;
				if(HxOverrides.indexOf(fields,superField,0) != -1) HxOverrides.remove(fields,superField);
			}
		}
	}
	return fields;
};
flixel_system_debug_ConsoleUtil.parseBool = function(s) {
	if(s == "true") return true; else if(s == "false") return false; else return null;
};
flixel_system_debug_ConsoleUtil.log = function(Text) {
	flixel_FlxG.log.advanced([Text],flixel_system_debug_LogStyle.CONSOLE);
};
var flixel_system_debug_DebuggerUtil = function() { };
$hxClasses["flixel.system.debug.DebuggerUtil"] = flixel_system_debug_DebuggerUtil;
flixel_system_debug_DebuggerUtil.__name__ = ["flixel","system","debug","DebuggerUtil"];
flixel_system_debug_DebuggerUtil.createTextField = function(X,Y,Color,Size) {
	if(Size == null) Size = 12;
	if(Color == null) Color = -1;
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	var tf = new openfl_text_TextField();
	tf.set_x(X);
	tf.set_y(Y);
	tf.set_multiline(false);
	tf.set_wordWrap(false);
	tf.set_embedFonts(true);
	tf.set_selectable(false);
	tf.set_defaultTextFormat(new openfl_text_TextFormat(flixel_system_FlxAssets.FONT_DEBUGGER,Size,(Color >> 16 & 255) << 16 | (Color >> 8 & 255) << 8 | Color & 255));
	tf.set_alpha(flixel_util_FlxColorUtil.getAlphaFloat(Color));
	return tf;
};
var flixel_system_debug__$FlxDebugger_GraphicFlixel = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$FlxDebugger_GraphicFlixel.preload != null) {
		this.image = flixel_system_debug__$FlxDebugger_GraphicFlixel.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_system_debug__$FlxDebugger_GraphicFlixel.resourceName),flixel_system_debug__$FlxDebugger_GraphicFlixel.resourceType,function(b) {
		if(flixel_system_debug__$FlxDebugger_GraphicFlixel.preload == null) flixel_system_debug__$FlxDebugger_GraphicFlixel.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.system.debug._FlxDebugger.GraphicFlixel"] = flixel_system_debug__$FlxDebugger_GraphicFlixel;
flixel_system_debug__$FlxDebugger_GraphicFlixel.__name__ = ["flixel","system","debug","_FlxDebugger","GraphicFlixel"];
flixel_system_debug__$FlxDebugger_GraphicFlixel.preload = null;
flixel_system_debug__$FlxDebugger_GraphicFlixel.__super__ = openfl_display_BitmapData;
flixel_system_debug__$FlxDebugger_GraphicFlixel.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$FlxDebugger_GraphicFlixel
});
var flixel_system_debug__$FlxDebugger_GraphicDrawDebug = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$FlxDebugger_GraphicDrawDebug.preload != null) {
		this.image = flixel_system_debug__$FlxDebugger_GraphicDrawDebug.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_system_debug__$FlxDebugger_GraphicDrawDebug.resourceName),flixel_system_debug__$FlxDebugger_GraphicDrawDebug.resourceType,function(b) {
		if(flixel_system_debug__$FlxDebugger_GraphicDrawDebug.preload == null) flixel_system_debug__$FlxDebugger_GraphicDrawDebug.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.system.debug._FlxDebugger.GraphicDrawDebug"] = flixel_system_debug__$FlxDebugger_GraphicDrawDebug;
flixel_system_debug__$FlxDebugger_GraphicDrawDebug.__name__ = ["flixel","system","debug","_FlxDebugger","GraphicDrawDebug"];
flixel_system_debug__$FlxDebugger_GraphicDrawDebug.preload = null;
flixel_system_debug__$FlxDebugger_GraphicDrawDebug.__super__ = openfl_display_BitmapData;
flixel_system_debug__$FlxDebugger_GraphicDrawDebug.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$FlxDebugger_GraphicDrawDebug
});
var flixel_system_debug_GraphicLog = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_GraphicLog.preload != null) {
		this.image = flixel_system_debug_GraphicLog.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_system_debug_GraphicLog.resourceName),flixel_system_debug_GraphicLog.resourceType,function(b) {
		if(flixel_system_debug_GraphicLog.preload == null) flixel_system_debug_GraphicLog.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.system.debug.GraphicLog"] = flixel_system_debug_GraphicLog;
flixel_system_debug_GraphicLog.__name__ = ["flixel","system","debug","GraphicLog"];
flixel_system_debug_GraphicLog.preload = null;
flixel_system_debug_GraphicLog.__super__ = openfl_display_BitmapData;
flixel_system_debug_GraphicLog.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_GraphicLog
});
var flixel_system_debug_GraphicStats = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_GraphicStats.preload != null) {
		this.image = flixel_system_debug_GraphicStats.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_system_debug_GraphicStats.resourceName),flixel_system_debug_GraphicStats.resourceType,function(b) {
		if(flixel_system_debug_GraphicStats.preload == null) flixel_system_debug_GraphicStats.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.system.debug.GraphicStats"] = flixel_system_debug_GraphicStats;
flixel_system_debug_GraphicStats.__name__ = ["flixel","system","debug","GraphicStats"];
flixel_system_debug_GraphicStats.preload = null;
flixel_system_debug_GraphicStats.__super__ = openfl_display_BitmapData;
flixel_system_debug_GraphicStats.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_GraphicStats
});
var flixel_system_debug_GraphicWatch = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_GraphicWatch.preload != null) {
		this.image = flixel_system_debug_GraphicWatch.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_system_debug_GraphicWatch.resourceName),flixel_system_debug_GraphicWatch.resourceType,function(b) {
		if(flixel_system_debug_GraphicWatch.preload == null) flixel_system_debug_GraphicWatch.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.system.debug.GraphicWatch"] = flixel_system_debug_GraphicWatch;
flixel_system_debug_GraphicWatch.__name__ = ["flixel","system","debug","GraphicWatch"];
flixel_system_debug_GraphicWatch.preload = null;
flixel_system_debug_GraphicWatch.__super__ = openfl_display_BitmapData;
flixel_system_debug_GraphicWatch.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_GraphicWatch
});
var flixel_system_debug_GraphicBitmapLog = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_GraphicBitmapLog.preload != null) {
		this.image = flixel_system_debug_GraphicBitmapLog.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_system_debug_GraphicBitmapLog.resourceName),flixel_system_debug_GraphicBitmapLog.resourceType,function(b) {
		if(flixel_system_debug_GraphicBitmapLog.preload == null) flixel_system_debug_GraphicBitmapLog.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.system.debug.GraphicBitmapLog"] = flixel_system_debug_GraphicBitmapLog;
flixel_system_debug_GraphicBitmapLog.__name__ = ["flixel","system","debug","GraphicBitmapLog"];
flixel_system_debug_GraphicBitmapLog.preload = null;
flixel_system_debug_GraphicBitmapLog.__super__ = openfl_display_BitmapData;
flixel_system_debug_GraphicBitmapLog.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_GraphicBitmapLog
});
var flixel_system_debug_GraphicConsole = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_GraphicConsole.preload != null) {
		this.image = flixel_system_debug_GraphicConsole.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_system_debug_GraphicConsole.resourceName),flixel_system_debug_GraphicConsole.resourceType,function(b) {
		if(flixel_system_debug_GraphicConsole.preload == null) flixel_system_debug_GraphicConsole.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.system.debug.GraphicConsole"] = flixel_system_debug_GraphicConsole;
flixel_system_debug_GraphicConsole.__name__ = ["flixel","system","debug","GraphicConsole"];
flixel_system_debug_GraphicConsole.preload = null;
flixel_system_debug_GraphicConsole.__super__ = openfl_display_BitmapData;
flixel_system_debug_GraphicConsole.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_GraphicConsole
});
var flixel_system_debug_GraphicArrowLeft = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_GraphicArrowLeft.preload != null) {
		this.image = flixel_system_debug_GraphicArrowLeft.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_system_debug_GraphicArrowLeft.resourceName),flixel_system_debug_GraphicArrowLeft.resourceType,function(b) {
		if(flixel_system_debug_GraphicArrowLeft.preload == null) flixel_system_debug_GraphicArrowLeft.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.system.debug.GraphicArrowLeft"] = flixel_system_debug_GraphicArrowLeft;
flixel_system_debug_GraphicArrowLeft.__name__ = ["flixel","system","debug","GraphicArrowLeft"];
flixel_system_debug_GraphicArrowLeft.preload = null;
flixel_system_debug_GraphicArrowLeft.__super__ = openfl_display_BitmapData;
flixel_system_debug_GraphicArrowLeft.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_GraphicArrowLeft
});
var flixel_system_debug_GraphicArrowRight = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_GraphicArrowRight.preload != null) {
		this.image = flixel_system_debug_GraphicArrowRight.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_system_debug_GraphicArrowRight.resourceName),flixel_system_debug_GraphicArrowRight.resourceType,function(b) {
		if(flixel_system_debug_GraphicArrowRight.preload == null) flixel_system_debug_GraphicArrowRight.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.system.debug.GraphicArrowRight"] = flixel_system_debug_GraphicArrowRight;
flixel_system_debug_GraphicArrowRight.__name__ = ["flixel","system","debug","GraphicArrowRight"];
flixel_system_debug_GraphicArrowRight.preload = null;
flixel_system_debug_GraphicArrowRight.__super__ = openfl_display_BitmapData;
flixel_system_debug_GraphicArrowRight.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_GraphicArrowRight
});
var flixel_system_debug_FlxDebugger = function(Width,Height) {
	this.hasMouse = false;
	openfl_display_Sprite.call(this);
	this.set_visible(false);
	this._layout = flixel_system_debug_DebuggerLayout.STANDARD;
	this._screen = new openfl_geom_Point();
	this._windows = [];
	this._topBar = new openfl_display_Sprite();
	this._topBar.get_graphics().beginFill(0,0.66666666666666663);
	this._topBar.get_graphics().drawRect(0,0,openfl_Lib.current.stage.stageWidth,20);
	this._topBar.get_graphics().endFill();
	this.addChild(this._topBar);
	var txt = new openfl_text_TextField();
	txt.set_height(20);
	txt.set_selectable(false);
	txt.set_y(-9);
	txt.set_multiline(false);
	txt.set_embedFonts(true);
	var format = new openfl_text_TextFormat(flixel_system_FlxAssets.FONT_DEBUGGER,12,-1);
	txt.set_defaultTextFormat(format);
	txt.set_autoSize(openfl_text_TextFieldAutoSize.LEFT);
	txt.set_text(Std.string(flixel_FlxG.VERSION));
	this._leftButtons = [];
	this._rightButtons = [];
	this._middleButtons = [];
	this.addWindow(this.log = new flixel_system_debug_Log());
	this.addWindow(this.bitmapLog = new flixel_system_debug_BitmapLog());
	this.addWindow(this.watch = new flixel_system_debug_Watch());
	this.addWindow(this.console = new flixel_system_debug_Console());
	this.addWindow(this.stats = new flixel_system_debug_Stats());
	this.vcr = new flixel_system_debug_VCR(this);
	this.addButton(flixel_system_debug_ButtonAlignment.LEFT,new flixel_system_debug__$FlxDebugger_GraphicFlixel(0,0),$bind(this,this.openHomepage));
	this.addButton(flixel_system_debug_ButtonAlignment.LEFT,null,$bind(this,this.openHomepage)).addChild(txt);
	this.addWindowToggleButton(this.bitmapLog,flixel_system_debug_GraphicBitmapLog);
	this.addWindowToggleButton(this.log,flixel_system_debug_GraphicLog);
	this.addWindowToggleButton(this.watch,flixel_system_debug_GraphicWatch);
	this.addWindowToggleButton(this.console,flixel_system_debug_GraphicConsole);
	this.addWindowToggleButton(this.stats,flixel_system_debug_GraphicStats);
	var drawDebugButton = this.addButton(flixel_system_debug_ButtonAlignment.RIGHT,new flixel_system_debug__$FlxDebugger_GraphicDrawDebug(0,0),$bind(this,this.toggleDrawDebug),true);
	drawDebugButton.set_toggled(!flixel_FlxG["debugger"].drawDebug);
	flixel_FlxG["debugger"].drawDebugChanged.add(function() {
		drawDebugButton.set_toggled(flixel_FlxG["debugger"].drawDebug);
	});
	this.onResize(Width,Height);
	this.addEventListener(openfl_events_MouseEvent.MOUSE_OVER,$bind(this,this.onMouseOver));
	this.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
	flixel_FlxG.signals.stateSwitched.add(flixel_system_debug_Tracker.onStateSwitch);
};
$hxClasses["flixel.system.debug.FlxDebugger"] = flixel_system_debug_FlxDebugger;
flixel_system_debug_FlxDebugger.__name__ = ["flixel","system","debug","FlxDebugger"];
flixel_system_debug_FlxDebugger.__super__ = openfl_display_Sprite;
flixel_system_debug_FlxDebugger.prototype = $extend(openfl_display_Sprite.prototype,{
	stats: null
	,log: null
	,watch: null
	,bitmapLog: null
	,vcr: null
	,console: null
	,hasMouse: null
	,_layout: null
	,_screen: null
	,_screenBounds: null
	,_middleButtons: null
	,_leftButtons: null
	,_rightButtons: null
	,_topBar: null
	,_windows: null
	,destroy: function() {
		this._screen = null;
		this._leftButtons = flixel_util_FlxDestroyUtil.destroyArray(this._leftButtons);
		this._middleButtons = flixel_util_FlxDestroyUtil.destroyArray(this._middleButtons);
		this._rightButtons = flixel_util_FlxDestroyUtil.destroyArray(this._rightButtons);
		this.removeChild(this._topBar);
		this._topBar = null;
		if(this.log != null) {
			this.removeChild(this.log);
			this.log.destroy();
			this.log = null;
		}
		if(this.watch != null) {
			this.removeChild(this.watch);
			this.watch.destroy();
			this.watch = null;
		}
		if(this.bitmapLog != null) {
			this.removeChild(this.bitmapLog);
			this.bitmapLog.destroy();
			this.bitmapLog = null;
		}
		if(this.stats != null) {
			this.removeChild(this.stats);
			this.stats.destroy();
			this.stats = null;
		}
		if(this.console != null) {
			this.removeChild(this.console);
			this.console.destroy();
			this.console = null;
		}
		this._windows = null;
		this.removeEventListener(openfl_events_MouseEvent.MOUSE_OVER,$bind(this,this.onMouseOver));
		this.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
	}
	,update: function() {
		var _g = 0;
		var _g1 = this._windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.update();
		}
	}
	,setLayout: function(Layout) {
		this._layout = Layout;
		this.resetLayout();
	}
	,resetLayout: function() {
		var _g = this._layout;
		switch(_g[1]) {
		case 1:
			this.log.resize(this._screen.x / 4,68);
			this.log.reposition(0,this._screen.y);
			this.console.resize(this._screen.x / 2 - 8,35);
			this.console.reposition(this.log.get_x() + this.log.get_width() + 2,this._screen.y);
			this.watch.resize(this._screen.x / 4,68);
			this.watch.reposition(this._screen.x,this._screen.y);
			this.stats.reposition(this._screen.x,0);
			this.bitmapLog.resize(this._screen.x / 4,68);
			this.bitmapLog.reposition(0,this._screen.y - 136 - 4);
			break;
		case 2:
			this.console.resize(this._screen.x - 4,35);
			this.console.reposition(2,this._screen.y);
			this.log.resize((this._screen.x - 6) / 2,this._screen.y / 2);
			this.log.reposition(0,this._screen.y - this.log.get_height() - this.console.get_height() - 3.);
			this.watch.resize((this._screen.x - 6) / 2,this._screen.y / 2);
			this.watch.reposition(this._screen.x,this._screen.y - this.watch.get_height() - this.console.get_height() - 3.);
			this.stats.reposition(this._screen.x,0);
			this.bitmapLog.resize((this._screen.x - 6) / 2,this._screen.y - 4 - this._screen.y / 2 - 70);
			this.bitmapLog.reposition(0,3.);
			break;
		case 3:
			this.console.resize(this._screen.x - 4,35);
			this.console.reposition(0,0);
			this.log.resize((this._screen.x - 6) / 2,this._screen.y / 4);
			this.log.reposition(0,this.console.get_height() + 2 + 15);
			this.watch.resize((this._screen.x - 6) / 2,this._screen.y / 4);
			this.watch.reposition(this._screen.x,this.console.get_height() + 2 + 15);
			this.stats.reposition(this._screen.x,this._screen.y);
			this.bitmapLog.resize((this._screen.x - 6) / 2,this._screen.y / 4);
			this.bitmapLog.reposition(0,this.console.get_height() + 4 + 15 + this._screen.y / 4 + 2);
			break;
		case 4:
			this.console.resize(this._screen.x - 4,35);
			this.console.reposition(2,this._screen.y);
			this.log.resize(this._screen.x / 3,(this._screen.y - 15 - 5.) / 2 - this.console.get_height() / 2 - 2);
			this.log.reposition(0,0);
			this.watch.resize(this._screen.x / 3,(this._screen.y - 15 - 5.) / 2 - this.console.get_height() / 2);
			this.watch.reposition(0,this.log.get_y() + this.log.get_height() + 2);
			this.stats.reposition(this._screen.x,0);
			this.bitmapLog.resize(this._screen.x / 3,(this._screen.y - 15 - 5.) / 2 - this.console.get_height() / 2 - 2);
			this.bitmapLog.reposition(this._screen.x / 3 + 4,0);
			break;
		case 5:
			this.console.resize(this._screen.x - 4,35);
			this.console.reposition(2,this._screen.y);
			this.log.resize(this._screen.x / 3,(this._screen.y - 15 - 5.) / 2 - this.console.get_height() / 2 - 2);
			this.log.reposition(this._screen.x,0);
			this.watch.resize(this._screen.x / 3,(this._screen.y - 15 - 5.) / 2 - this.console.get_height() / 2);
			this.watch.reposition(this._screen.x,this.log.get_y() + this.log.get_height() + 2);
			this.stats.reposition(0,0);
			this.bitmapLog.resize(this._screen.x / 3,(this._screen.y - 15 - 5.) / 2 - this.console.get_height() / 2 - 2);
			this.bitmapLog.reposition(this._screen.x - 4 - this._screen.x / 3 * 2,0);
			break;
		case 0:
			this.console.resize(this._screen.x - 4,35);
			this.console.reposition(2,this._screen.y);
			this.log.resize((this._screen.x - 6) / 2,this._screen.y / 4);
			this.log.reposition(0,this._screen.y - this.log.get_height() - this.console.get_height() - 3.);
			this.watch.resize((this._screen.x - 6) / 2,this._screen.y / 4);
			this.watch.reposition(this._screen.x,this._screen.y - this.watch.get_height() - this.console.get_height() - 3.);
			this.stats.reposition(this._screen.x,0);
			this.bitmapLog.resize((this._screen.x - 6) / 2,this._screen.y / 4);
			this.bitmapLog.reposition(0,this.log.get_y() - 2 - this.bitmapLog.get_height());
			break;
		}
	}
	,onResize: function(Width,Height) {
		this._screen.x = Width;
		this._screen.y = Height;
		this.updateBounds();
		this._topBar.set_width(openfl_Lib.current.stage.stageWidth);
		this.resetButtonLayout();
		this.resetLayout();
		this.set_scaleX(1 / flixel_FlxG.game.get_scaleX());
		this.set_scaleY(1 / flixel_FlxG.game.get_scaleY());
		this.set_x(-flixel_FlxG.game.get_x() * this.get_scaleX());
		this.set_y(-flixel_FlxG.game.get_y() * this.get_scaleY());
	}
	,updateBounds: function() {
		this._screenBounds = new openfl_geom_Rectangle(2,21.,this._screen.x - 4,this._screen.y - 4 - 20);
		var _g = 0;
		var _g1 = this._windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.updateBounds(this._screenBounds);
		}
	}
	,hAlignButtons: function(Sprites,Padding,Set,LeftOffset) {
		if(LeftOffset == null) LeftOffset = 0;
		if(Set == null) Set = true;
		if(Padding == null) Padding = 0;
		var width = 0;
		var last = LeftOffset;
		var _g1 = 0;
		var _g = Sprites.length;
		while(_g1 < _g) {
			var i = _g1++;
			var o = Sprites[i];
			width += o.get_width() + Padding;
			if(Set) o.set_x(last);
			last = o.get_x() + o.get_width() + Padding;
		}
		return width;
	}
	,resetButtonLayout: function() {
		this.hAlignButtons(this._leftButtons,10,true,10);
		var offset = openfl_Lib.current.stage.stageWidth * 0.5 - this.hAlignButtons(this._middleButtons,10,false) * 0.5;
		this.hAlignButtons(this._middleButtons,10,true,offset);
		var offset1 = openfl_Lib.current.stage.stageWidth - this.hAlignButtons(this._rightButtons,10,false);
		this.hAlignButtons(this._rightButtons,10,true,offset1);
	}
	,addButton: function(Position,Icon,UpHandler,ToggleMode,UpdateLayout) {
		if(UpdateLayout == null) UpdateLayout = false;
		if(ToggleMode == null) ToggleMode = false;
		var button = new flixel_system_ui_FlxSystemButton(Icon,UpHandler,ToggleMode);
		var array;
		switch(Position[1]) {
		case 0:
			array = this._leftButtons;
			break;
		case 1:
			array = this._middleButtons;
			break;
		case 2:
			array = this._rightButtons;
			break;
		}
		button.set_y(10. - button.get_height() / 2);
		array.push(button);
		this.addChild(button);
		if(UpdateLayout) this.resetButtonLayout();
		return button;
	}
	,removeButton: function(Button,UpdateLayout) {
		if(UpdateLayout == null) UpdateLayout = true;
		this.removeChild(Button);
		Button.destroy();
		this.removeButtonFromArray(this._leftButtons,Button);
		this.removeButtonFromArray(this._middleButtons,Button);
		this.removeButtonFromArray(this._rightButtons,Button);
		if(UpdateLayout) this.resetButtonLayout();
	}
	,addWindowToggleButton: function(window,icon) {
		var button = this.addButton(flixel_system_debug_ButtonAlignment.RIGHT,Type.createInstance(icon,[0,0]),$bind(window,window.toggleVisible),true,true);
		window.toggleButton = button;
		button.set_toggled(!window.get_visible());
	}
	,addWindow: function(window) {
		this._windows.push(window);
		this.addChild(window);
		if(this._screenBounds != null) {
			this.updateBounds();
			window.bound();
		}
		return window;
	}
	,removeWindow: function(window) {
		if(this.contains(window)) this.removeChild(window);
		flixel_util_FlxArrayUtil.fastSplice_flixel_system_debug_Window(this._windows,window);
	}
	,onMouseOver: function(_) {
		this.hasMouse = true;
		flixel_FlxG.mouse.set_useSystemCursor(true);
	}
	,onMouseOut: function(_) {
		this.hasMouse = false;
		if(!flixel_FlxG.vcr.paused) flixel_FlxG.mouse.set_useSystemCursor(false);
	}
	,removeButtonFromArray: function(Arr,Button) {
		var index = HxOverrides.indexOf(Arr,Button,0);
		if(index != -1) Arr.splice(index,1);
	}
	,toggleDrawDebug: function() {
		flixel_FlxG["debugger"].set_drawDebug(!flixel_FlxG["debugger"].drawDebug);
	}
	,openHomepage: function() {
		flixel_FlxG.openURL("http://www.haxeflixel.com",null);
	}
	,__class__: flixel_system_debug_FlxDebugger
});
var flixel_system_debug_ButtonAlignment = $hxClasses["flixel.system.debug.ButtonAlignment"] = { __ename__ : ["flixel","system","debug","ButtonAlignment"], __constructs__ : ["LEFT","MIDDLE","RIGHT"] };
flixel_system_debug_ButtonAlignment.LEFT = ["LEFT",0];
flixel_system_debug_ButtonAlignment.LEFT.toString = $estr;
flixel_system_debug_ButtonAlignment.LEFT.__enum__ = flixel_system_debug_ButtonAlignment;
flixel_system_debug_ButtonAlignment.MIDDLE = ["MIDDLE",1];
flixel_system_debug_ButtonAlignment.MIDDLE.toString = $estr;
flixel_system_debug_ButtonAlignment.MIDDLE.__enum__ = flixel_system_debug_ButtonAlignment;
flixel_system_debug_ButtonAlignment.RIGHT = ["RIGHT",2];
flixel_system_debug_ButtonAlignment.RIGHT.toString = $estr;
flixel_system_debug_ButtonAlignment.RIGHT.__enum__ = flixel_system_debug_ButtonAlignment;
var flixel_system_debug_DebuggerLayout = $hxClasses["flixel.system.debug.DebuggerLayout"] = { __ename__ : ["flixel","system","debug","DebuggerLayout"], __constructs__ : ["STANDARD","MICRO","BIG","TOP","LEFT","RIGHT"] };
flixel_system_debug_DebuggerLayout.STANDARD = ["STANDARD",0];
flixel_system_debug_DebuggerLayout.STANDARD.toString = $estr;
flixel_system_debug_DebuggerLayout.STANDARD.__enum__ = flixel_system_debug_DebuggerLayout;
flixel_system_debug_DebuggerLayout.MICRO = ["MICRO",1];
flixel_system_debug_DebuggerLayout.MICRO.toString = $estr;
flixel_system_debug_DebuggerLayout.MICRO.__enum__ = flixel_system_debug_DebuggerLayout;
flixel_system_debug_DebuggerLayout.BIG = ["BIG",2];
flixel_system_debug_DebuggerLayout.BIG.toString = $estr;
flixel_system_debug_DebuggerLayout.BIG.__enum__ = flixel_system_debug_DebuggerLayout;
flixel_system_debug_DebuggerLayout.TOP = ["TOP",3];
flixel_system_debug_DebuggerLayout.TOP.toString = $estr;
flixel_system_debug_DebuggerLayout.TOP.__enum__ = flixel_system_debug_DebuggerLayout;
flixel_system_debug_DebuggerLayout.LEFT = ["LEFT",4];
flixel_system_debug_DebuggerLayout.LEFT.toString = $estr;
flixel_system_debug_DebuggerLayout.LEFT.__enum__ = flixel_system_debug_DebuggerLayout;
flixel_system_debug_DebuggerLayout.RIGHT = ["RIGHT",5];
flixel_system_debug_DebuggerLayout.RIGHT.toString = $estr;
flixel_system_debug_DebuggerLayout.RIGHT.__enum__ = flixel_system_debug_DebuggerLayout;
var flixel_system_debug_Log = function() {
	flixel_system_debug_Window.call(this,"log",new flixel_system_debug_GraphicLog(0,0));
	this._text = new openfl_text_TextField();
	this._text.set_x(2);
	this._text.set_y(15);
	this._text.set_multiline(true);
	this._text.set_wordWrap(true);
	this._text.set_selectable(true);
	this._text.set_embedFonts(true);
	this._text.set_defaultTextFormat(new openfl_text_TextFormat(flixel_system_FlxAssets.FONT_DEBUGGER,12,16777215));
	this.addChild(this._text);
	this._lines = [];
};
$hxClasses["flixel.system.debug.Log"] = flixel_system_debug_Log;
flixel_system_debug_Log.__name__ = ["flixel","system","debug","Log"];
flixel_system_debug_Log.__super__ = flixel_system_debug_Window;
flixel_system_debug_Log.prototype = $extend(flixel_system_debug_Window.prototype,{
	_text: null
	,_lines: null
	,destroy: function() {
		if(this._text != null) {
			this.removeChild(this._text);
			this._text = null;
		}
		this._lines = null;
		flixel_system_debug_Window.prototype.destroy.call(this);
	}
	,add: function(Data,Style,FireOnce) {
		if(FireOnce == null) FireOnce = false;
		if(Data == null) return false;
		var texts = [];
		var _g1 = 0;
		var _g = Data.length;
		while(_g1 < _g) {
			var i = _g1++;
			texts[i] = Std.string(Data[i]);
			texts[i] = StringTools.htmlEscape(texts[i]);
		}
		var text = Style.prefix + texts.join(" ");
		if(FireOnce) {
			var _g2 = 0;
			var _g11 = this._lines;
			while(_g2 < _g11.length) {
				var line = _g11[_g2];
				++_g2;
				if(text == line) return false;
			}
		}
		if(this._lines.length <= 0) this._text.set_text("");
		this._lines.push(text);
		if(this._lines.length > 200) {
			this._lines.shift();
			var newText = "";
			var _g12 = 0;
			var _g3 = this._lines.length;
			while(_g12 < _g3) {
				var i1 = _g12++;
				newText += this._lines[i1] + "\n";
			}
			this._text.set_text(newText);
		} else {
			var _g4 = this._text;
			_g4.set_text(_g4.get_text() + (text + "\n"));
		}
		this._text.set_scrollV(Std["int"](this._text.get_maxScrollV()));
		return true;
	}
	,clear: function() {
		this._text.set_text("");
		this._lines.splice(0,this._lines.length);
	}
	,updateSize: function() {
		flixel_system_debug_Window.prototype.updateSize.call(this);
		this._text.set_width(this._width - 10);
		this._text.set_height(this._height - 15);
	}
	,__class__: flixel_system_debug_Log
});
var flixel_system_debug_LogStyle = function(Prefix,Color,Size,Bold,Italic,Underlined,ErrorSound,OpenConsole,CallbackFunction) {
	if(OpenConsole == null) OpenConsole = false;
	if(Underlined == null) Underlined = false;
	if(Italic == null) Italic = false;
	if(Bold == null) Bold = false;
	if(Size == null) Size = 12;
	if(Color == null) Color = "FFFFFF";
	if(Prefix == null) Prefix = "";
	this.prefix = Prefix;
	this.color = Color;
	this.size = Size;
	this.bold = Bold;
	this.italic = Italic;
	this.underlined = Underlined;
	this.errorSound = ErrorSound;
	this.openConsole = OpenConsole;
	this.callbackFunction = CallbackFunction;
};
$hxClasses["flixel.system.debug.LogStyle"] = flixel_system_debug_LogStyle;
flixel_system_debug_LogStyle.__name__ = ["flixel","system","debug","LogStyle"];
flixel_system_debug_LogStyle.prototype = {
	prefix: null
	,color: null
	,size: null
	,bold: null
	,italic: null
	,underlined: null
	,errorSound: null
	,openConsole: null
	,callbackFunction: null
	,__class__: flixel_system_debug_LogStyle
};
var flixel_system_debug__$Stats_GraphicMinimizeButton = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$Stats_GraphicMinimizeButton.preload != null) {
		this.image = flixel_system_debug__$Stats_GraphicMinimizeButton.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_system_debug__$Stats_GraphicMinimizeButton.resourceName),flixel_system_debug__$Stats_GraphicMinimizeButton.resourceType,function(b) {
		if(flixel_system_debug__$Stats_GraphicMinimizeButton.preload == null) flixel_system_debug__$Stats_GraphicMinimizeButton.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.system.debug._Stats.GraphicMinimizeButton"] = flixel_system_debug__$Stats_GraphicMinimizeButton;
flixel_system_debug__$Stats_GraphicMinimizeButton.__name__ = ["flixel","system","debug","_Stats","GraphicMinimizeButton"];
flixel_system_debug__$Stats_GraphicMinimizeButton.preload = null;
flixel_system_debug__$Stats_GraphicMinimizeButton.__super__ = openfl_display_BitmapData;
flixel_system_debug__$Stats_GraphicMinimizeButton.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$Stats_GraphicMinimizeButton
});
var flixel_system_debug__$Stats_GraphicMaximizeButton = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$Stats_GraphicMaximizeButton.preload != null) {
		this.image = flixel_system_debug__$Stats_GraphicMaximizeButton.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_system_debug__$Stats_GraphicMaximizeButton.resourceName),flixel_system_debug__$Stats_GraphicMaximizeButton.resourceType,function(b) {
		if(flixel_system_debug__$Stats_GraphicMaximizeButton.preload == null) flixel_system_debug__$Stats_GraphicMaximizeButton.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.system.debug._Stats.GraphicMaximizeButton"] = flixel_system_debug__$Stats_GraphicMaximizeButton;
flixel_system_debug__$Stats_GraphicMaximizeButton.__name__ = ["flixel","system","debug","_Stats","GraphicMaximizeButton"];
flixel_system_debug__$Stats_GraphicMaximizeButton.preload = null;
flixel_system_debug__$Stats_GraphicMaximizeButton.__super__ = openfl_display_BitmapData;
flixel_system_debug__$Stats_GraphicMaximizeButton.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$Stats_GraphicMaximizeButton
});
var flixel_system_debug_Stats = function() {
	this._paused = true;
	this._activeObjectMarker = 0;
	this._visibleObjectMarker = 0;
	this._drawMarker = 0;
	this._updateMarker = 0;
	this._updateTimer = 0;
	this._lastTime = 0;
	this.drawTime = 0;
	this.updateTime = 0;
	this.activeCount = 0;
	this.visibleCount = 0;
	this.flashPlayerFramerate = 0;
	this._itvTime = 0;
	flixel_system_debug_Window.call(this,"stats",new flixel_system_debug_GraphicStats(0,0),0,0,false);
	this.minSize.y = 180;
	this.resize(160,180);
	this.start();
	this._update = [];
	this._draw = [];
	this._activeObject = [];
	this._visibleObject = [];
	var gutter = 5;
	var graphX = gutter;
	var graphY = Std["int"](this._header.get_height()) + gutter;
	var graphHeight = 40;
	var graphWidth = 140;
	this.fpsGraph = new flixel_system_debug_StatsGraph(graphX,graphY,graphWidth,graphHeight,-6881536,"fps");
	this.addChild(this.fpsGraph);
	this.fpsGraph.maxValue = flixel_FlxG.drawFramerate;
	this.fpsGraph.minValue = 0;
	graphY = Std["int"](this._header.get_height()) + graphHeight + 20;
	this.memoryGraph = new flixel_system_debug_StatsGraph(graphX,graphY,graphWidth,graphHeight,-16737025,"MB");
	this.addChild(this.memoryGraph);
	graphY = Std["int"](this._header.get_height()) + gutter;
	graphX += gutter + graphWidth + 20;
	graphWidth -= 10;
	this.updateTimeGraph = new flixel_system_debug_StatsGraph(graphX,graphY,graphWidth,graphHeight,-2305024,"ms",35,"Update");
	this.updateTimeGraph.set_visible(false);
	this.addChild(this.updateTimeGraph);
	graphY = Std["int"](this._header.get_height()) + graphHeight + 20;
	this.drawTimeGraph = new flixel_system_debug_StatsGraph(graphX,graphY,graphWidth,graphHeight,-4784128,"ms",35,"Draw");
	this.drawTimeGraph.set_visible(false);
	this.addChild(this.drawTimeGraph);
	this.addChild(this._leftTextField = flixel_system_debug_DebuggerUtil.createTextField(gutter,graphHeight * 2 + 45,-1426063361,11));
	this.addChild(this._rightTextField = flixel_system_debug_DebuggerUtil.createTextField(gutter + 70,graphHeight * 2 + 45,-1,11));
	this._leftTextField.set_multiline(this._rightTextField.set_multiline(true));
	this._leftTextField.set_wordWrap(this._rightTextField.set_wordWrap(true));
	this._leftTextField.set_text("Update: \nDraw:" + "\nQuadTrees: \nLists:");
	this._toggleSizeButton = new flixel_system_ui_FlxSystemButton(new flixel_system_debug__$Stats_GraphicMaximizeButton(0,0),$bind(this,this.toggleSize));
	this._toggleSizeButton.set_alpha(0.8);
	this.addChild(this._toggleSizeButton);
	this.updateSize();
};
$hxClasses["flixel.system.debug.Stats"] = flixel_system_debug_Stats;
flixel_system_debug_Stats.__name__ = ["flixel","system","debug","Stats"];
flixel_system_debug_Stats.__super__ = flixel_system_debug_Window;
flixel_system_debug_Stats.prototype = $extend(flixel_system_debug_Window.prototype,{
	_leftTextField: null
	,_rightTextField: null
	,_itvTime: null
	,_initTime: null
	,_frameCount: null
	,_totalCount: null
	,_currentTime: null
	,fpsGraph: null
	,memoryGraph: null
	,drawTimeGraph: null
	,updateTimeGraph: null
	,flashPlayerFramerate: null
	,visibleCount: null
	,activeCount: null
	,updateTime: null
	,drawTime: null
	,_lastTime: null
	,_updateTimer: null
	,_update: null
	,_updateMarker: null
	,_draw: null
	,_drawMarker: null
	,_visibleObject: null
	,_visibleObjectMarker: null
	,_activeObject: null
	,_activeObjectMarker: null
	,_paused: null
	,_toggleSizeButton: null
	,start: function() {
		if(this._paused) {
			this._paused = false;
			this._initTime = this._itvTime = flixel_FlxG.game.ticks;
			this._totalCount = this._frameCount = 0;
		}
	}
	,stop: function() {
		this._paused = true;
	}
	,destroy: function() {
		if(this.fpsGraph != null) {
			this.fpsGraph.destroy();
			this.removeChild(this.fpsGraph);
		}
		this.fpsGraph = null;
		if(this.memoryGraph != null) this.removeChild(this.memoryGraph);
		this.memoryGraph = null;
		if(this._leftTextField != null) this.removeChild(this._leftTextField);
		this._leftTextField = null;
		if(this._rightTextField != null) this.removeChild(this._rightTextField);
		this._rightTextField = null;
		this._update = null;
		this._draw = null;
		this._activeObject = null;
		this._visibleObject = null;
		flixel_system_debug_Window.prototype.destroy.call(this);
	}
	,update: function() {
		if(this._paused) return;
		var time = this._currentTime = flixel_FlxG.game.ticks;
		var elapsed = time - this._lastTime;
		if(elapsed > 250) elapsed = 250;
		this._lastTime = time;
		this._updateTimer += elapsed;
		this._frameCount++;
		this._totalCount++;
		if(this._updateTimer > 250) {
			this.fpsGraph.update(this._frameCount / ((this._currentTime - this._itvTime) / 1000),this._totalCount / ((this._currentTime - this._initTime) / 1000));
			this.memoryGraph.update(openfl_system_System.get_totalMemory() / 1024 / 1000);
			this.updateTexts();
			this._frameCount = 0;
			this._itvTime = this._currentTime;
			this.updateTime = 0;
			var _g1 = 0;
			var _g = this._updateMarker;
			while(_g1 < _g) {
				var i = _g1++;
				this.updateTime += this._update[i];
			}
			var _g11 = 0;
			var _g2 = this._activeObjectMarker;
			while(_g11 < _g2) {
				var i1 = _g11++;
				this.activeCount += this._activeObject[i1];
			}
			this.activeCount = this.activeCount / this._activeObjectMarker | 0;
			this.drawTime = 0;
			var _g12 = 0;
			var _g3 = this._drawMarker;
			while(_g12 < _g3) {
				var i2 = _g12++;
				this.drawTime += this._draw[i2];
			}
			var _g13 = 0;
			var _g4 = this._visibleObjectMarker;
			while(_g13 < _g4) {
				var i3 = _g13++;
				this.visibleCount += this._visibleObject[i3];
			}
			this.visibleCount = this.visibleCount / this._visibleObjectMarker | 0;
			this._updateMarker = 0;
			this._drawMarker = 0;
			this._activeObjectMarker = 0;
			this._visibleObjectMarker = 0;
			this._updateTimer -= 250;
		}
	}
	,updateTexts: function() {
		var updTime = flixel_util_FlxMath.roundDecimal(this.updateTime / this._updateMarker,1);
		var drwTime = flixel_util_FlxMath.roundDecimal(this.drawTime / this._drawMarker,1);
		this.drawTimeGraph.update(drwTime);
		this.updateTimeGraph.update(updTime);
		this._rightTextField.set_text(this.activeCount + " (" + updTime + "ms)\n" + this.visibleCount + " (" + drwTime + "ms)\n" + flixel_system_FlxQuadTree._NUM_CACHED_QUAD_TREES + "\n" + flixel_system_FlxList._NUM_CACHED_FLX_LIST);
	}
	,currentFps: function() {
		return this._frameCount / ((this._currentTime - this._itvTime) / 1000);
	}
	,averageFps: function() {
		return this._totalCount / ((this._currentTime - this._initTime) / 1000);
	}
	,runningTime: function() {
		return (this._currentTime - this._initTime) / 1000;
	}
	,intervalTime: function() {
		return (this._currentTime - this._itvTime) / 1000;
	}
	,currentMem: function() {
		return openfl_system_System.get_totalMemory() / 1024 / 1000;
	}
	,flixelUpdate: function(Time) {
		if(this._paused) return;
		this._update[this._updateMarker++] = Time;
	}
	,flixelDraw: function(Time) {
		if(this._paused) return;
		this._draw[this._drawMarker++] = Time;
	}
	,activeObjects: function(Count) {
		if(this._paused) return;
		this._activeObject[this._activeObjectMarker++] = Count;
	}
	,visibleObjects: function(Count) {
		if(this._paused) return;
		this._visibleObject[this._visibleObjectMarker++] = Count;
	}
	,onFocus: function() {
		this._paused = false;
	}
	,onFocusLost: function() {
		this._paused = true;
	}
	,toggleSize: function() {
		if(this._width == 160) {
			this.resize(320,this._height);
			var _g = this;
			_g.set_x(_g.get_x() - 160);
			this.drawTimeGraph.set_visible(true);
			this.updateTimeGraph.set_visible(true);
			this._toggleSizeButton.changeIcon(new flixel_system_debug__$Stats_GraphicMinimizeButton(0,0));
		} else {
			this.resize(160,this._height);
			var _g1 = this;
			_g1.set_x(_g1.get_x() + 160);
			this.drawTimeGraph.set_visible(false);
			this.updateTimeGraph.set_visible(false);
			this._toggleSizeButton.changeIcon(new flixel_system_debug__$Stats_GraphicMaximizeButton(0,0));
		}
		this.updateSize();
		this.bound();
	}
	,updateSize: function() {
		flixel_system_debug_Window.prototype.updateSize.call(this);
		if(this._toggleSizeButton != null) {
			this._toggleSizeButton.set_x(this._width - this._toggleSizeButton.get_width() - 3);
			this._toggleSizeButton.set_y(3);
		}
	}
	,__class__: flixel_system_debug_Stats
});
var flixel_system_debug_StatsGraph = function(X,Y,Width,Height,GraphColor,Unit,LabelWidth,Label) {
	if(LabelWidth == null) LabelWidth = 45;
	this.maxValue = 0.0000000000000001;
	this.minValue = 1.79e+308;
	openfl_display_Sprite.call(this);
	this.set_x(X);
	this.set_y(Y);
	this._width = Width - LabelWidth;
	this._height = Height;
	this.graphColor = GraphColor;
	this._unit = Unit;
	this._labelWidth = LabelWidth;
	if(Label == null) this._label = ""; else this._label = Label;
	this.history = [];
	this._axis = new openfl_display_Shape();
	this._axis.set_x(this._labelWidth + 10);
	this.maxLabel = flixel_system_debug_DebuggerUtil.createTextField(0,0,-1426063361,11);
	this.curLabel = flixel_system_debug_DebuggerUtil.createTextField(0,this._height / 2 - 5.5,this.graphColor,11);
	this.minLabel = flixel_system_debug_DebuggerUtil.createTextField(0,this._height - 11,-1426063361,11);
	this.avgLabel = flixel_system_debug_DebuggerUtil.createTextField(this._labelWidth + 20,this._height / 2 - 5.5 - 10,-1426063361,11);
	this.avgLabel.set_width(this._width);
	this.avgLabel.get_defaultTextFormat().align = openfl_text_TextFormatAlign.CENTER;
	this.avgLabel.set_alpha(0.5);
	this.addChild(this._axis);
	this.addChild(this.maxLabel);
	this.addChild(this.curLabel);
	this.addChild(this.minLabel);
	this.addChild(this.avgLabel);
	this.drawAxis();
};
$hxClasses["flixel.system.debug.StatsGraph"] = flixel_system_debug_StatsGraph;
flixel_system_debug_StatsGraph.__name__ = ["flixel","system","debug","StatsGraph"];
flixel_system_debug_StatsGraph.__super__ = openfl_display_Sprite;
flixel_system_debug_StatsGraph.prototype = $extend(openfl_display_Sprite.prototype,{
	minLabel: null
	,curLabel: null
	,maxLabel: null
	,avgLabel: null
	,minValue: null
	,maxValue: null
	,graphColor: null
	,history: null
	,_axis: null
	,_width: null
	,_height: null
	,_unit: null
	,_labelWidth: null
	,_label: null
	,drawAxis: function() {
		var gfx = this._axis.get_graphics();
		gfx.clear();
		gfx.beginFill(0);
		gfx.lineStyle(1,16777215,0.5);
		gfx.moveTo(0,0);
		gfx.lineTo(0,this._height);
		gfx.moveTo(0,this._height);
		gfx.lineTo(this._width,this._height);
		gfx.endFill();
	}
	,drawGraph: function() {
		var gfx = this.get_graphics();
		gfx.clear();
		gfx.lineStyle(1,this.graphColor,1);
		gfx.moveTo(this._axis.get_x(),this._axis.get_y());
		var inc = this._width / 29;
		var range = this.maxValue - this.minValue;
		var value;
		var _g1 = 0;
		var _g = this.history.length;
		while(_g1 < _g) {
			var i = _g1++;
			value = (this.history[i] - this.minValue) / range;
			gfx.lineTo(this._axis.get_x() + i * inc,-value * this._height + this._height);
		}
	}
	,update: function(Value,Average) {
		this.history.unshift(Value);
		if(this.history.length > 30) this.history.pop();
		this.maxValue = Math.max(this.maxValue,Value);
		this.minValue = Math.min(this.minValue,Value);
		this.minLabel.set_text(flixel_util_FlxMath.roundDecimal(this.minValue,1) + " " + this._unit);
		this.curLabel.set_text(flixel_util_FlxMath.roundDecimal(Value,1) + " " + this._unit);
		this.maxLabel.set_text(flixel_util_FlxMath.roundDecimal(this.maxValue,1) + " " + this._unit);
		if(Average == null) Average = this.average();
		this.avgLabel.set_text(this._label + "\nAvg: " + flixel_util_FlxMath.roundDecimal(Average,1) + " " + this._unit);
		this.drawGraph();
	}
	,average: function() {
		var sum = 0;
		var _g = 0;
		var _g1 = this.history;
		while(_g < _g1.length) {
			var value = _g1[_g];
			++_g;
			sum += value;
		}
		return sum / this.history.length;
	}
	,destroy: function() {
		if(this._axis != null) {
			this.removeChild(this._axis);
			this._axis = null;
		}
		if(this.minLabel != null) {
			this.removeChild(this.minLabel);
			this.minLabel = null;
		}
		if(this.curLabel != null) {
			this.removeChild(this.curLabel);
			this.curLabel = null;
		}
		if(this.maxLabel != null) {
			this.removeChild(this.maxLabel);
			this.maxLabel = null;
		}
		if(this.avgLabel != null) {
			this.removeChild(this.avgLabel);
			this.avgLabel = null;
		}
		this.history = null;
	}
	,__class__: flixel_system_debug_StatsGraph
});
var flixel_system_debug_Watch = function(Closable) {
	if(Closable == null) Closable = false;
	flixel_system_debug_Window.call(this,"watch",new flixel_system_debug_GraphicWatch(0,0),0,0,true,null,Closable);
	this._names = new openfl_display_Sprite();
	this._names.set_x(2);
	this._names.set_y(15);
	this.addChild(this._names);
	this._values = new openfl_display_Sprite();
	this._values.set_x(2);
	this._values.set_y(15);
	this.addChild(this._values);
	this._watching = [];
	this._quickWatchList = new haxe_ds_StringMap();
	this.editing = false;
	this.removeAll();
	flixel_FlxG.signals.stateSwitched.add($bind(this,this.removeAll));
};
$hxClasses["flixel.system.debug.Watch"] = flixel_system_debug_Watch;
flixel_system_debug_Watch.__name__ = ["flixel","system","debug","Watch"];
flixel_system_debug_Watch.__super__ = flixel_system_debug_Window;
flixel_system_debug_Watch.prototype = $extend(flixel_system_debug_Window.prototype,{
	editing: null
	,_names: null
	,_values: null
	,_watching: null
	,_quickWatchList: null
	,destroy: function() {
		if(this._names != null) {
			this.removeChild(this._names);
			this._names = null;
		}
		if(this._values != null) {
			this.removeChild(this._values);
			this._values = null;
		}
		if(this._watching != null) {
			var _g = 0;
			var _g1 = this._watching;
			while(_g < _g1.length) {
				var watchEntry = _g1[_g];
				++_g;
				watchEntry = flixel_util_FlxDestroyUtil.destroy(watchEntry);
			}
			this._watching = null;
		}
		this._quickWatchList = null;
		flixel_FlxG.signals.stateSwitched.remove($bind(this,this.removeAll));
		flixel_system_debug_Window.prototype.destroy.call(this);
	}
	,add: function(AnyObject,VariableName,DisplayName) {
		var varData = flixel_system_debug_ConsoleUtil.resolveObjectAndVariable(VariableName,AnyObject);
		AnyObject = varData.object;
		VariableName = varData.variableName;
		var _g = 0;
		var _g1 = this._watching;
		while(_g < _g1.length) {
			var watchEntry1 = _g1[_g];
			++_g;
			if(watchEntry1.object == AnyObject && watchEntry1.field == VariableName) return;
		}
		var watchEntry = new flixel_system_debug_WatchEntry(this._watching.length * 15,this._width / 2,this._width / 2 - 10,AnyObject,VariableName,DisplayName);
		if(watchEntry.field == null) {
			watchEntry.destroy();
			watchEntry = null;
			return;
		}
		this._names.addChild(watchEntry.nameDisplay);
		this._values.addChild(watchEntry.valueDisplay);
		this._watching.push(watchEntry);
	}
	,updateQuickWatch: function(Name,NewValue) {
		if(this._quickWatchList.get(Name) == null) {
			var quickWatch1 = new flixel_system_debug_WatchEntry(this._watching.length * 15,this._width / 2,this._width / 2 - 10,null,null,Name);
			this._names.addChild(quickWatch1.nameDisplay);
			this._values.addChild(quickWatch1.valueDisplay);
			this._watching.push(quickWatch1);
			this._quickWatchList.set(Name,quickWatch1);
		}
		var quickWatch = this._quickWatchList.get(Name);
		if(quickWatch != null) quickWatch.valueDisplay.set_text(Std.string(NewValue));
	}
	,remove: function(AnyObject,VariableName,QuickWatchName) {
		if(AnyObject == null && VariableName == null && QuickWatchName != null) {
			var quickWatch = this._quickWatchList.get(QuickWatchName);
			if(quickWatch != null) this.removeEntry(quickWatch,HxOverrides.indexOf(this._watching,quickWatch,0));
			this._quickWatchList.remove(QuickWatchName);
			return;
		}
		var _g1 = 0;
		var _g = this._watching.length;
		while(_g1 < _g) {
			var i = _g1++;
			var watchEntry = this._watching[i];
			if(watchEntry != null && watchEntry.object == AnyObject && (VariableName == null || watchEntry.field == VariableName)) this.removeEntry(watchEntry,i);
		}
	}
	,removeEntry: function(Entry,Index) {
		flixel_util_FlxArrayUtil.fastSplice_flixel_system_debug_WatchEntry(this._watching,Entry);
		this._names.removeChild(Entry.nameDisplay);
		this._values.removeChild(Entry.valueDisplay);
		Entry.destroy();
		var _g1 = 0;
		var _g = this._watching.length;
		while(_g1 < _g) {
			var i = _g1++;
			this._watching[i].setY(i * 15);
		}
	}
	,removeAll: function() {
		var _g = 0;
		var _g1 = this._watching;
		while(_g < _g1.length) {
			var watchEntry = _g1[_g];
			++_g;
			this._names.removeChild(watchEntry.nameDisplay);
			this._values.removeChild(watchEntry.valueDisplay);
			watchEntry.destroy();
		}
		this._watching = [];
		this._quickWatchList = new haxe_ds_StringMap();
	}
	,update: function() {
		this.editing = false;
		var _g = 0;
		var _g1 = this._watching;
		while(_g < _g1.length) {
			var watchEntry = _g1[_g];
			++_g;
			if(!watchEntry.updateValue()) this.editing = true;
		}
	}
	,submit: function() {
		var _g = 0;
		var _g1 = this._watching;
		while(_g < _g1.length) {
			var watchEntry = _g1[_g];
			++_g;
			if(watchEntry.editing) watchEntry.submit();
		}
		this.editing = false;
	}
	,updateSize: function() {
		if((this._height | 0) < this._watching.length * 15 + 17) this._height = this._watching.length * 15 + 17;
		flixel_system_debug_Window.prototype.updateSize.call(this);
		this._values.set_x(this._width / 2 + 2);
		var _g = 0;
		var _g1 = this._watching;
		while(_g < _g1.length) {
			var watchEntry = _g1[_g];
			++_g;
			watchEntry.updateWidth(this._width / 2,this._width / 2 - 10);
		}
	}
	,__class__: flixel_system_debug_Watch
});
var flixel_system_debug_Tracker = function(Profile,Object,WindowTitle) {
	flixel_system_debug_Watch.call(this,true);
	flixel_system_debug_Tracker.initProfiles();
	this._object = Object;
	flixel_system_debug_Tracker.objectsBeingTracked.push(this._object);
	this.initWatchEntries(Profile);
	this._title.set_text(WindowTitle == null?(function($this) {
		var $r;
		var Obj = $this._object;
		var cl;
		if(js_Boot.__instanceof(Obj,Class)) cl = Obj; else cl = Type.getClass(Obj);
		var s = Type.getClassName(cl);
		if(s != null) {
			s = StringTools.replace(s,"::",".");
			var pos = s.lastIndexOf(".") + 1;
			s = HxOverrides.substr(s,pos,null);
		}
		$r = s;
		return $r;
	}(this)):WindowTitle);
	this.set_visible(true);
	var lastWatchEntryY = this._watching[this._watching.length - 1].nameDisplay.get_y();
	this.resize(200,lastWatchEntryY + 30);
	this.set_x(flixel_system_debug_Tracker._numTrackerWindows * 80);
	this.set_y(flixel_system_debug_Tracker._numTrackerWindows * 25 + 20);
	flixel_system_debug_Tracker._numTrackerWindows++;
	flixel_FlxG.signals.stateSwitched.add($bind(this,this.close));
};
$hxClasses["flixel.system.debug.Tracker"] = flixel_system_debug_Tracker;
flixel_system_debug_Tracker.__name__ = ["flixel","system","debug","Tracker"];
flixel_system_debug_Tracker.profiles = null;
flixel_system_debug_Tracker.addProfile = function(Profile) {
	if(Profile != null) flixel_system_debug_Tracker.profiles.push(Profile);
};
flixel_system_debug_Tracker.findProfile = function(Object) {
	flixel_system_debug_Tracker.initProfiles();
	var lastMatchingProfile = null;
	var _g = 0;
	var _g1 = flixel_system_debug_Tracker.profiles;
	while(_g < _g1.length) {
		var profile = _g1[_g];
		++_g;
		if(js_Boot.__instanceof(Object,profile.objectClass) || Object == profile.objectClass) lastMatchingProfile = profile;
	}
	return lastMatchingProfile;
};
flixel_system_debug_Tracker.onStateSwitch = function() {
	flixel_system_debug_Tracker._numTrackerWindows = 0;
};
flixel_system_debug_Tracker.initProfiles = function() {
	if(flixel_system_debug_Tracker.profiles == null) {
		flixel_system_debug_Tracker.profiles = [];
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(flixel_FlxG,["width","height","worldBounds.x","worldBounds.y","worldBounds.width","worldBounds.height","worldDivisions","updateFramerate","drawFramerate","elapsed","maxElapsed","autoPause","fixedTimestep","timeScale"]));
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(flixel_util_FlxPoint,["x","y"]));
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(flixel_util_FlxRect,["width","height"],[flixel_util_FlxPoint]));
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(flixel_FlxBasic,["active","visible","alive","exists"]));
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(flixel_FlxObject,["velocity","acceleration","drag","angle"],[flixel_util_FlxRect,flixel_FlxBasic]));
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(flixel_tile_FlxTilemap,["auto","widthInTiles","heightInTiles","totalTiles","scaleX","scaleY"],[flixel_FlxObject]));
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(flixel_FlxSprite,["frameWidth","frameHeight","alpha","origin","offset","scale"],[flixel_FlxObject]));
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(flixel_ui_FlxTypedButton,["status","labelAlphas"],[flixel_FlxSprite]));
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(flixel_ui_FlxBar,["min","max","range","pct","pxPerPercent","value"],[flixel_FlxSprite]));
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(flixel_text_FlxText,["text","size","font","embedded","bold","italic","wordWrap","borderSize","borderStyle"],[flixel_FlxSprite]));
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(flixel_group_FlxTypedGroup,["length","members.length","maxSize"],[flixel_FlxBasic]));
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(flixel_group_FlxSpriteGroup,null,[flixel_FlxSprite,flixel_group_FlxTypedGroup]));
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(flixel_FlxState,["persistentUpdate","persistentDraw","destroySubStates","bgColor"],[flixel_group_FlxTypedGroup]));
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(flixel_FlxCamera,["style","followLerp","followLead","deadzone","bounds","zoom","alpha","angle"],[flixel_FlxBasic,flixel_util_FlxRect]));
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(flixel_tweens_FlxTween,["active","duration","type","percent","finished","scale","backward","executions","startDelay","loopDelay"]));
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(flixel_util_FlxPath,["speed","angle","autoCenter","_nodeIndex","active","finished"]));
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(flixel_util_FlxTimer,["time","loops","active","finished","timeLeft","elapsedTime","loopsLeft","elapsedLoops","progress"]));
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(flixel_animation_FlxAnimationController,["frameIndex","frameName","name","paused","finished","frames"]));
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(flixel_input_mouse_FlxMouse,["screenX","screenY","wheel","visible","useSystemCursor","pressed","justPressed","justReleased","pressedMiddle","justPressedMiddle","justReleasedMiddle","pressedRight","justPressedRight","justReleasedRight"],[flixel_util_FlxPoint]));
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(flixel_input_touch_FlxTouch,["screenX","screenY","touchPointID","pressed","justPressed","justReleased","isActive"],[flixel_util_FlxPoint]));
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(flixel_input_gamepad_FlxGamepad,["id","deadZone","hat","ball","dpadUp","dpadDown","dpadLeft","dpadRight"]));
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(flixel_input_FlxSwipe,["ID","startPosition","endPosition","distance","angle","duration"]));
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(openfl_display_DisplayObject,["z","scaleX","scaleY","mouseX","mouseY","rotationX","rotationY","visible"],[flixel_util_FlxRect]));
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(openfl_geom_Point,null,[flixel_util_FlxPoint]));
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(openfl_geom_Rectangle,null,[flixel_util_FlxRect]));
		flixel_system_debug_Tracker.addProfile(new flixel_system_debug_TrackerProfile(openfl_geom_Matrix,["a","b","c","d","tx","ty"]));
	}
};
flixel_system_debug_Tracker.__super__ = flixel_system_debug_Watch;
flixel_system_debug_Tracker.prototype = $extend(flixel_system_debug_Watch.prototype,{
	_object: null
	,destroy: function() {
		flixel_FlxG.signals.stateSwitched.remove($bind(this,this.close));
		flixel_system_debug_Tracker._numTrackerWindows--;
		var x = this._object;
		HxOverrides.remove(flixel_system_debug_Tracker.objectsBeingTracked,x);
		this._object = null;
		flixel_system_debug_Watch.prototype.destroy.call(this);
	}
	,findProfileByClass: function(ObjectClass) {
		var _g = 0;
		var _g1 = flixel_system_debug_Tracker.profiles;
		while(_g < _g1.length) {
			var profile = _g1[_g];
			++_g;
			if(profile.objectClass == ObjectClass) return profile;
		}
		return null;
	}
	,initWatchEntries: function(Profile) {
		if(Profile != null) {
			this.addExtensions(Profile);
			this.addVariables(Profile.variables);
		}
	}
	,addExtensions: function(Profile) {
		if(Profile.extensions != null) {
			var _g = 0;
			var _g1 = Profile.extensions;
			while(_g < _g1.length) {
				var extension = _g1[_g];
				++_g;
				if(extension != null) {
					var extensionProfile = this.findProfileByClass(extension);
					if(extensionProfile != null) {
						this.addVariables(extensionProfile.variables);
						this.addExtensions(extensionProfile);
					}
				}
			}
		}
	}
	,addVariables: function(Variables) {
		if(Variables != null) {
			var _g = 0;
			while(_g < Variables.length) {
				var variable = Variables[_g];
				++_g;
				this.add(this._object,variable,variable);
			}
		}
	}
	,__class__: flixel_system_debug_Tracker
});
var flixel_system_debug_TrackerProfile = function(ObjectClass,Variables,Extensions) {
	this.objectClass = ObjectClass;
	this.variables = Variables;
	this.extensions = Extensions;
};
$hxClasses["flixel.system.debug.TrackerProfile"] = flixel_system_debug_TrackerProfile;
flixel_system_debug_TrackerProfile.__name__ = ["flixel","system","debug","TrackerProfile"];
flixel_system_debug_TrackerProfile.prototype = {
	objectClass: null
	,variables: null
	,extensions: null
	,toString: function() {
		return flixel_util_FlxStringUtil.getDebugString([flixel_util_LabelValuePair._pool.get().create("variables",this.variables),flixel_util_LabelValuePair._pool.get().create("extensions",this.extensions)]);
	}
	,__class__: flixel_system_debug_TrackerProfile
};
var flixel_system_debug__$VCR_GraphicOpen = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$VCR_GraphicOpen.preload != null) {
		this.image = flixel_system_debug__$VCR_GraphicOpen.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_system_debug__$VCR_GraphicOpen.resourceName),flixel_system_debug__$VCR_GraphicOpen.resourceType,function(b) {
		if(flixel_system_debug__$VCR_GraphicOpen.preload == null) flixel_system_debug__$VCR_GraphicOpen.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.system.debug._VCR.GraphicOpen"] = flixel_system_debug__$VCR_GraphicOpen;
flixel_system_debug__$VCR_GraphicOpen.__name__ = ["flixel","system","debug","_VCR","GraphicOpen"];
flixel_system_debug__$VCR_GraphicOpen.preload = null;
flixel_system_debug__$VCR_GraphicOpen.__super__ = openfl_display_BitmapData;
flixel_system_debug__$VCR_GraphicOpen.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$VCR_GraphicOpen
});
var flixel_system_debug__$VCR_GraphicPause = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$VCR_GraphicPause.preload != null) {
		this.image = flixel_system_debug__$VCR_GraphicPause.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_system_debug__$VCR_GraphicPause.resourceName),flixel_system_debug__$VCR_GraphicPause.resourceType,function(b) {
		if(flixel_system_debug__$VCR_GraphicPause.preload == null) flixel_system_debug__$VCR_GraphicPause.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.system.debug._VCR.GraphicPause"] = flixel_system_debug__$VCR_GraphicPause;
flixel_system_debug__$VCR_GraphicPause.__name__ = ["flixel","system","debug","_VCR","GraphicPause"];
flixel_system_debug__$VCR_GraphicPause.preload = null;
flixel_system_debug__$VCR_GraphicPause.__super__ = openfl_display_BitmapData;
flixel_system_debug__$VCR_GraphicPause.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$VCR_GraphicPause
});
var flixel_system_debug__$VCR_GraphicRecordOff = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$VCR_GraphicRecordOff.preload != null) {
		this.image = flixel_system_debug__$VCR_GraphicRecordOff.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_system_debug__$VCR_GraphicRecordOff.resourceName),flixel_system_debug__$VCR_GraphicRecordOff.resourceType,function(b) {
		if(flixel_system_debug__$VCR_GraphicRecordOff.preload == null) flixel_system_debug__$VCR_GraphicRecordOff.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.system.debug._VCR.GraphicRecordOff"] = flixel_system_debug__$VCR_GraphicRecordOff;
flixel_system_debug__$VCR_GraphicRecordOff.__name__ = ["flixel","system","debug","_VCR","GraphicRecordOff"];
flixel_system_debug__$VCR_GraphicRecordOff.preload = null;
flixel_system_debug__$VCR_GraphicRecordOff.__super__ = openfl_display_BitmapData;
flixel_system_debug__$VCR_GraphicRecordOff.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$VCR_GraphicRecordOff
});
var flixel_system_debug__$VCR_GraphicRecordOn = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$VCR_GraphicRecordOn.preload != null) {
		this.image = flixel_system_debug__$VCR_GraphicRecordOn.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_system_debug__$VCR_GraphicRecordOn.resourceName),flixel_system_debug__$VCR_GraphicRecordOn.resourceType,function(b) {
		if(flixel_system_debug__$VCR_GraphicRecordOn.preload == null) flixel_system_debug__$VCR_GraphicRecordOn.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.system.debug._VCR.GraphicRecordOn"] = flixel_system_debug__$VCR_GraphicRecordOn;
flixel_system_debug__$VCR_GraphicRecordOn.__name__ = ["flixel","system","debug","_VCR","GraphicRecordOn"];
flixel_system_debug__$VCR_GraphicRecordOn.preload = null;
flixel_system_debug__$VCR_GraphicRecordOn.__super__ = openfl_display_BitmapData;
flixel_system_debug__$VCR_GraphicRecordOn.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$VCR_GraphicRecordOn
});
var flixel_system_debug__$VCR_GraphicRestart = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$VCR_GraphicRestart.preload != null) {
		this.image = flixel_system_debug__$VCR_GraphicRestart.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_system_debug__$VCR_GraphicRestart.resourceName),flixel_system_debug__$VCR_GraphicRestart.resourceType,function(b) {
		if(flixel_system_debug__$VCR_GraphicRestart.preload == null) flixel_system_debug__$VCR_GraphicRestart.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.system.debug._VCR.GraphicRestart"] = flixel_system_debug__$VCR_GraphicRestart;
flixel_system_debug__$VCR_GraphicRestart.__name__ = ["flixel","system","debug","_VCR","GraphicRestart"];
flixel_system_debug__$VCR_GraphicRestart.preload = null;
flixel_system_debug__$VCR_GraphicRestart.__super__ = openfl_display_BitmapData;
flixel_system_debug__$VCR_GraphicRestart.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$VCR_GraphicRestart
});
var flixel_system_debug__$VCR_GraphicStep = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$VCR_GraphicStep.preload != null) {
		this.image = flixel_system_debug__$VCR_GraphicStep.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_system_debug__$VCR_GraphicStep.resourceName),flixel_system_debug__$VCR_GraphicStep.resourceType,function(b) {
		if(flixel_system_debug__$VCR_GraphicStep.preload == null) flixel_system_debug__$VCR_GraphicStep.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.system.debug._VCR.GraphicStep"] = flixel_system_debug__$VCR_GraphicStep;
flixel_system_debug__$VCR_GraphicStep.__name__ = ["flixel","system","debug","_VCR","GraphicStep"];
flixel_system_debug__$VCR_GraphicStep.preload = null;
flixel_system_debug__$VCR_GraphicStep.__super__ = openfl_display_BitmapData;
flixel_system_debug__$VCR_GraphicStep.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$VCR_GraphicStep
});
var flixel_system_debug__$VCR_GraphicStop = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$VCR_GraphicStop.preload != null) {
		this.image = flixel_system_debug__$VCR_GraphicStop.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_system_debug__$VCR_GraphicStop.resourceName),flixel_system_debug__$VCR_GraphicStop.resourceType,function(b) {
		if(flixel_system_debug__$VCR_GraphicStop.preload == null) flixel_system_debug__$VCR_GraphicStop.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.system.debug._VCR.GraphicStop"] = flixel_system_debug__$VCR_GraphicStop;
flixel_system_debug__$VCR_GraphicStop.__name__ = ["flixel","system","debug","_VCR","GraphicStop"];
flixel_system_debug__$VCR_GraphicStop.preload = null;
flixel_system_debug__$VCR_GraphicStop.__super__ = openfl_display_BitmapData;
flixel_system_debug__$VCR_GraphicStop.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$VCR_GraphicStop
});
var flixel_system_debug_VCR = function(Debugger) {
	this.runtime = 0;
	this.restartBtn = Debugger.addButton(flixel_system_debug_ButtonAlignment.MIDDLE,new flixel_system_debug__$VCR_GraphicRestart(0,0),flixel_FlxG.resetState);
	this.playbackToggleBtn = Debugger.addButton(flixel_system_debug_ButtonAlignment.MIDDLE,new flixel_system_debug__$VCR_GraphicPause(0,0),($_=flixel_FlxG.vcr,$bind($_,$_.pause)));
	this.stepBtn = Debugger.addButton(flixel_system_debug_ButtonAlignment.MIDDLE,new flixel_system_debug__$VCR_GraphicStep(0,0),$bind(this,this.onStep));
};
$hxClasses["flixel.system.debug.VCR"] = flixel_system_debug_VCR;
flixel_system_debug_VCR.__name__ = ["flixel","system","debug","VCR"];
flixel_system_debug_VCR.prototype = {
	runtimeDisplay: null
	,runtime: null
	,playbackToggleBtn: null
	,stepBtn: null
	,restartBtn: null
	,recordBtn: null
	,openBtn: null
	,onPause: function() {
		this.playbackToggleBtn.upHandler = ($_=flixel_FlxG.vcr,$bind($_,$_.resume));
		this.playbackToggleBtn.changeIcon(new flixel_system_debug_GraphicArrowRight(0,0));
	}
	,onResume: function() {
		this.playbackToggleBtn.upHandler = ($_=flixel_FlxG.vcr,$bind($_,$_.pause));
		this.playbackToggleBtn.changeIcon(new flixel_system_debug__$VCR_GraphicPause(0,0));
	}
	,onStep: function() {
		if(!flixel_FlxG.vcr.paused) flixel_FlxG.vcr.pause();
		flixel_FlxG.vcr.stepRequested = true;
	}
	,__class__: flixel_system_debug_VCR
};
var flixel_system_debug_WatchEntry = function(Y,NameWidth,ValueWidth,Obj,Field,Custom) {
	this.quickWatch = false;
	this.editing = false;
	if(Obj == null && Field == null && Custom != null) this.quickWatch = true;
	this.custom = Custom;
	if(!this.quickWatch) {
		this.object = Obj;
		this.field = Field;
		var tempArr = this.field.split(".");
		var l = tempArr.length;
		var tempObj = this.object;
		var tempVarName = "";
		var _g = 0;
		while(_g < l) {
			var i = _g++;
			tempVarName = tempArr[i];
			try {
				Reflect.getProperty(tempObj,tempVarName);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				flixel_FlxG.log.advanced("Watch: " + Std.string(tempObj) + " does not have a field '" + tempVarName + "'",flixel_system_debug_LogStyle.ERROR,true);
				tempVarName = null;
				break;
			}
			if(i < l - 1) tempObj = Reflect.getProperty(tempObj,tempVarName);
		}
		this.object = tempObj;
		this.field = tempVarName;
	}
	var fontName = flixel_system_FlxAssets.FONT_DEBUGGER;
	var color = 16777215;
	if(this.quickWatch) color = 10875373;
	this._whiteText = new openfl_text_TextFormat(fontName,12,color);
	this._blackText = new openfl_text_TextFormat(fontName,12,0);
	this.nameDisplay = new openfl_text_TextField();
	this.nameDisplay.set_y(Y);
	this.nameDisplay.set_multiline(false);
	this.nameDisplay.set_selectable(true);
	this.nameDisplay.set_embedFonts(true);
	this.nameDisplay.set_defaultTextFormat(this._whiteText);
	this.valueDisplay = new openfl_text_TextField();
	this.valueDisplay.set_y(Y);
	this.valueDisplay.set_height(20);
	this.valueDisplay.set_multiline(false);
	this.valueDisplay.set_selectable(true);
	this.valueDisplay.doubleClickEnabled = true;
	if(!this.quickWatch) {
		this.valueDisplay.addEventListener(openfl_events_KeyboardEvent.KEY_UP,$bind(this,this.onKeyUp));
		this.valueDisplay.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onMouseUp));
	}
	this.valueDisplay.set_background(false);
	this.valueDisplay.set_backgroundColor(16777215);
	this.valueDisplay.set_embedFonts(true);
	this.valueDisplay.set_defaultTextFormat(this._whiteText);
	this.updateWidth(NameWidth,ValueWidth);
};
$hxClasses["flixel.system.debug.WatchEntry"] = flixel_system_debug_WatchEntry;
flixel_system_debug_WatchEntry.__name__ = ["flixel","system","debug","WatchEntry"];
flixel_system_debug_WatchEntry.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_system_debug_WatchEntry.prototype = {
	object: null
	,field: null
	,custom: null
	,nameDisplay: null
	,valueDisplay: null
	,editing: null
	,oldValue: null
	,_whiteText: null
	,_blackText: null
	,quickWatch: null
	,destroy: function() {
		this.object = null;
		this.oldValue = null;
		this.nameDisplay = null;
		this.field = null;
		this.custom = null;
		if(this.valueDisplay != null) {
			this.valueDisplay.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onMouseUp));
			this.valueDisplay.removeEventListener(openfl_events_KeyboardEvent.KEY_UP,$bind(this,this.onKeyUp));
			this.valueDisplay = null;
		}
	}
	,setY: function(Y) {
		this.nameDisplay.set_y(Y);
		this.valueDisplay.set_y(Y);
	}
	,updateWidth: function(NameWidth,ValueWidth) {
		this.nameDisplay.set_width(NameWidth);
		this.valueDisplay.set_width(ValueWidth);
		if(this.custom != null) this.nameDisplay.set_text(this.custom); else if(this.field != null) {
			this.nameDisplay.set_text("");
			if(NameWidth > 120) this.nameDisplay.appendText((function($this) {
				var $r;
				var Obj = $this.object;
				var cl;
				if(js_Boot.__instanceof(Obj,Class)) cl = Obj; else cl = Type.getClass(Obj);
				var s = Type.getClassName(cl);
				if(s != null) {
					s = StringTools.replace(s,"::",".");
					var pos = s.lastIndexOf(".") + 1;
					s = HxOverrides.substr(s,pos,null);
				}
				$r = s;
				return $r;
			}(this)) + ".");
			this.nameDisplay.appendText(this.field);
		}
	}
	,updateValue: function() {
		if(this.editing || this.quickWatch) return false;
		var property = Reflect.getProperty(this.object,this.field);
		this.valueDisplay.set_text(Std.string(property));
		return true;
	}
	,onMouseUp: function(FlashEvent) {
		this.editing = true;
		flixel_FlxG.keys.enabled = false;
		this.oldValue = Reflect.getProperty(this.object,this.field);
		this.valueDisplay.set_type(openfl_text_TextFieldType.INPUT);
		this.valueDisplay.setTextFormat(this._blackText);
		this.valueDisplay.set_background(true);
	}
	,onKeyUp: function(FlashEvent) {
		if(FlashEvent.keyCode == 13 || FlashEvent.keyCode == 9 || FlashEvent.keyCode == 27) {
			if(FlashEvent.keyCode == 27) this.cancel(); else this.submit();
		}
	}
	,cancel: function() {
		this.valueDisplay.set_text(this.oldValue.toString());
		this.doneEditing();
	}
	,submit: function() {
		var property = Reflect.getProperty(this.object,this.field);
		if(js_Boot.__instanceof(property,flixel_util_FlxPoint)) {
			var xString = this.valueDisplay.get_text().split(" |")[0];
			xString = xString.substring(3,xString.length);
			var xValue = parseFloat(xString);
			var yString = this.valueDisplay.get_text().split("| ")[1];
			yString = yString.substring(3,yString.length);
			var yValue = parseFloat(yString);
			if(!isNaN(xValue)) property.x = xValue;
			if(!isNaN(yValue)) property.y = yValue;
		} else Reflect.setProperty(this.object,this.field,this.valueDisplay.get_text());
		this.doneEditing();
	}
	,toString: function() {
		return flixel_util_FlxStringUtil.getDebugString([flixel_util_LabelValuePair.weak("object",(function($this) {
			var $r;
			var Obj = $this.object;
			var cl;
			if(js_Boot.__instanceof(Obj,Class)) cl = Obj; else cl = Type.getClass(Obj);
			var s = Type.getClassName(cl);
			if(s != null) {
				s = StringTools.replace(s,"::",".");
				var pos = s.lastIndexOf(".") + 1;
				s = HxOverrides.substr(s,pos,null);
			}
			$r = s;
			return $r;
		}(this))),flixel_util_LabelValuePair._pool.get().create("field",this.field)]);
	}
	,doneEditing: function() {
		this.valueDisplay.set_type(openfl_text_TextFieldType.DYNAMIC);
		this.valueDisplay.setTextFormat(this._whiteText);
		this.valueDisplay.set_defaultTextFormat(this._whiteText);
		this.valueDisplay.set_background(false);
		this.editing = false;
		flixel_FlxG.keys.enabled = true;
	}
	,__class__: flixel_system_debug_WatchEntry
};
var flixel_system_debug__$Window_GraphicWindowHandle = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$Window_GraphicWindowHandle.preload != null) {
		this.image = flixel_system_debug__$Window_GraphicWindowHandle.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_system_debug__$Window_GraphicWindowHandle.resourceName),flixel_system_debug__$Window_GraphicWindowHandle.resourceType,function(b) {
		if(flixel_system_debug__$Window_GraphicWindowHandle.preload == null) flixel_system_debug__$Window_GraphicWindowHandle.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.system.debug._Window.GraphicWindowHandle"] = flixel_system_debug__$Window_GraphicWindowHandle;
flixel_system_debug__$Window_GraphicWindowHandle.__name__ = ["flixel","system","debug","_Window","GraphicWindowHandle"];
flixel_system_debug__$Window_GraphicWindowHandle.preload = null;
flixel_system_debug__$Window_GraphicWindowHandle.__super__ = openfl_display_BitmapData;
flixel_system_debug__$Window_GraphicWindowHandle.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$Window_GraphicWindowHandle
});
var flixel_system_debug__$Window_GraphicCloseButton = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$Window_GraphicCloseButton.preload != null) {
		this.image = flixel_system_debug__$Window_GraphicCloseButton.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_system_debug__$Window_GraphicCloseButton.resourceName),flixel_system_debug__$Window_GraphicCloseButton.resourceType,function(b) {
		if(flixel_system_debug__$Window_GraphicCloseButton.preload == null) flixel_system_debug__$Window_GraphicCloseButton.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.system.debug._Window.GraphicCloseButton"] = flixel_system_debug__$Window_GraphicCloseButton;
flixel_system_debug__$Window_GraphicCloseButton.__name__ = ["flixel","system","debug","_Window","GraphicCloseButton"];
flixel_system_debug__$Window_GraphicCloseButton.preload = null;
flixel_system_debug__$Window_GraphicCloseButton.__super__ = openfl_display_BitmapData;
flixel_system_debug__$Window_GraphicCloseButton.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$Window_GraphicCloseButton
});
var flixel_system_layer_DrawStackItem = function() {
	this.antialiasing = false;
	this.initialized = false;
	this.blending = 0;
	this.colored = false;
	this.position = 0;
	this.drawData = [];
};
$hxClasses["flixel.system.layer.DrawStackItem"] = flixel_system_layer_DrawStackItem;
flixel_system_layer_DrawStackItem.__name__ = ["flixel","system","layer","DrawStackItem"];
flixel_system_layer_DrawStackItem.prototype = {
	graphics: null
	,drawData: null
	,position: null
	,next: null
	,colored: null
	,blending: null
	,initialized: null
	,antialiasing: null
	,reset: function() {
		this.graphics = null;
		this.initialized = false;
		this.antialiasing = false;
		this.position = 0;
	}
	,dispose: function() {
		this.graphics = null;
		this.drawData = null;
		this.next = null;
	}
	,__class__: flixel_system_layer_DrawStackItem
};
var flixel_system_layer_Region = function(startX,startY,tileWidth,tileHeight,spacingX,spacingY,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(spacingY == null) spacingY = 0;
	if(spacingX == null) spacingX = 0;
	if(tileHeight == null) tileHeight = 0;
	if(tileWidth == null) tileWidth = 0;
	if(startY == null) startY = 0;
	if(startX == null) startX = 0;
	this.startX = startX;
	this.startY = startY;
	this.tileWidth = tileWidth;
	this.tileHeight = tileHeight;
	this.spacingX = spacingX;
	this.spacingY = spacingY;
	this.width = width;
	this.height = height;
};
$hxClasses["flixel.system.layer.Region"] = flixel_system_layer_Region;
flixel_system_layer_Region.__name__ = ["flixel","system","layer","Region"];
flixel_system_layer_Region.prototype = {
	startX: null
	,startY: null
	,width: null
	,height: null
	,tileWidth: null
	,tileHeight: null
	,spacingX: null
	,spacingY: null
	,numTiles: null
	,get_numTiles: function() {
		return this.get_numRows() * this.get_numCols();
	}
	,numRows: null
	,get_numRows: function() {
		var num = 1;
		if(this.tileHeight != 0) num = (this.height + this.spacingY) / (this.tileHeight + this.spacingY) | 0;
		return num;
	}
	,numCols: null
	,get_numCols: function() {
		var num = 1;
		if(this.tileWidth != 0) num = (this.width + this.spacingX) / (this.tileWidth + this.spacingX) | 0;
		return num;
	}
	,clone: function() {
		return new flixel_system_layer_Region(this.startX,this.startY,this.tileWidth,this.tileHeight,this.spacingX,this.spacingY,this.width,this.height);
	}
	,__class__: flixel_system_layer_Region
	,__properties__: {get_numCols:"get_numCols",get_numRows:"get_numRows",get_numTiles:"get_numTiles"}
};
var flixel_system_layer_TileSheetData = function(Bitmap) {
	this.bitmap = Bitmap;
	this.flxSpriteFrames = new haxe_ds_StringMap();
	this.flxFrames = new haxe_ds_StringMap();
	this.frameNames = [];
	this.framesArr = [];
};
$hxClasses["flixel.system.layer.TileSheetData"] = flixel_system_layer_TileSheetData;
flixel_system_layer_TileSheetData.__name__ = ["flixel","system","layer","TileSheetData"];
flixel_system_layer_TileSheetData.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_system_layer_TileSheetData.prototype = {
	flxSpriteFrames: null
	,flxFrames: null
	,frameNames: null
	,framesArr: null
	,bitmap: null
	,getFrame: function(name) {
		return this.flxFrames.get(name);
	}
	,getSpriteSheetFrames: function(region,origin) {
		var bitmapWidth = region.width;
		var bitmapHeight = region.height;
		var startX = region.startX;
		var startY = region.startY;
		var endX = startX + bitmapWidth;
		var endY = startY + bitmapHeight;
		var xSpacing = region.spacingX;
		var ySpacing = region.spacingY;
		var width;
		if(region.tileWidth == 0) width = bitmapWidth; else width = region.tileWidth;
		var height;
		if(region.tileHeight == 0) height = bitmapHeight; else height = region.tileHeight;
		var pointX = 0.5 * width;
		var pointY = 0.5 * height;
		if(origin != null) {
			pointX = origin.x;
			pointY = origin.y;
		}
		var key = width + "_" + height + "_" + startX + "_" + startY + "_" + endX + "_" + endY + "_" + xSpacing + "_" + ySpacing + "_" + pointX + "_" + pointY;
		if(this.flxSpriteFrames.exists(key)) return this.flxSpriteFrames.get(key);
		var numRows = region.get_numRows();
		var numCols = region.get_numCols();
		var tempPoint = origin;
		if(origin == null) tempPoint = new openfl_geom_Point(pointX,pointY);
		var spriteData = new flixel_system_layer_frames_FlxSpriteFrames(key);
		var frame;
		var tempRect;
		var spacedWidth = width + xSpacing;
		var spacedHeight = height + ySpacing;
		var _g1 = 0;
		var _g = numRows;
		while(_g1 < _g) {
			var j = _g1++;
			var _g3 = 0;
			var _g2 = numCols;
			while(_g3 < _g2) {
				var i = _g3++;
				tempRect = new openfl_geom_Rectangle(startX + i * spacedWidth,startY + j * spacedHeight,width,height);
				frame = this.addSpriteSheetFrame(tempRect,tempPoint);
				spriteData.addFrame(frame);
			}
		}
		this.flxSpriteFrames.set(key,spriteData);
		return spriteData;
	}
	,getSpriteSheetFrameKey: function(rect,point) {
		return rect.x + "_" + rect.y + "_" + rect.width + "_" + rect.height + "_" + point.x + "_" + point.y;
	}
	,getKeyForSpriteSheetFrames: function(width,height,startX,startY,endX,endY,xSpacing,ySpacing,pointX,pointY) {
		return width + "_" + height + "_" + startX + "_" + startY + "_" + endX + "_" + endY + "_" + xSpacing + "_" + ySpacing + "_" + pointX + "_" + pointY;
	}
	,containsSpriteSheetFrames: function(width,height,startX,startY,endX,endY,xSpacing,ySpacing,pointX,pointY) {
		var key = width + "_" + height + "_" + startX + "_" + startY + "_" + endX + "_" + endY + "_" + xSpacing + "_" + ySpacing + "_" + pointX + "_" + pointY;
		return this.flxSpriteFrames.exists(key);
	}
	,addSpriteSheetFrame: function(rect,point) {
		var key = rect.x + "_" + rect.y + "_" + rect.width + "_" + rect.height + "_" + point.x + "_" + point.y;
		if(this.flxFrames.exists(key)) return this.flxFrames.get(key);
		var frame = new flixel_system_layer_frames_FlxFrame(this);
		frame.name = key;
		frame.frame = rect;
		frame.trimmed = false;
		frame.sourceSize.set(rect.width,rect.height);
		frame.offset.set(0,0);
		frame.center.set(0.5 * rect.width,0.5 * rect.height);
		this.flxFrames.set(key,frame);
		this.frameNames.push(key);
		this.framesArr.push(frame);
		return frame;
	}
	,containsFrame: function(key) {
		return this.flxFrames.exists(key);
	}
	,destroy: function() {
		this.bitmap = null;
		var $it0 = this.flxSpriteFrames.iterator();
		while( $it0.hasNext() ) {
			var frames = $it0.next();
			frames.destroy();
		}
		this.flxSpriteFrames = null;
		var _g = 0;
		var _g1 = this.framesArr;
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			frame.destroy();
		}
		this.flxFrames = null;
		this.frameNames = null;
		this.framesArr = null;
	}
	,getTexturePackerFrames: function(data,startX,startY) {
		if(startY == null) startY = 0;
		if(startX == null) startX = 0;
		if(this.flxSpriteFrames.exists(data.assetName)) return this.flxSpriteFrames.get(data.assetName);
		data.parseData();
		var frame;
		var packerFrames = new flixel_system_layer_frames_FlxSpriteFrames(data.assetName);
		var l = data.frames.length;
		var _g = 0;
		while(_g < l) {
			var i = _g++;
			frame = this.addTexturePackerFrame(data.frames[i],startX,startY);
			packerFrames.addFrame(frame);
		}
		this.flxSpriteFrames.set(data.assetName,packerFrames);
		return packerFrames;
	}
	,addTexturePackerFrame: function(frameData,startX,startY) {
		if(startY == null) startY = 0;
		if(startX == null) startX = 0;
		var key = frameData.name;
		if(this.flxFrames.exists(key)) return this.flxFrames.get(key);
		var texFrame = null;
		if(frameData.rotated) texFrame = new flixel_system_layer_frames_FlxRotatedFrame(this); else texFrame = new flixel_system_layer_frames_FlxFrame(this);
		texFrame.trimmed = frameData.trimmed;
		texFrame.name = key;
		texFrame.sourceSize.copyFrom(frameData.sourceSize);
		texFrame.offset.copyFrom(frameData.offset);
		texFrame.center.set(0,0);
		texFrame.frame = frameData.frame.clone();
		if(frameData.rotated) texFrame.center.set(texFrame.frame.height * 0.5 + texFrame.offset.x,texFrame.frame.width * 0.5 + texFrame.offset.y); else texFrame.center.set(texFrame.frame.width * 0.5 + texFrame.offset.x,texFrame.frame.height * 0.5 + texFrame.offset.y);
		texFrame.additionalAngle = frameData.additionalAngle;
		this.flxFrames.set(key,texFrame);
		this.frameNames.push(key);
		this.framesArr.push(texFrame);
		return texFrame;
	}
	,destroyFrameBitmapDatas: function() {
		var numFrames = this.frameNames.length;
		var _g = 0;
		var _g1 = this.framesArr;
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			frame.destroyBitmapDatas();
		}
	}
	,__class__: flixel_system_layer_TileSheetData
};
var openfl_geom_Point = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = ["openfl","geom","Point"];
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl_geom_Point.prototype = {
	length: null
	,x: null
	,y: null
	,add: function(v) {
		return new openfl_geom_Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl_geom_Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl_geom_Point
	,__properties__: {get_length:"get_length"}
};
var openfl_display_Tilesheet = function(image) {
	this.__bitmap = image;
	this.__centerPoints = [];
	this.__tileRects = [];
	this.__tileUVs = [];
	this.__rectTile = new openfl_geom_Rectangle();
	this.__rectUV = new openfl_geom_Rectangle();
	this.__point = new openfl_geom_Point();
};
$hxClasses["openfl.display.Tilesheet"] = openfl_display_Tilesheet;
openfl_display_Tilesheet.__name__ = ["openfl","display","Tilesheet"];
openfl_display_Tilesheet.prototype = {
	__bitmap: null
	,__centerPoints: null
	,__tileRects: null
	,__tileUVs: null
	,__rectTile: null
	,__rectUV: null
	,__point: null
	,addTileRect: function(rectangle,centerPoint) {
		this.__tileRects.push(rectangle);
		if(centerPoint == null) centerPoint = openfl_display_Tilesheet.__defaultPoint;
		this.__centerPoints.push(centerPoint);
		this.__tileUVs.push(new openfl_geom_Rectangle(rectangle.get_left() / this.__bitmap.width,rectangle.get_top() / this.__bitmap.height,rectangle.get_right() / this.__bitmap.width,rectangle.get_bottom() / this.__bitmap.height));
		return this.__tileRects.length - 1;
	}
	,drawTiles: function(graphics,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		graphics.drawTiles(this,tileData,smooth,flags,null,count);
	}
	,getTileCenter: function(index) {
		return this.__centerPoints[index];
	}
	,getTileRect: function(index) {
		return this.__tileRects[index];
	}
	,getTileUVs: function(index) {
		return this.__tileUVs[index];
	}
	,__class__: openfl_display_Tilesheet
};
var flixel_system_layer_TileSheetExt = function(bitmap) {
	this.numTiles = 0;
	openfl_display_Tilesheet.call(this,bitmap);
	this.tileIDs = new haxe_ds_StringMap();
	this.tileOrder = [];
};
$hxClasses["flixel.system.layer.TileSheetExt"] = flixel_system_layer_TileSheetExt;
flixel_system_layer_TileSheetExt.__name__ = ["flixel","system","layer","TileSheetExt"];
flixel_system_layer_TileSheetExt.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_system_layer_TileSheetExt.__super__ = openfl_display_Tilesheet;
flixel_system_layer_TileSheetExt.prototype = $extend(openfl_display_Tilesheet.prototype,{
	numTiles: null
	,tileIDs: null
	,tileOrder: null
	,rebuildFromOld: function(old) {
		var _g1 = 0;
		var _g = old.tileOrder.length;
		while(_g1 < _g) {
			var i = _g1++;
			var tileName = old.tileOrder[i];
			var tileObj = old.tileIDs.get(tileName);
			this.addTileRect(tileObj.rect,tileObj.point);
		}
		this.tileIDs = old.tileIDs;
		this.tileOrder = old.tileOrder;
		this.numTiles = old.numTiles;
		old.tileIDs = null;
		old.tileOrder = null;
		flixel_util_FlxDestroyUtil.destroy(old);
	}
	,getKey: function(rect,point) {
		var key = rect.x + "_" + rect.y + "_" + rect.width + "_" + rect.height + "_";
		if(point != null) key = key + point.x + "_" + point.y;
		return key;
	}
	,addTileRectID: function(rect,point) {
		var key = this.getKey(rect,point);
		if(this.tileIDs.exists(key)) return this.tileIDs.get(key).id;
		this.addTileRect(rect,point);
		var tileID = this.numTiles;
		this.numTiles++;
		this.tileOrder[tileID] = key;
		var value = new flixel_system_layer__$TileSheetExt_RectPointTileID(tileID,rect,point);
		this.tileIDs.set(key,value);
		return tileID;
	}
	,destroy: function() {
		this.tileOrder = null;
		if(this.tileIDs != null) {
			var $it0 = this.tileIDs.iterator();
			while( $it0.hasNext() ) {
				var tileObj = $it0.next();
				flixel_util_FlxDestroyUtil.destroy(tileObj);
			}
		}
		this.tileIDs = null;
	}
	,__class__: flixel_system_layer_TileSheetExt
});
var flixel_system_layer__$TileSheetExt_RectPointTileID = function(id,rect,point) {
	this.id = id;
	this.rect = rect;
	this.point = point;
};
$hxClasses["flixel.system.layer._TileSheetExt.RectPointTileID"] = flixel_system_layer__$TileSheetExt_RectPointTileID;
flixel_system_layer__$TileSheetExt_RectPointTileID.__name__ = ["flixel","system","layer","_TileSheetExt","RectPointTileID"];
flixel_system_layer__$TileSheetExt_RectPointTileID.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_system_layer__$TileSheetExt_RectPointTileID.prototype = {
	rect: null
	,point: null
	,id: null
	,destroy: function() {
		this.rect = null;
		this.point = null;
	}
	,__class__: flixel_system_layer__$TileSheetExt_RectPointTileID
};
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = ["openfl","geom","Matrix"];
openfl_geom_Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,__array: null
	,clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(column == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.x = 0;
			vector3D.y = 0;
			vector3D.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl_geom_Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		return matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c && this.d == matrix.d;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,toArray: function(transpose) {
		if(transpose == null) transpose = false;
		if(this.__array == null) {
			var this1;
			this1 = new Float32Array(9);
			this.__array = this1;
		}
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__toMatrix3: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,__transformInversePoint: function(point) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			point.x = -this.tx;
			point.y = -this.ty;
		} else {
			var px = 1.0 / norm * (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
			point.y = 1.0 / norm * (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
			point.x = px;
		}
	}
	,__transformInverseX: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) return -this.tx; else return 1.0 / norm * (this.c * (this.ty - py) + this.d * (px - this.tx));
	}
	,__transformInverseY: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) return -this.ty; else return 1.0 / norm * (this.a * (py - this.ty) + this.b * (this.tx - px));
	}
	,__transformPoint: function(point) {
		var px = point.x;
		var py = point.y;
		point.x = px * this.a + py * this.c + this.tx;
		point.y = px * this.b + py * this.d + this.ty;
	}
	,__transformX: function(px,py) {
		return px * this.a + py * this.c + this.tx;
	}
	,__transformY: function(px,py) {
		return px * this.b + py * this.d + this.ty;
	}
	,__translateTransformed: function(px,py) {
		this.tx = px * this.a + py * this.c + this.tx;
		this.ty = px * this.b + py * this.d + this.ty;
	}
	,__class__: openfl_geom_Matrix
};
var flixel_system_layer_frames_FlxFrame = function(tileSheet) {
	this.additionalAngle = 0;
	this.tileID = -1;
	this.trimmed = false;
	this._tileSheet = tileSheet;
	this.additionalAngle = 0;
	this.sourceSize = flixel_util_FlxPoint.get(null,null);
	this.offset = flixel_util_FlxPoint.get(null,null);
	this.center = flixel_util_FlxPoint.get(null,null);
	this.type = flixel_system_layer_frames_FrameType.REGULAR;
};
$hxClasses["flixel.system.layer.frames.FlxFrame"] = flixel_system_layer_frames_FlxFrame;
flixel_system_layer_frames_FlxFrame.__name__ = ["flixel","system","layer","frames","FlxFrame"];
flixel_system_layer_frames_FlxFrame.prototype = {
	name: null
	,frame: null
	,trimmed: null
	,tileID: null
	,additionalAngle: null
	,sourceSize: null
	,offset: null
	,center: null
	,type: null
	,_bitmapData: null
	,_hReversedBitmapData: null
	,_vReversedBitmapData: null
	,_hvReversedBitmapData: null
	,_tileSheet: null
	,paintOnBitmap: function(bmd) {
		var result = null;
		if(bmd != null && (bmd.width == this.sourceSize.x && bmd.height == this.sourceSize.y)) {
			result = bmd;
			var w = bmd.width;
			var h = bmd.height;
			if(w > this.frame.width || h > this.frame.height) {
				flixel_system_layer_frames_FlxFrame.RECT.x = flixel_system_layer_frames_FlxFrame.RECT.y = 0;
				flixel_system_layer_frames_FlxFrame.RECT.width = w;
				flixel_system_layer_frames_FlxFrame.RECT.height = h;
				bmd.fillRect(flixel_system_layer_frames_FlxFrame.RECT,0);
			}
		} else if(bmd != null) bmd.dispose();
		if(result == null) result = new openfl_display_BitmapData(this.sourceSize.x | 0,this.sourceSize.y | 0,true,0);
		flixel_system_layer_frames_FlxFrame.POINT.x = this.offset.x;
		flixel_system_layer_frames_FlxFrame.POINT.y = this.offset.y;
		result.copyPixels(this._tileSheet.bitmap,this.frame,flixel_system_layer_frames_FlxFrame.POINT);
		return result;
	}
	,getBitmap: function() {
		if(this._bitmapData != null) return this._bitmapData;
		this._bitmapData = this.paintOnBitmap();
		return this._bitmapData;
	}
	,getHReversedBitmap: function() {
		if(this._hReversedBitmapData != null) return this._hReversedBitmapData;
		var normalFrame = this.getBitmap();
		flixel_system_layer_frames_FlxFrame.MATRIX.identity();
		flixel_system_layer_frames_FlxFrame.MATRIX.scale(-1,1);
		flixel_system_layer_frames_FlxFrame.MATRIX.translate(this.sourceSize.x | 0,0);
		this._hReversedBitmapData = new openfl_display_BitmapData(this.sourceSize.x | 0,this.sourceSize.y | 0,true,0);
		this._hReversedBitmapData.draw(normalFrame,flixel_system_layer_frames_FlxFrame.MATRIX);
		return this._hReversedBitmapData;
	}
	,getVReversedBitmap: function() {
		if(this._vReversedBitmapData != null) return this._vReversedBitmapData;
		var normalFrame = this.getBitmap();
		flixel_system_layer_frames_FlxFrame.MATRIX.identity();
		flixel_system_layer_frames_FlxFrame.MATRIX.scale(1,-1);
		flixel_system_layer_frames_FlxFrame.MATRIX.translate(0,this.sourceSize.y | 0);
		this._vReversedBitmapData = new openfl_display_BitmapData(this.sourceSize.x | 0,this.sourceSize.y | 0,true,0);
		this._vReversedBitmapData.draw(normalFrame,flixel_system_layer_frames_FlxFrame.MATRIX);
		return this._vReversedBitmapData;
	}
	,getHVReversedBitmap: function() {
		if(this._hvReversedBitmapData != null) return this._hvReversedBitmapData;
		var normalFrame = this.getBitmap();
		flixel_system_layer_frames_FlxFrame.MATRIX.identity();
		flixel_system_layer_frames_FlxFrame.MATRIX.scale(-1,-1);
		flixel_system_layer_frames_FlxFrame.MATRIX.translate(this.sourceSize.x | 0,this.sourceSize.y | 0);
		this._hvReversedBitmapData = new openfl_display_BitmapData(this.sourceSize.x | 0,this.sourceSize.y | 0,true,0);
		this._hvReversedBitmapData.draw(normalFrame,flixel_system_layer_frames_FlxFrame.MATRIX);
		return this._hvReversedBitmapData;
	}
	,destroy: function() {
		this.name = null;
		this.frame = null;
		this._tileSheet = null;
		this.sourceSize = flixel_util_FlxDestroyUtil.put(this.sourceSize);
		this.offset = flixel_util_FlxDestroyUtil.put(this.offset);
		this.center = flixel_util_FlxDestroyUtil.put(this.center);
		this.destroyBitmapDatas();
	}
	,destroyBitmapDatas: function() {
		this._bitmapData = flixel_util_FlxDestroyUtil.dispose(this._bitmapData);
		this._hReversedBitmapData = flixel_util_FlxDestroyUtil.dispose(this._hReversedBitmapData);
		this._vReversedBitmapData = flixel_util_FlxDestroyUtil.dispose(this._vReversedBitmapData);
		this._hvReversedBitmapData = flixel_util_FlxDestroyUtil.dispose(this._hvReversedBitmapData);
	}
	,__class__: flixel_system_layer_frames_FlxFrame
};
var flixel_system_layer_frames_FlxRotatedFrame = function(tileSheet) {
	flixel_system_layer_frames_FlxFrame.call(this,tileSheet);
	this.type = flixel_system_layer_frames_FrameType.ROTATED;
};
$hxClasses["flixel.system.layer.frames.FlxRotatedFrame"] = flixel_system_layer_frames_FlxRotatedFrame;
flixel_system_layer_frames_FlxRotatedFrame.__name__ = ["flixel","system","layer","frames","FlxRotatedFrame"];
flixel_system_layer_frames_FlxRotatedFrame.__super__ = flixel_system_layer_frames_FlxFrame;
flixel_system_layer_frames_FlxRotatedFrame.prototype = $extend(flixel_system_layer_frames_FlxFrame.prototype,{
	paintOnBitmap: function(bmd) {
		var result = null;
		if(bmd != null && (bmd.width == this.sourceSize.x && bmd.height == this.sourceSize.y)) result = bmd; else if(bmd != null) bmd.dispose();
		if(result == null) result = new openfl_display_BitmapData(this.sourceSize.x | 0,this.sourceSize.y | 0,true,0);
		var temp = new openfl_display_BitmapData(this.frame.width | 0,this.frame.height | 0,true,0);
		flixel_system_layer_frames_FlxFrame.POINT.x = flixel_system_layer_frames_FlxFrame.POINT.y = 0;
		temp.copyPixels(this._tileSheet.bitmap,this.frame,flixel_system_layer_frames_FlxFrame.POINT);
		flixel_system_layer_frames_FlxFrame.MATRIX.identity();
		flixel_system_layer_frames_FlxFrame.MATRIX.translate(-0.5 * this.frame.width,-0.5 * this.frame.height);
		flixel_system_layer_frames_FlxFrame.MATRIX.rotate(-90. * (Math.PI / 180));
		flixel_system_layer_frames_FlxFrame.MATRIX.translate(this.offset.x + 0.5 * this.frame.height,this.offset.y + 0.5 * this.frame.width);
		result = new openfl_display_BitmapData(this.sourceSize.x | 0,this.sourceSize.y | 0,true,0);
		result.draw(temp,flixel_system_layer_frames_FlxFrame.MATRIX);
		temp.dispose();
		return result;
	}
	,__class__: flixel_system_layer_frames_FlxRotatedFrame
});
var flixel_system_layer_frames_FlxSpriteFrames = function(name) {
	this.name = name;
	this.frames = [];
	this.framesHash = new haxe_ds_StringMap();
};
$hxClasses["flixel.system.layer.frames.FlxSpriteFrames"] = flixel_system_layer_frames_FlxSpriteFrames;
flixel_system_layer_frames_FlxSpriteFrames.__name__ = ["flixel","system","layer","frames","FlxSpriteFrames"];
flixel_system_layer_frames_FlxSpriteFrames.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_system_layer_frames_FlxSpriteFrames.prototype = {
	frames: null
	,framesHash: null
	,name: null
	,addFrame: function(frame) {
		this.frames.push(frame);
		this.framesHash.set(frame.name,frame);
	}
	,destroy: function() {
		this.frames = null;
		this.framesHash = null;
		this.name = null;
	}
	,__class__: flixel_system_layer_frames_FlxSpriteFrames
};
var flixel_system_layer_frames_FrameType = $hxClasses["flixel.system.layer.frames.FrameType"] = { __ename__ : ["flixel","system","layer","frames","FrameType"], __constructs__ : ["REGULAR","ROTATED"] };
flixel_system_layer_frames_FrameType.REGULAR = ["REGULAR",0];
flixel_system_layer_frames_FrameType.REGULAR.toString = $estr;
flixel_system_layer_frames_FrameType.REGULAR.__enum__ = flixel_system_layer_frames_FrameType;
flixel_system_layer_frames_FrameType.ROTATED = ["ROTATED",1];
flixel_system_layer_frames_FrameType.ROTATED.toString = $estr;
flixel_system_layer_frames_FrameType.ROTATED.__enum__ = flixel_system_layer_frames_FrameType;
var flixel_system_replay_CodeValuePair = function(Code,Value) {
	if(Value == null) Value = 0;
	if(Code == null) Code = 0;
	this.code = Code;
	this.value = Value;
};
$hxClasses["flixel.system.replay.CodeValuePair"] = flixel_system_replay_CodeValuePair;
flixel_system_replay_CodeValuePair.__name__ = ["flixel","system","replay","CodeValuePair"];
flixel_system_replay_CodeValuePair.prototype = {
	code: null
	,value: null
	,__class__: flixel_system_replay_CodeValuePair
};
var flixel_system_replay_FlxReplay = function() {
	this.seed = 0;
	this.frame = 0;
	this.frameCount = 0;
	this.finished = false;
	this._frames = null;
	this._capacity = 0;
	this._marker = 0;
};
$hxClasses["flixel.system.replay.FlxReplay"] = flixel_system_replay_FlxReplay;
flixel_system_replay_FlxReplay.__name__ = ["flixel","system","replay","FlxReplay"];
flixel_system_replay_FlxReplay.prototype = {
	seed: null
	,frame: null
	,frameCount: null
	,finished: null
	,_frames: null
	,_capacity: null
	,_marker: null
	,destroy: function() {
		if(this._frames == null) return;
		var i = this.frameCount - 1;
		while(i >= 0) this._frames[i--].destroy();
		this._frames = null;
	}
	,create: function(Seed) {
		this.destroy();
		this.init();
		this.seed = Seed;
		this.rewind();
	}
	,load: function(FileContents) {
		this.init();
		var lines = FileContents.split("\n");
		this.seed = Std.parseInt(lines[0]);
		var line;
		var i = 1;
		var l = lines.length;
		while(i < l) {
			line = lines[i++];
			if(line.length > 3) {
				this._frames[this.frameCount++] = new flixel_system_replay_FrameRecord().load(line);
				if(this.frameCount >= this._capacity) {
					this._capacity *= 2;
					flixel_util_FlxArrayUtil.setLength_flixel_system_replay_FrameRecord(this._frames,this._capacity);
				}
			}
		}
		this.rewind();
	}
	,save: function() {
		if(this.frameCount <= 0) return null;
		var output = this.seed + "\n";
		var i = 0;
		while(i < this.frameCount) output += this._frames[i++].save() + "\n";
		return output;
	}
	,recordFrame: function() {
		var continueFrame = true;
		var keysRecord = flixel_FlxG.keys.record();
		if(keysRecord == null) continueFrame = false;
		var mouseRecord = flixel_FlxG.mouse.record();
		if(mouseRecord == null) continueFrame = false;
		if(continueFrame) {
			this.frame++;
			return;
		}
		var frameRecorded = new flixel_system_replay_FrameRecord().create(this.frame++);
		frameRecorded.mouse = mouseRecord;
		frameRecorded.keys = keysRecord;
		this._frames[this.frameCount++] = frameRecorded;
		if(this.frameCount >= this._capacity) {
			this._capacity *= 2;
			flixel_util_FlxArrayUtil.setLength_flixel_system_replay_FrameRecord(this._frames,this._capacity);
		}
	}
	,playNextFrame: function() {
		flixel_FlxG.inputs.reset();
		if(this._marker >= this.frameCount) {
			this.finished = true;
			return;
		}
		if(this._frames[this._marker].frame != this.frame++) return;
		var fr = this._frames[this._marker++];
		if(fr.keys != null) flixel_FlxG.keys.playback(fr.keys);
		if(fr.mouse != null) flixel_FlxG.mouse.playback(fr.mouse);
	}
	,rewind: function() {
		this._marker = 0;
		this.frame = 0;
		this.finished = false;
	}
	,init: function() {
		this._capacity = 100;
		this._frames = [];
		flixel_util_FlxArrayUtil.setLength_flixel_system_replay_FrameRecord(this._frames,this._capacity);
		this.frameCount = 0;
	}
	,__class__: flixel_system_replay_FlxReplay
};
var flixel_system_replay_FrameRecord = function() {
	this.frame = 0;
	this.keys = null;
	this.mouse = null;
};
$hxClasses["flixel.system.replay.FrameRecord"] = flixel_system_replay_FrameRecord;
flixel_system_replay_FrameRecord.__name__ = ["flixel","system","replay","FrameRecord"];
flixel_system_replay_FrameRecord.prototype = {
	frame: null
	,keys: null
	,mouse: null
	,create: function(Frame,Keys,Mouse) {
		this.frame = Math.floor(Frame);
		this.keys = Keys;
		this.mouse = Mouse;
		return this;
	}
	,destroy: function() {
		this.keys = null;
		this.mouse = null;
	}
	,save: function() {
		var output = this.frame + "k";
		if(this.keys != null) {
			var object;
			var i = 0;
			var l = this.keys.length;
			while(i < l) {
				if(i > 0) output += ",";
				object = this.keys[i++];
				output += object.code + ":" + object.value;
			}
		}
		output += "m";
		if(this.mouse != null) output += this.mouse.x + "," + this.mouse.y + "," + this.mouse.button + "," + this.mouse.wheel;
		return output;
	}
	,load: function(Data) {
		var i;
		var l;
		var array = Data.split("k");
		this.frame = Std.parseInt(array[0]);
		array = array[1].split("m");
		var keyData = array[0];
		var mouseData = array[1];
		if(keyData.length > 0) {
			array = keyData.split(",");
			var keyPair;
			i = 0;
			l = array.length;
			while(i < l) {
				keyPair = array[i++].split(":");
				if(keyPair.length == 2) {
					if(this.keys == null) this.keys = [];
					this.keys.push(new flixel_system_replay_CodeValuePair(Std.parseInt(keyPair[0]),Std.parseInt(keyPair[1])));
				}
			}
		}
		if(mouseData.length > 0) {
			array = mouseData.split(",");
			if(array.length >= 4) this.mouse = new flixel_system_replay_MouseRecord(Std.parseInt(array[0]),Std.parseInt(array[1]),Std.parseInt(array[2]),Std.parseInt(array[3]));
		}
		return this;
	}
	,__class__: flixel_system_replay_FrameRecord
};
var flixel_system_replay_MouseRecord = function(X,Y,Button,Wheel) {
	flixel_util_FlxPoint.call(this);
	this.set(X,Y);
	this.button = Button;
	this.wheel = Wheel;
};
$hxClasses["flixel.system.replay.MouseRecord"] = flixel_system_replay_MouseRecord;
flixel_system_replay_MouseRecord.__name__ = ["flixel","system","replay","MouseRecord"];
flixel_system_replay_MouseRecord.__super__ = flixel_util_FlxPoint;
flixel_system_replay_MouseRecord.prototype = $extend(flixel_util_FlxPoint.prototype,{
	button: null
	,wheel: null
	,__class__: flixel_system_replay_MouseRecord
});
var flixel_system_ui_FlxFocusLostScreen = function() {
	openfl_display_Sprite.call(this);
	this.draw();
	var logo = new openfl_display_Sprite();
	flixel_system_FlxAssets.drawLogo(logo.get_graphics());
	logo.set_scaleX(logo.set_scaleY(0.2));
	logo.set_x(logo.set_y(5));
	logo.set_alpha(0.35);
	this.addChild(logo);
	this.set_visible(false);
};
$hxClasses["flixel.system.ui.FlxFocusLostScreen"] = flixel_system_ui_FlxFocusLostScreen;
flixel_system_ui_FlxFocusLostScreen.__name__ = ["flixel","system","ui","FlxFocusLostScreen"];
flixel_system_ui_FlxFocusLostScreen.__super__ = openfl_display_Sprite;
flixel_system_ui_FlxFocusLostScreen.prototype = $extend(openfl_display_Sprite.prototype,{
	draw: function() {
		var gfx = this.get_graphics();
		var screenWidth = Std["int"](flixel_FlxCamera.defaultZoom * flixel_FlxG.width * flixel_FlxG.game.get_scaleX());
		var screenHeight = Std["int"](flixel_FlxCamera.defaultZoom * flixel_FlxG.height * flixel_FlxG.game.get_scaleY());
		gfx.clear();
		gfx.moveTo(0,0);
		gfx.beginFill(0,0.5);
		gfx.drawRect(0,0,screenWidth,screenHeight);
		gfx.endFill();
		var halfWidth = screenWidth / 2 | 0;
		var halfHeight = screenHeight / 2 | 0;
		var helper = Std["int"](Math.min(halfWidth,halfHeight) / 3);
		gfx.moveTo(halfWidth - helper,halfHeight - helper);
		gfx.beginFill(16777215,0.65);
		gfx.lineTo(halfWidth + helper,halfHeight);
		gfx.lineTo(halfWidth - helper,halfHeight + helper);
		gfx.lineTo(halfWidth - helper,halfHeight - helper);
		gfx.endFill();
		this.set_scaleX(1 / flixel_FlxG.game.get_scaleX());
		this.set_scaleY(1 / flixel_FlxG.game.get_scaleY());
	}
	,__class__: flixel_system_ui_FlxFocusLostScreen
});
var flixel_system_ui_FlxSoundTray = function() {
	this._defaultScale = 2.0;
	this._width = 80;
	openfl_display_Sprite.call(this);
	this.set_visible(false);
	this.set_scaleX(this._defaultScale);
	this.set_scaleY(this._defaultScale);
	var tmp = new openfl_display_Bitmap(new openfl_display_BitmapData(this._width,30,true,2130706432));
	this.screenCenter();
	this.addChild(tmp);
	var text = new openfl_text_TextField();
	text.set_width(tmp.get_width());
	text.set_height(tmp.get_height());
	text.set_multiline(true);
	text.set_wordWrap(true);
	text.set_selectable(false);
	var dtf = new openfl_text_TextFormat(flixel_system_FlxAssets.FONT_DEFAULT,8,16777215);
	dtf.align = openfl_text_TextFormatAlign.CENTER;
	text.set_defaultTextFormat(dtf);
	this.addChild(text);
	text.set_text("VOLUME");
	text.set_y(16);
	var bx = 10;
	var by = 14;
	this._bars = [];
	var _g = 0;
	while(_g < 10) {
		var i = _g++;
		tmp = new openfl_display_Bitmap(new openfl_display_BitmapData(4,i + 1,false,-1));
		tmp.set_x(bx);
		tmp.set_y(by);
		this.addChild(tmp);
		this._bars.push(tmp);
		bx += 6;
		by--;
	}
	this.set_y(-this.get_height());
	this.set_visible(false);
};
$hxClasses["flixel.system.ui.FlxSoundTray"] = flixel_system_ui_FlxSoundTray;
flixel_system_ui_FlxSoundTray.__name__ = ["flixel","system","ui","FlxSoundTray"];
flixel_system_ui_FlxSoundTray.__super__ = openfl_display_Sprite;
flixel_system_ui_FlxSoundTray.prototype = $extend(openfl_display_Sprite.prototype,{
	active: null
	,_timer: null
	,_bars: null
	,_width: null
	,_defaultScale: null
	,update: function(MS) {
		if(this._timer > 0) this._timer -= MS / 1000; else if(this.get_y() > -this.get_height()) {
			var _g = this;
			_g.set_y(_g.get_y() - MS / 1000 * flixel_FlxG.height * 2);
			if(this.get_y() <= -this.get_height()) {
				this.set_visible(false);
				this.active = false;
				flixel_FlxG.save.data.mute = flixel_FlxG.sound.muted;
				flixel_FlxG.save.data.volume = flixel_FlxG.sound.volume;
				flixel_FlxG.save.flush();
			}
		}
	}
	,show: function(Silent) {
		if(Silent == null) Silent = false;
		if(!Silent) flixel_FlxG.sound.load(flixel_system_FlxAssets.getSound("../assets/sounds/beep")).play();
		this._timer = 1;
		this.set_y(0);
		this.set_visible(true);
		this.active = true;
		var globalVolume = Math.round(flixel_FlxG.sound.volume * 10);
		if(flixel_FlxG.sound.muted) globalVolume = 0;
		var _g1 = 0;
		var _g = this._bars.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(i < globalVolume) this._bars[i].set_alpha(1); else this._bars[i].set_alpha(0.5);
		}
	}
	,screenCenter: function() {
		this.set_scaleX(this._defaultScale / flixel_FlxG.game.get_scaleX());
		this.set_scaleY(this._defaultScale / flixel_FlxG.game.get_scaleY());
		this.set_x((0.5 * (openfl_Lib.current.stage.stageWidth - this._width * this._defaultScale) - flixel_FlxG.game.get_x()) / flixel_FlxG.game.get_scaleX());
	}
	,__class__: flixel_system_ui_FlxSoundTray
});
var flixel_system_ui_FlxSystemButton = function(Icon,UpHandler,ToggleMode) {
	if(ToggleMode == null) ToggleMode = false;
	this._mouseDown = false;
	this.toggled = false;
	this.toggleMode = false;
	this.enabled = true;
	openfl_display_Sprite.call(this);
	if(Icon != null) {
		this._icon = new openfl_display_Bitmap(Icon);
		this.addChild(this._icon);
	}
	this.upHandler = UpHandler;
	this.toggleMode = ToggleMode;
	this.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onMouseUp));
	this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseDown));
	this.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
	this.addEventListener(openfl_events_MouseEvent.MOUSE_OVER,$bind(this,this.onMouseOver));
};
$hxClasses["flixel.system.ui.FlxSystemButton"] = flixel_system_ui_FlxSystemButton;
flixel_system_ui_FlxSystemButton.__name__ = ["flixel","system","ui","FlxSystemButton"];
flixel_system_ui_FlxSystemButton.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_system_ui_FlxSystemButton.__super__ = openfl_display_Sprite;
flixel_system_ui_FlxSystemButton.prototype = $extend(openfl_display_Sprite.prototype,{
	upHandler: null
	,enabled: null
	,toggleMode: null
	,toggled: null
	,_icon: null
	,_mouseDown: null
	,changeIcon: function(Icon) {
		if(this._icon != null) this.removeChild(this._icon);
		this._icon = new openfl_display_Bitmap(Icon);
		this.addChild(this._icon);
	}
	,destroy: function() {
		this.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onMouseUp));
		this.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseDown));
		this.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.removeEventListener(openfl_events_MouseEvent.MOUSE_OVER,$bind(this,this.onMouseOver));
		this._icon = null;
		this.upHandler = null;
	}
	,onMouseUp: function(E) {
		if(this.enabled && this._mouseDown) {
			this.set_toggled(!this.toggled);
			this._mouseDown = false;
			if(this.upHandler != null) this.upHandler();
		}
	}
	,onMouseDown: function(E) {
		this._mouseDown = true;
	}
	,onMouseOver: function(E) {
		var _g = this;
		_g.set_alpha(_g.get_alpha() - 0.2);
	}
	,onMouseOut: function(E) {
		var _g = this;
		_g.set_alpha(_g.get_alpha() + 0.2);
	}
	,set_toggled: function(Value) {
		if(this.toggleMode) this.set_alpha(Value?0.3:1);
		return this.toggled = Value;
	}
	,__class__: flixel_system_ui_FlxSystemButton
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_toggled:"set_toggled"})
});
var flixel_text_FlxText = function(X,Y,FieldWidth,Text,Size,EmbeddedFont) {
	if(EmbeddedFont == null) EmbeddedFont = true;
	if(Size == null) Size = 8;
	if(FieldWidth == null) FieldWidth = 0;
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this._heightInc = 0;
	this._widthInc = 0;
	this.borderQuality = 1;
	this.borderSize = 1;
	this.borderColor = 0;
	this.borderStyle = 0;
	flixel_FlxSprite.call(this,X,Y);
	this._filters = [];
	var setTextEmpty = false;
	if(Text == null || Text == "") {
		Text = "";
		setTextEmpty = true;
	}
	this._textField = new openfl_text_TextField();
	this._textField.set_selectable(false);
	this._textField.set_multiline(true);
	this._textField.set_wordWrap(true);
	this._defaultFormat = new openfl_text_TextFormat(flixel_system_FlxAssets.FONT_DEFAULT,Size,16777215);
	this._formatAdjusted = new openfl_text_TextFormat();
	this._textField.set_defaultTextFormat(this._defaultFormat);
	this._textField.set_text(Text);
	this.set_fieldWidth(FieldWidth);
	this._textField.set_embedFonts(EmbeddedFont);
	this._formats = [];
	this._textField.set_height(Text.length <= 0?1:10);
	this.allowCollisions = 0;
	this.set_moves(false);
	var key = flixel_FlxG.bitmap.getUniqueKey("text");
	var graphicWidth;
	if(FieldWidth <= 0) graphicWidth = 1; else graphicWidth = FieldWidth | 0;
	this.makeGraphic(graphicWidth,1,0,false,key);
	this.calcFrame();
	if(setTextEmpty) this.set_text("");
	this.shadowOffset = flixel_util_FlxPoint.get(1,1);
};
$hxClasses["flixel.text.FlxText"] = flixel_text_FlxText;
flixel_text_FlxText.__name__ = ["flixel","text","FlxText"];
flixel_text_FlxText.__super__ = flixel_FlxSprite;
flixel_text_FlxText.prototype = $extend(flixel_FlxSprite.prototype,{
	borderStyle: null
	,borderColor: null
	,borderSize: null
	,borderQuality: null
	,shadowOffset: null
	,_textField: null
	,_defaultFormat: null
	,_formatAdjusted: null
	,_formats: null
	,_filters: null
	,_widthInc: null
	,_heightInc: null
	,destroy: function() {
		this._textField = null;
		this._defaultFormat = null;
		this._formatAdjusted = null;
		this._filters = null;
		if(this._formats != null) {
			var _g = 0;
			var _g1 = this._formats;
			while(_g < _g1.length) {
				var format = _g1[_g];
				++_g;
				if(format != null) {
					format.destroy();
					format = null;
				}
			}
		}
		this._formats = null;
		this.shadowOffset = flixel_util_FlxDestroyUtil.put(this.shadowOffset);
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,addFormat: function(Format,Start,End) {
		if(End == null) End = -1;
		if(Start == null) Start = -1;
		if(Start > -1) Format.start = Start; else Format.start = Format.start;
		if(End > -1) Format.end = End; else Format.end = Format.end;
		this._formats.push(Format);
		this._formats.sort(function(left,right) {
			if(left.start < right.start) return -1; else return 1;
		});
		this.dirty = true;
	}
	,removeFormat: function(Format) {
		flixel_util_FlxArrayUtil.fastSplice_flixel_text_FlxTextFormat(this._formats,Format);
		this.dirty = true;
	}
	,clearFormats: function() {
		var _g = 0;
		var _g1 = this._formats;
		while(_g < _g1.length) {
			var format = _g1[_g];
			++_g;
			format.destroy();
			format = null;
		}
		this._formats = [];
		this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
		this.dirty = true;
	}
	,setFormat: function(Font,Size,Color,Alignment,BorderStyle,BorderColor,Embedded) {
		if(Embedded == null) Embedded = true;
		if(BorderColor == null) BorderColor = 0;
		if(BorderStyle == null) BorderStyle = 0;
		if(Color == null) Color = 16777215;
		if(Size == null) Size = 8;
		if(Embedded) {
			if(Font == null) this._defaultFormat.font = flixel_system_FlxAssets.FONT_DEFAULT; else this._defaultFormat.font = openfl_Assets.getFont(Font).get_fontName();
		} else if(Font != null) this._defaultFormat.font = Font;
		this._textField.set_embedFonts(Embedded);
		this._defaultFormat.size = Size | 0;
		Color &= 16777215;
		this._defaultFormat.color = Color;
		this._defaultFormat.align = this.convertTextAlignmentFromString(Alignment);
		this._textField.set_defaultTextFormat(this._defaultFormat);
		this.set_borderStyle(BorderStyle);
		this.set_borderColor(BorderColor);
		this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
		this.dirty = true;
		return this;
	}
	,setBorderStyle: function(Style,Color,Size,Quality) {
		if(Quality == null) Quality = 1;
		if(Size == null) Size = 1;
		if(Color == null) Color = 0;
		this.set_borderStyle(Style);
		this.set_borderColor(Color);
		this.set_borderSize(Size);
		this.set_borderQuality(Quality);
	}
	,addFilter: function(filter,widthInc,heightInc) {
		if(heightInc == null) heightInc = 0;
		if(widthInc == null) widthInc = 0;
		this._filters.push(filter);
		this._widthInc = widthInc;
		this._heightInc = heightInc;
		this.dirty = true;
	}
	,removeFilter: function(filter) {
		var removed = HxOverrides.remove(this._filters,filter);
		if(removed) this.dirty = true;
	}
	,clearFilters: function() {
		if(this._filters.length > 0) this.dirty = true;
		this._filters = [];
	}
	,updateFrameData: function() {
		if(this.cachedGraphics != null) {
			this.framesData = this.cachedGraphics.get_tilesheet().getSpriteSheetFrames(this.region);
			this.set_frame(this.framesData.frames[0]);
			this.frames = 1;
		}
	}
	,applyFormats: function(FormatAdjusted,UseBorderColor) {
		if(UseBorderColor == null) UseBorderColor = false;
		if(UseBorderColor) FormatAdjusted.color = this.borderColor; else FormatAdjusted.color = this._defaultFormat.color;
		this._textField.setTextFormat(FormatAdjusted,0,this._textField.get_text().length);
		var _g = 0;
		var _g1 = this._formats;
		while(_g < _g1.length) {
			var format = _g1[_g];
			++_g;
			if(this._textField.get_text().length - 1 < format.start) break; else {
				FormatAdjusted.font = format.format.font;
				FormatAdjusted.bold = format.format.bold;
				FormatAdjusted.italic = format.format.italic;
				FormatAdjusted.size = format.format.size;
				if(UseBorderColor) FormatAdjusted.color = format.borderColor; else FormatAdjusted.color = format.format.color;
			}
			this._textField.setTextFormat(FormatAdjusted,format.start,Std["int"](Math.min(format.end,this._textField.get_text().length)));
		}
	}
	,set_fieldWidth: function(value) {
		if(this._textField != null) {
			if(value <= 0) {
				this.set_wordWrap(false);
				this.set_autoSize(true);
			} else this._textField.set_width(value);
			this.dirty = true;
		}
		return value;
	}
	,get_fieldWidth: function() {
		if(this._textField != null) return this._textField.get_width(); else return 0;
	}
	,set_autoSize: function(value) {
		if(this._textField != null) {
			if(value) this._textField.set_autoSize(openfl_text_TextFieldAutoSize.LEFT); else this._textField.set_autoSize(openfl_text_TextFieldAutoSize.NONE);
			this.dirty = true;
		}
		return value;
	}
	,get_autoSize: function() {
		if(this._textField != null) return this._textField.get_autoSize() != openfl_text_TextFieldAutoSize.NONE; else return false;
	}
	,get_text: function() {
		return this._textField.get_text();
	}
	,set_text: function(Text) {
		var ot = this._textField.get_text();
		this._textField.set_text(Text);
		if(this._textField.get_text() != ot) this.dirty = true;
		return this._textField.get_text();
	}
	,get_size: function() {
		return this._defaultFormat.size;
	}
	,set_size: function(Size) {
		this._defaultFormat.size = Size | 0;
		this._textField.set_defaultTextFormat(this._defaultFormat);
		this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
		this.dirty = true;
		return Size;
	}
	,set_color: function(Color) {
		Color &= 16777215;
		if(this._defaultFormat.color == Color) return Color;
		this._defaultFormat.color = Color;
		this.color = Color;
		this._textField.set_defaultTextFormat(this._defaultFormat);
		this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
		this.dirty = true;
		return Color;
	}
	,get_font: function() {
		return this._defaultFormat.font;
	}
	,set_font: function(Font) {
		this._textField.set_embedFonts(true);
		this._defaultFormat.font = openfl_Assets.getFont(Font).get_fontName();
		this._textField.set_defaultTextFormat(this._defaultFormat);
		this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
		this.dirty = true;
		return Font;
	}
	,get_embedded: function() {
		return this._textField.set_embedFonts(true);
	}
	,get_systemFont: function() {
		return this._defaultFormat.font;
	}
	,set_systemFont: function(Font) {
		this._textField.set_embedFonts(false);
		this._defaultFormat.font = Font;
		this._textField.set_defaultTextFormat(this._defaultFormat);
		this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
		this.dirty = true;
		return Font;
	}
	,get_bold: function() {
		return this._defaultFormat.bold;
	}
	,set_bold: function(value) {
		if(this._defaultFormat.bold != value) {
			this._defaultFormat.bold = value;
			this._textField.set_defaultTextFormat(this._defaultFormat);
			this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
			this.dirty = true;
		}
		return value;
	}
	,get_italic: function() {
		return this._defaultFormat.italic;
	}
	,set_italic: function(value) {
		if(this._defaultFormat.italic != value) {
			this._defaultFormat.italic = value;
			this._textField.set_defaultTextFormat(this._defaultFormat);
			this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
			this.dirty = true;
		}
		return value;
	}
	,get_wordWrap: function() {
		return this._textField.get_wordWrap();
	}
	,set_wordWrap: function(value) {
		if(this._textField.get_wordWrap() != value) {
			this._textField.set_wordWrap(value);
			this.dirty = true;
		}
		return value;
	}
	,get_alignment: function() {
		return js_Boot.__cast(this._defaultFormat.align , String);
	}
	,set_alignment: function(Alignment) {
		this._defaultFormat.align = this.convertTextAlignmentFromString(Alignment);
		this._textField.set_defaultTextFormat(this._defaultFormat);
		this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
		this.dirty = true;
		return Alignment;
	}
	,set_borderStyle: function(style) {
		if(style != this.borderStyle) {
			this.borderStyle = style;
			this.dirty = true;
		}
		return this.borderStyle;
	}
	,set_borderColor: function(Color) {
		Color &= 16777215;
		if(this.borderColor != Color && this.borderStyle != 0) this.dirty = true;
		this.borderColor = Color;
		return Color;
	}
	,set_borderSize: function(Value) {
		if(Value != this.borderSize && this.borderStyle != 0) this.dirty = true;
		this.borderSize = Value;
		return Value;
	}
	,set_borderQuality: function(Value) {
		if(Value < 0) Value = 0; else if(Value > 1) Value = 1;
		if(Value != this.borderQuality && this.borderStyle != 0) this.dirty = true;
		this.borderQuality = Value;
		return Value;
	}
	,get_textField: function() {
		return this._textField;
	}
	,set_cachedGraphics: function(Value) {
		var cached = flixel_FlxSprite.prototype.set_cachedGraphics.call(this,Value);
		if(Value != null) Value.set_destroyOnNoUse(true);
		return cached;
	}
	,updateColorTransform: function() {
		if(this.alpha != 1) {
			if(this.colorTransform == null) this.colorTransform = new openfl_geom_ColorTransform(1,1,1,this.alpha); else this.colorTransform.alphaMultiplier = this.alpha;
			this.useColorTransform = true;
		} else {
			if(this.colorTransform != null) this.colorTransform.alphaMultiplier = 1;
			this.useColorTransform = false;
		}
		this.dirty = true;
	}
	,regenGraphics: function() {
		var oldWidth = this.cachedGraphics.bitmap.width;
		var oldHeight = this.cachedGraphics.bitmap.height;
		var newWidth = this._textField.get_width() + this._widthInc;
		var newHeight = this._textField.get_textHeight() + this._heightInc + 4;
		if(this._textField.get_textHeight() == 0) newHeight = oldHeight;
		if(oldWidth != newWidth || oldHeight != newHeight) {
			this.set_height(newHeight - this._heightInc);
			var key = this.cachedGraphics.key;
			flixel_FlxG.bitmap.remove(key);
			this.makeGraphic(newWidth | 0,newHeight | 0,0,false,key);
			this.frameHeight = Std["int"](this.get_height());
			this._textField.set_height(this.get_height() * 1.2);
			this._flashRect.x = 0;
			this._flashRect.y = 0;
			this._flashRect.width = newWidth;
			this._flashRect.height = newHeight;
		} else this.cachedGraphics.bitmap.fillRect(this._flashRect,0);
	}
	,calcFrame: function(RunOnCpp) {
		if(RunOnCpp == null) RunOnCpp = false;
		if(this._textField == null) return;
		if(this._filters != null) this._textField.set_filters(this._filters);
		this.regenGraphics();
		if(this._textField != null && this._textField.get_text() != null && this._textField.get_text().length > 0) {
			this._formatAdjusted.font = this._defaultFormat.font;
			this._formatAdjusted.size = this._defaultFormat.size;
			this._formatAdjusted.bold = this._defaultFormat.bold;
			this._formatAdjusted.italic = this._defaultFormat.italic;
			this._formatAdjusted.color = this._defaultFormat.color;
			this._formatAdjusted.align = this._defaultFormat.align;
			this._matrix.identity();
			this._matrix.translate(0.5 * this._widthInc | 0,0.5 * this._heightInc | 0);
			if(this._defaultFormat.align == openfl_text_TextFormatAlign.CENTER && this._textField.get_numLines() == 1) {
				this._formatAdjusted.align = openfl_text_TextFormatAlign.LEFT;
				this._textField.setTextFormat(this._formatAdjusted,0,this._textField.get_text().length);
				this._matrix.translate(Math.floor((this.get_width() - this._textField.get_textWidth()) / 2),0);
			}
			if(this.borderStyle != 0) {
				var iterations = this.borderSize * this.borderQuality | 0;
				if(iterations <= 0) iterations = 1;
				var delta = this.borderSize / iterations;
				if(this.borderStyle == 1) {
					this.applyFormats(this._formatAdjusted,true);
					var _g = 0;
					while(_g < iterations) {
						var iter = _g++;
						this._matrix.translate(delta,delta);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
					}
					this._matrix.translate(-this.shadowOffset.x * this.borderSize,-this.shadowOffset.y * this.borderSize);
					this.applyFormats(this._formatAdjusted,false);
				} else if(this.borderStyle == 2) {
					this.applyFormats(this._formatAdjusted,true);
					var itd = delta;
					var _g1 = 0;
					while(_g1 < iterations) {
						var iter1 = _g1++;
						this._matrix.translate(-itd,-itd);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(itd,0);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(itd,0);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(0,itd);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(0,itd);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(-itd,0);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(-itd,0);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(0,-itd);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(itd,0);
						itd += delta;
					}
					this.applyFormats(this._formatAdjusted,false);
				} else if(this.borderStyle == 3) {
					this.applyFormats(this._formatAdjusted,true);
					var itd1 = delta;
					var _g2 = 0;
					while(_g2 < iterations) {
						var iter2 = _g2++;
						this._matrix.translate(-itd1,-itd1);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(itd1 * 2,0);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(0,itd1 * 2);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(-itd1 * 2,0);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(itd1,-itd1);
						itd1 += delta;
					}
					this.applyFormats(this._formatAdjusted,false);
				}
			} else this.applyFormats(this._formatAdjusted,false);
			this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
		}
		this.dirty = false;
		if(this.framePixels == null || this.framePixels.width != this.cachedGraphics.bitmap.width || this.framePixels.height != this.cachedGraphics.bitmap.height) {
			this.framePixels = flixel_util_FlxDestroyUtil.dispose(this.framePixels);
			this.framePixels = new openfl_display_BitmapData(this.cachedGraphics.bitmap.width,this.cachedGraphics.bitmap.height,true,0);
		}
		this.framePixels.copyPixels(this.cachedGraphics.bitmap,this._flashRect,this._flashPointZero);
		if(this.useColorTransform) this.framePixels.colorTransform(this._flashRect,this.colorTransform);
	}
	,dtfCopy: function() {
		var defaultTextFormat = this._textField.get_defaultTextFormat();
		return new openfl_text_TextFormat(defaultTextFormat.font,defaultTextFormat.size,defaultTextFormat.color,defaultTextFormat.bold,defaultTextFormat.italic,defaultTextFormat.underline,defaultTextFormat.url,defaultTextFormat.target,defaultTextFormat.align);
	}
	,convertTextAlignmentFromString: function(StrAlign) {
		if(StrAlign == "right") return openfl_text_TextFormatAlign.RIGHT; else if(StrAlign == "center") return openfl_text_TextFormatAlign.CENTER; else if(StrAlign == "justify") return openfl_text_TextFormatAlign.JUSTIFY; else return openfl_text_TextFormatAlign.LEFT;
	}
	,updateFormat: function(Format) {
		this._textField.setTextFormat(Format,0,this._textField.get_text().length);
	}
	,__class__: flixel_text_FlxText
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_fieldWidth:"set_fieldWidth",get_fieldWidth:"get_fieldWidth",get_textField:"get_textField",set_borderQuality:"set_borderQuality",set_borderSize:"set_borderSize",set_borderColor:"set_borderColor",set_borderStyle:"set_borderStyle",set_alignment:"set_alignment",get_alignment:"get_alignment",set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_italic:"set_italic",get_italic:"get_italic",set_bold:"set_bold",get_bold:"get_bold",set_systemFont:"set_systemFont",get_systemFont:"get_systemFont",get_embedded:"get_embedded",set_font:"set_font",get_font:"get_font",set_size:"set_size",get_size:"get_size",set_text:"set_text",get_text:"get_text"})
});
var flixel_text_FlxTextFormat = function(FontColor,Bold,Italic,BorderColor,Start,End) {
	if(End == null) End = -1;
	if(Start == null) Start = -1;
	this.end = -1;
	this.start = -1;
	if(FontColor != null) FontColor &= 16777215;
	if(BorderColor != null) BorderColor &= 16777215;
	this.format = new openfl_text_TextFormat(null,null,FontColor,Bold,Italic);
	if(Start > -1) this.start = Start;
	if(End > -1) this.end = End;
	if(BorderColor == null) this.borderColor = 0; else this.borderColor = BorderColor;
};
$hxClasses["flixel.text.FlxTextFormat"] = flixel_text_FlxTextFormat;
flixel_text_FlxTextFormat.__name__ = ["flixel","text","FlxTextFormat"];
flixel_text_FlxTextFormat.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_text_FlxTextFormat.prototype = {
	borderColor: null
	,start: null
	,end: null
	,format: null
	,destroy: function() {
		this.format = null;
	}
	,__class__: flixel_text_FlxTextFormat
};
var flixel_text_pxText_PxBitmapFont = function() {
	this._maxHeight = 0;
	this._point = new openfl_geom_Point();
	this._matrix = new openfl_geom_Matrix();
	this._colorTransform = new openfl_geom_ColorTransform();
	this._glyphs = [];
};
$hxClasses["flixel.text.pxText.PxBitmapFont"] = flixel_text_pxText_PxBitmapFont;
flixel_text_pxText_PxBitmapFont.__name__ = ["flixel","text","pxText","PxBitmapFont"];
flixel_text_pxText_PxBitmapFont.store = function(PxHandle,PxFont) {
	flixel_text_pxText_PxBitmapFont._storedFonts.set(PxHandle,PxFont);
};
flixel_text_pxText_PxBitmapFont.fetch = function(PxHandle) {
	var f = flixel_text_pxText_PxBitmapFont._storedFonts.get(PxHandle);
	return f;
};
flixel_text_pxText_PxBitmapFont.clearStorage = function() {
	var $it0 = flixel_text_pxText_PxBitmapFont._storedFonts.iterator();
	while( $it0.hasNext() ) {
		var font = $it0.next();
		font.dispose();
	}
	flixel_text_pxText_PxBitmapFont._storedFonts = new haxe_ds_StringMap();
};
flixel_text_pxText_PxBitmapFont.prototype = {
	_glyphs: null
	,_glyphString: null
	,_maxHeight: null
	,_matrix: null
	,_colorTransform: null
	,_point: null
	,_tileRects: null
	,_symbols: null
	,_region: null
	,cachedGraphics: null
	,loadPixelizer: function(PxBitmapData,PxLetters) {
		this.reset();
		this._glyphString = PxLetters;
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			this._glyphs.push(null);
		}
		if(PxBitmapData != null) {
			this._tileRects = [];
			var result = this.preparePixelizerBitmapData(PxBitmapData,this._tileRects);
			var key = flixel_FlxG.bitmap.getUniqueKey("font");
			this.setCachedGraphics(flixel_FlxG.bitmap.addWithSpaces(result,0,0,1,1,false,key));
			this._region = new flixel_system_layer_Region();
			this._region.width = this.cachedGraphics.bitmap.width;
			this._region.height = this.cachedGraphics.bitmap.height;
			var currRect;
			this.updateGlyphData();
		}
		return this;
	}
	,loadAngelCode: function(pBitmapData,pXMLData) {
		this.reset();
		if(pBitmapData != null && pXMLData != null) {
			this._symbols = [];
			var result = this.prepareAngelCodeBitmapData(pBitmapData,pXMLData,this._symbols);
			var key = flixel_FlxG.bitmap.getUniqueKey("font");
			this.setCachedGraphics(flixel_FlxG.bitmap.addWithSpaces(result,0,0,1,1,false,key));
			this.updateGlyphData();
		}
		return this;
	}
	,updateGlyphData: function(Tiles) {
		var rect;
		if(this._symbols != null) {
			this._glyphString = "";
			var point = new openfl_geom_Point();
			var bd;
			var charString;
			var _g = 0;
			var _g1 = this._symbols;
			while(_g < _g1.length) {
				var symbol = _g1[_g];
				++_g;
				rect = new openfl_geom_Rectangle();
				rect.x = symbol.x;
				rect.y = symbol.y;
				rect.width = symbol.width;
				rect.height = symbol.height;
				point.x = symbol.xoffset;
				point.y = symbol.yoffset;
				charString = String.fromCharCode(symbol.charCode);
				this._glyphString += charString;
				var xadvance = symbol.xadvance;
				var charWidth = xadvance;
				if(rect.width > xadvance) {
					charWidth = symbol.width;
					point.x = 0;
				}
				bd = null;
				if(charString != " " && charString != "") bd = new openfl_display_BitmapData(charWidth,symbol.height + symbol.yoffset,true,0); else bd = new openfl_display_BitmapData(charWidth,1,true,0);
				bd.copyPixels(this.cachedGraphics.bitmap,rect,point,null,null,true);
				this.setGlyph(symbol.charCode,bd);
			}
		} else if(this._tileRects != null) {
			var _g11 = 0;
			var _g2 = this._tileRects.length;
			while(_g11 < _g2) {
				var letterID = _g11++;
				rect = this._tileRects[letterID];
				var bd1 = new openfl_display_BitmapData(rect.width | 0,rect.height | 0,true,0);
				bd1.copyPixels(this.cachedGraphics.bitmap,rect,flixel_text_pxText_PxBitmapFont.ZERO_POINT,null,null,true);
				this.setGlyph(HxOverrides.cca(this._glyphString,letterID),bd1);
			}
		}
	}
	,reset: function() {
		this.dispose();
		this._maxHeight = 0;
		this._glyphs = [];
		this._symbols = null;
		this._tileRects = null;
		this._glyphString = "";
	}
	,preparePixelizerBitmapData: function(PxBitmapData,PxRects) {
		var bgColor = PxBitmapData.getPixel(0,0);
		var cy = 0;
		var cx;
		while(cy < PxBitmapData.height) {
			var rowHeight = 0;
			cx = 0;
			while(cx < PxBitmapData.width) {
				if(Std["int"](PxBitmapData.getPixel(cx,cy)) != bgColor) {
					var gx = cx;
					var gy = cy;
					while(Std["int"](PxBitmapData.getPixel(gx,cy)) != bgColor) gx++;
					while(Std["int"](PxBitmapData.getPixel(cx,gy)) != bgColor) gy++;
					var gw = gx - cx;
					var gh = gy - cy;
					PxRects.push(new openfl_geom_Rectangle(cx,cy,gw,gh));
					if(gh > rowHeight) rowHeight = gh;
					if(gh > this._maxHeight) this._maxHeight = gh;
					cx += gw;
				}
				cx++;
			}
			cy += rowHeight + 1;
		}
		PxBitmapData.floodFill(0,0,0);
		return PxBitmapData;
	}
	,prepareAngelCodeBitmapData: function(PxBitmapData,PxXMLData,PxSymbols) {
		var chars = null;
		var $it0 = PxXMLData.elements();
		while( $it0.hasNext() ) {
			var node = $it0.next();
			if((function($this) {
				var $r;
				if(node.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + node.nodeType);
				$r = node.nodeName;
				return $r;
			}(this)) == "font") {
				var $it1 = node.elements();
				while( $it1.hasNext() ) {
					var nodeChild = $it1.next();
					if((function($this) {
						var $r;
						if(nodeChild.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + nodeChild.nodeType);
						$r = nodeChild.nodeName;
						return $r;
					}(this)) == "chars") {
						chars = nodeChild;
						break;
					}
				}
			}
		}
		var symbol;
		var maxX = 0;
		var maxY = 0;
		if(chars != null) {
			var $it2 = chars.elements();
			while( $it2.hasNext() ) {
				var node1 = $it2.next();
				if((function($this) {
					var $r;
					if(node1.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + node1.nodeType);
					$r = node1.nodeName;
					return $r;
				}(this)) == "char") {
					symbol = new flixel_text_pxText__$PxBitmapFont_HelperSymbol();
					symbol.x = Std.parseInt(node1.get("x"));
					symbol.y = Std.parseInt(node1.get("y"));
					symbol.width = Std.parseInt(node1.get("width"));
					symbol.height = Std.parseInt(node1.get("height"));
					symbol.xoffset = Std.parseInt(node1.get("xoffset"));
					symbol.yoffset = Std.parseInt(node1.get("yoffset"));
					symbol.xadvance = Std.parseInt(node1.get("xadvance"));
					symbol.charCode = Std.parseInt(node1.get("id"));
					PxSymbols.push(symbol);
					maxX = symbol.x + symbol.width;
					maxY = symbol.y + symbol.height;
				}
			}
		}
		return PxBitmapData;
	}
	,getPreparedGlyphs: function(PxScale,PxColor,PxUseColorTransform) {
		if(PxUseColorTransform == null) PxUseColorTransform = true;
		var result = [];
		this._matrix.identity();
		this._matrix.scale(PxScale,PxScale);
		var colorMultiplier = 0.00392156862745098;
		this._colorTransform.redOffset = 0;
		this._colorTransform.greenOffset = 0;
		this._colorTransform.blueOffset = 0;
		this._colorTransform.redMultiplier = (PxColor >> 16) * colorMultiplier;
		this._colorTransform.greenMultiplier = (PxColor >> 8 & 255) * colorMultiplier;
		this._colorTransform.blueMultiplier = (PxColor & 255) * colorMultiplier;
		var glyph;
		var preparedGlyph;
		var _g1 = 0;
		var _g = this._glyphs.length;
		while(_g1 < _g) {
			var i = _g1++;
			glyph = this._glyphs[i];
			var bdWidth;
			var bdHeight;
			if(glyph != null) {
				if(PxScale > 0) {
					bdWidth = Math.ceil(glyph.width * PxScale);
					bdHeight = Math.ceil(glyph.height * PxScale);
				} else {
					bdWidth = 1;
					bdHeight = 1;
				}
				preparedGlyph = new openfl_display_BitmapData(bdWidth,bdHeight,true,0);
				if(PxUseColorTransform) preparedGlyph.draw(glyph,this._matrix,this._colorTransform); else preparedGlyph.draw(glyph,this._matrix);
				result[i] = preparedGlyph;
			}
		}
		return result;
	}
	,dispose: function() {
		var bd;
		var _g1 = 0;
		var _g = this._glyphs.length;
		while(_g1 < _g) {
			var i = _g1++;
			bd = this._glyphs[i];
			if(bd != null) this._glyphs[i].dispose();
		}
		this._symbols = null;
		this._tileRects = null;
		this.setCachedGraphics(null);
		this._region = null;
		this._glyphs = null;
	}
	,getFontData: function() {
		var output = "";
		var _g1 = 0;
		var _g = this._glyphString.length;
		while(_g1 < _g) {
			var i = _g1++;
			var charCode = HxOverrides.cca(this._glyphString,i);
			var glyph = this._glyphs[charCode];
			output += HxOverrides.substr(this._glyphString,i,1);
			output += glyph.width;
			output += glyph.height;
			var _g3 = 0;
			var _g2 = glyph.height;
			while(_g3 < _g2) {
				var py = _g3++;
				var _g5 = 0;
				var _g4 = glyph.width;
				while(_g5 < _g4) {
					var px = _g5++;
					if(glyph.getPixel32(px,py) != 0) output += "1"; else output += "0";
				}
			}
		}
		return output;
	}
	,setGlyph: function(PxCharID,PxBitmapData) {
		if(this._glyphs[PxCharID] != null) this._glyphs[PxCharID].dispose();
		this._glyphs[PxCharID] = PxBitmapData;
		if(PxBitmapData.height > this._maxHeight) this._maxHeight = PxBitmapData.height;
	}
	,render: function(PxBitmapData,PxFontData,PxText,PxColor,PxOffsetX,PxOffsetY,PxLetterSpacing) {
		this._point.x = PxOffsetX;
		this._point.y = PxOffsetY;
		var glyph;
		var _g1 = 0;
		var _g = PxText.length;
		while(_g1 < _g) {
			var i = _g1++;
			var charCode = HxOverrides.cca(PxText,i);
			glyph = PxFontData[charCode];
			if(glyph != null) {
				PxBitmapData.copyPixels(glyph,glyph.rect,this._point,null,null,true);
				this._point.x += glyph.width + PxLetterSpacing;
			}
		}
	}
	,getTextWidth: function(PxText,PxLetterSpacing,PxFontScale) {
		if(PxFontScale == null) PxFontScale = 1;
		if(PxLetterSpacing == null) PxLetterSpacing = 0;
		var w = 0;
		var textLength = PxText.length;
		var _g1 = 0;
		var _g = textLength;
		while(_g1 < _g) {
			var i = _g1++;
			var charCode = HxOverrides.cca(PxText,i);
			var glyph = this._glyphs[charCode];
			if(glyph != null) w += glyph.width;
		}
		w = Math.round(w * PxFontScale);
		if(textLength > 1) w += (textLength - 1) * PxLetterSpacing;
		return w;
	}
	,getFontHeight: function() {
		return this._maxHeight;
	}
	,get_numLetters: function() {
		return this._glyphs.length;
	}
	,setCachedGraphics: function(value) {
		if(this.cachedGraphics != null && this.cachedGraphics != value) {
			var _g = this.cachedGraphics;
			var _g1 = _g.useCount;
			_g.set_useCount(_g1 - 1);
			_g1;
		}
		if(this.cachedGraphics != value && value != null) {
			var _g2 = value;
			var _g11 = _g2.useCount;
			_g2.set_useCount(_g11 + 1);
			_g11;
			value.persist = true;
		}
		this.cachedGraphics = value;
	}
	,__class__: flixel_text_pxText_PxBitmapFont
	,__properties__: {get_numLetters:"get_numLetters"}
};
var flixel_text_pxText__$PxBitmapFont_HelperSymbol = function() {
};
$hxClasses["flixel.text.pxText._PxBitmapFont.HelperSymbol"] = flixel_text_pxText__$PxBitmapFont_HelperSymbol;
flixel_text_pxText__$PxBitmapFont_HelperSymbol.__name__ = ["flixel","text","pxText","_PxBitmapFont","HelperSymbol"];
flixel_text_pxText__$PxBitmapFont_HelperSymbol.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,xoffset: null
	,yoffset: null
	,xadvance: null
	,charCode: null
	,__class__: flixel_text_pxText__$PxBitmapFont_HelperSymbol
};
var flixel_tile_FlxTile = function(Tilemap,Index,Width,Height,Visible,AllowCollisions) {
	this.mapIndex = 0;
	this.callbackFunction = null;
	flixel_FlxObject.call(this,0,0,Width,Height);
	this.set_immovable(true);
	this.set_moves(false);
	this.filter = null;
	this.tilemap = Tilemap;
	this.index = Index;
	this.set_visible(Visible);
	this.allowCollisions = AllowCollisions;
};
$hxClasses["flixel.tile.FlxTile"] = flixel_tile_FlxTile;
flixel_tile_FlxTile.__name__ = ["flixel","tile","FlxTile"];
flixel_tile_FlxTile.__super__ = flixel_FlxObject;
flixel_tile_FlxTile.prototype = $extend(flixel_FlxObject.prototype,{
	callbackFunction: null
	,filter: null
	,tilemap: null
	,index: null
	,mapIndex: null
	,destroy: function() {
		this.callbackFunction = null;
		this.tilemap = null;
		flixel_FlxObject.prototype.destroy.call(this);
	}
	,__class__: flixel_tile_FlxTile
});
var flixel_tile_FlxTileblock = function(X,Y,Width,Height) {
	flixel_FlxSprite.call(this,X,Y);
	this.makeGraphic(Width,Height,0,true);
	this.set_active(false);
	this.set_immovable(true);
	this.set_moves(false);
};
$hxClasses["flixel.tile.FlxTileblock"] = flixel_tile_FlxTileblock;
flixel_tile_FlxTileblock.__name__ = ["flixel","tile","FlxTileblock"];
flixel_tile_FlxTileblock.__super__ = flixel_FlxSprite;
flixel_tile_FlxTileblock.prototype = $extend(flixel_FlxSprite.prototype,{
	loadTiles: function(TileGraphic,TileWidth,TileHeight,Empties) {
		if(Empties == null) Empties = 0;
		if(TileHeight == null) TileHeight = 0;
		if(TileWidth == null) TileWidth = 0;
		if(TileGraphic == null) return this;
		var sprite = new flixel_FlxSprite().loadGraphic(TileGraphic,true,TileWidth,TileHeight);
		var spriteWidth = Std["int"](sprite.get_width());
		var spriteHeight = Std["int"](sprite.get_height());
		var total = sprite.frames + Empties;
		var regen = false;
		if(this.get_width() % sprite.get_width() != 0) {
			this.set_width(Std["int"](this.get_width() / spriteWidth + 1) * spriteWidth);
			regen = true;
		}
		if(this.get_height() % sprite.get_height() != 0) {
			this.set_height(Std["int"](this.get_height() / spriteHeight + 1) * spriteHeight);
			regen = true;
		}
		if(regen) this.makeGraphic(Std["int"](this.get_width()),Std["int"](this.get_height()),0,true); else flixel_util_FlxSpriteUtil.fill(this,0);
		var row = 0;
		var column;
		var destinationX;
		var destinationY = 0;
		var widthInTiles = Std["int"](this.get_width() / spriteWidth);
		var heightInTiles = Std["int"](this.get_height() / spriteHeight);
		while(row < heightInTiles) {
			destinationX = 0;
			column = 0;
			while(column < widthInTiles) {
				if((flixel_util_FlxRandom._internalSeed = flixel_util_FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647) / 2147483647 * total > Empties) {
					sprite.animation.randomFrame();
					if(sprite.dirty) {
						sprite.dirty = true;
						sprite.calcFrame();
					}
					this.stamp(sprite,destinationX,destinationY);
				}
				destinationX += spriteWidth;
				column++;
			}
			destinationY += spriteHeight;
			row++;
		}
		sprite.destroy();
		this.dirty = true;
		return this;
	}
	,__class__: flixel_tile_FlxTileblock
});
var flixel_tile_GraphicAuto = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_tile_GraphicAuto.preload != null) {
		this.image = flixel_tile_GraphicAuto.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_tile_GraphicAuto.resourceName),flixel_tile_GraphicAuto.resourceType,function(b) {
		if(flixel_tile_GraphicAuto.preload == null) flixel_tile_GraphicAuto.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.tile.GraphicAuto"] = flixel_tile_GraphicAuto;
flixel_tile_GraphicAuto.__name__ = ["flixel","tile","GraphicAuto"];
flixel_tile_GraphicAuto.preload = null;
flixel_tile_GraphicAuto.__super__ = openfl_display_BitmapData;
flixel_tile_GraphicAuto.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_tile_GraphicAuto
});
var flixel_tile_GraphicAutoAlt = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_tile_GraphicAutoAlt.preload != null) {
		this.image = flixel_tile_GraphicAutoAlt.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_tile_GraphicAutoAlt.resourceName),flixel_tile_GraphicAutoAlt.resourceType,function(b) {
		if(flixel_tile_GraphicAutoAlt.preload == null) flixel_tile_GraphicAutoAlt.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.tile.GraphicAutoAlt"] = flixel_tile_GraphicAutoAlt;
flixel_tile_GraphicAutoAlt.__name__ = ["flixel","tile","GraphicAutoAlt"];
flixel_tile_GraphicAutoAlt.preload = null;
flixel_tile_GraphicAutoAlt.__super__ = openfl_display_BitmapData;
flixel_tile_GraphicAutoAlt.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_tile_GraphicAutoAlt
});
var flixel_tile_FlxTilemapBuffer = function(TileWidth,TileHeight,WidthInTiles,HeightInTiles,Camera,ScaleX,ScaleY) {
	if(ScaleY == null) ScaleY = 1.0;
	if(ScaleX == null) ScaleX = 1.0;
	this.pixelPerfectRender = true;
	this.columns = 0;
	this.rows = 0;
	this.dirty = false;
	this.height = 0;
	this.width = 0;
	this.y = 0;
	this.x = 0;
	this.updateColumns(TileWidth,WidthInTiles,ScaleX,Camera);
	this.updateRows(TileHeight,HeightInTiles,ScaleY,Camera);
	this.pixels = new openfl_display_BitmapData(this.columns * TileWidth | 0,this.rows * TileHeight | 0,true,0);
	this._flashRect = new openfl_geom_Rectangle(0,0,this.pixels.width,this.pixels.height);
	this._matrix = new openfl_geom_Matrix();
	this.dirty = true;
};
$hxClasses["flixel.tile.FlxTilemapBuffer"] = flixel_tile_FlxTilemapBuffer;
flixel_tile_FlxTilemapBuffer.__name__ = ["flixel","tile","FlxTilemapBuffer"];
flixel_tile_FlxTilemapBuffer.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,dirty: null
	,rows: null
	,columns: null
	,pixelPerfectRender: null
	,pixels: null
	,_flashRect: null
	,_matrix: null
	,destroy: function() {
		this.pixels = null;
		this._matrix = null;
	}
	,fill: function(Color) {
		if(Color == null) Color = 0;
		this.pixels.fillRect(this._flashRect,Color);
	}
	,draw: function(Camera,FlashPoint,ScaleX,ScaleY) {
		if(ScaleY == null) ScaleY = 1.0;
		if(ScaleX == null) ScaleX = 1.0;
		if(this.pixelPerfectRender) {
			FlashPoint.x = Math.floor(FlashPoint.x);
			FlashPoint.y = Math.floor(FlashPoint.y);
		}
		if(this.pixelPerfectRender && (ScaleX == 1.0 && ScaleY == 1.0)) Camera.buffer.copyPixels(this.pixels,this._flashRect,FlashPoint,null,null,true); else {
			this._matrix.identity();
			this._matrix.scale(ScaleX,ScaleY);
			this._matrix.translate(FlashPoint.x,FlashPoint.y);
			Camera.buffer.draw(this.pixels,this._matrix);
		}
	}
	,updateColumns: function(TileWidth,WidthInTiles,ScaleX,Camera) {
		if(ScaleX == null) ScaleX = 1.0;
		if(WidthInTiles < 0) WidthInTiles = 0;
		if(Camera == null) Camera = flixel_FlxG.camera;
		this.columns = Math.ceil(Camera.width / (TileWidth * ScaleX)) + 1;
		if(this.columns > WidthInTiles) this.columns = WidthInTiles;
		this.width = this.columns * TileWidth * ScaleX | 0;
	}
	,updateRows: function(TileHeight,HeightInTiles,ScaleY,Camera) {
		if(ScaleY == null) ScaleY = 1.0;
		if(HeightInTiles < 0) HeightInTiles = 0;
		if(Camera == null) Camera = flixel_FlxG.camera;
		this.rows = Math.ceil(Camera.height / (TileHeight * ScaleY)) + 1;
		if(this.rows > HeightInTiles) this.rows = HeightInTiles;
		this.height = this.rows * TileHeight * ScaleY | 0;
	}
	,__class__: flixel_tile_FlxTilemapBuffer
};
var flixel_tile_FlxTilemap = function() {
	this._startingIndex = 0;
	this._scaledTileHeight = 0;
	this._scaledTileWidth = 0;
	this._tileHeight = 0;
	this._tileWidth = 0;
	this.tileScaleHack = 1.01;
	this.totalTiles = 0;
	this.heightInTiles = 0;
	this.widthInTiles = 0;
	this.auto = 0;
	flixel_FlxObject.call(this);
	this.collisionType = 3;
	this._buffers = [];
	this._flashPoint = new openfl_geom_Point();
	this.set_immovable(true);
	this.set_moves(false);
	this.scale = new flixel_util_FlxCallbackPoint($bind(this,this.setScaleXCallback),$bind(this,this.setScaleYCallback),$bind(this,this.setScaleXYCallback));
	this.scale.set(1,1);
	flixel_FlxG.signals.gameResized.add($bind(this,this.onGameResize));
};
$hxClasses["flixel.tile.FlxTilemap"] = flixel_tile_FlxTilemap;
flixel_tile_FlxTilemap.__name__ = ["flixel","tile","FlxTilemap"];
flixel_tile_FlxTilemap.__super__ = flixel_FlxObject;
flixel_tile_FlxTilemap.prototype = $extend(flixel_FlxObject.prototype,{
	auto: null
	,widthInTiles: null
	,heightInTiles: null
	,totalTiles: null
	,tileScaleHack: null
	,customTileRemap: null
	,scale: null
	,region: null
	,framesData: null
	,cachedGraphics: null
	,_randomIndices: null
	,_randomChoices: null
	,_randomLambda: null
	,_flashPoint: null
	,_flashRect: null
	,_buffers: null
	,_data: null
	,_rects: null
	,_tileWidth: null
	,_tileHeight: null
	,_scaledTileWidth: null
	,_scaledTileHeight: null
	,_tileObjects: null
	,_debugTileNotSolid: null
	,_debugTilePartial: null
	,_debugTileSolid: null
	,_debugRect: null
	,_startingIndex: null
	,destroy: function() {
		this._flashPoint = null;
		this._flashRect = null;
		var i = 0;
		var l;
		if(this._tileObjects != null) {
			l = this._tileObjects.length;
			var _g = 0;
			while(_g < l) {
				var i1 = _g++;
				this._tileObjects[i1].destroy();
			}
			this._tileObjects = null;
		}
		if(this._buffers != null) {
			i = 0;
			l = this._buffers.length;
			var _g1 = 0;
			while(_g1 < l) {
				var i2 = _g1++;
				this._buffers[i2].destroy();
			}
			this._buffers = null;
		}
		this._data = null;
		this._rects = null;
		this._debugRect = null;
		this._debugTileNotSolid = null;
		this._debugTilePartial = null;
		this._debugTileSolid = null;
		this.framesData = null;
		this.set_cachedGraphics(null);
		this.region = null;
		this.scale = flixel_util_FlxDestroyUtil.destroy(this.scale);
		flixel_FlxG.signals.gameResized.remove($bind(this,this.onGameResize));
		flixel_FlxObject.prototype.destroy.call(this);
	}
	,loadMap: function(MapData,TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex) {
		if(CollideIndex == null) CollideIndex = 1;
		if(DrawIndex == null) DrawIndex = 1;
		if(StartingIndex == null) StartingIndex = 0;
		if(AutoTile == null) AutoTile = 0;
		if(TileHeight == null) TileHeight = 0;
		if(TileWidth == null) TileWidth = 0;
		this.auto = AutoTile;
		if(StartingIndex <= 0) this._startingIndex = 0; else this._startingIndex = StartingIndex;
		if(typeof(MapData) == "string") {
			MapData = StringTools.rtrim(MapData);
			this._data = [];
			var columns;
			var rows = MapData.split("\n");
			this.heightInTiles = rows.length;
			this.widthInTiles = 0;
			var row = 0;
			var column;
			while(row < this.heightInTiles) {
				columns = rows[row++].split(",");
				if(columns.length < 1) {
					this.heightInTiles = this.heightInTiles - 1;
					continue;
				}
				if(this.widthInTiles == 0) this.widthInTiles = columns.length;
				column = 0;
				while(column < this.widthInTiles) {
					var curTile = Std.parseInt(columns[column]);
					this._data.push(curTile);
					column++;
				}
			}
		} else if((MapData instanceof Array) && MapData.__enum__ == null) {
			this._data = MapData;
			this._data = this._data.slice();
		} else throw new js__$Boot_HaxeError("Unexpected MapData format '" + Std.string(Type["typeof"](MapData)) + "' passed into loadMap. Map data must be CSV string or Array<Int>.");
		var i;
		this.totalTiles = this._data.length;
		if(this.auto > 0) {
			this._startingIndex = 1;
			DrawIndex = 1;
			CollideIndex = 1;
			i = 0;
			while(i < this.totalTiles) this.autoTile(i++);
		}
		if(this.customTileRemap != null) {
			i = 0;
			while(i < this.totalTiles) {
				var old_index = this._data[i];
				var new_index = old_index;
				if(old_index < this.customTileRemap.length) new_index = this.customTileRemap[old_index];
				this._data[i] = new_index;
				i++;
			}
		}
		if(this._randomIndices != null) {
			var randLambda;
			if(this._randomLambda != null) randLambda = this._randomLambda; else randLambda = flixel_util_FlxRandom["float"];
			i = 0;
			while(i < this.totalTiles) {
				var old_index1 = this._data[i];
				var j = 0;
				var new_index1 = old_index1;
				var _g = 0;
				var _g1 = this._randomIndices;
				while(_g < _g1.length) {
					var rand = _g1[_g];
					++_g;
					if(old_index1 == rand) {
						var k = Std["int"](randLambda() * this._randomChoices[j].length);
						new_index1 = this._randomChoices[j][k];
					}
					j++;
				}
				this._data[i] = new_index1;
				i++;
			}
		}
		this.set_cachedGraphics(flixel_FlxG.bitmap.addWithSpaces(TileGraphic,0,0,1,1,false,null));
		this._tileWidth = TileWidth;
		if(this._tileWidth <= 0) this._tileWidth = this.cachedGraphics.bitmap.height;
		this._tileHeight = TileHeight;
		if(this._tileHeight <= 0) this._tileHeight = this._tileWidth;
		if(!js_Boot.__instanceof(TileGraphic,flixel_util_loaders_TextureRegion)) {
			this.region = new flixel_system_layer_Region(0,0,this._tileWidth,this._tileHeight);
			this.region.width = (this.cachedGraphics.bitmap.width / this._tileWidth | 0) * this._tileWidth;
			this.region.height = (this.cachedGraphics.bitmap.height / this._tileHeight | 0) * this._tileHeight;
		} else {
			var spriteRegion = TileGraphic;
			this.region = spriteRegion.region.clone();
			if(this.region.tileWidth > 0) this._tileWidth = this.region.tileWidth; else this.region.tileWidth = this._tileWidth;
			if(this.region.tileHeight > 0) this._tileHeight = this.region.tileWidth; else this.region.tileHeight = this._tileHeight;
		}
		this._tileObjects = [];
		var length = this.region.get_numTiles();
		length += this._startingIndex;
		var _g2 = 0;
		while(_g2 < length) {
			var i1 = _g2++;
			this._tileObjects[i1] = new flixel_tile_FlxTile(this,i1,this._tileWidth,this._tileHeight,i1 >= DrawIndex,i1 >= CollideIndex?this.allowCollisions:0);
		}
		this._debugTileNotSolid = this.makeDebugTile(-16776961);
		this._debugTilePartial = this.makeDebugTile(-16181);
		this._debugTileSolid = this.makeDebugTile(-16744448);
		this._scaledTileWidth = this._tileWidth * this.scale.x;
		this._scaledTileHeight = this._tileHeight * this.scale.y;
		this.set_width(this.widthInTiles * this._scaledTileWidth);
		this.set_height(this.heightInTiles * this._scaledTileHeight);
		this._debugRect = new openfl_geom_Rectangle(0,0,this._tileWidth,this._tileHeight);
		this._rects = [];
		flixel_util_FlxArrayUtil.setLength_openfl_geom_Rectangle(this._rects,this.totalTiles);
		i = 0;
		while(i < this.totalTiles) this.updateTile(i++);
		return this;
	}
	,setCustomTileMappings: function(mappings,randomIndices,randomChoices,randomLambda) {
		this.customTileRemap = mappings;
		this._randomIndices = randomIndices;
		this._randomChoices = randomChoices;
		this._randomLambda = randomLambda;
		if(this._randomIndices != null && (this._randomChoices == null || this._randomChoices.length == 0)) throw new js__$Boot_HaxeError("You must provide valid 'randomChoices' if you wish to randomize tilemap indicies, please read documentation of 'setCustomTileMappings' function.");
	}
	,drawDebugOnCamera: function(Camera) {
	}
	,draw: function() {
		var cameras = this.get_cameras();
		var camera;
		var buffer;
		var i = 0;
		var l = cameras.length;
		while(i < l) {
			camera = cameras[i];
			if(!camera.visible || !camera.exists) continue;
			if(this._buffers[i] == null) this._buffers[i] = this.createBuffer(camera);
			buffer = this._buffers[i++];
			buffer.dirty = true;
			if(!buffer.dirty) {
				this._point.set_x(this.x - camera.scroll.x * this.scrollFactor.x + buffer.x);
				this._point.set_y(this.y - camera.scroll.y * this.scrollFactor.y + buffer.y);
				buffer.dirty = this._point.x > 0 || this._point.y > 0 || this._point.x + buffer.width < camera.width || this._point.y + buffer.height < camera.height;
			}
			if(buffer.dirty) {
				this.drawTilemap(buffer,camera);
				buffer.dirty = false;
			}
			this._flashPoint.x = this.x - camera.scroll.x * this.scrollFactor.x + buffer.x;
			this._flashPoint.y = this.y - camera.scroll.y * this.scrollFactor.y + buffer.y;
			buffer.draw(camera,this._flashPoint,this.scale.x,this.scale.y);
			flixel_FlxBasic._VISIBLECOUNT++;
		}
		if(flixel_FlxG["debugger"].drawDebug) this.drawDebug();
	}
	,getData: function(Simple) {
		if(Simple == null) Simple = false;
		if(!Simple) return this._data;
		var i = 0;
		var l = this._data.length;
		var data = [];
		flixel_util_FlxArrayUtil.setLength_Int(data,l);
		while(i < l) {
			if(this._tileObjects[this._data[i]].allowCollisions > 0) data[i] = 1; else data[i] = 0;
			i++;
		}
		return data;
	}
	,setDirty: function(Dirty) {
		if(Dirty == null) Dirty = true;
		var _g = 0;
		var _g1 = this._buffers;
		while(_g < _g1.length) {
			var buffer = _g1[_g];
			++_g;
			buffer.dirty = true;
		}
	}
	,findPath: function(Start,End,Simplify,RaySimplify,WideDiagonal) {
		if(WideDiagonal == null) WideDiagonal = true;
		if(RaySimplify == null) RaySimplify = false;
		if(Simplify == null) Simplify = true;
		var startIndex = ((Start.y - this.y) / this._scaledTileHeight | 0) * this.widthInTiles + ((Start.x - this.x) / this._scaledTileWidth | 0);
		var endIndex = ((End.y - this.y) / this._scaledTileHeight | 0) * this.widthInTiles + ((End.x - this.x) / this._scaledTileWidth | 0);
		if(this._tileObjects[this._data[startIndex]].allowCollisions > 0 || this._tileObjects[this._data[endIndex]].allowCollisions > 0) return null;
		var distances = this.computePathDistance(startIndex,endIndex,WideDiagonal);
		if(distances == null) return null;
		var points = [];
		this.walkPath(distances,endIndex,points);
		var node;
		node = points[points.length - 1];
		node.set_x(Start.x);
		node.set_y(Start.y);
		node = points[0];
		node.set_x(End.x);
		node.set_y(End.y);
		if(Simplify) this.simplifyPath(points);
		if(RaySimplify) this.raySimplifyPath(points);
		var path = [];
		var i = points.length - 1;
		while(i >= 0) {
			node = points[i--];
			if(node != null) path.push(node);
		}
		return path;
	}
	,overlaps: function(ObjectOrGroup,InScreenSpace,Camera) {
		if(InScreenSpace == null) InScreenSpace = false;
		var group = flixel_group_FlxGroup.resolveGroup(ObjectOrGroup);
		if(group != null) return flixel_group_FlxGroup.overlaps($bind(this,this.tilemapOverlapsCallback),group,0,0,InScreenSpace,Camera); else if(ObjectOrGroup.collisionType == 1 || ObjectOrGroup.collisionType == 3?this.overlapsWithCallback(js_Boot.__cast(ObjectOrGroup , flixel_FlxObject)):this.overlaps(ObjectOrGroup,false,null)) return true;
		return false;
	}
	,tilemapOverlapsCallback: function(ObjectOrGroup,X,Y,InScreenSpace,Camera) {
		if(InScreenSpace == null) InScreenSpace = false;
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		if(ObjectOrGroup.collisionType == 1 || ObjectOrGroup.collisionType == 3) return this.overlapsWithCallback(js_Boot.__cast(ObjectOrGroup , flixel_FlxObject)); else return this.overlaps(ObjectOrGroup,InScreenSpace,Camera);
	}
	,overlapsAt: function(X,Y,ObjectOrGroup,InScreenSpace,Camera) {
		if(InScreenSpace == null) InScreenSpace = false;
		var group = flixel_group_FlxGroup.resolveGroup(ObjectOrGroup);
		if(group != null) return flixel_group_FlxGroup.overlaps($bind(this,this.tilemapOverlapsAtCallback),group,X,Y,InScreenSpace,Camera); else if(ObjectOrGroup.collisionType == 1 || ObjectOrGroup.collisionType == 3?this.overlapsWithCallback(js_Boot.__cast(ObjectOrGroup , flixel_FlxObject),null,false,this._point.set(X,Y)):this.overlapsAt(X,Y,ObjectOrGroup,InScreenSpace,Camera)) return true;
		return false;
	}
	,tilemapOverlapsAtCallback: function(ObjectOrGroup,X,Y,InScreenSpace,Camera) {
		if(ObjectOrGroup.collisionType == 1 || ObjectOrGroup.collisionType == 3) return this.overlapsWithCallback(js_Boot.__cast(ObjectOrGroup , flixel_FlxObject),null,false,this._point.set(X,Y)); else return this.overlapsAt(X,Y,ObjectOrGroup,InScreenSpace,Camera);
	}
	,overlapsWithCallback: function(Object,Callback,FlipCallbackParams,Position) {
		if(FlipCallbackParams == null) FlipCallbackParams = false;
		var results = false;
		var X = this.x;
		var Y = this.y;
		if(Position != null) {
			X = Position.x;
			Y = Position.y;
		}
		var selectionX = Math.floor((Object.x - X) / this._scaledTileWidth);
		var selectionY = Math.floor((Object.y - Y) / this._scaledTileHeight);
		var selectionWidth = selectionX + Math.ceil(Object.get_width() / this._scaledTileWidth) + 1;
		var selectionHeight = selectionY + Math.ceil(Object.get_height() / this._scaledTileHeight) + 1;
		selectionX = Std["int"](flixel_util_FlxMath.bound(selectionX,0,this.widthInTiles));
		selectionY = Std["int"](flixel_util_FlxMath.bound(selectionY,0,this.heightInTiles));
		selectionWidth = Std["int"](flixel_util_FlxMath.bound(selectionWidth,0,this.widthInTiles));
		selectionHeight = Std["int"](flixel_util_FlxMath.bound(selectionHeight,0,this.heightInTiles));
		var rowStart = selectionY * this.widthInTiles;
		var row = selectionY;
		var column;
		var tile;
		var overlapFound;
		var deltaX = X - this.last.x;
		var deltaY = Y - this.last.y;
		while(row < selectionHeight) {
			column = selectionX;
			while(column < selectionWidth) {
				var index = rowStart + column;
				if(index < 0 || index > this._data.length - 1) {
					column++;
					continue;
				}
				var dataIndex = this._data[index];
				if(dataIndex < 0) {
					column++;
					continue;
				}
				tile = this._tileObjects[dataIndex];
				tile.set_width(this._scaledTileWidth);
				tile.set_height(this._scaledTileHeight);
				tile.set_x(X + column * tile.get_width());
				tile.set_y(Y + row * tile.get_height());
				tile.last.set_x(tile.x - deltaX);
				tile.last.set_y(tile.y - deltaY);
				overlapFound = Object.x + Object.get_width() > tile.x && Object.x < tile.x + tile.get_width() && Object.y + Object.get_height() > tile.y && Object.y < tile.y + tile.get_height();
				if(tile.allowCollisions != 0) {
					if(Callback != null) {
						if(FlipCallbackParams) overlapFound = Callback(Object,tile); else overlapFound = Callback(tile,Object);
					}
				}
				if(overlapFound) {
					if(tile.callbackFunction != null && (tile.filter == null || js_Boot.__instanceof(Object,tile.filter))) {
						tile.mapIndex = rowStart + column;
						tile.callbackFunction(tile,Object);
					}
					if(tile.allowCollisions != 0) results = true;
				}
				column++;
			}
			rowStart += this.widthInTiles;
			row++;
		}
		return results;
	}
	,overlapsPoint: function(WorldPoint,InScreenSpace,Camera) {
		if(InScreenSpace == null) InScreenSpace = false;
		if(!InScreenSpace) return this._tileObjects[this._data[Math.floor(Math.floor((WorldPoint.y - this.y) / this._scaledTileHeight) * this.widthInTiles + (WorldPoint.x - this.x) / this._scaledTileWidth)]].allowCollisions > 0;
		if(Camera == null) Camera = flixel_FlxG.camera;
		WorldPoint.set_x(WorldPoint.x - Camera.scroll.x);
		WorldPoint.set_y(WorldPoint.y - Camera.scroll.y);
		this.getScreenXY(this._point,Camera);
		var result = this._tileObjects[this._data[((WorldPoint.y - WorldPoint.y) / this._scaledTileHeight | 0) * this.widthInTiles + (WorldPoint.x - WorldPoint.x) / this._scaledTileWidth | 0]].allowCollisions > 0;
		if(WorldPoint._weak) WorldPoint.put();
		return result;
	}
	,getTile: function(X,Y) {
		return this._data[Y * this.widthInTiles + X];
	}
	,getTileByIndex: function(Index) {
		return this._data[Index];
	}
	,getTileCollisions: function(Index) {
		return this._tileObjects[Index].allowCollisions;
	}
	,getTileInstances: function(Index) {
		var array = null;
		var i = 0;
		var l = this.widthInTiles * this.heightInTiles;
		while(i < l) {
			if(this._data[i] == Index) {
				if(array == null) array = [];
				array.push(i);
			}
			i++;
		}
		return array;
	}
	,getTileCoords: function(Index,Midpoint) {
		if(Midpoint == null) Midpoint = true;
		var array = null;
		var point;
		var i = 0;
		var l = this.widthInTiles * this.heightInTiles;
		while(i < l) {
			if(this._data[i] == Index) {
				point = flixel_util_FlxPoint.get(this.x + (i % this.widthInTiles | 0) * this._scaledTileWidth,this.y + (i / this.widthInTiles | 0) * this._scaledTileHeight);
				if(Midpoint) {
					var _g = point;
					_g.set_x(_g.x + this._scaledTileWidth * 0.5);
					var _g1 = point;
					_g1.set_y(_g1.y + this._scaledTileHeight * 0.5);
				}
				if(array == null) array = [];
				array.push(point);
			}
			i++;
		}
		return array;
	}
	,setTile: function(X,Y,Tile,UpdateGraphics) {
		if(UpdateGraphics == null) UpdateGraphics = true;
		if(X >= this.widthInTiles || Y >= this.heightInTiles) return false;
		return this.setTileByIndex(Y * this.widthInTiles + X,Tile,UpdateGraphics);
	}
	,setTileByIndex: function(Index,Tile,UpdateGraphics) {
		if(UpdateGraphics == null) UpdateGraphics = true;
		if(Index >= this._data.length) return false;
		var ok = true;
		this._data[Index] = Tile;
		if(!UpdateGraphics) return ok;
		this.setDirty();
		if(this.auto == 0) {
			this.updateTile(Index);
			return ok;
		}
		var i;
		var row = (Index / this.widthInTiles | 0) - 1;
		var rowLength = row + 3;
		var column = Index % this.widthInTiles - 1;
		var columnHeight = column + 3;
		while(row < rowLength) {
			column = columnHeight - 3;
			while(column < columnHeight) {
				if(row >= 0 && row < this.heightInTiles && column >= 0 && column < this.widthInTiles) {
					i = row * this.widthInTiles + column;
					this.autoTile(i);
					this.updateTile(i);
				}
				column++;
			}
			row++;
		}
		return ok;
	}
	,setTileProperties: function(Tile,AllowCollisions,Callback,CallbackFilter,Range) {
		if(Range == null) Range = 1;
		if(AllowCollisions == null) AllowCollisions = 4369;
		if(Range <= 0) Range = 1;
		var tile;
		var i = Tile;
		var l = Tile + Range;
		while(i < l) {
			tile = this._tileObjects[i++];
			tile.allowCollisions = AllowCollisions;
			tile.callbackFunction = Callback;
			tile.filter = CallbackFilter;
		}
	}
	,follow: function(Camera,Border,UpdateWorld) {
		if(UpdateWorld == null) UpdateWorld = true;
		if(Border == null) Border = 0;
		if(Camera == null) Camera = flixel_FlxG.camera;
		Camera.setBounds(this.x + Border * this._scaledTileWidth,this.y + Border * this._scaledTileHeight,this.get_width() - Border * this._scaledTileWidth * 2,this.get_height() - Border * this._scaledTileHeight * 2,UpdateWorld);
	}
	,getBounds: function(Bounds) {
		if(Bounds == null) Bounds = flixel_util_FlxRect.get(null,null,null,null);
		return Bounds.set(this.x,this.y,this.get_width(),this.get_height());
	}
	,ray: function(Start,End,Result,Resolution) {
		if(Resolution == null) Resolution = 1;
		var step = this._scaledTileWidth;
		if(this._scaledTileHeight < this._scaledTileWidth) step = this._scaledTileHeight;
		step /= Resolution;
		var deltaX = End.x - Start.x;
		var deltaY = End.y - Start.y;
		var distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
		var steps = Math.ceil(distance / step);
		var stepX = deltaX / steps;
		var stepY = deltaY / steps;
		var curX = Start.x - stepX - this.x;
		var curY = Start.y - stepY - this.y;
		var tileX;
		var tileY;
		var i = 0;
		if(Start._weak) Start.put();
		if(End._weak) End.put();
		while(i < steps) {
			curX += stepX;
			curY += stepY;
			if(curX < 0 || curX > this.get_width() || curY < 0 || curY > this.get_height()) {
				i++;
				continue;
			}
			tileX = Math.floor(curX / this._scaledTileWidth);
			tileY = Math.floor(curY / this._scaledTileHeight);
			if(this._tileObjects[this._data[tileY * this.widthInTiles + tileX]].allowCollisions != 0) {
				tileX *= this._scaledTileWidth | 0;
				tileY *= this._scaledTileHeight | 0;
				var rx = 0;
				var ry = 0;
				var q;
				var lx = curX - stepX;
				var ly = curY - stepY;
				q = tileX;
				if(deltaX < 0) q += this._scaledTileWidth;
				rx = q;
				ry = ly + stepY * ((q - lx) / stepX);
				if(ry > tileY && ry < tileY + this._scaledTileHeight) {
					if(Result == null) Result = flixel_util_FlxPoint.get(null,null);
					Result.set_x(rx);
					Result.set_y(ry);
					return false;
				}
				q = tileY;
				if(deltaY < 0) q += this._scaledTileHeight;
				rx = lx + stepX * ((q - ly) / stepY);
				ry = q;
				if(rx > tileX && rx < tileX + this._scaledTileWidth) {
					if(Result == null) Result = flixel_util_FlxPoint.get(null,null);
					Result.set_x(rx);
					Result.set_y(ry);
					return false;
				}
				return true;
			}
			i++;
		}
		return true;
	}
	,updateFrameData: function() {
		if(this.cachedGraphics != null && this._tileWidth >= 1 && this._tileHeight >= 1) {
			this.framesData = this.cachedGraphics.get_tilesheet().getSpriteSheetFrames(this.region,new openfl_geom_Point(0,0));
			var i = 0;
			while(i < this.totalTiles) this.updateTile(i++);
		}
	}
	,tileToFlxSprite: function(X,Y,NewTile) {
		if(NewTile == null) NewTile = 0;
		var rowIndex = X + Y * this.widthInTiles;
		var rect = null;
		rect = this._rects[rowIndex];
		var pt = new openfl_geom_Point(0,0);
		var tileSprite = new flixel_FlxSprite();
		tileSprite.makeGraphic(this._tileWidth,this._tileHeight,0,true);
		tileSprite.set_x(X * this._tileWidth + this.x);
		tileSprite.set_y(Y * this._tileHeight + this.y);
		tileSprite.scale.set_x(this.scale.x);
		tileSprite.scale.set_y(this.scale.y);
		if(rect != null) tileSprite.get_pixels().copyPixels(this.cachedGraphics.bitmap,rect,pt);
		tileSprite.dirty = true;
		tileSprite.updateFrameData();
		if(NewTile >= 0) this.setTile(X,Y,NewTile);
		return tileSprite;
	}
	,updateBuffers: function() {
		var i = 0;
		var l;
		if(this._buffers != null) {
			i = 0;
			l = this._buffers.length;
			var _g = 0;
			while(_g < l) {
				var i1 = _g++;
				this._buffers[i1].destroy();
			}
			this._buffers = null;
		}
		this._buffers = [];
	}
	,drawTilemap: function(Buffer,Camera) {
		Buffer.fill();
		this._point.set_x(Camera.scroll.x * this.scrollFactor.x - this.x);
		this._point.set_y(Camera.scroll.y * this.scrollFactor.y - this.y);
		var screenXInTiles = Math.floor(this._point.x / this._scaledTileWidth);
		var screenYInTiles = Math.floor(this._point.y / this._scaledTileHeight);
		var screenRows = Buffer.rows;
		var screenColumns = Buffer.columns;
		if(screenXInTiles < 0) screenXInTiles = 0;
		if(screenXInTiles > this.widthInTiles - screenColumns) screenXInTiles = this.widthInTiles - screenColumns;
		if(screenYInTiles < 0) screenYInTiles = 0;
		if(screenYInTiles > this.heightInTiles - screenRows) screenYInTiles = this.heightInTiles - screenRows;
		var rowIndex = screenYInTiles * this.widthInTiles + screenXInTiles;
		this._flashPoint.y = 0;
		var row = 0;
		var column;
		var columnIndex;
		var tile;
		var debugTile;
		while(row < screenRows) {
			columnIndex = rowIndex;
			column = 0;
			this._flashPoint.x = 0;
			while(column < screenColumns) {
				this._flashRect = this._rects[columnIndex];
				if(this._flashRect != null) {
					Buffer.pixels.copyPixels(this.cachedGraphics.bitmap,this._flashRect,this._flashPoint,null,null,true);
					if(flixel_FlxG["debugger"].drawDebug && !this.ignoreDrawDebug) {
						tile = this._tileObjects[this._data[columnIndex]];
						if(tile != null) {
							if(tile.allowCollisions <= 0) debugTile = this._debugTileNotSolid; else if(tile.allowCollisions != 4369) debugTile = this._debugTilePartial; else debugTile = this._debugTileSolid;
							Buffer.pixels.copyPixels(debugTile,this._debugRect,this._flashPoint,null,null,true);
						}
					}
				}
				this._flashPoint.x += this._tileWidth;
				column++;
				columnIndex++;
			}
			this._flashPoint.y += this._tileHeight;
			rowIndex += this.widthInTiles;
			row++;
		}
		Buffer.x = screenXInTiles * this._scaledTileWidth;
		Buffer.y = screenYInTiles * this._scaledTileHeight;
	}
	,makeDebugTile: function(Color) {
		var debugTile;
		debugTile = new openfl_display_BitmapData(this._tileWidth,this._tileHeight,true,0);
		var gfx = flixel_util_FlxSpriteUtil.flashGfx;
		gfx.clear();
		gfx.moveTo(0,0);
		gfx.lineStyle(1,Color,0.5);
		gfx.lineTo(this._tileWidth - 1,0);
		gfx.lineTo(this._tileWidth - 1,this._tileHeight - 1);
		gfx.lineTo(0,this._tileHeight - 1);
		gfx.lineTo(0,0);
		debugTile.draw(flixel_util_FlxSpriteUtil.flashGfxSprite);
		return debugTile;
	}
	,simplifyPath: function(Points) {
		var deltaPrevious;
		var deltaNext;
		var last = Points[0];
		var node;
		var i = 1;
		var l = Points.length - 1;
		while(i < l) {
			node = Points[i];
			deltaPrevious = (node.x - last.x) / (node.y - last.y);
			deltaNext = (node.x - Points[i + 1].x) / (node.y - Points[i + 1].y);
			if(last.x == Points[i + 1].x || last.y == Points[i + 1].y || deltaPrevious == deltaNext) Points[i] = null; else last = node;
			i++;
		}
	}
	,raySimplifyPath: function(Points) {
		var source = Points[0];
		var lastIndex = -1;
		var node;
		var i = 1;
		var l = Points.length;
		while(i < l) {
			node = Points[i++];
			if(node == null) continue;
			if(this.ray(source,node,this._point)) {
				if(lastIndex >= 0) Points[lastIndex] = null;
			} else source = Points[lastIndex];
			lastIndex = i - 1;
		}
	}
	,computePathDistance: function(StartIndex,EndIndex,WideDiagonal,StopOnEnd) {
		if(StopOnEnd == null) StopOnEnd = true;
		var mapSize = this.widthInTiles * this.heightInTiles;
		var distances = [];
		flixel_util_FlxArrayUtil.setLength_Int(distances,mapSize);
		var i = 0;
		while(i < mapSize) {
			if(this._tileObjects[this._data[i]].allowCollisions != 0) distances[i] = -2; else distances[i] = -1;
			i++;
		}
		distances[StartIndex] = 0;
		var distance = 1;
		var neighbors = [StartIndex];
		var current;
		var currentIndex;
		var left;
		var right;
		var up;
		var down;
		var currentLength;
		var foundEnd = false;
		while(neighbors.length > 0) {
			current = neighbors;
			neighbors = [];
			i = 0;
			currentLength = current.length;
			while(i < currentLength) {
				currentIndex = current[i++];
				if(currentIndex == (EndIndex | 0)) {
					foundEnd = true;
					if(StopOnEnd) {
						neighbors = [];
						break;
					}
				}
				left = currentIndex % this.widthInTiles > 0;
				right = currentIndex % this.widthInTiles < this.widthInTiles - 1;
				up = currentIndex / this.widthInTiles > 0;
				down = currentIndex / this.widthInTiles < this.heightInTiles - 1;
				var index;
				if(up) {
					index = currentIndex - this.widthInTiles;
					if(distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(right) {
					index = currentIndex + 1;
					if(distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(down) {
					index = currentIndex + this.widthInTiles;
					if(distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(left) {
					index = currentIndex - 1;
					if(distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(up && right) {
					index = currentIndex - this.widthInTiles + 1;
					if(WideDiagonal && distances[index] == -1 && distances[currentIndex - this.widthInTiles] >= -1 && distances[currentIndex + 1] >= -1) {
						distances[index] = distance;
						neighbors.push(index);
					} else if(!WideDiagonal && distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(right && down) {
					index = currentIndex + this.widthInTiles + 1;
					if(WideDiagonal && distances[index] == -1 && distances[currentIndex + this.widthInTiles] >= -1 && distances[currentIndex + 1] >= -1) {
						distances[index] = distance;
						neighbors.push(index);
					} else if(!WideDiagonal && distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(left && down) {
					index = currentIndex + this.widthInTiles - 1;
					if(WideDiagonal && distances[index] == -1 && distances[currentIndex + this.widthInTiles] >= -1 && distances[currentIndex - 1] >= -1) {
						distances[index] = distance;
						neighbors.push(index);
					} else if(!WideDiagonal && distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(up && left) {
					index = currentIndex - this.widthInTiles - 1;
					if(WideDiagonal && distances[index] == -1 && distances[currentIndex - this.widthInTiles] >= -1 && distances[currentIndex - 1] >= -1) {
						distances[index] = distance;
						neighbors.push(index);
					} else if(!WideDiagonal && distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
			}
			distance++;
		}
		if(!foundEnd) distances = null;
		return distances;
	}
	,walkPath: function(Data,Start,Points) {
		Points.push(flixel_util_FlxPoint.get(this.x + Math.floor(Start % this.widthInTiles) * this._scaledTileWidth + this._scaledTileWidth * 0.5,this.y + Math.floor(Start / this.widthInTiles) * this._scaledTileHeight + this._scaledTileHeight * 0.5));
		if(Data[Start] == 0) return;
		var left = Start % this.widthInTiles > 0;
		var right = Start % this.widthInTiles < this.widthInTiles - 1;
		var up = Start / this.widthInTiles > 0;
		var down = Start / this.widthInTiles < this.heightInTiles - 1;
		var current = Data[Start];
		var i;
		if(up) {
			i = Start - this.widthInTiles;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) return this.walkPath(Data,i,Points);
		}
		if(right) {
			i = Start + 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) return this.walkPath(Data,i,Points);
		}
		if(down) {
			i = Start + this.widthInTiles;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) return this.walkPath(Data,i,Points);
		}
		if(left) {
			i = Start - 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) return this.walkPath(Data,i,Points);
		}
		if(up && right) {
			i = Start - this.widthInTiles + 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) return this.walkPath(Data,i,Points);
		}
		if(right && down) {
			i = Start + this.widthInTiles + 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) return this.walkPath(Data,i,Points);
		}
		if(left && down) {
			i = Start + this.widthInTiles - 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) return this.walkPath(Data,i,Points);
		}
		if(up && left) {
			i = Start - this.widthInTiles - 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) return this.walkPath(Data,i,Points);
		}
		return;
	}
	,updateTile: function(Index) {
		var tile = this._tileObjects[this._data[Index]];
		if(tile == null || !tile.visible) {
			this._rects[Index] = null;
			return;
		}
		var rx = (this._data[Index] - this._startingIndex) * (this._tileWidth + this.region.spacingX);
		var ry = 0;
		if(rx >= this.region.width) {
			ry = (rx / this.region.width | 0) * (this._tileHeight + this.region.spacingY);
			rx %= this.region.width;
		}
		this._rects[Index] = new openfl_geom_Rectangle(rx + this.region.startX,ry + this.region.startY,this._tileWidth,this._tileHeight);
	}
	,autoTile: function(Index) {
		if(this._data[Index] == 0) return;
		this._data[Index] = 0;
		if(Index - this.widthInTiles < 0 || this._data[Index - this.widthInTiles] > 0) this._data[Index] += 1;
		if(Index % this.widthInTiles >= this.widthInTiles - 1 || this._data[Index + 1] > 0) this._data[Index] += 2;
		if((Index + this.widthInTiles | 0) >= this.totalTiles || this._data[Index + this.widthInTiles] > 0) this._data[Index] += 4;
		if(Index % this.widthInTiles <= 0 || this._data[Index - 1] > 0) this._data[Index] += 8;
		if(this.auto == 2 && this._data[Index] == 15) {
			if(Index % this.widthInTiles > 0 && (Index + this.widthInTiles | 0) < this.totalTiles && this._data[Index + this.widthInTiles - 1] <= 0) this._data[Index] = 1;
			if(Index % this.widthInTiles > 0 && Index - this.widthInTiles >= 0 && this._data[Index - this.widthInTiles - 1] <= 0) this._data[Index] = 2;
			if(Index % this.widthInTiles < this.widthInTiles - 1 && Index - this.widthInTiles >= 0 && this._data[Index - this.widthInTiles + 1] <= 0) this._data[Index] = 4;
			if(Index % this.widthInTiles < this.widthInTiles - 1 && (Index + this.widthInTiles | 0) < this.totalTiles && this._data[Index + this.widthInTiles + 1] <= 0) this._data[Index] = 8;
		}
		this._data[Index] += 1;
	}
	,createBuffer: function(camera) {
		var buffer = new flixel_tile_FlxTilemapBuffer(this._tileWidth,this._tileHeight,this.widthInTiles,this.heightInTiles,camera,this.scale.x,this.scale.y);
		buffer.pixelPerfectRender = this.pixelPerfectRender;
		return buffer;
	}
	,onGameResize: function(_,_1) {
		var _g1 = 0;
		var _g = this.get_cameras().length;
		while(_g1 < _g) {
			var i = _g1++;
			var camera = this.get_cameras()[i];
			var buffer = this._buffers[i];
			flixel_tile_FlxTilemap._helperBuffer.updateColumns(this._tileWidth,this.widthInTiles,this.scale.x,camera);
			flixel_tile_FlxTilemap._helperBuffer.updateRows(this._tileHeight,this.heightInTiles,this.scale.y,camera);
			if(buffer == null || flixel_tile_FlxTilemap._helperBuffer.columns != buffer.columns || flixel_tile_FlxTilemap._helperBuffer.rows != buffer.rows) {
				if(buffer != null) buffer.destroy();
				this._buffers[i] = this.createBuffer(camera);
			}
		}
	}
	,set_cachedGraphics: function(Value) {
		var oldCached = this.cachedGraphics;
		if(this.cachedGraphics != Value && Value != null) {
			var _g = Value;
			var _g1 = _g.useCount;
			_g.set_useCount(_g1 + 1);
			_g1;
		}
		if(oldCached != null && oldCached != Value) {
			var _g2 = oldCached;
			var _g11 = _g2.useCount;
			_g2.set_useCount(_g11 - 1);
			_g11;
		}
		return this.cachedGraphics = Value;
	}
	,set_pixelPerfectRender: function(Value) {
		if(this._buffers != null) {
			var _g = 0;
			var _g1 = this._buffers;
			while(_g < _g1.length) {
				var buffer = _g1[_g];
				++_g;
				buffer.pixelPerfectRender = Value;
			}
		}
		return this.pixelPerfectRender = Value;
	}
	,setScaleXYCallback: function(Scale) {
		this.setScaleXCallback(Scale);
		this.setScaleYCallback(Scale);
	}
	,setScaleXCallback: function(Scale) {
		this._scaledTileWidth = this._tileWidth * this.scale.x;
		this.set_width(this.widthInTiles * this._scaledTileWidth);
		if(this.get_cameras() != null) {
			var _g1 = 0;
			var _g = this.get_cameras().length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this._buffers[i] != null) this._buffers[i].updateColumns(this._tileWidth,this.widthInTiles,this.scale.x,this.get_cameras()[i]);
			}
		}
	}
	,setScaleYCallback: function(Scale) {
		this._scaledTileHeight = this._tileHeight * this.scale.y;
		this.set_height(this.heightInTiles * this._scaledTileHeight);
		if(this.get_cameras() != null) {
			var _g1 = 0;
			var _g = this.get_cameras().length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this._buffers[i] != null) this._buffers[i].updateRows(this._tileHeight,this.heightInTiles,this.scale.y,this.get_cameras()[i]);
			}
		}
	}
	,__class__: flixel_tile_FlxTilemap
	,__properties__: $extend(flixel_FlxObject.prototype.__properties__,{set_cachedGraphics:"set_cachedGraphics"})
});
var flixel_tweens_FlxEase = function() { };
$hxClasses["flixel.tweens.FlxEase"] = flixel_tweens_FlxEase;
flixel_tweens_FlxEase.__name__ = ["flixel","tweens","FlxEase"];
flixel_tweens_FlxEase.quadIn = function(t) {
	return t * t;
};
flixel_tweens_FlxEase.quadOut = function(t) {
	return -t * (t - 2);
};
flixel_tweens_FlxEase.quadInOut = function(t) {
	if(t <= .5) return t * t * 2; else return 1 - --t * t * 2;
};
flixel_tweens_FlxEase.cubeIn = function(t) {
	return t * t * t;
};
flixel_tweens_FlxEase.cubeOut = function(t) {
	return 1 + --t * t * t;
};
flixel_tweens_FlxEase.cubeInOut = function(t) {
	if(t <= .5) return t * t * t * 4; else return 1 + --t * t * t * 4;
};
flixel_tweens_FlxEase.quartIn = function(t) {
	return t * t * t * t;
};
flixel_tweens_FlxEase.quartOut = function(t) {
	return 1 - (t -= 1) * t * t * t;
};
flixel_tweens_FlxEase.quartInOut = function(t) {
	if(t <= .5) return t * t * t * t * 8; else return (1 - (t = t * 2 - 2) * t * t * t) / 2 + .5;
};
flixel_tweens_FlxEase.quintIn = function(t) {
	return t * t * t * t * t;
};
flixel_tweens_FlxEase.quintOut = function(t) {
	return (t = t - 1) * t * t * t * t + 1;
};
flixel_tweens_FlxEase.quintInOut = function(t) {
	if((t *= 2) < 1) return t * t * t * t * t / 2; else return ((t -= 2) * t * t * t * t + 2) / 2;
};
flixel_tweens_FlxEase.sineIn = function(t) {
	return -Math.cos(flixel_tweens_FlxEase.PI2 * t) + 1;
};
flixel_tweens_FlxEase.sineOut = function(t) {
	return Math.sin(flixel_tweens_FlxEase.PI2 * t);
};
flixel_tweens_FlxEase.sineInOut = function(t) {
	return -Math.cos(Math.PI * t) / 2 + .5;
};
flixel_tweens_FlxEase.bounceIn = function(t) {
	t = 1 - t;
	if(t < flixel_tweens_FlxEase.B1) return 1 - 7.5625 * t * t;
	if(t < flixel_tweens_FlxEase.B2) return 1 - (7.5625 * (t - flixel_tweens_FlxEase.B3) * (t - flixel_tweens_FlxEase.B3) + .75);
	if(t < flixel_tweens_FlxEase.B4) return 1 - (7.5625 * (t - flixel_tweens_FlxEase.B5) * (t - flixel_tweens_FlxEase.B5) + .9375);
	return 1 - (7.5625 * (t - flixel_tweens_FlxEase.B6) * (t - flixel_tweens_FlxEase.B6) + .984375);
};
flixel_tweens_FlxEase.bounceOut = function(t) {
	if(t < flixel_tweens_FlxEase.B1) return 7.5625 * t * t;
	if(t < flixel_tweens_FlxEase.B2) return 7.5625 * (t - flixel_tweens_FlxEase.B3) * (t - flixel_tweens_FlxEase.B3) + .75;
	if(t < flixel_tweens_FlxEase.B4) return 7.5625 * (t - flixel_tweens_FlxEase.B5) * (t - flixel_tweens_FlxEase.B5) + .9375;
	return 7.5625 * (t - flixel_tweens_FlxEase.B6) * (t - flixel_tweens_FlxEase.B6) + .984375;
};
flixel_tweens_FlxEase.bounceInOut = function(t) {
	if(t < .5) {
		t = 1 - t * 2;
		if(t < flixel_tweens_FlxEase.B1) return (1 - 7.5625 * t * t) / 2;
		if(t < flixel_tweens_FlxEase.B2) return (1 - (7.5625 * (t - flixel_tweens_FlxEase.B3) * (t - flixel_tweens_FlxEase.B3) + .75)) / 2;
		if(t < flixel_tweens_FlxEase.B4) return (1 - (7.5625 * (t - flixel_tweens_FlxEase.B5) * (t - flixel_tweens_FlxEase.B5) + .9375)) / 2;
		return (1 - (7.5625 * (t - flixel_tweens_FlxEase.B6) * (t - flixel_tweens_FlxEase.B6) + .984375)) / 2;
	}
	t = t * 2 - 1;
	if(t < flixel_tweens_FlxEase.B1) return 7.5625 * t * t / 2 + .5;
	if(t < flixel_tweens_FlxEase.B2) return (7.5625 * (t - flixel_tweens_FlxEase.B3) * (t - flixel_tweens_FlxEase.B3) + .75) / 2 + .5;
	if(t < flixel_tweens_FlxEase.B4) return (7.5625 * (t - flixel_tweens_FlxEase.B5) * (t - flixel_tweens_FlxEase.B5) + .9375) / 2 + .5;
	return (7.5625 * (t - flixel_tweens_FlxEase.B6) * (t - flixel_tweens_FlxEase.B6) + .984375) / 2 + .5;
};
flixel_tweens_FlxEase.circIn = function(t) {
	return -(Math.sqrt(1 - t * t) - 1);
};
flixel_tweens_FlxEase.circOut = function(t) {
	return Math.sqrt(1 - (t - 1) * (t - 1));
};
flixel_tweens_FlxEase.circInOut = function(t) {
	if(t <= .5) return (Math.sqrt(1 - t * t * 4) - 1) / -2; else return (Math.sqrt(1 - (t * 2 - 2) * (t * 2 - 2)) + 1) / 2;
};
flixel_tweens_FlxEase.expoIn = function(t) {
	return Math.pow(2,10 * (t - 1));
};
flixel_tweens_FlxEase.expoOut = function(t) {
	return -Math.pow(2,-10 * t) + 1;
};
flixel_tweens_FlxEase.expoInOut = function(t) {
	if(t < .5) return Math.pow(2,10 * (t * 2 - 1)) / 2; else return (-Math.pow(2,-10 * (t * 2 - 1)) + 2) / 2;
};
flixel_tweens_FlxEase.backIn = function(t) {
	return t * t * (2.70158 * t - 1.70158);
};
flixel_tweens_FlxEase.backOut = function(t) {
	return 1 - --t * t * (-2.70158 * t - 1.70158);
};
flixel_tweens_FlxEase.backInOut = function(t) {
	t *= 2;
	if(t < 1) return t * t * (2.70158 * t - 1.70158) / 2;
	t--;
	return (1 - --t * t * (-2.70158 * t - 1.70158)) / 2 + .5;
};
flixel_tweens_FlxEase.elasticIn = function(t) {
	return -(flixel_tweens_FlxEase.ELASTIC_AMPLITUDE * Math.pow(2,10 * (t -= 1)) * Math.sin((t - flixel_tweens_FlxEase.ELASTIC_PERIOD / (2 * Math.PI) * Math.asin(1 / flixel_tweens_FlxEase.ELASTIC_AMPLITUDE)) * (2 * Math.PI) / flixel_tweens_FlxEase.ELASTIC_PERIOD));
};
flixel_tweens_FlxEase.elasticOut = function(t) {
	return flixel_tweens_FlxEase.ELASTIC_AMPLITUDE * Math.pow(2,-10 * t) * Math.sin((t - flixel_tweens_FlxEase.ELASTIC_PERIOD / (2 * Math.PI) * Math.asin(1 / flixel_tweens_FlxEase.ELASTIC_AMPLITUDE)) * (2 * Math.PI) / flixel_tweens_FlxEase.ELASTIC_PERIOD) + 1;
};
flixel_tweens_FlxEase.elasticInOut = function(t) {
	if(t < 0.5) return -0.5 * (Math.pow(2,10 * (t -= 0.5)) * Math.sin((t - flixel_tweens_FlxEase.ELASTIC_PERIOD / 4) * (2 * Math.PI) / flixel_tweens_FlxEase.ELASTIC_PERIOD));
	return Math.pow(2,-10 * (t -= 0.5)) * Math.sin((t - flixel_tweens_FlxEase.ELASTIC_PERIOD / 4) * (2 * Math.PI) / flixel_tweens_FlxEase.ELASTIC_PERIOD) * 0.5 + 1;
};
var flixel_tweens_misc_AngleTween = function(Options) {
	flixel_tweens_FlxTween.call(this,Options);
};
$hxClasses["flixel.tweens.misc.AngleTween"] = flixel_tweens_misc_AngleTween;
flixel_tweens_misc_AngleTween.__name__ = ["flixel","tweens","misc","AngleTween"];
flixel_tweens_misc_AngleTween.__super__ = flixel_tweens_FlxTween;
flixel_tweens_misc_AngleTween.prototype = $extend(flixel_tweens_FlxTween.prototype,{
	angle: null
	,sprite: null
	,_start: null
	,_range: null
	,destroy: function() {
		flixel_tweens_FlxTween.prototype.destroy.call(this);
		this.sprite = null;
	}
	,tween: function(FromAngle,ToAngle,Duration,Sprite) {
		this._start = this.angle = FromAngle;
		var d = ToAngle - this.angle;
		var a = Math.abs(d);
		if(a > 181) this._range = (360 - a) * (d > 0?-1:1); else if(a < 179) this._range = d; else this._range = flixel_util_FlxRandom.floatRanged(180,-180);
		this.duration = Duration;
		this.sprite = Sprite;
		this.start();
		return this;
	}
	,update: function() {
		flixel_tweens_FlxTween.prototype.update.call(this);
		this.angle = (this._start + this._range * this.scale) % 360;
		if(this.angle < 0) this.angle += 360;
		if(this.sprite != null) this.sprite.set_angle(this.angle);
	}
	,__class__: flixel_tweens_misc_AngleTween
});
var flixel_tweens_misc_ColorTween = function(Options) {
	this.alpha = 1;
	flixel_tweens_FlxTween.call(this,Options);
};
$hxClasses["flixel.tweens.misc.ColorTween"] = flixel_tweens_misc_ColorTween;
flixel_tweens_misc_ColorTween.__name__ = ["flixel","tweens","misc","ColorTween"];
flixel_tweens_misc_ColorTween.__super__ = flixel_tweens_FlxTween;
flixel_tweens_misc_ColorTween.prototype = $extend(flixel_tweens_FlxTween.prototype,{
	color: null
	,alpha: null
	,sprite: null
	,red: null
	,green: null
	,blue: null
	,_startA: null
	,_startR: null
	,_startG: null
	,_startB: null
	,_rangeA: null
	,_rangeR: null
	,_rangeG: null
	,_rangeB: null
	,destroy: function() {
		flixel_tweens_FlxTween.prototype.destroy.call(this);
		this.sprite = null;
	}
	,tween: function(Duration,FromColor,ToColor,FromAlpha,ToAlpha,Sprite) {
		if(ToAlpha == null) ToAlpha = 1;
		if(FromAlpha == null) FromAlpha = 1;
		FromColor &= 16777215;
		ToColor &= 16777215;
		this.color = FromColor;
		this.red = FromColor >> 16 & 255;
		this.green = FromColor >> 8 & 255;
		this.blue = FromColor & 255;
		this._startR = this.red / 255;
		this._startG = this.green / 255;
		this._startB = this.blue / 255;
		this._rangeR = (ToColor >> 16 & 255) / 255 - this._startR;
		this._rangeG = (ToColor >> 8 & 255) / 255 - this._startG;
		this._rangeB = (ToColor & 255) / 255 - this._startB;
		this._startA = this.alpha = FromAlpha;
		this._rangeA = ToAlpha - this.alpha;
		this.duration = Duration;
		this.sprite = Sprite;
		this.start();
		return this;
	}
	,update: function() {
		flixel_tweens_FlxTween.prototype.update.call(this);
		this.alpha = this._startA + this._rangeA * this.scale;
		this.red = (this._startR + this._rangeR * this.scale) * 255 | 0;
		this.green = (this._startG + this._rangeG * this.scale) * 255 | 0;
		this.blue = (this._startB + this._rangeB * this.scale) * 255 | 0;
		this.color = this.red << 16 | this.green << 8 | this.blue;
		if(this.sprite != null) {
			this.sprite.set_color(this.color);
			this.sprite.set_alpha(this.alpha);
		}
	}
	,__class__: flixel_tweens_misc_ColorTween
});
var flixel_tweens_misc_NumTween = function(Options) {
	flixel_tweens_FlxTween.call(this,Options);
};
$hxClasses["flixel.tweens.misc.NumTween"] = flixel_tweens_misc_NumTween;
flixel_tweens_misc_NumTween.__name__ = ["flixel","tweens","misc","NumTween"];
flixel_tweens_misc_NumTween.__super__ = flixel_tweens_FlxTween;
flixel_tweens_misc_NumTween.prototype = $extend(flixel_tweens_FlxTween.prototype,{
	value: null
	,_tweenFunction: null
	,_start: null
	,_range: null
	,destroy: function() {
		flixel_tweens_FlxTween.prototype.destroy.call(this);
		this._tweenFunction = null;
	}
	,tween: function(fromValue,toValue,duration,tweenFunction) {
		this._tweenFunction = tweenFunction;
		this._start = this.value = fromValue;
		this._range = toValue - this.value;
		this.duration = duration;
		this.start();
		return this;
	}
	,update: function() {
		flixel_tweens_FlxTween.prototype.update.call(this);
		this.value = this._start + this._range * this.scale;
		if(this._tweenFunction != null) this._tweenFunction(this.value);
	}
	,__class__: flixel_tweens_misc_NumTween
});
var flixel_tweens_misc_VarTween = function(Options) {
	flixel_tweens_FlxTween.call(this,Options);
	this._vars = [];
	this._startValues = [];
	this._range = [];
};
$hxClasses["flixel.tweens.misc.VarTween"] = flixel_tweens_misc_VarTween;
flixel_tweens_misc_VarTween.__name__ = ["flixel","tweens","misc","VarTween"];
flixel_tweens_misc_VarTween.__super__ = flixel_tweens_FlxTween;
flixel_tweens_misc_VarTween.prototype = $extend(flixel_tweens_FlxTween.prototype,{
	_object: null
	,_properties: null
	,_vars: null
	,_startValues: null
	,_range: null
	,destroy: function() {
		flixel_tweens_FlxTween.prototype.destroy.call(this);
		this._object = null;
		this._properties = null;
	}
	,tween: function(object,properties,duration) {
		if(object == null) throw new js__$Boot_HaxeError("Cannot tween variables of an object that is null."); else if(properties == null) throw new js__$Boot_HaxeError("Cannot tween null properties.");
		this._object = object;
		this._properties = properties;
		this.duration = duration;
		this.start();
		return this;
	}
	,update: function() {
		var delay;
		if(this.executions > 0) delay = this.loopDelay; else delay = this.startDelay;
		if(this._secondsSinceStart < delay) flixel_tweens_FlxTween.prototype.update.call(this); else {
			if(this._vars.length < 1) this.initializeVars();
			flixel_tweens_FlxTween.prototype.update.call(this);
			var i = this._vars.length;
			while(i-- > 0) Reflect.setProperty(this._object,this._vars[i],this._startValues[i] + this._range[i] * this.scale);
		}
	}
	,initializeVars: function() {
		var p;
		var fields;
		if(Reflect.isObject(this._properties)) fields = Reflect.fields(this._properties); else throw new js__$Boot_HaxeError("Unsupported properties container - use an object containing key/value pairs.");
		var _g = 0;
		while(_g < fields.length) {
			var p1 = fields[_g];
			++_g;
			if(Reflect.getProperty(this._object,p1) == null) throw new js__$Boot_HaxeError("The Object does not have the property \"" + p1 + "\", or it is not accessible.");
			var a = Reflect.getProperty(this._object,p1);
			if((function($this) {
				var $r;
				var f = a;
				$r = isNaN(f);
				return $r;
			}(this))) throw new js__$Boot_HaxeError("The property \"" + p1 + "\" is not numeric.");
			this._vars.push(p1);
			this._startValues.push(a);
			this._range.push(Reflect.getProperty(this._properties,p1) - a);
		}
	}
	,__class__: flixel_tweens_misc_VarTween
});
var flixel_tweens_motion_Motion = function(Options) {
	this.y = 0;
	this.x = 0;
	flixel_tweens_FlxTween.call(this,Options);
};
$hxClasses["flixel.tweens.motion.Motion"] = flixel_tweens_motion_Motion;
flixel_tweens_motion_Motion.__name__ = ["flixel","tweens","motion","Motion"];
flixel_tweens_motion_Motion.__super__ = flixel_tweens_FlxTween;
flixel_tweens_motion_Motion.prototype = $extend(flixel_tweens_FlxTween.prototype,{
	x: null
	,y: null
	,_object: null
	,destroy: function() {
		flixel_tweens_FlxTween.prototype.destroy.call(this);
		this._object = null;
	}
	,setObject: function(object) {
		this._object = object;
		this._object.set_immovable(true);
		return this;
	}
	,update: function() {
		flixel_tweens_FlxTween.prototype.update.call(this);
		this.postUpdate();
	}
	,postUpdate: function() {
		if(this._object != null) this._object.setPosition(this.x,this.y);
	}
	,__class__: flixel_tweens_motion_Motion
});
var flixel_tweens_motion_CircularMotion = function(Options) {
	this._angleFinish = 0;
	this._angleStart = 0;
	this._radius = 0;
	this._centerY = 0;
	this._centerX = 0;
	this.angle = 0;
	flixel_tweens_motion_Motion.call(this,Options);
};
$hxClasses["flixel.tweens.motion.CircularMotion"] = flixel_tweens_motion_CircularMotion;
flixel_tweens_motion_CircularMotion.__name__ = ["flixel","tweens","motion","CircularMotion"];
flixel_tweens_motion_CircularMotion.__super__ = flixel_tweens_motion_Motion;
flixel_tweens_motion_CircularMotion.prototype = $extend(flixel_tweens_motion_Motion.prototype,{
	angle: null
	,_centerX: null
	,_centerY: null
	,_radius: null
	,_angleStart: null
	,_angleFinish: null
	,setMotion: function(CenterX,CenterY,Radius,Angle,Clockwise,DurationOrSpeed,UseDuration) {
		if(UseDuration == null) UseDuration = true;
		this._centerX = CenterX;
		this._centerY = CenterY;
		this._radius = Radius;
		this.angle = this._angleStart = Angle * Math.PI / -180;
		this._angleFinish = Math.PI * 2 * (Clockwise?1:-1);
		if(UseDuration) this.duration = DurationOrSpeed; else this.duration = this._radius * (Math.PI * 2) / DurationOrSpeed;
		this.start();
		return this;
	}
	,update: function() {
		flixel_tweens_motion_Motion.prototype.update.call(this);
		this.angle = this._angleStart + this._angleFinish * this.scale;
		this.x = this._centerX + Math.cos(this.angle) * this._radius;
		this.y = this._centerY + Math.sin(this.angle) * this._radius;
		if(this.finished) this.postUpdate();
	}
	,get_circumference: function() {
		return this._radius * (Math.PI * 2);
	}
	,__class__: flixel_tweens_motion_CircularMotion
	,__properties__: $extend(flixel_tweens_motion_Motion.prototype.__properties__,{get_circumference:"get_circumference"})
});
var flixel_tweens_motion_CubicMotion = function(Options) {
	this._tt = 0;
	this._ttt = 0;
	this._bY = 0;
	this._bX = 0;
	this._aY = 0;
	this._aX = 0;
	this._toY = 0;
	this._toX = 0;
	this._fromY = 0;
	this._fromX = 0;
	flixel_tweens_motion_Motion.call(this,Options);
};
$hxClasses["flixel.tweens.motion.CubicMotion"] = flixel_tweens_motion_CubicMotion;
flixel_tweens_motion_CubicMotion.__name__ = ["flixel","tweens","motion","CubicMotion"];
flixel_tweens_motion_CubicMotion.__super__ = flixel_tweens_motion_Motion;
flixel_tweens_motion_CubicMotion.prototype = $extend(flixel_tweens_motion_Motion.prototype,{
	_fromX: null
	,_fromY: null
	,_toX: null
	,_toY: null
	,_aX: null
	,_aY: null
	,_bX: null
	,_bY: null
	,_ttt: null
	,_tt: null
	,setMotion: function(fromX,fromY,aX,aY,bX,bY,toX,toY,duration) {
		this.x = this._fromX = fromX;
		this.y = this._fromY = fromY;
		this._aX = aX;
		this._aY = aY;
		this._bX = bX;
		this._bY = bY;
		this._toX = toX;
		this._toY = toY;
		this.duration = duration;
		this.start();
		return this;
	}
	,update: function() {
		flixel_tweens_motion_Motion.prototype.update.call(this);
		this.x = this.scale * this.scale * this.scale * (this._toX + 3 * (this._aX - this._bX) - this._fromX) + 3 * this.scale * this.scale * (this._fromX - 2 * this._aX + this._bX) + 3 * this.scale * (this._aX - this._fromX) + this._fromX;
		this.y = this.scale * this.scale * this.scale * (this._toY + 3 * (this._aY - this._bY) - this._fromY) + 3 * this.scale * this.scale * (this._fromY - 2 * this._aY + this._bY) + 3 * this.scale * (this._aY - this._fromY) + this._fromY;
		if(this.finished) this.postUpdate();
	}
	,__class__: flixel_tweens_motion_CubicMotion
});
var flixel_tweens_motion_LinearMotion = function(Options) {
	this._distance = -1;
	this._moveY = 0;
	this._moveX = 0;
	this._fromY = 0;
	this._fromX = 0;
	flixel_tweens_motion_Motion.call(this,Options);
};
$hxClasses["flixel.tweens.motion.LinearMotion"] = flixel_tweens_motion_LinearMotion;
flixel_tweens_motion_LinearMotion.__name__ = ["flixel","tweens","motion","LinearMotion"];
flixel_tweens_motion_LinearMotion.__super__ = flixel_tweens_motion_Motion;
flixel_tweens_motion_LinearMotion.prototype = $extend(flixel_tweens_motion_Motion.prototype,{
	_fromX: null
	,_fromY: null
	,_moveX: null
	,_moveY: null
	,_distance: null
	,setMotion: function(FromX,FromY,ToX,ToY,DurationOrSpeed,UseDuration) {
		if(UseDuration == null) UseDuration = true;
		this._distance = -1;
		this.x = this._fromX = FromX;
		this.y = this._fromY = FromY;
		this._moveX = ToX - FromX;
		this._moveY = ToY - FromY;
		if(UseDuration) this.duration = DurationOrSpeed; else this.duration = this.get_distance() / DurationOrSpeed;
		this.start();
		return this;
	}
	,update: function() {
		flixel_tweens_motion_Motion.prototype.update.call(this);
		this.x = this._fromX + this._moveX * this.scale;
		this.y = this._fromY + this._moveY * this.scale;
		if(this.x == this._fromX + this._moveX && this.y == this._fromY + this._moveY && this.active && this._secondsSinceStart >= this.duration) this.finished = true;
		if(this.finished) this.postUpdate();
	}
	,get_distance: function() {
		if(this._distance >= 0) return this._distance;
		return this._distance = Math.sqrt(this._moveX * this._moveX + this._moveY * this._moveY);
	}
	,__class__: flixel_tweens_motion_LinearMotion
	,__properties__: $extend(flixel_tweens_motion_Motion.prototype.__properties__,{get_distance:"get_distance"})
});
var flixel_tweens_motion_LinearPath = function(Options) {
	this._index = 0;
	this._speed = 0;
	this.distance = 0;
	flixel_tweens_motion_Motion.call(this,Options);
	this.points = [];
	this._pointD = [0];
	this._pointT = [0];
};
$hxClasses["flixel.tweens.motion.LinearPath"] = flixel_tweens_motion_LinearPath;
flixel_tweens_motion_LinearPath.__name__ = ["flixel","tweens","motion","LinearPath"];
flixel_tweens_motion_LinearPath.__super__ = flixel_tweens_motion_Motion;
flixel_tweens_motion_LinearPath.prototype = $extend(flixel_tweens_motion_Motion.prototype,{
	distance: null
	,points: null
	,_pointD: null
	,_pointT: null
	,_speed: null
	,_index: null
	,_last: null
	,_prevPoint: null
	,_nextPoint: null
	,destroy: function() {
		flixel_tweens_motion_Motion.prototype.destroy.call(this);
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var point = _g1[_g];
			++_g;
			point = flixel_util_FlxDestroyUtil.put(point);
		}
		this._last = flixel_util_FlxDestroyUtil.put(this._last);
		this._prevPoint = flixel_util_FlxDestroyUtil.put(this._prevPoint);
		this._nextPoint = flixel_util_FlxDestroyUtil.put(this._nextPoint);
	}
	,setMotion: function(DurationOrSpeed,UseDuration) {
		if(UseDuration == null) UseDuration = true;
		this.updatePath();
		if(UseDuration) {
			this.duration = DurationOrSpeed;
			this._speed = this.distance / DurationOrSpeed;
		} else {
			this.duration = this.distance / DurationOrSpeed;
			this._speed = DurationOrSpeed;
		}
		this.start();
		return this;
	}
	,addPoint: function(x,y) {
		if(y == null) y = 0;
		if(x == null) x = 0;
		if(this._last != null) {
			this.distance += Math.sqrt((x - this._last.x) * (x - this._last.x) + (y - this._last.y) * (y - this._last.y));
			this._pointD[this.points.length] = this.distance;
		}
		this.points[this.points.length] = this._last = flixel_util_FlxPoint.get(x,y);
		return this;
	}
	,getPoint: function(index) {
		if(index == null) index = 0;
		if(this.points.length == 0) throw new js__$Boot_HaxeError("No points have been added to the path yet.");
		return this.points[index % this.points.length];
	}
	,start: function() {
		if(this.backward) this._index = this.points.length - 1; else this._index = 0;
		flixel_tweens_motion_Motion.prototype.start.call(this);
		return this;
	}
	,update: function() {
		flixel_tweens_motion_Motion.prototype.update.call(this);
		var td;
		var tt;
		if(this.points == null) return;
		if(!this.backward) {
			if(this._index < this.points.length - 1) while(this.scale > this._pointT[this._index + 1]) {
				this._index++;
				if(this._index == this.points.length - 1) {
					this._index -= 1;
					break;
				}
			}
			td = this._pointT[this._index];
			tt = this._pointT[this._index + 1] - td;
			td = (this.scale - td) / tt;
			this._prevPoint = this.points[this._index];
			this._nextPoint = this.points[this._index + 1];
			this.x = this._prevPoint.x + (this._nextPoint.x - this._prevPoint.x) * td;
			this.y = this._prevPoint.y + (this._nextPoint.y - this._prevPoint.y) * td;
		} else {
			if(this._index > 0) while(this.scale < this._pointT[this._index - 1]) {
				this._index -= 1;
				if(this._index == 0) {
					this._index += 1;
					break;
				}
			}
			td = this._pointT[this._index];
			tt = this._pointT[this._index - 1] - td;
			td = (this.scale - td) / tt;
			this._prevPoint = this.points[this._index];
			this._nextPoint = this.points[this._index - 1];
			this.x = this._prevPoint.x + (this._nextPoint.x - this._prevPoint.x) * td;
			this.y = this._prevPoint.y + (this._nextPoint.y - this._prevPoint.y) * td;
		}
		flixel_tweens_motion_Motion.prototype.postUpdate.call(this);
	}
	,updatePath: function() {
		if(this.points.length < 2) throw new js__$Boot_HaxeError("A LinearPath must have at least 2 points to operate.");
		if(this._pointD.length == this._pointT.length) return;
		var i = 0;
		while(i < this.points.length) this._pointT[i] = this._pointD[i++] / this.distance;
	}
	,__class__: flixel_tweens_motion_LinearPath
});
var flixel_tweens_motion_QuadMotion = function(Options) {
	this._controlY = 0;
	this._controlX = 0;
	this._toY = 0;
	this._toX = 0;
	this._fromY = 0;
	this._fromX = 0;
	this._distance = -1;
	flixel_tweens_motion_Motion.call(this,Options);
};
$hxClasses["flixel.tweens.motion.QuadMotion"] = flixel_tweens_motion_QuadMotion;
flixel_tweens_motion_QuadMotion.__name__ = ["flixel","tweens","motion","QuadMotion"];
flixel_tweens_motion_QuadMotion.__super__ = flixel_tweens_motion_Motion;
flixel_tweens_motion_QuadMotion.prototype = $extend(flixel_tweens_motion_Motion.prototype,{
	_distance: null
	,_fromX: null
	,_fromY: null
	,_toX: null
	,_toY: null
	,_controlX: null
	,_controlY: null
	,setMotion: function(FromX,FromY,ControlX,ControlY,ToX,ToY,DurationOrSpeed,UseDuration) {
		if(UseDuration == null) UseDuration = true;
		this._distance = -1;
		this.x = this._fromX = FromX;
		this.y = this._fromY = FromY;
		this._controlX = ControlX;
		this._controlY = ControlY;
		this._toX = ToX;
		this._toY = ToY;
		if(UseDuration) this.duration = DurationOrSpeed; else this.duration = this.get_distance() / DurationOrSpeed;
		this.start();
		return this;
	}
	,update: function() {
		flixel_tweens_motion_Motion.prototype.update.call(this);
		this.x = this._fromX * (1 - this.scale) * (1 - this.scale) + this._controlX * 2 * (1 - this.scale) * this.scale + this._toX * this.scale * this.scale;
		this.y = this._fromY * (1 - this.scale) * (1 - this.scale) + this._controlY * 2 * (1 - this.scale) * this.scale + this._toY * this.scale * this.scale;
		if(this.finished) this.postUpdate();
	}
	,get_distance: function() {
		if(this._distance >= 0) return this._distance;
		var a = flixel_util_FlxPoint.get(null,null);
		var b = flixel_util_FlxPoint.get(null,null);
		a.set_x(this.x - 2 * this._controlX + this._toX);
		a.set_y(this.y - 2 * this._controlY + this._toY);
		b.set_x(2 * this._controlX - 2 * this.x);
		b.set_y(2 * this._controlY - 2 * this.y);
		var A = 4 * (a.x * a.x + a.y * a.y);
		var B = 4 * (a.x * b.x + a.y * b.y);
		var C = b.x * b.x + b.y * b.y;
		var ABC = 2 * Math.sqrt(A + B + C);
		var A2 = Math.sqrt(A);
		var A32 = 2 * A * A2;
		var C2 = 2 * Math.sqrt(C);
		var BA = B / A2;
		a.put();
		b.put();
		return (A32 * ABC + A2 * B * (ABC - C2) + (4 * C * A - B * B) * Math.log((2 * A2 + BA + ABC) / (BA + C2))) / (4 * A32);
	}
	,__class__: flixel_tweens_motion_QuadMotion
	,__properties__: $extend(flixel_tweens_motion_Motion.prototype.__properties__,{get_distance:"get_distance"})
});
var flixel_tweens_motion_QuadPath = function(Options) {
	this._updateCurve = true;
	this._numSegs = 0;
	this._index = 0;
	this._speed = 0;
	this._distance = 0;
	flixel_tweens_motion_Motion.call(this,Options);
	this._points = [];
	this._curveT = [];
	this._curveD = [];
};
$hxClasses["flixel.tweens.motion.QuadPath"] = flixel_tweens_motion_QuadPath;
flixel_tweens_motion_QuadPath.__name__ = ["flixel","tweens","motion","QuadPath"];
flixel_tweens_motion_QuadPath.__super__ = flixel_tweens_motion_Motion;
flixel_tweens_motion_QuadPath.prototype = $extend(flixel_tweens_motion_Motion.prototype,{
	_points: null
	,_distance: null
	,_speed: null
	,_index: null
	,_numSegs: null
	,_updateCurve: null
	,_curveT: null
	,_curveD: null
	,_a: null
	,_b: null
	,_c: null
	,destroy: function() {
		flixel_tweens_motion_Motion.prototype.destroy.call(this);
		var _g = 0;
		var _g1 = this._points;
		while(_g < _g1.length) {
			var point = _g1[_g];
			++_g;
			point = flixel_util_FlxDestroyUtil.put(point);
		}
		this._a = flixel_util_FlxDestroyUtil.put(this._a);
		this._b = flixel_util_FlxDestroyUtil.put(this._b);
		this._c = flixel_util_FlxDestroyUtil.put(this._c);
	}
	,setMotion: function(DurationOrSpeed,UseDuration) {
		if(UseDuration == null) UseDuration = true;
		this.updatePath();
		if(UseDuration) {
			this.duration = DurationOrSpeed;
			this._speed = this._distance / DurationOrSpeed;
		} else {
			this.duration = this._distance / DurationOrSpeed;
			this._speed = DurationOrSpeed;
		}
		this.start();
		return this;
	}
	,addPoint: function(x,y) {
		if(y == null) y = 0;
		if(x == null) x = 0;
		this._updateCurve = true;
		this._points.push(flixel_util_FlxPoint.get(x,y));
		return this;
	}
	,getPoint: function(index) {
		if(index == null) index = 0;
		if(this._points.length == 0) throw new js__$Boot_HaxeError("No points have been added to the path yet.");
		return this._points[index % this._points.length];
	}
	,start: function() {
		if(this.backward) this._index = this._numSegs - 1; else this._index = 0;
		flixel_tweens_motion_Motion.prototype.start.call(this);
		return this;
	}
	,update: function() {
		flixel_tweens_motion_Motion.prototype.update.call(this);
		var td;
		var tt;
		if(!this.backward && this._points != null) {
			if(this._index < this._numSegs - 1) while(this.scale > this._curveT[this._index + 1]) {
				this._index++;
				if(this._index == this._numSegs - 1) break;
			}
			td = this._curveT[this._index];
			tt = this._curveT[this._index + 1] - td;
			td = (this.scale - td) / tt;
			this._a = this._points[this._index * 2];
			this._b = this._points[this._index * 2 + 1];
			this._c = this._points[this._index * 2 + 2];
			this.x = this._a.x * (1 - td) * (1 - td) + this._b.x * 2 * (1 - td) * td + this._c.x * td * td;
			this.y = this._a.y * (1 - td) * (1 - td) + this._b.y * 2 * (1 - td) * td + this._c.y * td * td;
		} else if(this._points != null) {
			if(this._index > 0) while(this.scale < this._curveT[this._index]) {
				this._index--;
				if(this._index == 0) break;
			}
			td = this._curveT[this._index + 1];
			tt = this._curveT[this._index] - td;
			td = (this.scale - td) / tt;
			this._a = this._points[this._index * 2 + 2];
			this._b = this._points[this._index * 2 + 1];
			this._c = this._points[this._index * 2];
			this.x = this._a.x * (1 - td) * (1 - td) + this._b.x * 2 * (1 - td) * td + this._c.x * td * td;
			this.y = this._a.y * (1 - td) * (1 - td) + this._b.y * 2 * (1 - td) * td + this._c.y * td * td;
		}
		flixel_tweens_motion_Motion.prototype.postUpdate.call(this);
	}
	,updatePath: function() {
		if((this._points.length - 1) % 2 != 0 || this._points.length < 3) throw new js__$Boot_HaxeError("A QuadPath must have at least 3 points to operate and number of points must be a odd.");
		if(!this._updateCurve) return;
		this._updateCurve = false;
		var i = 0;
		var j = 0;
		this._distance = 0;
		this._numSegs = (this._points.length - 1) / 2 | 0;
		while(i < this._numSegs) {
			j = i * 2;
			this._curveD[i] = this.getCurveLength(this._points[j],this._points[j + 1],this._points[j + 2]);
			this._distance += this._curveD[i++];
		}
		i = 0;
		var d = 0;
		while(i < this._numSegs) {
			d += this._curveD[i];
			this._curveT[i++] = d / this._distance;
		}
		this._curveT[this._numSegs - 1] = 1;
		this._curveT.unshift(0);
	}
	,getCurveLength: function(start,control,finish) {
		var a = flixel_util_FlxPoint.get(null,null);
		var b = flixel_util_FlxPoint.get(null,null);
		a.set_x(start.x - 2 * control.x + finish.x);
		a.set_y(start.y - 2 * control.y + finish.y);
		b.set_x(2 * control.x - 2 * start.x);
		b.set_y(2 * control.y - 2 * start.y);
		var A = 4 * (a.x * a.x + a.y * a.y);
		var B = 4 * (a.x * b.x + a.y * b.y);
		var C = b.x * b.x + b.y * b.y;
		var ABC = 2 * Math.sqrt(A + B + C);
		var A2 = Math.sqrt(A);
		var A32 = 2 * A * A2;
		var C2 = 2 * Math.sqrt(C);
		var BA = B / A2;
		a.put();
		b.put();
		return (A32 * ABC + A2 * B * (ABC - C2) + (4 * C * A - B * B) * Math.log((2 * A2 + BA + ABC) / (BA + C2))) / (4 * A32);
	}
	,__class__: flixel_tweens_motion_QuadPath
});
var flixel_ui_FlxBar = function(x,y,direction,width,height,parentRef,variable,min,max,border) {
	if(border == null) border = false;
	if(max == null) max = 100;
	if(min == null) min = 0;
	if(variable == null) variable = "";
	if(height == null) height = 10;
	if(width == null) width = 100;
	if(direction == null) direction = 1;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.fixedPosition = true;
	this.zeroOffset = new openfl_geom_Point();
	flixel_FlxSprite.call(this,x,y);
	this.barWidth = width;
	this.barHeight = height;
	this.makeGraphic(this.barWidth,this.barHeight,-1,true);
	this.filledBarPoint = new openfl_geom_Point(0,0);
	this.canvas = new openfl_display_BitmapData(width,height,true,0);
	if(parentRef != null) {
		this.parent = parentRef;
		this.parentVariable = variable;
	}
	this.setFillDirection(direction);
	this.setRange(min,max);
	this.createFilledBar(-16756480,-16714752,border);
	this.emptyKill = false;
	this.updateBar();
};
$hxClasses["flixel.ui.FlxBar"] = flixel_ui_FlxBar;
flixel_ui_FlxBar.__name__ = ["flixel","ui","FlxBar"];
flixel_ui_FlxBar.__super__ = flixel_FlxSprite;
flixel_ui_FlxBar.prototype = $extend(flixel_FlxSprite.prototype,{
	canvas: null
	,barType: null
	,barWidth: null
	,barHeight: null
	,parent: null
	,parentVariable: null
	,fixedPosition: null
	,positionOffset: null
	,min: null
	,max: null
	,range: null
	,pct: null
	,value: null
	,pxPerPercent: null
	,emptyCallback: null
	,emptyBar: null
	,emptyBarRect: null
	,emptyBarPoint: null
	,emptyKill: null
	,zeroOffset: null
	,filledCallback: null
	,filledBar: null
	,filledBarRect: null
	,filledBarPoint: null
	,fillDirection: null
	,fillHorizontal: null
	,destroy: function() {
		this.positionOffset = flixel_util_FlxDestroyUtil.put(this.positionOffset);
		this.canvas.dispose();
		this.canvas = null;
		this.parent = null;
		this.positionOffset = null;
		this.emptyCallback = null;
		this.emptyBarRect = null;
		this.emptyBarPoint = null;
		this.zeroOffset = null;
		this.filledCallback = null;
		this.filledBarRect = null;
		this.filledBarPoint = null;
		this.emptyBar = flixel_util_FlxDestroyUtil.dispose(this.emptyBar);
		this.filledBar = flixel_util_FlxDestroyUtil.dispose(this.filledBar);
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,trackParent: function(offsetX,offsetY) {
		this.fixedPosition = false;
		this.positionOffset = flixel_util_FlxPoint.get(offsetX,offsetY);
		if(Object.prototype.hasOwnProperty.call(this.parent,"scrollFactor")) {
			this.scrollFactor.set_x(this.parent.scrollFactor.x);
			this.scrollFactor.set_y(this.parent.scrollFactor.y);
		}
	}
	,setParent: function(parentRef,variable,track,offsetX,offsetY) {
		if(offsetY == null) offsetY = 0;
		if(offsetX == null) offsetX = 0;
		if(track == null) track = false;
		this.parent = parentRef;
		this.parentVariable = variable;
		if(track) this.trackParent(offsetX,offsetY);
		this.updateValueFromParent();
		this.updateBar();
	}
	,stopTrackingParent: function(posX,posY) {
		this.fixedPosition = true;
		this.set_x(posX);
		this.set_y(posY);
	}
	,setCallbacks: function(onEmpty,onFilled,killOnEmpty) {
		if(killOnEmpty == null) killOnEmpty = false;
		if(onEmpty != null) this.emptyCallback = onEmpty;
		if(onFilled != null) this.filledCallback = onFilled;
		if(killOnEmpty) this.emptyKill = true;
	}
	,set_killOnEmpty: function(value) {
		this.emptyKill = value;
		return value;
	}
	,get_killOnEmpty: function() {
		return this.emptyKill;
	}
	,setRange: function(min,max) {
		if(max <= min) {
			throw new js__$Boot_HaxeError("FlxBar: max cannot be less than or equal to min");
			return;
		}
		this.min = min;
		this.max = max;
		this.range = max - min;
		this.pct = this.range / 100;
		if(this.fillHorizontal) this.pxPerPercent = this.barWidth / 100; else this.pxPerPercent = this.barHeight / 100;
		if(!isNaN(this.value)) {
			if(this.value > max) this.value = max;
			if(this.value < min) this.value = min;
		} else this.value = min;
	}
	,stats: null
	,get_stats: function() {
		var data = new haxe_ds_StringMap();
		data.set("min",this.min);
		data.set("max",this.max);
		data.set("range",this.range);
		data.set("pct",this.pct);
		data.set("pxPerPct",this.pxPerPercent);
		data.set("fillH",this.fillHorizontal);
		return data;
	}
	,createFilledBar: function(empty,fill,showBorder,border) {
		if(border == null) border = -1;
		if(showBorder == null) showBorder = false;
		this.barType = 1;
		if(showBorder) {
			this.emptyBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
			this.emptyBar.fillRect(new openfl_geom_Rectangle(1,1,this.barWidth - 2,this.barHeight - 2),empty);
			this.filledBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
			this.filledBar.fillRect(new openfl_geom_Rectangle(1,1,this.barWidth - 2,this.barHeight - 2),fill);
		} else {
			this.emptyBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,empty);
			this.filledBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,fill);
		}
		this.filledBarRect = new openfl_geom_Rectangle(0,0,this.filledBar.width,this.filledBar.height);
		this.emptyBarRect = new openfl_geom_Rectangle(0,0,this.emptyBar.width,this.emptyBar.height);
	}
	,createGradientBar: function(empty,fill,chunkSize,rotation,showBorder,border) {
		if(border == null) border = -1;
		if(showBorder == null) showBorder = false;
		if(rotation == null) rotation = 180;
		if(chunkSize == null) chunkSize = 1;
		this.barType = 2;
		if(showBorder) {
			this.emptyBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
			flixel_util_FlxGradient.overlayGradientOnBitmapData(this.emptyBar,this.barWidth - 2,this.barHeight - 2,empty,1,1,chunkSize,rotation);
			this.filledBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
			flixel_util_FlxGradient.overlayGradientOnBitmapData(this.filledBar,this.barWidth - 2,this.barHeight - 2,fill,1,1,chunkSize,rotation);
		} else {
			this.emptyBar = flixel_util_FlxGradient.createGradientBitmapData(this.barWidth,this.barHeight,empty,chunkSize,rotation);
			this.filledBar = flixel_util_FlxGradient.createGradientBitmapData(this.barWidth,this.barHeight,fill,chunkSize,rotation);
		}
		this.emptyBarRect = new openfl_geom_Rectangle(0,0,this.emptyBar.width,this.emptyBar.height);
		this.filledBarRect = new openfl_geom_Rectangle(0,0,this.filledBar.width,this.filledBar.height);
	}
	,createImageBar: function(empty,fill,emptyBackground,fillBackground) {
		if(fillBackground == null) fillBackground = -16711936;
		if(emptyBackground == null) emptyBackground = -16777216;
		var emptyGraphics = flixel_FlxG.bitmap.addWithSpaces(empty,0,0,1,1,false,null);
		var filledGraphics = flixel_FlxG.bitmap.addWithSpaces(fill,0,0,1,1,false,null);
		var emptyBitmapData;
		if(emptyGraphics != null) emptyBitmapData = emptyGraphics.bitmap; else emptyBitmapData = null;
		var fillBitmapData;
		if(filledGraphics != null) fillBitmapData = filledGraphics.bitmap; else fillBitmapData = null;
		this.barType = 3;
		if(empty == null && fill == null) return;
		if(empty != null && fill == null) {
			this.emptyBar = emptyBitmapData;
			this.emptyBarRect = new openfl_geom_Rectangle(0,0,this.emptyBar.width,this.emptyBar.height);
			this.barWidth = this.emptyBarRect.width | 0;
			this.barHeight = this.emptyBarRect.height | 0;
			this.filledBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,fillBackground);
			this.filledBarRect = new openfl_geom_Rectangle(0,0,this.barWidth,this.barHeight);
		} else if(empty == null && fill != null) {
			this.filledBar = fillBitmapData;
			this.filledBarRect = new openfl_geom_Rectangle(0,0,this.filledBar.width,this.filledBar.height);
			this.barWidth = this.filledBarRect.width | 0;
			this.barHeight = this.filledBarRect.height | 0;
			this.emptyBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,emptyBackground);
			this.emptyBarRect = new openfl_geom_Rectangle(0,0,this.barWidth,this.barHeight);
		} else if(empty != null && fill != null) {
			this.emptyBar = emptyBitmapData;
			this.emptyBarRect = new openfl_geom_Rectangle(0,0,this.emptyBar.width,this.emptyBar.height);
			this.filledBar = fillBitmapData;
			this.filledBarRect = new openfl_geom_Rectangle(0,0,this.filledBar.width,this.filledBar.height);
			this.barWidth = this.emptyBarRect.width | 0;
			this.barHeight = this.emptyBarRect.height | 0;
		}
		this.canvas = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,0);
		if(this.fillHorizontal) this.pxPerPercent = this.barWidth / 100; else this.pxPerPercent = this.barHeight / 100;
	}
	,setFillDirection: function(direction) {
		if(direction == 1 || direction == 2 || direction == 5 || direction == 6) {
			this.fillDirection = direction;
			this.fillHorizontal = true;
		} else if(direction == 3 || direction == 4 || direction == 7 || direction == 8) {
			this.fillDirection = direction;
			this.fillHorizontal = false;
		}
	}
	,updateValueFromParent: function() {
		this.updateValue(Reflect.getProperty(this.parent,this.parentVariable));
	}
	,updateValue: function(newValue) {
		if(newValue > this.max) newValue = this.max;
		if(newValue < this.min) newValue = this.min;
		this.value = newValue;
		if(this.value == this.min && this.emptyCallback != null) this.emptyCallback();
		if(this.value == this.max && this.filledCallback != null) this.filledCallback();
		if(this.value == this.min && this.emptyKill) this.kill();
	}
	,updateBar: function() {
		if(this.fillHorizontal) this.filledBarRect.width = Std["int"](this.get_percent() * this.pxPerPercent); else this.filledBarRect.height = Std["int"](this.get_percent() * this.pxPerPercent);
		this.canvas.copyPixels(this.emptyBar,this.emptyBarRect,this.zeroOffset);
		if(this.get_percent() > 0) {
			if(this.fillDirection == 1 || this.fillDirection == 3) {
			} else if(this.fillDirection == 4) {
				this.filledBarRect.y = this.barHeight - this.filledBarRect.height;
				this.filledBarPoint.y = this.barHeight - this.filledBarRect.height;
			} else if(this.fillDirection == 2) {
				this.filledBarRect.x = this.barWidth - this.filledBarRect.width;
				this.filledBarPoint.x = this.barWidth - this.filledBarRect.width;
			} else if(this.fillDirection == 5) {
				this.filledBarRect.x = this.barWidth / 2 - this.filledBarRect.width / 2 | 0;
				this.filledBarPoint.x = this.barWidth / 2 - this.filledBarRect.width / 2 | 0;
			} else if(this.fillDirection == 6) {
				this.filledBarRect.width = Std["int"](100 - this.get_percent() * this.pxPerPercent);
				this.filledBarPoint.x = (this.barWidth - this.filledBarRect.width) / 2 | 0;
			} else if(this.fillDirection == 7) {
				this.filledBarRect.y = this.barHeight / 2 - this.filledBarRect.height / 2 | 0;
				this.filledBarPoint.y = this.barHeight / 2 - this.filledBarRect.height / 2 | 0;
			} else if(this.fillDirection == 8) {
				this.filledBarRect.height = Std["int"](100 - this.get_percent() * this.pxPerPercent);
				this.filledBarPoint.y = (this.barHeight - this.filledBarRect.height) / 2 | 0;
			}
			this.canvas.copyPixels(this.filledBar,this.filledBarRect,this.filledBarPoint);
		}
		this.set_pixels(this.canvas);
	}
	,update: function() {
		if(this.parent != null) {
			if(Reflect.getProperty(this.parent,this.parentVariable) != this.value) {
				this.updateValueFromParent();
				this.updateBar();
			}
			if(this.fixedPosition == false) {
				this.set_x(this.parent.x + this.positionOffset.x);
				this.set_y(this.parent.y + this.positionOffset.y);
			}
		}
		flixel_FlxSprite.prototype.update.call(this);
	}
	,get_percent: function() {
		if(this.value > this.max) return 100;
		return Math.floor(this.value / this.range * 100);
	}
	,set_percent: function(newPct) {
		if(newPct >= 0 && newPct <= 100) {
			this.updateValue(this.pct * newPct);
			this.updateBar();
		}
		return newPct;
	}
	,set_currentValue: function(newValue) {
		this.updateValue(newValue);
		this.updateBar();
		return newValue;
	}
	,get_currentValue: function() {
		return this.value;
	}
	,toString: function() {
		return flixel_util_FlxStringUtil.getDebugString([flixel_util_LabelValuePair._pool.get().create("min",this.min),flixel_util_LabelValuePair._pool.get().create("max",this.max),flixel_util_LabelValuePair._pool.get().create("range",this.range),flixel_util_LabelValuePair._pool.get().create("%",this.pct),flixel_util_LabelValuePair._pool.get().create("px/%",this.pxPerPercent),flixel_util_LabelValuePair._pool.get().create("value",this.value)]);
	}
	,__class__: flixel_ui_FlxBar
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{set_currentValue:"set_currentValue",get_currentValue:"get_currentValue",set_percent:"set_percent",get_percent:"get_percent",get_stats:"get_stats",set_killOnEmpty:"set_killOnEmpty",get_killOnEmpty:"get_killOnEmpty"})
});
var flixel_ui_FlxTypedButton = function(X,Y,OnClick) {
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this._pressedMouse = false;
	this.allowHighlightOnMobile = false;
	this.allowSwiping = true;
	flixel_FlxSprite.call(this,X,Y);
	this.loadGraphic(flixel_ui__$FlxTypedButton_GraphicButton,true,80,20);
	this.onUp = new flixel_ui__$FlxTypedButton_FlxButtonEvent(OnClick);
	this.onDown = new flixel_ui__$FlxTypedButton_FlxButtonEvent();
	this.onOver = new flixel_ui__$FlxTypedButton_FlxButtonEvent();
	this.onOut = new flixel_ui__$FlxTypedButton_FlxButtonEvent();
	this.labelAlphas = [0.8,1.0,0.5];
	this.labelOffsets = [flixel_util_FlxPoint.get(null,null),flixel_util_FlxPoint.get(null,null),flixel_util_FlxPoint.get(0,1)];
	this.set_status(0);
	this.scrollFactor.set();
	openfl_Lib.current.stage.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onUpEventListener));
};
$hxClasses["flixel.ui.FlxTypedButton"] = flixel_ui_FlxTypedButton;
flixel_ui_FlxTypedButton.__name__ = ["flixel","ui","FlxTypedButton"];
flixel_ui_FlxTypedButton.__super__ = flixel_FlxSprite;
flixel_ui_FlxTypedButton.prototype = $extend(flixel_FlxSprite.prototype,{
	label: null
	,labelOffsets: null
	,labelAlphas: null
	,allowSwiping: null
	,allowHighlightOnMobile: null
	,status: null
	,onUp: null
	,onDown: null
	,onOver: null
	,onOut: null
	,_pressedTouch: null
	,_pressedMouse: null
	,destroy: function() {
		this.set_label(flixel_util_FlxDestroyUtil.destroy(this.label));
		this.onUp = flixel_util_FlxDestroyUtil.destroy(this.onUp);
		this.onDown = flixel_util_FlxDestroyUtil.destroy(this.onDown);
		this.onOver = flixel_util_FlxDestroyUtil.destroy(this.onOver);
		this.onOut = flixel_util_FlxDestroyUtil.destroy(this.onOut);
		this.labelOffsets = flixel_util_FlxDestroyUtil.putArray(this.labelOffsets);
		this.labelAlphas = null;
		this._pressedTouch = null;
		openfl_Lib.current.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onUpEventListener));
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,update: function() {
		flixel_FlxSprite.prototype.update.call(this);
		if(!this.visible) return;
		this.updateButton();
		var nextFrame = this.status;
		this.animation.set_frameIndex(nextFrame);
	}
	,draw: function() {
		flixel_FlxSprite.prototype.draw.call(this);
		if(this.label != null && this.label.visible) {
			this.label.set_cameras(this.get_cameras());
			this.label.draw();
		}
	}
	,drawDebug: function() {
		flixel_FlxSprite.prototype.drawDebug.call(this);
		if(this.label != null) this.label.drawDebug();
	}
	,updateButton: function() {
		var overlapFound = false;
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			flixel_FlxG.mouse.getWorldPosition(camera,this._point);
			if(this.overlapsPoint(this._point,true,camera)) {
				overlapFound = true;
				this.updateStatus(true,flixel_FlxG.mouse._leftButton.justPressed(),flixel_FlxG.mouse._leftButton.current > 0);
				break;
			}
			var _g2 = 0;
			var _g3 = flixel_FlxG.touches.list;
			while(_g2 < _g3.length) {
				var touch = _g3[_g2];
				++_g2;
				touch.getWorldPosition(camera,this._point);
				if(this.overlapsPoint(this._point,true,camera)) {
					overlapFound = true;
					this.updateStatus(true,touch._current == 2,touch._current > 0,touch);
					break;
				}
			}
		}
		if(!overlapFound) this.updateStatus(false,false,false);
	}
	,updateStatus: function(Overlap,JustPressed,Pressed,Touch) {
		if(Overlap) {
			if(JustPressed) {
				this._pressedTouch = Touch;
				if(Touch == null) this._pressedMouse = true;
				this.onDownHandler();
			} else if(this.status == 0) {
				if(this.allowSwiping && Pressed) this.onDownHandler(); else this.onOverHandler();
			}
		} else if(this.status != 0) this.onOutHandler();
		if(this._pressedTouch != null && this._pressedTouch._current == -1) this.onUpHandler();
	}
	,onUpEventListener: function(E) {
		if(this.visible && this.exists && this.active && this.status == 2) this.onUpHandler();
	}
	,onUpHandler: function() {
		this.set_status(0);
		this._pressedMouse = false;
		this._pressedTouch = null;
		this.onUp.fire();
	}
	,onDownHandler: function() {
		this.set_status(2);
		this.onDown.fire();
	}
	,onOverHandler: function() {
		this.set_status(1);
		this.onOver.fire();
	}
	,onOutHandler: function() {
		this.set_status(0);
		this.onOut.fire();
	}
	,set_label: function(Value) {
		if(Value != null) {
			Value.scrollFactor.put();
			Value.scrollFactor = this.scrollFactor;
		}
		return this.label = Value;
	}
	,set_status: function(Value) {
		if(this.labelAlphas.length > Value && this.label != null) this.label.set_alpha(this.alpha * this.labelAlphas[Value]);
		return this.status = Value;
	}
	,set_x: function(Value) {
		flixel_FlxSprite.prototype.set_x.call(this,Value);
		if(this.label != null) this.label.set_x(this.x + this.labelOffsets[this.status].x);
		return this.x;
	}
	,set_y: function(Value) {
		flixel_FlxSprite.prototype.set_y.call(this,Value);
		if(this.label != null) this.label.set_y(this.y + this.labelOffsets[this.status].y);
		return this.y;
	}
	,__class__: flixel_ui_FlxTypedButton
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{set_status:"set_status",set_label:"set_label"})
});
var flixel_ui_FlxButton = function(X,Y,Text,OnClick) {
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	flixel_ui_FlxTypedButton.call(this,X,Y,OnClick);
	var _g = 0;
	var _g1 = this.labelOffsets;
	while(_g < _g1.length) {
		var point = _g1[_g];
		++_g;
		point.set(point.x - 1,point.y + 3);
	}
	this.set_label(new flixel_text_FlxText(this.x + this.labelOffsets[0].x,this.y + this.labelOffsets[0].y,80,Text));
	this.label.setFormat(null,8,3355443,"center");
	this.label.set_alpha(this.labelAlphas[this.status]);
};
$hxClasses["flixel.ui.FlxButton"] = flixel_ui_FlxButton;
flixel_ui_FlxButton.__name__ = ["flixel","ui","FlxButton"];
flixel_ui_FlxButton.__super__ = flixel_ui_FlxTypedButton;
flixel_ui_FlxButton.prototype = $extend(flixel_ui_FlxTypedButton.prototype,{
	resetHelpers: function() {
		flixel_ui_FlxTypedButton.prototype.resetHelpers.call(this);
		if(this.label != null) {
			this.label.set_fieldWidth(this.label.frameWidth = Std["int"](this.get_width()));
			this.label.set_size(this.label.get_size());
		}
	}
	,initLabel: function(Text) {
		this.set_label(new flixel_text_FlxText(this.x + this.labelOffsets[0].x,this.y + this.labelOffsets[0].y,80,Text));
		this.label.setFormat(null,8,3355443,"center");
		this.label.set_alpha(this.labelAlphas[this.status]);
	}
	,get_text: function() {
		return this.label.get_text();
	}
	,set_text: function(Text) {
		return this.label.set_text(Text);
	}
	,__class__: flixel_ui_FlxButton
	,__properties__: $extend(flixel_ui_FlxTypedButton.prototype.__properties__,{set_text:"set_text",get_text:"get_text"})
});
var flixel_ui__$FlxTypedButton_GraphicButton = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_ui__$FlxTypedButton_GraphicButton.preload != null) {
		this.image = flixel_ui__$FlxTypedButton_GraphicButton.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_ui__$FlxTypedButton_GraphicButton.resourceName),flixel_ui__$FlxTypedButton_GraphicButton.resourceType,function(b) {
		if(flixel_ui__$FlxTypedButton_GraphicButton.preload == null) flixel_ui__$FlxTypedButton_GraphicButton.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.ui._FlxTypedButton.GraphicButton"] = flixel_ui__$FlxTypedButton_GraphicButton;
flixel_ui__$FlxTypedButton_GraphicButton.__name__ = ["flixel","ui","_FlxTypedButton","GraphicButton"];
flixel_ui__$FlxTypedButton_GraphicButton.preload = null;
flixel_ui__$FlxTypedButton_GraphicButton.__super__ = openfl_display_BitmapData;
flixel_ui__$FlxTypedButton_GraphicButton.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_ui__$FlxTypedButton_GraphicButton
});
var flixel_ui__$FlxTypedButton_FlxButtonEvent = function(Callback,sound) {
	this.callback = Callback;
	this.sound = sound;
};
$hxClasses["flixel.ui._FlxTypedButton.FlxButtonEvent"] = flixel_ui__$FlxTypedButton_FlxButtonEvent;
flixel_ui__$FlxTypedButton_FlxButtonEvent.__name__ = ["flixel","ui","_FlxTypedButton","FlxButtonEvent"];
flixel_ui__$FlxTypedButton_FlxButtonEvent.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_ui__$FlxTypedButton_FlxButtonEvent.prototype = {
	callback: null
	,sound: null
	,destroy: function() {
		this.callback = null;
		this.sound = flixel_util_FlxDestroyUtil.destroy(this.sound);
	}
	,fire: function() {
		if(this.callback != null) this.callback();
		if(this.sound != null) this.sound.play(true);
	}
	,__class__: flixel_ui__$FlxTypedButton_FlxButtonEvent
};
var flixel_util_FlxAngle = function() { };
$hxClasses["flixel.util.FlxAngle"] = flixel_util_FlxAngle;
flixel_util_FlxAngle.__name__ = ["flixel","util","FlxAngle"];
flixel_util_FlxAngle.__properties__ = {get_TO_RAD:"get_TO_RAD",get_TO_DEG:"get_TO_DEG"}
flixel_util_FlxAngle.rotatePoint = function(X,Y,PivotX,PivotY,Angle,point) {
	var sin = 0;
	var cos = 0;
	var radians = Angle * -(Math.PI / 180);
	while(radians < -Math.PI) radians += Math.PI * 2;
	while(radians > Math.PI) radians = radians - Math.PI * 2;
	if(radians < 0) {
		sin = 1.27323954 * radians + .405284735 * radians * radians;
		if(sin < 0) sin = .225 * (sin * -sin - sin) + sin; else sin = .225 * (sin * sin - sin) + sin;
	} else {
		sin = 1.27323954 * radians - 0.405284735 * radians * radians;
		if(sin < 0) sin = .225 * (sin * -sin - sin) + sin; else sin = .225 * (sin * sin - sin) + sin;
	}
	radians += Math.PI / 2;
	if(radians > Math.PI) radians = radians - Math.PI * 2;
	if(radians < 0) {
		cos = 1.27323954 * radians + 0.405284735 * radians * radians;
		if(cos < 0) cos = .225 * (cos * -cos - cos) + cos; else cos = .225 * (cos * cos - cos) + cos;
	} else {
		cos = 1.27323954 * radians - 0.405284735 * radians * radians;
		if(cos < 0) cos = .225 * (cos * -cos - cos) + cos; else cos = .225 * (cos * cos - cos) + cos;
	}
	var dx = X - PivotX;
	var dy = Y - PivotY;
	if(point == null) point = flixel_util_FlxPoint.get(null,null);
	point.set_x(PivotX + cos * dx - sin * dy);
	point.set_y(PivotY - sin * dx - cos * dy);
	return point;
};
flixel_util_FlxAngle.getAngle = function(Point1,Point2) {
	var x = Point2.x - Point1.x;
	var y = Point2.y - Point1.y;
	var angle = 0;
	if(x != 0 || y != 0) {
		var c1 = Math.PI * 0.25;
		var c2 = 3 * c1;
		var ay;
		if(y < 0) ay = -y; else ay = y;
		if(x >= 0) angle = c1 - c1 * ((x - ay) / (x + ay)); else angle = c2 - c1 * ((x + ay) / (ay - x));
		angle = (y < 0?-angle:angle) * (180 / Math.PI);
		if(angle > 90) angle = angle - 270; else angle += 90;
	}
	if(Point1._weak) Point1.put();
	if(Point2._weak) Point2.put();
	return angle;
};
flixel_util_FlxAngle.sinCosGenerator = function(length,sinAmplitude,cosAmplitude,frequency) {
	if(frequency == null) frequency = 1.0;
	if(cosAmplitude == null) cosAmplitude = 1.0;
	if(sinAmplitude == null) sinAmplitude = 1.0;
	var sin = sinAmplitude;
	var cos = cosAmplitude;
	var frq = frequency * Math.PI / length;
	flixel_util_FlxAngle.cosTable = [];
	flixel_util_FlxAngle.sinTable = [];
	var _g = 0;
	while(_g < length) {
		var c = _g++;
		cos -= sin * frq;
		sin += cos * frq;
		flixel_util_FlxAngle.cosTable[c] = cos;
		flixel_util_FlxAngle.sinTable[c] = sin;
	}
};
flixel_util_FlxAngle.wrapAngle = function(angle) {
	if(angle > 180) angle = -180; else if(angle < -180) angle = 180;
	return angle;
};
flixel_util_FlxAngle.angleLimit = function(angle,min,max) {
	if(angle > max) angle = max; else if(angle < min) angle = min;
	return angle;
};
flixel_util_FlxAngle.asDegrees = function(radians) {
	return radians * (180 / Math.PI);
};
flixel_util_FlxAngle.asRadians = function(degrees) {
	return degrees * (Math.PI / 180);
};
flixel_util_FlxAngle.angleBetween = function(SpriteA,SpriteB,AsDegrees) {
	if(AsDegrees == null) AsDegrees = false;
	var dx = SpriteB.x + SpriteB.origin.x - (SpriteA.x + SpriteA.origin.x);
	var dy = SpriteB.y + SpriteB.origin.y - (SpriteA.y + SpriteA.origin.y);
	if(AsDegrees) return flixel_util_FlxAngle.asDegrees(Math.atan2(dy,dx)); else return Math.atan2(dy,dx);
};
flixel_util_FlxAngle.angleBetweenPoint = function(Sprite,Target,AsDegrees) {
	if(AsDegrees == null) AsDegrees = false;
	var dx = Target.x - (Sprite.x + Sprite.origin.x);
	var dy = Target.y - (Sprite.y + Sprite.origin.y);
	if(AsDegrees) return flixel_util_FlxAngle.asDegrees(Math.atan2(dy,dx)); else return Math.atan2(dy,dx);
};
flixel_util_FlxAngle.angleBetweenMouse = function(Object,AsDegrees) {
	if(AsDegrees == null) AsDegrees = false;
	if(Object == null) return 0;
	var p = Object.getScreenXY();
	var dx = flixel_FlxG.mouse.screenX - p.x;
	var dy = flixel_FlxG.mouse.screenY - p.y;
	if(AsDegrees) return flixel_util_FlxAngle.asDegrees(Math.atan2(dy,dx)); else return Math.atan2(dy,dx);
};
flixel_util_FlxAngle.angleBetweenTouch = function(Object,Touch,AsDegrees) {
	if(AsDegrees == null) AsDegrees = false;
	var p = Object.getScreenXY();
	var dx = Touch.screenX - p.x;
	var dy = Touch.screenY - p.y;
	if(AsDegrees) return flixel_util_FlxAngle.asDegrees(Math.atan2(dy,dx)); else return Math.atan2(dy,dx);
};
flixel_util_FlxAngle.getCartesianCoords = function(Radius,Angle,point) {
	var p = point;
	if(p == null) p = flixel_util_FlxPoint.get(null,null);
	p.set_x(Radius * Math.cos(Angle * (Math.PI / 180)));
	p.set_y(Radius * Math.sin(Angle * (Math.PI / 180)));
	return p;
};
flixel_util_FlxAngle.getPolarCoords = function(X,Y,point) {
	var p = point;
	if(p == null) p = flixel_util_FlxPoint.get(null,null);
	p.set_x(Math.sqrt(X * X + Y * Y));
	p.set_y(Math.atan2(Y,X) * (180 / Math.PI));
	return p;
};
flixel_util_FlxAngle.get_TO_DEG = function() {
	return 180 / Math.PI;
};
flixel_util_FlxAngle.get_TO_RAD = function() {
	return Math.PI / 180;
};
var flixel_util_FlxArrayUtil = function() { };
$hxClasses["flixel.util.FlxArrayUtil"] = flixel_util_FlxArrayUtil;
flixel_util_FlxArrayUtil.__name__ = ["flixel","util","FlxArrayUtil"];
flixel_util_FlxArrayUtil.setLength_flixel_system_replay_FrameRecord = function(array,newLength) {
	if(newLength < 0) return;
	var oldLength = array.length;
	var diff = newLength - oldLength;
	if(diff < 0) {
		diff = -diff;
		var _g = 0;
		while(_g < diff) {
			var i = _g++;
			array.pop();
		}
	}
};
flixel_util_FlxArrayUtil.setLength_flixel_group_FlxTypedGroup_T = function(array,newLength) {
	if(newLength < 0) return;
	var oldLength = array.length;
	var diff = newLength - oldLength;
	if(diff < 0) {
		diff = -diff;
		var _g = 0;
		while(_g < diff) {
			var i = _g++;
			array.pop();
		}
	}
};
flixel_util_FlxArrayUtil.setLength_flixel_input_keyboard_FlxKey = function(array,newLength) {
	if(newLength < 0) return;
	var oldLength = array.length;
	var diff = newLength - oldLength;
	if(diff < 0) {
		diff = -diff;
		var _g = 0;
		while(_g < diff) {
			var i = _g++;
			array.pop();
		}
	}
};
flixel_util_FlxArrayUtil.fastSplice_flixel_text_FlxTextFormat = function(array,element) {
	var index = HxOverrides.indexOf(array,element,0);
	if(index != -1) {
		array[index] = array[array.length - 1];
		array.pop();
		return array;
	}
	return array;
};
flixel_util_FlxArrayUtil.setLength_Int = function(array,newLength) {
	if(newLength < 0) return;
	var oldLength = array.length;
	var diff = newLength - oldLength;
	if(diff < 0) {
		diff = -diff;
		var _g = 0;
		while(_g < diff) {
			var i = _g++;
			array.pop();
		}
	}
};
flixel_util_FlxArrayUtil.setLength_openfl_geom_Rectangle = function(array,newLength) {
	if(newLength < 0) return;
	var oldLength = array.length;
	var diff = newLength - oldLength;
	if(diff < 0) {
		diff = -diff;
		var _g = 0;
		while(_g < diff) {
			var i = _g++;
			array.pop();
		}
	}
};
flixel_util_FlxArrayUtil.fastSplice_flixel_tweens_FlxTween = function(array,element) {
	var index = HxOverrides.indexOf(array,element,0);
	if(index != -1) {
		array[index] = array[array.length - 1];
		array.pop();
		return array;
	}
	return array;
};
flixel_util_FlxArrayUtil.fastSplice_flixel_util_FlxTimer = function(array,element) {
	var index = HxOverrides.indexOf(array,element,0);
	if(index != -1) {
		array[index] = array[array.length - 1];
		array.pop();
		return array;
	}
	return array;
};
flixel_util_FlxArrayUtil.fastSplice_flixel_util_FlxPath = function(array,element) {
	var index = HxOverrides.indexOf(array,element,0);
	if(index != -1) {
		array[index] = array[array.length - 1];
		array.pop();
		return array;
	}
	return array;
};
flixel_util_FlxArrayUtil.getRandom_flixel_group_FlxTypedGroup_T = function(Objects,StartIndex,EndIndex) {
	if(EndIndex == null) EndIndex = 0;
	if(StartIndex == null) StartIndex = 0;
	return flixel_util_FlxRandom.getObject_getRandom_T(Objects,StartIndex,EndIndex);
};
flixel_util_FlxArrayUtil.fastSplice_flixel_system_debug_WatchEntry = function(array,element) {
	var index = HxOverrides.indexOf(array,element,0);
	if(index != -1) {
		array[index] = array[array.length - 1];
		array.pop();
		return array;
	}
	return array;
};
flixel_util_FlxArrayUtil.fastSplice_flixel_system_debug_Window = function(array,element) {
	var index = HxOverrides.indexOf(array,element,0);
	if(index != -1) {
		array[index] = array[array.length - 1];
		array.pop();
		return array;
	}
	return array;
};
flixel_util_FlxArrayUtil.swapAndPop_fastSplice_T = function(array,index) {
	array[index] = array[array.length - 1];
	array.pop();
	return array;
};
flixel_util_FlxArrayUtil.clearArray = function(array,recursive) {
	if(recursive == null) recursive = false;
	if(array != null) {
		if(!recursive) while(array.length > 0) array.pop(); else while(array.length > 0) {
			var thing = array.pop();
			if((thing instanceof Array) && thing.__enum__ == null) flixel_util_FlxArrayUtil.clearArray(array,recursive);
		}
	}
};
var flixel_util_FlxBitmapDataPool = function() { };
$hxClasses["flixel.util.FlxBitmapDataPool"] = flixel_util_FlxBitmapDataPool;
flixel_util_FlxBitmapDataPool.__name__ = ["flixel","util","FlxBitmapDataPool"];
flixel_util_FlxBitmapDataPool.__properties__ = {set_maxLength:"set_maxLength"}
flixel_util_FlxBitmapDataPool.get = function(w,h,transparent,fillColor,exactSize) {
	if(exactSize == null) exactSize = false;
	if(transparent == null) transparent = true;
	var res = null;
	var node = flixel_util_FlxBitmapDataPool._head;
	while(node != null) {
		var bmd = node.bmd;
		if(bmd.transparent == transparent && bmd.width >= w && bmd.height >= h && (!exactSize || exactSize && bmd.width == w && bmd.height == h)) {
			res = bmd;
			if(node.prev != null) node.prev.next = node.next;
			if(node.next != null) node.next.prev = node.prev;
			if(node == flixel_util_FlxBitmapDataPool._head) flixel_util_FlxBitmapDataPool._head = node.next;
			if(node == flixel_util_FlxBitmapDataPool._tail) flixel_util_FlxBitmapDataPool._tail = node.prev;
			node = null;
			flixel_util_FlxBitmapDataPool.$length--;
			break;
		}
		node = node.next;
	}
	if(res != null) {
		if(fillColor != null) {
			flixel_util_FlxBitmapDataPool._rect.x = 0;
			flixel_util_FlxBitmapDataPool._rect.y = 0;
			flixel_util_FlxBitmapDataPool._rect.width = w;
			flixel_util_FlxBitmapDataPool._rect.height = h;
			res.fillRect(flixel_util_FlxBitmapDataPool._rect,fillColor);
		}
	} else res = new openfl_display_BitmapData(w,h,transparent,fillColor != null?fillColor:-1);
	return res;
};
flixel_util_FlxBitmapDataPool.put = function(bmd) {
	if(flixel_util_FlxBitmapDataPool.$length >= flixel_util_FlxBitmapDataPool.maxLength) {
		var last = flixel_util_FlxBitmapDataPool._tail;
		last.bmd.dispose();
		if(last.prev != null) {
			last.prev.next = null;
			flixel_util_FlxBitmapDataPool._tail = last.prev;
		}
		last = null;
		flixel_util_FlxBitmapDataPool.$length--;
	}
	var node = new flixel_util__$FlxBitmapDataPool_FlxBitmapDataPoolNode(bmd);
	node.next = flixel_util_FlxBitmapDataPool._head;
	if(flixel_util_FlxBitmapDataPool._head == null) flixel_util_FlxBitmapDataPool._head = flixel_util_FlxBitmapDataPool._tail = node; else {
		flixel_util_FlxBitmapDataPool._head = node;
		node.next.prev = node;
	}
	flixel_util_FlxBitmapDataPool.$length++;
};
flixel_util_FlxBitmapDataPool.clear = function() {
	var node = flixel_util_FlxBitmapDataPool._head;
	while(node != null) {
		var bmd = node.bmd;
		bmd.dispose();
		bmd = null;
		node = node.next;
	}
	flixel_util_FlxBitmapDataPool.$length = 0;
	flixel_util_FlxBitmapDataPool._head = flixel_util_FlxBitmapDataPool._tail = null;
};
flixel_util_FlxBitmapDataPool.set_maxLength = function(value) {
	if(flixel_util_FlxBitmapDataPool.maxLength != value) {
		var node = flixel_util_FlxBitmapDataPool._tail;
		while(node != null && flixel_util_FlxBitmapDataPool.$length > value) {
			var bmd = node.bmd;
			bmd.dispose();
			bmd = null;
			node = node.prev;
			flixel_util_FlxBitmapDataPool.$length--;
		}
	}
	return flixel_util_FlxBitmapDataPool.maxLength = value;
};
var flixel_util__$FlxBitmapDataPool_FlxBitmapDataPoolNode = function(bmd,prev,next) {
	this.bmd = bmd;
	this.prev = prev;
	this.next = next;
};
$hxClasses["flixel.util._FlxBitmapDataPool.FlxBitmapDataPoolNode"] = flixel_util__$FlxBitmapDataPool_FlxBitmapDataPoolNode;
flixel_util__$FlxBitmapDataPool_FlxBitmapDataPoolNode.__name__ = ["flixel","util","_FlxBitmapDataPool","FlxBitmapDataPoolNode"];
flixel_util__$FlxBitmapDataPool_FlxBitmapDataPoolNode.prototype = {
	bmd: null
	,prev: null
	,next: null
	,__class__: flixel_util__$FlxBitmapDataPool_FlxBitmapDataPoolNode
};
var flixel_util_FlxBitmapUtil = function() { };
$hxClasses["flixel.util.FlxBitmapUtil"] = flixel_util_FlxBitmapUtil;
flixel_util_FlxBitmapUtil.__name__ = ["flixel","util","FlxBitmapUtil"];
flixel_util_FlxBitmapUtil.merge = function(sourceBitmapData,sourceRect,destBitmapData,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(destPoint.x >= destBitmapData.width || destPoint.y >= destBitmapData.height || sourceRect.x >= sourceBitmapData.width || sourceRect.y >= sourceBitmapData.height || sourceRect.x + sourceRect.width <= 0 || sourceRect.y + sourceRect.height <= 0) return;
	while(sourceRect.x + sourceRect.width > sourceBitmapData.width || sourceRect.y + sourceRect.height > sourceBitmapData.height || sourceRect.x < 0 || sourceRect.y < 0 || destPoint.x < 0 || destPoint.y < 0) {
		if(sourceRect.x + sourceRect.width > sourceBitmapData.width) sourceRect.width = sourceBitmapData.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceBitmapData.height) sourceRect.height = sourceBitmapData.height - sourceRect.y;
		if(sourceRect.x < 0) {
			destPoint.x = destPoint.x - sourceRect.x;
			sourceRect.width = sourceRect.width + sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			destPoint.y = destPoint.y - sourceRect.y;
			sourceRect.height = sourceRect.height + sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x >= destBitmapData.width || destPoint.y >= destBitmapData.height) return;
		if(destPoint.x < 0) {
			sourceRect.x = sourceRect.x - destPoint.x;
			sourceRect.width = sourceRect.width + destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.y = sourceRect.y - destPoint.y;
			sourceRect.height = sourceRect.height + destPoint.y;
			destPoint.y = 0;
		}
	}
	if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
	var startSourceX = Math.round(sourceRect.x);
	var startSourceY = Math.round(sourceRect.y);
	var width = Math.round(sourceRect.width);
	var height = Math.round(sourceRect.height);
	var sourceX = startSourceX;
	var sourceY = startSourceY;
	var destX = Math.round(destPoint.x);
	var destY = Math.round(destPoint.y);
	var currX = destX;
	var currY = destY;
	var sourceColor;
	var destColor;
	var sourceRed;
	var sourceGreen;
	var sourceBlue;
	var sourceAlpha;
	var destRed;
	var destGreen;
	var destBlue;
	var destAlpha;
	var resultRed;
	var resultGreen;
	var resultBlue;
	var resultAlpha;
	var resultColor = 0;
	destBitmapData.lock();
	var _g = 0;
	while(_g < width) {
		var i = _g++;
		var _g1 = 0;
		while(_g1 < height) {
			var j = _g1++;
			sourceX = startSourceX + i;
			sourceY = startSourceY + j;
			currX = destX + i;
			currY = destY + j;
			sourceColor = sourceBitmapData.getPixel32(sourceX,sourceY);
			destColor = destBitmapData.getPixel32(currX,currY);
			sourceRed = sourceColor >> 16 & 255;
			sourceGreen = sourceColor >> 8 & 255;
			sourceBlue = sourceColor & 255;
			sourceAlpha = sourceColor >> 24 & 255;
			destRed = destColor >> 16 & 255;
			destGreen = destColor >> 8 & 255;
			destBlue = destColor & 255;
			destAlpha = destColor >> 24 & 255;
			resultRed = (sourceRed * redMultiplier + destRed * (256 - redMultiplier)) / 256 | 0;
			resultGreen = (sourceGreen * greenMultiplier + destGreen * (256 - greenMultiplier)) / 256 | 0;
			resultBlue = (sourceBlue * blueMultiplier + destBlue * (256 - blueMultiplier)) / 256 | 0;
			resultAlpha = (sourceAlpha * alphaMultiplier + destAlpha * (256 - alphaMultiplier)) / 256 | 0;
			resultColor = resultAlpha << 24 | resultRed << 16 | resultGreen << 8 | resultBlue;
			destBitmapData.setPixel32(currX,currY,resultColor);
		}
	}
	destBitmapData.unlock();
};
flixel_util_FlxBitmapUtil.mergeColorComponent = function(source,dest,multiplier) {
	return (source * multiplier + dest * (256 - multiplier)) / 256 | 0;
};
flixel_util_FlxBitmapUtil.compare = function(Bitmap1,Bitmap2) {
	if(Bitmap1 == Bitmap2) return 0;
	if(Bitmap1.width != Bitmap2.width) return -3; else if(Bitmap1.height != Bitmap2.height) return -4; else {
		var width = Bitmap1.width;
		var height = Bitmap1.height;
		var result = new openfl_display_BitmapData(width,height,true,0);
		var identical = true;
		var pixel1;
		var pixel2;
		var rgb1;
		var rgb2;
		var r1;
		var g1;
		var b1;
		var r2;
		var g2;
		var b2;
		var alpha1;
		var alpha2;
		var resultAlpha;
		var resultColor;
		var resultR;
		var resultG;
		var resultB;
		var diffR;
		var diffG;
		var diffB;
		var diffA;
		var checkAlpha = true;
		var _g = 0;
		while(_g < width) {
			var i = _g++;
			var _g1 = 0;
			while(_g1 < height) {
				var j = _g1++;
				pixel1 = Bitmap1.getPixel32(i,j);
				pixel2 = Bitmap2.getPixel32(i,j);
				if(pixel1 != pixel2) {
					identical = false;
					checkAlpha = true;
					rgb1 = pixel1 & 16777215;
					rgb2 = pixel2 & 16777215;
					if(rgb1 != rgb2) {
						r1 = pixel1 >> 16 & 255;
						g1 = pixel1 >> 8 & 255;
						b1 = pixel1 & 255;
						r2 = pixel2 >> 16 & 255;
						g2 = pixel2 >> 8 & 255;
						b2 = pixel2 & 255;
						diffR = r1 - r2;
						diffG = g1 - g2;
						diffB = b1 - b2;
						if(diffR >= 0) resultR = diffR; else resultR = 256 + diffR;
						if(diffG >= 0) resultG = diffG; else resultG = 256 + diffG;
						if(diffB >= 0) resultB = diffB; else resultB = 256 + diffB;
						resultColor = -16777216 | resultR << 16 | resultG << 8 | resultB;
						result.setPixel32(i,j,resultColor);
						checkAlpha = false;
					}
					if(checkAlpha) {
						alpha1 = pixel1 >> 24 & 255;
						alpha2 = pixel2 >> 24 & 255;
						diffA = alpha1 - alpha2;
						if(diffA >= 0) resultAlpha = diffA; else resultAlpha = 256 + diffA;
						resultColor = resultAlpha | 16711680 | 65280 | 255;
						if(alpha1 != alpha2) result.setPixel32(i,j,resultColor);
					}
				}
			}
		}
		if(!identical) return result;
	}
	return 0;
};
flixel_util_FlxBitmapUtil.getMemorySize = function(bitmapData) {
	return bitmapData.width * bitmapData.height * 4;
};
var flixel_util_FlxCollision = function() { };
$hxClasses["flixel.util.FlxCollision"] = flixel_util_FlxCollision;
flixel_util_FlxCollision.__name__ = ["flixel","util","FlxCollision"];
flixel_util_FlxCollision.pixelPerfectCheck = function(Contact,Target,AlphaTolerance,Camera) {
	if(AlphaTolerance == null) AlphaTolerance = 1;
	var considerRotation = Contact.angle != 0 || Target.angle != 0;
	if(Camera != null) Camera = Camera; else Camera = flixel_FlxG.camera;
	flixel_util_FlxCollision.pointA.x = Contact.x - (Camera.scroll.x * Contact.scrollFactor.x | 0) - Contact.offset.x;
	flixel_util_FlxCollision.pointA.y = Contact.y - (Camera.scroll.y * Contact.scrollFactor.y | 0) - Contact.offset.y;
	flixel_util_FlxCollision.pointB.x = Target.x - (Camera.scroll.x * Target.scrollFactor.x | 0) - Target.offset.x;
	flixel_util_FlxCollision.pointB.y = Target.y - (Camera.scroll.y * Target.scrollFactor.y | 0) - Target.offset.y;
	if(considerRotation) {
		flixel_util_FlxCollision.centerA.setTo(Contact.origin.x,Contact.origin.y);
		flixel_util_FlxCollision.centerB.setTo(Target.origin.x,Target.origin.y);
		flixel_util_FlxCollision.boundsA.x = flixel_util_FlxCollision.pointA.x + flixel_util_FlxCollision.centerA.x - flixel_util_FlxCollision.centerA.get_length();
		flixel_util_FlxCollision.boundsA.y = flixel_util_FlxCollision.pointA.y + flixel_util_FlxCollision.centerA.y - flixel_util_FlxCollision.centerA.get_length();
		flixel_util_FlxCollision.boundsA.width = flixel_util_FlxCollision.centerA.get_length() * 2;
		flixel_util_FlxCollision.boundsA.height = flixel_util_FlxCollision.boundsA.width;
		flixel_util_FlxCollision.boundsB.x = flixel_util_FlxCollision.pointB.x + flixel_util_FlxCollision.centerB.x - flixel_util_FlxCollision.centerB.get_length();
		flixel_util_FlxCollision.boundsB.y = flixel_util_FlxCollision.pointB.y + flixel_util_FlxCollision.centerB.y - flixel_util_FlxCollision.centerB.get_length();
		flixel_util_FlxCollision.boundsB.width = flixel_util_FlxCollision.centerB.get_length() * 2;
		flixel_util_FlxCollision.boundsB.height = flixel_util_FlxCollision.boundsB.width;
	} else {
		flixel_util_FlxCollision.boundsA.x = flixel_util_FlxCollision.pointA.x;
		flixel_util_FlxCollision.boundsA.y = flixel_util_FlxCollision.pointA.y;
		flixel_util_FlxCollision.boundsA.width = Contact.frameWidth;
		flixel_util_FlxCollision.boundsA.height = Contact.frameHeight;
		flixel_util_FlxCollision.boundsB.x = flixel_util_FlxCollision.pointB.x;
		flixel_util_FlxCollision.boundsB.y = flixel_util_FlxCollision.pointB.y;
		flixel_util_FlxCollision.boundsB.width = Target.frameWidth;
		flixel_util_FlxCollision.boundsB.height = Target.frameHeight;
	}
	var intersect = flixel_util_FlxCollision.boundsA.intersection(flixel_util_FlxCollision.boundsB);
	if(intersect.isEmpty() || intersect.width < 1 || intersect.height < 1) return false;
	flixel_util_FlxCollision.matrixA.identity();
	flixel_util_FlxCollision.matrixA.translate(-(intersect.x - flixel_util_FlxCollision.boundsA.x),-(intersect.y - flixel_util_FlxCollision.boundsA.y));
	flixel_util_FlxCollision.matrixB.identity();
	flixel_util_FlxCollision.matrixB.translate(-(intersect.x - flixel_util_FlxCollision.boundsB.x),-(intersect.y - flixel_util_FlxCollision.boundsB.y));
	var testA = Contact.framePixels;
	var testB = Target.framePixels;
	var overlapWidth = intersect.width | 0;
	var overlapHeight = intersect.height | 0;
	if(considerRotation) {
		flixel_util_FlxCollision.testMatrix.identity();
		flixel_util_FlxCollision.testMatrix.translate(-Contact.origin.x,-Contact.origin.y);
		flixel_util_FlxCollision.testMatrix.rotate(Contact.angle * (Math.PI / 180));
		flixel_util_FlxCollision.testMatrix.translate(flixel_util_FlxCollision.boundsA.width / 2,flixel_util_FlxCollision.boundsA.height / 2);
		var testA2 = flixel_util_FlxBitmapDataPool.get(Math.floor(flixel_util_FlxCollision.boundsA.width),Math.floor(flixel_util_FlxCollision.boundsA.height),true,0,false);
		testA2.draw(testA,flixel_util_FlxCollision.testMatrix,null,null,null,false);
		testA = testA2;
		flixel_util_FlxCollision.testMatrix.identity();
		flixel_util_FlxCollision.testMatrix.translate(-Target.origin.x,-Target.origin.y);
		flixel_util_FlxCollision.testMatrix.rotate(Target.angle * (Math.PI / 180));
		flixel_util_FlxCollision.testMatrix.translate(flixel_util_FlxCollision.boundsB.width / 2,flixel_util_FlxCollision.boundsB.height / 2);
		var testB2 = flixel_util_FlxBitmapDataPool.get(Math.floor(flixel_util_FlxCollision.boundsB.width),Math.floor(flixel_util_FlxCollision.boundsB.height),true,0,false);
		testB2.draw(testB,flixel_util_FlxCollision.testMatrix,null,null,null,false);
		testB = testB2;
	}
	flixel_util_FlxCollision.boundsA.x = -flixel_util_FlxCollision.matrixA.tx | 0;
	flixel_util_FlxCollision.boundsA.y = -flixel_util_FlxCollision.matrixA.ty | 0;
	flixel_util_FlxCollision.boundsA.width = overlapWidth;
	flixel_util_FlxCollision.boundsA.height = overlapHeight;
	flixel_util_FlxCollision.boundsB.x = -flixel_util_FlxCollision.matrixB.tx | 0;
	flixel_util_FlxCollision.boundsB.y = -flixel_util_FlxCollision.matrixB.ty | 0;
	flixel_util_FlxCollision.boundsB.width = overlapWidth;
	flixel_util_FlxCollision.boundsB.height = overlapHeight;
	var pixelsA = testA.getPixels(flixel_util_FlxCollision.boundsA);
	var pixelsB = testB.getPixels(flixel_util_FlxCollision.boundsB);
	var hit = false;
	var alphaA = 0;
	var alphaB = 0;
	var overlapPixels = overlapWidth * overlapHeight;
	var alphaIdx = 0;
	var _g1 = 0;
	var _g = Math.ceil(overlapPixels / 2);
	while(_g1 < _g) {
		var i = _g1++;
		alphaIdx = i << 3;
		pixelsA.position = pixelsB.position = alphaIdx;
		alphaA = pixelsA.readUnsignedByte();
		alphaB = pixelsB.readUnsignedByte();
		if(alphaA >= AlphaTolerance && alphaB >= AlphaTolerance) {
			hit = true;
			break;
		}
	}
	if(!hit) {
		var _g11 = 0;
		var _g2 = overlapPixels >> 1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			alphaIdx = (i1 << 3) + 4;
			pixelsA.position = pixelsB.position = alphaIdx;
			alphaA = pixelsA.readUnsignedByte();
			alphaB = pixelsB.readUnsignedByte();
			if(alphaA >= AlphaTolerance && alphaB >= AlphaTolerance) {
				hit = true;
				break;
			}
		}
	}
	if(considerRotation) {
		flixel_util_FlxBitmapDataPool.put(testA);
		flixel_util_FlxBitmapDataPool.put(testB);
	}
	return hit;
};
flixel_util_FlxCollision.pixelPerfectPointCheck = function(PointX,PointY,Target,AlphaTolerance) {
	if(AlphaTolerance == null) AlphaTolerance = 1;
	if(flixel_util_FlxMath.pointInCoordinates(PointX,PointY,Math.floor(Target.x),Math.floor(Target.y),Std["int"](Target.get_width()),Std["int"](Target.get_height())) == false) return false;
	var test = Target.framePixels;
	var pixelAlpha = 0;
	pixelAlpha = flixel_util_FlxColorUtil.getAlpha(test.getPixel32(Math.floor(PointX - Target.x),Math.floor(PointY - Target.y)));
	if(pixelAlpha >= AlphaTolerance) return true; else return false;
};
flixel_util_FlxCollision.createCameraWall = function(Camera,Placement,Thickness,AdjustWorldBounds) {
	if(AdjustWorldBounds == null) AdjustWorldBounds = false;
	var left = null;
	var right = null;
	var top = null;
	var bottom = null;
	switch(Placement) {
	case 0:
		left = new flixel_tile_FlxTileblock(Math.floor(Camera.x - Thickness),Math.floor(Camera.y + Thickness),Thickness,Camera.height - Thickness * 2);
		right = new flixel_tile_FlxTileblock(Math.floor(Camera.x + Camera.width),Math.floor(Camera.y + Thickness),Thickness,Camera.height - Thickness * 2);
		top = new flixel_tile_FlxTileblock(Math.floor(Camera.x - Thickness),Math.floor(Camera.y - Thickness),Camera.width + Thickness * 2,Thickness);
		bottom = new flixel_tile_FlxTileblock(Math.floor(Camera.x - Thickness),Camera.height,Camera.width + Thickness * 2,Thickness);
		if(AdjustWorldBounds) flixel_FlxG.worldBounds.set(Camera.x - Thickness,Camera.y - Thickness,Camera.width + Thickness * 2,Camera.height + Thickness * 2);
		break;
	case 1:
		left = new flixel_tile_FlxTileblock(Math.floor(Camera.x),Math.floor(Camera.y + Thickness),Thickness,Camera.height - Thickness * 2);
		right = new flixel_tile_FlxTileblock(Math.floor(Camera.x + Camera.width - Thickness),Math.floor(Camera.y + Thickness),Thickness,Camera.height - Thickness * 2);
		top = new flixel_tile_FlxTileblock(Math.floor(Camera.x),Math.floor(Camera.y),Camera.width,Thickness);
		bottom = new flixel_tile_FlxTileblock(Math.floor(Camera.x),Camera.height - Thickness,Camera.width,Thickness);
		if(AdjustWorldBounds) flixel_FlxG.worldBounds.set(Camera.x,Camera.y,Camera.width,Camera.height);
		break;
	}
	var result = new flixel_group_FlxGroup(4);
	result.add(left);
	result.add(right);
	result.add(top);
	result.add(bottom);
	return result;
};
var flixel_util_FlxColor = function() { };
$hxClasses["flixel.util.FlxColor"] = flixel_util_FlxColor;
flixel_util_FlxColor.__name__ = ["flixel","util","FlxColor"];
var flixel_util_FlxColorUtil = function() { };
$hxClasses["flixel.util.FlxColorUtil"] = flixel_util_FlxColorUtil;
flixel_util_FlxColorUtil.__name__ = ["flixel","util","FlxColorUtil"];
flixel_util_FlxColorUtil.makeFromARGB = function(Alpha,Red,Green,Blue) {
	if(Alpha == null) Alpha = 1.0;
	return (((Alpha > 1?Alpha:Alpha * 255) | 0) & 255) << 24 | (Red & 255) << 16 | (Green & 255) << 8 | Blue & 255;
};
flixel_util_FlxColorUtil.makeFromHSBA = function(Hue,Saturation,Brightness,Alpha) {
	if(Alpha == null) Alpha = 1.0;
	var red;
	var green;
	var blue;
	if(Saturation == 0.0) {
		red = Brightness;
		green = Brightness;
		blue = Brightness;
	} else {
		if(Hue == 360) Hue = 0;
		var slice = Hue / 60 | 0;
		var hf = Hue / 60 - slice;
		var aa = Brightness * (1 - Saturation);
		var bb = Brightness * (1 - Saturation * hf);
		var cc = Brightness * (1 - Saturation * (1.0 - hf));
		switch(slice) {
		case 0:
			red = Brightness;
			green = cc;
			blue = aa;
			break;
		case 1:
			red = bb;
			green = Brightness;
			blue = aa;
			break;
		case 2:
			red = aa;
			green = Brightness;
			blue = cc;
			break;
		case 3:
			red = aa;
			green = bb;
			blue = Brightness;
			break;
		case 4:
			red = cc;
			green = aa;
			blue = Brightness;
			break;
		case 5:
			red = Brightness;
			green = aa;
			blue = bb;
			break;
		default:
			red = 0;
			green = 0;
			blue = 0;
		}
	}
	return (((Alpha > 1?Alpha:Alpha * 255) | 0) & 255) << 24 | (red * 255 | 0) << 16 | (green * 255 | 0) << 8 | (blue * 255 | 0);
};
flixel_util_FlxColorUtil.getARGB = function(Color,Results) {
	var red = Color >> 16 & 255;
	var green = Color >> 8 & 255;
	var blue = Color & 255;
	var alpha = flixel_util_FlxMath.roundDecimal((Color >> 24 & 255) / 255,4);
	if(Results != null) Results = { red : red, green : green, blue : blue, alpha : alpha};
	return { red : red, green : green, blue : blue, alpha : alpha};
};
flixel_util_FlxColorUtil.getHSBA = function(Color,Results) {
	var hue;
	var saturation;
	var brightness;
	var alpha;
	var red = (Color >> 16 & 255) / 255;
	var green = (Color >> 8 & 255) / 255;
	var blue = (Color & 255) / 255;
	var m;
	if(red > green) m = red; else m = green;
	var dmax;
	if(m > blue) dmax = m; else dmax = blue;
	if(red > green) m = green; else m = red;
	var dmin;
	if(m > blue) dmin = blue; else dmin = m;
	var range = dmax - dmin;
	brightness = flixel_util_FlxMath.roundDecimal(dmax,4);
	saturation = 0;
	hue = 0;
	if(dmax != 0) saturation = flixel_util_FlxMath.roundDecimal(range / dmax,4);
	if(saturation != 0) {
		if(red == dmax) hue = (green - blue) / range; else if(green == dmax) hue = 2 + (blue - red) / range; else if(blue == dmax) hue = 4 + (red - green) / range;
		hue *= 60;
		if(hue < 0) hue += 360;
	}
	alpha = flixel_util_FlxMath.roundDecimal((Color >> 24 & 255) / 255,4);
	if(Results != null) Results = { hue : hue | 0, brightness : brightness, saturation : saturation, alpha : alpha};
	return { hue : hue | 0, brightness : brightness, saturation : saturation, alpha : alpha};
};
flixel_util_FlxColorUtil.getAlpha = function(Color) {
	return Color >> 24 & 255;
};
flixel_util_FlxColorUtil.getAlphaFloat = function(Color) {
	var f = Color >> 24 & 255;
	return f / 255;
};
flixel_util_FlxColorUtil.getRed = function(Color) {
	return Color >> 16 & 255;
};
flixel_util_FlxColorUtil.getGreen = function(Color) {
	return Color >> 8 & 255;
};
flixel_util_FlxColorUtil.getBlue = function(Color) {
	return Color & 255;
};
flixel_util_FlxColorUtil.getRandomColor = function(Min,Max,Alpha) {
	if(Alpha == null) Alpha = 255;
	if(Max == null) Max = 255;
	if(Min == null) Min = 0;
	return flixel_util_FlxRandom.color(Min,Max,Alpha);
};
flixel_util_FlxColorUtil.getColor32 = function(Alpha,Red,Green,Blue) {
	return Alpha << 24 | Red << 16 | Green << 8 | Blue;
};
flixel_util_FlxColorUtil.getColor24 = function(Red,Green,Blue) {
	return Red << 16 | Green << 8 | Blue;
};
flixel_util_FlxColorUtil.getHSVColorWheel = function(Alpha) {
	if(Alpha == null) Alpha = 255;
	var colors = [];
	var _g = 0;
	while(_g < 360) {
		var c = _g++;
		colors[c] = flixel_util_FlxColorUtil.HSVtoARGB(c,1.0,1.0,Alpha);
	}
	return colors;
};
flixel_util_FlxColorUtil.getComplementHarmony = function(Color) {
	var hsv = flixel_util_FlxColorUtil.RGBtoHSV(Color);
	var opposite = flixel_util_FlxMath.wrapValue(hsv.hue | 0,180,359);
	return flixel_util_FlxColorUtil.HSVtoARGB(opposite,1.0,1.0);
};
flixel_util_FlxColorUtil.getAnalogousHarmony = function(Color,Threshold) {
	if(Threshold == null) Threshold = 30;
	var hsv = flixel_util_FlxColorUtil.RGBtoHSV(Color);
	if(Threshold > 359 || Threshold < 0) flixel_FlxG.log.advanced("FlxColor Warning: Invalid threshold given to getAnalogousHarmony()",flixel_system_debug_LogStyle.WARNING,true);
	var warmer = flixel_util_FlxMath.wrapValue(hsv.hue | 0,359 - Threshold,359);
	var colder = flixel_util_FlxMath.wrapValue(hsv.hue | 0,Threshold,359);
	return { color1 : Color, color2 : flixel_util_FlxColorUtil.HSVtoARGB(warmer,1.0,1.0), color3 : flixel_util_FlxColorUtil.HSVtoARGB(colder,1.0,1.0), hue1 : hsv.hue | 0, hue2 : warmer, hue3 : colder};
};
flixel_util_FlxColorUtil.getSplitComplementHarmony = function(Color,Threshold) {
	if(Threshold == null) Threshold = 30;
	var hsv = flixel_util_FlxColorUtil.RGBtoHSV(Color);
	if(Threshold >= 359 || Threshold <= 0) flixel_FlxG.log.advanced("FlxColor: Invalid threshold given to getSplitComplementHarmony()",flixel_system_debug_LogStyle.WARNING,true);
	var opposite = flixel_util_FlxMath.wrapValue(hsv.hue | 0,180,359);
	var warmer = flixel_util_FlxMath.wrapValue(hsv.hue | 0,opposite - Threshold,359);
	var colder = flixel_util_FlxMath.wrapValue(hsv.hue | 0,opposite + Threshold,359);
	flixel_FlxG.log.advanced("hue: " + hsv.hue + " opposite: " + opposite + " warmer: " + warmer + " colder: " + colder,flixel_system_debug_LogStyle.NOTICE);
	return { color1 : Color, color2 : flixel_util_FlxColorUtil.HSVtoARGB(warmer,hsv.saturation,hsv.value), color3 : flixel_util_FlxColorUtil.HSVtoARGB(colder,hsv.saturation,hsv.value), hue1 : hsv.hue | 0, hue2 : warmer, hue3 : colder};
};
flixel_util_FlxColorUtil.getTriadicHarmony = function(Color) {
	var hsv = flixel_util_FlxColorUtil.RGBtoHSV(Color);
	var triadic1 = flixel_util_FlxMath.wrapValue(hsv.hue | 0,120,359);
	var triadic2 = flixel_util_FlxMath.wrapValue(triadic1,120,359);
	return { color1 : Color, color2 : flixel_util_FlxColorUtil.HSVtoARGB(triadic1,1.0,1.0), color3 : flixel_util_FlxColorUtil.HSVtoARGB(triadic2,1.0,1.0)};
};
flixel_util_FlxColorUtil.getColorInfo = function(Color) {
	var argb = flixel_util_FlxColorUtil.getARGB(Color,null);
	var hsl = flixel_util_FlxColorUtil.RGBtoHSV(Color);
	var result = flixel_util_FlxColorUtil.ARGBtoHexString(Color) + "\n";
	result += "Alpha: " + argb.alpha + " Red: " + argb.red + " Green: " + argb.green + " Blue: " + argb.blue + "\n";
	result += "Hue: " + hsl.hue + " Saturation: " + hsl.saturation + " Lightnes: " + hsl.lightness;
	return result;
};
flixel_util_FlxColorUtil.ARGBtoHexString = function(Color) {
	var argb = flixel_util_FlxColorUtil.getARGB(Color,null);
	return "0x" + flixel_util_FlxColorUtil.colorToHexString(argb.alpha | 0) + flixel_util_FlxColorUtil.colorToHexString(argb.red) + flixel_util_FlxColorUtil.colorToHexString(argb.green) + flixel_util_FlxColorUtil.colorToHexString(argb.blue);
};
flixel_util_FlxColorUtil.ARGBtoWebString = function(Color) {
	var argb = flixel_util_FlxColorUtil.getARGB(Color,null);
	return "#" + flixel_util_FlxColorUtil.colorToHexString(argb.red) + flixel_util_FlxColorUtil.colorToHexString(argb.green) + flixel_util_FlxColorUtil.colorToHexString(argb.blue);
};
flixel_util_FlxColorUtil.colorToHexString = function(Color) {
	var digits = "0123456789ABCDEF";
	var lsd = Color % 16;
	var msd = (Color - lsd) / 16;
	return digits.charAt(msd | 0) + digits.charAt(lsd | 0);
};
flixel_util_FlxColorUtil.HSVtoARGB = function(H,S,V,Alpha) {
	if(Alpha == null) Alpha = 255;
	var result = 0;
	if(S == 0.0) result = Alpha << 24 | (V * 255 | 0) << 16 | (V * 255 | 0) << 8 | (V * 255 | 0); else {
		H = H / 60.0;
		var f = H - (H | 0);
		var p = V * (1.0 - S);
		var q = V * (1.0 - S * f);
		var t = V * (1.0 - S * (1.0 - f));
		var _g = H | 0;
		switch(_g) {
		case 0:
			result = Alpha << 24 | (V * 255 | 0) << 16 | (t * 255 | 0) << 8 | (p * 255 | 0);
			break;
		case 1:
			result = Alpha << 24 | (q * 255 | 0) << 16 | (V * 255 | 0) << 8 | (p * 255 | 0);
			break;
		case 2:
			result = Alpha << 24 | (p * 255 | 0) << 16 | (V * 255 | 0) << 8 | (t * 255 | 0);
			break;
		case 3:
			result = Alpha << 24 | (p * 255 | 0) << 16 | (q * 255 | 0) << 8 | (V * 255 | 0);
			break;
		case 4:
			result = Alpha << 24 | (t * 255 | 0) << 16 | (p * 255 | 0) << 8 | (V * 255 | 0);
			break;
		case 5:
			result = Alpha << 24 | (V * 255 | 0) << 16 | (p * 255 | 0) << 8 | (q * 255 | 0);
			break;
		default:
			flixel_FlxG.log.advanced("FlxColor: HSVtoARGB: Unknown color",flixel_system_debug_LogStyle.WARNING,true);
		}
	}
	return result;
};
flixel_util_FlxColorUtil.RGBtoHSV = function(Color) {
	var rgb = flixel_util_FlxColorUtil.getARGB(Color,null);
	var red = rgb.red / 255;
	var green = rgb.green / 255;
	var blue = rgb.blue / 255;
	var min = Math.min(red,Math.min(green,blue));
	var max = Math.max(red,Math.max(green,blue));
	var delta = max - min;
	var lightness = (max + min) / 2;
	var hue = 0;
	var saturation;
	if(delta == 0) {
		hue = 0;
		saturation = 0;
	} else {
		if(lightness < 0.5) saturation = delta / (max + min); else saturation = delta / (2 - max - min);
		var delta_r = ((max - red) / 6 + delta / 2) / delta;
		var delta_g = ((max - green) / 6 + delta / 2) / delta;
		var delta_b = ((max - blue) / 6 + delta / 2) / delta;
		if(red == max) hue = delta_b - delta_g; else if(green == max) hue = 0.333333333333333315 + delta_r - delta_b; else if(blue == max) hue = 0.66666666666666663 + delta_g - delta_r;
		if(hue < 0) hue += 1;
		if(hue > 1) hue -= 1;
	}
	hue *= 360;
	hue = Math.round(hue);
	return { hue : hue, saturation : saturation, lightness : lightness, value : lightness};
};
flixel_util_FlxColorUtil.ARGBtoRGB = function(Color) {
	return (Color >> 16 & 255) << 16 | (Color >> 8 & 255) << 8 | Color & 255;
};
flixel_util_FlxColorUtil.interpolateColor = function(Color1,Color2,Steps,CurrentStep,Alpha) {
	if(Alpha == null) Alpha = 255;
	var src1 = flixel_util_FlxColorUtil.getARGB(Color1,null);
	var src2 = flixel_util_FlxColorUtil.getARGB(Color2,null);
	var r = (src2.red - src1.red) * CurrentStep / Steps + src1.red | 0;
	var g = (src2.green - src1.green) * CurrentStep / Steps + src1.green | 0;
	var b = (src2.blue - src1.blue) * CurrentStep / Steps + src1.blue | 0;
	return Alpha << 24 | r << 16 | g << 8 | b;
};
flixel_util_FlxColorUtil.interpolateColorWithRGB = function(Color,R2,G2,B2,Steps,CurrentStep) {
	var src = flixel_util_FlxColorUtil.getARGB(Color,null);
	var r = (R2 - src.red) * CurrentStep / Steps + src.red | 0;
	var g = (G2 - src.green) * CurrentStep / Steps + src.green | 0;
	var b = (B2 - src.blue) * CurrentStep / Steps + src.blue | 0;
	return r << 16 | g << 8 | b;
};
flixel_util_FlxColorUtil.interpolateRGB = function(R1,G1,B1,R2,G2,B2,Steps,CurrentStep) {
	var r = (R2 - R1) * CurrentStep / Steps + R1 | 0;
	var g = (G2 - G1) * CurrentStep / Steps + G1 | 0;
	var b = (B2 - B1) * CurrentStep / Steps + B1 | 0;
	return r << 16 | g << 8 | b;
};
flixel_util_FlxColorUtil.darken = function(Color,Factor) {
	if(Factor == null) Factor = 0.2;
	flixel_util_FlxMath.bound(Factor,0,1);
	var r = Color >> 16 & 255;
	var g = Color >> 8 & 255;
	var b = Color & 255;
	var a = flixel_util_FlxColorUtil.getAlphaFloat(Color);
	Factor = 1 - Factor;
	r = r * Factor | 0;
	g = g * Factor | 0;
	b = b * Factor | 0;
	return (((a > 1?a:a * 255) | 0) & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
flixel_util_FlxColorUtil.brighten = function(Color,Factor) {
	if(Factor == null) Factor = 0.2;
	flixel_util_FlxMath.bound(Factor,0,1);
	var r = Color >> 16 & 255;
	var g = Color >> 8 & 255;
	var b = Color & 255;
	var a = flixel_util_FlxColorUtil.getAlphaFloat(Color);
	r += (255 - r) * Factor | 0;
	g += (255 - g) * Factor | 0;
	b += (255 - b) * Factor | 0;
	return (((a > 1?a:a * 255) | 0) & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
var flixel_util_FlxDestroyUtil = function() { };
$hxClasses["flixel.util.FlxDestroyUtil"] = flixel_util_FlxDestroyUtil;
flixel_util_FlxDestroyUtil.__name__ = ["flixel","util","FlxDestroyUtil"];
flixel_util_FlxDestroyUtil.destroy = function(object) {
	if(object != null) object.destroy();
	return null;
};
flixel_util_FlxDestroyUtil.destroyArray = function(array) {
	if(array != null) while(array.length > 0) flixel_util_FlxDestroyUtil.destroy(array.pop());
	return null;
};
flixel_util_FlxDestroyUtil.put = function(object) {
	if(object != null) object.put();
	return null;
};
flixel_util_FlxDestroyUtil.putArray = function(array) {
	if(array != null) while(array.length > 0) flixel_util_FlxDestroyUtil.put(array.pop());
	return null;
};
flixel_util_FlxDestroyUtil.dispose = function(Bitmap) {
	if(Bitmap != null) Bitmap.dispose();
	return null;
};
var flixel_util_FlxGradient = function() { };
$hxClasses["flixel.util.FlxGradient"] = flixel_util_FlxGradient;
flixel_util_FlxGradient.__name__ = ["flixel","util","FlxGradient"];
flixel_util_FlxGradient.createGradientMatrix = function(width,height,colors,chunkSize,rotation) {
	if(rotation == null) rotation = 90;
	if(chunkSize == null) chunkSize = 1;
	var gradientMatrix = new openfl_geom_Matrix();
	var rot = rotation * (Math.PI / 180);
	if(chunkSize == 1) gradientMatrix.createGradientBox(width,height,rot,0,0); else gradientMatrix.createGradientBox(width,height / chunkSize,rot,0,0);
	var alpha = [];
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var ai = _g1++;
		alpha.push(flixel_util_FlxColorUtil.getAlphaFloat(colors[ai]));
	}
	var ratio = [];
	if(colors.length == 2) {
		ratio[0] = 0;
		ratio[1] = 255;
	} else {
		var spread = 255 / (colors.length - 1) | 0;
		ratio.push(0);
		var _g11 = 1;
		var _g2 = colors.length - 1;
		while(_g11 < _g2) {
			var ri = _g11++;
			ratio.push(ri * spread);
		}
		ratio.push(255);
	}
	return { matrix : gradientMatrix, alpha : alpha, ratio : ratio};
};
flixel_util_FlxGradient.createGradientArray = function(width,height,colors,chunkSize,rotation,interpolate) {
	if(interpolate == null) interpolate = true;
	if(rotation == null) rotation = 90;
	if(chunkSize == null) chunkSize = 1;
	var data = flixel_util_FlxGradient.createGradientBitmapData(width,height,colors,chunkSize,rotation,interpolate);
	var result = [];
	var _g1 = 0;
	var _g = data.height;
	while(_g1 < _g) {
		var y = _g1++;
		result.push(data.getPixel32(0,y));
	}
	return result;
};
flixel_util_FlxGradient.createGradientFlxSprite = function(width,height,colors,chunkSize,rotation,interpolate) {
	if(interpolate == null) interpolate = true;
	if(rotation == null) rotation = 90;
	if(chunkSize == null) chunkSize = 1;
	var data = flixel_util_FlxGradient.createGradientBitmapData(width,height,colors,chunkSize,rotation,interpolate);
	var dest = new flixel_FlxSprite();
	dest.set_pixels(data);
	return dest;
};
flixel_util_FlxGradient.createGradientBitmapData = function(width,height,colors,chunkSize,rotation,interpolate) {
	if(interpolate == null) interpolate = true;
	if(rotation == null) rotation = 90;
	if(chunkSize == null) chunkSize = 1;
	if(width < 1) width = 1;
	if(height < 1) height = 1;
	var gradient = flixel_util_FlxGradient.createGradientMatrix(width,height,colors,chunkSize,rotation);
	var s = new openfl_display_Shape();
	if(interpolate) s.get_graphics().beginGradientFill(openfl_display_GradientType.LINEAR,colors,gradient.alpha,gradient.ratio,gradient.matrix,openfl_display_SpreadMethod.PAD,openfl_display_InterpolationMethod.RGB,0); else s.get_graphics().beginGradientFill(openfl_display_GradientType.LINEAR,colors,gradient.alpha,gradient.ratio,gradient.matrix,openfl_display_SpreadMethod.PAD,openfl_display_InterpolationMethod.LINEAR_RGB,0);
	if(chunkSize == 1) s.get_graphics().drawRect(0,0,width,height); else s.get_graphics().drawRect(0,0,width,height / chunkSize);
	var data = new openfl_display_BitmapData(width,height,true,0);
	if(chunkSize == 1) data.draw(s); else {
		var tempBitmap = new openfl_display_Bitmap(new openfl_display_BitmapData(width,height / chunkSize | 0,true,0));
		tempBitmap.bitmapData.draw(s);
		tempBitmap.set_scaleY(chunkSize);
		var sM = new openfl_geom_Matrix();
		sM.scale(tempBitmap.get_scaleX(),tempBitmap.get_scaleY());
		data.draw(tempBitmap,sM);
	}
	return data;
};
flixel_util_FlxGradient.overlayGradientOnFlxSprite = function(dest,width,height,colors,destX,destY,chunkSize,rotation,interpolate) {
	if(interpolate == null) interpolate = true;
	if(rotation == null) rotation = 90;
	if(chunkSize == null) chunkSize = 1;
	if(destY == null) destY = 0;
	if(destX == null) destX = 0;
	if(width > dest.get_width()) width = Std["int"](dest.get_width());
	if(height > dest.get_height()) height = Std["int"](dest.get_height());
	var source = flixel_util_FlxGradient.createGradientFlxSprite(width,height,colors,chunkSize,rotation,interpolate);
	dest.stamp(source,destX,destY);
	source.destroy();
	return dest;
};
flixel_util_FlxGradient.overlayGradientOnBitmapData = function(dest,width,height,colors,destX,destY,chunkSize,rotation,interpolate) {
	if(interpolate == null) interpolate = true;
	if(rotation == null) rotation = 90;
	if(chunkSize == null) chunkSize = 1;
	if(destY == null) destY = 0;
	if(destX == null) destX = 0;
	if(width > dest.width) width = dest.width;
	if(height > dest.height) height = dest.height;
	var source = flixel_util_FlxGradient.createGradientBitmapData(width,height,colors,chunkSize,rotation,interpolate);
	dest.copyPixels(source,new openfl_geom_Rectangle(0,0,source.width,source.height),new openfl_geom_Point(destX,destY),null,null,true);
	source.dispose();
	return dest;
};
var flixel_util_FlxMath = function() { };
$hxClasses["flixel.util.FlxMath"] = flixel_util_FlxMath;
flixel_util_FlxMath.__name__ = ["flixel","util","FlxMath"];
flixel_util_FlxMath.roundDecimal = function(Value,Precision) {
	var mult = 1;
	var _g = 0;
	while(_g < Precision) {
		var i = _g++;
		mult *= 10;
	}
	return Math.round(Value * mult) / mult;
};
flixel_util_FlxMath.bound = function(Value,Min,Max) {
	var lowerBound;
	if(Value < Min) lowerBound = Min; else lowerBound = Value;
	if(lowerBound > Max) return Max; else return lowerBound;
};
flixel_util_FlxMath.lerp = function(Min,Max,Ratio) {
	return Min + Ratio * (Max - Min);
};
flixel_util_FlxMath.inBounds = function(Value,Min,Max) {
	return Value > Min && Value < Max;
};
flixel_util_FlxMath.isOdd = function(n) {
	if(((n | 0) & 1) != 0) return true; else return false;
};
flixel_util_FlxMath.isEven = function(n) {
	if(((n | 0) & 1) != 0) return false; else return true;
};
flixel_util_FlxMath.numericComparison = function(num1,num2) {
	if(num2 > num1) return -1; else if(num1 > num2) return 1;
	return 0;
};
flixel_util_FlxMath.pointInCoordinates = function(pointX,pointY,rectX,rectY,rectWidth,rectHeight) {
	if(pointX >= rectX && pointX <= rectX + rectWidth) {
		if(pointY >= rectY && pointY <= rectY + rectHeight) return true;
	}
	return false;
};
flixel_util_FlxMath.pointInFlxRect = function(pointX,pointY,rect) {
	if(pointX >= rect.x && pointX <= rect.x + rect.width && pointY >= rect.y && pointY <= rect.y + rect.height) return true;
	return false;
};
flixel_util_FlxMath.mouseInFlxRect = function(useWorldCoords,rect) {
	if(rect == null) return true;
	if(useWorldCoords) return flixel_util_FlxMath.pointInFlxRect(Math.floor(flixel_FlxG.mouse.x),Math.floor(flixel_FlxG.mouse.y),rect); else return flixel_util_FlxMath.pointInFlxRect(flixel_FlxG.mouse.screenX,flixel_FlxG.mouse.screenY,rect);
};
flixel_util_FlxMath.pointInRectangle = function(pointX,pointY,rect) {
	if(pointX >= rect.x && pointX <= rect.get_right() && pointY >= rect.y && pointY <= rect.get_bottom()) return true;
	return false;
};
flixel_util_FlxMath.maxAdd = function(value,amount,max,min) {
	if(min == null) min = 0;
	value += amount;
	if(value > max) value = max; else if(value <= min) value = min;
	return value;
};
flixel_util_FlxMath.wrapValue = function(value,amount,max) {
	var diff;
	value = Std["int"](Math.abs(value));
	amount = Std["int"](Math.abs(amount));
	max = Std["int"](Math.abs(max));
	diff = (value + amount) % max;
	return diff;
};
flixel_util_FlxMath.dotProduct = function(ax,ay,bx,by) {
	return ax * bx + ay * by;
};
flixel_util_FlxMath.vectorLength = function(dx,dy) {
	return Math.sqrt(dx * dx + dy * dy);
};
flixel_util_FlxMath.getDistance = function(Point1,Point2) {
	var dx = Point1.x - Point2.x;
	var dy = Point1.y - Point2.y;
	if(Point1._weak) Point1.put();
	if(Point2._weak) Point2.put();
	return Math.sqrt(dx * dx + dy * dy);
};
flixel_util_FlxMath.distanceBetween = function(SpriteA,SpriteB) {
	var dx = SpriteA.x + SpriteA.origin.x - (SpriteB.x + SpriteB.origin.x);
	var dy = SpriteA.y + SpriteA.origin.y - (SpriteB.y + SpriteB.origin.y);
	return Std["int"](Math.sqrt(dx * dx + dy * dy));
};
flixel_util_FlxMath.isDistanceWithin = function(SpriteA,SpriteB,Distance,IncludeEqual) {
	if(IncludeEqual == null) IncludeEqual = false;
	var dx = SpriteA.x + SpriteA.origin.x - (SpriteB.x + SpriteB.origin.x);
	var dy = SpriteA.y + SpriteA.origin.y - (SpriteB.y + SpriteB.origin.y);
	if(IncludeEqual) return dx * dx + dy * dy <= Distance * Distance; else return dx * dx + dy * dy < Distance * Distance;
};
flixel_util_FlxMath.distanceToPoint = function(Sprite,Target) {
	var dx = Sprite.x + Sprite.origin.x - Target.x;
	var dy = Sprite.y + Sprite.origin.y - Target.y;
	if(Target._weak) Target.put();
	return Std["int"](Math.sqrt(dx * dx + dy * dy));
};
flixel_util_FlxMath.isDistanceToPointWithin = function(Sprite,Target,Distance,IncludeEqual) {
	if(IncludeEqual == null) IncludeEqual = false;
	var dx = Sprite.x + Sprite.origin.x - Target.x;
	var dy = Sprite.y + Sprite.origin.y - Target.y;
	if(Target._weak) Target.put();
	if(IncludeEqual) return dx * dx + dy * dy <= Distance * Distance; else return dx * dx + dy * dy < Distance * Distance;
};
flixel_util_FlxMath.distanceToMouse = function(Sprite) {
	var dx = Sprite.x + Sprite.origin.x - flixel_FlxG.mouse.screenX;
	var dy = Sprite.y + Sprite.origin.y - flixel_FlxG.mouse.screenY;
	return Std["int"](Math.sqrt(dx * dx + dy * dy));
};
flixel_util_FlxMath.isDistanceToMouseWithin = function(Sprite,Distance,IncludeEqual) {
	if(IncludeEqual == null) IncludeEqual = false;
	var dx = Sprite.x + Sprite.origin.x - flixel_FlxG.mouse.screenX;
	var dy = Sprite.y + Sprite.origin.y - flixel_FlxG.mouse.screenY;
	if(IncludeEqual) return dx * dx + dy * dy <= Distance * Distance; else return dx * dx + dy * dy < Distance * Distance;
};
flixel_util_FlxMath.distanceToTouch = function(Sprite,Touch) {
	var dx = Sprite.x + Sprite.origin.x - Touch.screenX;
	var dy = Sprite.y + Sprite.origin.y - Touch.screenY;
	return Std["int"](Math.sqrt(dx * dx + dy * dy));
};
flixel_util_FlxMath.isDistanceToTouchWithin = function(Sprite,Touch,Distance,IncludeEqual) {
	if(IncludeEqual == null) IncludeEqual = false;
	var dx = Sprite.x + Sprite.origin.x - Touch.screenX;
	var dy = Sprite.y + Sprite.origin.y - Touch.screenY;
	if(IncludeEqual) return dx * dx + dy * dy <= Distance * Distance; else return dx * dx + dy * dy < Distance * Distance;
};
flixel_util_FlxMath.getDecimals = function(Number) {
	var helperArray = (Number == null?"null":"" + Number).split(".");
	var decimals = 0;
	if(helperArray.length > 1) decimals = helperArray[1].length;
	return decimals;
};
flixel_util_FlxMath.equal = function(aValueA,aValueB,aDiff) {
	if(aDiff == null) aDiff = 0.00001;
	return Math.abs(aValueA - aValueB) <= aDiff;
};
flixel_util_FlxMath.signOf = function(f) {
	if(f < 0) return -1; else return 1;
};
flixel_util_FlxMath.sameSign = function(f1,f2) {
	return (f1 < 0?-1:1) == (f2 < 0?-1:1);
};
var flixel_util_FlxCallbackPoint = function(setXCallback,setYCallback,setXYCallback) {
	flixel_util_FlxPoint.call(this);
	this._setXCallback = setXCallback;
	this._setYCallback = setXYCallback;
	this._setXYCallback = setXYCallback;
	if(this._setXCallback != null) {
		if(this._setYCallback == null) this._setYCallback = setXCallback;
		if(this._setXYCallback == null) this._setXYCallback = setXCallback;
	}
};
$hxClasses["flixel.util.FlxCallbackPoint"] = flixel_util_FlxCallbackPoint;
flixel_util_FlxCallbackPoint.__name__ = ["flixel","util","FlxCallbackPoint"];
flixel_util_FlxCallbackPoint.__super__ = flixel_util_FlxPoint;
flixel_util_FlxCallbackPoint.prototype = $extend(flixel_util_FlxPoint.prototype,{
	_setXCallback: null
	,_setYCallback: null
	,_setXYCallback: null
	,set: function(X,Y) {
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		flixel_util_FlxPoint.prototype.set.call(this,X,Y);
		if(this._setXYCallback != null) this._setXYCallback(this);
		return this;
	}
	,set_x: function(Value) {
		flixel_util_FlxPoint.prototype.set_x.call(this,Value);
		if(this._setXCallback != null) this._setXCallback(this);
		return Value;
	}
	,set_y: function(Value) {
		flixel_util_FlxPoint.prototype.set_y.call(this,Value);
		if(this._setYCallback != null) this._setYCallback(this);
		return Value;
	}
	,destroy: function() {
		flixel_util_FlxPoint.prototype.destroy.call(this);
		this._setXCallback = null;
		this._setYCallback = null;
		this._setXYCallback = null;
	}
	,put: function() {
	}
	,__class__: flixel_util_FlxCallbackPoint
});
var flixel_util_FlxRandom = function() { };
$hxClasses["flixel.util.FlxRandom"] = flixel_util_FlxRandom;
flixel_util_FlxRandom.__name__ = ["flixel","util","FlxRandom"];
flixel_util_FlxRandom.__properties__ = {set_globalSeed:"set_globalSeed"}
flixel_util_FlxRandom.getObject_getRandom_T = function(Objects,StartIndex,EndIndex) {
	if(EndIndex == null) EndIndex = 0;
	if(StartIndex == null) StartIndex = 0;
	var selected = null;
	if(Objects.length != 0) {
		if(StartIndex < 0) StartIndex = 0;
		if(EndIndex < StartIndex) {
			StartIndex = StartIndex + EndIndex;
			EndIndex = StartIndex - EndIndex;
			StartIndex = StartIndex - EndIndex;
		}
		if(EndIndex <= 0 || EndIndex > Objects.length - 1) EndIndex = Objects.length - 1;
		selected = Objects[flixel_util_FlxRandom.intRanged(StartIndex,EndIndex)];
	}
	return selected;
};
flixel_util_FlxRandom.shuffleArray_shuffle_T = function(Objects,HowManyTimes) {
	HowManyTimes = Std["int"](Math.max(HowManyTimes,0));
	var tempObject = null;
	var _g = 0;
	while(_g < HowManyTimes) {
		var i = _g++;
		flixel_util_FlxRandom._intHelper2 = flixel_util_FlxRandom.intRanged(0,Objects.length - 1);
		flixel_util_FlxRandom._intHelper3 = flixel_util_FlxRandom.intRanged(0,Objects.length - 1);
		tempObject = Objects[flixel_util_FlxRandom._intHelper2];
		Objects[flixel_util_FlxRandom._intHelper2] = Objects[flixel_util_FlxRandom._intHelper3];
		Objects[flixel_util_FlxRandom._intHelper3] = tempObject;
	}
	return Objects;
};
flixel_util_FlxRandom.set_globalSeed = function(NewSeed) {
	if(NewSeed < 1) NewSeed = 1;
	if(NewSeed > 2147483647) NewSeed = 2147483647;
	flixel_util_FlxRandom._internalSeed = NewSeed;
	flixel_util_FlxRandom.globalSeed = NewSeed;
	return flixel_util_FlxRandom.globalSeed;
};
flixel_util_FlxRandom.resetGlobalSeed = function() {
	return flixel_util_FlxRandom.set_globalSeed(Std["int"](Math.random() * 2147483647));
};
flixel_util_FlxRandom["int"] = function() {
	return flixel_util_FlxRandom._internalSeed = flixel_util_FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647;
};
flixel_util_FlxRandom["float"] = function() {
	return (flixel_util_FlxRandom._internalSeed = flixel_util_FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647) / 2147483647;
};
flixel_util_FlxRandom.intRanged = function(Min,Max,Excludes) {
	if(Max == null) Max = 2147483647;
	if(Min == null) Min = 0;
	if(Min == Max) flixel_util_FlxRandom._intHelper = Min; else {
		if(Min > Max) {
			Min = Min + Max;
			Max = Min - Max;
			Min = Min - Max;
		}
		if(Excludes == null) flixel_util_FlxRandom._intHelper = Math.floor(Min + (flixel_util_FlxRandom._internalSeed = flixel_util_FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647) / 2147483647 * (Max - Min + 1)); else do flixel_util_FlxRandom._intHelper = Math.floor(Min + (flixel_util_FlxRandom._internalSeed = flixel_util_FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647) / 2147483647 * (Max - Min + 1)); while(HxOverrides.indexOf(Excludes,flixel_util_FlxRandom._intHelper,0) >= 0);
	}
	return flixel_util_FlxRandom._intHelper;
};
flixel_util_FlxRandom.floatRanged = function(Min,Max,Excludes) {
	if(Max == null) Max = 1;
	if(Min == null) Min = 0;
	if(Min == Max) flixel_util_FlxRandom._floatHelper = Min; else {
		if(Min > Max) {
			Min = Min + Max;
			Max = Min - Max;
			Min = Min - Max;
		}
		if(Excludes == null) flixel_util_FlxRandom._floatHelper = Min + (flixel_util_FlxRandom._internalSeed = flixel_util_FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647) / 2147483647 * (Max - Min); else do flixel_util_FlxRandom._floatHelper = Min + (flixel_util_FlxRandom._internalSeed = flixel_util_FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647) / 2147483647 * (Max - Min); while(HxOverrides.indexOf(Excludes,flixel_util_FlxRandom._floatHelper,0) >= 0);
	}
	return flixel_util_FlxRandom._floatHelper;
};
flixel_util_FlxRandom.chanceRoll = function(Chance) {
	if(Chance == null) Chance = 50;
	return flixel_util_FlxRandom.floatRanged(0,100) < Chance;
};
flixel_util_FlxRandom.sign = function(Chance) {
	if(Chance == null) Chance = 50;
	if(flixel_util_FlxRandom.floatRanged(0,100) < Chance) return 1; else return -1;
};
flixel_util_FlxRandom.weightedPick = function(WeightsArray) {
	flixel_util_FlxRandom._floatHelper = 0;
	var _g = 0;
	while(_g < WeightsArray.length) {
		var i = WeightsArray[_g];
		++_g;
		flixel_util_FlxRandom._floatHelper += i;
	}
	flixel_util_FlxRandom._floatHelper = flixel_util_FlxRandom.floatRanged(0,flixel_util_FlxRandom._floatHelper);
	var _g1 = 0;
	var _g2 = WeightsArray.length;
	while(_g1 < _g2) {
		var i1 = _g1++;
		if(flixel_util_FlxRandom._floatHelper < WeightsArray[i1]) {
			flixel_util_FlxRandom._intHelper = i1;
			break;
		}
		flixel_util_FlxRandom._floatHelper -= WeightsArray[i1];
	}
	return flixel_util_FlxRandom._intHelper;
};
flixel_util_FlxRandom.color = function(Min,Max,Alpha,GreyScale) {
	if(GreyScale == null) GreyScale = false;
	if(Alpha == null) Alpha = 255;
	if(Max == null) Max = 255;
	if(Min == null) Min = 0;
	if(Min < 0) Min = 0;
	if(Min > 255) Min = 255;
	if(Max < 0) Max = 0;
	if(Max > 255) Max = 255;
	if(Alpha < 0) Alpha = 0;
	if(Alpha > 255) Alpha = 255;
	if(Max < Min) {
		Min = Min + Max;
		Max = Min - Max;
		Min = Min - Max;
	}
	flixel_util_FlxRandom._red = flixel_util_FlxRandom.intRanged(Min,Max);
	if(GreyScale) flixel_util_FlxRandom._green = flixel_util_FlxRandom._red; else flixel_util_FlxRandom._green = flixel_util_FlxRandom.intRanged(Min,Max);
	if(GreyScale) flixel_util_FlxRandom._blue = flixel_util_FlxRandom._red; else flixel_util_FlxRandom._blue = flixel_util_FlxRandom.intRanged(Min,Max);
	return (((Alpha > 1?Alpha:Alpha * 255) | 0) & 255) << 24 | (flixel_util_FlxRandom._red & 255) << 16 | (flixel_util_FlxRandom._green & 255) << 8 | flixel_util_FlxRandom._blue & 255;
};
flixel_util_FlxRandom.colorExt = function(RedMinimum,RedMaximum,GreenMinimum,GreenMaximum,BlueMinimum,BlueMaximum,AlphaMinimum,AlphaMaximum) {
	if(AlphaMaximum == null) AlphaMaximum = -1;
	if(AlphaMinimum == null) AlphaMinimum = -1;
	if(BlueMaximum == null) BlueMaximum = 255;
	if(BlueMinimum == null) BlueMinimum = 0;
	if(GreenMaximum == null) GreenMaximum = 255;
	if(GreenMinimum == null) GreenMinimum = 0;
	if(RedMaximum == null) RedMaximum = 255;
	if(RedMinimum == null) RedMinimum = 0;
	if(RedMinimum < 0) RedMinimum = 0;
	if(RedMinimum > 255) RedMinimum = 255;
	if(RedMaximum < 0) RedMaximum = 0;
	if(RedMaximum > 255) RedMaximum = 255;
	if(GreenMinimum < 0) GreenMinimum = 0;
	if(GreenMinimum > 255) GreenMinimum = 255;
	if(GreenMaximum < 0) GreenMaximum = 0;
	if(GreenMaximum > 255) GreenMaximum = 255;
	if(BlueMinimum < 0) BlueMinimum = 0;
	if(BlueMinimum > 255) BlueMinimum = 255;
	if(BlueMaximum < 0) BlueMaximum = 0;
	if(BlueMaximum > 255) BlueMaximum = 255;
	if(AlphaMinimum == -1) AlphaMinimum = 255;
	if(AlphaMaximum == -1) AlphaMaximum = 255;
	if(AlphaMinimum < 0) AlphaMinimum = 0;
	if(AlphaMinimum > 255) AlphaMinimum = 255;
	if(AlphaMaximum < 0) AlphaMaximum = 0;
	if(AlphaMaximum > 255) AlphaMaximum = 255;
	flixel_util_FlxRandom._red = flixel_util_FlxRandom.intRanged(RedMinimum,RedMaximum);
	flixel_util_FlxRandom._green = flixel_util_FlxRandom.intRanged(GreenMinimum,GreenMaximum);
	flixel_util_FlxRandom._blue = flixel_util_FlxRandom.intRanged(BlueMinimum,BlueMaximum);
	flixel_util_FlxRandom._alpha = flixel_util_FlxRandom.intRanged(AlphaMinimum,AlphaMaximum);
	return flixel_util_FlxColorUtil.makeFromARGB(flixel_util_FlxRandom._alpha,flixel_util_FlxRandom._red,flixel_util_FlxRandom._green,flixel_util_FlxRandom._blue);
};
flixel_util_FlxRandom.generate = function() {
	return flixel_util_FlxRandom._internalSeed = flixel_util_FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647;
};
var flixel_util__$FlxSignal_FlxSignalHandler = function(listener,dispatchOnce) {
	this.dispatchOnce = false;
	this.listener = listener;
	this.dispatchOnce = dispatchOnce;
};
$hxClasses["flixel.util._FlxSignal.FlxSignalHandler"] = flixel_util__$FlxSignal_FlxSignalHandler;
flixel_util__$FlxSignal_FlxSignalHandler.__name__ = ["flixel","util","_FlxSignal","FlxSignalHandler"];
flixel_util__$FlxSignal_FlxSignalHandler.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_util__$FlxSignal_FlxSignalHandler.prototype = {
	listener: null
	,dispatchOnce: null
	,destroy: function() {
		this.listener = null;
	}
	,__class__: flixel_util__$FlxSignal_FlxSignalHandler
};
var flixel_util__$FlxSignal_FlxSignalBase = function() {
	this._handlers = [];
};
$hxClasses["flixel.util._FlxSignal.FlxSignalBase"] = flixel_util__$FlxSignal_FlxSignalBase;
flixel_util__$FlxSignal_FlxSignalBase.__name__ = ["flixel","util","_FlxSignal","FlxSignalBase"];
flixel_util__$FlxSignal_FlxSignalBase.__interfaces__ = [flixel_interfaces_IFlxSignal];
flixel_util__$FlxSignal_FlxSignalBase.prototype = {
	dispatch: null
	,_handlers: null
	,add: function(listener) {
		if(listener != null) this.registerListener(listener,false);
	}
	,addOnce: function(listener) {
		if(listener != null) this.registerListener(listener,true);
	}
	,remove: function(listener) {
		if(listener != null) {
			var handler = this.getHandler(listener);
			if(handler != null) {
				HxOverrides.remove(this._handlers,handler);
				handler.destroy();
				handler = null;
			}
		}
	}
	,has: function(listener) {
		if(listener == null) return false;
		return this.getHandler(listener) != null;
	}
	,removeAll: function() {
		while(this._handlers.length > 0) {
			var handler = this._handlers.pop();
			handler.destroy();
			handler = null;
		}
	}
	,destroy: function() {
		this.removeAll();
		this._handlers = null;
	}
	,registerListener: function(listener,dispatchOnce) {
		var handler = this.getHandler(listener);
		if(handler == null) {
			handler = new flixel_util__$FlxSignal_FlxSignalHandler(listener,dispatchOnce);
			this._handlers.push(handler);
			return handler;
		} else if(handler.dispatchOnce != dispatchOnce) throw new js__$Boot_HaxeError("You cannot addOnce() then add() the same listener without removing the relationship first."); else return handler;
	}
	,getHandler: function(listener) {
		var _g = 0;
		var _g1 = this._handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			if(handler.listener == listener) return handler;
		}
		return null;
	}
	,__class__: flixel_util__$FlxSignal_FlxSignalBase
};
var flixel_util__$FlxSignal_FlxSignal0 = function() {
	flixel_util__$FlxSignal_FlxSignalBase.call(this);
	this.dispatch = $bind(this,this.dispatch0);
};
$hxClasses["flixel.util._FlxSignal.FlxSignal0"] = flixel_util__$FlxSignal_FlxSignal0;
flixel_util__$FlxSignal_FlxSignal0.__name__ = ["flixel","util","_FlxSignal","FlxSignal0"];
flixel_util__$FlxSignal_FlxSignal0.__super__ = flixel_util__$FlxSignal_FlxSignalBase;
flixel_util__$FlxSignal_FlxSignal0.prototype = $extend(flixel_util__$FlxSignal_FlxSignalBase.prototype,{
	dispatch0: function() {
		var _g = 0;
		var _g1 = this._handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			handler.listener();
			if(handler.dispatchOnce) this.remove(handler.listener);
		}
	}
	,__class__: flixel_util__$FlxSignal_FlxSignal0
});
var flixel_util__$FlxSignal_FlxSignal1 = function() {
	flixel_util__$FlxSignal_FlxSignalBase.call(this);
	this.dispatch = $bind(this,this.dispatch1);
};
$hxClasses["flixel.util._FlxSignal.FlxSignal1"] = flixel_util__$FlxSignal_FlxSignal1;
flixel_util__$FlxSignal_FlxSignal1.__name__ = ["flixel","util","_FlxSignal","FlxSignal1"];
flixel_util__$FlxSignal_FlxSignal1.__super__ = flixel_util__$FlxSignal_FlxSignalBase;
flixel_util__$FlxSignal_FlxSignal1.prototype = $extend(flixel_util__$FlxSignal_FlxSignalBase.prototype,{
	dispatch1: function(value1) {
		var _g = 0;
		var _g1 = this._handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			handler.listener(value1);
			if(handler.dispatchOnce) this.remove(handler.listener);
		}
	}
	,__class__: flixel_util__$FlxSignal_FlxSignal1
});
var flixel_util__$FlxSignal_FlxSignal2 = function() {
	flixel_util__$FlxSignal_FlxSignalBase.call(this);
	this.dispatch = $bind(this,this.dispatch2);
};
$hxClasses["flixel.util._FlxSignal.FlxSignal2"] = flixel_util__$FlxSignal_FlxSignal2;
flixel_util__$FlxSignal_FlxSignal2.__name__ = ["flixel","util","_FlxSignal","FlxSignal2"];
flixel_util__$FlxSignal_FlxSignal2.__super__ = flixel_util__$FlxSignal_FlxSignalBase;
flixel_util__$FlxSignal_FlxSignal2.prototype = $extend(flixel_util__$FlxSignal_FlxSignalBase.prototype,{
	dispatch2: function(value1,value2) {
		var _g = 0;
		var _g1 = this._handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			handler.listener(value1,value2);
			if(handler.dispatchOnce) this.remove(handler.listener);
		}
	}
	,__class__: flixel_util__$FlxSignal_FlxSignal2
});
var flixel_util__$FlxSignal_FlxSignal3 = function() {
	flixel_util__$FlxSignal_FlxSignalBase.call(this);
	this.dispatch = $bind(this,this.dispatch3);
};
$hxClasses["flixel.util._FlxSignal.FlxSignal3"] = flixel_util__$FlxSignal_FlxSignal3;
flixel_util__$FlxSignal_FlxSignal3.__name__ = ["flixel","util","_FlxSignal","FlxSignal3"];
flixel_util__$FlxSignal_FlxSignal3.__super__ = flixel_util__$FlxSignal_FlxSignalBase;
flixel_util__$FlxSignal_FlxSignal3.prototype = $extend(flixel_util__$FlxSignal_FlxSignalBase.prototype,{
	dispatch3: function(value1,value2,value3) {
		var _g = 0;
		var _g1 = this._handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			handler.listener(value1,value2,value3);
			if(handler.dispatchOnce) this.remove(handler.listener);
		}
	}
	,__class__: flixel_util__$FlxSignal_FlxSignal3
});
var flixel_util__$FlxSignal_FlxSignal4 = function() {
	flixel_util__$FlxSignal_FlxSignalBase.call(this);
	this.dispatch = $bind(this,this.dispatch4);
};
$hxClasses["flixel.util._FlxSignal.FlxSignal4"] = flixel_util__$FlxSignal_FlxSignal4;
flixel_util__$FlxSignal_FlxSignal4.__name__ = ["flixel","util","_FlxSignal","FlxSignal4"];
flixel_util__$FlxSignal_FlxSignal4.__super__ = flixel_util__$FlxSignal_FlxSignalBase;
flixel_util__$FlxSignal_FlxSignal4.prototype = $extend(flixel_util__$FlxSignal_FlxSignalBase.prototype,{
	dispatch4: function(value1,value2,value3,value4) {
		var _g = 0;
		var _g1 = this._handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			handler.listener(value1,value2,value3,value4);
			if(handler.dispatchOnce) this.remove(handler.listener);
		}
	}
	,__class__: flixel_util__$FlxSignal_FlxSignal4
});
var flixel_util_FlxSort = function() { };
$hxClasses["flixel.util.FlxSort"] = flixel_util_FlxSort;
flixel_util_FlxSort.__name__ = ["flixel","util","FlxSort"];
flixel_util_FlxSort.byY = function(Order,Obj1,Obj2) {
	return flixel_util_FlxSort.byValues(Order,Obj1.y,Obj2.y);
};
flixel_util_FlxSort.byValues = function(Order,Value1,Value2) {
	var result = 0;
	if(Value1 < Value2) result = Order; else if(Value1 > Value2) result = -Order;
	return result;
};
var openfl_display_LoaderInfo = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) loaderInfo.loader = loader; else loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	applicationDomain: null
	,bytes: null
	,bytesLoaded: null
	,bytesTotal: null
	,childAllowsParent: null
	,content: null
	,contentType: null
	,frameRate: null
	,height: null
	,loader: null
	,loaderURL: null
	,parameters: null
	,parentAllowsChild: null
	,sameDomain: null
	,sharedEvents: null
	,uncaughtErrorEvents: null
	,url: null
	,width: null
	,__class__: openfl_display_LoaderInfo
});
var openfl_system_ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) this.parentDomain = parentDomain; else this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl_system_ApplicationDomain.prototype = {
	parentDomain: null
	,getDefinition: function(name) {
		return Type.resolveClass(name);
	}
	,hasDefinition: function(name) {
		return Type.resolveClass(name) != null;
	}
	,__class__: openfl_system_ApplicationDomain
};
var openfl_events_UncaughtErrorEvents = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = ["openfl","events","UncaughtErrorEvents"];
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_events_UncaughtErrorEvents
});
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) alphaOffset = 0;
	if(blueOffset == null) blueOffset = 0;
	if(greenOffset == null) greenOffset = 0;
	if(redOffset == null) redOffset = 0;
	if(alphaMultiplier == null) alphaMultiplier = 1;
	if(blueMultiplier == null) blueMultiplier = 1;
	if(greenMultiplier == null) greenMultiplier = 1;
	if(redMultiplier == null) redMultiplier = 1;
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl_geom_ColorTransform.prototype = {
	alphaMultiplier: null
	,alphaOffset: null
	,blueMultiplier: null
	,blueOffset: null
	,greenMultiplier: null
	,greenOffset: null
	,redMultiplier: null
	,redOffset: null
	,concat: function(second) {
		this.redMultiplier *= second.redMultiplier;
		this.greenMultiplier *= second.greenMultiplier;
		this.blueMultiplier *= second.blueMultiplier;
		this.alphaMultiplier *= second.alphaMultiplier;
		this.redOffset = second.redMultiplier * this.redOffset + second.redOffset;
		this.greenOffset = second.greenMultiplier * this.greenOffset + second.greenOffset;
		this.blueOffset = second.blueMultiplier * this.blueOffset + second.blueOffset;
		this.alphaOffset = second.alphaMultiplier * this.alphaOffset + second.alphaOffset;
	}
	,toString: function() {
		return "(redMultiplier=" + this.redMultiplier + ", greenMultiplier=" + this.greenMultiplier + ", blueMultiplier=" + this.blueMultiplier + ", alphaMultiplier=" + this.alphaMultiplier + ", redOffset=" + this.redOffset + ", greenOffset=" + this.greenOffset + ", blueOffset=" + this.blueOffset + ", alphaOffset=" + this.alphaOffset + ")";
	}
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__equals: function(ct,skipAlphaMultiplier) {
		if(skipAlphaMultiplier == null) skipAlphaMultiplier = false;
		return ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset && this.alphaOffset == ct.alphaOffset;
	}
	,__isDefault: function() {
		return this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0 && this.alphaOffset == 0;
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		return (function($this) {
			var $r;
			var array = [$this.redMultiplier,0,0,0,$this.redOffset / 255,0,$this.greenMultiplier,0,0,$this.greenOffset / 255,0,0,$this.blueMultiplier,0,$this.blueOffset / 255,0,0,0,$this.alphaMultiplier,$this.alphaOffset / 255];
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this));
	}
	,__class__: openfl_geom_ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
var flixel_util_FlxSpriteUtil = function() { };
$hxClasses["flixel.util.FlxSpriteUtil"] = flixel_util_FlxSpriteUtil;
flixel_util_FlxSpriteUtil.__name__ = ["flixel","util","FlxSpriteUtil"];
flixel_util_FlxSpriteUtil.alphaMask = function(output,source,mask) {
	var data = null;
	if(typeof(source) == "string") data = flixel_system_FlxAssets.getBitmapData(source); else if(js_Boot.__instanceof(source,Class)) data = Type.createInstance(source,[]).bitmapData; else if(js_Boot.__instanceof(source,openfl_display_BitmapData)) data = (js_Boot.__cast(source , openfl_display_BitmapData)).clone(); else return null;
	var maskData = null;
	if(typeof(mask) == "string") maskData = flixel_system_FlxAssets.getBitmapData(mask); else if(js_Boot.__instanceof(mask,Class)) maskData = Type.createInstance(mask,[]).bitmapData; else if(js_Boot.__instanceof(mask,openfl_display_BitmapData)) maskData = mask; else return null;
	data.copyChannel(maskData,new openfl_geom_Rectangle(0,0,data.width,data.height),new openfl_geom_Point(),8,8);
	output.set_pixels(data);
	return output;
};
flixel_util_FlxSpriteUtil.alphaMaskFlxSprite = function(sprite,mask,output) {
	if(sprite.dirty) {
		sprite.dirty = true;
		sprite.calcFrame();
	}
	var data = sprite.get_pixels().clone();
	data.copyChannel(mask.get_pixels(),new openfl_geom_Rectangle(0,0,sprite.get_width(),sprite.get_height()),new openfl_geom_Point(),8,8);
	output.set_pixels(data);
	return output;
};
flixel_util_FlxSpriteUtil.screenWrap = function(sprite,Left,Right,Top,Bottom) {
	if(Bottom == null) Bottom = true;
	if(Top == null) Top = true;
	if(Right == null) Right = true;
	if(Left == null) Left = true;
	if(Left && sprite.x + sprite.frameWidth <= 0) sprite.set_x(flixel_FlxG.width); else if(Right && sprite.x >= flixel_FlxG.width) sprite.set_x(0);
	if(Top && sprite.y + sprite.frameHeight <= 0) sprite.set_y(flixel_FlxG.height); else if(Bottom && sprite.y >= flixel_FlxG.height) sprite.set_y(0);
	return sprite;
};
flixel_util_FlxSpriteUtil.bound = function(sprite,MinX,MaxX,MinY,MaxY) {
	if(MaxY == null) MaxY = 0;
	if(MinY == null) MinY = 0;
	if(MaxX == null) MaxX = 0;
	if(MinX == null) MinX = 0;
	if(MaxX <= 0) MaxX = flixel_FlxG.width;
	if(MaxY <= 0) MaxY = flixel_FlxG.height;
	MaxX -= sprite.frameWidth;
	MaxY -= sprite.frameHeight;
	sprite.set_x(flixel_util_FlxMath.bound(sprite.x,MinX,MaxX));
	sprite.set_y(flixel_util_FlxMath.bound(sprite.y,MinY,MaxY));
	return sprite;
};
flixel_util_FlxSpriteUtil.space = function(objects,startX,startY,horizontalSpacing,verticalSpacing,spaceFromBounds) {
	if(spaceFromBounds == null) spaceFromBounds = false;
	if(verticalSpacing == null) verticalSpacing = 0;
	if(horizontalSpacing == null) horizontalSpacing = 0;
	var prevWidth = 0;
	var prevHeight = 0;
	var _g1 = 0;
	var _g = objects.length;
	while(_g1 < _g) {
		var i = _g1++;
		var object = objects[i];
		if(spaceFromBounds) {
			object.set_x(startX + prevWidth + i * horizontalSpacing);
			object.set_y(startY + prevHeight + i * verticalSpacing);
		} else {
			object.set_x(startX + i * horizontalSpacing);
			object.set_y(startY + i * verticalSpacing);
		}
	}
};
flixel_util_FlxSpriteUtil.screenCenter = function(object,xAxis,yAxis) {
	if(yAxis == null) yAxis = true;
	if(xAxis == null) xAxis = true;
	if(xAxis) object.set_x(flixel_FlxG.width / 2 - object.get_width() / 2);
	if(yAxis) object.set_y(flixel_FlxG.height / 2 - object.get_height() / 2);
	return object;
};
flixel_util_FlxSpriteUtil.drawLine = function(sprite,StartX,StartY,EndX,EndY,lineStyle,drawStyle) {
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	flixel_util_FlxSpriteUtil.setLineStyle(lineStyle);
	flixel_util_FlxSpriteUtil.flashGfx.beginFill(0,flixel_util_FlxColorUtil.getAlphaFloat(0));
	flixel_util_FlxSpriteUtil.flashGfx.moveTo(StartX,StartY);
	flixel_util_FlxSpriteUtil.flashGfx.lineTo(EndX,EndY);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	sprite;
	return sprite;
};
flixel_util_FlxSpriteUtil.drawRect = function(sprite,X,Y,Width,Height,Color,lineStyle,fillStyle,drawStyle) {
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	flixel_util_FlxSpriteUtil.setLineStyle(lineStyle);
	if(fillStyle != null && fillStyle.hasFill) flixel_util_FlxSpriteUtil.flashGfx.beginFill(flixel_util_FlxColorUtil.ARGBtoRGB(fillStyle.color),flixel_util_FlxColorUtil.getAlphaFloat(fillStyle.color)); else flixel_util_FlxSpriteUtil.flashGfx.beginFill((Color >> 16 & 255) << 16 | (Color >> 8 & 255) << 8 | Color & 255,flixel_util_FlxColorUtil.getAlphaFloat(Color));
	flixel_util_FlxSpriteUtil.flashGfx.drawRect(X,Y,Width,Height);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	sprite;
	return sprite;
};
flixel_util_FlxSpriteUtil.drawRoundRect = function(sprite,X,Y,Width,Height,EllipseWidth,EllipseHeight,Color,lineStyle,fillStyle,drawStyle) {
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	flixel_util_FlxSpriteUtil.setLineStyle(lineStyle);
	if(fillStyle != null && fillStyle.hasFill) flixel_util_FlxSpriteUtil.flashGfx.beginFill(flixel_util_FlxColorUtil.ARGBtoRGB(fillStyle.color),flixel_util_FlxColorUtil.getAlphaFloat(fillStyle.color)); else flixel_util_FlxSpriteUtil.flashGfx.beginFill((Color >> 16 & 255) << 16 | (Color >> 8 & 255) << 8 | Color & 255,flixel_util_FlxColorUtil.getAlphaFloat(Color));
	flixel_util_FlxSpriteUtil.flashGfx.drawRoundRect(X,Y,Width,Height,EllipseWidth,EllipseHeight);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	sprite;
	return sprite;
};
flixel_util_FlxSpriteUtil.drawCircle = function(sprite,X,Y,Radius,Color,lineStyle,fillStyle,drawStyle) {
	if(Color == null) Color = -1;
	if(Radius == null) Radius = -1;
	if(Y == null) Y = -1;
	if(X == null) X = -1;
	if(X == -1 || Y == -1) {
		var midPoint = sprite.getGraphicMidpoint();
		if(X == -1) X = midPoint.x;
		if(Y == -1) Y = midPoint.y;
	}
	if(Radius < 1) {
		var minVal = Math.min(sprite.frameWidth,sprite.frameHeight);
		Radius = minVal / 2;
	}
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	flixel_util_FlxSpriteUtil.setLineStyle(lineStyle);
	if(fillStyle != null && fillStyle.hasFill) flixel_util_FlxSpriteUtil.flashGfx.beginFill(flixel_util_FlxColorUtil.ARGBtoRGB(fillStyle.color),flixel_util_FlxColorUtil.getAlphaFloat(fillStyle.color)); else flixel_util_FlxSpriteUtil.flashGfx.beginFill((Color >> 16 & 255) << 16 | (Color >> 8 & 255) << 8 | Color & 255,flixel_util_FlxColorUtil.getAlphaFloat(Color));
	flixel_util_FlxSpriteUtil.flashGfx.drawCircle(X,Y,Radius);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	sprite;
	return sprite;
};
flixel_util_FlxSpriteUtil.drawEllipse = function(sprite,X,Y,Width,Height,Color,lineStyle,fillStyle,drawStyle) {
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	flixel_util_FlxSpriteUtil.setLineStyle(lineStyle);
	if(fillStyle != null && fillStyle.hasFill) flixel_util_FlxSpriteUtil.flashGfx.beginFill(flixel_util_FlxColorUtil.ARGBtoRGB(fillStyle.color),flixel_util_FlxColorUtil.getAlphaFloat(fillStyle.color)); else flixel_util_FlxSpriteUtil.flashGfx.beginFill((Color >> 16 & 255) << 16 | (Color >> 8 & 255) << 8 | Color & 255,flixel_util_FlxColorUtil.getAlphaFloat(Color));
	flixel_util_FlxSpriteUtil.flashGfx.drawEllipse(X,Y,Width,Height);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	sprite;
	return sprite;
};
flixel_util_FlxSpriteUtil.drawTriangle = function(sprite,X,Y,Height,Color,lineStyle,fillStyle,drawStyle) {
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	flixel_util_FlxSpriteUtil.setLineStyle(lineStyle);
	if(fillStyle != null && fillStyle.hasFill) flixel_util_FlxSpriteUtil.flashGfx.beginFill(flixel_util_FlxColorUtil.ARGBtoRGB(fillStyle.color),flixel_util_FlxColorUtil.getAlphaFloat(fillStyle.color)); else flixel_util_FlxSpriteUtil.flashGfx.beginFill((Color >> 16 & 255) << 16 | (Color >> 8 & 255) << 8 | Color & 255,flixel_util_FlxColorUtil.getAlphaFloat(Color));
	flixel_util_FlxSpriteUtil.flashGfx.moveTo(X + Height / 2,Y);
	flixel_util_FlxSpriteUtil.flashGfx.lineTo(X + Height,Height + Y);
	flixel_util_FlxSpriteUtil.flashGfx.lineTo(X,Height + Y);
	flixel_util_FlxSpriteUtil.flashGfx.lineTo(X + Height / 2,Y);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	sprite;
	return sprite;
};
flixel_util_FlxSpriteUtil.drawPolygon = function(sprite,Vertices,Color,lineStyle,fillStyle,drawStyle) {
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	flixel_util_FlxSpriteUtil.setLineStyle(lineStyle);
	if(fillStyle != null && fillStyle.hasFill) flixel_util_FlxSpriteUtil.flashGfx.beginFill(flixel_util_FlxColorUtil.ARGBtoRGB(fillStyle.color),flixel_util_FlxColorUtil.getAlphaFloat(fillStyle.color)); else flixel_util_FlxSpriteUtil.flashGfx.beginFill((Color >> 16 & 255) << 16 | (Color >> 8 & 255) << 8 | Color & 255,flixel_util_FlxColorUtil.getAlphaFloat(Color));
	var p = Vertices.shift();
	flixel_util_FlxSpriteUtil.flashGfx.moveTo(p.x,p.y);
	var _g = 0;
	while(_g < Vertices.length) {
		var p1 = Vertices[_g];
		++_g;
		flixel_util_FlxSpriteUtil.flashGfx.lineTo(p1.x,p1.y);
	}
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	sprite;
	return sprite;
};
flixel_util_FlxSpriteUtil.beginDraw = function(Color,lineStyle,fillStyle) {
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	flixel_util_FlxSpriteUtil.setLineStyle(lineStyle);
	if(fillStyle != null && fillStyle.hasFill) flixel_util_FlxSpriteUtil.flashGfx.beginFill(flixel_util_FlxColorUtil.ARGBtoRGB(fillStyle.color),flixel_util_FlxColorUtil.getAlphaFloat(fillStyle.color)); else flixel_util_FlxSpriteUtil.flashGfx.beginFill((Color >> 16 & 255) << 16 | (Color >> 8 & 255) << 8 | Color & 255,flixel_util_FlxColorUtil.getAlphaFloat(Color));
};
flixel_util_FlxSpriteUtil.endDraw = function(sprite,drawStyle) {
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	return sprite;
};
flixel_util_FlxSpriteUtil.updateSpriteGraphic = function(sprite,drawStyle) {
	if(drawStyle == null) drawStyle = { smoothing : false}; else if(drawStyle.smoothing == null) drawStyle.smoothing = false;
	sprite.get_pixels().draw(flixel_util_FlxSpriteUtil.flashGfxSprite,drawStyle.matrix,drawStyle.colorTransform,drawStyle.blendMode,drawStyle.clipRect,drawStyle.smoothing);
	sprite.dirty = true;
	sprite.cachedGraphics.get_tilesheet().destroyFrameBitmapDatas();
	return sprite;
};
flixel_util_FlxSpriteUtil.setLineStyle = function(lineStyle) {
	if(lineStyle != null) {
		var color;
		var alpha;
		if(lineStyle.color == null) {
			color = 0;
			alpha = 1;
		} else {
			color = flixel_util_FlxColorUtil.ARGBtoRGB(lineStyle.color);
			alpha = flixel_util_FlxColorUtil.getAlphaFloat(lineStyle.color);
		}
		if(lineStyle.pixelHinting == null) lineStyle.pixelHinting = false;
		if(lineStyle.miterLimit == null) lineStyle.miterLimit = 3;
		flixel_util_FlxSpriteUtil.flashGfx.lineStyle(lineStyle.thickness,color,alpha,lineStyle.pixelHinting,lineStyle.scaleMode,lineStyle.capsStyle,lineStyle.jointStyle,lineStyle.miterLimit);
	}
};
flixel_util_FlxSpriteUtil.fill = function(sprite,Color) {
	sprite.get_pixels().fillRect(sprite.get_pixels().rect,Color);
	if(sprite.get_pixels() != sprite.framePixels) sprite.dirty = true;
	sprite.cachedGraphics.get_tilesheet().destroyFrameBitmapDatas();
	return sprite;
};
flixel_util_FlxSpriteUtil.flicker = function(Object,Duration,Interval,EndVisibility,ForceRestart,CompletionCallback,ProgressCallback) {
	if(ForceRestart == null) ForceRestart = true;
	if(EndVisibility == null) EndVisibility = true;
	if(Interval == null) Interval = 0.04;
	if(Duration == null) Duration = 1;
	flixel_effects_FlxFlicker.flicker(Object,Duration,Interval,EndVisibility,ForceRestart,CompletionCallback,ProgressCallback);
	return Object;
};
flixel_util_FlxSpriteUtil.isFlickering = function(Object) {
	return flixel_effects_FlxFlicker.isFlickering(Object);
};
flixel_util_FlxSpriteUtil.stopFlickering = function(Object) {
	flixel_effects_FlxFlicker.stopFlickering(Object);
	return Object;
};
flixel_util_FlxSpriteUtil.fadeIn = function(sprite,Duration,ResetAlpha,OnComplete) {
	if(Duration == null) Duration = 1;
	if(ResetAlpha) sprite.set_alpha(0);
	flixel_tweens_FlxTween.color(sprite,Duration,sprite.color,sprite.color,sprite.alpha,1,OnComplete != null?{ complete : OnComplete}:null);
	return sprite;
};
flixel_util_FlxSpriteUtil.fadeOut = function(sprite,Duration,FadeToBlack,OnComplete) {
	if(Duration == null) Duration = 1;
	flixel_tweens_FlxTween.color(sprite,Duration,sprite.color,FadeToBlack?-16777216:sprite.color,sprite.alpha,0,OnComplete != null?{ complete : OnComplete}:null);
	return sprite;
};
var flixel_util_FlxStringUtil = function() { };
$hxClasses["flixel.util.FlxStringUtil"] = flixel_util_FlxStringUtil;
flixel_util_FlxStringUtil.__name__ = ["flixel","util","FlxStringUtil"];
flixel_util_FlxStringUtil.formatTicks = function(StartTicks,EndTicks) {
	return Math.abs(EndTicks - StartTicks) / 1000 + "s";
};
flixel_util_FlxStringUtil.formatTime = function(Seconds,ShowMS) {
	if(ShowMS == null) ShowMS = false;
	var timeString = (Seconds / 60 | 0) + ":";
	var timeStringHelper = (Seconds | 0) % 60;
	if(timeStringHelper < 10) timeString += "0";
	timeString += timeStringHelper;
	if(ShowMS) {
		timeString += ".";
		timeStringHelper = (Seconds - (Seconds | 0)) * 100 | 0;
		if(timeStringHelper < 10) timeString += "0";
		timeString += timeStringHelper;
	}
	return timeString;
};
flixel_util_FlxStringUtil.formatArray = function(AnyArray) {
	var string = "";
	if(AnyArray != null && AnyArray.length > 0) {
		string = Std.string(AnyArray[0]);
		var i = 1;
		var l = AnyArray.length;
		while(i < l) string += ", " + Std.string(AnyArray[i++]);
	}
	return string;
};
flixel_util_FlxStringUtil.formatStringMap = function(AnyMap) {
	var string = "";
	var $it0 = AnyMap.keys();
	while( $it0.hasNext() ) {
		var key = $it0.next();
		if(key == null) string += "null"; else string += "" + key;
		string += ", ";
	}
	return string.substring(0,string.length - 2);
};
flixel_util_FlxStringUtil.formatMoney = function(Amount,ShowDecimal,EnglishStyle) {
	if(EnglishStyle == null) EnglishStyle = true;
	if(ShowDecimal == null) ShowDecimal = true;
	var helper;
	var amount = Math.floor(Amount);
	var string = "";
	var comma = "";
	var zeroes = "";
	while(amount > 0) {
		if(string.length > 0 && comma.length <= 0) {
			if(EnglishStyle) comma = ","; else comma = ".";
		}
		zeroes = "";
		helper = amount - Math.floor(amount / 1000) * 1000;
		amount = Math.floor(amount / 1000);
		if(amount > 0) {
			if(helper < 100) zeroes += "0";
			if(helper < 10) zeroes += "0";
		}
		string = zeroes + helper + comma + string;
	}
	if(ShowDecimal) {
		amount = (Amount * 100 | 0) - (Amount | 0) * 100;
		string += (EnglishStyle?".":",") + amount;
		if(amount < 10) string += "0";
	}
	return string;
};
flixel_util_FlxStringUtil.formatBytes = function(Bytes,Precision) {
	if(Precision == null) Precision = 2;
	var units = ["Bytes","kB","MB","GB","TB","PB"];
	var curUnit = 0;
	while(Bytes >= 1024 && curUnit < units.length - 1) {
		Bytes /= 1024;
		curUnit++;
	}
	return flixel_util_FlxMath.roundDecimal(Bytes,Precision) + units[curUnit];
};
flixel_util_FlxStringUtil.filterDigits = function(Input) {
	var output_b = "";
	var _g1 = 0;
	var _g = Input.length;
	while(_g1 < _g) {
		var i = _g1++;
		var c = HxOverrides.cca(Input,i);
		if(c >= 48 && c <= 57) output_b += String.fromCharCode(c);
	}
	return output_b;
};
flixel_util_FlxStringUtil.htmlFormat = function(Text,Size,Color,Bold,Italic,Underlined) {
	if(Underlined == null) Underlined = false;
	if(Italic == null) Italic = false;
	if(Bold == null) Bold = false;
	if(Color == null) Color = "FFFFFF";
	if(Size == null) Size = 12;
	var prefix = "<font size='" + Size + "' color='#" + Color + "'>";
	var suffix = "</font>";
	if(Bold) {
		prefix = "<b>" + prefix;
		suffix = suffix + "</b>";
	}
	if(Italic) {
		prefix = "<i>" + prefix;
		suffix = suffix + "</i>";
	}
	if(Underlined) {
		prefix = "<u>" + prefix;
		suffix = suffix + "</u>";
	}
	return prefix + Text + suffix;
};
flixel_util_FlxStringUtil.getDomain = function(url) {
	var urlStart = url.indexOf("://") + 3;
	var urlEnd = url.indexOf("/",urlStart);
	var home = url.substring(urlStart,urlEnd);
	var LastDot = home.lastIndexOf(".") - 1;
	var domEnd = home.lastIndexOf(".",LastDot) + 1;
	home = home.substring(domEnd,home.length);
	home = home.split(":")[0];
	if(home == "") return "local"; else return home;
};
flixel_util_FlxStringUtil.sameClassName = function(Obj1,Obj2,Simple) {
	if(Simple == null) Simple = true;
	return (function($this) {
		var $r;
		var cl;
		if(js_Boot.__instanceof(Obj1,Class)) cl = Obj1; else cl = Type.getClass(Obj1);
		var s = Type.getClassName(cl);
		if(s != null) {
			s = StringTools.replace(s,"::",".");
			if(Simple) {
				var pos = s.lastIndexOf(".") + 1;
				s = HxOverrides.substr(s,pos,null);
			}
		}
		$r = s;
		return $r;
	}(this)) == (function($this) {
		var $r;
		var cl1;
		if(js_Boot.__instanceof(Obj2,Class)) cl1 = Obj2; else cl1 = Type.getClass(Obj2);
		var s1 = Type.getClassName(cl1);
		if(s1 != null) {
			s1 = StringTools.replace(s1,"::",".");
			if(Simple) {
				var pos1 = s1.lastIndexOf(".") + 1;
				s1 = HxOverrides.substr(s1,pos1,null);
			}
		}
		$r = s1;
		return $r;
	}(this));
};
flixel_util_FlxStringUtil.toIntArray = function(Data) {
	if(Data != null && Data != "") {
		var strArray = Data.split(",");
		var iArray = [];
		var _g = 0;
		while(_g < strArray.length) {
			var str = strArray[_g];
			++_g;
			iArray.push(Std.parseInt(str));
		}
		return iArray;
	}
	return null;
};
flixel_util_FlxStringUtil.toFloatArray = function(Data) {
	if(Data != null && Data != "") {
		var strArray = Data.split(",");
		var fArray = [];
		var _g = 0;
		while(_g < strArray.length) {
			var str = strArray[_g];
			++_g;
			fArray.push(parseFloat(str));
		}
		return fArray;
	}
	return null;
};
flixel_util_FlxStringUtil.arrayToCSV = function(Data,Width,Invert) {
	if(Invert == null) Invert = false;
	var row = 0;
	var column;
	var csv = "";
	var Height = Data.length / Width | 0;
	var index;
	var offset = 0;
	while(row < Height) {
		column = 0;
		while(column < Width) {
			index = Data[offset];
			if(Invert) {
				if(index == 0) index = 1; else if(index == 1) index = 0;
			}
			if(column == 0) {
				if(row == 0) csv += index; else csv += "\n" + index;
			} else csv += ", " + index;
			column++;
			offset++;
		}
		row++;
	}
	return csv;
};
flixel_util_FlxStringUtil.bitmapToCSV = function(Bitmap,Invert,Scale,ColorMap) {
	if(Scale == null) Scale = 1;
	if(Invert == null) Invert = false;
	if(Scale < 1) Scale = 1;
	if(Scale > 1) {
		var bd = Bitmap;
		Bitmap = new openfl_display_BitmapData(Bitmap.width * Scale,Bitmap.height * Scale);
		var bdW = bd.width;
		var bdH = bd.height;
		var pCol = 0;
		var _g = 0;
		while(_g < bdW) {
			var i = _g++;
			var _g1 = 0;
			while(_g1 < bdH) {
				var j = _g1++;
				pCol = bd.getPixel(i,j);
				var _g2 = 0;
				while(_g2 < Scale) {
					var k = _g2++;
					var _g3 = 0;
					while(_g3 < Scale) {
						var m = _g3++;
						Bitmap.setPixel(i * Scale + k,j * Scale + m,pCol);
					}
				}
			}
		}
	}
	var row = 0;
	var column;
	var pixel;
	var csv = "";
	var bitmapWidth = Bitmap.width;
	var bitmapHeight = Bitmap.height;
	while(row < bitmapHeight) {
		column = 0;
		while(column < bitmapWidth) {
			pixel = Bitmap.getPixel(column,row);
			if(ColorMap != null) pixel = HxOverrides.indexOf(ColorMap,pixel,0); else if(Invert && pixel > 0 || !Invert && pixel == 0) pixel = 1; else pixel = 0;
			if(column == 0) {
				if(row == 0) csv += pixel; else csv += "\n" + pixel;
			} else csv += ", " + pixel;
			column++;
		}
		row++;
	}
	return csv;
};
flixel_util_FlxStringUtil.imageToCSV = function(ImageFile,Invert,Scale) {
	if(Scale == null) Scale = 1;
	if(Invert == null) Invert = false;
	var tempBitmapData;
	if(typeof(ImageFile) == "string") tempBitmapData = flixel_system_FlxAssets.getBitmapData(ImageFile); else tempBitmapData = Type.createInstance(ImageFile,[]).bitmapData;
	return flixel_util_FlxStringUtil.bitmapToCSV(tempBitmapData,Invert,Scale);
};
flixel_util_FlxStringUtil.getDebugString = function(LabelValuePairs) {
	var output = "(";
	var _g = 0;
	while(_g < LabelValuePairs.length) {
		var pair = LabelValuePairs[_g];
		++_g;
		output += pair.label + ": ";
		var value = pair.value;
		if(typeof(value) == "number") value = flixel_util_FlxMath.roundDecimal(value,flixel_FlxG["debugger"].precision);
		output += Std.string(value) + " | ";
		flixel_util_LabelValuePair._pool.put(pair);
	}
	output = StringTools.trim(HxOverrides.substr(output,0,output.length - 2));
	return output + ")";
};
var flixel_util_LabelValuePair = function() {
};
$hxClasses["flixel.util.LabelValuePair"] = flixel_util_LabelValuePair;
flixel_util_LabelValuePair.__name__ = ["flixel","util","LabelValuePair"];
flixel_util_LabelValuePair.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_util_LabelValuePair.weak = function(label,value) {
	return flixel_util_LabelValuePair._pool.get().create(label,value);
};
flixel_util_LabelValuePair.prototype = {
	label: null
	,value: null
	,create: function(label,value) {
		this.label = label;
		this.value = value;
		return this;
	}
	,put: function() {
		flixel_util_LabelValuePair._pool.put(this);
	}
	,destroy: function() {
		this.label = null;
		this.value = null;
	}
	,__class__: flixel_util_LabelValuePair
};
var flixel_util_FlxVelocity = function() { };
$hxClasses["flixel.util.FlxVelocity"] = flixel_util_FlxVelocity;
flixel_util_FlxVelocity.__name__ = ["flixel","util","FlxVelocity"];
flixel_util_FlxVelocity.moveTowardsObject = function(Source,Dest,Speed,MaxTime) {
	if(MaxTime == null) MaxTime = 0;
	if(Speed == null) Speed = 60;
	var a = flixel_util_FlxAngle.angleBetween(Source,Dest,null);
	if(MaxTime > 0) {
		var d = flixel_util_FlxMath.distanceBetween(Source,Dest);
		Speed = d / (MaxTime / 1000) | 0;
	}
	Source.velocity.set_x(Math.cos(a) * Speed);
	Source.velocity.set_y(Math.sin(a) * Speed);
};
flixel_util_FlxVelocity.accelerateTowardsObject = function(Source,Dest,Acceleration,MaxXSpeed,MaxYSpeed) {
	var a = flixel_util_FlxAngle.angleBetween(Source,Dest,null);
	Source.velocity.set_x(0);
	Source.velocity.set_y(0);
	Source.acceleration.set_x(Math.cos(a) * Acceleration);
	Source.acceleration.set_y(Math.sin(a) * Acceleration);
	Source.maxVelocity.set_x(MaxXSpeed);
	Source.maxVelocity.set_y(MaxYSpeed);
};
flixel_util_FlxVelocity.moveTowardsMouse = function(Source,Speed,MaxTime) {
	if(MaxTime == null) MaxTime = 0;
	if(Speed == null) Speed = 60;
	var a = flixel_util_FlxAngle.angleBetweenMouse(Source);
	if(MaxTime > 0) {
		var d = flixel_util_FlxMath.distanceToMouse(Source);
		Speed = d / (MaxTime / 1000) | 0;
	}
	Source.velocity.set_x(Math.cos(a) * Speed);
	Source.velocity.set_y(Math.sin(a) * Speed);
};
flixel_util_FlxVelocity.moveTowardsTouch = function(Source,Touch,Speed,MaxTime) {
	if(MaxTime == null) MaxTime = 0;
	if(Speed == null) Speed = 60;
	var a = flixel_util_FlxAngle.angleBetweenTouch(Source,Touch,null);
	if(MaxTime > 0) {
		var d = flixel_util_FlxMath.distanceToTouch(Source,Touch);
		Speed = d / (MaxTime / 1000) | 0;
	}
	Source.velocity.set_x(Math.cos(a) * Speed);
	Source.velocity.set_y(Math.sin(a) * Speed);
};
flixel_util_FlxVelocity.accelerateTowardsMouse = function(Source,Acceleration,MaxXSpeed,MaxYSpeed) {
	var a = flixel_util_FlxAngle.angleBetweenMouse(Source);
	Source.velocity.set_x(0);
	Source.velocity.set_y(0);
	Source.acceleration.set_x(Math.cos(a) * Acceleration);
	Source.acceleration.set_y(Math.sin(a) * Acceleration);
	Source.maxVelocity.set_x(MaxXSpeed);
	Source.maxVelocity.set_y(MaxYSpeed);
};
flixel_util_FlxVelocity.accelerateTowardsTouch = function(Source,Touch,Acceleration,MaxXSpeed,MaxYSpeed) {
	var a = flixel_util_FlxAngle.angleBetweenTouch(Source,Touch,null);
	Source.velocity.set_x(0);
	Source.velocity.set_y(0);
	Source.acceleration.set_x(Math.cos(a) * Acceleration);
	Source.acceleration.set_y(Math.sin(a) * Acceleration);
	Source.maxVelocity.set_x(MaxXSpeed);
	Source.maxVelocity.set_y(MaxYSpeed);
};
flixel_util_FlxVelocity.moveTowardsPoint = function(Source,Target,Speed,MaxTime) {
	if(MaxTime == null) MaxTime = 0;
	if(Speed == null) Speed = 60;
	var a = flixel_util_FlxAngle.angleBetweenPoint(Source,Target);
	if(MaxTime > 0) {
		var d = flixel_util_FlxMath.distanceToPoint(Source,Target);
		Speed = d / (MaxTime / 1000) | 0;
	}
	Source.velocity.set_x(Math.cos(a) * Speed);
	Source.velocity.set_y(Math.sin(a) * Speed);
	if(Target._weak) Target.put();
};
flixel_util_FlxVelocity.accelerateTowardsPoint = function(Source,Target,Acceleration,MaxXSpeed,MaxYSpeed) {
	var a = flixel_util_FlxAngle.angleBetweenPoint(Source,Target);
	Source.velocity.set_x(0);
	Source.velocity.set_y(0);
	Source.acceleration.set_x(Math.cos(a) * Acceleration);
	Source.acceleration.set_y(Math.sin(a) * Acceleration);
	Source.maxVelocity.set_x(MaxXSpeed);
	Source.maxVelocity.set_y(MaxYSpeed);
	if(Target._weak) Target.put();
};
flixel_util_FlxVelocity.velocityFromAngle = function(Angle,Speed) {
	var a = Angle * (Math.PI / 180);
	var result = flixel_util_FlxPoint.get(null,null);
	result.set_x(Math.cos(a) * Speed);
	result.set_y(Math.sin(a) * Speed);
	return result;
};
flixel_util_FlxVelocity.velocityFromFacing = function(Parent,Speed) {
	var a = 0;
	if(Parent.facing == 1) a = 180 * (Math.PI / 180); else if(Parent.facing == 16) a = 0 * (Math.PI / 180); else if(Parent.facing == 256) a = -90 * (Math.PI / 180); else if(Parent.facing == 4096) a = 90 * (Math.PI / 180);
	var result = flixel_util_FlxPoint.get(null,null);
	result.set_x(Math.cos(a) * Speed);
	result.set_y(Math.sin(a) * Speed);
	return result;
};
flixel_util_FlxVelocity.computeVelocity = function(Velocity,Acceleration,Drag,Max) {
	if(Acceleration != 0) Velocity += Acceleration * flixel_FlxG.elapsed; else if(Drag != 0) {
		var drag = Drag * flixel_FlxG.elapsed;
		if(Velocity - drag > 0) Velocity = Velocity - drag; else if(Velocity + drag < 0) Velocity += drag; else Velocity = 0;
	}
	if(Velocity != 0 && Max != 0) {
		if(Velocity > Max) Velocity = Max; else if(Velocity < -Max) Velocity = -Max;
	}
	return Velocity;
};
var flixel_util_loaders_CachedGraphics = function(Key,Bitmap,Persist) {
	if(Persist == null) Persist = false;
	this.useCount = 0;
	this.isDumped = false;
	this.destroyOnNoUse = true;
	this.persist = false;
	this.key = Key;
	this.bitmap = Bitmap;
	this.persist = Persist;
};
$hxClasses["flixel.util.loaders.CachedGraphics"] = flixel_util_loaders_CachedGraphics;
flixel_util_loaders_CachedGraphics.__name__ = ["flixel","util","loaders","CachedGraphics"];
flixel_util_loaders_CachedGraphics.prototype = {
	key: null
	,bitmap: null
	,assetsKey: null
	,assetsClass: null
	,data: null
	,persist: null
	,destroyOnNoUse: null
	,isDumped: null
	,tilesheet: null
	,useCount: null
	,_tilesheet: null
	,dump: function() {
	}
	,undump: function() {
	}
	,onContext: function() {
		if(this.isDumped) {
			this.undump();
			this.dump();
		}
	}
	,getRegionForFrame: function(FrameName) {
		var region = new flixel_util_loaders_TextureRegion(this);
		var frame = this.get_tilesheet().getFrame(FrameName);
		if(frame != null) {
			region.region.startX = frame.frame.x | 0;
			region.region.startY = frame.frame.y | 0;
			region.region.width = frame.frame.width | 0;
			region.region.height = frame.frame.height | 0;
		}
		return region;
	}
	,destroy: function() {
		this.bitmap = flixel_util_FlxDestroyUtil.dispose(this.bitmap);
		this.data = flixel_util_FlxDestroyUtil.destroy(this.data);
		this._tilesheet = flixel_util_FlxDestroyUtil.destroy(this._tilesheet);
		this.key = null;
		this.assetsKey = null;
		this.assetsClass = null;
	}
	,get_tilesheet: function() {
		if(this._tilesheet == null) {
			if(this.isDumped) this.onContext();
			this._tilesheet = new flixel_system_layer_TileSheetData(this.bitmap);
		}
		return this._tilesheet;
	}
	,getBitmapFromSystem: function() {
		var newBitmap = null;
		if(this.assetsClass != null) newBitmap = Type.createInstance(js_Boot.__cast(this.assetsClass , Class),[]); else if(this.assetsKey != null) newBitmap = openfl_Assets.getBitmapData(this.assetsKey,false);
		return newBitmap;
	}
	,get_canBeDumped: function() {
		return this.assetsClass != null || this.assetsKey != null;
	}
	,set_useCount: function(Value) {
		if(Value <= 0 && this.destroyOnNoUse && !this.persist) flixel_FlxG.bitmap.remove(this.key);
		return this.useCount = Value;
	}
	,set_destroyOnNoUse: function(Value) {
		if(Value && this.useCount == 0 && this.key != null && !this.persist) flixel_FlxG.bitmap.remove(this.key);
		return this.destroyOnNoUse = Value;
	}
	,__class__: flixel_util_loaders_CachedGraphics
	,__properties__: {set_useCount:"set_useCount",get_tilesheet:"get_tilesheet",get_canBeDumped:"get_canBeDumped",set_destroyOnNoUse:"set_destroyOnNoUse"}
};
var flixel_util_loaders_TextureAtlasFrame = function() {
	this.additionalAngle = 0;
	this.offset = null;
	this.sourceSize = null;
	this.trimmed = false;
	this.rotated = false;
	this.frame = null;
	this.name = null;
};
$hxClasses["flixel.util.loaders.TextureAtlasFrame"] = flixel_util_loaders_TextureAtlasFrame;
flixel_util_loaders_TextureAtlasFrame.__name__ = ["flixel","util","loaders","TextureAtlasFrame"];
flixel_util_loaders_TextureAtlasFrame.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_util_loaders_TextureAtlasFrame.prototype = {
	name: null
	,frame: null
	,rotated: null
	,trimmed: null
	,sourceSize: null
	,offset: null
	,additionalAngle: null
	,destroy: function() {
		this.name = null;
		this.frame = null;
		this.sourceSize = null;
		this.offset = null;
	}
	,__class__: flixel_util_loaders_TextureAtlasFrame
};
var flixel_util_loaders_TexturePackerData = function(Description,AssetName) {
	this.assetName = AssetName;
	this.description = Description;
	this.frames = [];
	this.parseData();
};
$hxClasses["flixel.util.loaders.TexturePackerData"] = flixel_util_loaders_TexturePackerData;
flixel_util_loaders_TexturePackerData.__name__ = ["flixel","util","loaders","TexturePackerData"];
flixel_util_loaders_TexturePackerData.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_util_loaders_TexturePackerData.prototype = {
	frames: null
	,assetName: null
	,description: null
	,asset: null
	,parseData: function() {
		if(this.frames.length != 0) return;
		if(this.assetName == null || this.description == null) return;
		this.asset = flixel_FlxG.bitmap.addWithSpaces(this.assetName,0,0,1,1,false,null).bitmap;
		var data = JSON.parse(openfl_Assets.getText(this.description));
		var _g = 0;
		var _g1 = Lambda.array(data.frames);
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			var texFrame = new flixel_util_loaders_TextureAtlasFrame();
			texFrame.trimmed = frame.trimmed;
			texFrame.rotated = frame.rotated;
			texFrame.name = frame.filename;
			texFrame.sourceSize = flixel_util_FlxPoint.get(frame.sourceSize.w,frame.sourceSize.h);
			texFrame.offset = flixel_util_FlxPoint.get(0,0);
			texFrame.offset.set(frame.spriteSourceSize.x,frame.spriteSourceSize.y);
			if(frame.rotated) {
				texFrame.frame = new openfl_geom_Rectangle(frame.frame.x,frame.frame.y,frame.frame.h,frame.frame.w);
				texFrame.additionalAngle = -90;
			} else {
				texFrame.frame = new openfl_geom_Rectangle(frame.frame.x,frame.frame.y,frame.frame.w,frame.frame.h);
				texFrame.additionalAngle = 0;
			}
			this.frames.push(texFrame);
		}
	}
	,destroy: function() {
		this.frames = flixel_util_FlxDestroyUtil.destroyArray(this.frames);
		this.assetName = null;
		this.description = null;
		this.asset = null;
	}
	,__class__: flixel_util_loaders_TexturePackerData
};
var flixel_util_loaders_TextureRegion = function(data,startX,startY,tileWidth,tileHeight,spacingX,spacingY,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(spacingY == null) spacingY = 0;
	if(spacingX == null) spacingX = 0;
	if(tileHeight == null) tileHeight = 0;
	if(tileWidth == null) tileWidth = 0;
	if(startY == null) startY = 0;
	if(startX == null) startX = 0;
	this.data = data;
	if(width <= 0) width = data.bitmap.width;
	if(height <= 0) height = data.bitmap.height;
	this.region = new flixel_system_layer_Region(startX,startY,tileWidth,tileHeight,spacingX,spacingY,width,height);
};
$hxClasses["flixel.util.loaders.TextureRegion"] = flixel_util_loaders_TextureRegion;
flixel_util_loaders_TextureRegion.__name__ = ["flixel","util","loaders","TextureRegion"];
flixel_util_loaders_TextureRegion.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_util_loaders_TextureRegion.prototype = {
	data: null
	,region: null
	,clone: function() {
		return new flixel_util_loaders_TextureRegion(this.data,this.region.startX,this.region.startY,this.region.tileWidth,this.region.tileHeight,this.region.spacingX,this.region.spacingY,this.region.width,this.region.height);
	}
	,destroy: function() {
		this.data = null;
		this.region = null;
	}
	,__class__: flixel_util_loaders_TextureRegion
};
var haxe_StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : ["haxe","StackItem"], __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.lastException = null;
haxe_CallStack.getStack = function(e) {
	if(e == null) return [];
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) site = haxe_CallStack.wrapCallSite(site);
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.wrapCallSite = null;
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		if(m == null) b.b += "null"; else b.b += "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		if(file == null) b.b += "null"; else b.b += "" + file;
		b.b += " line ";
		if(line == null) b.b += "null"; else b.b += "" + line;
		if(s1 != null) b.b += ")";
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		if(cname == null) b.b += "null"; else b.b += "" + cname;
		b.b += ".";
		if(meth == null) b.b += "null"; else b.b += "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		if(n == null) b.b += "null"; else b.b += "" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) return []; else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") stack.shift();
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function"?haxe_StackItem.LocalFunction():meth == "Global code"?null:haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else m.push(haxe_StackItem.Module(StringTools.trim(line)));
		}
		return m;
	} else return s;
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	keys: null
	,__class__: haxe_IMap
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = ["haxe","Resource"];
haxe_Resource.content = null;
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) return x.str;
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = ["haxe","Serializer"];
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var x = this.shash.get(s);
		if(x != null) {
			this.buf.b += "R";
			if(x == null) this.buf.b += "null"; else this.buf.b += "" + x;
			return;
		}
		this.shash.set(s,this.scount++);
		this.buf.b += "y";
		s = encodeURIComponent(s);
		if(s.length == null) this.buf.b += "null"; else this.buf.b += "" + s.length;
		this.buf.b += ":";
		if(s == null) this.buf.b += "null"; else this.buf.b += "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				if(i == null) this.buf.b += "null"; else this.buf.b += "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		{
			var _g = Type["typeof"](v);
			switch(_g[1]) {
			case 0:
				this.buf.b += "n";
				break;
			case 1:
				var v1 = v;
				if(v1 == 0) {
					this.buf.b += "z";
					return;
				}
				this.buf.b += "i";
				if(v1 == null) this.buf.b += "null"; else this.buf.b += "" + v1;
				break;
			case 2:
				var v2 = v;
				if(isNaN(v2)) this.buf.b += "k"; else if(!isFinite(v2)) if(v2 < 0) this.buf.b += "m"; else this.buf.b += "p"; else {
					this.buf.b += "d";
					if(v2 == null) this.buf.b += "null"; else this.buf.b += "" + v2;
				}
				break;
			case 3:
				if(v) this.buf.b += "t"; else this.buf.b += "f";
				break;
			case 6:
				var c = _g[2];
				if(c == String) {
					this.serializeString(v);
					return;
				}
				if(this.useCache && this.serializeRef(v)) return;
				switch(c) {
				case Array:
					var ucount = 0;
					this.buf.b += "a";
					var l = v.length;
					var _g1 = 0;
					while(_g1 < l) {
						var i = _g1++;
						if(v[i] == null) ucount++; else {
							if(ucount > 0) {
								if(ucount == 1) this.buf.b += "n"; else {
									this.buf.b += "u";
									if(ucount == null) this.buf.b += "null"; else this.buf.b += "" + ucount;
								}
								ucount = 0;
							}
							this.serialize(v[i]);
						}
					}
					if(ucount > 0) {
						if(ucount == 1) this.buf.b += "n"; else {
							this.buf.b += "u";
							if(ucount == null) this.buf.b += "null"; else this.buf.b += "" + ucount;
						}
					}
					this.buf.b += "h";
					break;
				case List:
					this.buf.b += "l";
					var v3 = v;
					var _g1_head = v3.h;
					var _g1_val = null;
					while(_g1_head != null) {
						var i1;
						_g1_val = _g1_head[0];
						_g1_head = _g1_head[1];
						i1 = _g1_val;
						this.serialize(i1);
					}
					this.buf.b += "h";
					break;
				case Date:
					var d = v;
					this.buf.b += "v";
					this.buf.add(d.getTime());
					break;
				case haxe_ds_StringMap:
					this.buf.b += "b";
					var v4 = v;
					var $it0 = v4.keys();
					while( $it0.hasNext() ) {
						var k = $it0.next();
						this.serializeString(k);
						this.serialize(__map_reserved[k] != null?v4.getReserved(k):v4.h[k]);
					}
					this.buf.b += "h";
					break;
				case haxe_ds_IntMap:
					this.buf.b += "q";
					var v5 = v;
					var $it1 = v5.keys();
					while( $it1.hasNext() ) {
						var k1 = $it1.next();
						this.buf.b += ":";
						if(k1 == null) this.buf.b += "null"; else this.buf.b += "" + k1;
						this.serialize(v5.h[k1]);
					}
					this.buf.b += "h";
					break;
				case haxe_ds_ObjectMap:
					this.buf.b += "M";
					var v6 = v;
					var $it2 = v6.keys();
					while( $it2.hasNext() ) {
						var k2 = $it2.next();
						var id = Reflect.field(k2,"__id__");
						Reflect.deleteField(k2,"__id__");
						this.serialize(k2);
						k2.__id__ = id;
						this.serialize(v6.h[k2.__id__]);
					}
					this.buf.b += "h";
					break;
				case haxe_io_Bytes:
					var v7 = v;
					var i2 = 0;
					var max = v7.length - 2;
					var charsBuf = new StringBuf();
					var b64 = haxe_Serializer.BASE64;
					while(i2 < max) {
						var b1 = v7.get(i2++);
						var b2 = v7.get(i2++);
						var b3 = v7.get(i2++);
						charsBuf.add(b64.charAt(b1 >> 2));
						charsBuf.add(b64.charAt((b1 << 4 | b2 >> 4) & 63));
						charsBuf.add(b64.charAt((b2 << 2 | b3 >> 6) & 63));
						charsBuf.add(b64.charAt(b3 & 63));
					}
					if(i2 == max) {
						var b11 = v7.get(i2++);
						var b21 = v7.get(i2++);
						charsBuf.add(b64.charAt(b11 >> 2));
						charsBuf.add(b64.charAt((b11 << 4 | b21 >> 4) & 63));
						charsBuf.add(b64.charAt(b21 << 2 & 63));
					} else if(i2 == max + 1) {
						var b12 = v7.get(i2++);
						charsBuf.add(b64.charAt(b12 >> 2));
						charsBuf.add(b64.charAt(b12 << 4 & 63));
					}
					var chars = charsBuf.b;
					this.buf.b += "s";
					if(chars.length == null) this.buf.b += "null"; else this.buf.b += "" + chars.length;
					this.buf.b += ":";
					if(chars == null) this.buf.b += "null"; else this.buf.b += "" + chars;
					break;
				default:
					if(this.useCache) this.cache.pop();
					if(v.hxSerialize != null) {
						this.buf.b += "C";
						this.serializeString(Type.getClassName(c));
						if(this.useCache) this.cache.push(v);
						v.hxSerialize(this);
						this.buf.b += "g";
					} else {
						this.buf.b += "c";
						this.serializeString(Type.getClassName(c));
						if(this.useCache) this.cache.push(v);
						this.serializeFields(v);
					}
				}
				break;
			case 4:
				if(js_Boot.__instanceof(v,Class)) {
					var className = Type.getClassName(v);
					this.buf.b += "A";
					this.serializeString(className);
				} else if(js_Boot.__instanceof(v,Enum)) {
					this.buf.b += "B";
					this.serializeString(Type.getEnumName(v));
				} else {
					if(this.useCache && this.serializeRef(v)) return;
					this.buf.b += "o";
					this.serializeFields(v);
				}
				break;
			case 7:
				var e = _g[2];
				if(this.useCache) {
					if(this.serializeRef(v)) return;
					this.cache.pop();
				}
				if(this.useEnumIndex) this.buf.b += "j"; else this.buf.b += "w";
				this.serializeString(Type.getEnumName(e));
				if(this.useEnumIndex) {
					this.buf.b += ":";
					this.buf.b += Std.string(v[1]);
				} else this.serializeString(v[0]);
				this.buf.b += ":";
				var l1 = v.length;
				this.buf.b += Std.string(l1 - 2);
				var _g11 = 2;
				while(_g11 < l1) {
					var i3 = _g11++;
					this.serialize(v[i3]);
				}
				if(this.useCache) this.cache.push(v);
				break;
			case 5:
				throw new js__$Boot_HaxeError("Cannot serialize function");
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
			}
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = Type;
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.setResolver(r);
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,setResolver: function(r) {
		if(r == null) this.resolver = { resolveClass : function(_) {
			return null;
		}, resolveEnum : function(_1) {
			return null;
		}}; else this.resolver = r;
	}
	,get: function(p) {
		return this.buf.charCodeAt(p);
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) break;
			if(c == 45) {
				if(this.pos != fpos) break;
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) break;
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) k *= -1;
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c >= 43 && c < 58 || c == 101 || c == 69) this.pos++; else break;
		}
		return Std.parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) throw new js__$Boot_HaxeError("Invalid object");
			if(this.buf.charCodeAt(this.pos) == 103) break;
			var k = this.unserialize();
			if(!(typeof(k) == "string")) throw new js__$Boot_HaxeError("Invalid object key");
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.get(this.pos++) != 58) throw new js__$Boot_HaxeError("Invalid enum format");
		var nargs = this.readDigits();
		if(nargs == 0) return Type.createEnum(edecl,tag);
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.get(this.pos++);
		switch(_g) {
		case 110:
			return null;
		case 116:
			return true;
		case 102:
			return false;
		case 122:
			return 0;
		case 105:
			return this.readDigits();
		case 100:
			return this.readFloat();
		case 121:
			var len = this.readDigits();
			if(this.get(this.pos++) != 58 || this.length - this.pos < len) throw new js__$Boot_HaxeError("Invalid string length");
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 107:
			return NaN;
		case 109:
			return -Infinity;
		case 112:
			return Infinity;
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else a.push(this.unserialize());
			}
			return a;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 114:
			var n1 = this.readDigits();
			if(n1 < 0 || n1 >= this.cache.length) throw new js__$Boot_HaxeError("Invalid reference");
			return this.cache[n1];
		case 82:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.scache.length) throw new js__$Boot_HaxeError("Invalid string reference");
			return this.scache[n2];
		case 120:
			throw new js__$Boot_HaxeError(this.unserialize());
			break;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) throw new js__$Boot_HaxeError("Class not found " + name);
			var o1 = Type.createEmptyInstance(cl);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 119:
			var name1 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name1);
			if(edecl == null) throw new js__$Boot_HaxeError("Enum not found " + name1);
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 106:
			var name2 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name2);
			if(edecl1 == null) throw new js__$Boot_HaxeError("Enum not found " + name2);
			this.pos++;
			var index = this.readDigits();
			var tag = Type.getEnumConstructs(edecl1)[index];
			if(tag == null) throw new js__$Boot_HaxeError("Unknown enum index " + name2 + "@" + index);
			var e1 = this.unserializeEnum(edecl1,tag);
			this.cache.push(e1);
			return e1;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf1 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				h.set(s1,this.unserialize());
			}
			this.pos++;
			return h;
		case 113:
			var h1 = new haxe_ds_IntMap();
			this.cache.push(h1);
			var buf3 = this.buf;
			var c1 = this.get(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				h1.set(i,this.unserialize());
				c1 = this.get(this.pos++);
			}
			if(c1 != 104) throw new js__$Boot_HaxeError("Invalid IntMap format");
			return h1;
		case 77:
			var h2 = new haxe_ds_ObjectMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s2 = this.unserialize();
				h2.set(s2,this.unserialize());
			}
			this.pos++;
			return h2;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				var s3 = HxOverrides.substr(this.buf,this.pos,19);
				d = HxOverrides.strDate(s3);
				this.pos += 19;
			} else {
				var t = this.readFloat();
				var d1 = new Date();
				d1.setTime(t);
				d = d1;
			}
			this.cache.push(d);
			return d;
		case 115:
			var len1 = this.readDigits();
			var buf5 = this.buf;
			if(this.get(this.pos++) != 58 || this.length - this.pos < len1) throw new js__$Boot_HaxeError("Invalid bytes length");
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len1 & 3;
			var size;
			size = (len1 >> 2) * 3 + (rest >= 2?rest - 1:0);
			var max = i1 + (len1 - rest);
			var bytes = haxe_io_Bytes.alloc(size);
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c2 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c11 << 2 | c2 >> 4);
				var c3 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c2 << 4 | c3 >> 2);
				var c4 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c3 << 6 | c4);
			}
			if(rest >= 2) {
				var c12 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c21 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c12 << 2 | c21 >> 4);
				if(rest == 3) {
					var c31 = codes[StringTools.fastCodeAt(buf5,i1++)];
					bytes.set(bpos++,c21 << 4 | c31 >> 2);
				}
			}
			this.pos += len1;
			this.cache.push(bytes);
			return bytes;
		case 67:
			var name3 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name3);
			if(cl1 == null) throw new js__$Boot_HaxeError("Class not found " + name3);
			var o2 = Type.createEmptyInstance(cl1);
			this.cache.push(o2);
			o2.hxUnserialize(this);
			if(this.get(this.pos++) != 103) throw new js__$Boot_HaxeError("Invalid custom data");
			return o2;
		case 65:
			var name4 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name4);
			if(cl2 == null) throw new js__$Boot_HaxeError("Class not found " + name4);
			return cl2;
		case 66:
			var name5 = this.unserialize();
			var e2 = this.resolver.resolveEnum(name5);
			if(e2 == null) throw new js__$Boot_HaxeError("Enum not found " + name5);
			return e2;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_Utf8 = function(size) {
	this.__b = "";
};
$hxClasses["haxe.Utf8"] = haxe_Utf8;
haxe_Utf8.__name__ = ["haxe","Utf8"];
haxe_Utf8.prototype = {
	__b: null
	,__class__: haxe_Utf8
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) return hb;
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		if(srcpos == 0 && len == src.length) this.b.set(src.b,pos); else this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
	}
	,getDouble: function(pos) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		this.data.setFloat32(pos,v,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		this.data.setUint16(pos,v,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) complement = true;
	if(complement) while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) nbits++;
	if(nbits > 8 || len != 1 << nbits) throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = haxe_io_Bytes.alloc(size + (b.length * 8 % nbits == 0?0:1));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.get(pin++);
			}
			curbits -= nbits;
			out.set(pout++,base.b[buf >> curbits & mask]);
		}
		if(curbits > 0) out.set(pout++,base.b[buf << nbits - curbits & mask]);
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) this.initTable();
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = haxe_io_Bytes.alloc(size);
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.get(pin++)];
				if(i == -1) throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				buf |= i;
			}
			curbits -= 8;
			out.set(pout++,buf >> curbits & 255);
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Md5 = function() {
};
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = ["haxe","crypto","Md5"];
haxe_crypto_Md5.encode = function(s) {
	var m = new haxe_crypto_Md5();
	var h = m.doEncode(haxe_crypto_Md5.str2blks(s));
	return m.hex(h);
};
haxe_crypto_Md5.str2blks = function(str) {
	var nblk = (str.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	while(_g < blksSize) {
		var i1 = _g++;
		blks[i1] = 0;
	}
	var i = 0;
	while(i < str.length) {
		blks[i >> 2] |= HxOverrides.cca(str,i) << (str.length * 8 + i) % 4 * 8;
		i++;
	}
	blks[i >> 2] |= 128 << (str.length * 8 + i) % 4 * 8;
	var l = str.length * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			var _g1 = 0;
			while(_g1 < 4) {
				var j = _g1++;
				str += hex_chr.charAt(num >> j * 8 + 4 & 15) + hex_chr.charAt(num >> j * 8 & 15);
			}
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { };
	this.h.__keys__ = { };
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) return false;
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		return this.map.get(this.keys[this.index++]);
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,set: function(key,value) {
		if(__map_reserved[key] != null) this.setReserved(key,value); else this.h[key] = value;
	}
	,get: function(key) {
		if(__map_reserved[key] != null) return this.getReserved(key);
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) return this.existsReserved(key);
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) this.rh = { };
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) return null; else return this.rh["$" + key];
	}
	,existsReserved: function(key) {
		if(this.rh == null) return false;
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) return false;
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) return false;
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		var _this = this.arrayKeys();
		return HxOverrides.iter(_this);
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) out.push(key);
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) out.push(key.substr(1));
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$Vector_Vector_$Impl_$ = {};
$hxClasses["haxe.ds._Vector.Vector_Impl_"] = haxe_ds__$Vector_Vector_$Impl_$;
haxe_ds__$Vector_Vector_$Impl_$.__name__ = ["haxe","ds","_Vector","Vector_Impl_"];
haxe_ds__$Vector_Vector_$Impl_$.blit = function(src,srcPos,dest,destPos,len) {
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		dest[destPos + i] = src[srcPos + i];
	}
};
haxe_ds__$Vector_Vector_$Impl_$.toArray = function(this1) {
	var a = [];
	var len = this1.length;
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		a[i] = this1[i];
	}
	return a;
};
var haxe_io_Eof = function() { };
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : ["haxe","io","Error"], __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) return 0.0;
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) return 0;
	var af;
	if(f < 0) af = -f; else af = f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) exp = -127; else if(exp > 128) exp = 128;
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608) & 8388607;
	return (f < 0?-2147483648:0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) return 0.0;
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else {
		var av;
		if(v < 0) av = -v; else av = v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig;
		var v1 = (av / Math.pow(2,exp) - 1) * 4503599627370496.;
		sig = Math.round(v1);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0?-2147483648:0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else this.dir = null;
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,toString: function() {
		return (this.dir == null?"":this.dir + (this.backslash?"\\":"/")) + this.file + (this.ext == null?"":"." + this.ext);
	}
	,__class__: haxe_io_Path
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Object.prototype.hasOwnProperty.call(val,"name")) this.name = Reflect.field(val,"name"); else this.name = "Error";
	if(Object.prototype.hasOwnProperty.call(val,"message")) this.message = Reflect.field(val,"message"); else this.message = Std.string(val);
	if(Error.captureStackTrace) Error.captureStackTrace(this,js__$Boot_HaxeError);
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = ["js","Browser"];
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		return s;
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return null;
	}
};
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = ["js","html","_CanvasElement","CanvasUtil"];
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) return ctx;
	}
	return null;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null?null:end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	byteLength: null
	,a: null
	,slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	if(byteOffset == null) this.offset = 0; else this.offset = byteOffset;
	if(byteLength == null) this.length = buffer.byteLength - this.offset; else this.length = byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	buf: null
	,offset: null
	,length: null
	,getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) return v - 256; else return v;
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) return v - 65536; else return v;
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8; else return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) return a | b << 8 | c << 16 | d << 24; else return d | c << 8 | b << 16 | a << 24;
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) return v + 4294967296.; else return v;
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian?a:b,littleEndian?b:a);
	}
	,setInt8: function(byteOffset,value) {
		if(value < 0) this.buf.a[byteOffset + this.offset] = value + 128 & 255; else this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0?value + 65536:value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g = 0;
		while(_g < arg1) {
			var i = _g++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) offset = 0;
		if(length == null) length = buffer.byteLength - offset;
		if(offset == 0) arr = buffer.a; else arr = buffer.a.slice(offset,offset + length);
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	var t = this;
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			t[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			t[i1 + offset] = a1[i1];
		}
	} else throw new js__$Boot_HaxeError("TODO");
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var t = this;
	var a = js_html_compat_Uint8Array._new(t.slice(start,end));
	a.byteOffset = start;
	return a;
};
var lime_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
	this.version = Std["int"](Math.random() * 1000000);
};
$hxClasses["lime.AssetCache"] = lime_AssetCache;
lime_AssetCache.__name__ = ["lime","AssetCache"];
lime_AssetCache.prototype = {
	audio: null
	,enabled: null
	,image: null
	,font: null
	,version: null
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = this.audio.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.audio.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.image.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.image.remove(key2);
			}
		}
	}
	,__class__: lime_AssetCache
};
var lime_app_Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Void_Void"] = lime_app_Event_$Void_$Void;
lime_app_Event_$Void_$Void.__name__ = ["lime","app","Event_Void_Void"];
lime_app_Event_$Void_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Void_$Void
};
var lime_Assets = function() { };
$hxClasses["lime.Assets"] = lime_Assets;
lime_Assets.__name__ = ["lime","Assets"];
lime_Assets.exists = function(id,type) {
	lime_Assets.initialize();
	if(type == null) type = "BINARY";
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) return library.exists(symbolName,type);
	return false;
};
lime_Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.audio.exists(id)) {
		var audio = lime_Assets.cache.audio.get(id);
		if(lime_Assets.isValidAudio(audio)) return audio;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			if(library.isLocal(symbolName,"SOUND")) {
				var audio1 = library.getAudioBuffer(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.audio.set(id,audio1);
				return audio1;
			} else haxe_Log.trace("[Assets] Audio asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 122, className : "lime.Assets", methodName : "getAudioBuffer"});
		} else haxe_Log.trace("[Assets] There is no audio asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 128, className : "lime.Assets", methodName : "getAudioBuffer"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 134, className : "lime.Assets", methodName : "getAudioBuffer"});
	return null;
};
lime_Assets.getBytes = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			if(library.isLocal(symbolName,"BINARY")) return library.getBytes(symbolName); else haxe_Log.trace("[Assets] String or Bytes asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 171, className : "lime.Assets", methodName : "getBytes"});
		} else haxe_Log.trace("[Assets] There is no String or Bytes asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 177, className : "lime.Assets", methodName : "getBytes"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 183, className : "lime.Assets", methodName : "getBytes"});
	return null;
};
lime_Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.font.exists(id)) return lime_Assets.cache.font.get(id);
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			if(library.isLocal(symbolName,"FONT")) {
				var font = library.getFont(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.font.set(id,font);
				return font;
			} else haxe_Log.trace("[Assets] Font asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 234, className : "lime.Assets", methodName : "getFont"});
		} else haxe_Log.trace("[Assets] There is no Font asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 240, className : "lime.Assets", methodName : "getFont"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 246, className : "lime.Assets", methodName : "getFont"});
	return null;
};
lime_Assets.getImage = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.image.exists(id)) {
		var image = lime_Assets.cache.image.get(id);
		if(lime_Assets.isValidImage(image)) return image;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(library.isLocal(symbolName,"IMAGE")) {
				var image1 = library.getImage(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.image.set(id,image1);
				return image1;
			} else haxe_Log.trace("[Assets] Image asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 304, className : "lime.Assets", methodName : "getImage"});
		} else haxe_Log.trace("[Assets] There is no Image asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 310, className : "lime.Assets", methodName : "getImage"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 316, className : "lime.Assets", methodName : "getImage"});
	return null;
};
lime_Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return lime_Assets.libraries.get(name);
};
lime_Assets.getPath = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,null)) return library.getPath(symbolName); else haxe_Log.trace("[Assets] There is no asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 364, className : "lime.Assets", methodName : "getPath"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 370, className : "lime.Assets", methodName : "getPath"});
	return null;
};
lime_Assets.getText = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			if(library.isLocal(symbolName,"TEXT")) return library.getText(symbolName); else haxe_Log.trace("[Assets] String asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 407, className : "lime.Assets", methodName : "getText"});
		} else haxe_Log.trace("[Assets] There is no String asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 413, className : "lime.Assets", methodName : "getText"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 419, className : "lime.Assets", methodName : "getText"});
	return null;
};
lime_Assets.initialize = function() {
	if(!lime_Assets.initialized) {
		lime_Assets.registerLibrary("default",new DefaultAssetLibrary());
		lime_Assets.initialized = true;
	}
};
lime_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled) {
		if(type == "IMAGE" || type == null) {
			if(lime_Assets.cache.image.exists(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(lime_Assets.cache.font.exists(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(lime_Assets.cache.audio.exists(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
lime_Assets.isValidAudio = function(buffer) {
	return buffer != null;
};
lime_Assets.isValidImage = function(buffer) {
	return true;
};
lime_Assets.list = function(type) {
	lime_Assets.initialize();
	var items = [];
	var $it0 = lime_Assets.libraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var libraryItems = library.list(type);
		if(libraryItems != null) items = items.concat(libraryItems);
	}
	return items;
};
lime_Assets.loadAudioBuffer = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.audio.exists(id)) {
		var audio = lime_Assets.cache.audio.get(id);
		if(lime_Assets.isValidAudio(audio)) {
			promise.complete(audio);
			return promise.future;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			var future = library.loadAudioBuffer(symbolName);
			if(useCache && lime_Assets.cache.enabled) future.onComplete(function(audio1) {
				lime_Assets.cache.audio.set(id,audio1);
			});
			promise.completeWith(future);
		} else promise.error("[Assets] There is no audio asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
lime_Assets.loadBytes = function(id) {
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) promise.completeWith(library.loadBytes(symbolName)); else promise.error("[Assets] There is no String or Bytes asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
lime_Assets.loadFont = function(id) {
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) promise.completeWith(library.loadFont(symbolName)); else promise.error("[Assets] There is no Font asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
lime_Assets.loadImage = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.image.exists(id)) {
		var image = lime_Assets.cache.image.get(id);
		if(lime_Assets.isValidImage(image)) {
			promise.complete(image);
			return promise.future;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			var future = library.loadImage(symbolName);
			if(useCache && lime_Assets.cache.enabled) future.onComplete(function(image1) {
				lime_Assets.cache.image.set(id,image1);
			});
			promise.completeWith(future);
		} else promise.error("[Assets] There is no Image asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
lime_Assets.loadLibrary = function(name) {
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var data = lime_Assets.getText("libraries/" + name + ".json");
	if(data != null && data != "") {
		var info = JSON.parse(data);
		var library = Type.createInstance(Type.resolveClass(info.type),info.args);
		lime_Assets.libraries.set(name,library);
		library.onChange.add(($_=lime_Assets.onChange,$bind($_,$_.dispatch)));
		promise.completeWith(library.load());
	} else promise.error("[Assets] There is no asset library named \"" + name + "\"");
	return promise.future;
};
lime_Assets.loadText = function(id) {
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) promise.completeWith(library.loadText(symbolName)); else promise.error("[Assets] There is no String asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
lime_Assets.registerLibrary = function(name,library) {
	if(lime_Assets.libraries.exists(name)) {
		if(lime_Assets.libraries.get(name) == library) return; else lime_Assets.unloadLibrary(name);
	}
	if(library != null) library.onChange.add(lime_Assets.library_onChange);
	lime_Assets.libraries.set(name,library);
};
lime_Assets.unloadLibrary = function(name) {
	lime_Assets.initialize();
	var library = lime_Assets.libraries.get(name);
	if(library != null) {
		lime_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_Assets.library_onChange);
		library.unload();
	}
	lime_Assets.libraries.remove(name);
};
lime_Assets.library_onChange = function() {
	lime_Assets.cache.clear();
	lime_Assets.onChange.dispatch();
};
var lime__$backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_audio_AudioManager.init();
};
$hxClasses["lime._backend.html5.HTML5Application"] = lime__$backend_html5_HTML5Application;
lime__$backend_html5_HTML5Application.__name__ = ["lime","_backend","html5","HTML5Application"];
lime__$backend_html5_HTML5Application.prototype = {
	gameDeviceCache: null
	,currentUpdate: null
	,deltaTime: null
	,framePeriod: null
	,lastUpdate: null
	,nextUpdate: null
	,parent: null
	,convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) return keyCode + 32;
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 144:
			return 1073741907;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 36:
			return 1073741898;
		case 35:
			return 1073741901;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		return keyCode;
	}
	,create: function(config) {
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		
			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}
			
			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};
			
			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};
			
			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,getFrameRate: function() {
		if(this.framePeriod < 0) return 60; else if(this.framePeriod == 1000) return 0; else return 1000 / this.framePeriod;
	}
	,handleApplicationEvent: function(__) {
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			this.parent.onUpdate.dispatch(this.deltaTime | 0);
			if(this.parent.renderers[0] != null) {
				this.parent.renderers[0].onRender.dispatch();
				this.parent.renderers[0].flip();
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
				this.nextUpdate = this.currentUpdate;
			} else this.nextUpdate = this.currentUpdate + this.framePeriod;
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null?event.keyCode:event.which);
			var modifier;
			modifier = (event.shiftKey?3:0) | (event.ctrlKey?192:0) | (event.altKey?768:0) | (event.metaKey?3072:0);
			if(event.type == "keydown") this.parent.windows[0].onKeyDown.dispatch(keyCode,modifier); else this.parent.windows[0].onKeyUp.dispatch(keyCode,modifier);
		}
	}
	,handleWindowEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var _g = event.type;
			switch(_g) {
			case "focus":
				this.parent.windows[0].onFocusIn.dispatch();
				this.parent.windows[0].onActivate.dispatch();
				break;
			case "blur":
				this.parent.windows[0].onFocusOut.dispatch();
				this.parent.windows[0].onDeactivate.dispatch();
				break;
			case "resize":
				var cacheWidth = this.parent.windows[0].__width;
				var cacheHeight = this.parent.windows[0].__height;
				this.parent.windows[0].backend.handleResize();
				if(this.parent.windows[0].__width != cacheWidth || this.parent.windows[0].__height != cacheHeight) this.parent.windows[0].onResize.dispatch(this.parent.windows[0].__width,this.parent.windows[0].__height);
				break;
			case "beforeunload":
				this.parent.windows[0].onClose.dispatch();
				break;
			}
		}
	}
	,setFrameRate: function(value) {
		if(value >= 60) this.framePeriod = -1; else if(value > 0) this.framePeriod = 1000 / value; else this.framePeriod = 1000;
		return value;
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) return;
		var id;
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g1 = 0;
		var _g = devices.length;
		while(_g1 < _g) {
			var i = _g1++;
			id = i;
			data = devices[id];
			if(data == null) continue;
			if(!this.gameDeviceCache.h.hasOwnProperty(id)) {
				cache = new lime__$backend_html5_GameDeviceData();
				cache.id = id;
				cache.connected = data.connected;
				var _g3 = 0;
				var _g2 = data.buttons.length;
				while(_g3 < _g2) {
					var i1 = _g3++;
					cache.buttons.push(data.buttons[i1].value);
				}
				var _g31 = 0;
				var _g21 = data.axes.length;
				while(_g31 < _g21) {
					var i2 = _g31++;
					cache.axes.push(data.axes[i2]);
				}
				if(data.mapping == "standard") cache.isGamepad = true;
				this.gameDeviceCache.h[id] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(id);
					if(cache.isGamepad) lime_ui_Gamepad.__connect(id);
				}
			}
			cache = this.gameDeviceCache.h[id];
			joystick = lime_ui_Joystick.devices.h[id];
			gamepad = lime_ui_Gamepad.devices.h[id];
			if(data.connected) {
				var button;
				var value;
				var _g32 = 0;
				var _g22 = data.buttons.length;
				while(_g32 < _g22) {
					var i3 = _g32++;
					value = data.buttons[i3].value;
					if(value != cache.buttons[i3]) {
						if(i3 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) gamepad.onAxisMove.dispatch(4,value);
						} else if(i3 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) gamepad.onAxisMove.dispatch(5,value);
						} else {
							if(value > 0) joystick.onButtonDown.dispatch(i3); else joystick.onButtonUp.dispatch(i3);
							if(gamepad != null) {
								switch(i3) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) gamepad.onButtonDown.dispatch(button); else gamepad.onButtonUp.dispatch(button);
							}
						}
						cache.buttons[i3] = value;
					}
				}
				var _g33 = 0;
				var _g23 = data.axes.length;
				while(_g33 < _g23) {
					var i4 = _g33++;
					if(data.axes[i4] != cache.axes[i4]) {
						joystick.onAxisMove.dispatch(i4,data.axes[i4]);
						if(gamepad != null) gamepad.onAxisMove.dispatch(i4,data.axes[i4]);
						cache.axes[i4] = data.axes[i4];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(id);
				lime_ui_Gamepad.__disconnect(id);
			}
		}
	}
	,__class__: lime__$backend_html5_HTML5Application
};
var lime__$backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._backend.html5.GameDeviceData"] = lime__$backend_html5_GameDeviceData;
lime__$backend_html5_GameDeviceData.__name__ = ["lime","_backend","html5","GameDeviceData"];
lime__$backend_html5_GameDeviceData.prototype = {
	connected: null
	,id: null
	,isGamepad: null
	,buttons: null
	,axes: null
	,__class__: lime__$backend_html5_GameDeviceData
};
var lime__$backend_html5_HTML5Mouse = function() { };
$hxClasses["lime._backend.html5.HTML5Mouse"] = lime__$backend_html5_HTML5Mouse;
lime__$backend_html5_HTML5Mouse.__name__ = ["lime","_backend","html5","HTML5Mouse"];
lime__$backend_html5_HTML5Mouse.__cursor = null;
lime__$backend_html5_HTML5Mouse.__hidden = null;
lime__$backend_html5_HTML5Mouse.hide = function() {
	if(!lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = true;
		var _g = 0;
		var _g1 = lime_app_Application.current.windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.backend.element.style.cursor = "none";
		}
	}
};
lime__$backend_html5_HTML5Mouse.show = function() {
	if(lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = false;
		var cacheValue = lime__$backend_html5_HTML5Mouse.__cursor;
		lime__$backend_html5_HTML5Mouse.__cursor = null;
		lime__$backend_html5_HTML5Mouse.set_cursor(cacheValue);
	}
};
lime__$backend_html5_HTML5Mouse.warp = function(x,y,window) {
};
lime__$backend_html5_HTML5Mouse.get_cursor = function() {
	if(lime__$backend_html5_HTML5Mouse.__cursor == null) return lime_ui_MouseCursor.DEFAULT;
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.set_cursor = function(value) {
	if(lime__$backend_html5_HTML5Mouse.__cursor != value) {
		if(!lime__$backend_html5_HTML5Mouse.__hidden) {
			var _g = 0;
			var _g1 = lime_app_Application.current.windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				switch(value[1]) {
				case 0:
					$window.backend.element.style.cursor = "default";
					break;
				case 1:
					$window.backend.element.style.cursor = "crosshair";
					break;
				case 3:
					$window.backend.element.style.cursor = "move";
					break;
				case 4:
					$window.backend.element.style.cursor = "pointer";
					break;
				case 5:
					$window.backend.element.style.cursor = "nesw-resize";
					break;
				case 6:
					$window.backend.element.style.cursor = "ns-resize";
					break;
				case 7:
					$window.backend.element.style.cursor = "nwse-resize";
					break;
				case 8:
					$window.backend.element.style.cursor = "ew-resize";
					break;
				case 9:
					$window.backend.element.style.cursor = "text";
					break;
				case 10:
					$window.backend.element.style.cursor = "wait";
					break;
				case 11:
					$window.backend.element.style.cursor = "wait";
					break;
				default:
					$window.backend.element.style.cursor = "auto";
				}
			}
		}
		lime__$backend_html5_HTML5Mouse.__cursor = value;
	}
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.get_lock = function() {
	return false;
};
lime__$backend_html5_HTML5Mouse.set_lock = function(value) {
	return value;
};
var lime__$backend_html5_HTML5Renderer = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Renderer"] = lime__$backend_html5_HTML5Renderer;
lime__$backend_html5_HTML5Renderer.__name__ = ["lime","_backend","html5","HTML5Renderer"];
lime__$backend_html5_HTML5Renderer.prototype = {
	parent: null
	,create: function() {
		this.createContext();
		{
			var _g = this.parent.context;
			switch(_g[1]) {
			case 0:
				this.parent.window.backend.canvas.addEventListener("webglcontextlost",$bind(this,this.handleEvent),false);
				this.parent.window.backend.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleEvent),false);
				break;
			default:
			}
		}
	}
	,createContext: function() {
		if(this.parent.window.backend.div != null) {
			this.parent.context = lime_graphics_RenderContext.DOM(this.parent.window.backend.div);
			this.parent.type = lime_graphics_RendererType.DOM;
		} else if(this.parent.window.backend.canvas != null) {
			var webgl = null;
			var options = { alpha : false, antialias : Object.prototype.hasOwnProperty.call(this.parent.window.config,"antialiasing")?this.parent.window.config.antialiasing > 0:false, depth : Object.prototype.hasOwnProperty.call(this.parent.window.config,"depthBuffer")?this.parent.window.config.depthBuffer:true, premultipliedAlpha : false, stencil : Object.prototype.hasOwnProperty.call(this.parent.window.config,"stencilBuffer")?this.parent.window.config.stencilBuffer:false, preserveDrawingBuffer : false};
			webgl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.parent.window.backend.canvas,options);
			if(webgl == null) {
				this.parent.context = lime_graphics_RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d"));
				this.parent.type = lime_graphics_RendererType.CANVAS;
			} else {
				lime_graphics_opengl_GL.context = webgl;
				this.parent.context = lime_graphics_RenderContext.OPENGL(lime_graphics_opengl_GL.context);
				this.parent.type = lime_graphics_RendererType.OPENGL;
			}
		}
	}
	,flip: function() {
	}
	,handleEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "webglcontextlost":
			event.preventDefault();
			this.parent.context = null;
			this.parent.onContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,render: function() {
	}
	,__class__: lime__$backend_html5_HTML5Renderer
};
var lime__$backend_html5_HTML5Window = function(parent) {
	this.unusedTouchesPool = new List();
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"element")) this.element = parent.config.element;
};
$hxClasses["lime._backend.html5.HTML5Window"] = lime__$backend_html5_HTML5Window;
lime__$backend_html5_HTML5Window.__name__ = ["lime","_backend","html5","HTML5Window"];
lime__$backend_html5_HTML5Window.textInput = null;
lime__$backend_html5_HTML5Window.prototype = {
	canvas: null
	,div: null
	,element: null
	,currentTouches: null
	,enableTextEvents: null
	,parent: null
	,primaryTouch: null
	,setHeight: null
	,setWidth: null
	,unusedTouchesPool: null
	,alert: function(message,title) {
		if(message != null) js_Browser.alert(message);
	}
	,close: function() {
		this.parent.application.removeWindow(this.parent);
	}
	,create: function(application) {
		this.setWidth = this.parent.__width;
		this.setHeight = this.parent.__height;
		this.parent.id = lime__$backend_html5_HTML5Window.windowID++;
		if(js_Boot.__instanceof(this.element,HTMLCanvasElement)) this.canvas = this.element; else this.canvas = window.document.createElement("canvas");
		if(this.canvas != null) {
			var style = this.canvas.style;
			style.setProperty("-webkit-transform","translateZ(0)",null);
			style.setProperty("transform","translateZ(0)",null);
		} else if(this.div != null) {
			var style1 = this.div.style;
			style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
			style1.setProperty("transform","translate3D(0,0,0)",null);
			style1.position = "relative";
			style1.overflow = "hidden";
			style1.setProperty("-webkit-user-select","none",null);
			style1.setProperty("-moz-user-select","none",null);
			style1.setProperty("-ms-user-select","none",null);
			style1.setProperty("-o-user-select","none",null);
		}
		if(this.parent.__width == 0 && this.parent.__height == 0) {
			if(this.element != null) {
				this.parent.set_width(this.element.clientWidth);
				this.parent.set_height(this.element.clientHeight);
			} else {
				this.parent.set_width(window.innerWidth);
				this.parent.set_height(window.innerHeight);
			}
			this.parent.set_fullscreen(true);
		}
		if(this.canvas != null) {
			this.canvas.width = this.parent.__width;
			this.canvas.height = this.parent.__height;
		} else {
			this.div.style.width = this.parent.__width + "px";
			this.div.style.height = this.parent.__height + "px";
		}
		this.handleResize();
		if(this.element != null) {
			if(this.canvas != null) {
				if(this.element != this.canvas) this.element.appendChild(this.canvas);
			} else this.element.appendChild(this.div);
			var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				this.element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			window.document.addEventListener("dragstart",function(e) {
				if(e.target.nodeName.toLowerCase() == "img") {
					e.preventDefault();
					return false;
				}
				return true;
			},false);
			this.element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
			this.element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
		}
	}
	,focus: function() {
	}
	,getDisplay: function() {
		return lime_system_System.getDisplay(0);
	}
	,getEnableTextEvents: function() {
		return this.enableTextEvents;
	}
	,handleFocusEvent: function(event) {
		if(this.enableTextEvents) haxe_Timer.delay(function() {
			lime__$backend_html5_HTML5Window.textInput.focus();
		},20);
	}
	,handleGamepadEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") lime_ui_Gamepad.__connect(event.gamepad.index);
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleInputEvent: function(event) {
		if(lime__$backend_html5_HTML5Window.textInput.value != "") {
			this.parent.onTextInput.dispatch(lime__$backend_html5_HTML5Window.textInput.value);
			lime__$backend_html5_HTML5Window.textInput.value = "";
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				this.parent.onMouseDown.dispatch(x,y,event.button);
				break;
			case "mouseenter":
				this.parent.onEnter.dispatch();
				break;
			case "mouseleave":
				this.parent.onLeave.dispatch();
				break;
			case "mouseup":
				this.parent.onMouseUp.dispatch(x,y,event.button);
				break;
			case "mousemove":
				this.parent.onMouseMove.dispatch(x,y);
				break;
			default:
			}
		} else this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY);
	}
	,handleResize: function() {
		var stretch = this.parent.__fullscreen || this.setWidth == 0 && this.setHeight == 0;
		if(this.element != null && (this.div == null || this.div != null && stretch)) {
			if(stretch) {
				if(this.parent.__width != this.element.clientWidth || this.parent.__height != this.element.clientHeight) {
					this.parent.set_width(this.element.clientWidth);
					this.parent.set_height(this.element.clientHeight);
					if(this.canvas != null) {
						if(this.element != this.canvas) {
							this.canvas.width = this.element.clientWidth;
							this.canvas.height = this.element.clientHeight;
						}
					} else {
						this.div.style.width = this.element.clientWidth + "px";
						this.div.style.height = this.element.clientHeight + "px";
					}
				}
			} else {
				var scaleX = this.element.clientWidth / this.setWidth;
				var scaleY = this.element.clientHeight / this.setHeight;
				var currentRatio = scaleX / scaleY;
				var targetRatio = Math.min(scaleX,scaleY);
				if(this.canvas != null) {
					if(this.element != this.canvas) {
						this.canvas.style.width = this.setWidth * targetRatio + "px";
						this.canvas.style.height = this.setHeight * targetRatio + "px";
						this.canvas.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
						this.canvas.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
					}
				} else {
					this.div.style.width = this.setWidth * targetRatio + "px";
					this.div.style.height = this.setHeight * targetRatio + "px";
					this.div.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
					this.div.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
				}
			}
		}
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var rect = null;
		if(this.element != null) {
			if(this.canvas != null) rect = this.canvas.getBoundingClientRect(); else if(this.div != null) rect = this.div.getBoundingClientRect(); else rect = this.element.getBoundingClientRect();
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			var x = 0.0;
			var y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			var _g2 = event.type;
			switch(_g2) {
			case "touchstart":
				var touch = this.unusedTouchesPool.pop();
				if(touch == null) touch = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id); else {
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.id = data.identifier;
					touch.dx = 0;
					touch.dy = 0;
					touch.pressure = data.force;
					touch.device = this.parent.id;
				}
				this.currentTouches.h[data.identifier] = touch;
				lime_ui_Touch.onStart.dispatch(touch);
				if(this.primaryTouch == null) this.primaryTouch = touch;
				if(touch == this.primaryTouch) this.parent.onMouseDown.dispatch(x,y,0);
				break;
			case "touchend":
				var touch1 = this.currentTouches.h[data.identifier];
				if(touch1 != null) {
					var cacheX = touch1.x;
					var cacheY = touch1.y;
					touch1.x = x / windowWidth;
					touch1.y = y / windowHeight;
					touch1.dx = touch1.x - cacheX;
					touch1.dy = touch1.y - cacheY;
					touch1.pressure = data.force;
					lime_ui_Touch.onEnd.dispatch(touch1);
					this.currentTouches.remove(data.identifier);
					this.unusedTouchesPool.add(touch1);
					if(touch1 == this.primaryTouch) {
						this.parent.onMouseUp.dispatch(x,y,0);
						this.primaryTouch = null;
					}
				}
				break;
			case "touchmove":
				var touch2 = this.currentTouches.h[data.identifier];
				if(touch2 != null) {
					var cacheX1 = touch2.x;
					var cacheY1 = touch2.y;
					touch2.x = x / windowWidth;
					touch2.y = y / windowHeight;
					touch2.dx = touch2.x - cacheX1;
					touch2.dy = touch2.y - cacheY1;
					touch2.pressure = data.force;
					lime_ui_Touch.onMove.dispatch(touch2);
					if(touch2 == this.primaryTouch) this.parent.onMouseMove.dispatch(x,y);
				}
				break;
			default:
			}
		}
	}
	,move: function(x,y) {
	}
	,resize: function(width,height) {
	}
	,setEnableTextEvents: function(value) {
		if(value) {
			if(lime__$backend_html5_HTML5Window.textInput == null) {
				lime__$backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$backend_html5_HTML5Window.textInput.type = "text";
				lime__$backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$backend_html5_HTML5Window.textInput.value = "";
				lime__$backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
				window.document.body.appendChild(lime__$backend_html5_HTML5Window.textInput);
			}
			if(!this.enableTextEvents) {
				lime__$backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
			}
			lime__$backend_html5_HTML5Window.textInput.focus();
		} else if(lime__$backend_html5_HTML5Window.textInput != null) {
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$backend_html5_HTML5Window.textInput.blur();
		}
		return this.enableTextEvents = value;
	}
	,setFullscreen: function(value) {
		return false;
	}
	,setIcon: function(image) {
	}
	,setMinimized: function(value) {
		return false;
	}
	,setTitle: function(value) {
		return value;
	}
	,__class__: lime__$backend_html5_HTML5Window
};
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = ["lime","app","IModule"];
lime_app_IModule.prototype = {
	onGamepadAxisMove: null
	,onGamepadButtonDown: null
	,onGamepadButtonUp: null
	,onGamepadConnect: null
	,onGamepadDisconnect: null
	,onJoystickAxisMove: null
	,onJoystickButtonDown: null
	,onJoystickButtonUp: null
	,onJoystickConnect: null
	,onJoystickDisconnect: null
	,onJoystickHatMove: null
	,onJoystickTrackballMove: null
	,onKeyDown: null
	,onKeyUp: null
	,onModuleExit: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onPreloadComplete: null
	,onPreloadProgress: null
	,onRenderContextLost: null
	,onRenderContextRestored: null
	,onTextEdit: null
	,onTextInput: null
	,onTouchEnd: null
	,onTouchMove: null
	,onTouchStart: null
	,onWindowActivate: null
	,onWindowClose: null
	,onWindowCreate: null
	,onWindowDeactivate: null
	,onWindowEnter: null
	,onWindowFocusIn: null
	,onWindowFocusOut: null
	,onWindowFullscreen: null
	,onWindowLeave: null
	,onWindowMove: null
	,onWindowMinimize: null
	,onWindowResize: null
	,onWindowRestore: null
	,render: null
	,update: null
	,__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app_Event_$Int_$Void();
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = ["lime","app","Module"];
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	onExit: null
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
		haxe_Log.trace("onGamepadConnect (module)",{ fileName : "Module.hx", lineNumber : 64, className : "lime.app.Module", methodName : "onGamepadConnect"});
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
	}
	,onKeyUp: function(window,keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(window,x,y,button) {
	}
	,onMouseMove: function(window,x,y) {
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function(window) {
	}
	,onWindowClose: function(window) {
	}
	,onWindowCreate: function(window) {
	}
	,onWindowDeactivate: function(window) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
	}
	,onWindowFocusOut: function(window) {
	}
	,onWindowFullscreen: function(window) {
	}
	,onWindowLeave: function(window) {
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowMinimize: function(window) {
	}
	,onWindowResize: function(window,width,height) {
	}
	,onWindowRestore: function(window) {
	}
	,render: function(renderer) {
	}
	,update: function(deltaTime) {
	}
	,__class__: lime_app_Module
};
var lime_app_Application = function() {
	this.onUpdate = new lime_app_Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) lime_app_Application.current = this;
	this.modules = [];
	this.renderers = [];
	this.windows = [];
	this.windowByID = new haxe_ds_IntMap();
	this.backend = new lime__$backend_html5_HTML5Application(this);
	this.onExit.add($bind(this,this.onModuleExit));
	this.onUpdate.add($bind(this,this.update));
	lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
	lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
	lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
	lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
	lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = ["lime","app","Application"];
lime_app_Application.current = null;
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	config: null
	,modules: null
	,preloader: null
	,onUpdate: null
	,renderer: null
	,renderers: null
	,window: null
	,windows: null
	,backend: null
	,windowByID: null
	,addModule: function(module) {
		this.modules.push(module);
		if(this.windows.length > 0) {
			var _g = 0;
			var _g1 = this.windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				module.onWindowCreate($window);
			}
			if(this.preloader == null || this.preloader.complete) module.onPreloadComplete();
		}
	}
	,addRenderer: function(renderer) {
		renderer.onRender.add((function(f,a1) {
			return function() {
				f(a1);
			};
		})($bind(this,this.render),renderer));
		renderer.onContextLost.add((function(f1,a11) {
			return function() {
				f1(a11);
			};
		})($bind(this,this.onRenderContextLost),renderer));
		renderer.onContextRestored.add((function(f2,a12) {
			return function(a2) {
				f2(a12,a2);
			};
		})($bind(this,this.onRenderContextRestored),renderer));
		this.renderers.push(renderer);
	}
	,create: function(config) {
		this.config = config;
		this.backend.create(config);
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) this.backend.setFrameRate(config.fps);
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g = 0;
				var _g1 = config.windows;
				while(_g < _g1.length) {
					var windowConfig = _g1[_g];
					++_g;
					var $window = new lime_ui_Window(windowConfig);
					this.createWindow($window);
					break;
				}
			}
			if(this.preloader == null || this.preloader.complete) this.onPreloadComplete();
		}
	}
	,createWindow: function(window) {
		window.onActivate.add((function(f,a1) {
			return function() {
				f(a1);
			};
		})($bind(this,this.onWindowActivate),window));
		window.onClose.add((function(f1,a11) {
			return function() {
				f1(a11);
			};
		})($bind(this,this.onWindowClose),window));
		window.onCreate.add((function(f2,a12) {
			return function() {
				f2(a12);
			};
		})($bind(this,this.onWindowCreate),window));
		window.onDeactivate.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onWindowDeactivate),window));
		window.onEnter.add((function(f4,a14) {
			return function() {
				f4(a14);
			};
		})($bind(this,this.onWindowEnter),window));
		window.onFocusIn.add((function(f5,a15) {
			return function() {
				f5(a15);
			};
		})($bind(this,this.onWindowFocusIn),window));
		window.onFocusOut.add((function(f6,a16) {
			return function() {
				f6(a16);
			};
		})($bind(this,this.onWindowFocusOut),window));
		window.onFullscreen.add((function(f7,a17) {
			return function() {
				f7(a17);
			};
		})($bind(this,this.onWindowFullscreen),window));
		window.onKeyDown.add((function(f8,a18) {
			return function(a2,a3) {
				f8(a18,a2,a3);
			};
		})($bind(this,this.onKeyDown),window));
		window.onKeyUp.add((function(f9,a19) {
			return function(a21,a31) {
				f9(a19,a21,a31);
			};
		})($bind(this,this.onKeyUp),window));
		window.onLeave.add((function(f10,a110) {
			return function() {
				f10(a110);
			};
		})($bind(this,this.onWindowLeave),window));
		window.onMinimize.add((function(f11,a111) {
			return function() {
				f11(a111);
			};
		})($bind(this,this.onWindowMinimize),window));
		window.onMouseDown.add((function(f12,a112) {
			return function(x,y,a22) {
				f12(a112,x,y,a22);
			};
		})($bind(this,this.onMouseDown),window));
		window.onMouseMove.add((function(f13,a113) {
			return function(x1,y1) {
				f13(a113,x1,y1);
			};
		})($bind(this,this.onMouseMove),window));
		window.onMouseMoveRelative.add((function(f14,a114) {
			return function(x2,y2) {
				f14(a114,x2,y2);
			};
		})($bind(this,this.onMouseMoveRelative),window));
		window.onMouseUp.add((function(f15,a115) {
			return function(x3,y3,a23) {
				f15(a115,x3,y3,a23);
			};
		})($bind(this,this.onMouseUp),window));
		window.onMouseWheel.add((function(f16,a116) {
			return function(a24,a32) {
				f16(a116,a24,a32);
			};
		})($bind(this,this.onMouseWheel),window));
		window.onMove.add((function(f17,a117) {
			return function(x4,y4) {
				f17(a117,x4,y4);
			};
		})($bind(this,this.onWindowMove),window));
		window.onResize.add((function(f18,a118) {
			return function(a25,a33) {
				f18(a118,a25,a33);
			};
		})($bind(this,this.onWindowResize),window));
		window.onRestore.add((function(f19,a119) {
			return function() {
				f19(a119);
			};
		})($bind(this,this.onWindowRestore),window));
		window.onTextEdit.add((function(f20,a120) {
			return function(a26,a34,a4) {
				f20(a120,a26,a34,a4);
			};
		})($bind(this,this.onTextEdit),window));
		window.onTextInput.add((function(f21,a121) {
			return function(a27) {
				f21(a121,a27);
			};
		})($bind(this,this.onTextInput),window));
		if(window.renderer == null) {
			var renderer = new lime_graphics_Renderer(window);
			this.addRenderer(renderer);
		}
		window.create(this);
		this.windows.push(window);
		this.windowByID.h[window.id] = window;
		window.onCreate.dispatch();
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.backend.exec();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadAxisMove(gamepad,axis,value);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonDown(gamepad,button);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonUp(gamepad,button);
		}
	}
	,onGamepadConnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadConnect(gamepad);
		}
	}
	,onGamepadDisconnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadDisconnect(gamepad);
		}
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickAxisMove(joystick,axis,value);
		}
	}
	,onJoystickButtonDown: function(joystick,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickButtonDown(joystick,button);
		}
	}
	,onJoystickButtonUp: function(joystick,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickButtonUp(joystick,button);
		}
	}
	,onJoystickConnect: function(joystick) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickConnect(joystick);
		}
	}
	,onJoystickDisconnect: function(joystick) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickDisconnect(joystick);
		}
	}
	,onJoystickHatMove: function(joystick,hat,position) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickHatMove(joystick,hat,position);
		}
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickTrackballMove(joystick,trackball,value);
		}
	}
	,onKeyDown: function(window,keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyDown(window,keyCode,modifier);
		}
	}
	,onKeyUp: function(window,keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyUp(window,keyCode,modifier);
		}
	}
	,onModuleExit: function(code) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onModuleExit(code);
		}
		this.backend.exit();
	}
	,onMouseDown: function(window,x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseDown(window,x,y,button);
		}
	}
	,onMouseMove: function(window,x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMove(window,x,y);
		}
	}
	,onMouseMoveRelative: function(window,x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMoveRelative(window,x,y);
		}
	}
	,onMouseUp: function(window,x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseUp(window,x,y,button);
		}
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseWheel(window,deltaX,deltaY);
		}
	}
	,onPreloadComplete: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onPreloadComplete();
		}
	}
	,onPreloadProgress: function(loaded,total) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onPreloadProgress(loaded,total);
		}
	}
	,onRenderContextLost: function(renderer) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextLost(renderer);
		}
	}
	,onRenderContextRestored: function(renderer,context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextRestored(renderer,context);
		}
	}
	,onTextEdit: function(window,text,start,length) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextEdit(window,text,start,length);
		}
	}
	,onTextInput: function(window,text) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextInput(window,text);
		}
	}
	,onTouchEnd: function(touch) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchEnd(touch);
		}
	}
	,onTouchMove: function(touch) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchMove(touch);
		}
	}
	,onTouchStart: function(touch) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchStart(touch);
		}
	}
	,onWindowActivate: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowActivate(window);
		}
	}
	,onWindowClose: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowClose(window);
		}
		this.removeWindow(window);
	}
	,onWindowCreate: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowCreate(window);
		}
	}
	,onWindowDeactivate: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowDeactivate(window);
		}
	}
	,onWindowEnter: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowEnter(window);
		}
	}
	,onWindowFocusIn: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusIn(window);
		}
	}
	,onWindowFocusOut: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusOut(window);
		}
	}
	,onWindowFullscreen: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFullscreen(window);
		}
	}
	,onWindowLeave: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowLeave(window);
		}
	}
	,onWindowMinimize: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMinimize(window);
		}
	}
	,onWindowMove: function(window,x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMove(window,x,y);
		}
	}
	,onWindowResize: function(window,width,height) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowResize(window,width,height);
		}
	}
	,onWindowRestore: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowRestore(window);
		}
	}
	,removeModule: function(module) {
		if(module != null) {
			module.onModuleExit(0);
			HxOverrides.remove(this.modules,module);
		}
	}
	,removeRenderer: function(renderer) {
		if(renderer != null && HxOverrides.indexOf(this.renderers,renderer,0) > -1) HxOverrides.remove(this.renderers,renderer);
	}
	,removeWindow: function(window) {
		if(window != null && this.windowByID.h.hasOwnProperty(window.id)) {
			HxOverrides.remove(this.windows,window);
			this.windowByID.remove(window.id);
			window.close();
			if(this.windows[0] == window) this.window = null;
		}
	}
	,render: function(renderer) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.render(renderer);
		}
	}
	,setPreloader: function(preloader) {
		if(this.preloader != null) {
			this.preloader.onProgress.remove($bind(this,this.onPreloadProgress));
			this.preloader.onComplete.remove($bind(this,this.onPreloadComplete));
		}
		this.preloader = preloader;
		if(preloader.complete) this.onPreloadComplete(); else {
			preloader.onProgress.add($bind(this,this.onPreloadProgress));
			preloader.onComplete.add($bind(this,this.onPreloadComplete));
		}
	}
	,update: function(deltaTime) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.update(deltaTime);
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		gamepad.onAxisMove.add((function(f,a1) {
			return function(a2,a3) {
				f(a1,a2,a3);
			};
		})($bind(this,this.onGamepadAxisMove),gamepad));
		gamepad.onButtonDown.add((function(f1,a11) {
			return function(a21) {
				f1(a11,a21);
			};
		})($bind(this,this.onGamepadButtonDown),gamepad));
		gamepad.onButtonUp.add((function(f2,a12) {
			return function(a22) {
				f2(a12,a22);
			};
		})($bind(this,this.onGamepadButtonUp),gamepad));
		gamepad.onDisconnect.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onGamepadDisconnect),gamepad));
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		joystick.onAxisMove.add((function(f,a1) {
			return function(a2,a3) {
				f(a1,a2,a3);
			};
		})($bind(this,this.onJoystickAxisMove),joystick));
		joystick.onButtonDown.add((function(f1,a11) {
			return function(a21) {
				f1(a11,a21);
			};
		})($bind(this,this.onJoystickButtonDown),joystick));
		joystick.onButtonUp.add((function(f2,a12) {
			return function(a22) {
				f2(a12,a22);
			};
		})($bind(this,this.onJoystickButtonUp),joystick));
		joystick.onDisconnect.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onJoystickDisconnect),joystick));
		joystick.onHatMove.add((function(f4,a14) {
			return function(a23,a31) {
				f4(a14,a23,a31);
			};
		})($bind(this,this.onJoystickHatMove),joystick));
		joystick.onTrackballMove.add((function(f5,a15) {
			return function(a24,a32) {
				f5(a15,a24,a32);
			};
		})($bind(this,this.onJoystickTrackballMove),joystick));
	}
	,get_frameRate: function() {
		return this.backend.getFrameRate();
	}
	,set_frameRate: function(value) {
		return this.backend.setFrameRate(value);
	}
	,get_renderer: function() {
		return this.renderers[0];
	}
	,get_window: function() {
		return this.windows[0];
	}
	,__class__: lime_app_Application
	,__properties__: {get_window:"get_window",get_renderer:"get_renderer",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate"}
});
var lime_app_Event = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event"] = lime_app_Event;
lime_app_Event.__name__ = ["lime","app","Event"];
lime_app_Event.prototype = {
	canceled: null
	,__listeners: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,dispatch: null
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__class__: lime_app_Event
};
var lime_app_Event_$Dynamic_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Dynamic_Void"] = lime_app_Event_$Dynamic_$Void;
lime_app_Event_$Dynamic_$Void.__name__ = ["lime","app","Event_Dynamic_Void"];
lime_app_Event_$Dynamic_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Dynamic_$Void
};
var lime_app_Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Float_Float_Int_Void"] = lime_app_Event_$Float_$Float_$Int_$Void;
lime_app_Event_$Float_$Float_$Int_$Void.__name__ = ["lime","app","Event_Float_Float_Int_Void"];
lime_app_Event_$Float_$Float_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Float_$Float_$Int_$Void
};
var lime_app_Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Float_Float_Void"] = lime_app_Event_$Float_$Float_$Void;
lime_app_Event_$Float_$Float_$Void.__name__ = ["lime","app","Event_Float_Float_Void"];
lime_app_Event_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Float_$Float_$Void
};
var lime_app_Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Int_Float_Void"] = lime_app_Event_$Int_$Float_$Void;
lime_app_Event_$Int_$Float_$Void.__name__ = ["lime","app","Event_Int_Float_Void"];
lime_app_Event_$Int_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Int_$Float_$Void
};
var lime_app_Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Int_Int_Void"] = lime_app_Event_$Int_$Int_$Void;
lime_app_Event_$Int_$Int_$Void.__name__ = ["lime","app","Event_Int_Int_Void"];
lime_app_Event_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Int_$Int_$Void
};
var lime_app_Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Int_Void"] = lime_app_Event_$Int_$Void;
lime_app_Event_$Int_$Void.__name__ = ["lime","app","Event_Int_Void"];
lime_app_Event_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Int_$Void
};
var lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = ["lime","app","Event_Int_lime_ui_JoystickHatPosition_Void"];
lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app_Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_String_Int_Int_Void"] = lime_app_Event_$String_$Int_$Int_$Void;
lime_app_Event_$String_$Int_$Int_$Void.__name__ = ["lime","app","Event_String_Int_Int_Void"];
lime_app_Event_$String_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$String_$Int_$Int_$Void
};
var lime_app_Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_String_Void"] = lime_app_Event_$String_$Void;
lime_app_Event_$String_$Void.__name__ = ["lime","app","Event_String_Void"];
lime_app_Event_$String_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$String_$Void
};
var lime_app_Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_graphics_RenderContext_Void"] = lime_app_Event_$lime_$graphics_$RenderContext_$Void;
lime_app_Event_$lime_$graphics_$RenderContext_$Void.__name__ = ["lime","app","Event_lime_graphics_RenderContext_Void"];
lime_app_Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_GamepadAxis_Float_Void"] = lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = ["lime","app","Event_lime_ui_GamepadAxis_Float_Void"];
lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app_Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_GamepadButton_Void"] = lime_app_Event_$lime_$ui_$GamepadButton_$Void;
lime_app_Event_$lime_$ui_$GamepadButton_$Void.__name__ = ["lime","app","Event_lime_ui_GamepadButton_Void"];
lime_app_Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app_Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_Gamepad_Void"] = lime_app_Event_$lime_$ui_$Gamepad_$Void;
lime_app_Event_$lime_$ui_$Gamepad_$Void.__name__ = ["lime","app","Event_lime_ui_Gamepad_Void"];
lime_app_Event_$lime_$ui_$Gamepad_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$Gamepad_$Void
};
var lime_app_Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_Joystick_Void"] = lime_app_Event_$lime_$ui_$Joystick_$Void;
lime_app_Event_$lime_$ui_$Joystick_$Void.__name__ = ["lime","app","Event_lime_ui_Joystick_Void"];
lime_app_Event_$lime_$ui_$Joystick_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$Joystick_$Void
};
var lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = ["lime","app","Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"];
lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app_Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_Touch_Void"] = lime_app_Event_$lime_$ui_$Touch_$Void;
lime_app_Event_$lime_$ui_$Touch_$Void.__name__ = ["lime","app","Event_lime_ui_Touch_Void"];
lime_app_Event_$lime_$ui_$Touch_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$Touch_$Void
};
var lime_app_Future = function(work) {
	if(work != null) {
		if(lime_app_Future.__threadPool == null) {
			lime_app_Future.__threadPool = new lime_system_ThreadPool();
			lime_app_Future.__threadPool.doWork.add(lime_app_Future.threadPool_doWork);
			lime_app_Future.__threadPool.onComplete.add(lime_app_Future.threadPool_onComplete);
			lime_app_Future.__threadPool.onError.add(lime_app_Future.threadPool_onError);
		}
		var promise = new lime_app_Promise();
		promise.future = this;
		lime_app_Future.__threadPool.queue({ promise : promise, work : work});
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = ["lime","app","Future"];
lime_app_Future.__threadPool = null;
lime_app_Future.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app_Future.__threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		lime_app_Future.__threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app_Future.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app_Future.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
lime_app_Future.prototype = {
	isCompleted: null
	,value: null
	,__completed: null
	,__completeListeners: null
	,__errored: null
	,__errorListeners: null
	,__errorMessage: null
	,__progressListeners: null
	,onComplete: function(listener) {
		if(listener != null) {
			if(this.__completed) listener(this.value); else if(!this.__errored) {
				if(this.__completeListeners == null) this.__completeListeners = [];
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.__errored) listener(this.__errorMessage); else if(!this.__completed) {
				if(this.__errorListeners == null) this.__errorListeners = [];
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) this.__progressListeners = [];
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,then: function(next) {
		if(this.__completed) return next(this.value); else if(this.__errored) {
			var future = new lime_app_Future();
			future.onError(this.__errorMessage);
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future1 = next(val);
				future1.onError($bind(promise,promise.error));
				future1.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,get_isCompleted: function() {
		return this.__completed || this.__errored;
	}
	,__class__: lime_app_Future
	,__properties__: {get_isCompleted:"get_isCompleted"}
};
var lime_app_Preloader = function() {
	this.total = 0;
	this.loaded = 0;
	this.onProgress = new lime_app_Event_$Int_$Int_$Void();
	this.onComplete = new lime_app_Event_$Void_$Void();
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.app.Preloader"] = lime_app_Preloader;
lime_app_Preloader.__name__ = ["lime","app","Preloader"];
lime_app_Preloader.prototype = {
	complete: null
	,onComplete: null
	,onProgress: null
	,loaded: null
	,total: null
	,create: function(config) {
	}
	,load: function(urls,types) {
		var url = null;
		var cacheVersion = lime_Assets.cache.version;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "IMAGE":
				if(!lime_app_Preloader.images.exists(url)) {
					var image = new Image();
					lime_app_Preloader.images.set(url,image);
					image.onload = $bind(this,this.image_onLoad);
					image.src = url + "?" + cacheVersion;
					this.total++;
				}
				break;
			case "BINARY":
				if(!lime_app_Preloader.loaders.exists(url)) {
					var loader = new lime_net_HTTPRequest();
					lime_app_Preloader.loaders.set(url,loader);
					this.total++;
				}
				break;
			case "TEXT":
				if(!lime_app_Preloader.loaders.exists(url)) {
					var loader1 = new lime_net_HTTPRequest();
					lime_app_Preloader.loaders.set(url,loader1);
					this.total++;
				}
				break;
			case "FONT":
				this.total++;
				this.loadFont(url);
				break;
			default:
			}
		}
		var $it0 = lime_app_Preloader.loaders.keys();
		while( $it0.hasNext() ) {
			var url1 = $it0.next();
			var loader2 = lime_app_Preloader.loaders.get(url1);
			var future = loader2.load(url1 + "?" + cacheVersion);
			future.onComplete($bind(this,this.loader_onComplete));
		}
		if(this.total == 0) this.start();
	}
	,loadFont: function(font) {
		var _g = this;
		if(window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load))) window.document.fonts.load("1em '" + font + "'").then(function(_) {
			_g.loaded++;
			_g.onProgress.dispatch(_g.loaded,_g.total);
			if(_g.loaded == _g.total) _g.start();
		}); else {
			var node = window.document.createElement("span");
			node.innerHTML = "giItT1WQy@!-/#";
			var style = node.style;
			style.position = "absolute";
			style.left = "-10000px";
			style.top = "-10000px";
			style.fontSize = "300px";
			style.fontFamily = "sans-serif";
			style.fontVariant = "normal";
			style.fontStyle = "normal";
			style.fontWeight = "normal";
			style.letterSpacing = "0";
			window.document.body.appendChild(node);
			var width = node.offsetWidth;
			style.fontFamily = "'" + font + "', sans-serif";
			var interval = null;
			var found = false;
			var checkFont = function() {
				if(node.offsetWidth != width) {
					if(!found) {
						found = true;
						return false;
					}
					_g.loaded++;
					if(interval != null) window.clearInterval(interval);
					node.parentNode.removeChild(node);
					node = null;
					_g.onProgress.dispatch(_g.loaded,_g.total);
					if(_g.loaded == _g.total) _g.start();
					return true;
				}
				return false;
			};
			if(!checkFont()) interval = window.setInterval(checkFont,50);
		}
	}
	,start: function() {
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,image_onLoad: function(_) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,loader_onComplete: function(_) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: lime_app_Preloader
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = ["lime","app","Promise"];
lime_app_Promise.prototype = {
	future: null
	,isCompleted: null
	,complete: function(data) {
		if(!this.future.__errored) {
			this.future.__completed = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.__completed) {
			this.future.__errored = true;
			this.future.__errorMessage = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress) {
		if(!this.future.__errored && !this.future.__completed) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress);
				}
			}
		}
		return this;
	}
	,get_isCompleted: function() {
		return this.future.get_isCompleted();
	}
	,__class__: lime_app_Promise
	,__properties__: {get_isCompleted:"get_isCompleted"}
};
var lime_audio_ALAudioContext = function() {
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.audio.ALAudioContext"] = lime_audio_ALAudioContext;
lime_audio_ALAudioContext.__name__ = ["lime","audio","ALAudioContext"];
lime_audio_ALAudioContext.prototype = {
	NONE: null
	,FALSE: null
	,TRUE: null
	,SOURCE_RELATIVE: null
	,CONE_INNER_ANGLE: null
	,CONE_OUTER_ANGLE: null
	,PITCH: null
	,POSITION: null
	,DIRECTION: null
	,VELOCITY: null
	,LOOPING: null
	,BUFFER: null
	,GAIN: null
	,MIN_GAIN: null
	,MAX_GAIN: null
	,ORIENTATION: null
	,SOURCE_STATE: null
	,INITIAL: null
	,PLAYING: null
	,PAUSED: null
	,STOPPED: null
	,BUFFERS_QUEUED: null
	,BUFFERS_PROCESSED: null
	,REFERENCE_DISTANCE: null
	,ROLLOFF_FACTOR: null
	,CONE_OUTER_GAIN: null
	,MAX_DISTANCE: null
	,SEC_OFFSET: null
	,SAMPLE_OFFSET: null
	,BYTE_OFFSET: null
	,SOURCE_TYPE: null
	,STATIC: null
	,STREAMING: null
	,UNDETERMINED: null
	,FORMAT_MONO8: null
	,FORMAT_MONO16: null
	,FORMAT_STEREO8: null
	,FORMAT_STEREO16: null
	,FREQUENCY: null
	,BITS: null
	,CHANNELS: null
	,SIZE: null
	,NO_ERROR: null
	,INVALID_NAME: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,INVALID_OPERATION: null
	,OUT_OF_MEMORY: null
	,VENDOR: null
	,VERSION: null
	,RENDERER: null
	,EXTENSIONS: null
	,DOPPLER_FACTOR: null
	,SPEED_OF_SOUND: null
	,DOPPLER_VELOCITY: null
	,DISTANCE_MODEL: null
	,INVERSE_DISTANCE: null
	,INVERSE_DISTANCE_CLAMPED: null
	,LINEAR_DISTANCE: null
	,LINEAR_DISTANCE_CLAMPED: null
	,EXPONENT_DISTANCE: null
	,EXPONENT_DISTANCE_CLAMPED: null
	,bufferData: function(buffer,format,data,size,freq) {
		lime_audio_openal_AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime_audio_openal_AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime_audio_openal_AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime_audio_openal_AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime_audio_openal_AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime_audio_openal_AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime_audio_openal_AL.bufferiv(buffer,param,values);
	}
	,deleteBuffer: function(buffer) {
		lime_audio_openal_AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime_audio_openal_AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime_audio_openal_AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime_audio_openal_AL.deleteSources(sources);
	}
	,disable: function(capability) {
		lime_audio_openal_AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime_audio_openal_AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime_audio_openal_AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime_audio_openal_AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime_audio_openal_AL.enable(capability);
	}
	,genSource: function() {
		return lime_audio_openal_AL.genSource();
	}
	,genSources: function(n) {
		return lime_audio_openal_AL.genSources(n);
	}
	,genBuffer: function() {
		return lime_audio_openal_AL.genBuffer();
	}
	,genBuffers: function(n) {
		return lime_audio_openal_AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime_audio_openal_AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime_audio_openal_AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime_audio_openal_AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBufferiv(buffer,param,count);
	}
	,getDouble: function(param) {
		return lime_audio_openal_AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime_audio_openal_AL.getEnumValue(ename);
	}
	,getError: function() {
		return lime_audio_openal_AL.getError();
	}
	,getErrorString: function() {
		return lime_audio_openal_AL.getErrorString();
	}
	,getFloat: function(param) {
		return lime_audio_openal_AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime_audio_openal_AL.getInteger(param);
	}
	,getIntegerv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getIntegerv(param,count);
	}
	,getListener3f: function(param) {
		return lime_audio_openal_AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime_audio_openal_AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime_audio_openal_AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime_audio_openal_AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime_audio_openal_AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime_audio_openal_AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime_audio_openal_AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime_audio_openal_AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime_audio_openal_AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getSourceiv(source,param,count);
	}
	,getString: function(param) {
		return lime_audio_openal_AL.getString(param);
	}
	,isBuffer: function(buffer) {
		return lime_audio_openal_AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime_audio_openal_AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime_audio_openal_AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime_audio_openal_AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime_audio_openal_AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime_audio_openal_AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime_audio_openal_AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime_audio_openal_AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime_audio_openal_AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime_audio_openal_AL.listeneriv(param,values);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime_audio_openal_AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime_audio_openal_AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime_audio_openal_AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime_audio_openal_AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime_audio_openal_AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime_audio_openal_AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime_audio_openal_AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime_audio_openal_AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime_audio_openal_AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime_audio_openal_AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime_audio_openal_AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime_audio_openal_AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime_audio_openal_AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime_audio_openal_AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime_audio_openal_AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime_audio_openal_AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime_audio_openal_AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime_audio_openal_AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime_audio_openal_AL.speedOfSound(value);
	}
	,__class__: lime_audio_ALAudioContext
};
var lime_audio_ALCAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.EXTENSIONS = 4102;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_VALUE = 40964;
	this.INVALID_ENUM = 40963;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.NO_ERROR = 0;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.FREQUENCY = 4103;
	this.TRUE = 1;
	this.FALSE = 0;
};
$hxClasses["lime.audio.ALCAudioContext"] = lime_audio_ALCAudioContext;
lime_audio_ALCAudioContext.__name__ = ["lime","audio","ALCAudioContext"];
lime_audio_ALCAudioContext.prototype = {
	FALSE: null
	,TRUE: null
	,FREQUENCY: null
	,REFRESH: null
	,SYNC: null
	,MONO_SOURCES: null
	,STEREO_SOURCES: null
	,NO_ERROR: null
	,INVALID_DEVICE: null
	,INVALID_CONTEXT: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,OUT_OF_MEMORY: null
	,ATTRIBUTES_SIZE: null
	,ALL_ATTRIBUTES: null
	,DEFAULT_DEVICE_SPECIFIER: null
	,DEVICE_SPECIFIER: null
	,EXTENSIONS: null
	,ENUMERATE_ALL_EXT: null
	,DEFAULT_ALL_DEVICES_SPECIFIER: null
	,ALL_DEVICES_SPECIFIER: null
	,closeDevice: function(device) {
		return lime_audio_openal_ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime_audio_openal_ALC.createContext(device,attrlist);
	}
	,destroyContext: function(context) {
		lime_audio_openal_ALC.destroyContext(context);
	}
	,getContextsDevice: function(context) {
		return lime_audio_openal_ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime_audio_openal_ALC.getCurrentContext();
	}
	,getError: function(device) {
		return lime_audio_openal_ALC.getError(device);
	}
	,getErrorString: function(device) {
		return lime_audio_openal_ALC.getErrorString(device);
	}
	,getIntegerv: function(device,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_ALC.getIntegerv(device,param,count);
	}
	,getString: function(device,param) {
		return lime_audio_openal_ALC.getString(device,param);
	}
	,makeContextCurrent: function(context) {
		return lime_audio_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_audio_openal_ALC.openDevice(deviceName);
	}
	,processContext: function(context) {
		lime_audio_openal_ALC.processContext(context);
	}
	,suspendContext: function(context) {
		lime_audio_openal_ALC.suspendContext(context);
	}
	,__class__: lime_audio_ALCAudioContext
};
var lime_audio_AudioBuffer = function() {
	this.id = 0;
};
$hxClasses["lime.audio.AudioBuffer"] = lime_audio_AudioBuffer;
lime_audio_AudioBuffer.__name__ = ["lime","audio","AudioBuffer"];
lime_audio_AudioBuffer.fromBytes = function(bytes) {
	return null;
};
lime_audio_AudioBuffer.fromFile = function(path) {
	return null;
};
lime_audio_AudioBuffer.fromURL = function(url,handler) {
	if(url != null && url.indexOf("http://") == -1 && url.indexOf("https://") == -1) handler(lime_audio_AudioBuffer.fromFile(url)); else {
	}
};
lime_audio_AudioBuffer.prototype = {
	bitsPerSample: null
	,channels: null
	,data: null
	,id: null
	,sampleRate: null
	,src: null
	,dispose: function() {
	}
	,__class__: lime_audio_AudioBuffer
};
var lime_audio_AudioContext = $hxClasses["lime.audio.AudioContext"] = { __ename__ : ["lime","audio","AudioContext"], __constructs__ : ["OPENAL","HTML5","WEB","FLASH","CUSTOM"] };
lime_audio_AudioContext.OPENAL = function(alc,al) { var $x = ["OPENAL",0,alc,al]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.HTML5 = function(context) { var $x = ["HTML5",1,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.WEB = function(context) { var $x = ["WEB",2,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.FLASH = function(context) { var $x = ["FLASH",3,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.CUSTOM = function(data) { var $x = ["CUSTOM",4,data]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
var lime_audio_AudioManager = function() { };
$hxClasses["lime.audio.AudioManager"] = lime_audio_AudioManager;
lime_audio_AudioManager.__name__ = ["lime","audio","AudioManager"];
lime_audio_AudioManager.context = null;
lime_audio_AudioManager.init = function(context) {
	if(lime_audio_AudioManager.context == null) {
		if(context == null) try {
			window.AudioContext = window.AudioContext || window.webkitAudioContext;;
			lime_audio_AudioManager.context = lime_audio_AudioContext.WEB(new AudioContext ());
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			lime_audio_AudioManager.context = lime_audio_AudioContext.HTML5(new lime_audio_HTML5AudioContext());
		} else lime_audio_AudioManager.context = context;
	}
};
lime_audio_AudioManager.resume = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.processContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
lime_audio_AudioManager.shutdown = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				var device = alc.getContextsDevice(currentContext);
				alc.makeContextCurrent(null);
				alc.destroyContext(currentContext);
				alc.closeDevice(device);
			}
			break;
		default:
		}
	}
};
lime_audio_AudioManager.suspend = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.suspendContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
var lime_audio_AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) loops = 0;
	if(offset == null) offset = 0;
	this.onComplete = new lime_app_Event_$Void_$Void();
	this.buffer = buffer;
	this.offset = offset;
	if(length != null && length != 0) this.set_length(length);
	this.set_loops(loops);
	this.id = 0;
	if(buffer != null) this.init();
};
$hxClasses["lime.audio.AudioSource"] = lime_audio_AudioSource;
lime_audio_AudioSource.__name__ = ["lime","audio","AudioSource"];
lime_audio_AudioSource.prototype = {
	onComplete: null
	,buffer: null
	,offset: null
	,id: null
	,playing: null
	,pauseTime: null
	,__length: null
	,__loops: null
	,dispose: function() {
		{
			var _g = lime_audio_AudioManager.context;
			switch(_g[1]) {
			case 0:
				var al = _g[3];
				var alc = _g[2];
				if(this.id != 0) al.deleteSource(this.id);
				break;
			default:
			}
		}
	}
	,init: function() {
		{
			var _g = lime_audio_AudioManager.context;
			switch(_g[1]) {
			case 0:
				var al = _g[3];
				var alc = _g[2];
				if(this.buffer.id == 0) {
					this.buffer.id = al.genBuffer();
					var format = 0;
					if(this.buffer.channels == 1) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_MONO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_MONO16;
					} else if(this.buffer.channels == 2) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_STEREO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_STEREO16;
					}
					al.bufferData(this.buffer.id,format,this.buffer.data,this.buffer.data.length,this.buffer.sampleRate);
				}
				this.id = al.genSource();
				al.sourcei(this.id,al.BUFFER,this.buffer.id);
				break;
			default:
			}
		}
	}
	,play: function() {
	}
	,pause: function() {
	}
	,stop: function() {
	}
	,timer_onRun: function() {
	}
	,get_currentTime: function() {
		return 0;
	}
	,set_currentTime: function(value) {
		return this.pauseTime = value;
	}
	,get_gain: function() {
		return 1;
	}
	,set_gain: function(value) {
		return 1;
	}
	,get_length: function() {
		if(this.__length != null) return this.__length;
		return 0;
	}
	,set_length: function(value) {
		return this.__length = value;
	}
	,get_loops: function() {
		return this.__loops;
	}
	,set_loops: function(loops) {
		return this.__loops = loops;
	}
	,__class__: lime_audio_AudioSource
	,__properties__: {set_loops:"set_loops",get_loops:"get_loops",set_length:"set_length",get_length:"get_length",set_gain:"set_gain",get_gain:"get_gain",set_currentTime:"set_currentTime",get_currentTime:"get_currentTime"}
};
var lime_audio_FlashAudioContext = function() {
};
$hxClasses["lime.audio.FlashAudioContext"] = lime_audio_FlashAudioContext;
lime_audio_FlashAudioContext.__name__ = ["lime","audio","FlashAudioContext"];
lime_audio_FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) startPosition = -1;
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0;
		return null;
	}
	,__class__: lime_audio_FlashAudioContext
};
var lime_audio_HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.audio.HTML5AudioContext"] = lime_audio_HTML5AudioContext;
lime_audio_HTML5AudioContext.__name__ = ["lime","audio","HTML5AudioContext"];
lime_audio_HTML5AudioContext.prototype = {
	HAVE_CURRENT_DATA: null
	,HAVE_ENOUGH_DATA: null
	,HAVE_FUTURE_DATA: null
	,HAVE_METADATA: null
	,HAVE_NOTHING: null
	,NETWORK_EMPTY: null
	,NETWORK_IDLE: null
	,NETWORK_LOADING: null
	,NETWORK_NO_SOURCE: null
	,canPlayType: function(buffer,type) {
		if(buffer.src != null) return buffer.src.canPlayType(type);
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime_audio_AudioBuffer();
		buffer.src = new Audio();
		buffer.src.src = urlString;
		return buffer;
	}
	,getAutoplay: function(buffer) {
		if(buffer.src != null) return buffer.src.autoplay;
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.src != null) return buffer.src.buffered;
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.currentSrc;
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.src != null) return buffer.src.currentTime;
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.defaultPlaybackRate;
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.src != null) return buffer.src.duration;
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.src != null) return buffer.src.ended;
		return false;
	}
	,getError: function(buffer) {
		if(buffer.src != null) return buffer.src.error;
		return null;
	}
	,getLoop: function(buffer) {
		if(buffer.src != null) return buffer.src.loop;
		return false;
	}
	,getMuted: function(buffer) {
		if(buffer.src != null) return buffer.src.muted;
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.src != null) return buffer.src.networkState;
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.src != null) return buffer.src.paused;
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.src != null) return buffer.src.played;
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.src != null) return buffer.src.preload;
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.src != null) return buffer.src.readyState;
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.src != null) return buffer.src.seekable;
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.src != null) return buffer.src.seeking;
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.src;
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.src != null) return buffer.src.volume;
		return 1;
	}
	,load: function(buffer) {
		if(buffer.src != null) return buffer.src.load();
	}
	,pause: function(buffer) {
		if(buffer.src != null) return buffer.src.pause();
	}
	,play: function(buffer) {
		if(buffer.src != null) return buffer.src.play();
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.src != null) buffer.src.autoplay = value;
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.src != null) buffer.src.currentTime = value;
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.defaultPlaybackRate = value;
	}
	,setLoop: function(buffer,value) {
		if(buffer.src != null) buffer.src.loop = value;
	}
	,setMuted: function(buffer,value) {
		if(buffer.src != null) buffer.src.muted = value;
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.playbackRate = value;
	}
	,setPreload: function(buffer,value) {
		if(buffer.src != null) buffer.src.preload = value;
	}
	,setSrc: function(buffer,value) {
		if(buffer.src != null) buffer.src.src = value;
	}
	,setVolume: function(buffer,value) {
		if(buffer.src != null) buffer.src.volume = value;
	}
	,__class__: lime_audio_HTML5AudioContext
};
var lime_audio_openal_AL = function() { };
$hxClasses["lime.audio.openal.AL"] = lime_audio_openal_AL;
lime_audio_openal_AL.__name__ = ["lime","audio","openal","AL"];
lime_audio_openal_AL.bufferData = function(buffer,format,data,size,freq) {
};
lime_audio_openal_AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.bufferf = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferfv = function(buffer,param,values) {
};
lime_audio_openal_AL.bufferi = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferiv = function(buffer,param,values) {
};
lime_audio_openal_AL.deleteBuffer = function(buffer) {
};
lime_audio_openal_AL.deleteBuffers = function(buffers) {
};
lime_audio_openal_AL.deleteSource = function(source) {
};
lime_audio_openal_AL.deleteSources = function(sources) {
};
lime_audio_openal_AL.disable = function(capability) {
};
lime_audio_openal_AL.distanceModel = function(distanceModel) {
};
lime_audio_openal_AL.dopplerFactor = function(value) {
};
lime_audio_openal_AL.dopplerVelocity = function(value) {
};
lime_audio_openal_AL.enable = function(capability) {
};
lime_audio_openal_AL.genSource = function() {
	return 0;
};
lime_audio_openal_AL.genSources = function(n) {
	return null;
};
lime_audio_openal_AL.genBuffer = function() {
	return 0;
};
lime_audio_openal_AL.genBuffers = function(n) {
	return null;
};
lime_audio_openal_AL.getBoolean = function(param) {
	return false;
};
lime_audio_openal_AL.getBooleanv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBufferf = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferfv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getBufferi = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferiv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getDouble = function(param) {
	return 0;
};
lime_audio_openal_AL.getDoublev = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getEnumValue = function(ename) {
	return 0;
};
lime_audio_openal_AL.getError = function() {
	return 0;
};
lime_audio_openal_AL.getErrorString = function() {
	var _g = lime_audio_openal_AL.getError();
	switch(_g) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_AL.getFloat = function(param) {
	return 0;
};
lime_audio_openal_AL.getFloatv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getInteger = function(param) {
	return 0;
};
lime_audio_openal_AL.getIntegerv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getListener3f = function(param) {
	return null;
};
lime_audio_openal_AL.getListener3i = function(param) {
	return null;
};
lime_audio_openal_AL.getListenerf = function(param) {
	return 0;
};
lime_audio_openal_AL.getListenerfv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getListeneri = function(param) {
	return 0;
};
lime_audio_openal_AL.getListeneriv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getProcAddress = function(fname) {
	return null;
};
lime_audio_openal_AL.getSource3f = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcef = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSource3i = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcefv = function(source,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getSourcei = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSourceiv = function(source,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getString = function(param) {
	return null;
};
lime_audio_openal_AL.isBuffer = function(buffer) {
	return false;
};
lime_audio_openal_AL.isEnabled = function(capability) {
	return false;
};
lime_audio_openal_AL.isExtensionPresent = function(extname) {
	return false;
};
lime_audio_openal_AL.isSource = function(source) {
	return false;
};
lime_audio_openal_AL.listener3f = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listener3i = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listenerf = function(param,value) {
};
lime_audio_openal_AL.listenerfv = function(param,values) {
};
lime_audio_openal_AL.listeneri = function(param,value) {
};
lime_audio_openal_AL.listeneriv = function(param,values) {
};
lime_audio_openal_AL.source3f = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.source3i = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.sourcef = function(source,param,value) {
};
lime_audio_openal_AL.sourcefv = function(source,param,values) {
};
lime_audio_openal_AL.sourcei = function(source,param,value) {
};
lime_audio_openal_AL.sourceiv = function(source,param,values) {
};
lime_audio_openal_AL.sourcePlay = function(source) {
};
lime_audio_openal_AL.sourcePlayv = function(sources) {
};
lime_audio_openal_AL.sourceStop = function(source) {
};
lime_audio_openal_AL.sourceStopv = function(sources) {
};
lime_audio_openal_AL.sourceRewind = function(source) {
};
lime_audio_openal_AL.sourceRewindv = function(sources) {
};
lime_audio_openal_AL.sourcePause = function(source) {
};
lime_audio_openal_AL.sourcePausev = function(sources) {
};
lime_audio_openal_AL.sourceQueueBuffer = function(source,buffer) {
};
lime_audio_openal_AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime_audio_openal_AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime_audio_openal_AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime_audio_openal_AL.speedOfSound = function(value) {
};
var lime_audio_openal_ALC = function() { };
$hxClasses["lime.audio.openal.ALC"] = lime_audio_openal_ALC;
lime_audio_openal_ALC.__name__ = ["lime","audio","openal","ALC"];
lime_audio_openal_ALC.closeDevice = function(device) {
	return false;
};
lime_audio_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_audio_openal_ALC.destroyContext = function(context) {
};
lime_audio_openal_ALC.getContextsDevice = function(context) {
	return null;
};
lime_audio_openal_ALC.getCurrentContext = function() {
	return null;
};
lime_audio_openal_ALC.getError = function(device) {
	return 0;
};
lime_audio_openal_ALC.getErrorString = function(device) {
	var _g = lime_audio_openal_ALC.getError(device);
	switch(_g) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime_audio_openal_ALC.getString = function(device,param) {
	return null;
};
lime_audio_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_audio_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_audio_openal_ALC.processContext = function(context) {
};
lime_audio_openal_ALC.suspendContext = function(context) {
};
var lime_audio_openal__$ALContext_ALContext_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALContext.ALContext_Impl_"] = lime_audio_openal__$ALContext_ALContext_$Impl_$;
lime_audio_openal__$ALContext_ALContext_$Impl_$.__name__ = ["lime","audio","openal","_ALContext","ALContext_Impl_"];
lime_audio_openal__$ALContext_ALContext_$Impl_$._new = function(handle) {
	return handle;
};
var lime_audio_openal__$ALDevice_ALDevice_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALDevice.ALDevice_Impl_"] = lime_audio_openal__$ALDevice_ALDevice_$Impl_$;
lime_audio_openal__$ALDevice_ALDevice_$Impl_$.__name__ = ["lime","audio","openal","_ALDevice","ALDevice_Impl_"];
lime_audio_openal__$ALDevice_ALDevice_$Impl_$._new = function(handle) {
	return handle;
};
var lime_graphics_ConsoleRenderContext = function() {
};
$hxClasses["lime.graphics.ConsoleRenderContext"] = lime_graphics_ConsoleRenderContext;
lime_graphics_ConsoleRenderContext.__name__ = ["lime","graphics","ConsoleRenderContext"];
lime_graphics_ConsoleRenderContext.prototype = {
	createIndexBuffer: function(indices,count) {
		return new lime_graphics_console_IndexBuffer();
	}
	,createVertexBuffer: function(decl,count) {
		return new lime_graphics_console_VertexBuffer();
	}
	,lookupShader: function(name) {
		return new lime_graphics_console_Shader();
	}
	,clear: function(r,g,b,a,depth,stencil) {
		if(stencil == null) stencil = 0;
		if(depth == null) depth = 1.0;
	}
	,bindShader: function(shader) {
	}
	,setViewport: function(x,y,width,height,nearPlane,farPlane) {
		if(farPlane == null) farPlane = 1.0;
		if(nearPlane == null) nearPlane = 0.0;
	}
	,setVertexShaderConstantF: function(startRegister,vec4,vec4count) {
	}
	,setVertexSource: function(vb) {
	}
	,setIndexSource: function(ib) {
	}
	,draw: function(primitive,startVertex,primitiveCount) {
	}
	,drawIndexed: function(primitive,vertexCount,startIndex,primitiveCount) {
	}
	,get_width: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,__class__: lime_graphics_ConsoleRenderContext
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var lime_graphics_FlashRenderContext = function() {
};
$hxClasses["lime.graphics.FlashRenderContext"] = lime_graphics_FlashRenderContext;
lime_graphics_FlashRenderContext.__name__ = ["lime","graphics","FlashRenderContext"];
lime_graphics_FlashRenderContext.prototype = {
	accessibilityImplementation: null
	,accessibilityProperties: null
	,alpha: null
	,blendMode: null
	,blendShader: null
	,buttonMode: null
	,cacheAsBitmap: null
	,contextMenu: null
	,doubleClickEnabled: null
	,dropTarget: null
	,filters: null
	,focusRect: null
	,graphics: null
	,height: null
	,hitArea: null
	,loaderInfo: null
	,mask: null
	,mouseChildren: null
	,mouseEnabled: null
	,mouseX: null
	,mouseY: null
	,name: null
	,needsSoftKeyboard: null
	,numChildren: null
	,opaqueBackground: null
	,parent: null
	,root: null
	,rotation: null
	,rotationX: null
	,rotationY: null
	,rotationZ: null
	,scale9Grid: null
	,scaleX: null
	,scaleY: null
	,scaleZ: null
	,scrollRect: null
	,softKeyboardInputAreaOfInterest: null
	,soundTransform: null
	,stage: null
	,tabChildren: null
	,tabEnabled: null
	,tabIndex: null
	,textSnapshot: null
	,transform: null
	,useHandCursor: null
	,visible: null
	,width: null
	,x: null
	,y: null
	,z: null
	,addChild: function(child) {
		return null;
	}
	,addChildAt: function(child,index) {
		return null;
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		return false;
	}
	,dispatchEvent: function(event) {
		return false;
	}
	,getBounds: function(targetCoordinateSpace) {
		return null;
	}
	,getChildAt: function(index) {
		return null;
	}
	,getChildByName: function(name) {
		return null;
	}
	,getChildIndex: function(child) {
		return 0;
	}
	,getObjectsUnderPoint: function(point) {
		return null;
	}
	,getRect: function(targetCoordinateSpace) {
		return null;
	}
	,globalToLocal: function(point) {
		return null;
	}
	,globalToLocal3D: function(point) {
		return null;
	}
	,hasEventListener: function(type) {
		return false;
	}
	,hitTestObject: function(obj) {
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		return false;
	}
	,local3DToGlobal: function(point3d) {
		return null;
	}
	,localToGlobal: function(point) {
		return null;
	}
	,removeChild: function(child) {
		return null;
	}
	,removeChildAt: function(index) {
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
	}
	,requestSoftKeyboard: function() {
		return false;
	}
	,setChildIndex: function(child,index) {
	}
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,startTouchDrag: function(touchPointID,lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,stopAllMovieClips: function() {
	}
	,stopDrag: function() {
	}
	,stopTouchDrag: function(touchPointID) {
	}
	,swapChildren: function(child1,child2) {
	}
	,swapChildrenAt: function(index1,index2) {
	}
	,toString: function() {
		return null;
	}
	,willTrigger: function(type) {
		return false;
	}
	,__class__: lime_graphics_FlashRenderContext
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) height = -1;
	if(width == null) width = -1;
	if(offsetY == null) offsetY = 0;
	if(offsetX == null) offsetX = 0;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	if(type == null) {
		if(lime_app_Application.current != null && lime_app_Application.current.renderers[0] != null) {
			var _g = lime_app_Application.current.renderers[0].context;
			switch(_g[1]) {
			case 2:case 1:
				this.type = lime_graphics_ImageType.CANVAS;
				break;
			case 3:
				this.type = lime_graphics_ImageType.FLASH;
				break;
			default:
				this.type = lime_graphics_ImageType.DATA;
			}
		} else this.type = lime_graphics_ImageType.DATA;
	} else this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime_graphics_utils_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null) this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				break;
			case 1:
				this.buffer = new lime_graphics_ImageBuffer((function($this) {
					var $r;
					var elements = width * height * 4;
					var this1;
					if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
					$r = this1;
					return $r;
				}(this)),width,height);
				if(color != null) this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				break;
			case 2:
				break;
			default:
			}
		}
	} else this.__fromImageBuffer(buffer);
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = ["lime","graphics","Image"];
lime_graphics_Image.__base64Encoder = null;
lime_graphics_Image.fromBase64 = function(base64,type,onload) {
	if(base64 == null) return null;
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type,onload);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) return null;
	return bitmapData.image;
};
lime_graphics_Image.fromBytes = function(bytes,onload) {
	if(bytes == null) return null;
	var image = new lime_graphics_Image();
	image.__fromBytes(bytes,onload);
	return image;
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.fromFile = function(path,onload,onerror) {
	var image = new lime_graphics_Image();
	image.__fromFile(path,onload,onerror);
	return image;
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.__base64Encode = function(bytes) {
	var extension;
	var _g = bytes.length % 3;
	switch(_g) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime_graphics_Image.__base64Encoder == null) lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars));
	return lime_graphics_Image.__base64Encoder.encodeBytes(bytes).toString() + extension;
};
lime_graphics_Image.__isJPG = function(bytes) {
	return bytes.b[0] == 255 && bytes.b[1] == 216;
};
lime_graphics_Image.__isPNG = function(bytes) {
	return bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26 && bytes.b[7] == 10;
};
lime_graphics_Image.__isGIF = function(bytes) {
	if(bytes.b[0] == 71 && bytes.b[1] == 73 && bytes.b[2] == 70 && bytes.b[3] == 56) {
		var b = bytes.b[4];
		return (b == 55 || b == 57) && bytes.b[5] == 97;
	}
	return false;
};
lime_graphics_Image.prototype = {
	buffer: null
	,dirty: null
	,height: null
	,offsetX: null
	,offsetY: null
	,rect: null
	,type: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS && this.buffer.__srcImage == null) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
				lime_graphics_utils_ImageCanvasUtil.sync(this,true);
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.dirty = this.dirty;
			return image;
		} else return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) return;
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel[1]) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel[1]) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(this.buffer == null || sourceImage == null) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(this.width <= 0 || this.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) sourceRect.width = this.width - destPoint.x;
		if(destPoint.y + sourceRect.height > this.height) sourceRect.height = this.height - destPoint.y;
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x = -destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y = -destPoint.y;
			destPoint.y = 0;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null?alphaImage.buffer.get_src():null,alphaPoint != null?alphaPoint.__toFlashPoint():null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) quality = 90;
		if(format == null) format = "png";
		switch(format) {
		case "png":
			return lime_graphics_format_PNG.encode(this);
		case "jpg":case "jpeg":
			return lime_graphics_format_JPEG.encode(this,quality);
		case "bmp":
			return lime_graphics_format_BMP.encode(this);
		default:
		}
		return null;
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) return;
			lime_graphics_utils_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color,format) {
		if(this.buffer == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.floodFill(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.floodFill(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,getColorBoundsRect: function(mask,color,findColor,format) {
		if(findColor == null) findColor = true;
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 1:
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 2:
			var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask,color,findColor);
			return new lime_math_Rectangle(rect.x,rect.y,rect.width,rect.height);
		default:
			return null;
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format != null) switch(format) {
			case 1:
				return color;
			case 2:
				var bgra;
				{
					var bgra1 = 0;
					bgra1 = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
					bgra = bgra1;
				}
				return bgra;
			default:
				var rgba;
				{
					var rgba1 = 0;
					rgba1 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba = rgba1;
				}
				return rgba;
			} else {
				var rgba2;
				{
					var rgba3 = 0;
					rgba3 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba2 = rgba3;
				}
				return rgba2;
			}
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format != null) switch(format) {
			case 1:
				return color;
			case 2:
				var bgra;
				{
					var bgra1 = 0;
					bgra1 = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
					bgra = bgra1;
				}
				return bgra;
			default:
				var rgba;
				{
					var rgba1 = 0;
					rgba1 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba = rgba1;
				}
				return rgba;
			} else {
				var rgba2;
				{
					var rgba3 = 0;
					rgba3 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba2 = rgba3;
				}
				return rgba2;
			}
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixels(this,rect,format);
		case 2:
			return null;
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return null;
		}
	}
	,resize: function(newWidth,newHeight) {
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime_graphics_utils_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,scroll: function(x,y) {
		if(this.buffer == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.scroll(this,x,y);
			break;
		case 1:
			this.copyPixels(this,this.get_rect(),new lime_math_Vector2(x,y));
			break;
		case 2:
			this.buffer.__srcBitmapData.scroll(x + this.offsetX,y + this.offsetX);
			break;
		default:
		}
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,argb);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,setPixels: function(rect,bytes,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixels(this,rect,bytes,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixels(this,rect,bytes,format);
			break;
		case 2:
			break;
		default:
		}
	}
	,__clipRect: function(r) {
		if(r == null) return null;
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) return null;
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) return null;
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) return null;
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) return null;
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_g.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.offsetX = 0;
			_g.offsetY = 0;
			_g.width = _g.buffer.width;
			_g.height = _g.buffer.height;
			if(onload != null) onload(_g);
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) type = "image/png"; else if(lime_graphics_Image.__isJPG(bytes)) type = "image/jpeg"; else if(lime_graphics_Image.__isGIF(bytes)) type = "image/gif"; else throw new js__$Boot_HaxeError("Image tried to read PNG/JPG Bytes, but found an invalid header.");
		this.__fromBase64(lime_graphics_Image.__base64Encode(bytes),type,onload);
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		var image = new Image();
		image.onload = function(_) {
			_g.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.width = image.width;
			_g.height = image.height;
			if(onload != null) onload(_g);
		};
		image.onerror = function(_1) {
			if(onerror != null) onerror();
		};
		image.src = path;
		if(image.complete) {
		}
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) this.width = buffer.width;
			if(this.height == -1) this.height = buffer.height;
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.sync(this,false);
			lime_graphics_utils_ImageCanvasUtil.createImageData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime_graphics_utils_ImageDataUtil.setFormat(this,value);
				break;
			default:
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		return this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width && (this.buffer.height != 0 && (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height);
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			var _g = this.type;
			switch(_g[1]) {
			case 0:
				break;
			case 1:
				lime_graphics_utils_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.unmultiplyAlpha(this);
				break;
			default:
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null) lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		if(this.buffer == null) return false;
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) return false;
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",set_src:"set_src",get_src:"get_src",get_rect:"get_rect",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_powerOfTwo:"set_powerOfTwo",get_powerOfTwo:"get_powerOfTwo",set_format:"set_format",get_format:"get_format",set_data:"set_data",get_data:"get_data"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) bitsPerPixel = 32;
	if(height == null) height = 0;
	if(width == null) width = 0;
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	if(format == null) this.format = 0; else this.format = format;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = ["lime","graphics","ImageBuffer"];
lime_graphics_ImageBuffer.prototype = {
	bitsPerPixel: null
	,data: null
	,format: null
	,height: null
	,premultiplied: null
	,transparent: null
	,width: null
	,__srcBitmapData: null
	,__srcCanvas: null
	,__srcContext: null
	,__srcCustom: null
	,__srcImage: null
	,__srcImageData: null
	,clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			var this1;
			if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
			buffer.data = this1;
			var copy;
			var view = this.data;
			var this2;
			if(view != null) this2 = new Uint8Array(view); else this2 = null;
			copy = this2;
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy1);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else buffer.__srcImage = this.__srcImage;
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) return this.__srcImage;
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js_Boot.__instanceof(value,Image)) this.__srcImage = value; else if(js_Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * 4;
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {get_stride:"get_stride",set_src:"set_src",get_src:"get_src"}
};
var lime_graphics_ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : ["lime","graphics","ImageChannel"], __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime_graphics_ImageChannel.RED = ["RED",0];
lime_graphics_ImageChannel.RED.toString = $estr;
lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.GREEN = ["GREEN",1];
lime_graphics_ImageChannel.GREEN.toString = $estr;
lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.BLUE = ["BLUE",2];
lime_graphics_ImageChannel.BLUE.toString = $estr;
lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.ALPHA = ["ALPHA",3];
lime_graphics_ImageChannel.ALPHA.toString = $estr;
lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : ["lime","graphics","ImageType"], __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime_graphics_ImageType.CANVAS = ["CANVAS",0];
lime_graphics_ImageType.CANVAS.toString = $estr;
lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.DATA = ["DATA",1];
lime_graphics_ImageType.DATA.toString = $estr;
lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.FLASH = ["FLASH",2];
lime_graphics_ImageType.FLASH.toString = $estr;
lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.CUSTOM = ["CUSTOM",3];
lime_graphics_ImageType.CUSTOM.toString = $estr;
lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
var lime_graphics_RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__ : ["lime","graphics","RenderContext"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM","NONE"] };
lime_graphics_RenderContext.OPENGL = function(gl) { var $x = ["OPENGL",0,gl]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CANVAS = function(context) { var $x = ["CANVAS",1,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.DOM = function(element) { var $x = ["DOM",2,element]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.FLASH = function(stage) { var $x = ["FLASH",3,stage]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CAIRO = function(cairo) { var $x = ["CAIRO",4,cairo]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CONSOLE = function(context) { var $x = ["CONSOLE",5,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CUSTOM = function(data) { var $x = ["CUSTOM",6,data]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.NONE = ["NONE",7];
lime_graphics_RenderContext.NONE.toString = $estr;
lime_graphics_RenderContext.NONE.__enum__ = lime_graphics_RenderContext;
var lime_graphics_Renderer = function(window) {
	this.onRender = new lime_app_Event_$Void_$Void();
	this.onContextRestored = new lime_app_Event_$lime_$graphics_$RenderContext_$Void();
	this.onContextLost = new lime_app_Event_$Void_$Void();
	this.window = window;
	this.backend = new lime__$backend_html5_HTML5Renderer(this);
	this.window.renderer = this;
};
$hxClasses["lime.graphics.Renderer"] = lime_graphics_Renderer;
lime_graphics_Renderer.__name__ = ["lime","graphics","Renderer"];
lime_graphics_Renderer.prototype = {
	context: null
	,onContextLost: null
	,onContextRestored: null
	,onRender: null
	,type: null
	,window: null
	,backend: null
	,create: function() {
		this.backend.create();
	}
	,flip: function() {
		this.backend.flip();
	}
	,render: function() {
		this.backend.render();
	}
	,__class__: lime_graphics_Renderer
};
var lime_graphics_RendererType = $hxClasses["lime.graphics.RendererType"] = { __ename__ : ["lime","graphics","RendererType"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM"] };
lime_graphics_RendererType.OPENGL = ["OPENGL",0];
lime_graphics_RendererType.OPENGL.toString = $estr;
lime_graphics_RendererType.OPENGL.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CANVAS = ["CANVAS",1];
lime_graphics_RendererType.CANVAS.toString = $estr;
lime_graphics_RendererType.CANVAS.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.DOM = ["DOM",2];
lime_graphics_RendererType.DOM.toString = $estr;
lime_graphics_RendererType.DOM.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.FLASH = ["FLASH",3];
lime_graphics_RendererType.FLASH.toString = $estr;
lime_graphics_RendererType.FLASH.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CAIRO = ["CAIRO",4];
lime_graphics_RendererType.CAIRO.toString = $estr;
lime_graphics_RendererType.CAIRO.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CONSOLE = ["CONSOLE",5];
lime_graphics_RendererType.CONSOLE.toString = $estr;
lime_graphics_RendererType.CONSOLE.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CUSTOM = ["CUSTOM",6];
lime_graphics_RendererType.CUSTOM.toString = $estr;
lime_graphics_RendererType.CUSTOM.__enum__ = lime_graphics_RendererType;
var lime_graphics_cairo_Cairo = function(surface) {
	if(surface != null) {
	}
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = ["lime","graphics","cairo","Cairo"];
lime_graphics_cairo_Cairo.__properties__ = {get_versionString:"get_versionString",get_version:"get_version"}
lime_graphics_cairo_Cairo.version = null;
lime_graphics_cairo_Cairo.versionString = null;
lime_graphics_cairo_Cairo.get_version = function() {
	return 0;
};
lime_graphics_cairo_Cairo.get_versionString = function() {
	return "";
};
lime_graphics_cairo_Cairo.prototype = {
	target: null
	,userData: null
	,handle: null
	,arc: function(xc,yc,radius,angle1,angle2) {
	}
	,arcNegative: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,clipExtents: function(x1,y1,x2,y2) {
	}
	,clipPreserve: function() {
	}
	,closePath: function() {
	}
	,copyPage: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,fill: function() {
	}
	,fillExtents: function(x1,y1,x2,y2) {
	}
	,fillPreserve: function() {
	}
	,identityMatrix: function() {
	}
	,inClip: function(x,y) {
		return false;
	}
	,inFill: function(x,y) {
		return false;
	}
	,inStroke: function(x,y) {
		return false;
	}
	,lineTo: function(x,y) {
	}
	,moveTo: function(x,y) {
	}
	,mask: function(pattern) {
	}
	,maskSurface: function(surface,x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroup: function() {
		return null;
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,pushGroupWithContent: function(content) {
	}
	,recreate: function(surface) {
	}
	,rectangle: function(x,y,width,height) {
	}
	,relCurveTo: function(dx1,dy1,dx2,dy2,dx3,dy3) {
	}
	,relLineTo: function(dx,dy) {
	}
	,relMoveTo: function(dx,dy) {
	}
	,resetClip: function() {
	}
	,restore: function() {
	}
	,save: function() {
	}
	,setFontSize: function(size) {
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceRGBA: function(r,g,b,a) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,showPage: function() {
	}
	,showText: function(utf8) {
	}
	,status: function() {
		return 0;
	}
	,stroke: function() {
	}
	,strokeExtents: function(x1,y1,x2,y2) {
	}
	,strokePreserve: function() {
	}
	,transform: function(matrix) {
	}
	,rotate: function(amount) {
	}
	,scale: function(x,y) {
	}
	,translate: function(x,y) {
	}
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_dash: function() {
		return [];
	}
	,set_dash: function(value) {
		return value;
	}
	,get_dashCount: function() {
		return 0;
	}
	,get_fillRule: function() {
		return 0;
	}
	,set_fillRule: function(value) {
		return value;
	}
	,get_fontFace: function() {
		return 0;
	}
	,set_fontFace: function(value) {
		return value;
	}
	,get_fontOptions: function() {
		return null;
	}
	,set_fontOptions: function(value) {
		return value;
	}
	,get_groupTarget: function() {
		return 0;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,get_lineCap: function() {
		return 0;
	}
	,set_lineCap: function(value) {
		return value;
	}
	,get_lineJoin: function() {
		return 0;
	}
	,set_lineJoin: function(value) {
		return value;
	}
	,get_lineWidth: function() {
		return 0;
	}
	,set_lineWidth: function(value) {
		return value;
	}
	,get_matrix: function() {
		return null;
	}
	,set_matrix: function(value) {
		return value;
	}
	,get_miterLimit: function() {
		return 0;
	}
	,set_miterLimit: function(value) {
		return value;
	}
	,get_operator: function() {
		return 0;
	}
	,set_operator: function(value) {
		return value;
	}
	,get_source: function() {
		return 0;
	}
	,set_source: function(value) {
		return value;
	}
	,get_target: function() {
		return 0;
	}
	,get_tolerance: function() {
		return 0;
	}
	,set_tolerance: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
	,__properties__: {set_tolerance:"set_tolerance",get_tolerance:"get_tolerance",get_target:"get_target",set_source:"set_source",get_source:"get_source",set_operator:"set_operator",get_operator:"get_operator",set_miterLimit:"set_miterLimit",get_miterLimit:"get_miterLimit",set_matrix:"set_matrix",get_matrix:"get_matrix",set_lineWidth:"set_lineWidth",get_lineWidth:"get_lineWidth",set_lineJoin:"set_lineJoin",get_lineJoin:"get_lineJoin",set_lineCap:"set_lineCap",get_lineCap:"get_lineCap",get_hasCurrentPoint:"get_hasCurrentPoint",get_groupTarget:"get_groupTarget",set_fontOptions:"set_fontOptions",get_fontOptions:"get_fontOptions",set_fontFace:"set_fontFace",get_fontFace:"get_fontFace",set_fillRule:"set_fillRule",get_fillRule:"get_fillRule",get_dashCount:"get_dashCount",set_dash:"set_dash",get_dash:"get_dash",get_currentPoint:"get_currentPoint",set_antialias:"set_antialias",get_antialias:"get_antialias"}
};
var lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFTFontFace.CairoFTFontFace_Impl_"] = lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$;
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFTFontFace","CairoFTFontFace_Impl_"];
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$._new = function() {
	return 0;
};
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.create = function(face,loadFlags) {
	return 0;
};
var lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontFace.CairoFontFace_Impl_"] = lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$;
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFontFace","CairoFontFace_Impl_"];
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$._new = function() {
	return null;
};
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.status = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontOptions.CairoFontOptions_Impl_"] = lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$;
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFontOptions","CairoFontOptions_Impl_"];
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__properties__ = {set_subpixelOrder:"set_subpixelOrder",get_subpixelOrder:"get_subpixelOrder",set_hintStyle:"set_hintStyle",get_hintStyle:"get_hintStyle",set_hintMetrics:"set_hintMetrics",get_hintMetrics:"get_hintMetrics",set_antialias:"set_antialias",get_antialias:"get_antialias"}
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$._new = function() {
	return null;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_antialias = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_antialias = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintMetrics = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintMetrics = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintStyle = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintStyle = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_subpixelOrder = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_subpixelOrder = function(this1,value) {
	return value;
};
var lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoImageSurface.CairoImageSurface_Impl_"] = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$;
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoImageSurface","CairoImageSurface_Impl_"];
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__properties__ = {get_width:"get_width",get_stride:"get_stride",get_height:"get_height",get_format:"get_format",get_data:"get_data"}
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$._new = function(format,width,height) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.create = function(data,format,width,height,stride) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage = function(image) {
	return null;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_data = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_format = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_height = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_stride = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_width = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoPattern.CairoPattern_Impl_"] = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$;
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoPattern","CairoPattern_Impl_"];
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__properties__ = {set_matrix:"set_matrix",get_matrix:"get_matrix",set_filter:"set_filter",get_filter:"get_filter",set_extend:"set_extend",get_extend:"get_extend",get_colorStopCount:"get_colorStopCount"}
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$._new = function(handle) {
	return handle;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGB = function(this1,offset,r,g,b) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface = function(surface) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB = function(r,g,b) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA = function(r,g,b,a) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_colorStopCount = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_extend = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_filter = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix = function(this1,value) {
	return value;
};
var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoSurface","CairoSurface_Impl_"];
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush = function(this1) {
};
var lime_graphics_console_IndexBuffer = function() {
};
$hxClasses["lime.graphics.console.IndexBuffer"] = lime_graphics_console_IndexBuffer;
lime_graphics_console_IndexBuffer.__name__ = ["lime","graphics","console","IndexBuffer"];
lime_graphics_console_IndexBuffer.prototype = {
	__class__: lime_graphics_console_IndexBuffer
};
var lime_graphics_console_Primitive = $hxClasses["lime.graphics.console.Primitive"] = { __ename__ : ["lime","graphics","console","Primitive"], __constructs__ : ["Point","Line","LineStrip","Triangle","TriangleStrip"] };
lime_graphics_console_Primitive.Point = ["Point",0];
lime_graphics_console_Primitive.Point.toString = $estr;
lime_graphics_console_Primitive.Point.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Line = ["Line",1];
lime_graphics_console_Primitive.Line.toString = $estr;
lime_graphics_console_Primitive.Line.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.LineStrip = ["LineStrip",2];
lime_graphics_console_Primitive.LineStrip.toString = $estr;
lime_graphics_console_Primitive.LineStrip.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Triangle = ["Triangle",3];
lime_graphics_console_Primitive.Triangle.toString = $estr;
lime_graphics_console_Primitive.Triangle.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.TriangleStrip = ["TriangleStrip",4];
lime_graphics_console_Primitive.TriangleStrip.toString = $estr;
lime_graphics_console_Primitive.TriangleStrip.__enum__ = lime_graphics_console_Primitive;
var lime_graphics_console_Shader = function() {
};
$hxClasses["lime.graphics.console.Shader"] = lime_graphics_console_Shader;
lime_graphics_console_Shader.__name__ = ["lime","graphics","console","Shader"];
lime_graphics_console_Shader.prototype = {
	__class__: lime_graphics_console_Shader
};
var lime_graphics_console_VertexBuffer = function() {
};
$hxClasses["lime.graphics.console.VertexBuffer"] = lime_graphics_console_VertexBuffer;
lime_graphics_console_VertexBuffer.__name__ = ["lime","graphics","console","VertexBuffer"];
lime_graphics_console_VertexBuffer.prototype = {
	lock: function() {
		return new lime_graphics_console_VertexOutput();
	}
	,unlock: function() {
	}
	,__class__: lime_graphics_console_VertexBuffer
};
var lime_graphics_console_VertexOutput = function() {
};
$hxClasses["lime.graphics.console.VertexOutput"] = lime_graphics_console_VertexOutput;
lime_graphics_console_VertexOutput.__name__ = ["lime","graphics","console","VertexOutput"];
lime_graphics_console_VertexOutput.prototype = {
	vec2: function(x,y) {
	}
	,vec3: function(x,y,z) {
	}
	,color: function(r,g,b,a) {
	}
	,__class__: lime_graphics_console_VertexOutput
};
var lime_graphics_format_BMP = function() { };
$hxClasses["lime.graphics.format.BMP"] = lime_graphics_format_BMP;
lime_graphics_format_BMP.__name__ = ["lime","graphics","format","BMP"];
lime_graphics_format_BMP.encode = function(image,type) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	if(type == null) type = lime_graphics_format_BMPType.RGB;
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	if(type != null) switch(type[1]) {
	case 1:
		infoHeaderLength = 108;
		break;
	case 2:
		fileHeaderLength = 0;
		pixelValuesLength += image.width * image.height;
		break;
	case 0:
		pixelValuesLength = image.width * 3 + image.width * 3 % 4 + image.height * 3 + image.height * 3;
		break;
	default:
	} else {
	}
	var data = haxe_io_Bytes.alloc(fileHeaderLength + infoHeaderLength + pixelValuesLength);
	var position = 0;
	if(fileHeaderLength > 0) {
		data.set(position++,66);
		data.set(position++,77);
		data.setInt32(position,data.length);
		position += 4;
		data.setUInt16(position,0);
		position += 2;
		data.setUInt16(position,0);
		position += 2;
		data.setInt32(position,fileHeaderLength + infoHeaderLength);
		position += 4;
	}
	data.setInt32(position,infoHeaderLength);
	position += 4;
	data.setInt32(position,image.width);
	position += 4;
	data.setInt32(position,type == lime_graphics_format_BMPType.ICO?image.height * 2:image.height);
	position += 4;
	data.setUInt16(position,1);
	position += 2;
	data.setUInt16(position,type == lime_graphics_format_BMPType.RGB?24:32);
	position += 2;
	data.setInt32(position,type == lime_graphics_format_BMPType.BITFIELD?3:0);
	position += 4;
	data.setInt32(position,pixelValuesLength);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	if(type == lime_graphics_format_BMPType.BITFIELD) {
		data.setInt32(position,16711680);
		position += 4;
		data.setInt32(position,65280);
		position += 4;
		data.setInt32(position,255);
		position += 4;
		data.setInt32(position,-16777216);
		position += 4;
		data.set(position++,32);
		data.set(position++,110);
		data.set(position++,105);
		data.set(position++,87);
		var _g = 0;
		while(_g < 48) {
			var i = _g++;
			data.set(position++,0);
		}
	}
	var pixels = image.getPixels(new lime_math_Rectangle(0,0,image.width,image.height),1);
	var readPosition = 0;
	var a;
	var r;
	var g;
	var b;
	if(type != null) switch(type[1]) {
	case 1:
		var _g1 = 0;
		var _g2 = image.height;
		while(_g1 < _g2) {
			var y = _g1++;
			readPosition = (image.height - 1 - y) * 4 * image.width;
			var _g3 = 0;
			var _g21 = image.width;
			while(_g3 < _g21) {
				var x = _g3++;
				a = pixels.get(readPosition++);
				r = pixels.get(readPosition++);
				g = pixels.get(readPosition++);
				b = pixels.get(readPosition++);
				data.set(position++,b);
				data.set(position++,g);
				data.set(position++,r);
				data.set(position++,a);
			}
		}
		break;
	case 2:
		var andMask = haxe_io_Bytes.alloc(image.width * image.height);
		var maskPosition = 0;
		var _g11 = 0;
		var _g4 = image.height;
		while(_g11 < _g4) {
			var y1 = _g11++;
			readPosition = (image.height - 1 - y1) * 4 * image.width;
			var _g31 = 0;
			var _g22 = image.width;
			while(_g31 < _g22) {
				var x1 = _g31++;
				a = pixels.get(readPosition++);
				r = pixels.get(readPosition++);
				g = pixels.get(readPosition++);
				b = pixels.get(readPosition++);
				data.set(position++,b);
				data.set(position++,g);
				data.set(position++,r);
				data.set(position++,a);
				andMask.set(maskPosition++,0);
			}
		}
		data.blit(position,andMask,0,image.width * image.height);
		break;
	case 0:
		var _g12 = 0;
		var _g5 = image.height;
		while(_g12 < _g5) {
			var y2 = _g12++;
			readPosition = (image.height - 1 - y2) * 4 * image.width;
			var _g32 = 0;
			var _g23 = image.width;
			while(_g32 < _g23) {
				var x2 = _g32++;
				a = pixels.get(readPosition++);
				r = pixels.get(readPosition++);
				g = pixels.get(readPosition++);
				b = pixels.get(readPosition++);
				data.set(position++,b);
				data.set(position++,g);
				data.set(position++,r);
			}
			var _g33 = 0;
			var _g24 = image.width * 3 % 4;
			while(_g33 < _g24) {
				var i1 = _g33++;
				data.set(position++,0);
			}
		}
		break;
	default:
	} else {
	}
	return data;
};
var lime_graphics_format_BMPType = $hxClasses["lime.graphics.format.BMPType"] = { __ename__ : ["lime","graphics","format","BMPType"], __constructs__ : ["RGB","BITFIELD","ICO"] };
lime_graphics_format_BMPType.RGB = ["RGB",0];
lime_graphics_format_BMPType.RGB.toString = $estr;
lime_graphics_format_BMPType.RGB.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.BITFIELD = ["BITFIELD",1];
lime_graphics_format_BMPType.BITFIELD.toString = $estr;
lime_graphics_format_BMPType.BITFIELD.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.ICO = ["ICO",2];
lime_graphics_format_BMPType.ICO.toString = $estr;
lime_graphics_format_BMPType.ICO.__enum__ = lime_graphics_format_BMPType;
var lime_graphics_format_JPEG = function() { };
$hxClasses["lime.graphics.format.JPEG"] = lime_graphics_format_JPEG;
lime_graphics_format_JPEG.__name__ = ["lime","graphics","format","JPEG"];
lime_graphics_format_JPEG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_JPEG.decodeFile = function(path,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_JPEG.encode = function(image,quality) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/jpeg",quality / 100);
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = haxe_io_Bytes.alloc(buffer.length);
		var _g1 = 0;
		var _g = buffer.length;
		while(_g1 < _g) {
			var i = _g1++;
			bytes.set(i,HxOverrides.cca(buffer,i));
		}
		return bytes;
	}
	return null;
};
var lime_graphics_format_PNG = function() { };
$hxClasses["lime.graphics.format.PNG"] = lime_graphics_format_PNG;
lime_graphics_format_PNG.__name__ = ["lime","graphics","format","PNG"];
lime_graphics_format_PNG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_PNG.decodeFile = function(path,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_PNG.encode = function(image) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	return null;
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = ["lime","graphics","opengl","GL"];
lime_graphics_opengl_GL.__properties__ = {get_version:"get_version"}
lime_graphics_opengl_GL.version = null;
lime_graphics_opengl_GL.context = null;
lime_graphics_opengl_GL.activeTexture = function(texture) {
	lime_graphics_opengl_GL.context.activeTexture(texture);
};
lime_graphics_opengl_GL.attachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.attachShader(program,shader);
};
lime_graphics_opengl_GL.bindAttribLocation = function(program,index,name) {
	lime_graphics_opengl_GL.context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl_GL.bindBuffer = function(target,buffer) {
	lime_graphics_opengl_GL.context.bindBuffer(target,buffer);
};
lime_graphics_opengl_GL.bindFramebuffer = function(target,framebuffer) {
	lime_graphics_opengl_GL.context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl_GL.bindRenderbuffer = function(target,renderbuffer) {
	lime_graphics_opengl_GL.context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl_GL.bindTexture = function(target,texture) {
	lime_graphics_opengl_GL.context.bindTexture(target,texture);
};
lime_graphics_opengl_GL.blendColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.blendEquation = function(mode) {
	lime_graphics_opengl_GL.context.blendEquation(mode);
};
lime_graphics_opengl_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime_graphics_opengl_GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl_GL.blendFunc = function(sfactor,dfactor) {
	lime_graphics_opengl_GL.context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime_graphics_opengl_GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl_GL.bufferData = function(target,data,usage) {
	lime_graphics_opengl_GL.context.bufferData(target,data,usage);
};
lime_graphics_opengl_GL.bufferSubData = function(target,offset,data) {
	lime_graphics_opengl_GL.context.bufferSubData(target,offset,data);
};
lime_graphics_opengl_GL.checkFramebufferStatus = function(target) {
	return lime_graphics_opengl_GL.context.checkFramebufferStatus(target);
};
lime_graphics_opengl_GL.clear = function(mask) {
	lime_graphics_opengl_GL.context.clear(mask);
};
lime_graphics_opengl_GL.clearColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.clearDepth = function(depth) {
	lime_graphics_opengl_GL.context.clearDepth(depth);
};
lime_graphics_opengl_GL.clearStencil = function(s) {
	lime_graphics_opengl_GL.context.clearStencil(s);
};
lime_graphics_opengl_GL.colorMask = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl_GL.compileShader = function(shader) {
	lime_graphics_opengl_GL.context.compileShader(shader);
};
lime_graphics_opengl_GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,data) {
	lime_graphics_opengl_GL.context.compressedTexImage2D(target,level,internalformat,width,height,border,data);
};
lime_graphics_opengl_GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,data) {
	lime_graphics_opengl_GL.context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data);
};
lime_graphics_opengl_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime_graphics_opengl_GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl_GL.createBuffer = function() {
	return lime_graphics_opengl_GL.context.createBuffer();
};
lime_graphics_opengl_GL.createFramebuffer = function() {
	return lime_graphics_opengl_GL.context.createFramebuffer();
};
lime_graphics_opengl_GL.createProgram = function() {
	return lime_graphics_opengl_GL.context.createProgram();
};
lime_graphics_opengl_GL.createRenderbuffer = function() {
	return lime_graphics_opengl_GL.context.createRenderbuffer();
};
lime_graphics_opengl_GL.createShader = function(type) {
	return lime_graphics_opengl_GL.context.createShader(type);
};
lime_graphics_opengl_GL.createTexture = function() {
	return lime_graphics_opengl_GL.context.createTexture();
};
lime_graphics_opengl_GL.cullFace = function(mode) {
	lime_graphics_opengl_GL.context.cullFace(mode);
};
lime_graphics_opengl_GL.deleteBuffer = function(buffer) {
	lime_graphics_opengl_GL.context.deleteBuffer(buffer);
};
lime_graphics_opengl_GL.deleteFramebuffer = function(framebuffer) {
	lime_graphics_opengl_GL.context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.deleteProgram = function(program) {
	lime_graphics_opengl_GL.context.deleteProgram(program);
};
lime_graphics_opengl_GL.deleteRenderbuffer = function(renderbuffer) {
	lime_graphics_opengl_GL.context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.deleteShader = function(shader) {
	lime_graphics_opengl_GL.context.deleteShader(shader);
};
lime_graphics_opengl_GL.deleteTexture = function(texture) {
	lime_graphics_opengl_GL.context.deleteTexture(texture);
};
lime_graphics_opengl_GL.depthFunc = function(func) {
	lime_graphics_opengl_GL.context.depthFunc(func);
};
lime_graphics_opengl_GL.depthMask = function(flag) {
	lime_graphics_opengl_GL.context.depthMask(flag);
};
lime_graphics_opengl_GL.depthRange = function(zNear,zFar) {
	lime_graphics_opengl_GL.context.depthRange(zNear,zFar);
};
lime_graphics_opengl_GL.detachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.detachShader(program,shader);
};
lime_graphics_opengl_GL.disable = function(cap) {
	lime_graphics_opengl_GL.context.disable(cap);
};
lime_graphics_opengl_GL.disableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
};
lime_graphics_opengl_GL.drawArrays = function(mode,first,count) {
	lime_graphics_opengl_GL.context.drawArrays(mode,first,count);
};
lime_graphics_opengl_GL.drawElements = function(mode,count,type,offset) {
	lime_graphics_opengl_GL.context.drawElements(mode,count,type,offset);
};
lime_graphics_opengl_GL.enable = function(cap) {
	lime_graphics_opengl_GL.context.enable(cap);
};
lime_graphics_opengl_GL.enableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
};
lime_graphics_opengl_GL.finish = function() {
	lime_graphics_opengl_GL.context.finish();
};
lime_graphics_opengl_GL.flush = function() {
	lime_graphics_opengl_GL.context.flush();
};
lime_graphics_opengl_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime_graphics_opengl_GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime_graphics_opengl_GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl_GL.frontFace = function(mode) {
	lime_graphics_opengl_GL.context.frontFace(mode);
};
lime_graphics_opengl_GL.generateMipmap = function(target) {
	lime_graphics_opengl_GL.context.generateMipmap(target);
};
lime_graphics_opengl_GL.getActiveAttrib = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveAttrib(program,index);
};
lime_graphics_opengl_GL.getActiveUniform = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveUniform(program,index);
};
lime_graphics_opengl_GL.getAttachedShaders = function(program) {
	return lime_graphics_opengl_GL.context.getAttachedShaders(program);
};
lime_graphics_opengl_GL.getAttribLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getAttribLocation(program,name);
};
lime_graphics_opengl_GL.getBufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getBufferParameter(target,pname);
};
lime_graphics_opengl_GL.getContextAttributes = function() {
	return lime_graphics_opengl_GL.context.getContextAttributes();
};
lime_graphics_opengl_GL.getError = function() {
	return lime_graphics_opengl_GL.context.getError();
};
lime_graphics_opengl_GL.getExtension = function(name) {
	return lime_graphics_opengl_GL.context.getExtension(name);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime_graphics_opengl_GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl_GL.getParameter = function(pname) {
	return lime_graphics_opengl_GL.context.getParameter(pname);
};
lime_graphics_opengl_GL.getProgramInfoLog = function(program) {
	return lime_graphics_opengl_GL.context.getProgramInfoLog(program);
};
lime_graphics_opengl_GL.getProgramParameter = function(program,pname) {
	return lime_graphics_opengl_GL.context.getProgramParameter(program,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl_GL.getShaderInfoLog = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
};
lime_graphics_opengl_GL.getShaderParameter = function(shader,pname) {
	return lime_graphics_opengl_GL.context.getShaderParameter(shader,pname);
};
lime_graphics_opengl_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime_graphics_opengl_GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl_GL.getShaderSource = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderSource(shader);
};
lime_graphics_opengl_GL.getSupportedExtensions = function() {
	return lime_graphics_opengl_GL.context.getSupportedExtensions();
};
lime_graphics_opengl_GL.getTexParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getUniform = function(program,location) {
	return lime_graphics_opengl_GL.context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getUniformLocation(program,name);
};
lime_graphics_opengl_GL.getVertexAttrib = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttrib(index,pname);
};
lime_graphics_opengl_GL.getVertexAttribOffset = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttribOffset(index,pname);
};
lime_graphics_opengl_GL.hint = function(target,mode) {
	lime_graphics_opengl_GL.context.hint(target,mode);
};
lime_graphics_opengl_GL.isBuffer = function(buffer) {
	return lime_graphics_opengl_GL.context.isBuffer(buffer);
};
lime_graphics_opengl_GL.isContextLost = function() {
	return lime_graphics_opengl_GL.context.isContextLost();
};
lime_graphics_opengl_GL.isEnabled = function(cap) {
	return lime_graphics_opengl_GL.context.isEnabled(cap);
};
lime_graphics_opengl_GL.isFramebuffer = function(framebuffer) {
	return lime_graphics_opengl_GL.context.isFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.isProgram = function(program) {
	return lime_graphics_opengl_GL.context.isProgram(program);
};
lime_graphics_opengl_GL.isRenderbuffer = function(renderbuffer) {
	return lime_graphics_opengl_GL.context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.isShader = function(shader) {
	return lime_graphics_opengl_GL.context.isShader(shader);
};
lime_graphics_opengl_GL.isTexture = function(texture) {
	return lime_graphics_opengl_GL.context.isTexture(texture);
};
lime_graphics_opengl_GL.lineWidth = function(width) {
	lime_graphics_opengl_GL.context.lineWidth(width);
};
lime_graphics_opengl_GL.linkProgram = function(program) {
	lime_graphics_opengl_GL.context.linkProgram(program);
};
lime_graphics_opengl_GL.pixelStorei = function(pname,param) {
	lime_graphics_opengl_GL.context.pixelStorei(pname,param);
};
lime_graphics_opengl_GL.polygonOffset = function(factor,units) {
	lime_graphics_opengl_GL.context.polygonOffset(factor,units);
};
lime_graphics_opengl_GL.readPixels = function(x,y,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.readPixels(x,y,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl_GL.sampleCoverage = function(value,invert) {
	lime_graphics_opengl_GL.context.sampleCoverage(value,invert);
};
lime_graphics_opengl_GL.scissor = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.scissor(x,y,width,height);
};
lime_graphics_opengl_GL.shaderSource = function(shader,source) {
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
};
lime_graphics_opengl_GL.stencilFunc = function(func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl_GL.stencilMask = function(mask) {
	lime_graphics_opengl_GL.context.stencilMask(mask);
};
lime_graphics_opengl_GL.stencilMaskSeparate = function(face,mask) {
	lime_graphics_opengl_GL.context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl_GL.stencilOp = function(fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl_GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,pixels) {
	lime_graphics_opengl_GL.context.texImage2D(target,level,internalformat,width,height,border,format,type,pixels);
};
lime_graphics_opengl_GL.texParameterf = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameterf(target,pname,param);
};
lime_graphics_opengl_GL.texParameteri = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameteri(target,pname,param);
};
lime_graphics_opengl_GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.uniform1f = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1f(location,x);
};
lime_graphics_opengl_GL.uniform1fv = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1fv(location,x);
};
lime_graphics_opengl_GL.uniform1i = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1i(location,x);
};
lime_graphics_opengl_GL.uniform1iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform1iv(location,v);
};
lime_graphics_opengl_GL.uniform2f = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2f(location,x,y);
};
lime_graphics_opengl_GL.uniform2fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2fv(location,v);
};
lime_graphics_opengl_GL.uniform2i = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2i(location,x,y);
};
lime_graphics_opengl_GL.uniform2iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2iv(location,v);
};
lime_graphics_opengl_GL.uniform3f = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3f(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3fv(location,v);
};
lime_graphics_opengl_GL.uniform3i = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3i(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3iv(location,v);
};
lime_graphics_opengl_GL.uniform4f = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4f(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4fv(location,v);
};
lime_graphics_opengl_GL.uniform4i = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4i(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4iv(location,v);
};
lime_graphics_opengl_GL.uniformMatrix2fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix2fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix3fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix3fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix4fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix4fv(location,transpose,v);
};
lime_graphics_opengl_GL.useProgram = function(program) {
	lime_graphics_opengl_GL.context.useProgram(program);
};
lime_graphics_opengl_GL.validateProgram = function(program) {
	lime_graphics_opengl_GL.context.validateProgram(program);
};
lime_graphics_opengl_GL.vertexAttrib1f = function(indx,x) {
	lime_graphics_opengl_GL.context.vertexAttrib1f(indx,x);
};
lime_graphics_opengl_GL.vertexAttrib1fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib2f = function(indx,x,y) {
	lime_graphics_opengl_GL.context.vertexAttrib2f(indx,x,y);
};
lime_graphics_opengl_GL.vertexAttrib2fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib3f = function(indx,x,y,z) {
	lime_graphics_opengl_GL.context.vertexAttrib3f(indx,x,y,z);
};
lime_graphics_opengl_GL.vertexAttrib3fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib4f = function(indx,x,y,z,w) {
	lime_graphics_opengl_GL.context.vertexAttrib4f(indx,x,y,z,w);
};
lime_graphics_opengl_GL.vertexAttrib4fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttribPointer = function(indx,size,type,normalized,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
lime_graphics_opengl_GL.viewport = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.viewport(x,y,width,height);
};
lime_graphics_opengl_GL.get_version = function() {
	return 2;
};
var lime_graphics_utils_ImageCanvasUtil = function() { };
$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime_graphics_utils_ImageCanvasUtil;
lime_graphics_utils_ImageCanvasUtil.__name__ = ["lime","graphics","utils","ImageCanvasUtil"];
lime_graphics_utils_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime_graphics_utils_ImageCanvasUtil.convertToCanvas = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.data != null && buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	} else if(buffer.data == null && buffer.__srcImageData != null) buffer.data = buffer.__srcImageData.data;
};
lime_graphics_utils_ImageCanvasUtil.convertToData = function(image) {
	if(image.buffer.data == null) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		lime_graphics_utils_ImageCanvasUtil.sync(image,false);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
};
lime_graphics_utils_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.createImageData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime_graphics_utils_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) return;
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) alphaPoint = new lime_math_Vector2();
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,true);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(sourceImage,false);
	if(sourceImage.buffer.get_src() != null) image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
};
lime_graphics_utils_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) buffer.__srcCanvas.setAttribute("moz-opaque","true");
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		buffer.__srcContext.mozImageSmoothingEnabled = false;
		buffer.__srcContext.msImageSmoothingEnabled = false;
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime_graphics_utils_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height); else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		buffer.data = this1;
	}
};
lime_graphics_utils_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.sync(image,true);
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && (color & 255) == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) a = color >> 24 & 255; else a = 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) a = color & 255; else a = 255;
	}
	image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
	image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
};
lime_graphics_utils_ImageCanvasUtil.floodFill = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.floodFill(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel32(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixels(image,rect,format);
};
lime_graphics_utils_ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.createImageData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime_graphics_utils_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime_graphics_utils_ImageCanvasUtil.sync(image,true);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
};
lime_graphics_utils_ImageCanvasUtil.scroll = function(image,x,y) {
	if(x % image.width == 0 && y % image.height == 0) return;
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.sync(image,true);
	image.buffer.__srcContext.clearRect(x,y,image.width,image.height);
	image.buffer.__srcContext.drawImage(image.buffer.__srcCanvas,x,y);
};
lime_graphics_utils_ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixel(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixels = function(image,rect,bytes,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixels(image,rect,bytes,format);
};
lime_graphics_utils_ImageCanvasUtil.sync = function(image,clear) {
	if(image.dirty && image.buffer.__srcImageData != null && image.type != lime_graphics_ImageType.DATA) {
		image.buffer.__srcContext.putImageData(image.buffer.__srcImageData,0,0);
		image.buffer.data = null;
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcImageData = null;
		image.buffer.data = null;
	}
};
var lime_graphics_utils_ImageDataUtil = function() { };
$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime_graphics_utils_ImageDataUtil;
lime_graphics_utils_ImageDataUtil.__name__ = ["lime","graphics","utils","ImageDataUtil"];
lime_graphics_utils_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) return;
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
	var redTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
	var greenTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
	var blueTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			offset = row + x * 4;
			switch(format) {
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					var r;
					var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >> 24 & 255] & 255) << 24 | (greenTable[pixel >> 16 & 255] & 255) << 16 | (blueTable[pixel >> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) pixel = 0;
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 2:
				data[offset] = pixel >> 8 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 0:
				data[offset] = pixel >> 24 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >> 24 & 255;
				data[offset + 2] = pixel >> 16 & 255;
				data[offset + 3] = pixel >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel[1]) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel[1]) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) return;
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var value = 0;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.offset + srcView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(srcFormat) {
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					var r;
					var idx = Math.round((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					srcPixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					var r1;
					var idx3 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					destPixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >> 24 & 255;
				break;
			case 1:
				value = srcPixel >> 16 & 255;
				break;
			case 2:
				value = srcPixel >> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 1:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 2:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 3:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value & 255;
				value;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) destPixel = 0;
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destData[destPosition] = destPixel >> 8 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 0:
				destData[destPosition] = destPixel >> 24 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >> 24 & 255;
				destData[destPosition + 2] = destPixel >> 16 & 255;
				destData[destPosition + 3] = destPixel >> 8 & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(sourceData == null || destData == null) return;
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	if(!mergeAlpha || !sourceImage.get_transparent()) {
		var _g1 = 0;
		var _g = destView.height;
		while(_g1 < _g) {
			var y = _g1++;
			sourcePosition = sourceView.offset + sourceView.stride * y;
			destPosition = destView.offset + destView.stride * y;
			var _g3 = 0;
			var _g2 = destView.width;
			while(_g3 < _g2) {
				var x = _g3++;
				switch(sourceFormat) {
				case 2:
					sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				case 0:
					sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
					break;
				}
				if(sourcePremultiplied) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
						var r;
						var idx = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
						var g;
						var idx1 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
						var b;
						var idx2 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
						sourcePixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				if(destPremultiplied) {
					if((sourcePixel & 255) == 0) {
						if(sourcePixel != 0) sourcePixel = 0;
					} else if((sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
						sourcePixel = ((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 2:
					destData[destPosition] = sourcePixel >> 8 & 255;
					destData[destPosition + 1] = sourcePixel >> 16 & 255;
					destData[destPosition + 2] = sourcePixel >> 24 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				case 0:
					destData[destPosition] = sourcePixel >> 24 & 255;
					destData[destPosition + 1] = sourcePixel >> 16 & 255;
					destData[destPosition + 2] = sourcePixel >> 8 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				case 1:
					destData[destPosition] = sourcePixel & 255;
					destData[destPosition + 1] = sourcePixel >> 24 & 255;
					destData[destPosition + 2] = sourcePixel >> 16 & 255;
					destData[destPosition + 3] = sourcePixel >> 8 & 255;
					break;
				}
				sourcePosition += 4;
				destPosition += 4;
			}
		}
	} else {
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var destPixel;
		if(alphaImage == null) {
			var _g11 = 0;
			var _g4 = destView.height;
			while(_g11 < _g4) {
				var y1 = _g11++;
				sourcePosition = sourceView.offset + sourceView.stride * y1;
				destPosition = destView.offset + destView.stride * y1;
				var _g31 = 0;
				var _g21 = destView.width;
				while(_g31 < _g21) {
					var x1 = _g31++;
					switch(sourceFormat) {
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							var r1;
							var idx3 = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
							var g1;
							var idx4 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
							var b1;
							var idx5 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
							sourcePixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							var r2;
							var idx6 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx6];
							var g2;
							var idx7 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx7];
							var b2;
							var idx8 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx8];
							destPixel = (r2 & 255) << 24 | (g2 & 255) << 16 | (b2 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					sourceAlpha = (sourcePixel & 255) / 255.0;
					destAlpha = (destPixel & 255) / 255.0;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) destPixel = 0; else {
						var value;
						var idx9 = Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx9];
						destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value;
						var value1;
						var idx10 = Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx10];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value1;
						var value2;
						var idx11 = Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx11];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
						value2;
						var value3;
						var idx12 = Math.round(blendAlpha * 255.0);
						value3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx12];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
						value3;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) destPixel = 0;
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destData[destPosition] = destPixel >> 8 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 0:
						destData[destPosition] = destPixel >> 24 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >> 24 & 255;
						destData[destPosition + 2] = destPixel >> 16 & 255;
						destData[destPosition + 3] = destPixel >> 8 & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		} else {
			if(alphaPoint == null) alphaPoint = new lime_math_Vector2();
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPremultiplied = alphaImage.buffer.premultiplied;
			var alphaView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,destView.width,destView.height));
			var alphaPosition;
			var alphaPixel;
			var _g12 = 0;
			var _g5 = alphaView.height;
			while(_g12 < _g5) {
				var y2 = _g12++;
				sourcePosition = sourceView.offset + sourceView.stride * y2;
				destPosition = destView.offset + destView.stride * y2;
				alphaPosition = alphaView.offset + alphaView.stride * y2;
				var _g32 = 0;
				var _g22 = alphaView.width;
				while(_g32 < _g22) {
					var x2 = _g32++;
					switch(sourceFormat) {
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							var r3;
							var idx13 = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx13];
							var g3;
							var idx14 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx14];
							var b3;
							var idx15 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx15];
							sourcePixel = (r3 & 255) << 24 | (g3 & 255) << 16 | (b3 & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							var r4;
							var idx16 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx16];
							var g4;
							var idx17 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx17];
							var b4;
							var idx18 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx18];
							destPixel = (r4 & 255) << 24 | (g4 & 255) << 16 | (b4 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(alphaFormat) {
					case 2:
						alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					case 0:
						alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					case 1:
						alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
						break;
					}
					if(alphaPremultiplied) {
						if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (alphaPixel & 255);
							var r5;
							var idx19 = Math.round((alphaPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx19];
							var g5;
							var idx20 = Math.round((alphaPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx20];
							var b5;
							var idx21 = Math.round((alphaPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx21];
							alphaPixel = (r5 & 255) << 24 | (g5 & 255) << 16 | (b5 & 255) << 8 | alphaPixel & 255 & 255;
						}
					}
					sourceAlpha = (alphaPixel & 255) / 255;
					destAlpha = (destPixel & 255) / 255;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) destPixel = 0; else {
						var value4;
						var idx22 = Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx22];
						destPixel = (value4 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value4;
						var value5;
						var idx23 = Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx23];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value5 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value5;
						var value6;
						var idx24 = Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value6 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx24];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value6 & 255) << 8 | destPixel & 255 & 255;
						value6;
						var value7;
						var idx25 = Math.round(blendAlpha * 255.0);
						value7 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx25];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value7 & 255;
						value7;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) destPixel = 0;
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destData[destPosition] = destPixel >> 8 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 0:
						destData[destPosition] = destPixel >> 24 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >> 24 & 255;
						destData[destPosition + 2] = destPixel >> 16 & 255;
						destData[destPosition + 3] = destPixel >> 8 & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			fillColor = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			fillColor = rgba1;
		}
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var data = image.buffer.data;
	if(data == null) return;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			var offset = row + x * 4;
			if(premultiplied) {
				if((fillColor & 255) == 0) {
					if(fillColor != 0) fillColor = 0;
				} else if((fillColor & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
					fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
				}
			}
			switch(format1) {
			case 2:
				data[offset] = fillColor >> 8 & 255;
				data[offset + 1] = fillColor >> 16 & 255;
				data[offset + 2] = fillColor >> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 0:
				data[offset] = fillColor >> 24 & 255;
				data[offset + 1] = fillColor >> 16 & 255;
				data[offset + 2] = fillColor >> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >> 24 & 255;
				data[offset + 2] = fillColor >> 16 & 255;
				data[offset + 3] = fillColor >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.floodFill = function(image,x,y,color,format) {
	var data = image.buffer.data;
	if(data == null) return;
	if(format == 1) color = (color & 16777215) << 8 | color >> 24 & 255;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var fillColor = color;
	var hitColor;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	switch(format1) {
	case 2:
		hitColor = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		hitColor = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((hitColor & 255) != 0 && (hitColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (hitColor & 255);
			var r;
			var idx = Math.round((hitColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((hitColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((hitColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			hitColor = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | hitColor & 255 & 255;
		}
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
		255;
		hitColor = (hitColor >> 24 & 255 & 255) << 24 | (hitColor >> 16 & 255 & 255) << 16 | (hitColor >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	if(fillColor == hitColor) return;
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = [];
	queue.push(x);
	queue.push(y);
	var curPointX;
	var curPointY;
	var nextPointX;
	var nextPointY;
	var nextPointOffset;
	var readColor;
	while(queue.length > 0) {
		curPointY = queue.pop();
		curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			nextPointX = curPointX + dx[i];
			nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) continue;
			nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			switch(format1) {
			case 2:
				readColor = (data[nextPointOffset + 2] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 0:
				readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 1:
				readColor = (data[nextPointOffset + 1] & 255) << 24 | (data[nextPointOffset + 2] & 255) << 16 | (data[nextPointOffset + 3] & 255) << 8 | data[nextPointOffset] & 255;
				break;
			}
			if(premultiplied) {
				if((readColor & 255) != 0 && (readColor & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (readColor & 255);
					var r1;
					var idx3 = Math.round((readColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((readColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((readColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					readColor = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | readColor & 255 & 255;
				}
			}
			if(readColor == hitColor) {
				if(premultiplied) {
					if((fillColor & 255) == 0) {
						if(fillColor != 0) fillColor = 0;
					} else if((fillColor & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
						fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
					}
				}
				switch(format1) {
				case 2:
					data[nextPointOffset] = fillColor >> 8 & 255;
					data[nextPointOffset + 1] = fillColor >> 16 & 255;
					data[nextPointOffset + 2] = fillColor >> 24 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 0:
					data[nextPointOffset] = fillColor >> 24 & 255;
					data[nextPointOffset + 1] = fillColor >> 16 & 255;
					data[nextPointOffset + 2] = fillColor >> 8 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 1:
					data[nextPointOffset] = fillColor & 255;
					data[nextPointOffset + 1] = fillColor >> 24 & 255;
					data[nextPointOffset + 2] = fillColor >> 16 & 255;
					data[nextPointOffset + 3] = fillColor >> 8 & 255;
					break;
				}
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.getColorBoundsRect = function(image,mask,color,findColor,format) {
	if(findColor == null) findColor = true;
	var left = image.width + 1;
	var right = 0;
	var top = image.height + 1;
	var bottom = 0;
	var _color;
	var _mask;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			_color = rgba;
		}
		{
			var argb1 = mask;
			var rgba1 = 0;
			rgba1 = (argb1 >> 16 & 255 & 255) << 24 | (argb1 >> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >> 24 & 255 & 255;
			_mask = rgba1;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba2 = 0;
			rgba2 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			_color = rgba2;
		}
		{
			var bgra1 = mask;
			var rgba3 = 0;
			rgba3 = (bgra1 >> 8 & 255 & 255) << 24 | (bgra1 >> 16 & 255 & 255) << 16 | (bgra1 >> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
			_mask = rgba3;
		}
		break;
	default:
		_color = color;
		_mask = mask;
	}
	if(!image.get_transparent()) {
		_color = (_color >> 24 & 255 & 255) << 24 | (_color >> 16 & 255 & 255) << 16 | (_color >> 8 & 255 & 255) << 8 | 255;
		255;
		_mask = (_mask >> 24 & 255 & 255) << 24 | (_mask >> 16 & 255 & 255) << 16 | (_mask >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var pixel;
	var hit;
	var _g1 = 0;
	var _g = image.width;
	while(_g1 < _g) {
		var x = _g1++;
		hit = false;
		var _g3 = 0;
		var _g2 = image.height;
		while(_g3 < _g2) {
			var y = _g3++;
			pixel = image.getPixel32(x,y,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(x < left) left = x;
				break;
			}
		}
		if(hit) break;
	}
	var ix;
	var _g11 = 0;
	var _g4 = image.width;
	while(_g11 < _g4) {
		var x1 = _g11++;
		ix = image.width - 1 - x1;
		hit = false;
		var _g31 = 0;
		var _g21 = image.height;
		while(_g31 < _g21) {
			var y1 = _g31++;
			pixel = image.getPixel32(ix,y1,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(ix > right) right = ix;
				break;
			}
		}
		if(hit) break;
	}
	var _g12 = 0;
	var _g5 = image.height;
	while(_g12 < _g5) {
		var y2 = _g12++;
		hit = false;
		var _g32 = 0;
		var _g22 = image.width;
		while(_g32 < _g22) {
			var x2 = _g32++;
			pixel = image.getPixel32(x2,y2,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(y2 < top) top = y2;
				break;
			}
		}
		if(hit) break;
	}
	var iy;
	var _g13 = 0;
	var _g6 = image.height;
	while(_g13 < _g6) {
		var y3 = _g13++;
		iy = image.height - 1 - y3;
		hit = false;
		var _g33 = 0;
		var _g23 = image.width;
		while(_g33 < _g23) {
			var x3 = _g33++;
			pixel = image.getPixel32(x3,iy,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(iy > bottom) bottom = iy;
				break;
			}
		}
		if(hit) break;
	}
	var w = right - left;
	var h = bottom - top;
	if(w > 0) w++;
	if(h > 0) h++;
	if(w < 0) w = 0;
	if(h < 0) h = 0;
	if(left == right) w = 1;
	if(top == bottom) h = 1;
	if(left > image.width) left = 0;
	if(top > image.height) top = 0;
	return new lime_math_Rectangle(left,top,w,h);
};
lime_graphics_utils_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	switch(image.buffer.format) {
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(image.buffer.premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 0;
	0;
	switch(format) {
	case 1:
		return (function($this) {
			var $r;
			var argb = 0;
			argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
			$r = argb;
			return $r;
		}(this));
	case 2:
		return (function($this) {
			var $r;
			var bgra = 0;
			bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
			$r = bgra;
			return $r;
		}(this));
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	switch(image.buffer.format) {
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(image.buffer.premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 1:
		return (function($this) {
			var $r;
			var argb = 0;
			argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
			$r = argb;
			return $r;
		}(this));
	case 2:
		return (function($this) {
			var $r;
			var bgra = 0;
			bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
			$r = bgra;
			return $r;
		}(this));
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) return null;
	var length = rect.width * rect.height | 0;
	var bytes = haxe_io_Bytes.alloc(length * 4);
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var position;
	var argb;
	var bgra;
	var pixel;
	var destPosition = 0;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		position = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(sourceFormat) {
			case 2:
				pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
				break;
			case 0:
				pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
				break;
			case 1:
				pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					var r;
					var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 1:
				{
					var argb1 = 0;
					argb1 = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
					argb = argb1;
				}
				pixel = argb;
				break;
			case 2:
				{
					var bgra1 = 0;
					bgra1 = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
					bgra = bgra1;
				}
				pixel = bgra;
				break;
			default:
			}
			bytes.set(destPosition++,pixel >> 24 & 255);
			bytes.set(destPosition++,pixel >> 16 & 255);
			bytes.set(destPosition++,pixel >> 8 & 255);
			bytes.set(destPosition++,pixel & 255);
			position += 4;
		}
	}
	return bytes;
};
lime_graphics_utils_ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.buffer.data == null || sourceImage.buffer.data == null) return;
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	var destPixel;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		sourcePosition = sourceView.offset + sourceView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(sourceFormat) {
			case 2:
				sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 0:
				sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 1:
				sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
				break;
			}
			if(sourcePremultiplied) {
				if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
					var r;
					var idx = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					sourcePixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					var r1;
					var idx3 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					destPixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			var value = ((sourcePixel >> 24 & 255) * redMultiplier + (destPixel >> 24 & 255) * (256 - redMultiplier)) / 256 | 0;
			destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			value;
			var value1 = ((sourcePixel >> 16 & 255) * greenMultiplier + (destPixel >> 16 & 255) * (256 - greenMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			value1;
			var value2 = ((sourcePixel >> 8 & 255) * blueMultiplier + (destPixel >> 8 & 255) * (256 - blueMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
			value2;
			var value3 = ((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
			value3;
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) destPixel = 0;
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destData[destPosition] = destPixel >> 8 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 0:
				destData[destPosition] = destPixel >> 24 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >> 24 & 255;
				destData[destPosition + 2] = destPixel >> 16 & 255;
				destData[destPosition + 3] = destPixel >> 8 & 255;
				break;
			}
			sourcePosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) return;
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		var offset = i * 4;
		switch(format) {
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		}
		var offset1 = i * 4;
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
		switch(format) {
		case 2:
			data[offset1] = pixel >> 8 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 0:
			data[offset1] = pixel >> 24 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >> 24 & 255;
			data[offset1 + 2] = pixel >> 16 & 255;
			data[offset1 + 3] = pixel >> 8 & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) return;
	var newBuffer = new lime_graphics_ImageBuffer((function($this) {
		var $r;
		var elements = newWidth * newHeight * 4;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		$r = this1;
		return $r;
	}(this)),newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g = 0;
	while(_g < newHeight) {
		var y = _g++;
		var _g1 = 0;
		while(_g1 < newWidth) {
			var x = _g1++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			if(sourceX < imageWidth - 1) sourceIndexX = sourceIndex + 4; else sourceIndexX = sourceIndex;
			if(sourceY < imageHeight - 1) sourceIndexY = sourceIndex + imageWidth * 4; else sourceIndexY = sourceIndex;
			if(sourceIndexX != sourceIndex) sourceIndexXY = sourceIndexY + 4; else sourceIndexXY = sourceIndexY;
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			var val = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY]) * uRatio) * vRatio);
			newData[index] = val;
			var val1 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio);
			newData[index + 1] = val1;
			var val2 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio);
			newData[index + 2] = val2;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) newData[index + 3] = 0; else newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var newData;
	var elements = newWidth * newHeight * 4;
	var this1;
	if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
	newData = this1;
	var sourceIndex;
	var index;
	var _g1 = 0;
	var _g = buffer.height;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = buffer.width;
		while(_g3 < _g2) {
			var x = _g3++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) return;
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	var _g = image.get_format();
	switch(_g) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		index = i * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			pixel = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			pixel = rgba1;
		}
		break;
	default:
		pixel = color;
	}
	var source = 0;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	switch(image.buffer.format) {
	case 2:
		source = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		source = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		source = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(image.buffer.premultiplied) {
		if((source & 255) != 0 && (source & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (source & 255);
			var r;
			var idx = Math.round((source >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((source >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((source >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			source = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | source & 255 & 255;
		}
	}
	var value = source & 255;
	pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | value & 255;
	value;
	var data1 = image.buffer.data;
	var offset1 = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 2:
		data1[offset1] = pixel >> 8 & 255;
		data1[offset1 + 1] = pixel >> 16 & 255;
		data1[offset1 + 2] = pixel >> 24 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	case 0:
		data1[offset1] = pixel >> 24 & 255;
		data1[offset1 + 1] = pixel >> 16 & 255;
		data1[offset1 + 2] = pixel >> 8 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	case 1:
		data1[offset1] = pixel & 255;
		data1[offset1 + 1] = pixel >> 24 & 255;
		data1[offset1 + 2] = pixel >> 16 & 255;
		data1[offset1 + 3] = pixel >> 8 & 255;
		break;
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			pixel = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			pixel = rgba1;
		}
		break;
	default:
		pixel = color;
	}
	if(!image.get_transparent()) {
		pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 2:
		data[offset] = pixel >> 8 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 0:
		data[offset] = pixel >> 24 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >> 24 & 255;
		data[offset + 2] = pixel >> 16 & 255;
		data[offset + 3] = pixel >> 8 & 255;
		break;
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixels = function(image,rect,bytes,format) {
	if(image.buffer.data == null) return;
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var color;
	var pixel;
	var transparent = image.get_transparent();
	var dataPosition = 0;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			color = bytes.b[dataPosition + 3] | bytes.b[dataPosition + 2] << 8 | bytes.b[dataPosition + 1] << 16 | bytes.b[dataPosition] << 24;
			dataPosition += 4;
			switch(format) {
			case 1:
				{
					var argb = color;
					var rgba = 0;
					rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
					pixel = rgba;
				}
				break;
			case 2:
				{
					var bgra = color;
					var rgba1 = 0;
					rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
					pixel = rgba1;
				}
				break;
			default:
				pixel = color;
			}
			if(!transparent) {
				pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
				255;
			}
			var offset = row + x * 4;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) pixel = 0;
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(sourceFormat) {
			case 2:
				data[offset] = pixel >> 8 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 0:
				data[offset] = pixel >> 24 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >> 24 & 255;
				data[offset + 2] = pixel >> 16 & 255;
				data[offset + 3] = pixel >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) return;
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		var offset = i * 4;
		switch(format) {
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		}
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
		var offset1 = i * 4;
		switch(format) {
		case 2:
			data[offset1] = pixel >> 8 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 0:
			data[offset1] = pixel >> 24 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >> 24 & 255;
			data[offset1 + 2] = pixel >> 16 & 255;
			data[offset1 + 3] = pixel >> 8 & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
};
var lime_graphics_utils__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) this.rect = image.get_rect(); else {
		if(rect.x < 0) rect.x = 0;
		if(rect.y < 0) rect.y = 0;
		if(rect.x + rect.width > image.width) rect.width = image.width - rect.x;
		if(rect.y + rect.height > image.height) rect.height = image.height - rect.y;
		if(rect.width < 0) rect.width = 0;
		if(rect.height < 0) rect.height = 0;
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.x = Math.ceil(this.rect.x);
	this.y = Math.ceil(this.rect.y);
	this.width = Math.floor(this.rect.width);
	this.height = Math.floor(this.rect.height);
	this.offset = this.stride * (this.y + image.offsetY) + (this.x + image.offsetX) * 4;
};
$hxClasses["lime.graphics.utils._ImageDataUtil.ImageDataView"] = lime_graphics_utils__$ImageDataUtil_ImageDataView;
lime_graphics_utils__$ImageDataUtil_ImageDataView.__name__ = ["lime","graphics","utils","_ImageDataUtil","ImageDataView"];
lime_graphics_utils__$ImageDataUtil_ImageDataView.prototype = {
	x: null
	,y: null
	,height: null
	,width: null
	,image: null
	,offset: null
	,rect: null
	,stride: null
	,clip: function(x,y,width,height) {
		this.rect.__contract(x,y,width,height);
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.offset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,row: function(y) {
		return this.offset + this.stride * y;
	}
	,__class__: lime_graphics_utils__$ImageDataUtil_ImageDataView
};
var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = ["lime","math","_ColorMatrix","ColorMatrix_Impl_"];
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__properties__ = {set_redOffset:"set_redOffset",get_redOffset:"get_redOffset",set_redMultiplier:"set_redMultiplier",get_redMultiplier:"get_redMultiplier",set_greenOffset:"set_greenOffset",get_greenOffset:"get_greenOffset",set_greenMultiplier:"set_greenMultiplier",get_greenMultiplier:"get_greenMultiplier",set_color:"set_color",get_color:"get_color",set_blueOffset:"set_blueOffset",get_blueOffset:"get_blueOffset",set_blueMultiplier:"set_blueMultiplier",get_blueMultiplier:"get_blueMultiplier",set_alphaOffset:"set_alphaOffset",get_alphaOffset:"get_alphaOffset",set_alphaMultiplier:"set_alphaMultiplier",get_alphaMultiplier:"get_alphaMultiplier"}
lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 20) this1 = data; else {
		var array = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity;
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		this1 = this2;
	}
	return this1;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.clone = function(this1) {
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new((function($this) {
		var $r;
		var this2;
		if(this1 != null) this2 = new Float32Array(this1); else this2 = null;
		$r = this2;
		return $r;
	}(this)));
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.concat = function(this1,second) {
	var _g = this1;
	_g[0] = _g[0] + second[0];
	var _g1 = this1;
	_g1[6] = _g1[6] + second[6];
	var _g2 = this1;
	_g2[12] = _g2[12] + second[12];
	var _g3 = this1;
	_g3[18] = _g3[18] + second[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[18];
	var offset = this1[19] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[12];
	var offset = this1[14] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[6];
	var offset = this1[9] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[0];
	var offset = this1[4] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform = function(this1) {
	return null;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaMultiplier = function(this1,value) {
	return this1[18] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaOffset = function(this1,value) {
	return this1[19] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueMultiplier = function(this1,value) {
	return this1[12] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueOffset = function(this1,value) {
	return this1[14] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_color = function(this1,value) {
	this1[4] = (value >> 16 & 255) / 255;
	this1[9] = (value >> 8 & 255) / 255;
	this1[14] = (value & 255) / 255;
	this1[0] = 0;
	this1[6] = 0;
	this1[12] = 0;
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color(this1);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenMultiplier = function(this1,value) {
	return this1[6] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenOffset = function(this1,value) {
	return this1[9] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redMultiplier = function(this1) {
	return this1[0];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redMultiplier = function(this1,value) {
	return this1[0] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redOffset = function(this1,value) {
	return this1[4] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = ["lime","math","Matrix3"];
lime_math_Matrix3.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,clone: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(column == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = scaleX;
		this.d = scaleY;
		this.b = rotation;
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(Matrix3) {
		return Matrix3 != null && this.tx == Matrix3.tx && this.ty == Matrix3.ty && this.a == Matrix3.a && this.b == Matrix3.b && this.c == Matrix3.c && this.d == Matrix3.d;
	}
	,deltaTransformVector2: function(Vector2) {
		return new lime_math_Vector2(Vector2.x * this.a + Vector2.y * this.c,Vector2.x * this.b + Vector2.y * this.d);
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
		result.concat(m);
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformVector2: function(pos) {
		return new lime_math_Vector2(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: lime_math_Matrix3
};
var lime_math__$Matrix4_Matrix4_$Impl_$ = {};
$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime_math__$Matrix4_Matrix4_$Impl_$;
lime_math__$Matrix4_Matrix4_$Impl_$.__name__ = ["lime","math","_Matrix4","Matrix4_Impl_"];
lime_math__$Matrix4_Matrix4_$Impl_$.__properties__ = {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
lime_math__$Matrix4_Matrix4_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 16) this1 = data; else {
		var array = lime_math__$Matrix4_Matrix4_$Impl_$.__identity;
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		this1 = this2;
	}
	return this1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,0);
	var m221 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,4);
	var m231 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,8);
	var m241 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,12);
	var m212 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,1);
	var m222 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,5);
	var m232 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,9);
	var m242 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,13);
	var m213 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,2);
	var m223 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,6);
	var m233 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,10);
	var m243 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,14);
	var m214 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,3);
	var m224 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,7);
	var m234 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,11);
	var m244 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendScale = function(this1,xScale,yScale,zScale) {
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		$r = this2;
		return $r;
	}(this))));
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation = function(this1,x,y,z) {
	this1[12] = this1[12] + x;
	this1[13] = this1[13] + y;
	this1[14] = this1[14] + z;
};
lime_math__$Matrix4_Matrix4_$Impl_$.clone = function(this1) {
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var this2;
		if(this1 != null) this2 = new Float32Array(this1); else this2 = null;
		$r = this2;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisFrom = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	var l = array.length - index;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		this1[c] = array[c + index];
	}
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisTo = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	var l = this1.length;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		array[c + index] = this1[c];
	}
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Row " + Std.string(_$UInt_UInt_$Impl_$.toFloat(row)) + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.createABCD = function(a,b,c,d,tx,ty) {
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Row " + row + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyToMatrix4 = function(this1,other) {
	(js_Boot.__cast(other , Float32Array)).set(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.deltaTransformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[3],x * this1[1] + y * this1[5] + z * this1[9] + this1[7],x * this1[2] + y * this1[6] + z * this1[10] + this1[11],0);
};
lime_math__$Matrix4_Matrix4_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolate = function(thisMat,toMat,percent) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime_math__$Matrix4_Matrix4_$Impl_$.set(m,i,lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i) + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i)) * percent);
	}
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var val = this1[i] + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - this1[i]) * percent;
		this1[i] = val;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.invert = function(this1) {
	var d = lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime_math__$Matrix4_Matrix4_$Impl_$.pointAt = function(this1,pos,at,up) {
	if(at == null) at = new lime_math_Vector4(0,0,-1);
	if(up == null) up = new lime_math_Vector4(0,-1,0);
	var dir = new lime_math_Vector4(at.x - pos.x,at.y - pos.y,at.z - pos.z);
	var vup = new lime_math_Vector4(up.x,up.y,up.z,up.w);
	var right;
	dir.normalize();
	vup.normalize();
	var dir2 = new lime_math_Vector4(dir.x,dir.y,dir.z,dir.w);
	dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
	vup = new lime_math_Vector4(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if(dir.x != 0) vup = new lime_math_Vector4(-dir.y,dir.x,0); else vup = new lime_math_Vector4(1,0,0);
	right = new lime_math_Vector4(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
	right.normalize();
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prepend = function(this1,rhs) {
	var m111 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,0);
	var m121 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,4);
	var m131 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,8);
	var m141 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,12);
	var m112 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,1);
	var m122 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,5);
	var m132 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,9);
	var m142 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,13);
	var m113 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,2);
	var m123 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,6);
	var m133 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,10);
	var m143 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,14);
	var m114 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,3);
	var m124 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,7);
	var m134 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,11);
	var m144 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependScale = function(this1,xScale,yScale,zScale) {
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		$r = this2;
		return $r;
	}(this))));
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependTranslation = function(this1,x,y,z) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	lime_math__$Matrix4_Matrix4_$Impl_$.set_position(m,new lime_math_Vector4(x,y,z));
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[12],x * this1[1] + y * this1[5] + z * this1[9] + this1[13],x * this1[2] + y * this1[6] + z * this1[10] + this1[14],x * this1[3] + y * this1[7] + z * this1[11] + this1[15]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVectors = function(this1,ain,aout) {
	var i = 0;
	while(i + 3 <= ain.length) {
		var x = ain[i];
		var y = ain[i + 1];
		var z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.transpose = function(this1) {
	var othis;
	var this2;
	if(this1 != null) this2 = new Float32Array(this1); else this2 = null;
	othis = this2;
	this1[1] = othis[4];
	this1[2] = othis[8];
	this1[3] = othis[12];
	this1[4] = othis[1];
	this1[6] = othis[9];
	this1[7] = othis[13];
	this1[8] = othis[2];
	this1[9] = othis[6];
	this1[11] = othis[14];
	this1[12] = othis[3];
	this1[13] = othis[7];
	this1[14] = othis[11];
};
lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation = function(x,y,z,degrees) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var a1 = new lime_math_Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,0,c + a1.x * a1.x * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,5,c + a1.y * a1.y * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,4,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,8,tmp1 - tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,9,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,6,tmp1 - tmp2);
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_position = function(this1) {
	return new lime_math_Vector4(this1[12],this1[13],this1[14]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$Matrix4_Matrix4_$Impl_$.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = ["lime","math","Rectangle"];
lime_math_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new lime_math_Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new lime_math_Rectangle();
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new lime_math_Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) this.x = x;
		if(this.y > y) this.y = y;
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime_math_Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime_math_Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime_math_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = ["lime","math","Vector2"];
lime_math_Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime_math_Vector2.interpolate = function(pt1,pt2,f) {
	return new lime_math_Vector2(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
lime_math_Vector2.polar = function(len,angle) {
	return new lime_math_Vector2(len * Math.cos(angle),len * Math.sin(angle));
};
lime_math_Vector2.prototype = {
	length: null
	,x: null
	,y: null
	,add: function(v) {
		return new lime_math_Vector2(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new lime_math_Vector2(this.x - v.x,this.y - v.y);
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: lime_math_Vector2
	,__properties__: {get_length:"get_length"}
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) w = 0.;
	if(z == null) z = 0.;
	if(y == null) y = 0.;
	if(x == null) x = 0.;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = ["lime","math","Vector4"];
lime_math_Vector4.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
lime_math_Vector4.X_AXIS = null;
lime_math_Vector4.Y_AXIS = null;
lime_math_Vector4.Z_AXIS = null;
lime_math_Vector4.angleBetween = function(a,b) {
	var a0 = new lime_math_Vector4(a.x,a.y,a.z,a.w);
	a0.normalize();
	var b0 = new lime_math_Vector4(b.x,b.y,b.z,b.w);
	b0.normalize();
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime_math_Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime_math_Vector4.get_X_AXIS = function() {
	return new lime_math_Vector4(1,0,0);
};
lime_math_Vector4.get_Y_AXIS = function() {
	return new lime_math_Vector4(0,1,0);
};
lime_math_Vector4.get_Z_AXIS = function() {
	return new lime_math_Vector4(0,0,1);
};
lime_math_Vector4.prototype = {
	length: null
	,lengthSquared: null
	,w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new lime_math_Vector4(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new lime_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a) {
		return new lime_math_Vector4(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new lime_math_Vector4(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime_math_Vector4
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var lime_math_color__$ARGB_ARGB_$Impl_$ = {};
$hxClasses["lime.math.color._ARGB.ARGB_Impl_"] = lime_math_color__$ARGB_ARGB_$Impl_$;
lime_math_color__$ARGB_ARGB_$Impl_$.__name__ = ["lime","math","color","_ARGB","ARGB_Impl_"];
lime_math_color__$ARGB_ARGB_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$ARGB_ARGB_$Impl_$.a16 = null;
lime_math_color__$ARGB_ARGB_$Impl_$.unmult = null;
lime_math_color__$ARGB_ARGB_$Impl_$._new = function(argb) {
	if(argb == null) argb = 0;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.create = function(a,r,g,b) {
	var argb = 0;
	argb = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 >> 24 & 255) == 0) this1 = 0; else if((this1 >> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
		this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset + 2] & 255;
		break;
	case 0:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 1:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 3] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 1] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >> 24 & 255);
			var r;
			var idx = Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (this1 >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
		}
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.set = function(this1,a,r,g,b) {
	this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >> 24 & 255);
		var r;
		var idx = Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var b;
		var idx2 = Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (this1 >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 >> 24 & 255) == 0) this1 = 0; else if((this1 >> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
			this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	case 0:
		data[offset] = this1 >> 16 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	case 1:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromBGRA = function(bgra) {
	var argb = 0;
	argb = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromRGBA = function(rgba) {
	var argb = 0;
	argb = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_a = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_a = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_b = function(this1) {
	return this1 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_g = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_r = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$BGRA_BGRA_$Impl_$ = {};
$hxClasses["lime.math.color._BGRA.BGRA_Impl_"] = lime_math_color__$BGRA_BGRA_$Impl_$;
lime_math_color__$BGRA_BGRA_$Impl_$.__name__ = ["lime","math","color","_BGRA","BGRA_Impl_"];
lime_math_color__$BGRA_BGRA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$BGRA_BGRA_$Impl_$.a16 = null;
lime_math_color__$BGRA_BGRA_$Impl_$.unmult = null;
lime_math_color__$BGRA_BGRA_$Impl_$._new = function(bgra) {
	if(bgra == null) bgra = 0;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.create = function(b,g,r,a) {
	var bgra = 0;
	bgra = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) this1 = 0; else if((this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 3] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 1] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
			var b;
			var idx = Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var r;
			var idx2 = Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.set = function(this1,b,g,r,a) {
	this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
		var b;
		var idx = Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var r;
		var idx2 = Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 & 255) == 0) this1 = 0; else if((this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 0:
		data[offset] = this1 >> 8 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromARGB = function(argb) {
	var bgra = 0;
	bgra = (argb & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb >> 16 & 255 & 255) << 8 | argb >> 24 & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromRGBA = function(rgba) {
	var bgra = 0;
	bgra = (rgba >> 8 & 255 & 255) << 24 | (rgba >> 16 & 255 & 255) << 16 | (rgba >> 24 & 255 & 255) << 8 | rgba & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_b = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_b = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_g = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_r = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$RGBA_RGBA_$Impl_$ = {};
$hxClasses["lime.math.color._RGBA.RGBA_Impl_"] = lime_math_color__$RGBA_RGBA_$Impl_$;
lime_math_color__$RGBA_RGBA_$Impl_$.__name__ = ["lime","math","color","_RGBA","RGBA_Impl_"];
lime_math_color__$RGBA_RGBA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = null;
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = null;
lime_math_color__$RGBA_RGBA_$Impl_$.a16 = null;
lime_math_color__$RGBA_RGBA_$Impl_$.unmult = null;
lime_math_color__$RGBA_RGBA_$Impl_$._new = function(rgba) {
	if(rgba == null) rgba = 0;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.create = function(r,g,b,a) {
	var rgba = 0;
	rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		if(this1 != 0) this1 = 0;
	} else if((this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
			var r;
			var idx = Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.set = function(this1,r,g,b,a) {
	this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
		var r;
		var idx = Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var b;
		var idx2 = Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 & 255) == 0) {
			if(this1 != 0) this1 = 0;
		} else if((this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 >> 8 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 0:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 24 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 8 & 255;
		break;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromARGB = function(argb) {
	var rgba = 0;
	rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromBGRA = function(bgra) {
	var rgba = 0;
	rgba = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_b = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_g = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_r = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_r = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_net_HTTPRequest = function() {
	this.promise = new lime_app_Promise();
};
$hxClasses["lime.net.HTTPRequest"] = lime_net_HTTPRequest;
lime_net_HTTPRequest.__name__ = ["lime","net","HTTPRequest"];
lime_net_HTTPRequest.prototype = {
	bytes: null
	,bytesLoaded: null
	,bytesTotal: null
	,promise: null
	,load: function(url) {
		var _g = this;
		this.bytesLoaded = 0;
		this.bytesTotal = 0;
		var request = new XMLHttpRequest();
		request.addEventListener("progress",$bind(this,this.request_onProgress),false);
		request.onreadystatechange = function() {
			if(request.readyState != 4) return;
			if(request.status != null && request.status >= 200 && request.status <= 400) {
				_g.bytes = lime_utils_Bytes.ofData(request.response);
				_g.promise.complete(_g.bytes);
			} else _g.promise.error(request.status);
		};
		request.open("GET",url,true);
		request.responseType = "arraybuffer";
		request.send("");
		return this.promise.future;
	}
	,curl_onProgress: function(dltotal,dlnow,uptotal,upnow) {
		if(upnow > this.bytesLoaded || dlnow > this.bytesLoaded || uptotal > this.bytesTotal || dltotal > this.bytesTotal) {
			if(upnow > this.bytesLoaded) this.bytesLoaded = upnow | 0;
			if(dlnow > this.bytesLoaded) this.bytesLoaded = dlnow | 0;
			if(uptotal > this.bytesTotal) this.bytesTotal = uptotal | 0;
			if(dltotal > this.bytesTotal) this.bytesTotal = dltotal | 0;
			this.promise.progress(this.bytesLoaded / this.bytesTotal);
		}
		return 0;
	}
	,curl_onWrite: function(output,size,nmemb) {
		var cacheBytes = this.bytes;
		this.bytes = lime_utils_Bytes.alloc(this.bytes.length + output.length);
		this.bytes.blit(0,cacheBytes,0,cacheBytes.length);
		this.bytes.blit(cacheBytes.length,output,0,output.length);
		return size * nmemb;
	}
	,request_onProgress: function(event) {
		this.promise.progress(event.loaded / event.total);
	}
	,__class__: lime_net_HTTPRequest
};
var lime_net_curl__$CURL_CURL_$Impl_$ = {};
$hxClasses["lime.net.curl._CURL.CURL_Impl_"] = lime_net_curl__$CURL_CURL_$Impl_$;
lime_net_curl__$CURL_CURL_$Impl_$.__name__ = ["lime","net","curl","_CURL","CURL_Impl_"];
lime_net_curl__$CURL_CURL_$Impl_$.getDate = function(date,now) {
	return 0;
};
lime_net_curl__$CURL_CURL_$Impl_$.globalCleanup = function() {
};
lime_net_curl__$CURL_CURL_$Impl_$.globalInit = function(flags) {
	return 0;
};
lime_net_curl__$CURL_CURL_$Impl_$.version = function() {
	return null;
};
lime_net_curl__$CURL_CURL_$Impl_$.versionInfo = function(type) {
	return null;
};
lime_net_curl__$CURL_CURL_$Impl_$.intGt = function(a,b) {
	return a > b;
};
var lime_net_curl_CURLEasy = function() { };
$hxClasses["lime.net.curl.CURLEasy"] = lime_net_curl_CURLEasy;
lime_net_curl_CURLEasy.__name__ = ["lime","net","curl","CURLEasy"];
lime_net_curl_CURLEasy.cleanup = function(handle) {
};
lime_net_curl_CURLEasy.duphandle = function(handle) {
	return 0;
};
lime_net_curl_CURLEasy.escape = function(handle,url,length) {
	return null;
};
lime_net_curl_CURLEasy.getinfo = function(handle,info) {
	return null;
};
lime_net_curl_CURLEasy.init = function() {
	return 0;
};
lime_net_curl_CURLEasy.pause = function(handle,bitMask) {
	return 0;
};
lime_net_curl_CURLEasy.perform = function(handle) {
	return 0;
};
lime_net_curl_CURLEasy.reset = function(handle) {
};
lime_net_curl_CURLEasy.setopt = function(handle,option,parameter) {
	return 0;
};
lime_net_curl_CURLEasy.strerror = function(code) {
	return null;
};
lime_net_curl_CURLEasy.unescape = function(handle,url,inLength,outLength) {
	return null;
};
lime_net_curl_CURLEasy.__writeCallback = function(callback,output,size,nmemb) {
	return 0;
};
var lime_system_BackgroundWorker = function() {
	this.onProgress = new lime_app_Event_$Dynamic_$Void();
	this.onError = new lime_app_Event_$Dynamic_$Void();
	this.onComplete = new lime_app_Event_$Dynamic_$Void();
	this.doWork = new lime_app_Event_$Dynamic_$Void();
};
$hxClasses["lime.system.BackgroundWorker"] = lime_system_BackgroundWorker;
lime_system_BackgroundWorker.__name__ = ["lime","system","BackgroundWorker"];
lime_system_BackgroundWorker.prototype = {
	canceled: null
	,doWork: null
	,onComplete: null
	,onError: null
	,onProgress: null
	,__runMessage: null
	,cancel: function() {
		this.canceled = true;
	}
	,run: function(message) {
		this.canceled = false;
		this.__runMessage = message;
		this.__doWork();
	}
	,sendComplete: function(message) {
		if(!this.canceled) {
			this.canceled = true;
			this.onComplete.dispatch(message);
		}
	}
	,sendError: function(message) {
		if(!this.canceled) {
			this.canceled = true;
			this.onError.dispatch(message);
		}
	}
	,sendProgress: function(message) {
		if(!this.canceled) this.onProgress.dispatch(message);
	}
	,__doWork: function() {
		this.doWork.dispatch(this.__runMessage);
	}
	,__update: function(deltaTime) {
	}
	,__class__: lime_system_BackgroundWorker
};
var lime_system_CFFI = function() { };
$hxClasses["lime.system.CFFI"] = lime_system_CFFI;
lime_system_CFFI.__name__ = ["lime","system","CFFI"];
lime_system_CFFI.available = null;
lime_system_CFFI.enabled = null;
lime_system_CFFI.load = function(library,method,args,lazy) {
	if(lazy == null) lazy = false;
	if(args == null) args = 0;
	if(!lime_system_CFFI.enabled) return Reflect.makeVarArgs(function(__) {
		return { };
	});
	var result = null;
	return result;
};
lime_system_CFFI.__findHaxelib = function(library) {
	return "";
};
lime_system_CFFI.__loaderTrace = function(message) {
};
lime_system_CFFI.__sysName = function() {
	return null;
};
lime_system_CFFI.__tryLoad = function(name,library,func,args) {
	return null;
};
var lime_system__$CFFIPointer_CFFIPointer_$Impl_$ = {};
$hxClasses["lime.system._CFFIPointer.CFFIPointer_Impl_"] = lime_system__$CFFIPointer_CFFIPointer_$Impl_$;
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.__name__ = ["lime","system","_CFFIPointer","CFFIPointer_Impl_"];
lime_system__$CFFIPointer_CFFIPointer_$Impl_$._new = function(handle) {
	return handle;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get = function(this1) {
	if(this1 != null) {
	}
	return 0;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equalsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEquals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEqualsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
var lime_system_Clipboard = function() { };
$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
lime_system_Clipboard.__name__ = ["lime","system","Clipboard"];
lime_system_Clipboard.__properties__ = {set_text:"set_text",get_text:"get_text"}
lime_system_Clipboard.get_text = function() {
	return null;
};
lime_system_Clipboard.set_text = function(value) {
	return null;
};
var lime_system_Display = function() {
};
$hxClasses["lime.system.Display"] = lime_system_Display;
lime_system_Display.__name__ = ["lime","system","Display"];
lime_system_Display.prototype = {
	bounds: null
	,currentMode: null
	,id: null
	,name: null
	,supportedModes: null
	,__class__: lime_system_Display
};
var lime_system_DisplayMode = function(width,height,refreshRate,pixelFormat) {
	this.width = width;
	this.height = height;
	this.refreshRate = refreshRate;
	this.pixelFormat = pixelFormat;
};
$hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
lime_system_DisplayMode.__name__ = ["lime","system","DisplayMode"];
lime_system_DisplayMode.prototype = {
	height: null
	,pixelFormat: null
	,refreshRate: null
	,width: null
	,__class__: lime_system_DisplayMode
};
var lime_system_Endian = $hxClasses["lime.system.Endian"] = { __ename__ : ["lime","system","Endian"], __constructs__ : ["LITTLE_ENDIAN","BIG_ENDIAN"] };
lime_system_Endian.LITTLE_ENDIAN = ["LITTLE_ENDIAN",0];
lime_system_Endian.LITTLE_ENDIAN.toString = $estr;
lime_system_Endian.LITTLE_ENDIAN.__enum__ = lime_system_Endian;
lime_system_Endian.BIG_ENDIAN = ["BIG_ENDIAN",1];
lime_system_Endian.BIG_ENDIAN.toString = $estr;
lime_system_Endian.BIG_ENDIAN.__enum__ = lime_system_Endian;
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = ["lime","system","System"];
lime_system_System.__properties__ = {get_userDirectory:"get_userDirectory",get_numDisplays:"get_numDisplays",get_fontsDirectory:"get_fontsDirectory",get_endianness:"get_endianness",get_documentsDirectory:"get_documentsDirectory",get_desktopDirectory:"get_desktopDirectory",get_applicationStorageDirectory:"get_applicationStorageDirectory",get_applicationDirectory:"get_applicationDirectory",set_allowScreenTimeout:"set_allowScreenTimeout",get_allowScreenTimeout:"get_allowScreenTimeout"}
lime_system_System.applicationDirectory = null;
lime_system_System.applicationStorageDirectory = null;
lime_system_System.desktopDirectory = null;
lime_system_System.disableCFFI = null;
lime_system_System.documentsDirectory = null;
lime_system_System.endianness = null;
lime_system_System.fontsDirectory = null;
lime_system_System.numDisplays = null;
lime_system_System.userDirectory = null;
lime_system_System.embed = $hx_exports.lime.embed = function(element,width,height,background,assetsPrefix) {
	var htmlElement = null;
	if(typeof(element) == "string") htmlElement = window.document.getElementById(js_Boot.__cast(element , String)); else if(element == null) htmlElement = window.document.createElement("div"); else htmlElement = element;
	var color = null;
	if(background != null) {
		background = StringTools.replace(background,"#","");
		if(background.indexOf("0x") > -1) color = Std.parseInt(background); else color = Std.parseInt("0x" + background);
	}
	if(width == null) width = 0;
	if(height == null) height = 0;
	ApplicationMain.config.windows[0].background = color;
	ApplicationMain.config.windows[0].element = htmlElement;
	ApplicationMain.config.windows[0].width = width;
	ApplicationMain.config.windows[0].height = height;
	ApplicationMain.config.assetsPrefix = assetsPrefix;
	ApplicationMain.create();
};
lime_system_System.exit = function(code) {
};
lime_system_System.getDisplay = function(id) {
	if(id == 0) {
		var display = new lime_system_Display();
		display.id = 0;
		display.name = "Generic Display";
		display.currentMode = new lime_system_DisplayMode(window.screen.width,window.screen.height,60,1);
		display.supportedModes = [display.currentMode];
		display.bounds = new lime_math_Rectangle(0,0,display.currentMode.width,display.currentMode.height);
		return display;
	}
	return null;
};
lime_system_System.getTimer = function() {
	return new Date().getTime();
};
lime_system_System.load = function(library,method,args,lazy) {
	if(lazy == null) lazy = false;
	if(args == null) args = 0;
	return lime_system_CFFI.load(library,method,args,lazy);
};
lime_system_System.get_allowScreenTimeout = function() {
	return true;
};
lime_system_System.set_allowScreenTimeout = function(value) {
	return true;
};
lime_system_System.get_applicationDirectory = function() {
	return null;
};
lime_system_System.get_applicationStorageDirectory = function() {
	var company = "MyCompany";
	var file = "MyApplication";
	if(lime_app_Application.current != null && lime_app_Application.current.config != null) {
		if(lime_app_Application.current.config.company != null) company = lime_app_Application.current.config.company;
		if(lime_app_Application.current.config.file != null) file = lime_app_Application.current.config.file;
	}
	return null;
};
lime_system_System.get_desktopDirectory = function() {
	return null;
};
lime_system_System.get_documentsDirectory = function() {
	return null;
};
lime_system_System.get_fontsDirectory = function() {
	return null;
};
lime_system_System.get_numDisplays = function() {
	return 1;
};
lime_system_System.get_userDirectory = function() {
	return null;
};
lime_system_System.get_endianness = function() {
	return lime_system_Endian.LITTLE_ENDIAN;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) maxThreads = 1;
	if(minThreads == null) minThreads = 0;
	this.onProgress = new lime_app_Event_$Dynamic_$Void();
	this.onError = new lime_app_Event_$Dynamic_$Void();
	this.onComplete = new lime_app_Event_$Dynamic_$Void();
	this.doWork = new lime_app_Event_$Dynamic_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = ["lime","system","ThreadPool"];
lime_system_ThreadPool.prototype = {
	currentThreads: null
	,doWork: null
	,maxThreads: null
	,minThreads: null
	,onComplete: null
	,onError: null
	,onProgress: null
	,queue: function(state) {
		this.doWork.dispatch(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,sendProgress: function(state) {
		this.onProgress.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_system__$ThreadPool_ThreadPoolMessageType = $hxClasses["lime.system._ThreadPool.ThreadPoolMessageType"] = { __ename__ : ["lime","system","_ThreadPool","ThreadPoolMessageType"], __constructs__ : ["COMPLETE","ERROR","EXIT","PROGRESS","WORK"] };
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE = ["COMPLETE",0];
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR = ["ERROR",1];
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT = ["EXIT",2];
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS = ["PROGRESS",3];
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK = ["WORK",4];
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
var lime_system__$ThreadPool_ThreadPoolMessage = function(type,state) {
	this.type = type;
	this.state = state;
};
$hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] = lime_system__$ThreadPool_ThreadPoolMessage;
lime_system__$ThreadPool_ThreadPoolMessage.__name__ = ["lime","system","_ThreadPool","ThreadPoolMessage"];
lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
	state: null
	,type: null
	,__class__: lime_system__$ThreadPool_ThreadPoolMessage
};
var lime_text__$Glyph_Glyph_$Impl_$ = {};
$hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime_text__$Glyph_Glyph_$Impl_$;
lime_text__$Glyph_Glyph_$Impl_$.__name__ = ["lime","text","_Glyph","Glyph_Impl_"];
lime_text__$Glyph_Glyph_$Impl_$._new = function(i) {
	return i;
};
var lime_text_GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
lime_text_GlyphMetrics.__name__ = ["lime","text","GlyphMetrics"];
lime_text_GlyphMetrics.prototype = {
	advance: null
	,height: null
	,horizontalBearing: null
	,verticalBearing: null
	,__class__: lime_text_GlyphMetrics
};
var lime_text_GlyphPosition = function(glyph,advance,offset) {
	this.glyph = glyph;
	this.advance = advance;
	if(offset != null) this.offset = offset; else this.offset = new lime_math_Vector2();
};
$hxClasses["lime.text.GlyphPosition"] = lime_text_GlyphPosition;
lime_text_GlyphPosition.__name__ = ["lime","text","GlyphPosition"];
lime_text_GlyphPosition.prototype = {
	advance: null
	,glyph: null
	,offset: null
	,__class__: lime_text_GlyphPosition
};
var lime_text__$TextDirection_TextDirection_$Impl_$ = {};
$hxClasses["lime.text._TextDirection.TextDirection_Impl_"] = lime_text__$TextDirection_TextDirection_$Impl_$;
lime_text__$TextDirection_TextDirection_$Impl_$.__name__ = ["lime","text","_TextDirection","TextDirection_Impl_"];
lime_text__$TextDirection_TextDirection_$Impl_$.__properties__ = {get_vertical:"get_vertical",get_horizontal:"get_horizontal",get_forward:"get_forward",get_backward:"get_backward"}
lime_text__$TextDirection_TextDirection_$Impl_$.reverse = function(this1) {
	this1 = this1 ^ 1;
};
lime_text__$TextDirection_TextDirection_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 4:
		return "leftToRight";
	case 5:
		return "rightToLeft";
	case 6:
		return "topToBottom";
	case 7:
		return "bottomToTop";
	default:
		return "";
	}
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_backward = function(this1) {
	return (this1 & -3) == 5;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_forward = function(this1) {
	return (this1 & -3) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_horizontal = function(this1) {
	return (this1 & -2) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_vertical = function(this1) {
	return (this1 & -2) == 6;
};
var lime_text_TextLayout = function(text,font,size,direction,script,language) {
	if(language == null) language = "en";
	if(script == null) script = "Zyyy";
	if(direction == null) direction = 4;
	if(size == null) size = 12;
	if(text == null) text = "";
	this.set_text(text);
	this.set_font(font);
	this.set_size(size);
	this.__direction = direction;
	this.__script = script;
	this.__language = language;
	this.positions = [];
	this.__dirty = true;
};
$hxClasses["lime.text.TextLayout"] = lime_text_TextLayout;
lime_text_TextLayout.__name__ = ["lime","text","TextLayout"];
lime_text_TextLayout.prototype = {
	font: null
	,glyphs: null
	,positions: null
	,size: null
	,text: null
	,__dirty: null
	,__buffer: null
	,__direction: null
	,__handle: null
	,__language: null
	,__script: null
	,__position: function() {
		this.positions = [];
	}
	,get_positions: function() {
		if(this.__dirty) {
			this.__dirty = false;
			this.__position();
		}
		return this.positions;
	}
	,get_direction: function() {
		return this.__direction;
	}
	,set_direction: function(value) {
		if(value == this.__direction) return value;
		this.__direction = value;
		this.__dirty = true;
		return value;
	}
	,set_font: function(value) {
		if(value == this.font) return value;
		this.font = value;
		this.__dirty = true;
		return value;
	}
	,get_glyphs: function() {
		var glyphs = [];
		var _g = 0;
		var _g1 = this.get_positions();
		while(_g < _g1.length) {
			var position = _g1[_g];
			++_g;
			glyphs.push(position.glyph);
		}
		return glyphs;
	}
	,get_language: function() {
		return this.__language;
	}
	,set_language: function(value) {
		if(value == this.__language) return value;
		this.__language = value;
		this.__dirty = true;
		return value;
	}
	,get_script: function() {
		return this.__script;
	}
	,set_script: function(value) {
		if(value == this.__script) return value;
		this.__script = value;
		this.__dirty = true;
		return value;
	}
	,set_size: function(value) {
		if(value == this.size) return value;
		this.size = value;
		this.__dirty = true;
		return value;
	}
	,set_text: function(value) {
		if(value == this.text) return value;
		this.text = value;
		this.__dirty = true;
		return value;
	}
	,__class__: lime_text_TextLayout
	,__properties__: {set_text:"set_text",set_size:"set_size",set_script:"set_script",get_script:"get_script",get_positions:"get_positions",set_language:"set_language",get_language:"get_language",get_glyphs:"get_glyphs",set_font:"set_font",set_direction:"set_direction",get_direction:"get_direction"}
};
var lime_text__$TextScript_TextScript_$Impl_$ = {};
$hxClasses["lime.text._TextScript.TextScript_Impl_"] = lime_text__$TextScript_TextScript_$Impl_$;
lime_text__$TextScript_TextScript_$Impl_$.__name__ = ["lime","text","_TextScript","TextScript_Impl_"];
lime_text__$TextScript_TextScript_$Impl_$.__properties__ = {get_rightToLeft:"get_rightToLeft"}
lime_text__$TextScript_TextScript_$Impl_$.get_rightToLeft = function(this1) {
	switch(this1) {
	case "Hebr":case "Arab":case "Syrc":case "Thaa":case "Nkoo":case "Samr":case "Mand":case "Armi":case "Phnx":case "Lydi":case "Cprt":case "Khar":case "Sarb":case "Avst":case "Phli":case "Phlp":case "Orkh":
		return true;
	default:
		return false;
	}
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app_Event_$Void_$Void();
	this.onButtonUp = new lime_app_Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app_Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = ["lime","ui","Gamepad"];
lime_ui_Gamepad.addMappings = function(mappings) {
};
lime_ui_Gamepad.__connect = function(id) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
		var gamepad = new lime_ui_Gamepad(id);
		lime_ui_Gamepad.devices.h[id] = gamepad;
		lime_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
lime_ui_Gamepad.__disconnect = function(id) {
	var gamepad = lime_ui_Gamepad.devices.h[id];
	if(gamepad != null) gamepad.connected = false;
	lime_ui_Gamepad.devices.remove(id);
	if(gamepad != null) gamepad.onDisconnect.dispatch();
};
lime_ui_Gamepad.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,__class__: lime_ui_Gamepad
	,__properties__: {get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$GamepadAxis_GamepadAxis_$Impl_$ = {};
$hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] = lime_ui__$GamepadAxis_GamepadAxis_$Impl_$;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.__name__ = ["lime","ui","_GamepadAxis","GamepadAxis_Impl_"];
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui__$GamepadButton_GamepadButton_$Impl_$ = {};
$hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] = lime_ui__$GamepadButton_GamepadButton_$Impl_$;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.__name__ = ["lime","ui","_GamepadButton","GamepadButton_Impl_"];
lime_ui__$GamepadButton_GamepadButton_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app_Event_$Int_$Float_$Void();
	this.onHatMove = new lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app_Event_$Void_$Void();
	this.onButtonUp = new lime_app_Event_$Int_$Void();
	this.onButtonDown = new lime_app_Event_$Int_$Void();
	this.onAxisMove = new lime_app_Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = ["lime","ui","Joystick"];
lime_ui_Joystick.__connect = function(id) {
	if(!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
		var joystick = new lime_ui_Joystick(id);
		lime_ui_Joystick.devices.h[id] = joystick;
		lime_ui_Joystick.onConnect.dispatch(joystick);
	}
};
lime_ui_Joystick.__disconnect = function(id) {
	var joystick = lime_ui_Joystick.devices.h[id];
	if(joystick != null) joystick.connected = false;
	lime_ui_Joystick.devices.remove(id);
	if(joystick != null) joystick.onDisconnect.dispatch();
};
lime_ui_Joystick.__getDeviceData = function() {
	if(navigator.getGamepads) return navigator.getGamepads(); else if(navigator.webkitGetGamepads) return navigator.webkitGetGamepads(); else return null;
};
lime_ui_Joystick.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,onHatMove: null
	,onTrackballMove: null
	,get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_numAxes: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].axes.length;
	}
	,get_numButtons: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].buttons.length;
	}
	,get_numHats: function() {
		return 0;
	}
	,get_numTrackballs: function() {
		return 0;
	}
	,__class__: lime_ui_Joystick
	,__properties__: {get_numTrackballs:"get_numTrackballs",get_numHats:"get_numHats",get_numButtons:"get_numButtons",get_numAxes:"get_numAxes",get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$ = {};
$hxClasses["lime.ui._JoystickHatPosition.JoystickHatPosition_Impl_"] = lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__name__ = ["lime","ui","_JoystickHatPosition","JoystickHatPosition_Impl_"];
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__properties__ = {set_up:"set_up",get_up:"get_up",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_down:"set_down",get_down:"get_down",set_center:"set_center",get_center:"get_center"}
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$._new = function(value) {
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_center = function(this1) {
	return this1 == 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_center = function(this1,value) {
	if(value) this1 = 0;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_down = function(this1) {
	return (this1 & 4) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_down = function(this1,value) {
	if(value) this1 |= 4; else this1 &= 268435455 - 4;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_left = function(this1) {
	return (this1 & 8) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_left = function(this1,value) {
	if(value) this1 |= 8; else this1 &= 268435455 - 8;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_right = function(this1) {
	return (this1 & 2) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_right = function(this1,value) {
	if(value) this1 |= 2; else this1 &= 268435455 - 2;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_up = function(this1) {
	return (this1 & 1) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_up = function(this1,value) {
	if(value) this1 |= 1; else this1 &= 268435455 - 1;
	return value;
};
var lime_ui__$KeyCode_KeyCode_$Impl_$ = {};
$hxClasses["lime.ui._KeyCode.KeyCode_Impl_"] = lime_ui__$KeyCode_KeyCode_$Impl_$;
lime_ui__$KeyCode_KeyCode_$Impl_$.__name__ = ["lime","ui","_KeyCode","KeyCode_Impl_"];
lime_ui__$KeyCode_KeyCode_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lte = function(a,b) {
	return a <= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.plus = function(a,b) {
	return a + b;
};
var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = ["lime","ui","_KeyModifier","KeyModifier_Impl_"];
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__properties__ = {set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_numLock:"set_numLock",get_numLock:"get_numLock",set_metaKey:"set_metaKey",get_metaKey:"get_metaKey",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_capsLock:"set_capsLock",get_capsLock:"get_capsLock",set_altKey:"set_altKey",get_altKey:"get_altKey"}
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
	return (this1 & 256) > 0 || (this1 & 512) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_altKey = function(this1,value) {
	if(value) this1 |= 768; else this1 &= 268435455 - 768;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_capsLock = function(this1) {
	return (this1 & 8192) > 0 || (this1 & 8192) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_capsLock = function(this1,value) {
	if(value) this1 |= 8192; else this1 &= 268435455 - 8192;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
	return (this1 & 64) > 0 || (this1 & 128) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_ctrlKey = function(this1,value) {
	if(value) this1 |= 192; else this1 &= 268435455 - 192;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
	return (this1 & 1024) > 0 || (this1 & 2048) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_metaKey = function(this1,value) {
	if(value) this1 |= 3072; else this1 &= 268435455 - 3072;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_numLock = function(this1) {
	return (this1 & 4096) > 0 || (this1 & 4096) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_numLock = function(this1,value) {
	if(value) this1 |= 4096; else this1 &= 268435455 - 4096;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
	return (this1 & 1) > 0 || (this1 & 2) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_shiftKey = function(this1,value) {
	if(value) this1 |= 3; else this1 &= 268435455 - 3;
	return value;
};
var lime_ui_Mouse = function() { };
$hxClasses["lime.ui.Mouse"] = lime_ui_Mouse;
lime_ui_Mouse.__name__ = ["lime","ui","Mouse"];
lime_ui_Mouse.__properties__ = {set_lock:"set_lock",get_lock:"get_lock",set_cursor:"set_cursor",get_cursor:"get_cursor"}
lime_ui_Mouse.hide = function() {
	lime__$backend_html5_HTML5Mouse.hide();
};
lime_ui_Mouse.show = function() {
	lime__$backend_html5_HTML5Mouse.show();
};
lime_ui_Mouse.warp = function(x,y,window) {
	lime__$backend_html5_HTML5Mouse.warp(x,y,window);
};
lime_ui_Mouse.get_cursor = function() {
	return lime__$backend_html5_HTML5Mouse.get_cursor();
};
lime_ui_Mouse.set_cursor = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_cursor(value);
};
lime_ui_Mouse.get_lock = function() {
	return lime__$backend_html5_HTML5Mouse.get_lock();
};
lime_ui_Mouse.set_lock = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_lock(value);
};
var lime_ui_MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : ["lime","ui","MouseCursor"], __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime_ui_MouseCursor.ARROW = ["ARROW",0];
lime_ui_MouseCursor.ARROW.toString = $estr;
lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.DEFAULT = ["DEFAULT",2];
lime_ui_MouseCursor.DEFAULT.toString = $estr;
lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.MOVE = ["MOVE",3];
lime_ui_MouseCursor.MOVE.toString = $estr;
lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.POINTER = ["POINTER",4];
lime_ui_MouseCursor.POINTER.toString = $estr;
lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.TEXT = ["TEXT",9];
lime_ui_MouseCursor.TEXT.toString = $estr;
lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT = ["WAIT",10];
lime_ui_MouseCursor.WAIT.toString = $estr;
lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CUSTOM = ["CUSTOM",12];
lime_ui_MouseCursor.CUSTOM.toString = $estr;
lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = ["lime","ui","Touch"];
lime_ui_Touch.prototype = {
	device: null
	,dx: null
	,dy: null
	,id: null
	,pressure: null
	,x: null
	,y: null
	,__class__: lime_ui_Touch
};
var lime_ui_Window = function(config) {
	this.onTextInput = new lime_app_Event_$String_$Void();
	this.onTextEdit = new lime_app_Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app_Event_$Void_$Void();
	this.onResize = new lime_app_Event_$Int_$Int_$Void();
	this.onMove = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseUp = new lime_app_Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app_Event_$Float_$Float_$Int_$Void();
	this.onMinimize = new lime_app_Event_$Void_$Void();
	this.onLeave = new lime_app_Event_$Void_$Void();
	this.onKeyUp = new lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app_Event_$Void_$Void();
	this.onFocusOut = new lime_app_Event_$Void_$Void();
	this.onFocusIn = new lime_app_Event_$Void_$Void();
	this.onEnter = new lime_app_Event_$Void_$Void();
	this.onDeactivate = new lime_app_Event_$Void_$Void();
	this.onCreate = new lime_app_Event_$Void_$Void();
	this.onClose = new lime_app_Event_$Void_$Void();
	this.onActivate = new lime_app_Event_$Void_$Void();
	this.config = config;
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	if(config != null) {
		if(Object.prototype.hasOwnProperty.call(config,"width")) this.__width = config.width;
		if(Object.prototype.hasOwnProperty.call(config,"height")) this.__height = config.height;
		if(Object.prototype.hasOwnProperty.call(config,"x")) this.__x = config.x;
		if(Object.prototype.hasOwnProperty.call(config,"y")) this.__y = config.y;
		if(Object.prototype.hasOwnProperty.call(config,"fullscreen")) this.__fullscreen = config.fullscreen;
		if(Object.prototype.hasOwnProperty.call(config,"title")) this.__title = config.title;
	}
	this.backend = new lime__$backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = ["lime","ui","Window"];
lime_ui_Window.prototype = {
	application: null
	,config: null
	,display: null
	,id: null
	,onActivate: null
	,onClose: null
	,onCreate: null
	,onDeactivate: null
	,onEnter: null
	,onFocusIn: null
	,onFocusOut: null
	,onFullscreen: null
	,onKeyDown: null
	,onKeyUp: null
	,onLeave: null
	,onMinimize: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onMove: null
	,onResize: null
	,onRestore: null
	,onTextEdit: null
	,onTextInput: null
	,renderer: null
	,scale: null
	,stage: null
	,backend: null
	,__fullscreen: null
	,__height: null
	,__minimized: null
	,__scale: null
	,__title: null
	,__width: null
	,__x: null
	,__y: null
	,alert: function(message,title) {
		this.backend.alert(message,title);
	}
	,close: function() {
		this.backend.close();
	}
	,create: function(application) {
		this.application = application;
		this.backend.create(application);
		if(this.renderer != null) this.renderer.create();
	}
	,focus: function() {
		this.backend.focus();
	}
	,move: function(x,y) {
		this.backend.move(x,y);
		this.__x = x;
		this.__y = y;
	}
	,resize: function(width,height) {
		this.backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,setIcon: function(image) {
		if(image == null) return;
		this.backend.setIcon(image);
	}
	,toString: function() {
		return "[object Window]";
	}
	,get_display: function() {
		return this.backend.getDisplay();
	}
	,get_enableTextEvents: function() {
		return this.backend.getEnableTextEvents();
	}
	,set_enableTextEvents: function(value) {
		return this.backend.setEnableTextEvents(value);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		return this.__minimized = this.backend.setMinimized(value);
	}
	,get_scale: function() {
		return this.__scale;
	}
	,get_title: function() {
		return this.__title;
	}
	,set_title: function(value) {
		return this.__title = this.backend.setTitle(this.__title);
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime_ui_Window
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_title:"set_title",get_title:"get_title",get_scale:"get_scale",set_minimized:"set_minimized",get_minimized:"get_minimized",set_height:"set_height",get_height:"get_height",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_enableTextEvents:"set_enableTextEvents",get_enableTextEvents:"get_enableTextEvents",get_display:"get_display"}
};
var lime_utils_TAError = $hxClasses["lime.utils.TAError"] = { __ename__ : ["lime","utils","TAError"], __constructs__ : ["RangeError"] };
lime_utils_TAError.RangeError = ["RangeError",0];
lime_utils_TAError.RangeError.toString = $estr;
lime_utils_TAError.RangeError.__enum__ = lime_utils_TAError;
var lime_utils_Bytes = function(length,bytesData) {
	haxe_io_Bytes.call(this,bytesData);
};
$hxClasses["lime.utils.Bytes"] = lime_utils_Bytes;
lime_utils_Bytes.__name__ = ["lime","utils","Bytes"];
lime_utils_Bytes.alloc = function(length) {
	var bytes = haxe_io_Bytes.alloc(length);
	return new lime_utils_Bytes(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
lime_utils_Bytes.ofData = function(b) {
	var bytes = haxe_io_Bytes.ofData(b);
	return new lime_utils_Bytes(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.ofString = function(s) {
	var bytes = haxe_io_Bytes.ofString(s);
	return new lime_utils_Bytes(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.readFile = function(path) {
	return null;
};
lime_utils_Bytes.lime_bytes_from_data_pointer = function(data,length) {
	return lime_utils_Bytes.cffi_lime_bytes_from_data_pointer(data,length);
};
lime_utils_Bytes.lime_bytes_get_data_pointer = function(data) {
	return lime_utils_Bytes.cffi_lime_bytes_get_data_pointer(data);
};
lime_utils_Bytes.lime_bytes_read_file = function(path) {
	return lime_utils_Bytes.cffi_lime_bytes_read_file(path);
};
lime_utils_Bytes.__super__ = haxe_io_Bytes;
lime_utils_Bytes.prototype = $extend(haxe_io_Bytes.prototype,{
	__class__: lime_utils_Bytes
});
var lime_utils__$Float32Array_Float32Array_$Impl_$ = {};
$hxClasses["lime.utils._Float32Array.Float32Array_Impl_"] = lime_utils__$Float32Array_Float32Array_$Impl_$;
lime_utils__$Float32Array_Float32Array_$Impl_$.__name__ = ["lime","utils","_Float32Array","Float32Array_Impl_"];
lime_utils__$Float32Array_Float32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$Float32Array_Float32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$Float32Array_Float32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Float32Array(bytes.b.bufferValue);
	if(len == null) return new Float32Array(bytes.b.bufferValue,byteOffset);
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils_GLUtils = function() { };
$hxClasses["lime.utils.GLUtils"] = lime_utils_GLUtils;
lime_utils_GLUtils.__name__ = ["lime","utils","GLUtils"];
lime_utils_GLUtils.compileShader = function(source,type) {
	var shader = lime_graphics_opengl_GL.context.createShader(type);
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
	lime_graphics_opengl_GL.context.compileShader(shader);
	if(lime_graphics_opengl_GL.context.getShaderParameter(shader,35713) == 0) switch(type) {
	case 35633:
		throw new js__$Boot_HaxeError("Error compiling vertex shader");
		break;
	case 35632:
		throw new js__$Boot_HaxeError("Error compiling fragment shader");
		break;
	default:
		throw new js__$Boot_HaxeError("Error compiling unknown shader type");
	}
	return shader;
};
lime_utils_GLUtils.createProgram = function(vertexSource,fragmentSource) {
	var vertexShader = lime_utils_GLUtils.compileShader(vertexSource,35633);
	var fragmentShader = lime_utils_GLUtils.compileShader(fragmentSource,35632);
	var program = lime_graphics_opengl_GL.context.createProgram();
	lime_graphics_opengl_GL.context.attachShader(program,vertexShader);
	lime_graphics_opengl_GL.context.attachShader(program,fragmentShader);
	lime_graphics_opengl_GL.context.linkProgram(program);
	if(lime_graphics_opengl_GL.context.getProgramParameter(program,35714) == 0) throw new js__$Boot_HaxeError("Unable to initialize the shader program.");
	return program;
};
var lime_utils__$Int16Array_Int16Array_$Impl_$ = {};
$hxClasses["lime.utils._Int16Array.Int16Array_Impl_"] = lime_utils__$Int16Array_Int16Array_$Impl_$;
lime_utils__$Int16Array_Int16Array_$Impl_$.__name__ = ["lime","utils","_Int16Array","Int16Array_Impl_"];
lime_utils__$Int16Array_Int16Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$Int16Array_Int16Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$Int16Array_Int16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Int16Array(bytes.b.bufferValue);
	if(len == null) return new Int16Array(bytes.b.bufferValue,byteOffset);
	return new Int16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Int16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$Int32Array_Int32Array_$Impl_$ = {};
$hxClasses["lime.utils._Int32Array.Int32Array_Impl_"] = lime_utils__$Int32Array_Int32Array_$Impl_$;
lime_utils__$Int32Array_Int32Array_$Impl_$.__name__ = ["lime","utils","_Int32Array","Int32Array_Impl_"];
lime_utils__$Int32Array_Int32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$Int32Array_Int32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$Int32Array_Int32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Int32Array(bytes.b.bufferValue);
	if(len == null) return new Int32Array(bytes.b.bufferValue,byteOffset);
	return new Int32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils_LZMA = function() { };
$hxClasses["lime.utils.LZMA"] = lime_utils_LZMA;
lime_utils_LZMA.__name__ = ["lime","utils","LZMA"];
lime_utils_LZMA.decode = function(bytes) {
	return null;
};
lime_utils_LZMA.encode = function(bytes) {
	return null;
};
var lime_utils__$UInt16Array_UInt16Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt16Array.UInt16Array_Impl_"] = lime_utils__$UInt16Array_UInt16Array_$Impl_$;
lime_utils__$UInt16Array_UInt16Array_$Impl_$.__name__ = ["lime","utils","_UInt16Array","UInt16Array_Impl_"];
lime_utils__$UInt16Array_UInt16Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Uint16Array(bytes.b.bufferValue);
	if(len == null) return new Uint16Array(bytes.b.bufferValue,byteOffset);
	return new Uint16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "UInt16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$UInt32Array_UInt32Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt32Array.UInt32Array_Impl_"] = lime_utils__$UInt32Array_UInt32Array_$Impl_$;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__name__ = ["lime","utils","_UInt32Array","UInt32Array_Impl_"];
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Uint32Array(bytes.b.bufferValue);
	if(len == null) return new Uint32Array(bytes.b.bufferValue,byteOffset);
	return new Uint32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "UInt32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$UInt8Array_UInt8Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt8Array.UInt8Array_Impl_"] = lime_utils__$UInt8Array_UInt8Array_$Impl_$;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__name__ = ["lime","utils","_UInt8Array","UInt8Array_Impl_"];
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) return new Uint8Array(bytes.b.bufferValue);
	if(len == null) return new Uint8Array(bytes.b.bufferValue,byteOffset);
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "UInt8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var openfl_IAssetCache = function() { };
$hxClasses["openfl.IAssetCache"] = openfl_IAssetCache;
openfl_IAssetCache.__name__ = ["openfl","IAssetCache"];
openfl_IAssetCache.prototype = {
	get_enabled: null
	,set_enabled: null
	,clear: null
	,getBitmapData: null
	,getFont: null
	,getSound: null
	,hasBitmapData: null
	,hasFont: null
	,hasSound: null
	,removeBitmapData: null
	,removeFont: null
	,removeSound: null
	,setBitmapData: null
	,setFont: null
	,setSound: null
	,__class__: openfl_IAssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.sound = new haxe_ds_StringMap();
};
$hxClasses["openfl.AssetCache"] = openfl_AssetCache;
openfl_AssetCache.__name__ = ["openfl","AssetCache"];
openfl_AssetCache.__interfaces__ = [openfl_IAssetCache];
openfl_AssetCache.prototype = {
	bitmapData: null
	,font: null
	,sound: null
	,__enabled: null
	,clear: function(prefix) {
		if(prefix == null) {
			this.bitmapData = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.sound = new haxe_ds_StringMap();
		} else {
			var keys = this.bitmapData.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.bitmapData.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.sound.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.sound.remove(key2);
			}
		}
	}
	,getBitmapData: function(id) {
		return this.bitmapData.get(id);
	}
	,getFont: function(id) {
		return this.font.get(id);
	}
	,getSound: function(id) {
		return this.sound.get(id);
	}
	,hasBitmapData: function(id) {
		return this.bitmapData.exists(id);
	}
	,hasFont: function(id) {
		return this.font.exists(id);
	}
	,hasSound: function(id) {
		return this.sound.exists(id);
	}
	,removeBitmapData: function(id) {
		return this.bitmapData.remove(id);
	}
	,removeFont: function(id) {
		return this.font.remove(id);
	}
	,removeSound: function(id) {
		return this.sound.remove(id);
	}
	,setBitmapData: function(id,bitmapData) {
		this.bitmapData.set(id,bitmapData);
	}
	,setFont: function(id,font) {
		this.font.set(id,font);
	}
	,setSound: function(id,sound) {
		this.sound.set(id,sound);
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,__class__: openfl_AssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_Assets = function() { };
$hxClasses["openfl.Assets"] = openfl_Assets;
openfl_Assets.__name__ = ["openfl","Assets"];
openfl_Assets.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) useWeakReference = false;
	if(priority == null) priority = 0;
	if(useCapture == null) useCapture = false;
	if(!lime_Assets.onChange.has(openfl_Assets.LimeAssets_onChange)) lime_Assets.onChange.add(openfl_Assets.LimeAssets_onChange);
	openfl_Assets.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
openfl_Assets.dispatchEvent = function(event) {
	return openfl_Assets.dispatcher.dispatchEvent(event);
};
openfl_Assets.exists = function(id,type) {
	return lime_Assets.exists(id,type);
};
openfl_Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_Assets.cache.getBitmapData(id);
		if(openfl_Assets.isValidBitmapData(bitmapData)) return bitmapData;
	}
	var image = lime_Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl_display_BitmapData.fromImage(image);
		if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setBitmapData(id,bitmapData1);
		return bitmapData1;
	}
	return null;
};
openfl_Assets.getBytes = function(id) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(lime_Assets.getBytes(id));
};
openfl_Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) return openfl_Assets.cache.getFont(id);
	var limeFont = lime_Assets.getFont(id,false);
	if(limeFont != null) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setFont(id,font);
		return font;
	}
	return new openfl_text_Font();
};
openfl_Assets.getLibrary = function(name) {
	return lime_Assets.getLibrary(name);
};
openfl_Assets.getMovieClip = function(id) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			if(library.isLocal(symbolName,"MOVIE_CLIP")) return library.getMovieClip(symbolName); else haxe_Log.trace("[openfl.Assets] MovieClip asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 223, className : "openfl.Assets", methodName : "getMovieClip"});
		} else haxe_Log.trace("[openfl.Assets] There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 229, className : "openfl.Assets", methodName : "getMovieClip"});
	} else haxe_Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 235, className : "openfl.Assets", methodName : "getMovieClip"});
	return null;
};
openfl_Assets.getMusic = function(id,useCache) {
	if(useCache == null) useCache = true;
	var path = lime_Assets.getPath(id);
	if(path != null) return new openfl_media_Sound(new openfl_net_URLRequest(path));
	return null;
};
openfl_Assets.getPath = function(id) {
	return lime_Assets.getPath(id);
};
openfl_Assets.getSound = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasSound(id)) {
		var sound = openfl_Assets.cache.getSound(id);
		if(openfl_Assets.isValidSound(sound)) return sound;
	}
	var path = lime_Assets.getPath(id);
	if(path != null) return new openfl_media_Sound(new openfl_net_URLRequest(path));
	return null;
};
openfl_Assets.getText = function(id) {
	return lime_Assets.getText(id);
};
openfl_Assets.hasEventListener = function(type) {
	return openfl_Assets.dispatcher.hasEventListener(type);
};
openfl_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled()) {
		if(type == "IMAGE" || type == null) {
			if(openfl_Assets.cache.hasBitmapData(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(openfl_Assets.cache.hasFont(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(openfl_Assets.cache.hasSound(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
openfl_Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null && bitmapData.image != null;
};
openfl_Assets.isValidSound = function(sound) {
	return true;
};
openfl_Assets.list = function(type) {
	return lime_Assets.list(type);
};
openfl_Assets.loadBitmapData = function(id,useCache,handler) {
	if(useCache == null) useCache = true;
	if(useCache == null) useCache = true;
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_Assets.cache.getBitmapData(id);
		if(openfl_Assets.isValidBitmapData(bitmapData)) {
			promise.complete(bitmapData);
			return promise.future;
		}
	}
	lime_Assets.loadImage(id,false).onComplete(function(image) {
		if(image != null) {
			var bitmapData1 = openfl_display_BitmapData.fromImage(image);
			if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setBitmapData(id,bitmapData1);
			promise.complete(bitmapData1);
		} else promise.error("[Assets] Could not load Image \"" + id + "\"");
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_Assets.loadBytes = function(id,handler) {
	var promise = new lime_app_Promise();
	var future = lime_Assets.loadBytes(id);
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
		future.onComplete(function(bytes) {
			promise.complete(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
		});
		future.onProgress(function(progress) {
			promise.progress(progress);
		});
		future.onError(function(msg) {
			promise.error(msg);
		});
	}
	return promise.future;
};
openfl_Assets.loadFont = function(id,useCache,handler) {
	if(useCache == null) useCache = true;
	if(useCache == null) useCache = true;
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) {
		promise.complete(openfl_Assets.cache.getFont(id));
		return promise.future;
	}
	lime_Assets.loadFont(id).onComplete(function(limeFont) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setFont(id,font);
		promise.complete(font);
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_Assets.loadLibrary = function(name,handler) {
	var future = lime_Assets.loadLibrary(name);
	if(handler != null) {
		future.onComplete(handler);
		future.onError(function(_) {
			handler(null);
		});
	}
	return future;
};
openfl_Assets.loadMusic = function(id,useCache,handler) {
	if(useCache == null) useCache = true;
	if(useCache == null) useCache = true;
	return new lime_app_Future(function() {
		return openfl_Assets.getMusic(id,useCache);
	});
};
openfl_Assets.loadMovieClip = function(id,handler) {
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) promise.completeWith(library.loadMovieClip(symbolName)); else promise.error("[Assets] There is no MovieClip asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
openfl_Assets.loadSound = function(id,useCache,handler) {
	if(useCache == null) useCache = true;
	if(useCache == null) useCache = true;
	return new lime_app_Future(function() {
		return openfl_Assets.getSound(id,useCache);
	});
};
openfl_Assets.loadText = function(id,handler) {
	var future = lime_Assets.loadText(id);
	if(handler != null) {
		future.onComplete(handler);
		future.onError(function(_) {
			handler(null);
		});
	}
	return future;
};
openfl_Assets.registerLibrary = function(name,library) {
	lime_Assets.registerLibrary(name,library);
};
openfl_Assets.removeEventListener = function(type,listener,capture) {
	if(capture == null) capture = false;
	openfl_Assets.dispatcher.removeEventListener(type,listener,capture);
};
openfl_Assets.resolveClass = function(name) {
	return Type.resolveClass(name);
};
openfl_Assets.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	return value;
};
openfl_Assets.unloadLibrary = function(name) {
	lime_Assets.unloadLibrary(name);
};
openfl_Assets.LimeAssets_onChange = function() {
	openfl_Assets.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
};
var openfl_AssetLibrary = function() {
	lime_AssetLibrary.call(this);
};
$hxClasses["openfl.AssetLibrary"] = openfl_AssetLibrary;
openfl_AssetLibrary.__name__ = ["openfl","AssetLibrary"];
openfl_AssetLibrary.__super__ = lime_AssetLibrary;
openfl_AssetLibrary.prototype = $extend(lime_AssetLibrary.prototype,{
	getMovieClip: function(id) {
		return null;
	}
	,loadMovieClip: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getMovieClip(id);
		});
	}
	,__class__: openfl_AssetLibrary
});
var openfl_display_MovieClip = function() {
	openfl_display_Sprite.call(this);
	this.__currentFrame = 0;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.enabled = true;
};
$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
openfl_display_MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl_display_MovieClip.__super__ = openfl_display_Sprite;
openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	currentFrame: null
	,currentFrameLabel: null
	,currentLabel: null
	,currentLabels: null
	,enabled: null
	,framesLoaded: null
	,totalFrames: null
	,__currentFrame: null
	,__currentFrameLabel: null
	,__currentLabel: null
	,__currentLabels: null
	,__frameScripts: null
	,__totalFrames: null
	,addFrameScript: function(index,method) {
		if(method != null) {
			if(this.__frameScripts == null) this.__frameScripts = new haxe_ds_IntMap();
			this.__frameScripts.h[index] = method;
			haxe_Log.trace("added script index " + index,{ fileName : "MovieClip.hx", lineNumber : 47, className : "openfl.display.MovieClip", methodName : "addFrameScript"});
		} else if(this.__frameScripts != null) this.__frameScripts.remove(index);
	}
	,gotoAndPlay: function(frame,scene) {
	}
	,gotoAndStop: function(frame,scene) {
	}
	,nextFrame: function() {
	}
	,play: function() {
	}
	,prevFrame: function() {
	}
	,stop: function() {
	}
	,get_currentFrame: function() {
		return this.__currentFrame;
	}
	,get_currentFrameLabel: function() {
		return this.__currentFrameLabel;
	}
	,get_currentLabel: function() {
		return this.__currentLabel;
	}
	,get_currentLabels: function() {
		return this.__currentLabels;
	}
	,get_framesLoaded: function() {
		return this.__totalFrames;
	}
	,get_totalFrames: function() {
		return this.__totalFrames;
	}
	,__class__: openfl_display_MovieClip
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_totalFrames:"get_totalFrames",get_framesLoaded:"get_framesLoaded",get_currentLabels:"get_currentLabels",get_currentLabel:"get_currentLabel",get_currentFrameLabel:"get_currentFrameLabel",get_currentFrame:"get_currentFrame"})
});
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = ["openfl","Lib"];
openfl_Lib.application = null;
openfl_Lib["as"] = function(v,c) {
	if(js_Boot.__instanceof(v,c)) return v; else return null;
};
openfl_Lib.attach = function(name) {
	return new openfl_display_MovieClip();
};
openfl_Lib.embed = $hx_exports.openfl.embed = function(elementName,width,height,background,assetsPrefix) {
	lime_system_System.embed(elementName,width,height,background,assetsPrefix);
};
openfl_Lib.getTimer = function() {
	return lime_system_System.getTimer();
};
openfl_Lib.getURL = function(request,target) {
	if(target == null) target = "_blank";
	window.open(request.url,target);
};
openfl_Lib.notImplemented = function(api) {
	if(!openfl_Lib.__sentWarnings.exists(api)) {
		openfl_Lib.__sentWarnings.set(api,true);
		haxe_Log.trace("Warning: " + api + " is not implemented",{ fileName : "Lib.hx", lineNumber : 113, className : "openfl.Lib", methodName : "notImplemented"});
	}
};
openfl_Lib.preventDefaultTouchMove = function() {
	window.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl_Lib.trace = function(arg) {
	haxe_Log.trace(arg,{ fileName : "Lib.hx", lineNumber : 144, className : "openfl.Lib", methodName : "trace"});
};
var openfl_Memory = function() { };
$hxClasses["openfl.Memory"] = openfl_Memory;
openfl_Memory.__name__ = ["openfl","Memory"];
openfl_Memory.gcRef = null;
openfl_Memory.len = null;
openfl_Memory._setPositionTemporarily = function(position,action) {
	var oldPosition = openfl_Memory.gcRef.position;
	openfl_Memory.gcRef.position = position;
	var value = action();
	openfl_Memory.gcRef.position = oldPosition;
	return value;
};
openfl_Memory.getByte = function(addr) {
	return openfl_Memory.gcRef.b[addr];
};
openfl_Memory.getDouble = function(addr) {
	return openfl_Memory._setPositionTemporarily(addr,function() {
		return openfl_Memory.gcRef.readDouble();
	});
};
openfl_Memory.getFloat = function(addr) {
	return openfl_Memory._setPositionTemporarily(addr,function() {
		return openfl_Memory.gcRef.readFloat();
	});
};
openfl_Memory.getI32 = function(addr) {
	return openfl_Memory._setPositionTemporarily(addr,function() {
		return openfl_Memory.gcRef.readInt();
	});
};
openfl_Memory.getUI16 = function(addr) {
	return openfl_Memory._setPositionTemporarily(addr,function() {
		return openfl_Memory.gcRef.readUnsignedShort();
	});
};
openfl_Memory.select = function(inBytes) {
	openfl_Memory.gcRef = inBytes;
	if(inBytes != null) openfl_Memory.len = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(inBytes); else openfl_Memory.len = 0;
};
openfl_Memory.setByte = function(addr,v) {
	openfl_Memory.gcRef.b[addr] = v & 255;
	v;
};
openfl_Memory.setDouble = function(addr,v) {
	openfl_Memory._setPositionTemporarily(addr,function() {
		openfl_Memory.gcRef.writeDouble(v);
	});
};
openfl_Memory.setFloat = function(addr,v) {
	openfl_Memory._setPositionTemporarily(addr,function() {
		openfl_Memory.gcRef.writeFloat(v);
	});
};
openfl_Memory.setI16 = function(addr,v) {
	openfl_Memory._setPositionTemporarily(addr,function() {
		openfl_Memory.gcRef.writeShort(v);
	});
};
openfl_Memory.setI32 = function(addr,v) {
	openfl_Memory._setPositionTemporarily(addr,function() {
		openfl_Memory.gcRef.writeInt(v);
	});
};
var openfl__$Vector_Vector_$Impl_$ = {};
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl__$Vector_Vector_$Impl_$;
openfl__$Vector_Vector_$Impl_$.__name__ = ["openfl","_Vector","Vector_Impl_"];
openfl__$Vector_Vector_$Impl_$.__properties__ = {set_fixed:"set_fixed",get_fixed:"get_fixed",set_length:"set_length",get_length:"get_length"}
openfl__$Vector_Vector_$Impl_$._new = function(length,fixed) {
	if(fixed == null) fixed = false;
	if(length == null) length = 0;
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(length);
	this1.data = this2;
	this1.length = length;
	this1.fixed = fixed;
	return this1;
};
openfl__$Vector_Vector_$Impl_$.concat = function(this1,a) {
	var vectorData = new openfl_VectorData();
	if(a != null) vectorData.length = this1.length + a.length; else vectorData.length = this1.length;
	vectorData.fixed = false;
	var this2;
	this2 = new Array(vectorData.length);
	vectorData.data = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
	if(a != null) haxe_ds__$Vector_Vector_$Impl_$.blit(a.data,0,vectorData.data,this1.length,a.length);
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.copy = function(this1) {
	var vectorData = new openfl_VectorData();
	vectorData.length = this1.length;
	vectorData.fixed = this1.fixed;
	var this2;
	this2 = new Array(this1.length);
	vectorData.data = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.iterator = function(this1) {
	return new openfl_VectorDataIterator(this1);
};
openfl__$Vector_Vector_$Impl_$.join = function(this1,sep) {
	var output = "";
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(i > 0) output += sep;
		output += Std.string(this1.data[i]);
	}
	return output;
};
openfl__$Vector_Vector_$Impl_$.pop = function(this1) {
	var value = null;
	if(!this1.fixed) {
		if(this1.length > 0) {
			this1.length--;
			value = this1.data[this1.length];
		}
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.push = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
		this1.data[this1.length - 1] = x;
	}
	return this1.length;
};
openfl__$Vector_Vector_$Impl_$.reverse = function(this1) {
	var data;
	var this2;
	this2 = new Array(this1.length);
	data = this2;
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		data[this1.length - 1 - i] = this1.data[i];
	}
	this1.data = data;
};
openfl__$Vector_Vector_$Impl_$.shift = function(this1) {
	if(!this1.fixed && this1.length > 0) {
		this1.length--;
		var value = this1.data[0];
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,1,this1.data,0,this1.length);
		return value;
	}
	return null;
};
openfl__$Vector_Vector_$Impl_$.unshift = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.length + 10);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,1,this1.data.length);
			this1.data = data;
		} else haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,this1.data,1,this1.length - 1);
		this1.data[0] = x;
	}
};
openfl__$Vector_Vector_$Impl_$.slice = function(this1,pos,end) {
	if(end == null) end = 0;
	if(pos == null) pos = 0;
	if(pos < 0) pos += this1.length;
	if(end <= 0) end += this1.length;
	if(end > this1.length) end = this1.length;
	var length = end - pos;
	if(length <= 0 || length > this1.length) length = this1.length;
	var vectorData = new openfl_VectorData();
	vectorData.length = end - pos;
	vectorData.fixed = true;
	var this2;
	this2 = new Array(length);
	vectorData.data = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,pos,vectorData.data,0,length);
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.sort = function(this1,f) {
	var array = haxe_ds__$Vector_Vector_$Impl_$.toArray(this1.data);
	array.sort(f);
	var vec;
	var this2;
	this2 = new Array(array.length);
	vec = this2;
	var _g1 = 0;
	var _g = array.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = array[i];
	}
	this1.data = vec;
};
openfl__$Vector_Vector_$Impl_$.splice = function(this1,pos,len) {
	if(pos < 0) pos += this1.length;
	if(pos + len > this1.length) len = this1.length - pos;
	if(len < 0) len = 0;
	var vectorData = new openfl_VectorData();
	vectorData.length = len;
	vectorData.fixed = false;
	var this2;
	this2 = new Array(len);
	vectorData.data = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,pos,vectorData.data,0,len);
	if(len > 0) {
		this1.length -= len;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,pos + len,this1.data,pos,this1.length - pos);
	}
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.toString = function(this1) {
	return haxe_ds__$Vector_Vector_$Impl_$.toArray(this1.data).toString();
};
openfl__$Vector_Vector_$Impl_$.indexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var value = -1;
	var _g1 = from;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(this1.data[i] == x) {
			value = i;
			break;
		}
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.lastIndexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var value = -1;
	var i = this1.length - 1;
	while(i >= from) {
		if(this1.data[i] == x) {
			value = i;
			break;
		}
		i--;
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.ofArray = function(a) {
	var vectorData = new openfl_VectorData();
	vectorData.length = a.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(a.length);
	vec = this1;
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = a[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.convert = function(v) {
	return v;
};
openfl__$Vector_Vector_$Impl_$.get = function(this1,index) {
	return this1.data[index];
};
openfl__$Vector_Vector_$Impl_$.set = function(this1,key,value) {
	if(!this1.fixed) {
		if(key >= this1.length) this1.length = key + 1;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	return this1.data[key] = value;
};
openfl__$Vector_Vector_$Impl_$.fromArray = function(value) {
	var vectorData = new openfl_VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(value.length);
	vec = this1;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.toArray = function(this1) {
	var value = [];
	var _g1 = 0;
	var _g = this1.data.length;
	while(_g1 < _g) {
		var i = _g1++;
		value.push(this1.data[i]);
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.fromHaxeVector = function(value) {
	var vectorData = new openfl_VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	vectorData.data = value;
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.toHaxeVector = function(this1) {
	return this1.data;
};
openfl__$Vector_Vector_$Impl_$.fromVectorData = function(value) {
	return value;
};
openfl__$Vector_Vector_$Impl_$.toVectorData = function(this1) {
	return this1;
};
openfl__$Vector_Vector_$Impl_$.get_length = function(this1) {
	return this1.length;
};
openfl__$Vector_Vector_$Impl_$.set_length = function(this1,value) {
	if(!this1.fixed) {
		if(value > this1.length) {
			var data;
			var this2;
			this2 = new Array(value);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,value)));
			this1.data = data;
		}
		this1.length = value;
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.get_fixed = function(this1) {
	return this1.fixed;
};
openfl__$Vector_Vector_$Impl_$.set_fixed = function(this1,value) {
	return this1.fixed = value;
};
var openfl_VectorData = function() {
	this.length = 0;
};
$hxClasses["openfl.VectorData"] = openfl_VectorData;
openfl_VectorData.__name__ = ["openfl","VectorData"];
openfl_VectorData.prototype = {
	data: null
	,fixed: null
	,length: null
	,__class__: openfl_VectorData
};
var openfl_VectorDataIterator = function(data) {
	this.index = 0;
	this.vectorData = data;
};
$hxClasses["openfl.VectorDataIterator"] = openfl_VectorDataIterator;
openfl_VectorDataIterator.__name__ = ["openfl","VectorDataIterator"];
openfl_VectorDataIterator.prototype = {
	index: null
	,vectorData: null
	,hasNext: function() {
		return this.index < this.vectorData.length;
	}
	,next: function() {
		var index = this.index++;
		return this.vectorData.data[index];
	}
	,__class__: openfl_VectorDataIterator
};
var openfl__$internal_renderer_AbstractMaskManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractMaskManager"] = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_AbstractMaskManager.__name__ = ["openfl","_internal","renderer","AbstractMaskManager"];
openfl__$internal_renderer_AbstractMaskManager.prototype = {
	renderSession: null
	,pushMask: function(mask) {
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,popRect: function() {
	}
	,saveState: function() {
	}
	,restoreState: function() {
	}
	,__class__: openfl__$internal_renderer_AbstractMaskManager
};
var openfl__$internal_renderer_AbstractRenderer = function(width,height) {
	this.width = width;
	this.height = height;
};
$hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_AbstractRenderer.__name__ = ["openfl","_internal","renderer","AbstractRenderer"];
openfl__$internal_renderer_AbstractRenderer.prototype = {
	height: null
	,width: null
	,transparent: null
	,viewport: null
	,renderSession: null
	,render: function(stage) {
	}
	,renderShape: function(shape) {
	}
	,setViewport: function(x,y,width,height) {
	}
	,resize: function(width,height) {
	}
	,__class__: openfl__$internal_renderer_AbstractRenderer
};
var openfl__$internal_renderer_DrawCommandBuffer = function() {
	this.types = [];
	this.b = [];
	this.i = [];
	this.f = [];
	this.o = [];
	this.ff = [];
	this.ii = [];
	this.ts = [];
};
$hxClasses["openfl._internal.renderer.DrawCommandBuffer"] = openfl__$internal_renderer_DrawCommandBuffer;
openfl__$internal_renderer_DrawCommandBuffer.__name__ = ["openfl","_internal","renderer","DrawCommandBuffer"];
openfl__$internal_renderer_DrawCommandBuffer.prototype = {
	types: null
	,b: null
	,f: null
	,ff: null
	,i: null
	,ii: null
	,o: null
	,ts: null
	,append: function(other) {
		var data = new openfl__$internal_renderer_DrawCommandReader(other);
		var _g = 0;
		var _g1 = other.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				c = data;
				this.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				break;
			case 1:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				c1 = data;
				this.beginFill(c1.buffer.i[c1.iPos],c1.buffer.f[c1.fPos]);
				break;
			case 2:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				c2 = data;
				this.beginGradientFill(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.o[c2.oPos + 4]);
				break;
			case 3:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c3 = data;
				this.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
				break;
			case 4:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c4 = data;
				this.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 5:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c5 = data;
				this.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
				break;
			case 6:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c6 = data;
				this.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
				break;
			case 7:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_PATH;
				c7 = data;
				this.drawPath(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.o[c7.oPos + 2]);
				break;
			case 8:
				var c8;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c8 = data;
				this.drawRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3]);
				break;
			case 9:
				var c9;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c9 = data;
				this.drawRoundRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3],c9.buffer.f[c9.fPos + 4],c9.buffer.f[c9.fPos + 5]);
				break;
			case 10:
				var c10;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
				c10 = data;
				this.drawTiles(c10.buffer.ts[c10.tsPos],c10.buffer.ff[c10.ffPos],c10.buffer.b[c10.bPos],c10.buffer.i[c10.iPos],c10.buffer.o[c10.oPos],c10.buffer.i[c10.iPos + 1]);
				break;
			case 11:
				var c11;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				c11 = data;
				this.drawTriangles(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.o[c11.oPos + 4],c11.buffer.i[c11.iPos]);
				break;
			case 12:
				var c12;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				c12 = data;
				this.endFill();
				break;
			case 13:
				var c13;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				c13 = data;
				this.lineBitmapStyle(c13.buffer.o[c13.oPos],c13.buffer.o[c13.oPos + 1],c13.buffer.b[c13.bPos],c13.buffer.b[c13.bPos + 1]);
				break;
			case 14:
				var c14;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				c14 = data;
				this.lineGradientStyle(c14.buffer.o[c14.oPos],c14.buffer.ii[c14.iiPos],c14.buffer.ff[c14.ffPos],c14.buffer.ii[c14.iiPos + 1],c14.buffer.o[c14.oPos + 1],c14.buffer.o[c14.oPos + 2],c14.buffer.o[c14.oPos + 3],c14.buffer.o[c14.oPos + 4]);
				break;
			case 15:
				var c15;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				c15 = data;
				this.lineStyle(c15.buffer.o[c15.oPos],c15.buffer.o[c15.oPos + 1],c15.buffer.o[c15.oPos + 2],c15.buffer.o[c15.oPos + 3],c15.buffer.o[c15.oPos + 4],c15.buffer.o[c15.oPos + 5],c15.buffer.o[c15.oPos + 6],c15.buffer.o[c15.oPos + 7]);
				break;
			case 16:
				var c16;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c16 = data;
				this.lineTo(c16.buffer.f[c16.fPos],c16.buffer.f[c16.fPos + 1]);
				break;
			case 17:
				var c17;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c17 = data;
				this.moveTo(c17.buffer.f[c17.fPos],c17.buffer.f[c17.fPos + 1]);
				break;
			case 18:
				var c18;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
				c18 = data;
				this.overrideMatrix(c18.buffer.o[c18.oPos]);
				break;
			default:
			}
		}
		data.destroy();
		return other;
	}
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,beginFill: function(color,alpha) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_FILL);
		this.i.push(color);
		this.f.push(alpha);
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.o.push(focalPointRatio);
	}
	,clear: function() {
		this.types.splice(0,this.types.length);
		this.b.splice(0,this.b.length);
		this.i.splice(0,this.i.length);
		this.f.splice(0,this.f.length);
		this.o.splice(0,this.o.length);
		this.ff.splice(0,this.ff.length);
		this.ii.splice(0,this.ii.length);
		this.ts.splice(0,this.ts.length);
	}
	,copy: function() {
		var copy = new openfl__$internal_renderer_DrawCommandBuffer();
		copy.append(this);
		return copy;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO);
		this.f.push(controlX1);
		this.f.push(controlY1);
		this.f.push(controlX2);
		this.f.push(controlY2);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.CURVE_TO);
		this.f.push(controlX);
		this.f.push(controlY);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,destroy: function() {
		this.clear();
		this.types = null;
		this.b = null;
		this.i = null;
		this.f = null;
		this.o = null;
		this.ff = null;
		this.ii = null;
		this.ts = null;
	}
	,drawCircle: function(x,y,radius) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(radius);
	}
	,drawEllipse: function(x,y,width,height) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawPath: function(commands,data,winding) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_PATH);
		this.o.push(commands);
		this.o.push(data);
		this.o.push(winding);
	}
	,drawRect: function(x,y,width,height) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRoundRect: function(x,y,width,height,rx,ry) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
		this.f.push(rx);
		this.f.push(ry);
	}
	,drawTiles: function(sheet,tileData,smooth,flags,shader,count) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TILES);
		this.ts.push(sheet);
		this.ff.push(tileData);
		this.b.push(smooth);
		this.i.push(flags);
		this.o.push(shader);
		this.i.push(count);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling,colors,blendMode) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES);
		this.o.push(vertices);
		this.o.push(indices);
		this.o.push(uvtData);
		this.o.push(culling);
		this.o.push(colors);
		this.i.push(blendMode);
	}
	,endFill: function() {
		this.types.push(openfl__$internal_renderer_DrawCommandType.END_FILL);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.o.push(focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_STYLE);
		this.o.push(thickness);
		this.o.push(color);
		this.o.push(alpha);
		this.o.push(pixelHinting);
		this.o.push(scaleMode);
		this.o.push(caps);
		this.o.push(joints);
		this.o.push(miterLimit);
	}
	,lineTo: function(x,y) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,moveTo: function(x,y) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.MOVE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,overrideMatrix: function(matrix) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX);
		this.o.push(matrix);
	}
	,get_length: function() {
		return this.types.length;
	}
	,__class__: openfl__$internal_renderer_DrawCommandBuffer
	,__properties__: {get_length:"get_length"}
};
var openfl__$internal_renderer_DrawCommandReader = function(buffer) {
	this.buffer = buffer;
	this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	this.prev = openfl__$internal_renderer_DrawCommandType.UNKNOWN;
};
$hxClasses["openfl._internal.renderer.DrawCommandReader"] = openfl__$internal_renderer_DrawCommandReader;
openfl__$internal_renderer_DrawCommandReader.__name__ = ["openfl","_internal","renderer","DrawCommandReader"];
openfl__$internal_renderer_DrawCommandReader.prototype = {
	buffer: null
	,bPos: null
	,iiPos: null
	,iPos: null
	,ffPos: null
	,fPos: null
	,oPos: null
	,prev: null
	,tsPos: null
	,advance: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 5;
			this.iiPos += 2;
			this.ffPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.oPos += 3;
			break;
		case 8:
			this.fPos += 4;
			break;
		case 9:
			this.fPos += 6;
			break;
		case 10:
			this.tsPos += 1;
			this.ffPos += 1;
			this.bPos += 1;
			this.iPos += 2;
			this.oPos += 1;
			break;
		case 11:
			this.oPos += 5;
			this.iPos += 1;
			break;
		case 12:
			break;
		case 13:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 14:
			this.oPos += 5;
			this.iiPos += 2;
			this.ffPos += 1;
			break;
		case 15:
			this.oPos += 8;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.oPos += 1;
			break;
		default:
		}
	}
	,bool: function(index) {
		return this.buffer.b[this.bPos + index];
	}
	,destroy: function() {
		this.buffer = null;
		this.reset();
	}
	,fArr: function(index) {
		return this.buffer.ff[this.ffPos + index];
	}
	,'float': function(index) {
		return this.buffer.f[this.fPos + index];
	}
	,iArr: function(index) {
		return this.buffer.ii[this.iiPos + index];
	}
	,'int': function(index) {
		return this.buffer.i[this.iPos + index];
	}
	,obj: function(index) {
		return this.buffer.o[this.oPos + index];
	}
	,readBeginBitmapFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
		return this;
	}
	,readBeginFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
		return this;
	}
	,readBeginGradientFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
		return this;
	}
	,readCubicCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
		return this;
	}
	,readCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
		return this;
	}
	,readDrawCircle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
		return this;
	}
	,readDrawEllipse: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
		return this;
	}
	,readDrawPath: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_PATH;
		return this;
	}
	,readDrawRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
		return this;
	}
	,readDrawRoundRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
		return this;
	}
	,readDrawTiles: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
		return this;
	}
	,readDrawTriangles: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
		return this;
	}
	,readEndFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
		return this;
	}
	,readLineBitmapStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
		return this;
	}
	,readLineGradientStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
		return this;
	}
	,readLineStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
		return this;
	}
	,readLineTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
		return this;
	}
	,readMoveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
		return this;
	}
	,readOverrideMatrix: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
		return this;
	}
	,reset: function() {
		this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	}
	,skip: function(type) {
		this.advance();
		this.prev = type;
	}
	,tileSheet: function(index) {
		return this.buffer.ts[this.tsPos + index];
	}
	,__class__: openfl__$internal_renderer_DrawCommandReader
};
var openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginBitmapFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginBitmapFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"}
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__properties__ = {get_alpha:"get_alpha",get_color:"get_color"}
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color = function(this1) {
	return this1.buffer.i[this1.iPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginGradientFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginGradientFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"}
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors = function(this1) {
	return this1.buffer.ii[this1.iiPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios = function(this1) {
	return this1.buffer.ii[this1.iiPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1.buffer.o[this1.oPos + 4];
};
var openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CubicCurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CubicCurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY2:"get_controlY2",get_controlX2:"get_controlX2",get_controlY1:"get_controlY1",get_controlX1:"get_controlX1"}
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1 = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1 = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2 = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2 = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1.buffer.f[this1.fPos + 4];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1.buffer.f[this1.fPos + 5];
};
var openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY:"get_controlY",get_controlX:"get_controlX"}
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawCircleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawCircleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__properties__ = {get_radius:"get_radius",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawEllipseView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawEllipseView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawPathView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawPathView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.__properties__ = {get_winding:"get_winding",get_data:"get_data",get_commands:"get_commands"}
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_commands = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_winding = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRoundRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRoundRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__properties__ = {get_ry:"get_ry",get_rx:"get_rx",get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_rx = function(this1) {
	return this1.buffer.f[this1.fPos + 4];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ry = function(this1) {
	return this1.buffer.f[this1.fPos + 5];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTilesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawTilesView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.__properties__ = {get_count:"get_count",get_shader:"get_shader",get_flags:"get_flags",get_smooth:"get_smooth",get_tileData:"get_tileData",get_sheet:"get_sheet"}
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet = function(this1) {
	return this1.buffer.ts[this1.tsPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags = function(this1) {
	return this1.buffer.i[this1.iPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_shader = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count = function(this1) {
	return this1.buffer.i[this1.iPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTrianglesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawTrianglesView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__properties__ = {get_blendMode:"get_blendMode",get_colors:"get_colors",get_culling:"get_culling",get_uvtData:"get_uvtData",get_indices:"get_indices",get_vertices:"get_vertices"}
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_colors = function(this1) {
	return this1.buffer.o[this1.oPos + 4];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_blendMode = function(this1) {
	return this1.buffer.i[this1.iPos];
};
var openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.EndFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","EndFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new = function(d) {
	return d;
};
var openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineBitmapStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineBitmapStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"}
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineGradientStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineGradientStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"}
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors = function(this1) {
	return this1.buffer.ii[this1.iiPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios = function(this1) {
	return this1.buffer.ii[this1.iiPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1.buffer.o[this1.oPos + 4];
};
var openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__properties__ = {get_miterLimit:"get_miterLimit",get_joints:"get_joints",get_caps:"get_caps",get_scaleMode:"get_scaleMode",get_pixelHinting:"get_pixelHinting",get_alpha:"get_alpha",get_color:"get_color",get_thickness:"get_thickness"}
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode = function(this1) {
	return this1.buffer.o[this1.oPos + 4];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps = function(this1) {
	return this1.buffer.o[this1.oPos + 5];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints = function(this1) {
	return this1.buffer.o[this1.oPos + 6];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit = function(this1) {
	return this1.buffer.o[this1.oPos + 7];
};
var openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.MoveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","MoveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.OverrideMatrixView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","OverrideMatrixView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__properties__ = {get_matrix:"get_matrix"}
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl__$internal_renderer_DrawCommandType = $hxClasses["openfl._internal.renderer.DrawCommandType"] = { __ename__ : ["openfl","_internal","renderer","DrawCommandType"], __constructs__ : ["BEGIN_BITMAP_FILL","BEGIN_FILL","BEGIN_GRADIENT_FILL","CUBIC_CURVE_TO","CURVE_TO","DRAW_CIRCLE","DRAW_ELLIPSE","DRAW_PATH","DRAW_RECT","DRAW_ROUND_RECT","DRAW_TILES","DRAW_TRIANGLES","END_FILL","LINE_BITMAP_STYLE","LINE_GRADIENT_STYLE","LINE_STYLE","LINE_TO","MOVE_TO","OVERRIDE_MATRIX","UNKNOWN"] };
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL = ["BEGIN_BITMAP_FILL",0];
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL = ["BEGIN_FILL",1];
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL = ["BEGIN_GRADIENT_FILL",2];
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO = ["CUBIC_CURVE_TO",3];
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CURVE_TO = ["CURVE_TO",4];
openfl__$internal_renderer_DrawCommandType.CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE = ["DRAW_CIRCLE",5];
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE = ["DRAW_ELLIPSE",6];
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_PATH = ["DRAW_PATH",7];
openfl__$internal_renderer_DrawCommandType.DRAW_PATH.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_PATH.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT = ["DRAW_RECT",8];
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT = ["DRAW_ROUND_RECT",9];
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES = ["DRAW_TILES",10];
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES = ["DRAW_TRIANGLES",11];
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.END_FILL = ["END_FILL",12];
openfl__$internal_renderer_DrawCommandType.END_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.END_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE = ["LINE_BITMAP_STYLE",13];
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE = ["LINE_GRADIENT_STYLE",14];
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE = ["LINE_STYLE",15];
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_TO = ["LINE_TO",16];
openfl__$internal_renderer_DrawCommandType.LINE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.MOVE_TO = ["MOVE_TO",17];
openfl__$internal_renderer_DrawCommandType.MOVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.MOVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX = ["OVERRIDE_MATRIX",18];
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.toString = $estr;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.UNKNOWN = ["UNKNOWN",19];
openfl__$internal_renderer_DrawCommandType.UNKNOWN.toString = $estr;
openfl__$internal_renderer_DrawCommandType.UNKNOWN.__enum__ = openfl__$internal_renderer_DrawCommandType;
var openfl__$internal_renderer_GraphicsPaths = function() { };
$hxClasses["openfl._internal.renderer.GraphicsPaths"] = openfl__$internal_renderer_GraphicsPaths;
openfl__$internal_renderer_GraphicsPaths.__name__ = ["openfl","_internal","renderer","GraphicsPaths"];
openfl__$internal_renderer_GraphicsPaths.ellipse = function(points,x,y,rx,ry,segmentCount) {
	var seg = Math.PI * 2 / segmentCount;
	var _g1 = 0;
	var _g = segmentCount + 1;
	while(_g1 < _g) {
		var i = _g1++;
		points.push(x + Math.sin(seg * i) * rx);
		points.push(y + Math.cos(seg * i) * ry);
	}
};
openfl__$internal_renderer_GraphicsPaths.cubicCurveTo = function(points,cx,cy,cx2,cy2,x,y) {
	var n = 20;
	var dt = 0;
	var dt2 = 0;
	var dt3 = 0;
	var t2 = 0;
	var t3 = 0;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		dt = 1 - tmp;
		dt2 = dt * dt;
		dt3 = dt2 * dt;
		t2 = tmp * tmp;
		t3 = t2 * tmp;
		px = dt3 * fromX + 3 * dt2 * tmp * cx + 3 * dt * t2 * cx2 + t3 * x;
		py = dt3 * fromY + 3 * dt2 * tmp * cy + 3 * dt * t2 * cy2 + t3 * y;
		points.push(px);
		points.push(py);
	}
};
openfl__$internal_renderer_GraphicsPaths.curveTo = function(points,cx,cy,x,y) {
	var xa = 0;
	var ya = 0;
	var n = 20;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		xa = fromX + (cx - fromX) * tmp;
		ya = fromY + (cy - fromY) * tmp;
		px = xa + (cx + (x - cx) * tmp - xa) * tmp;
		py = ya + (cy + (y - cy) * tmp - ya) * tmp;
		points.push(px);
		points.push(py);
	}
};
openfl__$internal_renderer_GraphicsPaths.roundRectangle = function(points,x,y,width,height,rx,ry) {
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl__$internal_renderer_GraphicsPaths.SIN45;
	var cx2 = -rx + rx * openfl__$internal_renderer_GraphicsPaths.TAN22;
	var cy1 = -ry + ry * openfl__$internal_renderer_GraphicsPaths.SIN45;
	var cy2 = -ry + ry * openfl__$internal_renderer_GraphicsPaths.TAN22;
	points.push(xe);
	points.push(ye - ry);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,xe + cx2,ye,xe - rx,ye);
	points.push(x + rx);
	points.push(ye);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,x,ye + cy2,x,ye - ry);
	points.push(x);
	points.push(y + ry);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,x - cx2,y,x + rx,y);
	points.push(xe - rx);
	points.push(y);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,xe,y - cy2,xe,y + ry);
	points.push(xe);
	points.push(ye - ry);
};
var openfl__$internal_renderer_PolyK = function() { };
$hxClasses["openfl._internal.renderer.PolyK"] = openfl__$internal_renderer_PolyK;
openfl__$internal_renderer_PolyK.__name__ = ["openfl","_internal","renderer","PolyK"];
openfl__$internal_renderer_PolyK.triangulate = function(tgs,p) {
	var sign = true;
	var n = p.length >> 1;
	if(n < 3) return [];
	var avl;
	var _g = [];
	var _g1 = 0;
	while(_g1 < n) {
		var i1 = _g1++;
		_g.push(i1);
	}
	avl = _g;
	var i = 0;
	var al = n;
	var earFound = false;
	while(al > 3) {
		var i0 = avl[i % al];
		var i11 = avl[(i + 1) % al];
		var i2 = avl[(i + 2) % al];
		var ax = p[2 * i0];
		var ay = p[2 * i0 + 1];
		var bx = p[2 * i11];
		var by = p[2 * i11 + 1];
		var cx = p[2 * i2];
		var cy = p[2 * i2 + 1];
		earFound = false;
		if(openfl__$internal_renderer_PolyK._convex(ax,ay,bx,by,cx,cy,sign)) {
			earFound = true;
			var _g11 = 0;
			while(_g11 < al) {
				var j = _g11++;
				var vi = avl[j];
				if(vi == i0 || vi == i11 || vi == i2) continue;
				if(openfl__$internal_renderer_PolyK._PointInTriangle(p[2 * vi],p[2 * vi + 1],ax,ay,bx,by,cx,cy)) {
					earFound = false;
					break;
				}
			}
		}
		if(earFound) {
			tgs.push(i0);
			tgs.push(i11);
			tgs.push(i2);
			avl.splice((i + 1) % al,1);
			al--;
			i = 0;
		} else if(i++ > 3 * al) {
			if(sign) {
				tgs = [];
				var _g12 = [];
				var _g2 = 0;
				while(_g2 < n) {
					var k = _g2++;
					_g12.push(k);
				}
				avl = _g12;
				i = 0;
				al = n;
				sign = false;
			} else {
				haxe_Log.trace("Warning: shape too complex to fill",{ fileName : "PolyK.hx", lineNumber : 104, className : "openfl._internal.renderer.PolyK", methodName : "triangulate"});
				return [];
			}
		}
	}
	tgs.push(avl[0]);
	tgs.push(avl[1]);
	tgs.push(avl[2]);
	return tgs;
};
openfl__$internal_renderer_PolyK._PointInTriangle = function(px,py,ax,ay,bx,by,cx,cy) {
	var v0x = cx - ax | 0;
	var v0y = cy - ay | 0;
	var v1x = bx - ax | 0;
	var v1y = by - ay | 0;
	var v2x = px - ax | 0;
	var v2y = py - ay | 0;
	var dot00 = v0x * v0x + v0y * v0y;
	var dot01 = v0x * v1x + v0y * v1y;
	var dot02 = v0x * v2x + v0y * v2y;
	var dot11 = v1x * v1x + v1y * v1y;
	var dot12 = v1x * v2x + v1y * v2y;
	var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
	var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
	var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
	return u >= 0 && v >= 0 && u + v < 1;
};
openfl__$internal_renderer_PolyK._convex = function(ax,ay,bx,by,cx,cy,sign) {
	return (ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0 == sign;
};
var openfl__$internal_renderer_RenderSession = function() {
	this.activeTextures = 0;
};
$hxClasses["openfl._internal.renderer.RenderSession"] = openfl__$internal_renderer_RenderSession;
openfl__$internal_renderer_RenderSession.__name__ = ["openfl","_internal","renderer","RenderSession"];
openfl__$internal_renderer_RenderSession.prototype = {
	cairo: null
	,context: null
	,element: null
	,gl: null
	,renderer: null
	,roundPixels: null
	,transformProperty: null
	,transformOriginProperty: null
	,vendorPrefix: null
	,z: null
	,projectionMatrix: null
	,drawCount: null
	,currentBlendMode: null
	,activeTextures: null
	,shaderManager: null
	,maskManager: null
	,filterManager: null
	,blendModeManager: null
	,spriteBatch: null
	,stencilManager: null
	,defaultFramebuffer: null
	,__class__: openfl__$internal_renderer_RenderSession
};
var openfl__$internal_renderer_cairo_CairoBitmap = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoBitmap"] = openfl__$internal_renderer_cairo_CairoBitmap;
openfl__$internal_renderer_cairo_CairoBitmap.__name__ = ["openfl","_internal","renderer","cairo","CairoBitmap"];
openfl__$internal_renderer_cairo_CairoBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var cairo = renderSession.cairo;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
		var transform = bitmap.__renderTransform;
		var scrollRect = bitmap.get_scrollRect();
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else cairo.set_matrix(transform.__toMatrix3());
		var surface = bitmap.bitmapData.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
			lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,bitmap.smoothing?1:3);
			if(scrollRect != null) {
				cairo.pushGroup();
				cairo.set_source(pattern);
				cairo.newPath();
				cairo.rectangle(scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
				cairo.fill();
				cairo.popGroupToSource();
			} else cairo.set_source(pattern);
			if(bitmap.__worldAlpha == 1) cairo.paint(); else cairo.paintWithAlpha(bitmap.__worldAlpha);
		}
		if(bitmap.__mask != null) renderSession.maskManager.popMask();
	}
};
var openfl__$internal_renderer_cairo_CairoGraphics = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoGraphics"] = openfl__$internal_renderer_cairo_CairoGraphics;
openfl__$internal_renderer_cairo_CairoGraphics.__name__ = ["openfl","_internal","renderer","cairo","CairoGraphics"];
openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = null;
openfl__$internal_renderer_cairo_CairoGraphics.bounds = null;
openfl__$internal_renderer_cairo_CairoGraphics.cairo = null;
openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = null;
openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
openfl__$internal_renderer_cairo_CairoGraphics.graphics = null;
openfl__$internal_renderer_cairo_CairoGraphics.hasFill = null;
openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = null;
openfl__$internal_renderer_cairo_CairoGraphics.hitTesting = null;
openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix = null;
openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix = null;
openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = null;
openfl__$internal_renderer_cairo_CairoGraphics.closePath = function() {
	if(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern == null) return;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
	if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
};
openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var pattern = null;
	switch(type[1]) {
	case 0:
		if(matrix == null) matrix = new openfl_geom_Matrix();
		var point = matrix.transformPoint(new openfl_geom_Point(1638.4,0));
		var x = matrix.tx + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		var y = matrix.ty + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial(x,y,0,x,y,(point.x - matrix.tx) / 2);
		break;
	case 1:
		if(matrix == null) matrix = new openfl_geom_Matrix();
		var point1 = matrix.transformPoint(new openfl_geom_Point(-819.2,0));
		var point2 = matrix.transformPoint(new openfl_geom_Point(819.2,0));
		point1.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point2.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point1.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		point2.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear(point1.x,point1.y,point2.x,point2.y);
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var rgb = colors[i];
		var alpha = alphas[i];
		var r = ((rgb & 16711680) >>> 16) / 255;
		var g = ((rgb & 65280) >>> 8) / 255;
		var b = (rgb & 255) / 255;
		var ratio = ratios[i] / 255;
		if(ratio < 0) ratio = 0;
		if(ratio > 1) ratio = 1;
		lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA(pattern,ratio,r,g,b,alpha);
	}
	var mat = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix(pattern);
	mat.tx = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	mat.ty = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(pattern,mat);
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern = function(bitmapFill,matrix,bitmapRepeat) {
	var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(bitmapFill.getSurface());
	if(bitmapRepeat) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend(pattern,1);
	openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = matrix;
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect = function(x,y,width,height,rx,ry) {
	if(ry == -1) ry = rx;
	rx *= 0.5;
	ry *= 0.5;
	if(rx > width / 2) rx = width / 2;
	if(ry > height / 2) ry = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cx2 = -rx + rx * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	var cy1 = -ry + ry * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cy2 = -ry + ry * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(xe,ye - ry);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,ye,xe - rx,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x + rx,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,ye + cy2,x,ye - ry);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x,y + ry);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,y,x + rx,y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe - rx,y);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,y - cy2,xe,y + ry);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe,ye - ry);
};
openfl__$internal_renderer_cairo_CairoGraphics.endFill = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.fillCommands,false);
	openfl__$internal_renderer_cairo_CairoGraphics.fillCommands.clear();
};
openfl__$internal_renderer_cairo_CairoGraphics.endStroke = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands,true);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_cairo_CairoGraphics.hitTest = function(graphics,x,y) {
	return false;
};
openfl__$internal_renderer_cairo_CairoGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) skipT = false;
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.length;
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) continue;
		tmp = uvt.data[t - 1];
		if(max < tmp) max = tmp;
	}
	var result;
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	result = this1;
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) continue;
		if(!result.fixed) {
			result.length++;
			if(result.data.length < result.length) {
				var data;
				var this3;
				this3 = new Array(result.data.length + 10);
				data = this3;
				haxe_ds__$Vector_Vector_$Impl_$.blit(result.data,0,data,0,result.data.length);
				result.data = data;
			}
			result.data[result.length - 1] = uvt.data[t1 - 1] / max;
		}
		result.length;
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_cairo_CairoGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) stroke = false;
	if(commands.get_length() == 0) return;
	openfl__$internal_renderer_cairo_CairoGraphics.bounds = openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_fillRule(1);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(3);
	var hasPath = false;
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var _g = 0;
	var _g1 = commands.types;
	try {
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
				break;
			case 4:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c1 = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				break;
			case 5:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c2 = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(c2.buffer.f[c2.fPos] - offsetX + c2.buffer.f[c2.fPos + 2],c2.buffer.f[c2.fPos + 1] - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2);
				break;
			case 8:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c3 = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.rectangle(c3.buffer.f[c3.fPos] - offsetX,c3.buffer.f[c3.fPos + 1] - offsetY,c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3]);
				break;
			case 6:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c4 = data;
				hasPath = true;
				var x = c4.buffer.f[c4.fPos];
				var y = c4.buffer.f[c4.fPos + 1];
				var width = c4.buffer.f[c4.fPos + 2];
				var height = c4.buffer.f[c4.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x,ym);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 9:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c5 = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.f[c5.fPos + 5]);
				break;
			case 16:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c6 = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 17:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c7 = data;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				closeGap = true;
				startX = c7.buffer.f[c7.fPos];
				startY = c7.buffer.f[c7.fPos + 1];
				break;
			case 15:
				var c8;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				c8 = data;
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				if(c8.buffer.o[c8.oPos] == null) openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = false; else {
					openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineWidth(c8.buffer.o[c8.oPos] > 0?c8.buffer.o[c8.oPos]:1);
					if(c8.buffer.o[c8.oPos + 6] == null) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin(1); else openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin((function($this) {
						var $r;
						var _g2 = c8.buffer.o[c8.oPos + 6];
						$r = (function($this) {
							var $r;
							switch(_g2[1]) {
							case 0:
								$r = 0;
								break;
							case 2:
								$r = 2;
								break;
							default:
								$r = 1;
							}
							return $r;
						}($this));
						return $r;
					}(this)));
					if(c8.buffer.o[c8.oPos + 5] == null) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap(1); else openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap((function($this) {
						var $r;
						var _g21 = c8.buffer.o[c8.oPos + 5];
						$r = (function($this) {
							var $r;
							switch(_g21[1]) {
							case 0:
								$r = 0;
								break;
							case 2:
								$r = 2;
								break;
							default:
								$r = 1;
							}
							return $r;
						}($this));
						return $r;
					}(this)));
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_miterLimit(c8.buffer.o[c8.oPos + 7] == null?3:c8.buffer.o[c8.oPos + 7]);
					if(c8.buffer.o[c8.oPos + 1] != null) {
						var r = ((c8.buffer.o[c8.oPos + 1] & 16711680) >>> 16) / 255;
						var g = ((c8.buffer.o[c8.oPos + 1] & 65280) >>> 8) / 255;
						var b = (c8.buffer.o[c8.oPos + 1] & 255) / 255;
						if(c8.buffer.o[c8.oPos + 2] == 1 || c8.buffer.o[c8.oPos + 2] == null) openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB(r,g,b); else openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(r,g,b,c8.buffer.o[c8.oPos + 2]);
					}
				}
				break;
			case 14:
				var c9;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				c9 = data;
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(c9.buffer.o[c9.oPos],c9.buffer.ii[c9.iiPos],c9.buffer.ff[c9.ffPos],c9.buffer.ii[c9.iiPos + 1],c9.buffer.o[c9.oPos + 1],c9.buffer.o[c9.oPos + 2],c9.buffer.o[c9.oPos + 3],c9.buffer.o[c9.oPos + 4]);
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 13:
				var c10;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				c10 = data;
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(c10.buffer.o[c10.oPos],c10.buffer.o[c10.oPos + 1],c10.buffer.b[c10.bPos]);
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 0:
				var c11;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				c11 = data;
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.b[c11.bPos]);
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = c11.buffer.o[c11.oPos];
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = c11.buffer.b[c11.bPos];
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				break;
			case 1:
				var c12;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				c12 = data;
				if(c12.buffer.f[c12.fPos] < 0.005) openfl__$internal_renderer_cairo_CairoGraphics.hasFill = false; else {
					if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
					openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(((c12.buffer.i[c12.iPos] & 16711680) >>> 16) / 255,((c12.buffer.i[c12.iPos] & 65280) >>> 8) / 255,(c12.buffer.i[c12.iPos] & 255) / 255,c12.buffer.f[c12.fPos]);
					openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				}
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 2:
				var c13;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				c13 = data;
				if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(c13.buffer.o[c13.oPos],c13.buffer.ii[c13.iiPos],c13.buffer.ff[c13.ffPos],c13.buffer.ii[c13.iiPos + 1],c13.buffer.o[c13.oPos + 1],c13.buffer.o[c13.oPos + 2],c13.buffer.o[c13.oPos + 3],c13.buffer.o[c13.oPos + 4]);
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 11:
				var c14;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				c14 = data;
				var v = c14.buffer.o[c14.oPos];
				var ind = c14.buffer.o[c14.oPos + 1];
				var uvt = c14.buffer.o[c14.oPos + 2];
				var colorFill = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill == null;
				if(colorFill && uvt != null) throw "__break__";
				var width1 = 0;
				var height1 = 0;
				if(!colorFill) {
					if(uvt == null) {
						var this1;
						this1 = new openfl_VectorData();
						var this2;
						this2 = new Array(0);
						this1.data = this2;
						this1.length = 0;
						this1.fixed = false;
						uvt = this1;
						var _g3 = 0;
						var _g22 = v.length / 2 | 0;
						while(_g3 < _g22) {
							var i1 = _g3++;
							if(!uvt.fixed) {
								uvt.length++;
								if(uvt.data.length < uvt.length) {
									var data1;
									var this3;
									this3 = new Array(uvt.data.length + 10);
									data1 = this3;
									haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data,0,data1,0,uvt.data.length);
									uvt.data = data1;
								}
								uvt.data[uvt.length - 1] = v.data[i1 * 2] / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
							}
							uvt.length;
							if(!uvt.fixed) {
								uvt.length++;
								if(uvt.data.length < uvt.length) {
									var data2;
									var this4;
									this4 = new Array(uvt.data.length + 10);
									data2 = this4;
									haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data,0,data2,0,uvt.data.length);
									uvt.data = data2;
								}
								uvt.data[uvt.length - 1] = v.data[i1 * 2 + 1] / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
							}
							uvt.length;
						}
					}
					var skipT = c14.buffer.o[c14.oPos + 2].length != v.length;
					var normalizedUVT = openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT(uvt,skipT);
					var maxUVT = normalizedUVT.max;
					uvt = normalizedUVT.uvt;
					if(maxUVT > 1) {
						width1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.width | 0;
						height1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.height | 0;
					} else {
						width1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
						height1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
					}
				}
				var i = 0;
				var l = ind.length;
				var a_;
				var b_;
				var c_;
				var iax;
				var iay;
				var ibx;
				var iby;
				var icx;
				var icy;
				var x1;
				var y1;
				var x2;
				var y2;
				var x3;
				var y3;
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				var uvx3;
				var uvy3;
				var denom;
				var t1;
				var t2;
				var t3;
				var t4;
				var dx;
				var dy;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(1);
				while(i < l) {
					a_ = i;
					b_ = i + 1;
					c_ = i + 2;
					iax = ind.data[a_] * 2;
					iay = ind.data[a_] * 2 + 1;
					ibx = ind.data[b_] * 2;
					iby = ind.data[b_] * 2 + 1;
					icx = ind.data[c_] * 2;
					icy = ind.data[c_] * 2 + 1;
					x1 = v.data[iax];
					y1 = v.data[iay];
					x2 = v.data[ibx];
					y2 = v.data[iby];
					x3 = v.data[icx];
					y3 = v.data[icy];
					var _g23 = c14.buffer.o[c14.oPos + 3];
					switch(_g23[1]) {
					case 2:
						if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
							i += 3;
							continue;
						}
						break;
					case 0:
						if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
							i += 3;
							continue;
						}
						break;
					default:
					}
					if(colorFill) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x1,y1);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x2,y2);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3,y3);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
						if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
						i += 3;
						continue;
					}
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.identityMatrix();
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x1,y1);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x2,y2);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3,y3);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
					uvx1 = uvt.data[iax] * width1;
					uvx2 = uvt.data[ibx] * width1;
					uvx3 = uvt.data[icx] * width1;
					uvy1 = uvt.data[iay] * height1;
					uvy2 = uvt.data[iby] * height1;
					uvy3 = uvt.data[icy] * height1;
					denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
					if(denom == 0) {
						i += 3;
						continue;
					}
					t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
					t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
					t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
					t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
					dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
					dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
					var matrix = new lime_math_Matrix3(t1,t2,t3,t4,dx,dy);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(matrix);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
					if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fill();
					i += 3;
				}
				break;
			case 10:
				var c15;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
				c15 = data;
				var useScale = (c15.buffer.i[c15.iPos] & 1) > 0;
				var useRotation = (c15.buffer.i[c15.iPos] & 2) > 0;
				var offsetX1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
				var offsetY1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
				var useTransform = (c15.buffer.i[c15.iPos] & 16) > 0;
				var useRGB = (c15.buffer.i[c15.iPos] & 4) > 0;
				var useAlpha = (c15.buffer.i[c15.iPos] & 8) > 0;
				var useRect = (c15.buffer.i[c15.iPos] & 32) > 0;
				var useOrigin = (c15.buffer.i[c15.iPos] & 64) > 0;
				var useBlendAdd = (c15.buffer.i[c15.iPos] & 65536) > 0;
				var useBlendOverlay = (c15.buffer.i[c15.iPos] & 4194304) > 0;
				if(useTransform) {
					useScale = false;
					useRotation = false;
				}
				var scaleIndex = 0;
				var rotationIndex = 0;
				var rgbIndex = 0;
				var alphaIndex = 0;
				var transformIndex = 0;
				var numValues = 3;
				if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
				if(useScale) {
					scaleIndex = numValues;
					numValues++;
				}
				if(useRotation) {
					rotationIndex = numValues;
					numValues++;
				}
				if(useTransform) {
					transformIndex = numValues;
					numValues += 4;
				}
				if(useRGB) {
					rgbIndex = numValues;
					numValues += 3;
				}
				if(useAlpha) {
					alphaIndex = numValues;
					numValues++;
				}
				var totalCount = c15.buffer.ff[c15.ffPos].length;
				if(c15.buffer.i[c15.iPos + 1] >= 0 && totalCount > c15.buffer.i[c15.iPos + 1]) totalCount = c15.buffer.i[c15.iPos + 1];
				var itemCount = totalCount / numValues | 0;
				var index = 0;
				var rect = null;
				var center = null;
				var previousTileID = -1;
				var surface;
				c15.buffer.ts[c15.tsPos].__bitmap.__sync();
				surface = c15.buffer.ts[c15.tsPos].__bitmap.getSurface();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.save();
				if(useBlendAdd) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_operator(12);
				if(useBlendOverlay) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_operator(16);
				while(index < totalCount) {
					var i2 = c15.buffer.ff[c15.ffPos][index + 2] | 0;
					var tileID;
					if(!useRect) tileID = i2; else tileID = -1;
					if(!useRect && tileID != previousTileID) {
						rect = c15.buffer.ts[c15.tsPos].__tileRects[tileID];
						center = c15.buffer.ts[c15.tsPos].__centerPoints[tileID];
						previousTileID = tileID;
					} else if(useRect) {
						rect = c15.buffer.ts[c15.tsPos].__rectTile;
						rect.setTo(c15.buffer.ff[c15.ffPos][index + 2],c15.buffer.ff[c15.ffPos][index + 3],c15.buffer.ff[c15.ffPos][index + 4],c15.buffer.ff[c15.ffPos][index + 5]);
						center = c15.buffer.ts[c15.tsPos].__point;
						if(useOrigin) {
							center.x = c15.buffer.ff[c15.ffPos][index + 6];
							center.y = c15.buffer.ff[c15.ffPos][index + 7];
						} else {
							center.x = 0;
							center.y = 0;
						}
					}
					if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.identityMatrix();
						if(useTransform) {
							var matrix1 = new lime_math_Matrix3(c15.buffer.ff[c15.ffPos][index + transformIndex],c15.buffer.ff[c15.ffPos][index + transformIndex + 1],c15.buffer.ff[c15.ffPos][index + transformIndex + 2],c15.buffer.ff[c15.ffPos][index + transformIndex + 3],0,0);
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(matrix1);
						}
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(c15.buffer.ff[c15.ffPos][index] - offsetX1,c15.buffer.ff[c15.ffPos][index + 1] - offsetY1);
						if(useRotation) openfl__$internal_renderer_cairo_CairoGraphics.cairo.rotate(c15.buffer.ff[c15.ffPos][index + rotationIndex]);
						if(useScale) {
							var scale = c15.buffer.ff[c15.ffPos][index + scaleIndex];
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.scale(scale,scale);
						}
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.setSourceSurface(surface,0,0);
						if(useAlpha) {
							if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.paintWithAlpha(c15.buffer.ff[c15.ffPos][index + alphaIndex]);
						} else if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.paint();
					}
					index += numValues;
				}
				if(useBlendAdd || useBlendOverlay) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_operator(2);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.restore();
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	data.destroy();
	if(hasPath) {
		if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
			if(openfl__$internal_renderer_cairo_CairoGraphics.hasFill && closeGap) openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(startX - offsetX,startY - offsetY); else if(closeGap && positionX == startX && positionY == startY) openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
			if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
		}
		if(!stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasFill) {
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(-openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,-openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			if(openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix != null) {
				var matrix2 = openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix.clone();
				matrix2.invert();
				if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) matrix2.concat(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix);
				lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern,matrix2.__toMatrix3());
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
			if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix.__toMatrix3());
				if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix.__toMatrix3());
			} else if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
		}
	}
};
openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo = function(cx,cy,x,y) {
	var current = null;
	if(!openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_hasCurrentPoint()) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(cx,cy);
		current = new lime_math_Vector2(cx,cy);
	} else current = openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_currentPoint();
	var cx1 = current.x + 0.66666666666666663 * (cx - current.x);
	var cy1 = current.y + 0.66666666666666663 * (cy - current.y);
	var cx2 = x + 0.66666666666666663 * (cx - x);
	var cy2 = y + 0.66666666666666663 * (cy - y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(cx1,cy1,cx2,cy2,x,y);
};
openfl__$internal_renderer_cairo_CairoGraphics.render = function(graphics,renderSession) {
};
openfl__$internal_renderer_cairo_CairoGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		var cairo = renderSession.cairo;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c = data;
				cairo.curveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
				positionX = c.buffer.f[c.fPos + 4];
				positionY = c.buffer.f[c.fPos + 4];
				break;
			case 4:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c1 = data;
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				positionX = c1.buffer.f[c1.fPos + 2];
				positionY = c1.buffer.f[c1.fPos + 3];
				break;
			case 5:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c2 = data;
				cairo.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2);
				break;
			case 6:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c3 = data;
				var x = c3.buffer.f[c3.fPos];
				var y = c3.buffer.f[c3.fPos + 1];
				var width = c3.buffer.f[c3.fPos + 2];
				var height = c3.buffer.f[c3.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				cairo.moveTo(x,ym);
				cairo.curveTo(x,ym - oy,xm - ox,y,xm,y);
				cairo.curveTo(xm + ox,y,xe,ym - oy,xe,ym);
				cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				cairo.curveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 8:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c4 = data;
				cairo.rectangle(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 9:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c5 = data;
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.f[c5.fPos + 5]);
				break;
			case 16:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c6 = data;
				cairo.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 17:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c7 = data;
				cairo.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
		data.destroy();
	}
};
var openfl__$internal_renderer_cairo_CairoMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoMaskManager"] = openfl__$internal_renderer_cairo_CairoMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.__name__ = ["openfl","_internal","renderer","cairo","CairoMaskManager"];
openfl__$internal_renderer_cairo_CairoMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		var transform = mask.__getWorldTransform();
		cairo.set_matrix(transform.__toMatrix3());
		cairo.newPath();
		mask.__renderCairoMask(this.renderSession);
		cairo.clip();
	}
	,pushRect: function(rect,transform) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		cairo.set_matrix(new lime_math_Matrix3(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty));
		cairo.newPath();
		cairo.rectangle(rect.x,rect.y,rect.width,rect.height);
		cairo.clip();
	}
	,popMask: function() {
		this.renderSession.cairo.restore();
	}
	,popRect: function() {
		this.renderSession.cairo.restore();
	}
	,__class__: openfl__$internal_renderer_cairo_CairoMaskManager
});
var openfl__$internal_renderer_cairo_CairoRenderer = function(width,height,cairo) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.cairo = cairo;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.cairo = cairo;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_cairo_CairoMaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoRenderer"] = openfl__$internal_renderer_cairo_CairoRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.__name__ = ["openfl","_internal","renderer","cairo","CairoRenderer"];
openfl__$internal_renderer_cairo_CairoRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	cairo: null
	,render: function(stage) {
		this.cairo.identityMatrix();
		if(stage.__clearBeforeRender) {
			this.cairo.setSourceRGB(stage.__colorSplit[0],stage.__colorSplit[1],stage.__colorSplit[2]);
			this.cairo.paint();
		}
		stage.__renderCairo(this.renderSession);
	}
	,renderDisplayObject: function(object) {
		this.cairo.identityMatrix();
		object.__renderCairo(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_cairo_CairoRenderer
});
var openfl__$internal_renderer_cairo_CairoShape = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoShape"] = openfl__$internal_renderer_cairo_CairoShape;
openfl__$internal_renderer_cairo_CairoShape.__name__ = ["openfl","_internal","renderer","cairo","CairoShape"];
openfl__$internal_renderer_cairo_CairoShape.render = function(shape,renderSession) {
};
var openfl__$internal_renderer_cairo_CairoTextField = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoTextField"] = openfl__$internal_renderer_cairo_CairoTextField;
openfl__$internal_renderer_cairo_CairoTextField.__name__ = ["openfl","_internal","renderer","cairo","CairoTextField"];
openfl__$internal_renderer_cairo_CairoTextField.render = function(textField,renderSession) {
};
var openfl__$internal_renderer_canvas_CanvasBitmap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl__$internal_renderer_canvas_CanvasBitmap;
openfl__$internal_renderer_canvas_CanvasBitmap.__name__ = ["openfl","_internal","renderer","canvas","CanvasBitmap"];
openfl__$internal_renderer_canvas_CanvasBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var context = renderSession.context;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
		bitmap.bitmapData.__sync();
		context.globalAlpha = bitmap.__worldAlpha;
		var transform = bitmap.__renderTransform;
		var scrollRect = bitmap.get_scrollRect();
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = false;
			context.msImageSmoothingEnabled = false;
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) context.drawImage(bitmap.bitmapData.image.get_src(),0,0); else context.drawImage(bitmap.bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = true;
			context.msImageSmoothingEnabled = true;
			context.imageSmoothingEnabled = true;
		}
		if(bitmap.__mask != null) renderSession.maskManager.popMask();
	}
};
var openfl__$internal_renderer_canvas_CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = ["openfl","_internal","renderer","canvas","CanvasGraphics"];
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapStroke = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bounds = null;
openfl__$internal_renderer_canvas_CanvasGraphics.graphics = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = null;
openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
openfl__$internal_renderer_canvas_CanvasGraphics.context = null;
openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function() {
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) return;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
};
openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat) {
	bitmap.__sync();
	return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.image.get_src(),bitmapRepeat?"repeat":"no-repeat");
};
openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	switch(type[1]) {
	case 0:
		if(matrix == null) matrix = new openfl_geom_Matrix();
		var point = matrix.transformPoint(new openfl_geom_Point(1638.4,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx,matrix.ty,0,matrix.tx,matrix.ty,(point.x - matrix.tx) / 2);
		break;
	case 1:
		var matrix1;
		if(matrix != null) matrix1 = matrix; else matrix1 = new openfl_geom_Matrix();
		var point1 = matrix1.transformPoint(new openfl_geom_Point(-819.2,0));
		var point2 = matrix1.transformPoint(new openfl_geom_Point(819.2,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point1.x,point1.y,point2.x,point2.y);
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var rgb = colors[i];
		var alpha = alphas[i];
		var r = (rgb & 16711680) >>> 16;
		var g = (rgb & 65280) >>> 8;
		var b = rgb & 255;
		var ratio = ratios[i] / 255;
		if(ratio < 0) ratio = 0;
		if(ratio > 1) ratio = 1;
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	return gradientFill;
};
openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	context.fillStyle = context.createPattern(bitmap.image.get_src(),repeat?"repeat":"no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) context.fill();
	return canvas;
};
openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function(x,y,width,height,rx,ry) {
	if(ry == -1) ry = rx;
	rx *= 0.5;
	ry *= 0.5;
	if(rx > width / 2) rx = width / 2;
	if(ry > height / 2) ry = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cx2 = -rx + rx * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	var cy1 = -ry + ry * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cy2 = -ry + ry * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe,ye - ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - rx,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + rx,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x,y + ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + rx,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - rx,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe,ye - ry);
};
openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands,false);
	openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands,true);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.hitTest = function(graphics,x,y) {
	if(graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) return false; else {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = true;
		x -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
		y -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
		if(graphics.__canvas == null) {
			graphics.__canvas = window.document.createElement("canvas");
			graphics.__context = graphics.__canvas.getContext("2d");
		}
		openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
		openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 2],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 2],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5]);
				break;
			case 4:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c1 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]);
				break;
			case 16:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c2 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1]);
				break;
			case 17:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c3 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1]);
				break;
			case 14:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				c4 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c4.buffer.o[c4.oPos],c4.buffer.ii[c4.iiPos],c4.buffer.ff[c4.ffPos],c4.buffer.ii[c4.iiPos + 1],c4.buffer.o[c4.oPos + 1],c4.buffer.o[c4.oPos + 2],c4.buffer.o[c4.oPos + 3],c4.buffer.o[c4.oPos + 4]);
				break;
			case 13:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				c5 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c5.buffer.o[c5.oPos],c5.buffer.o[c5.oPos + 1],c5.buffer.b[c5.bPos],c5.buffer.b[c5.bPos + 1]);
				break;
			case 15:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				c6 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c6.buffer.o[c6.oPos],c6.buffer.o[c6.oPos + 1],1,c6.buffer.o[c6.oPos + 3],c6.buffer.o[c6.oPos + 4],c6.buffer.o[c6.oPos + 5],c6.buffer.o[c6.oPos + 6],c6.buffer.o[c6.oPos + 7]);
				break;
			case 12:
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				data;
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
					data.destroy();
					return true;
				}
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				break;
			case 0:case 1:case 2:
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
					data.destroy();
					return true;
				}
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					return true;
				}
				if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
					var c7;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
					c7 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.b[c7.bPos],c7.buffer.b[c7.bPos + 1]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.b[c7.bPos],c7.buffer.b[c7.bPos + 1]);
				} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
					var c8;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
					c8 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.o[c8.oPos + 4]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.o[c8.oPos + 4]);
				} else {
					var c9;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
					c9 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c9.buffer.i[c9.iPos],1);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c9.buffer.i[c9.iPos],1);
				}
				break;
			case 5:
				var c10;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c10 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2]);
				break;
			case 6:
				var c11;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c11 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c11.buffer.f[c11.fPos],c11.buffer.f[c11.fPos + 1],c11.buffer.f[c11.fPos + 2],c11.buffer.f[c11.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c11.buffer.f[c11.fPos],c11.buffer.f[c11.fPos + 1],c11.buffer.f[c11.fPos + 2],c11.buffer.f[c11.fPos + 3]);
				break;
			case 8:
				var c12;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c12 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1],c12.buffer.f[c12.fPos + 2],c12.buffer.f[c12.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1],c12.buffer.f[c12.fPos + 2],c12.buffer.f[c12.fPos + 3]);
				break;
			case 9:
				var c13;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c13 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1],c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3],c13.buffer.f[c13.fPos + 4],c13.buffer.f[c13.fPos + 5]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1],c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3],c13.buffer.f[c13.fPos + 4],c13.buffer.f[c13.fPos + 5]);
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
		if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
		data.destroy();
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) return true;
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) return true;
	}
	return false;
};
openfl__$internal_renderer_canvas_CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) skipT = false;
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.length;
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) continue;
		tmp = uvt.data[t - 1];
		if(max < tmp) max = tmp;
	}
	var result;
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	result = this1;
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) continue;
		if(!result.fixed) {
			result.length++;
			if(result.data.length < result.length) {
				var data;
				var this3;
				this3 = new Array(result.data.length + 10);
				data = this3;
				haxe_ds__$Vector_Vector_$Impl_$.blit(result.data,0,data,0,result.data.length);
				result.data = data;
			}
			result.data[result.length - 1] = uvt.data[t1 - 1] / max;
		}
		result.length;
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) stroke = false;
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var _g = 0;
	var _g1 = commands.types;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type[1]) {
		case 3:
			var c;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
			c = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
			break;
		case 4:
			var c1;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
			c1 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
			break;
		case 5:
			var c2;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
			c2 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c2.buffer.f[c2.fPos] - offsetX + c2.buffer.f[c2.fPos + 2],c2.buffer.f[c2.fPos + 1] - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2,true);
			break;
		case 6:
			var c3;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
			c3 = data;
			var x = c3.buffer.f[c3.fPos];
			var y = c3.buffer.f[c3.fPos + 1];
			var width = c3.buffer.f[c3.fPos + 2];
			var height = c3.buffer.f[c3.fPos + 3];
			x -= offsetX;
			y -= offsetY;
			var kappa = .5522848;
			var ox = width / 2 * kappa;
			var oy = height / 2 * kappa;
			var xe = x + width;
			var ye = y + height;
			var xm = x + width / 2;
			var ym = y + height / 2;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
			break;
		case 9:
			var c4;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
			c4 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
			break;
		case 16:
			var c5;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
			c5 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY);
			positionX = c5.buffer.f[c5.fPos];
			positionY = c5.buffer.f[c5.fPos + 1];
			break;
		case 17:
			var c6;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
			c6 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
			positionX = c6.buffer.f[c6.fPos];
			positionY = c6.buffer.f[c6.fPos + 1];
			closeGap = true;
			startX = c6.buffer.f[c6.fPos];
			startY = c6.buffer.f[c6.fPos + 1];
			break;
		case 15:
			var c7;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
			c7 = data;
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
				if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			if(c7.buffer.o[c7.oPos] == null) openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false; else {
				if(c7.buffer.o[c7.oPos] > 0) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = c7.buffer.o[c7.oPos]; else openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = 1;
				if(c7.buffer.o[c7.oPos + 6] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = "round"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = Std.string(c7.buffer.o[c7.oPos + 6]).toLowerCase();
				if(c7.buffer.o[c7.oPos + 5] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = "round"; else {
					var _g2 = c7.buffer.o[c7.oPos + 5];
					switch(_g2[1]) {
					case 0:
						openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = "butt";
						break;
					default:
						openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = Std.string(c7.buffer.o[c7.oPos + 5]).toLowerCase();
					}
				}
				if(c7.buffer.o[c7.oPos + 7] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = 3; else openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = c7.buffer.o[c7.oPos + 7];
				if(c7.buffer.o[c7.oPos + 2] == 1 || c7.buffer.o[c7.oPos + 2] == null) if(c7.buffer.o[c7.oPos + 1] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#000000"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + StringTools.hex(c7.buffer.o[c7.oPos + 1] & 16777215,6); else {
					var r = (c7.buffer.o[c7.oPos + 1] & 16711680) >>> 16;
					var g = (c7.buffer.o[c7.oPos + 1] & 65280) >>> 8;
					var b = c7.buffer.o[c7.oPos + 1] & 255;
					if(c7.buffer.o[c7.oPos + 1] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#000000"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c7.buffer.o[c7.oPos + 2] + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			}
			break;
		case 14:
			var c8;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
			c8 = data;
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.o[c8.oPos + 4]);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 13:
			var c9;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
			c9 = data;
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c9.buffer.o[c9.oPos],c9.buffer.b[c9.bPos]);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 0:
			var c10;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
			c10 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c10.buffer.o[c10.oPos],true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			if(c10.buffer.o[c10.oPos + 1] != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = c10.buffer.o[c10.oPos + 1];
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = c10.buffer.o[c10.oPos + 1].clone();
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 1:
			var c11;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
			c11 = data;
			if(c11.buffer.f[c11.fPos] < 0.005) openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false; else {
				if(c11.buffer.f[c11.fPos] == 1) openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + StringTools.hex(c11.buffer.i[c11.iPos],6); else {
					var r1 = (c11.buffer.i[c11.iPos] & 16711680) >>> 16;
					var g1 = (c11.buffer.i[c11.iPos] & 65280) >>> 8;
					var b1 = c11.buffer.i[c11.iPos] & 255;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "rgba(" + r1 + ", " + g1 + ", " + b1 + ", " + c11.buffer.f[c11.fPos] + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			}
			break;
		case 2:
			var c12;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
			c12 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c12.buffer.o[c12.oPos],c12.buffer.ii[c12.iiPos],c12.buffer.ff[c12.ffPos],c12.buffer.ii[c12.iiPos + 1],c12.buffer.o[c12.oPos + 1],c12.buffer.o[c12.oPos + 2],c12.buffer.o[c12.oPos + 3],c12.buffer.o[c12.oPos + 4]);
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			break;
		case 8:
			var c13;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
			c13 = data;
			var optimizationUsed = false;
			if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
				var st = 0;
				var sr = 0;
				var sb = 0;
				var sl = 0;
				var canOptimizeMatrix = true;
				if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
					if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) canOptimizeMatrix = false; else {
						var stl = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]));
						var sbr = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(c13.buffer.f[c13.fPos] + c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 1] + c13.buffer.f[c13.fPos + 3]));
						st = stl.y;
						sl = stl.x;
						sb = sbr.y;
						sr = sbr.x;
					}
				} else {
					st = c13.buffer.f[c13.fPos + 1];
					sl = c13.buffer.f[c13.fPos];
					sb = c13.buffer.f[c13.fPos + 1] + c13.buffer.f[c13.fPos + 3];
					sr = c13.buffer.f[c13.fPos] + c13.buffer.f[c13.fPos + 2];
				}
				if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
					optimizationUsed = true;
					if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),sl,st,sr - sl,sb - st,c13.buffer.f[c13.fPos] - offsetX,c13.buffer.f[c13.fPos + 1] - offsetY,c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3]);
				}
			}
			if(!optimizationUsed) openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c13.buffer.f[c13.fPos] - offsetX,c13.buffer.f[c13.fPos + 1] - offsetY,c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3]);
			break;
		default:
			data.advance();
			data.prev = type;
		}
	}
	data.destroy();
	if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY); else if(closeGap && positionX == startX && positionY == startY) openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	}
	if(!stroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
				if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
			} else if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		}
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.render = function(graphics,renderSession) {
	var directRender = false;
	if(graphics.__dirty || directRender) {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
		if(!graphics.__visible || graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(directRender) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
				openfl__$internal_renderer_canvas_CanvasGraphics.bounds.setTo(0,0,openfl__$internal_renderer_canvas_CanvasGraphics.context.canvas.width,openfl__$internal_renderer_canvas_CanvasGraphics.context.canvas.width);
			} else {
				if(graphics.__canvas == null) {
					graphics.__canvas = window.document.createElement("canvas");
					graphics.__context = graphics.__canvas.getContext("2d");
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
				graphics.__canvas.width = Math.ceil(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width);
				graphics.__canvas.height = Math.ceil(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height);
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			try {
				while(_g < _g1.length) {
					var type = _g1[_g];
					++_g;
					switch(type[1]) {
					case 3:
						var c;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
						c = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 2],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 2],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5]);
						break;
					case 4:
						var c1;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
						c1 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]);
						break;
					case 16:
						var c2;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
						c2 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1]);
						break;
					case 17:
						var c3;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
						c3 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1]);
						break;
					case 12:
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
						data;
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
						openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
						break;
					case 15:
						var c4;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
						c4 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c4.buffer.o[c4.oPos],c4.buffer.o[c4.oPos + 1],c4.buffer.o[c4.oPos + 2],c4.buffer.o[c4.oPos + 3],c4.buffer.o[c4.oPos + 4],c4.buffer.o[c4.oPos + 5],c4.buffer.o[c4.oPos + 6],c4.buffer.o[c4.oPos + 7]);
						break;
					case 14:
						var c5;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
						c5 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c5.buffer.o[c5.oPos],c5.buffer.ii[c5.iiPos],c5.buffer.ff[c5.ffPos],c5.buffer.ii[c5.iiPos + 1],c5.buffer.o[c5.oPos + 1],c5.buffer.o[c5.oPos + 2],c5.buffer.o[c5.oPos + 3],c5.buffer.o[c5.oPos + 4]);
						break;
					case 13:
						var c6;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
						c6 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c6.buffer.o[c6.oPos],c6.buffer.o[c6.oPos + 1],c6.buffer.b[c6.bPos],c6.buffer.b[c6.bPos + 1]);
						break;
					case 0:case 1:case 2:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
							var c7;
							data.advance();
							data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
							c7 = data;
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.b[c7.bPos],c7.buffer.b[c7.bPos + 1]);
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.b[c7.bPos],c7.buffer.b[c7.bPos + 1]);
						} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
							var c8;
							data.advance();
							data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
							c8 = data;
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.o[c8.oPos + 4]);
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.o[c8.oPos + 4]);
						} else {
							var c9;
							data.advance();
							data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
							c9 = data;
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c9.buffer.i[c9.iPos],c9.buffer.f[c9.fPos]);
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c9.buffer.i[c9.iPos],c9.buffer.f[c9.fPos]);
						}
						break;
					case 5:
						var c10;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
						c10 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2]);
						break;
					case 6:
						var c11;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
						c11 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c11.buffer.f[c11.fPos],c11.buffer.f[c11.fPos + 1],c11.buffer.f[c11.fPos + 2],c11.buffer.f[c11.fPos + 3]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c11.buffer.f[c11.fPos],c11.buffer.f[c11.fPos + 1],c11.buffer.f[c11.fPos + 2],c11.buffer.f[c11.fPos + 3]);
						break;
					case 8:
						var c12;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
						c12 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1],c12.buffer.f[c12.fPos + 2],c12.buffer.f[c12.fPos + 3]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1],c12.buffer.f[c12.fPos + 2],c12.buffer.f[c12.fPos + 3]);
						break;
					case 9:
						var c13;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
						c13 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1],c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3],c13.buffer.f[c13.fPos + 4],c13.buffer.f[c13.fPos + 5]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1],c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3],c13.buffer.f[c13.fPos + 4],c13.buffer.f[c13.fPos + 5]);
						break;
					case 11:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						var c14;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
						c14 = data;
						var v = c14.buffer.o[c14.oPos];
						var ind = c14.buffer.o[c14.oPos + 1];
						var uvt = c14.buffer.o[c14.oPos + 2];
						var pattern = null;
						var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
						if(colorFill && uvt != null) throw "__break__";
						if(!colorFill) {
							if(uvt == null) {
								var this1;
								this1 = new openfl_VectorData();
								var this2;
								this2 = new Array(0);
								this1.data = this2;
								this1.length = 0;
								this1.fixed = false;
								uvt = this1;
								var _g3 = 0;
								var _g2 = v.length / 2 | 0;
								while(_g3 < _g2) {
									var i1 = _g3++;
									if(!uvt.fixed) {
										uvt.length++;
										if(uvt.data.length < uvt.length) {
											var data1;
											var this3;
											this3 = new Array(uvt.data.length + 10);
											data1 = this3;
											haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data,0,data1,0,uvt.data.length);
											uvt.data = data1;
										}
										uvt.data[uvt.length - 1] = v.data[i1 * 2] / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width;
									}
									uvt.length;
									if(!uvt.fixed) {
										uvt.length++;
										if(uvt.data.length < uvt.length) {
											var data2;
											var this4;
											this4 = new Array(uvt.data.length + 10);
											data2 = this4;
											haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data,0,data2,0,uvt.data.length);
											uvt.data = data2;
										}
										uvt.data[uvt.length - 1] = v.data[i1 * 2 + 1] / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height;
									}
									uvt.length;
								}
							}
							var skipT = uvt.length != v.length;
							var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvt,skipT);
							var maxUVT = normalizedUVT.max;
							uvt = normalizedUVT.uvt;
							if(maxUVT > 1) pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width | 0,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height | 0); else pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
						}
						var i = 0;
						var l = ind.length;
						var a_;
						var b_;
						var c_;
						var iax;
						var iay;
						var ibx;
						var iby;
						var icx;
						var icy;
						var x1;
						var y1;
						var x2;
						var y2;
						var x3;
						var y3;
						var uvx1;
						var uvy1;
						var uvx2;
						var uvy2;
						var uvx3;
						var uvy3;
						var denom;
						var t1;
						var t2;
						var t3;
						var t4;
						var dx;
						var dy;
						while(i < l) {
							a_ = i;
							b_ = i + 1;
							c_ = i + 2;
							iax = ind.data[a_] * 2;
							iay = ind.data[a_] * 2 + 1;
							ibx = ind.data[b_] * 2;
							iby = ind.data[b_] * 2 + 1;
							icx = ind.data[c_] * 2;
							icy = ind.data[c_] * 2 + 1;
							x1 = v.data[iax];
							y1 = v.data[iay];
							x2 = v.data[ibx];
							y2 = v.data[iby];
							x3 = v.data[icx];
							y3 = v.data[icy];
							var _g21 = c14.buffer.o[c14.oPos + 3];
							switch(_g21[1]) {
							case 2:
								if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
									i += 3;
									continue;
								}
								break;
							case 0:
								if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
									i += 3;
									continue;
								}
								break;
							default:
							}
							if(colorFill) {
								openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
								if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
								i += 3;
								continue;
							}
							openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
							uvx1 = uvt.data[iax] * pattern.width;
							uvx2 = uvt.data[ibx] * pattern.width;
							uvx3 = uvt.data[icx] * pattern.width;
							uvy1 = uvt.data[iay] * pattern.height;
							uvy2 = uvt.data[iby] * pattern.height;
							uvy3 = uvt.data[icy] * pattern.height;
							denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
							if(denom == 0) {
								i += 3;
								continue;
							}
							t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
							t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
							t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
							t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
							dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
							dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
							openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern,0,0);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
							i += 3;
						}
						break;
					case 10:
						var c15;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
						c15 = data;
						var useScale = (c15.buffer.i[c15.iPos] & 1) > 0;
						var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
						var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
						var useRotation = (c15.buffer.i[c15.iPos] & 2) > 0;
						var useTransform = (c15.buffer.i[c15.iPos] & 16) > 0;
						var useRGB = (c15.buffer.i[c15.iPos] & 4) > 0;
						var useAlpha = (c15.buffer.i[c15.iPos] & 8) > 0;
						var useRect = (c15.buffer.i[c15.iPos] & 32) > 0;
						var useOrigin = (c15.buffer.i[c15.iPos] & 64) > 0;
						var useBlendAdd = (c15.buffer.i[c15.iPos] & 65536) > 0;
						if(useTransform) {
							useScale = false;
							useRotation = false;
						}
						var scaleIndex = 0;
						var rotationIndex = 0;
						var rgbIndex = 0;
						var alphaIndex = 0;
						var transformIndex = 0;
						var numValues = 3;
						if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
						if(useScale) {
							scaleIndex = numValues;
							numValues++;
						}
						if(useRotation) {
							rotationIndex = numValues;
							numValues++;
						}
						if(useTransform) {
							transformIndex = numValues;
							numValues += 4;
						}
						if(useRGB) {
							rgbIndex = numValues;
							numValues += 3;
						}
						if(useAlpha) {
							alphaIndex = numValues;
							numValues++;
						}
						var totalCount = c15.buffer.ff[c15.ffPos].length;
						if(c15.buffer.i[c15.iPos + 1] >= 0 && totalCount > c15.buffer.i[c15.iPos + 1]) totalCount = c15.buffer.i[c15.iPos + 1];
						var itemCount = totalCount / numValues | 0;
						var index = 0;
						var rect = null;
						var center = null;
						var previousTileID = -1;
						var surface;
						c15.buffer.ts[c15.tsPos].__bitmap.__sync();
						surface = c15.buffer.ts[c15.tsPos].__bitmap.image.get_src();
						if(useBlendAdd) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalCompositeOperation = "lighter";
						while(index < totalCount) {
							var tileID;
							if(!useRect) tileID = c15.buffer.ff[c15.ffPos][index + 2] | 0; else tileID = -1;
							if(!useRect && tileID != previousTileID) {
								rect = c15.buffer.ts[c15.tsPos].__tileRects[tileID];
								center = c15.buffer.ts[c15.tsPos].__centerPoints[tileID];
								previousTileID = tileID;
							} else if(useRect) {
								rect = c15.buffer.ts[c15.tsPos].__rectTile;
								rect.setTo(c15.buffer.ff[c15.ffPos][index + 2],c15.buffer.ff[c15.ffPos][index + 3],c15.buffer.ff[c15.ffPos][index + 4],c15.buffer.ff[c15.ffPos][index + 5]);
								center = c15.buffer.ts[c15.tsPos].__point;
								if(useOrigin) {
									center.x = c15.buffer.ff[c15.ffPos][index + 6];
									center.y = c15.buffer.ff[c15.ffPos][index + 7];
								} else {
									center.x = 0;
									center.y = 0;
								}
							}
							if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
								openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(c15.buffer.ff[c15.ffPos][index] - offsetX,c15.buffer.ff[c15.ffPos][index + 1] - offsetY);
								if(useRotation) openfl__$internal_renderer_canvas_CanvasGraphics.context.rotate(c15.buffer.ff[c15.ffPos][index + rotationIndex]);
								var scale = 1.0;
								if(useScale) scale = c15.buffer.ff[c15.ffPos][index + scaleIndex];
								if(useTransform) openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(c15.buffer.ff[c15.ffPos][index + transformIndex],c15.buffer.ff[c15.ffPos][index + transformIndex + 1],c15.buffer.ff[c15.ffPos][index + transformIndex + 2],c15.buffer.ff[c15.ffPos][index + transformIndex + 3],0,0);
								if(useAlpha) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalAlpha = c15.buffer.ff[c15.ffPos][index + alphaIndex];
								openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled = c15.buffer.b[c15.bPos];
								openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(surface,rect.x,rect.y,rect.width,rect.height,-center.x * scale,-center.y * scale,rect.width * scale,rect.height * scale);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
							}
							index += numValues;
						}
						if(useBlendAdd) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalCompositeOperation = "source-over";
						break;
					default:
						data.advance();
						data.prev = type;
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
			if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
			data.destroy();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
				positionX = c.buffer.f[c.fPos + 4];
				positionY = c.buffer.f[c.fPos + 5];
				break;
			case 4:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c1 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				positionX = c1.buffer.f[c1.fPos + 2];
				positionY = c1.buffer.f[c1.fPos + 3];
				break;
			case 5:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c2 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2,true);
				break;
			case 6:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c3 = data;
				var x = c3.buffer.f[c3.fPos];
				var y = c3.buffer.f[c3.fPos + 1];
				var width = c3.buffer.f[c3.fPos + 2];
				var height = c3.buffer.f[c3.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 8:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c4 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 9:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c5 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.f[c5.fPos + 5]);
				break;
			case 16:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c6 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 17:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c7 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
		data.destroy();
	}
};
var openfl__$internal_renderer_canvas_CanvasMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasMaskManager"] = openfl__$internal_renderer_canvas_CanvasMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.__name__ = ["openfl","_internal","renderer","canvas","CanvasMaskManager"];
openfl__$internal_renderer_canvas_CanvasMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__getWorldTransform();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		mask.__renderCanvasMask(this.renderSession);
		context.clip();
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,popRect: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasMaskManager
});
var openfl__$internal_renderer_canvas_CanvasRenderer = function(width,height,context) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.context = context;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.context = context;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl__$internal_renderer_canvas_CanvasRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.__name__ = ["openfl","_internal","renderer","canvas","CanvasRenderer"];
openfl__$internal_renderer_canvas_CanvasRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	context: null
	,render: function(stage) {
		this.context.setTransform(1,0,0,1,0,0);
		this.context.globalAlpha = 1;
		if(!stage.__transparent && stage.__clearBeforeRender) {
			this.context.fillStyle = stage.__colorString;
			this.context.fillRect(0,0,stage.stageWidth,stage.stageHeight);
		} else if(stage.__transparent && stage.__clearBeforeRender) this.context.clearRect(0,0,stage.stageWidth,stage.stageHeight);
		stage.__renderCanvas(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasRenderer
});
var openfl__$internal_renderer_canvas_CanvasShape = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl__$internal_renderer_canvas_CanvasShape;
openfl__$internal_renderer_canvas_CanvasShape.__name__ = ["openfl","_internal","renderer","canvas","CanvasShape"];
openfl__$internal_renderer_canvas_CanvasShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession);
		if(graphics.__canvas != null) {
			var context = renderSession.context;
			var scrollRect = shape.get_scrollRect();
			if(graphics.__bounds.width > 0 && graphics.__bounds.height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
				if(shape.__mask != null) renderSession.maskManager.pushMask(shape.__mask);
				context.globalAlpha = shape.__worldAlpha;
				var transform = shape.__renderTransform;
				if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				if(scrollRect == null) context.drawImage(graphics.__canvas,graphics.__bounds.x,graphics.__bounds.y); else context.drawImage(graphics.__canvas,Math.ceil(graphics.__bounds.x + scrollRect.x),Math.ceil(graphics.__bounds.y + scrollRect.y),scrollRect.width,scrollRect.height,Math.ceil(graphics.__bounds.x + scrollRect.x),Math.ceil(graphics.__bounds.y + scrollRect.y),scrollRect.width,scrollRect.height);
				if(shape.__mask != null) renderSession.maskManager.popMask();
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
openfl__$internal_renderer_canvas_CanvasTextField.__name__ = ["openfl","_internal","renderer","canvas","CanvasTextField"];
openfl__$internal_renderer_canvas_CanvasTextField.context = null;
openfl__$internal_renderer_canvas_CanvasTextField.disableInputMode = function(textEngine) {
};
openfl__$internal_renderer_canvas_CanvasTextField.enableInputMode = function(textEngine) {
	textEngine.__cursorPosition = -1;
	if(textEngine.__hiddenInput == null) {
		textEngine.__hiddenInput = window.document.createElement("input");
		var hiddenInput = textEngine.__hiddenInput;
		hiddenInput.type = "text";
		hiddenInput.style.position = "absolute";
		hiddenInput.style.opacity = "0";
		hiddenInput.style.color = "transparent";
		hiddenInput.style.left = "0px";
		hiddenInput.style.top = "50%";
		if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
			hiddenInput.style.fontSize = "0px";
			hiddenInput.style.width = "0px";
			hiddenInput.style.height = "0px";
		} else {
			hiddenInput.style.width = "1px";
			hiddenInput.style.height = "1px";
		}
		hiddenInput.style.pointerEvents = "none";
		hiddenInput.style.zIndex = "-10000000";
		if(textEngine.maxChars > 0) hiddenInput.maxLength = textEngine.maxChars;
		window.document.body.appendChild(hiddenInput);
		hiddenInput.value = textEngine.text;
	}
};
openfl__$internal_renderer_canvas_CanvasTextField.render = function(textField,renderSession) {
	if(textField.__dirty) {
		var textEngine = textField.__textEngine;
		textField.__updateLayout();
		if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != openfl_text_TextFieldAutoSize.NONE) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			var bounds = textEngine.bounds;
			if(textField.__graphics == null || textField.__graphics.__canvas == null) {
				if(textField.__graphics == null) textField.__graphics = new openfl_display_Graphics();
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
				textField.__graphics.__bounds = new openfl_geom_Rectangle(0,0,bounds.width,bounds.height);
			}
			var graphics = textField.__graphics;
			openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(textEngine.displayAsPassword) {
					var length = text.length;
					var mask = "";
					var _g = 0;
					while(_g < length) {
						var i = _g++;
						mask += "*";
					}
					text = mask;
				}
				graphics.__canvas.width = Math.ceil(bounds.width);
				graphics.__canvas.height = Math.ceil(bounds.height);
				if(textEngine.antiAliasType != openfl_text_AntiAliasType.ADVANCED || textEngine.gridFitType != openfl_text_GridFitType.PIXEL) {
					graphics.__context.mozImageSmoothingEnabled = true;
					graphics.__context.msImageSmoothingEnabled = true;
					graphics.__context.imageSmoothingEnabled = true;
				} else {
					graphics.__context.mozImageSmoothingEnabled = false;
					graphics.__context.msImageSmoothingEnabled = false;
					graphics.__context.imageSmoothingEnabled = false;
				}
				if(textEngine.border || textEngine.background) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
				openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g1 = 0;
				var _g2 = textField.get_scrollV() - 1;
				while(_g1 < _g2) {
					var i1 = _g1++;
					scrollY -= textEngine.lineHeights[i1];
				}
				var advance;
				var offsetY = 0.0;
				var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
				var _g3 = 0;
				var _g11 = textEngine.layoutGroups;
				while(_g3 < _g11.length) {
					var group = _g11[_g3];
					++_g3;
					if(group.lineIndex < textField.get_scrollV() - 1) continue;
					if(group.lineIndex > textField.get_scrollV() + textEngine.bottomScrollV - 2) break;
					openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(group.format.color,6);
					if(applyHack) offsetY = group.format.size * 0.185;
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g31 = 0;
								var _g21 = textField.__caretIndex - group.startIndex;
								while(_g31 < _g21) {
									var i2 = _g31++;
									if(group.advances.length <= i2) break;
									advance += group.advances[i2];
								}
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance,group.offsetY,1,group.height);
							}
						} else if(group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex || group.startIndex <= textField.__selectionIndex && group.endIndex >= textField.__selectionIndex) {
							var selectionStart = Std["int"](Math.min(textField.__selectionIndex,textField.__caretIndex));
							var selectionEnd = Std["int"](Math.max(textField.__selectionIndex,textField.__caretIndex));
							if(group.startIndex > selectionStart) selectionStart = group.startIndex;
							if(group.endIndex < selectionEnd) selectionEnd = group.endIndex;
							var start;
							var end;
							start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= textEngine.text.length) {
								end = textField.getCharBoundaries(textEngine.text.length - 1);
								end.x += end.width + 2;
							} else end = textField.getCharBoundaries(selectionEnd);
							if(start != null && end != null) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x,start.y,end.x - start.x,group.height);
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
							}
						}
					}
				}
			} else {
				graphics.__canvas.width = Math.ceil(bounds.width);
				graphics.__canvas.height = Math.ceil(bounds.height);
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1); else openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					if(textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			textField.__dirty = false;
			graphics.set___dirty(false);
		}
	}
};
var openfl__$internal_renderer_console_ConsoleRenderer = function(width,height,ctx) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	throw new js__$Boot_HaxeError("ConsoleRenderer not supported");
};
$hxClasses["openfl._internal.renderer.console.ConsoleRenderer"] = openfl__$internal_renderer_console_ConsoleRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.__name__ = ["openfl","_internal","renderer","console","ConsoleRenderer"];
openfl__$internal_renderer_console_ConsoleRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function(stage) {
	}
	,__class__: openfl__$internal_renderer_console_ConsoleRenderer
});
var openfl__$internal_renderer_dom_DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl__$internal_renderer_dom_DOMBitmap;
openfl__$internal_renderer_dom_DOMBitmap.__name__ = ["openfl","_internal","renderer","dom","DOMBitmap"];
openfl__$internal_renderer_dom_DOMBitmap.render = function(bitmap,renderSession) {
	if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.bitmapData.image.buffer.__srcImage != null) openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderSession); else openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderSession);
	} else {
		if(bitmap.__image != null) {
			renderSession.element.removeChild(bitmap.__image);
			bitmap.__image = null;
			bitmap.__style = null;
		}
		if(bitmap.__canvas != null) {
			renderSession.element.removeChild(bitmap.__canvas);
			bitmap.__canvas = null;
			bitmap.__style = null;
		}
	}
};
openfl__$internal_renderer_dom_DOMBitmap.renderCanvas = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		if(!bitmap.smoothing) {
			bitmap.__context.mozImageSmoothingEnabled = false;
			bitmap.__context.msImageSmoothingEnabled = false;
			bitmap.__context.imageSmoothingEnabled = false;
		}
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__canvas,renderSession);
	}
	bitmap.bitmapData.__sync();
	bitmap.__canvas.width = bitmap.bitmapData.width;
	bitmap.__canvas.height = bitmap.bitmapData.height;
	bitmap.__context.globalAlpha = bitmap.__worldAlpha;
	bitmap.__context.drawImage(bitmap.bitmapData.image.buffer.__srcCanvas,0,0);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,false,true);
};
openfl__$internal_renderer_dom_DOMBitmap.renderImage = function(bitmap,renderSession) {
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.src = bitmap.bitmapData.image.buffer.__srcImage.src;
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__image,renderSession);
	}
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
var openfl__$internal_renderer_dom_DOMMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.dom.DOMMaskManager"] = openfl__$internal_renderer_dom_DOMMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.__name__ = ["openfl","_internal","renderer","dom","DOMMaskManager"];
openfl__$internal_renderer_dom_DOMMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,__class__: openfl__$internal_renderer_dom_DOMMaskManager
});
var openfl__$internal_renderer_dom_DOMRenderer = function(width,height,element) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.element = element;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.element = element;
	this.renderSession.roundPixels = true;
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('') 
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.renderSession.vendorPrefix = prefix.lowercase;
	if(prefix.lowercase == "webkit") this.renderSession.transformProperty = "-webkit-transform"; else this.renderSession.transformProperty = "transform";
	if(prefix.lowercase == "webkit") this.renderSession.transformOriginProperty = "-webkit-transform-origin"; else this.renderSession.transformOriginProperty = "transform-origin";
	this.renderSession.maskManager = new openfl__$internal_renderer_dom_DOMMaskManager(this.renderSession);
	this.renderSession.renderer = this;
};
$hxClasses["openfl._internal.renderer.dom.DOMRenderer"] = openfl__$internal_renderer_dom_DOMRenderer;
openfl__$internal_renderer_dom_DOMRenderer.__name__ = ["openfl","_internal","renderer","dom","DOMRenderer"];
openfl__$internal_renderer_dom_DOMRenderer.applyStyle = function(displayObject,renderSession,setTransform,setAlpha,setClip) {
	var style = displayObject.__style;
	if(setTransform && displayObject.__worldTransformChanged) style.setProperty(renderSession.transformProperty,displayObject.__worldTransform.to3DString(renderSession.roundPixels),null);
	if(displayObject.__worldZ != ++renderSession.z) {
		displayObject.__worldZ = renderSession.z;
		style.setProperty("z-index",displayObject.__worldZ == null?"null":"" + displayObject.__worldZ,null);
	}
	if(setAlpha && displayObject.__worldAlphaChanged) {
		if(displayObject.__worldAlpha < 1) style.setProperty("opacity",displayObject.__worldAlpha == null?"null":"" + displayObject.__worldAlpha,null); else style.removeProperty("opacity");
	}
	if(setClip && displayObject.__worldClipChanged) {
		if(displayObject.__worldClip == null) style.removeProperty("clip"); else {
			var clip = openfl_geom_Rectangle.__temp;
			var matrix = openfl_geom_Matrix.__temp;
			matrix.copyFrom(displayObject.__worldTransform);
			matrix.invert();
			displayObject.__worldClip.__transform(clip,matrix);
			style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
		}
	}
};
openfl__$internal_renderer_dom_DOMRenderer.initializeElement = function(displayObject,element,renderSession) {
	var style = displayObject.__style = element.style;
	style.setProperty("position","absolute",null);
	style.setProperty("top","0",null);
	style.setProperty("left","0",null);
	style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
	renderSession.element.appendChild(element);
	displayObject.__worldAlphaChanged = true;
	displayObject.__worldClipChanged = true;
	displayObject.__worldTransformChanged = true;
	displayObject.__worldVisibleChanged = true;
	displayObject.__worldZ = -1;
};
openfl__$internal_renderer_dom_DOMRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_dom_DOMRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	element: null
	,render: function(stage) {
		this.element.style.background = stage.__colorString;
		this.renderSession.z = 1;
		stage.__renderDOM(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_dom_DOMRenderer
});
var openfl__$internal_renderer_dom_DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl__$internal_renderer_dom_DOMShape;
openfl__$internal_renderer_dom_DOMShape.__name__ = ["openfl","_internal","renderer","dom","DOMShape"];
openfl__$internal_renderer_dom_DOMShape.render = function(shape,renderSession) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		if(graphics.__dirty || shape.__worldAlphaChanged || shape.__canvas == null && graphics.__canvas != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession);
			if(graphics.__canvas != null) {
				if(shape.__canvas == null) {
					shape.__canvas = window.document.createElement("canvas");
					shape.__context = shape.__canvas.getContext("2d");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(shape,shape.__canvas,renderSession);
				}
				shape.__canvas.width = graphics.__canvas.width;
				shape.__canvas.height = graphics.__canvas.height;
				shape.__context.globalAlpha = shape.__worldAlpha;
				shape.__context.drawImage(graphics.__canvas,0,0);
			} else if(shape.__canvas != null) {
				renderSession.element.removeChild(shape.__canvas);
				shape.__canvas = null;
				shape.__style = null;
			}
		}
		if(shape.__canvas != null) {
			if(shape.__worldTransformChanged || graphics.__transformDirty) {
				graphics.__transformDirty = false;
				var transform = openfl_geom_Matrix.__temp;
				transform.identity();
				transform.translate(graphics.__bounds.x,graphics.__bounds.y);
				transform.concat(shape.__worldTransform);
				shape.__style.setProperty(renderSession.transformProperty,renderSession.roundPixels?"matrix3d(" + transform.a + ", " + transform.b + ", 0, 0, " + transform.c + ", " + transform.d + ", 0, 0, 0, 0, 1, 0, " + (transform.tx | 0) + ", " + (transform.ty | 0) + ", 0, 1)":"matrix3d(" + transform.a + ", " + transform.b + ", 0, 0, " + transform.c + ", " + transform.d + ", 0, 0, 0, 0, 1, 0, " + transform.tx + ", " + transform.ty + ", 0, 1)",null);
			}
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(shape,renderSession,false,false,true);
		}
	} else if(shape.__canvas != null) {
		renderSession.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
var openfl__$internal_renderer_dom_DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl__$internal_renderer_dom_DOMTextField;
openfl__$internal_renderer_dom_DOMTextField.__name__ = ["openfl","_internal","renderer","dom","DOMTextField"];
openfl__$internal_renderer_dom_DOMTextField.measureText = function(textField) {
	var textEngine = textField.__textEngine;
	var div = textField.__div;
	if(div == null) {
		div = window.document.createElement("div");
		div.innerHTML = new EReg("\n","g").replace(textEngine.text,"<br>");
		div.style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
		div.style.setProperty("pointer-events","none",null);
		div.style.position = "absolute";
		div.style.top = "110%";
		window.document.body.appendChild(div);
	}
	textEngine.__measuredWidth = div.clientWidth;
	if(textField.__div == null) div.style.width = Std.string(textEngine.width - 4) + "px";
	textEngine.__measuredHeight = div.clientHeight;
	if(textField.__div == null) window.document.body.removeChild(div);
};
openfl__$internal_renderer_dom_DOMTextField.render = function(textField,renderSession) {
	var textEngine = textField.__textEngine;
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__div == null) {
			if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == openfl_text_TextFieldType.INPUT) {
				if(textField.__div == null) {
					textField.__div = window.document.createElement("div");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(textField,textField.__div,renderSession);
					textField.__style.setProperty("outline","none",null);
					textField.__div.addEventListener("input",function(event) {
						event.preventDefault();
						if(textField.get_htmlText() != textField.__div.innerHTML) {
							textField.set_htmlText(textField.__div.innerHTML);
							textField.__dirty = false;
						}
					},true);
				}
				if(textEngine.selectable) textField.__style.setProperty("cursor","text",null); else textField.__style.setProperty("cursor","inherit",null);
				textField.__div.contentEditable = textEngine.type == openfl_text_TextFieldType.INPUT;
				var style = textField.__style;
				textField.__div.innerHTML = textEngine.text;
				if(textEngine.background) style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor,6),null); else style.removeProperty("background-color");
				if(textEngine.border) style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor,6),null); else style.removeProperty("border");
				style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
				style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color,6),null);
				if(textEngine.autoSize != openfl_text_TextFieldAutoSize.NONE) style.setProperty("width","auto",null); else style.setProperty("width",textEngine.width + "px",null);
				style.setProperty("height",textEngine.height + "px",null);
				var _g = textField.__textFormat.align;
				switch(_g[1]) {
				case 3:
					style.setProperty("text-align","center",null);
					break;
				case 1:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderSession.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) openfl__$internal_renderer_dom_DOMRenderer.applyStyle(textField,renderSession,true,true,false);
	} else if(textField.__div != null) {
		renderSession.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
var openfl__$internal_renderer_opengl_GLBitmap = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLBitmap"] = openfl__$internal_renderer_opengl_GLBitmap;
openfl__$internal_renderer_opengl_GLBitmap.__name__ = ["openfl","_internal","renderer","opengl","GLBitmap"];
openfl__$internal_renderer_opengl_GLBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0 || bitmap.bitmapData == null || !bitmap.bitmapData.__isValid) return;
	renderSession.spriteBatch.renderBitmapData(bitmap.bitmapData,bitmap.smoothing,bitmap.__renderTransform,bitmap.__worldColorTransform,bitmap.__worldAlpha,bitmap.__blendMode,bitmap.__shader,bitmap.pixelSnapping);
};
openfl__$internal_renderer_opengl_GLBitmap.pushFramebuffer = function(renderSession,texture,viewPort,smoothing,transparent,clearBuffer,powerOfTwo) {
	if(powerOfTwo == null) powerOfTwo = true;
	if(clearBuffer == null) clearBuffer = false;
	if(transparent == null) transparent = true;
	var gl = renderSession.gl;
	if(gl == null) return null;
	var renderer = renderSession.renderer;
	var spritebatch = renderSession.spriteBatch;
	var x = viewPort.x | 0;
	var y = viewPort.y | 0;
	var width = viewPort.width | 0;
	var height = viewPort.height | 0;
	spritebatch.finish();
	if(openfl__$internal_renderer_opengl_GLBitmap.fbData.length <= 0) openfl__$internal_renderer_opengl_GLBitmap.fbData.push({ texture : null, viewPort : null, transparent : renderer.transparent});
	if(texture == null) texture = new openfl__$internal_renderer_opengl_utils_PingPongTexture(gl,width,height,smoothing,powerOfTwo);
	texture.resize(width,height);
	renderer.transparent = transparent;
	renderSession.maskManager.saveState();
	gl.bindFramebuffer(gl.FRAMEBUFFER,(texture.__swapped?texture.__texture1:texture.__texture0).frameBuffer);
	renderer.setViewport(x,y,width,height);
	gl.colorMask(true,true,true,true);
	renderSession.blendModeManager.setBlendMode(openfl_display_BlendMode.NORMAL);
	if(clearBuffer) (texture.__swapped?texture.__texture1:texture.__texture0).clear(0,0,0,0,null);
	openfl__$internal_renderer_opengl_GLBitmap.fbData.push({ texture : texture, viewPort : viewPort, transparent : transparent});
	return texture;
};
openfl__$internal_renderer_opengl_GLBitmap.drawBitmapDrawable = function(renderSession,target,source,matrix,colorTransform,blendMode,clipRect) {
	var data = openfl__$internal_renderer_opengl_GLBitmap.fbData[openfl__$internal_renderer_opengl_GLBitmap.fbData.length - 1];
	if(data == null) throw new js__$Boot_HaxeError("No data to draw to");
	var gl = renderSession.gl;
	if(gl == null) return;
	var viewPort = data.viewPort;
	var renderer = renderSession.renderer;
	var spritebatch = renderSession.spriteBatch;
	var drawTarget = target != null;
	var tmpRect;
	if(clipRect == null) tmpRect = new openfl_geom_Rectangle(viewPort.x,viewPort.y,viewPort.width,viewPort.height); else tmpRect = clipRect.clone();
	spritebatch.begin(renderSession,drawTarget?null:tmpRect);
	if(drawTarget) {
		target.__worldTransform.identity();
		openfl__$internal_renderer_opengl_GLBitmap.flipMatrix(target.__worldTransform,viewPort.height);
		target.__renderGL(renderSession);
		spritebatch.stop();
		if(target.__texture != null) gl.deleteTexture(target.__texture);
		target.__texture = null;
		spritebatch.start(tmpRect);
	}
	var ctCache = source.__worldColorTransform;
	var blendModeCache = source.__blendMode;
	var cached = source.__cacheAsBitmap;
	var m;
	if(matrix != null) m = new openfl_geom_Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty); else m = new openfl_geom_Matrix();
	openfl__$internal_renderer_opengl_GLBitmap.flipMatrix(m,viewPort.height);
	if(colorTransform != null) source.__worldColorTransform = colorTransform; else source.__worldColorTransform = new openfl_geom_ColorTransform();
	source.__blendMode = blendMode;
	openfl_display_DisplayObject.__cacheAsBitmapMode = true;
	source.__updateTransforms(m);
	source.__updateChildren(false);
	source.__cacheAsBitmap = false;
	source.__renderGL(renderSession);
	source.__cacheAsBitmap = cached;
	source.__worldColorTransform = ctCache;
	source.__blendMode = blendModeCache;
	openfl_display_DisplayObject.__cacheAsBitmapMode = false;
	source.__updateTransforms();
	source.__updateChildren(false);
};
openfl__$internal_renderer_opengl_GLBitmap.popFramebuffer = function(renderSession,image) {
	var gl = renderSession.gl;
	if(gl == null) return;
	renderSession.spriteBatch.finish();
	openfl__$internal_renderer_opengl_GLBitmap.fbData.pop();
	var data = openfl__$internal_renderer_opengl_GLBitmap.fbData[openfl__$internal_renderer_opengl_GLBitmap.fbData.length - 1];
	if(data == null) throw new js__$Boot_HaxeError("oh");
	var x;
	var y;
	var width;
	var height;
	if(data.viewPort == null) {
		x = y = 0;
		width = renderSession.renderer.width;
		height = renderSession.renderer.height;
	} else {
		x = Math.floor(data.viewPort.x);
		y = Math.floor(data.viewPort.y);
		width = Math.ceil(data.viewPort.width);
		height = Math.ceil(data.viewPort.height);
	}
	if(image != null) {
		if(image.width != width || image.height != height) image.resize(width,height);
		gl.readPixels(x,y,width,height,gl.RGBA,gl.UNSIGNED_BYTE,image.buffer.data);
		image.dirty = false;
		image.set_premultiplied(true);
	}
	gl.bindFramebuffer(gl.FRAMEBUFFER,data.texture == null?renderSession.defaultFramebuffer:data.texture.get_framebuffer());
	renderSession.renderer.setViewport(x,y,width,height);
	renderSession.renderer.transparent = data.transparent;
	renderSession.maskManager.restoreState();
};
openfl__$internal_renderer_opengl_GLBitmap.flipMatrix = function(m,height) {
	var tx = m.tx;
	var ty = m.ty;
	m.tx = 0;
	m.ty = 0;
	m.scale(1,-1);
	m.translate(0,height);
	m.tx += tx;
	m.ty -= ty;
};
var openfl__$internal_renderer_opengl_GLRenderer = function(width,height,gl,transparent,antialias,preserveDrawingBuffer) {
	if(preserveDrawingBuffer == null) preserveDrawingBuffer = false;
	if(antialias == null) antialias = false;
	if(transparent == null) transparent = false;
	if(height == null) height = 600;
	if(width == null) width = 800;
	this.vpHeight = 0;
	this.vpWidth = 0;
	this.vpY = 0;
	this.vpX = 0;
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.transparent = transparent;
	this.preserveDrawingBuffer = preserveDrawingBuffer;
	this.width = width;
	this.height = height;
	this.viewport = new openfl_geom_Rectangle();
	this.options = { alpha : transparent, antialias : antialias, premultipliedAlpha : transparent, stencil : true, preserveDrawingBuffer : preserveDrawingBuffer};
	this._glContextId = openfl__$internal_renderer_opengl_GLRenderer.glContextId++;
	this.gl = gl;
	this.defaultFramebuffer = null;
	openfl__$internal_renderer_opengl_GLRenderer.glContexts[this._glContextId] = gl;
	this.projectionMatrix = new openfl_geom_Matrix();
	this.projection = new openfl_geom_Point();
	this.projection.x = this.width / 2;
	this.projection.y = -this.height / 2;
	this.offset = new openfl_geom_Point(0,0);
	this.resize(this.width,this.height);
	this.contextLost = false;
	this.shaderManager = new openfl__$internal_renderer_opengl_utils_ShaderManager(gl);
	this.spriteBatch = new openfl__$internal_renderer_opengl_utils_SpriteBatch(gl);
	this.filterManager = new openfl__$internal_renderer_opengl_utils_FilterManager(gl,this.transparent);
	this.stencilManager = new openfl__$internal_renderer_opengl_utils_StencilManager(gl);
	this.blendModeManager = new openfl__$internal_renderer_opengl_utils_BlendModeManager(gl);
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.gl = this.gl;
	this.renderSession.drawCount = 0;
	this.renderSession.shaderManager = this.shaderManager;
	this.renderSession.filterManager = this.filterManager;
	this.renderSession.blendModeManager = this.blendModeManager;
	this.renderSession.spriteBatch = this.spriteBatch;
	this.renderSession.stencilManager = this.stencilManager;
	this.renderSession.renderer = this;
	this.renderSession.defaultFramebuffer = this.defaultFramebuffer;
	this.renderSession.projectionMatrix = this.projectionMatrix;
	this.maskManager = new openfl__$internal_renderer_opengl_utils_GLMaskManager(this.renderSession);
	this.renderSession.maskManager = this.maskManager;
	this.shaderManager.setShader(this.shaderManager.defaultShader);
	gl.disable(gl.DEPTH_TEST);
	gl.disable(gl.CULL_FACE);
	gl.enable(gl.BLEND);
	gl.colorMask(true,true,true,this.transparent);
};
$hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl__$internal_renderer_opengl_GLRenderer;
openfl__$internal_renderer_opengl_GLRenderer.__name__ = ["openfl","_internal","renderer","opengl","GLRenderer"];
openfl__$internal_renderer_opengl_GLRenderer.renderBitmap = function(shape,renderSession,smooth) {
	if(smooth == null) smooth = true;
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	if(shape.__graphics == null || shape.__graphics.__bitmap == null) return;
	var rect = openfl_geom_Rectangle.__temp;
	var matrix = openfl_geom_Matrix.__temp;
	rect.setEmpty();
	matrix.identity();
	shape.__getBounds(rect,matrix);
	var bitmap = shape.__graphics.__bitmap;
	matrix.translate(shape.__graphics.__bounds.x,shape.__graphics.__bounds.y);
	matrix.concat(shape.__renderTransform);
	renderSession.spriteBatch.renderBitmapData(bitmap,smooth,matrix,shape.__worldColorTransform,shape.__worldAlpha,shape.__blendMode,null,openfl_display_PixelSnapping.ALWAYS);
};
openfl__$internal_renderer_opengl_GLRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_opengl_GLRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	blendModeManager: null
	,contextLost: null
	,defaultFramebuffer: null
	,filterManager: null
	,gl: null
	,_glContextId: null
	,maskManager: null
	,offset: null
	,options: null
	,preserveDrawingBuffer: null
	,projection: null
	,shaderManager: null
	,spriteBatch: null
	,stencilManager: null
	,view: null
	,projectionMatrix: null
	,__stage: null
	,vpX: null
	,vpY: null
	,vpWidth: null
	,vpHeight: null
	,destroy: function() {
		openfl__$internal_renderer_opengl_GLRenderer.glContexts[this._glContextId] = null;
		this.projection = null;
		this.offset = null;
		this.shaderManager.destroy();
		this.spriteBatch.destroy();
		this.maskManager.destroy();
		this.filterManager.destroy();
		this.shaderManager = null;
		this.spriteBatch = null;
		this.maskManager = null;
		this.filterManager = null;
		this.gl = null;
		this.renderSession = null;
	}
	,setViewport: function(x,y,width,height) {
		if(!(this.vpX == x && this.vpY == y && this.vpWidth == width && this.vpHeight == height)) {
			this.vpX = x;
			this.vpY = y;
			this.vpWidth = width;
			this.vpHeight = height;
			this.gl.viewport(x,y,width,height);
			this.setOrtho(x,y,width,height);
			this.viewport.setTo(x,y,width,height);
		}
	}
	,setOrtho: function(x,y,width,height) {
		var o = this.projectionMatrix;
		o.identity();
		o.a = 1 / width * 2;
		o.d = -1 / height * 2;
		o.tx = -1 - x * o.a;
		o.ty = 1 - y * o.d;
	}
	,handleContextLost: function(event) {
		event.preventDefault();
		this.contextLost = true;
	}
	,handleContextRestored: function() {
		var gl = this.gl;
		openfl__$internal_renderer_opengl_GLRenderer.glContextId++;
		this.shaderManager.setContext(gl);
		this.spriteBatch.setContext(gl);
		this.maskManager.setContext(gl);
		this.filterManager.setContext(gl);
		this.renderSession.gl = gl;
		this.defaultFramebuffer = null;
		gl.disable(gl.DEPTH_TEST);
		gl.disable(gl.CULL_FACE);
		gl.enable(gl.BLEND);
		gl.colorMask(true,true,true,this.transparent);
		this.setViewport(0,0,this.width,this.height);
		this.contextLost = false;
	}
	,render: function(stage) {
		if(this.contextLost) return;
		var gl = this.gl;
		this.setViewport(0,0,this.width,this.height);
		gl.bindFramebuffer(gl.FRAMEBUFFER,this.defaultFramebuffer);
		if(this.transparent) gl.clearColor(0,0,0,0); else gl.clearColor(stage.__colorSplit[0],stage.__colorSplit[1],stage.__colorSplit[2],1);
		gl.clear(gl.COLOR_BUFFER_BIT);
		this.renderDisplayObject(stage,this.projection);
	}
	,renderDisplayObject: function(displayObject,projection,buffer) {
		this.renderSession.blendModeManager.setBlendMode(openfl_display_BlendMode.NORMAL);
		this.renderSession.drawCount = 0;
		this.renderSession.currentBlendMode = null;
		this.spriteBatch.begin(this.renderSession);
		this.filterManager.begin(this.renderSession,buffer);
		displayObject.__renderGL(this.renderSession);
		this.spriteBatch.finish();
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
		openfl__$internal_renderer_AbstractRenderer.prototype.resize.call(this,width,height);
		this.setViewport(0,0,width,height);
		this.projection.x = width / 2;
		this.projection.y = -height / 2;
	}
	,__class__: openfl__$internal_renderer_opengl_GLRenderer
});
var openfl__$internal_renderer_opengl_shaders2_Shader = function(gl) {
	this.wrapT = 33071;
	this.wrapS = 33071;
	this.compiled = false;
	this.uniforms = new haxe_ds_StringMap();
	this.attributes = new haxe_ds_StringMap();
	this.ID = openfl__$internal_renderer_opengl_shaders2_Shader.UID++;
	this.gl = gl;
	this.program = null;
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.Shader"] = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_Shader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","Shader"];
openfl__$internal_renderer_opengl_shaders2_Shader.compileProgram = function(gl,vertexSrc,fragmentSrc) {
	var cache = openfl__$internal_renderer_opengl_utils_ShaderManager.compiledShadersCache;
	var key = haxe_crypto_Md5.encode(vertexSrc + fragmentSrc);
	if(__map_reserved[key] != null?cache.existsReserved(key):cache.h.hasOwnProperty(key)) return __map_reserved[key] != null?cache.getReserved(key):cache.h[key];
	var vertexShader = openfl__$internal_renderer_opengl_shaders2_Shader.compileShader(gl,vertexSrc,gl.VERTEX_SHADER);
	var fragmentShader = openfl__$internal_renderer_opengl_shaders2_Shader.compileShader(gl,fragmentSrc,gl.FRAGMENT_SHADER);
	var program = gl.createProgram();
	if(vertexShader != null && fragmentShader != null) {
		gl.attachShader(program,vertexShader);
		gl.attachShader(program,fragmentShader);
		gl.linkProgram(program);
		gl.deleteShader(vertexShader);
		gl.deleteShader(fragmentShader);
		if(gl.getProgramParameter(program,gl.LINK_STATUS) == 0) {
			haxe_Log.trace("Could not compile the program:\n\t" + gl.getProgramInfoLog(program),{ fileName : "Shader.hx", lineNumber : 226, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileProgram"});
			haxe_Log.trace("VERTEX:\n" + vertexSrc + "\nFRAGMENT:\n" + fragmentSrc,{ fileName : "Shader.hx", lineNumber : 227, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileProgram"});
			return null;
		}
	}
	if(__map_reserved[key] != null) cache.setReserved(key,program); else cache.h[key] = program;
	return program;
};
openfl__$internal_renderer_opengl_shaders2_Shader.compileShader = function(gl,shaderSrc,type) {
	var src = shaderSrc;
	var shader = gl.createShader(type);
	gl.shaderSource(shader,src);
	gl.compileShader(shader);
	if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Could not compile the shader:\n\t" + gl.getShaderInfoLog(shader),{ fileName : "Shader.hx", lineNumber : 244, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileShader"});
		haxe_Log.trace(shaderSrc,{ fileName : "Shader.hx", lineNumber : 245, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileShader"});
		return null;
	}
	return shader;
};
openfl__$internal_renderer_opengl_shaders2_Shader.prototype = {
	gl: null
	,vertexSrc: null
	,fragmentSrc: null
	,attributes: null
	,uniforms: null
	,compiled: null
	,ID: null
	,program: null
	,wrapS: null
	,wrapT: null
	,smooth: null
	,blendMode: null
	,vertexString: null
	,fragmentString: null
	,init: function(force) {
		if(force == null) force = false;
		if(this.compiled && !force) return;
		if(this.vertexSrc != null) this.vertexString = this.vertexSrc.join("\n");
		if(this.fragmentSrc != null) this.fragmentString = this.fragmentSrc.join("\n");
		if(this.vertexString == null || this.fragmentString == null) throw new js__$Boot_HaxeError("No vertex or fragment source provided");
		this.program = openfl__$internal_renderer_opengl_shaders2_Shader.compileProgram(this.gl,this.vertexString,this.fragmentString);
		if(this.program != null) this.compiled = true;
	}
	,destroy: function() {
		if(this.program != null) this.gl.deleteProgram(this.program);
		this.compiled = false;
		this.attributes = null;
	}
	,applyData: function(shaderData,renderSession) {
		if(shaderData == null) return;
		var param;
		var u;
		var v;
		var bd;
		var $it0 = shaderData.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			u = this.getUniformLocation(key);
			param = __map_reserved[key] != null?shaderData.getReserved(key):shaderData.h[key];
			if(param == null) continue;
			v = param.value;
			bd = param.bitmap;
			if(v == null && bd == null) continue;
			var _g = param.internalType;
			switch(_g) {
			case 1:
				var _g1 = param.size;
				switch(_g1) {
				case 1:
					this.gl.uniform1i(u,v[0] | 0);
					break;
				case 2:
					this.gl.uniform2i(u,v[0] | 0,v[1] | 0);
					break;
				case 3:
					this.gl.uniform3i(u,v[0] | 0,v[1] | 0,v[2] | 0);
					break;
				case 4:
					this.gl.uniform4i(u,v[0] | 0,v[1] | 0,v[2] | 0,v[3] | 0);
					break;
				}
				break;
			case 2:
				var _g11 = param.size;
				switch(_g11) {
				case 1:
					this.gl.uniform1f(u,v[0]);
					break;
				case 2:
					this.gl.uniform2f(u,v[0],v[1]);
					break;
				case 3:
					this.gl.uniform3f(u,v[0],v[1],v[2]);
					break;
				case 4:
					this.gl.uniform4f(u,v[0],v[1],v[2],v[3]);
					break;
				}
				break;
			case 3:
				var _g12 = param.size;
				switch(_g12) {
				case 2:
					this.gl.uniformMatrix2fv(u,param.transpose,(function($this) {
						var $r;
						var array = param.value;
						var this1;
						if(array != null) this1 = new Float32Array(array); else this1 = null;
						$r = this1;
						return $r;
					}(this)));
					break;
				case 3:
					this.gl.uniformMatrix3fv(u,param.transpose,(function($this) {
						var $r;
						var array1 = param.value;
						var this2;
						if(array1 != null) this2 = new Float32Array(array1); else this2 = null;
						$r = this2;
						return $r;
					}(this)));
					break;
				case 4:
					this.gl.uniformMatrix4fv(u,param.transpose,(function($this) {
						var $r;
						var array2 = param.value;
						var this3;
						if(array2 != null) this3 = new Float32Array(array2); else this3 = null;
						$r = this3;
						return $r;
					}(this)));
					break;
				}
				break;
			case 4:
				if(bd == null || !bd.__isValid) continue;
				this.gl.activeTexture(this.gl.TEXTURE0 + renderSession.activeTextures);
				this.gl.bindTexture(this.gl.TEXTURE_2D,bd.getTexture(this.gl));
				this.gl.uniform1i(u,renderSession.activeTextures);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,param.smooth?this.gl.LINEAR:this.gl.NEAREST);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,param.smooth?this.gl.LINEAR:this.gl.NEAREST);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,param.repeatX);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,param.repeatY);
				renderSession.activeTextures++;
				break;
			default:
			}
		}
	}
	,getAttribLocation: function(attribute) {
		if(this.program == null) throw new js__$Boot_HaxeError("Shader isn't initialized");
		if(this.attributes.exists(attribute)) return this.attributes.get(attribute); else {
			var location = this.gl.getAttribLocation(this.program,attribute);
			this.attributes.set(attribute,location);
			return location;
		}
	}
	,getUniformLocation: function(uniform) {
		if(this.program == null) throw new js__$Boot_HaxeError("Shader isn't initialized");
		if(this.uniforms.exists(uniform)) return this.uniforms.get(uniform); else {
			var location = this.gl.getUniformLocation(this.program,uniform);
			this.uniforms.set(uniform,location);
			return location;
		}
	}
	,enableVertexAttribute: function(attribute,stride,offset) {
		var location = this.getAttribLocation(attribute.name);
		this.gl.enableVertexAttribArray(location);
		this.gl.vertexAttribPointer(location,attribute.components,attribute.type,attribute.normalized,stride,offset * 4);
	}
	,disableVertexAttribute: function(attribute,setDefault) {
		if(setDefault == null) setDefault = true;
		var location = this.getAttribLocation(attribute.name);
		this.gl.disableVertexAttribArray(location);
		if(setDefault) {
			var _g = attribute.components;
			switch(_g) {
			case 1:
				this.gl.vertexAttrib1fv(location,attribute.defaultValue.subarray(0,1));
				break;
			case 2:
				this.gl.vertexAttrib2fv(location,attribute.defaultValue.subarray(0,2));
				break;
			case 3:
				this.gl.vertexAttrib3fv(location,attribute.defaultValue.subarray(0,3));
				break;
			default:
				this.gl.vertexAttrib4fv(location,attribute.defaultValue.subarray(0,4));
			}
		}
	}
	,bindVertexArray: function(va) {
		var offset = 0;
		var stride = va.get_stride();
		var _g = 0;
		var _g1 = va.attributes;
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			if(attribute.enabled) {
				this.enableVertexAttribute(attribute,stride,offset);
				offset += Math.floor(attribute.components * attribute.getElementsBytes() / 4);
			} else this.disableVertexAttribute(attribute,true);
		}
	}
	,unbindVertexArray: function(va) {
		var _g = 0;
		var _g1 = va.attributes;
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			this.disableVertexAttribute(attribute,false);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_Shader
};
var openfl__$internal_renderer_opengl_shaders2_DefaultShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = openfl__$internal_renderer_opengl_shaders2_DefaultShader.VERTEX_SRC;
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform sampler2D " + "openfl_uSampler0" + ";","uniform vec4 " + "openfl_uColorMultiplier" + ";","uniform vec4 " + "openfl_uColorOffset" + ";","uniform bool " + "openfl_uUseColorTransform" + ";","varying vec2 " + "openfl_vTexCoord" + ";","varying vec4 " + "openfl_vColor" + ";","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","\tif(!" + "openfl_uUseColorTransform" + ") {","\t\treturn color * tint;","\t}","\tvec4 unmultiply;","\tif (color.a == 0.0) {","\t\tunmultiply = vec4(0.0, 0.0, 0.0, 0.0);","\t} else {","   \tunmultiply = vec4(color.rgb / color.a, color.a);","\t}","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec4 tc = texture2D(" + "openfl_uSampler0" + ", " + "openfl_vTexCoord" + ");","   gl_FragColor = colorTransform(tc, " + "openfl_vColor" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.DefaultShader"] = openfl__$internal_renderer_opengl_shaders2_DefaultShader;
openfl__$internal_renderer_opengl_shaders2_DefaultShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","DefaultShader"];
openfl__$internal_renderer_opengl_shaders2_DefaultShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_DefaultShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function(force) {
		if(force == null) force = false;
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this,force);
		this.getAttribLocation("openfl_aPosition");
		this.getAttribLocation("openfl_aTexCoord0");
		this.getAttribLocation("openfl_aColor");
		this.getUniformLocation("openfl_uProjectionMatrix");
		this.getUniformLocation("openfl_uSampler0");
		this.getUniformLocation("openfl_uColorMultiplier");
		this.getUniformLocation("openfl_uColorOffset");
		this.getUniformLocation("openfl_uUseColorTransform");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_DefaultShader
});
var openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";","attribute vec2 " + "openfl_aTexCoord0" + ";","attribute vec4 " + "openfl_aColor" + ";","uniform mat3 " + "openfl_uProjectionMatrix" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","void main(void) {","   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vTexCoord = " + "openfl_aTexCoord0" + ";","   vColor = " + "openfl_aColor" + ".bgra;","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform sampler2D " + "openfl_uSampler0" + ";","uniform vec3 " + "openfl_uColor" + ";","uniform bool " + "openfl_uUseTexture" + ";","uniform float " + "openfl_uAlpha" + ";","uniform vec4 " + "openfl_uColorMultiplier" + ";","uniform vec4 " + "openfl_uColorOffset" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","vec4 tmp;","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   if(" + "openfl_uUseTexture" + ") {","       tmp = texture2D(" + "openfl_uSampler0" + ", vTexCoord);","   } else {","       tmp = vec4(" + "openfl_uColor" + ", 1.);","   }","   gl_FragColor = colorTransform(tmp, vColor, " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader"] = openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader;
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","DrawTrianglesShader"];
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function(force) {
		if(force == null) force = false;
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this,force);
		this.getAttribLocation("openfl_aPosition");
		this.getAttribLocation("openfl_aTexCoord0");
		this.getAttribLocation("openfl_aColor");
		this.getUniformLocation("openfl_uSampler0");
		this.getUniformLocation("openfl_uProjectionMatrix");
		this.getUniformLocation("openfl_uColor");
		this.getUniformLocation("openfl_uAlpha");
		this.getUniformLocation("openfl_uUseTexture");
		this.getUniformLocation("openfl_uColorMultiplier");
		this.getUniformLocation("openfl_uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader
});
var openfl__$internal_renderer_opengl_shaders2_FillShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";","uniform mat3 " + "openfl_uTranslationMatrix" + ";","uniform mat3 " + "openfl_uProjectionMatrix" + ";","uniform vec4 " + "openfl_uColor" + ";","uniform float " + "openfl_uAlpha" + ";","uniform vec4 " + "openfl_uColorMultiplier" + ";","uniform vec4 " + "openfl_uColorOffset" + ";","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 result = color * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * " + "openfl_uTranslationMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vColor = colorTransform(" + "openfl_uColor" + ", " + "openfl_uAlpha" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.FillShader"] = openfl__$internal_renderer_opengl_shaders2_FillShader;
openfl__$internal_renderer_opengl_shaders2_FillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","FillShader"];
openfl__$internal_renderer_opengl_shaders2_FillShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_FillShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function(force) {
		if(force == null) force = false;
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this,force);
		this.getAttribLocation("openfl_aPosition");
		this.getUniformLocation("openfl_uTranslationMatrix");
		this.getUniformLocation("openfl_uProjectionMatrix");
		this.getUniformLocation("openfl_uColor");
		this.getUniformLocation("openfl_uColorMultiplier");
		this.getUniformLocation("openfl_uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_FillShader
});
var openfl__$internal_renderer_opengl_shaders2_PatternFillShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";","uniform mat3 " + "openfl_uTranslationMatrix" + ";","uniform mat3 " + "openfl_uProjectionMatrix" + ";","uniform mat3 " + "openfl_uPatternMatrix" + ";","varying vec2 vPosition;","void main(void) {","   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * " + "openfl_uTranslationMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vPosition = (" + "openfl_uPatternMatrix" + " * vec3(" + "openfl_aPosition" + ", 1)).xy;","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform float " + "openfl_uAlpha" + ";","uniform vec2 " + "openfl_uPatternTL" + ";","uniform vec2 " + "openfl_uPatternBR" + ";","uniform sampler2D " + "openfl_uSampler0" + ";","uniform vec4 " + "openfl_uColorMultiplier" + ";","uniform vec4 " + "openfl_uColorOffset" + ";","varying vec2 vPosition;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec2 pos = mix(" + "openfl_uPatternTL" + ", " + "openfl_uPatternBR" + ", vPosition);","   vec4 tcol = texture2D(" + "openfl_uSampler0" + ", pos);","   gl_FragColor = colorTransform(tcol, " + "openfl_uAlpha" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.PatternFillShader"] = openfl__$internal_renderer_opengl_shaders2_PatternFillShader;
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","PatternFillShader"];
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function(force) {
		if(force == null) force = false;
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this,force);
		this.getAttribLocation("openfl_aPosition");
		this.getUniformLocation("openfl_uTranslationMatrix");
		this.getUniformLocation("openfl_uPatternMatrix");
		this.getUniformLocation("openfl_uProjectionMatrix");
		this.getUniformLocation("openfl_uSampler0");
		this.getUniformLocation("openfl_uPatternTL");
		this.getUniformLocation("openfl_uPatternBR");
		this.getUniformLocation("openfl_uAlpha");
		this.getUniformLocation("openfl_uColorMultiplier");
		this.getUniformLocation("openfl_uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_PatternFillShader
});
var openfl__$internal_renderer_opengl_shaders2_PrimitiveShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";","attribute vec4 " + "openfl_aColor" + ";","uniform mat3 " + "openfl_uTranslationMatrix" + ";","uniform mat3 " + "openfl_uProjectionMatrix" + ";","uniform vec4 " + "openfl_uColorMultiplier" + ";","uniform vec4 " + "openfl_uColorOffset" + ";","uniform float " + "openfl_uAlpha" + ";","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 result = color * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * " + "openfl_uTranslationMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vColor = colorTransform(" + "openfl_aColor" + ", " + "openfl_uAlpha" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.PrimitiveShader"] = openfl__$internal_renderer_opengl_shaders2_PrimitiveShader;
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","PrimitiveShader"];
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function(force) {
		if(force == null) force = false;
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this,force);
		this.getAttribLocation("openfl_aPosition");
		this.getAttribLocation("openfl_aColor");
		this.getUniformLocation("openfl_uTranslationMatrix");
		this.getUniformLocation("openfl_uProjectionMatrix");
		this.getUniformLocation("openfl_uAlpha");
		this.getUniformLocation("openfl_uColorMultiplier");
		this.getUniformLocation("openfl_uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_PrimitiveShader
});
var openfl__$internal_renderer_opengl_utils_BlendModeManager = function(gl) {
	this.gl = gl;
	this.currentBlendMode = null;
};
$hxClasses["openfl._internal.renderer.opengl.utils.BlendModeManager"] = openfl__$internal_renderer_opengl_utils_BlendModeManager;
openfl__$internal_renderer_opengl_utils_BlendModeManager.__name__ = ["openfl","_internal","renderer","opengl","utils","BlendModeManager"];
openfl__$internal_renderer_opengl_utils_BlendModeManager.prototype = {
	currentBlendMode: null
	,gl: null
	,destroy: function() {
		this.gl = null;
	}
	,setBlendMode: function(blendMode,force) {
		if(force == null) force = false;
		if(blendMode == null) {
			blendMode = openfl_display_BlendMode.NORMAL;
			force = true;
		}
		if(!force && this.currentBlendMode == blendMode) return false;
		this.currentBlendMode = blendMode;
		switch(blendMode[1]) {
		case 0:
			this.gl.blendEquation(32774);
			this.gl.blendFunc(1,1);
			break;
		case 9:
			this.gl.blendEquation(32774);
			this.gl.blendFunc(774,771);
			break;
		case 12:
			this.gl.blendEquation(32774);
			this.gl.blendFunc(1,769);
			break;
		case 14:
			this.gl.blendEquation(32779);
			this.gl.blendFunc(1,1);
			break;
		default:
			this.gl.blendEquation(32774);
			this.gl.blendFunc(1,771);
		}
		return true;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_BlendModeManager
};
var openfl__$internal_renderer_opengl_utils_DrawPath = function(makeArray) {
	if(makeArray == null) makeArray = true;
	this.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
	this.points = null;
	this.winding = 0;
	this.isRemovable = true;
	this.fillIndex = 0;
	this.line = new openfl__$internal_renderer_opengl_utils_LineStyle();
	this.fill = openfl__$internal_renderer_opengl_utils_FillType.None;
	if(makeArray) this.points = [];
};
$hxClasses["openfl._internal.renderer.opengl.utils.DrawPath"] = openfl__$internal_renderer_opengl_utils_DrawPath;
openfl__$internal_renderer_opengl_utils_DrawPath.__name__ = ["openfl","_internal","renderer","opengl","utils","DrawPath"];
openfl__$internal_renderer_opengl_utils_DrawPath.getStack = function(graphics,gl) {
	return openfl__$internal_renderer_opengl_utils_PathBuiler.build(graphics,gl);
};
openfl__$internal_renderer_opengl_utils_DrawPath.prototype = {
	line: null
	,fill: null
	,fillIndex: null
	,isRemovable: null
	,winding: null
	,points: null
	,type: null
	,update: function(line,fill,fillIndex,winding) {
		this.updateLine(line);
		this.fill = fill;
		this.fillIndex = fillIndex;
		this.winding = winding;
	}
	,updateLine: function(line) {
		this.line.width = line.width;
		this.line.color = line.color;
		if(line.alpha == null) this.line.alpha = 1; else this.line.alpha = line.alpha;
		if(line.scaleMode == null) this.line.scaleMode = openfl_display_LineScaleMode.NORMAL; else this.line.scaleMode = line.scaleMode;
		if(line.caps == null) this.line.caps = openfl_display_CapsStyle.ROUND; else this.line.caps = line.caps;
		if(line.joints == null) this.line.joints = openfl_display_JointStyle.ROUND; else this.line.joints = line.joints;
		this.line.miterLimit = line.miterLimit;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_DrawPath
};
var openfl__$internal_renderer_opengl_utils_PathBuiler = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.PathBuiler"] = openfl__$internal_renderer_opengl_utils_PathBuiler;
openfl__$internal_renderer_opengl_utils_PathBuiler.__name__ = ["openfl","_internal","renderer","opengl","utils","PathBuiler"];
openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__line = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.closePath = function() {
	var l;
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null) l = 0; else l = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length;
	if(l <= 0) return;
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type == openfl__$internal_renderer_opengl_utils_GraphicType.Polygon && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.fill != openfl__$internal_renderer_opengl_utils_FillType.None) {
		var sx = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[0];
		var sy = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[1];
		var ex = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[l - 2];
		var ey = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[l - 1];
		if(!(sx == ex && sy == ey)) openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(sx,sy);
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.endFill = function() {
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex++;
};
openfl__$internal_renderer_opengl_utils_PathBuiler.moveTo = function(x,y) {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(x);
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(y);
	openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
};
openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo = function(x,y) {
	var points = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points;
	var push_point = true;
	if(points.length > 1) {
		var lastX = points[points.length - 2];
		var lastY = points[points.length - 1];
		if(lastX == x && lastY == y) push_point = false;
	}
	if(push_point == true) {
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(x);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(y);
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.curveTo = function(cx,cy,x,y) {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
		if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
	}
	openfl__$internal_renderer_GraphicsPaths.curveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,cx,cy,x,y);
};
openfl__$internal_renderer_opengl_utils_PathBuiler.cubicCurveTo = function(cx,cy,cx2,cy2,x,y) {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
		if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
	}
	openfl__$internal_renderer_GraphicsPaths.cubicCurveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,cx,cy,cx2,cy2,x,y);
};
openfl__$internal_renderer_opengl_utils_PathBuiler.graphicDataPop = function() {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
};
openfl__$internal_renderer_opengl_utils_PathBuiler.build = function(graphics,gl) {
	var glStack = null;
	var bounds = graphics.__bounds;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths = [];
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__line = new openfl__$internal_renderer_opengl_utils_LineStyle();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex = 0;
	glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
	if(glStack == null) glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId] = new openfl__$internal_renderer_opengl_utils_GLStack(gl);
	if(!graphics.__visible || graphics.__commands.get_length() == 0 || bounds == null || bounds.width == 0 || bounds.height == 0) {
	} else {
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				c = data;
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				if(c.buffer.o[c.oPos] != null) openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.Texture(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]); else openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				break;
			case 1:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				c1 = data;
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				if(c1.buffer.f[c1.fPos] > 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.Color(c1.buffer.i[c1.iPos] & 16777215,c1.buffer.f[c1.fPos]); else openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				break;
			case 3:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c2 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				openfl__$internal_renderer_GraphicsPaths.cubicCurveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1],c2.buffer.f[c2.fPos + 2],c2.buffer.f[c2.fPos + 3],c2.buffer.f[c2.fPos + 4],c2.buffer.f[c2.fPos + 5]);
				break;
			case 4:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c3 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				openfl__$internal_renderer_GraphicsPaths.curveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3]);
				break;
			case 5:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c4 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Circle;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2]];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 6:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c5 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 8:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c6 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle(false);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 9:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c7 = data;
				var x = c7.buffer.f[c7.fPos];
				var y = c7.buffer.f[c7.fPos + 1];
				var width = c7.buffer.f[c7.fPos + 2];
				var height = c7.buffer.f[c7.fPos + 3];
				var rx = c7.buffer.f[c7.fPos + 4];
				var ry = c7.buffer.f[c7.fPos + 5];
				if(ry == -1) ry = rx;
				rx *= 0.5;
				ry *= 0.5;
				if(rx > width / 2) rx = width / 2;
				if(ry > height / 2) ry = height / 2;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle(true);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [x,y,width,height,rx,ry];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 12:
				var c8;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				c8 = data;
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				break;
			case 15:
				var c9;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				c9 = data;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line = new openfl__$internal_renderer_opengl_utils_LineStyle();
				if(c9.buffer.o[c9.oPos] == null || isNaN(c9.buffer.o[c9.oPos]) || c9.buffer.o[c9.oPos] < 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = 0; else if(c9.buffer.o[c9.oPos] == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = 1; else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = c9.buffer.o[c9.oPos];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				if(c9.buffer.o[c9.oPos + 1] == null) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.color = 0; else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.color = c9.buffer.o[c9.oPos + 1];
				if(c9.buffer.o[c9.oPos + 2] == null) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.alpha = 1; else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.alpha = c9.buffer.o[c9.oPos + 2];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.scaleMode = c9.buffer.o[c9.oPos + 4];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.caps = c9.buffer.o[c9.oPos + 5];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.joints = c9.buffer.o[c9.oPos + 6];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.miterLimit = c9.buffer.o[c9.oPos + 7];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 16:
				var c10;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c10 = data;
				openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1]);
				break;
			case 17:
				var c11;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c11 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(c11.buffer.f[c11.fPos]);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(c11.buffer.f[c11.fPos + 1]);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 11:
				var c12;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				c12 = data;
				var uvtData = c12.buffer.o[c12.oPos + 2];
				var vertices = c12.buffer.o[c12.oPos];
				var indices = c12.buffer.o[c12.oPos + 1];
				var culling = c12.buffer.o[c12.oPos + 3];
				var colors = c12.buffer.o[c12.oPos + 4];
				var blendMode = c12.buffer.i[c12.iPos];
				var isColor;
				{
					var _g2 = openfl__$internal_renderer_opengl_utils_PathBuiler.__fill;
					switch(_g2[1]) {
					case 1:
						isColor = true;
						break;
					default:
						isColor = false;
					}
				}
				if(isColor && uvtData != null) continue;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				if(uvtData == null) {
					var this1;
					this1 = new openfl_VectorData();
					var this2;
					this2 = new Array(0);
					this1.data = this2;
					this1.length = 0;
					this1.fixed = false;
					uvtData = this1;
					{
						var _g21 = openfl__$internal_renderer_opengl_utils_PathBuiler.__fill;
						switch(_g21[1]) {
						case 2:
							var b = _g21[2];
							var _g4 = 0;
							var _g3 = vertices.length / 2 | 0;
							while(_g4 < _g3) {
								var i = _g4++;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data1;
										var this3;
										this3 = new Array(uvtData.data.length + 10);
										data1 = this3;
										haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data1,0,uvtData.data.length);
										uvtData.data = data1;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i * 2] / b.width;
								}
								uvtData.length;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data2;
										var this4;
										this4 = new Array(uvtData.data.length + 10);
										data2 = this4;
										haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data2,0,uvtData.data.length);
										uvtData.data = data2;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i * 2 + 1] / b.height;
								}
								uvtData.length;
							}
							break;
						default:
						}
					}
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.DrawTriangles(vertices,indices,uvtData,culling,colors,blendMode);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 10:
				var c13;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
				c13 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex++;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath(false);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.DrawTiles(c13.buffer.ts[c13.tsPos],c13.buffer.ff[c13.ffPos],c13.buffer.b[c13.bPos],c13.buffer.i[c13.iPos],c13.buffer.o[c13.oPos],c13.buffer.i[c13.iPos + 1]);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 7:
				var c14;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_PATH;
				c14 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				switch(c14.buffer.o[c14.oPos + 2]) {
				case openfl_display_GraphicsPathWinding.EVEN_ODD:
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
					break;
				case openfl_display_GraphicsPathWinding.NON_ZERO:
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 1;
					break;
				default:
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
				}
				var command;
				var cx;
				var cy;
				var cx2;
				var cy2;
				var ax;
				var ay;
				var idx = 0;
				var _g31 = 0;
				var _g22 = c14.buffer.o[c14.oPos].length;
				while(_g31 < _g22) {
					var i1 = _g31++;
					command = c14.buffer.o[c14.oPos].data[i1];
					switch(command) {
					case 1:
						ax = c14.buffer.o[c14.oPos + 1].data[idx];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 1];
						idx += 2;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ax);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ay);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 4:
						ax = c14.buffer.o[c14.oPos + 1].data[idx + 2];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 3];
						idx += 4;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ax);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ay);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 2:
						ax = c14.buffer.o[c14.oPos + 1].data[idx];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 1];
						idx += 2;
						openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(ax,ay);
						break;
					case 5:
						ax = c14.buffer.o[c14.oPos + 1].data[idx + 2];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 3];
						idx += 4;
						openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(ax,ay);
						break;
					case 3:
						cx = c14.buffer.o[c14.oPos + 1].data[idx];
						cy = c14.buffer.o[c14.oPos + 1].data[idx + 1];
						ax = c14.buffer.o[c14.oPos + 1].data[idx + 2];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 3];
						idx += 4;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
							if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						}
						openfl__$internal_renderer_GraphicsPaths.curveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,cx,cy,ax,ay);
						break;
					case 6:
						cx = c14.buffer.o[c14.oPos + 1].data[idx];
						cy = c14.buffer.o[c14.oPos + 1].data[idx + 1];
						cx2 = c14.buffer.o[c14.oPos + 1].data[idx + 2];
						cy2 = c14.buffer.o[c14.oPos + 1].data[idx + 3];
						ax = c14.buffer.o[c14.oPos + 1].data[idx + 4];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 5];
						idx += 6;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
							if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						}
						openfl__$internal_renderer_GraphicsPaths.cubicCurveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,cx,cy,cx2,cy2,ax,ay);
						break;
					default:
					}
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
				break;
			case 18:
				var c15;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
				c15 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.OverrideMatrix(c15.buffer.o[c15.oPos]);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
		openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
		data.destroy();
	}
	graphics.__drawPaths = openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths;
	return glStack;
};
var openfl__$internal_renderer_opengl_utils_LineStyle = function() {
	this.width = 0;
	this.color = 0;
	this.alpha = 1;
	this.scaleMode = openfl_display_LineScaleMode.NORMAL;
	this.caps = openfl_display_CapsStyle.ROUND;
	this.joints = openfl_display_JointStyle.ROUND;
	this.miterLimit = 3;
};
$hxClasses["openfl._internal.renderer.opengl.utils.LineStyle"] = openfl__$internal_renderer_opengl_utils_LineStyle;
openfl__$internal_renderer_opengl_utils_LineStyle.__name__ = ["openfl","_internal","renderer","opengl","utils","LineStyle"];
openfl__$internal_renderer_opengl_utils_LineStyle.prototype = {
	width: null
	,color: null
	,alpha: null
	,scaleMode: null
	,caps: null
	,joints: null
	,miterLimit: null
	,__class__: openfl__$internal_renderer_opengl_utils_LineStyle
};
var openfl__$internal_renderer_opengl_utils_FillType = $hxClasses["openfl._internal.renderer.opengl.utils.FillType"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","FillType"], __constructs__ : ["None","Color","Texture","Gradient"] };
openfl__$internal_renderer_opengl_utils_FillType.None = ["None",0];
openfl__$internal_renderer_opengl_utils_FillType.None.toString = $estr;
openfl__$internal_renderer_opengl_utils_FillType.None.__enum__ = openfl__$internal_renderer_opengl_utils_FillType;
openfl__$internal_renderer_opengl_utils_FillType.Color = function(color,alpha) { var $x = ["Color",1,color,alpha]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_FillType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_FillType.Texture = function(bitmap,matrix,repeat,smooth) { var $x = ["Texture",2,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_FillType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_FillType.Gradient = ["Gradient",3];
openfl__$internal_renderer_opengl_utils_FillType.Gradient.toString = $estr;
openfl__$internal_renderer_opengl_utils_FillType.Gradient.__enum__ = openfl__$internal_renderer_opengl_utils_FillType;
var openfl__$internal_renderer_opengl_utils_FilterManager = function(gl,transparent) {
	this.transparent = transparent;
	this.filterStack = [];
	this.offsetX = 0;
	this.offsetY = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.FilterManager"] = openfl__$internal_renderer_opengl_utils_FilterManager;
openfl__$internal_renderer_opengl_utils_FilterManager.__name__ = ["openfl","_internal","renderer","opengl","utils","FilterManager"];
openfl__$internal_renderer_opengl_utils_FilterManager.prototype = {
	buffer: null
	,colorArray: null
	,colorBuffer: null
	,defaultShader: null
	,filterStack: null
	,gl: null
	,height: null
	,indexBuffer: null
	,offsetX: null
	,offsetY: null
	,renderSession: null
	,texturePool: null
	,transparent: null
	,uvArray: null
	,uvBuffer: null
	,vertexArray: null
	,vertexBuffer: null
	,width: null
	,applyFilterPass: function(filter,filterArea,width,height) {
	}
	,begin: function(renderSession,buffer) {
		this.renderSession = renderSession;
		this.defaultShader = renderSession.shaderManager.defaultShader;
		this.width = 0;
		this.height = 0;
		this.buffer = buffer;
	}
	,destroy: function() {
		var gl = this.gl;
		this.filterStack = null;
		this.offsetX = 0;
		this.offsetY = 0;
		var _g = 0;
		var _g1 = this.texturePool;
		while(_g < _g1.length) {
			var texture = _g1[_g];
			++_g;
			texture.destroy();
		}
		this.texturePool = null;
		gl.deleteBuffer(this.vertexBuffer);
		gl.deleteBuffer(this.uvBuffer);
		gl.deleteBuffer(this.colorBuffer);
		gl.deleteBuffer(this.indexBuffer);
	}
	,initShaderBuffers: function() {
		var gl = this.gl;
		this.vertexBuffer = gl.createBuffer();
		this.uvBuffer = gl.createBuffer();
		this.colorBuffer = gl.createBuffer();
		this.indexBuffer = gl.createBuffer();
		var array = [0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		this.vertexArray = this1;
		gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.vertexArray,gl.STATIC_DRAW);
		var array1 = [0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0];
		var this2;
		if(array1 != null) this2 = new Float32Array(array1); else this2 = null;
		this.uvArray = this2;
		gl.bindBuffer(gl.ARRAY_BUFFER,this.uvBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.uvArray,gl.STATIC_DRAW);
		var array2 = [1.0,16777215,1.0,16777215,1.0,16777215,1.0,16777215];
		var this3;
		if(array2 != null) this3 = new Float32Array(array2); else this3 = null;
		this.colorArray = this3;
		gl.bindBuffer(gl.ARRAY_BUFFER,this.colorBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.colorArray,gl.STATIC_DRAW);
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,(function($this) {
			var $r;
			var array3 = [0,1,2,1,3,2];
			var this4;
			if(array3 != null) this4 = new Uint16Array(array3); else this4 = null;
			$r = this4;
			return $r;
		}(this)),gl.STATIC_DRAW);
	}
	,popFilter: function() {
	}
	,pushFilter: function(filterBlock) {
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.texturePool = [];
		this.initShaderBuffers();
	}
	,__class__: openfl__$internal_renderer_opengl_utils_FilterManager
};
var openfl__$internal_renderer_opengl_utils_GLMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.setContext(renderSession.gl);
	this.clips = [];
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLMaskManager"] = openfl__$internal_renderer_opengl_utils_GLMaskManager;
openfl__$internal_renderer_opengl_utils_GLMaskManager.__name__ = ["openfl","_internal","renderer","opengl","utils","GLMaskManager"];
openfl__$internal_renderer_opengl_utils_GLMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_opengl_utils_GLMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	gl: null
	,clips: null
	,currentClip: null
	,savedClip: null
	,destroy: function() {
		this.gl = null;
	}
	,pushRect: function(rect,transform) {
		if(rect == null) return;
		var m = new openfl_geom_Matrix(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		openfl__$internal_renderer_opengl_GLBitmap.flipMatrix(m,this.renderSession.renderer.viewport.height);
		var clip = rect.clone();
		clip.__transform(clip,m);
		if(this.currentClip != null) clip = this.currentClip.intersection(clip);
		var restartBatch = this.currentClip == null || clip.isEmpty() || this.currentClip.containsRect(clip);
		this.clips.push(clip);
		this.currentClip = clip;
		if(restartBatch) {
			this.renderSession.spriteBatch.stop();
			this.renderSession.spriteBatch.start(this.currentClip);
		}
	}
	,pushMask: function(mask) {
		this.renderSession.spriteBatch.stop();
		this.renderSession.stencilManager.pushMask(mask,this.renderSession);
		this.renderSession.spriteBatch.start(this.currentClip);
	}
	,popMask: function() {
		this.renderSession.spriteBatch.stop();
		this.renderSession.stencilManager.popMask(null,this.renderSession);
		this.renderSession.spriteBatch.start(this.currentClip);
	}
	,popRect: function() {
		this.renderSession.spriteBatch.stop();
		this.clips.pop();
		this.currentClip = this.clips[this.clips.length - 1];
		this.renderSession.spriteBatch.start(this.currentClip);
	}
	,saveState: function() {
		this.savedClip = this.currentClip;
		this.currentClip = null;
	}
	,restoreState: function() {
		this.currentClip = this.savedClip;
		this.savedClip = null;
	}
	,setContext: function(gl) {
		if(this.renderSession != null) this.renderSession.gl = gl;
		this.gl = gl;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLMaskManager
});
var openfl__$internal_renderer_opengl_utils_VertexAttribute = function(components,type,normalized,name,defaultValue) {
	if(normalized == null) normalized = false;
	this.enabled = true;
	this.normalized = false;
	this.components = components;
	this.type = type;
	this.normalized = normalized;
	this.name = name;
	if(defaultValue == null) {
		var this1;
		if(components != null) this1 = new Float32Array(components); else this1 = null;
		this.defaultValue = this1;
	} else this.defaultValue = defaultValue;
};
$hxClasses["openfl._internal.renderer.opengl.utils.VertexAttribute"] = openfl__$internal_renderer_opengl_utils_VertexAttribute;
openfl__$internal_renderer_opengl_utils_VertexAttribute.__name__ = ["openfl","_internal","renderer","opengl","utils","VertexAttribute"];
openfl__$internal_renderer_opengl_utils_VertexAttribute.prototype = {
	components: null
	,normalized: null
	,type: null
	,name: null
	,enabled: null
	,defaultValue: null
	,copy: function() {
		return new openfl__$internal_renderer_opengl_utils_VertexAttribute(this.components,this.type,this.normalized,this.name,this.defaultValue);
	}
	,getElementsBytes: function() {
		var _g = this.type;
		switch(_g) {
		case 5120:case 5121:
			return 1;
		case 5122:case 5123:
			return 2;
		default:
			return 4;
		}
	}
	,get_elements: function() {
		return Math.floor(this.components * this.getElementsBytes() / 4);
	}
	,__class__: openfl__$internal_renderer_opengl_utils_VertexAttribute
	,__properties__: {get_elements:"get_elements"}
};
var openfl__$internal_renderer_opengl_utils_GraphicsRenderer = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.GraphicsRenderer"] = openfl__$internal_renderer_opengl_utils_GraphicsRenderer;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.__name__ = ["openfl","_internal","renderer","opengl","utils","GraphicsRenderer"];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastVertsBuffer = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastBucketMode = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTexture = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTextureRepeat = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTextureSmooth = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildCircle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var rx = rectData[2];
	var ry;
	if(rectData.length == 3) ry = rx; else ry = rectData[3];
	if(path.type == openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse) {
		rx /= 2;
		ry /= 2;
		x += rx;
		y += ry;
	}
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var totalSegs = 40;
	var seg = Math.PI * 2 / totalSegs;
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vertPos = verts.length / 2 | 0;
		indices.push(vertPos);
		var _g1 = 0;
		var _g = totalSegs + 1;
		while(_g1 < _g) {
			var i = _g1++;
			verts.push(x);
			verts.push(y);
			verts.push(x + Math.sin(seg * i) * rx);
			verts.push(y + Math.cos(seg * i) * ry);
			indices.push(vertPos++);
			indices.push(vertPos++);
		}
		indices.push(vertPos - 1);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [];
		openfl__$internal_renderer_GraphicsPaths.ellipse(path.points,x,y,rx,ry,totalSegs);
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildComplexPoly = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var bucket = null;
	if(path.points.length >= 6) {
		var points = path.points.slice();
		if(localCoords) {
			var _g1 = 0;
			var _g = points.length / 2 | 0;
			while(_g1 < _g) {
				var i = _g1++;
				points[i * 2] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
				points[i * 2 + 1] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			}
		}
		bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
		var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
		fill.drawMode = glStack.gl.TRIANGLE_FAN;
		fill.verts = points;
		var indices = fill.indices;
		var length = points.length / 2 | 0;
		var _g2 = 0;
		while(_g2 < length) {
			var i1 = _g2++;
			indices.push(i1);
		}
	}
	if(path.line.width > 0) {
		if(bucket == null) bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket,localCoords);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine = function(path,bucket,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points;
	if(points.length == 0) return;
	var line = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Line);
	if(localCoords) {
		var _g1 = 0;
		var _g = points.length / 2 | 0;
		while(_g1 < _g) {
			var i = _g1++;
			points[i * 2] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			points[i * 2 + 1] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
		}
	}
	var firstPoint = new openfl_geom_Point(points[0],points[1]);
	var lastPoint = new openfl_geom_Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
	if(firstPoint.x == lastPoint.x && firstPoint.y == lastPoint.y) {
		points = points.slice();
		points.pop();
		points.pop();
		lastPoint = new openfl_geom_Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
		var midPointX = lastPoint.x + (firstPoint.x - lastPoint.x) * 0.5;
		var midPointY = lastPoint.y + (firstPoint.y - lastPoint.y) * 0.5;
		points.unshift(midPointY);
		points.unshift(midPointX);
		points.push(midPointX);
		points.push(midPointY);
	}
	var verts = line.verts;
	var indices = line.indices;
	var length = points.length / 2 | 0;
	var indexCount = points.length;
	var indexStart = verts.length / 6 | 0;
	var width = path.line.width / 2;
	var color = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgb(path.line.color);
	var alpha = path.line.alpha;
	var r = color[0];
	var g = color[1];
	var b = color[2];
	var px;
	var py;
	var p1x;
	var p1y;
	var p2x;
	var p2y;
	var p3x;
	var p3y;
	var perpx;
	var perpy;
	var perp2x;
	var perp2y;
	var perp3x;
	var perp3y;
	var a1;
	var b1;
	var c1;
	var a2;
	var b2;
	var c2;
	var denom;
	var pdist;
	var dist;
	p1x = points[0];
	p1y = points[1];
	p2x = points[2];
	p2y = points[3];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p1x - perpx);
	verts.push(p1y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p1x + perpx);
	verts.push(p1y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	var _g11 = 1;
	var _g2 = length - 1;
	while(_g11 < _g2) {
		var i1 = _g11++;
		p1x = points[(i1 - 1) * 2];
		p1y = points[(i1 - 1) * 2 + 1];
		p2x = points[i1 * 2];
		p2y = points[i1 * 2 + 1];
		p3x = points[(i1 + 1) * 2];
		p3y = points[(i1 + 1) * 2 + 1];
		perpx = -(p1y - p2y);
		perpy = p1x - p2x;
		dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
		perpx = perpx / dist;
		perpy = perpy / dist;
		perpx = perpx * width;
		perpy = perpy * width;
		perp2x = -(p2y - p3y);
		perp2y = p2x - p3x;
		dist = Math.sqrt(Math.abs(perp2x * perp2x + perp2y * perp2y));
		perp2x = perp2x / dist;
		perp2y = perp2y / dist;
		perp2x = perp2x * width;
		perp2y = perp2y * width;
		a1 = -perpy + p1y - (-perpy + p2y);
		b1 = -perpx + p2x - (-perpx + p1x);
		c1 = (-perpx + p1x) * (-perpy + p2y) - (-perpx + p2x) * (-perpy + p1y);
		a2 = -perp2y + p3y - (-perp2y + p2y);
		b2 = -perp2x + p2x - (-perp2x + p3x);
		c2 = (-perp2x + p3x) * (-perp2y + p2y) - (-perp2x + p2x) * (-perp2y + p3y);
		denom = a1 * b2 - a2 * b1;
		if(Math.abs(denom) < 0.1) {
			denom += 10.1;
			verts.push(p2x - perpx);
			verts.push(p2y - perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perpx);
			verts.push(p2y + perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			continue;
		}
		px = (b1 * c2 - b2 * c1) / denom;
		py = (a2 * c1 - a1 * c2) / denom;
		pdist = (px - p2x) * (px - p2x) + (py - p2y) + (py - p2y);
		if(pdist > 19600) {
			perp3x = perpx - perp2x;
			perp3y = perpy - perp2y;
			dist = Math.sqrt(Math.abs(perp3x * perp3x + perp3y * perp3y));
			perp3x = perp3x / dist;
			perp3y = perp3y / dist;
			perp3x = perp3x * width;
			perp3y = perp3y * width;
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perp3x);
			verts.push(p2y + perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			indexCount++;
		} else {
			verts.push(px);
			verts.push(py);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - (px - p2x));
			verts.push(p2y - (py - p2y));
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
		}
	}
	p1x = points[(length - 2) * 2];
	p1y = points[(length - 2) * 2 + 1];
	p2x = points[(length - 1) * 2];
	p2y = points[(length - 1) * 2 + 1];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	if(!isFinite(dist)) haxe_Log.trace(perpx * perpx + perpy * perpy,{ fileName : "GraphicsRenderer.hx", lineNumber : 407, className : "openfl._internal.renderer.opengl.utils.GraphicsRenderer", methodName : "buildLine"});
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p2x - perpx);
	verts.push(p2y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p2x + perpx);
	verts.push(p2y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	indices.push(indexStart);
	var _g3 = 0;
	while(_g3 < indexCount) {
		var i2 = _g3++;
		indices.push(indexStart++);
	}
	indices.push(indexStart - 1);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildPoly = function(path,glStack) {
	if(path.points.length < 6) return;
	var points = path.points;
	var l = points.length;
	var sx = points[0];
	var sy = points[1];
	var ex = points[l - 2];
	var ey = points[l - 1];
	if(sx != ex || sy != ey) {
		points.push(sx);
		points.push(sy);
	}
	var length = points.length / 2 | 0;
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	var verts = fill.verts;
	var indices = fill.indices;
	if(fill != null) {
		var triangles = [];
		openfl__$internal_renderer_PolyK.triangulate(triangles,points);
		var vertPos = verts.length / 2;
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vertPos | 0);
			indices.push(triangles[i] + vertPos | 0);
			indices.push(triangles[i + 1] + vertPos | 0);
			indices.push(triangles[i + 2] + vertPos | 0);
			indices.push(triangles[i + 2] + vertPos | 0);
			i += 3;
		}
		var _g = 0;
		while(_g < length) {
			var i1 = _g++;
			verts.push(points[i1 * 2]);
			verts.push(points[i1 * 2 + 1]);
		}
	}
	if(path.line.width > 0) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var width = rectData[2];
	var height = rectData[3];
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vertPos = verts.length / 2 | 0;
		verts.push(x);
		verts.push(y);
		verts.push(x + width);
		verts.push(y);
		verts.push(x);
		verts.push(y + height);
		verts.push(x + width);
		verts.push(y + height);
		indices.push(vertPos);
		indices.push(vertPos);
		indices.push(vertPos + 1);
		indices.push(vertPos + 2);
		indices.push(vertPos + 3);
		indices.push(vertPos + 3);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [x,y,x + width,y,x + width,y + height,x,y + height,x,y];
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRoundedRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points.slice();
	var x = points[0];
	var y = points[1];
	var width = points[2];
	var height = points[3];
	var rx = points[4];
	var ry = points[5];
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var recPoints = [];
	openfl__$internal_renderer_GraphicsPaths.roundRectangle(recPoints,x,y,width,height,rx,ry);
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vecPos = verts.length / 2;
		var triangles = [];
		openfl__$internal_renderer_PolyK.triangulate(triangles,recPoints);
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i + 1] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			i += 3;
		}
		i = 0;
		while(i < recPoints.length) {
			verts.push(recPoints[i]);
			verts.push(recPoints[++i]);
			i++;
		}
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = recPoints;
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTriangles = function(path,object,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var args = path.type.slice(2);
	var vertices = args[0];
	var indices = args[1];
	var uvtData = args[2];
	var culling = args[3];
	var colors = args[4];
	var blendMode = args[5];
	var a;
	var b;
	var c;
	var d;
	var tx;
	var ty;
	if(localCoords) {
		a = 1.0;
		b = 0.0;
		c = 0.0;
		d = 1.0;
		tx = 0.0;
		ty = 0.0;
	} else {
		a = object.__worldTransform.a;
		b = object.__worldTransform.b;
		c = object.__worldTransform.c;
		d = object.__worldTransform.d;
		tx = object.__worldTransform.tx;
		ty = object.__worldTransform.ty;
	}
	var hasColors = colors != null && colors.length > 0;
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	var colorAttrib = fill.vertexArray.attributes[2];
	colorAttrib.enabled = hasColors;
	var array = [1,1,1,1];
	var this1;
	if(array != null) this1 = new Float32Array(array); else this1 = null;
	colorAttrib.defaultValue = this1;
	fill.rawVerts = true;
	fill.glLength = indices.length;
	fill.stride = Std["int"](fill.vertexArray.get_stride() / 4);
	var vertsLength = fill.glLength * fill.stride;
	var verts;
	if(fill.glVerts == null || fill.glVerts.length < vertsLength) {
		var this2;
		if(vertsLength != null) this2 = new Float32Array(vertsLength); else this2 = null;
		verts = this2;
		fill.glVerts = verts;
	} else verts = fill.glVerts;
	var glColors;
	var buffer = verts.buffer;
	var this3;
	if(buffer != null) this3 = new Uint32Array(buffer,0); else this3 = null;
	glColors = this3;
	var v0 = 0;
	var v1 = 0;
	var v2 = 0;
	var i0 = 0;
	var i1 = 0;
	var i2 = 0;
	var x0 = 0.0;
	var y0 = 0.0;
	var x1 = 0.0;
	var y1 = 0.0;
	var x2 = 0.0;
	var y2 = 0.0;
	var idx = 0;
	var _g1 = 0;
	var _g = indices.length / 3 | 0;
	while(_g1 < _g) {
		var i = _g1++;
		i0 = indices.data[i * 3];
		i1 = indices.data[i * 3 + 1];
		i2 = indices.data[i * 3 + 2];
		v0 = i0 * 2;
		v1 = i1 * 2;
		v2 = i2 * 2;
		x0 = vertices.data[v0];
		y0 = vertices.data[v0 + 1];
		x1 = vertices.data[v1];
		y1 = vertices.data[v1 + 1];
		x2 = vertices.data[v2];
		y2 = vertices.data[v2 + 1];
		if(localCoords) {
			x0 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y0 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			x1 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y1 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			x2 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y2 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
		}
		switch(culling[1]) {
		case 2:
			if(!((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0)) continue;
			break;
		case 0:
			if((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0) continue;
			break;
		default:
		}
		var idx1 = idx++;
		verts[idx1] = a * x0 + c * y0 + tx;
		var idx2 = idx++;
		verts[idx2] = b * x0 + d * y0 + ty;
		var idx3 = idx++;
		verts[idx3] = uvtData.data[v0];
		var idx4 = idx++;
		verts[idx4] = uvtData.data[v0 + 1];
		if(hasColors) {
			var idx5 = idx++;
			glColors[idx5] = colors.data[i0];
		}
		var idx6 = idx++;
		verts[idx6] = a * x1 + c * y1 + tx;
		var idx7 = idx++;
		verts[idx7] = b * x1 + d * y1 + ty;
		var idx8 = idx++;
		verts[idx8] = uvtData.data[v1];
		var idx9 = idx++;
		verts[idx9] = uvtData.data[v1 + 1];
		if(hasColors) {
			var idx10 = idx++;
			glColors[idx10] = colors.data[i1];
		}
		var idx11 = idx++;
		verts[idx11] = a * x2 + c * y2 + tx;
		var idx12 = idx++;
		verts[idx12] = b * x2 + d * y2 + ty;
		var idx13 = idx++;
		verts[idx13] = uvtData.data[v2];
		var idx14 = idx++;
		verts[idx14] = uvtData.data[v2 + 1];
		if(hasColors) {
			var idx15 = idx++;
			glColors[idx15] = colors.data[i2];
		}
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTiles = function(path,glStack) {
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.quadraticBezierCurve = function(fromX,fromY,cpX,cpY,toX,toY) {
	var xa;
	var ya;
	var xb;
	var yb;
	var x;
	var y;
	var n = 20;
	var points = [];
	var getPt = function(n1,n2,perc) {
		var diff = n2 - n1;
		return n1 + diff * perc;
	};
	var j = 0.0;
	var _g1 = 0;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		j = i / n;
		xa = getPt(fromX,cpX,j);
		ya = getPt(fromY,cpY,j);
		xb = getPt(cpX,toX,j);
		yb = getPt(cpY,toY,j);
		x = getPt(xa,xb,j);
		y = getPt(ya,yb,j);
		points.push(x);
		points.push(y);
	}
	return points;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render = function(object,renderSession) {
	var graphics = object.__graphics;
	var bounds = graphics.__bounds;
	var spritebatch = renderSession.spriteBatch;
	var dirty = graphics.__dirty;
	if(!graphics.__visible || graphics.__commands.get_length() == 0 || bounds == null || bounds.width == 0 || bounds.height == 0) {
		graphics.__glStack.splice(0,graphics.__glStack.length);
		return;
	}
	if(dirty) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics(object,object.__graphics,renderSession.gl,object.get_cacheAsBitmap());
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderGraphics(object,renderSession,false);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderGraphics = function(object,renderSession,localCoords) {
	if(localCoords == null) localCoords = false;
	var graphics = object.__graphics;
	var gl = renderSession.gl;
	var glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
	if(glStack == null) return;
	var bucket;
	var translationMatrix;
	if(localCoords) translationMatrix = openfl_geom_Matrix.__identity; else translationMatrix = object.__worldTransform;
	var clipRect = renderSession.spriteBatch.clipRect;
	var batchDrawing = renderSession.spriteBatch.drawing;
	batchDrawing = renderSession.spriteBatch.drawing;
	var _g1 = 0;
	var _g = glStack.buckets.length;
	while(_g1 < _g) {
		var i = _g1++;
		batchDrawing = renderSession.spriteBatch.drawing;
		if(batchDrawing && !localCoords) renderSession.spriteBatch.finish();
		renderSession.blendModeManager.setBlendMode(object.__blendMode);
		if(clipRect != null) {
			gl.enable(gl.SCISSOR_TEST);
			gl.scissor(Math.floor(clipRect.x),Math.floor(clipRect.y),Math.floor(clipRect.width),Math.floor(clipRect.height));
		}
		bucket = glStack.buckets[i];
		var _g2 = bucket.mode;
		switch(_g2[1]) {
		case 1:case 2:
			renderSession.stencilManager.pushBucket(bucket,renderSession,translationMatrix.toArray(true));
			var shader = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader(bucket,renderSession,object,translationMatrix.toArray(true));
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderFill(bucket,shader,renderSession);
			renderSession.stencilManager.popBucket(object,bucket,renderSession);
			break;
		case 5:
			var shader1 = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader(bucket,renderSession,object,null);
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderDrawTriangles(bucket,shader1,renderSession);
			break;
		case 6:
			if(!batchDrawing) renderSession.spriteBatch.begin(renderSession,clipRect);
			var args = bucket.graphicType.slice(2);
			renderSession.spriteBatch.renderTiles(object,args[0],args[1],args[2],args[3],args[4],args[5]);
			renderSession.spriteBatch.finish();
			break;
		default:
		}
		var ct = object.__worldColorTransform;
		var _g21 = 0;
		var _g3 = bucket.lines;
		while(_g21 < _g3.length) {
			var line = _g3[_g21];
			++_g21;
			if(line != null && line.verts.length > 0) {
				var shader2 = renderSession.shaderManager.primitiveShader;
				renderSession.shaderManager.setShader(shader2);
				gl.uniformMatrix3fv(shader2.getUniformLocation("openfl_uTranslationMatrix"),false,translationMatrix.toArray(true));
				gl.uniformMatrix3fv(shader2.getUniformLocation("openfl_uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
				gl.uniform1f(shader2.getUniformLocation("openfl_uAlpha"),1);
				gl.uniform4f(shader2.getUniformLocation("openfl_uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,ct.alphaMultiplier);
				gl.uniform4f(shader2.getUniformLocation("openfl_uColorOffset"),ct.redOffset / 255,ct.greenOffset / 255,ct.blueOffset / 255,ct.alphaOffset / 255);
				line.vertexArray.bind();
				shader2.bindVertexArray(line.vertexArray);
				gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,line.indexBuffer);
				gl.drawElements(gl.TRIANGLE_STRIP,line.indices.length,gl.UNSIGNED_SHORT,0);
			}
		}
		if(clipRect != null) gl.disable(gl.SCISSOR_TEST);
		batchDrawing = renderSession.spriteBatch.drawing;
		if(!batchDrawing && !localCoords) renderSession.spriteBatch.begin(renderSession,clipRect);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics = function(object,graphics,gl,localCoords) {
	if(localCoords == null) localCoords = false;
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectPosition.setTo(object.get_x(),object.get_y());
	if(graphics.__bounds == null) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds = new openfl_geom_Rectangle(); else openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.copyFrom(graphics.__bounds);
	var glStack = null;
	if(graphics.__dirty) glStack = openfl__$internal_renderer_opengl_utils_DrawPath.getStack(graphics,gl);
	graphics.set___dirty(false);
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var data = _g1[_g];
		++_g;
		data.reset();
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool.push(data);
	}
	glStack.reset();
	var _g11 = glStack.lastIndex;
	var _g2 = graphics.__drawPaths.length;
	while(_g11 < _g2) {
		var i = _g11++;
		var path = graphics.__drawPaths[i];
		{
			var _g21 = path.type;
			switch(_g21[1]) {
			case 0:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildComplexPoly(path,glStack,localCoords);
				break;
			case 1:
				var rounded = _g21[2];
				if(rounded) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRoundedRectangle(path,glStack,localCoords); else openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRectangle(path,glStack,localCoords);
				break;
			case 2:case 3:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildCircle(path,glStack,localCoords);
				break;
			case 4:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTriangles(path,object,glStack,localCoords);
				break;
			case 5:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
				break;
			case 6:
				var m = _g21[2];
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix = m;
				break;
			}
		}
		glStack.lastIndex++;
	}
	var _g3 = 0;
	var _g12 = glStack.buckets;
	while(_g3 < _g12.length) {
		var bucket = _g12[_g3];
		++_g3;
		if(bucket.uploadTileBuffer) bucket.uploadTile(Math.ceil(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_left()),Math.ceil(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_top()),Math.floor(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_right()),Math.floor(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_bottom()));
		bucket.optimize();
	}
	glStack.upload();
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket = function(path,glStack) {
	var bucket = null;
	{
		var _g = path.fill;
		switch(_g[1]) {
		case 1:
			var a = _g[3];
			var c = _g[2];
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.Fill);
			if(c == null) bucket.color = [1,1,1]; else bucket.color = [(c >> 16 & 255) / 255,(c >> 8 & 255) / 255,(c & 255) / 255];
			bucket.color[3] = a;
			bucket.uploadTileBuffer = true;
			break;
		case 2:
			var s = _g[5];
			var r = _g[4];
			var m = _g[3];
			var b = _g[2];
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill);
			bucket.bitmap = b;
			bucket.textureRepeat = r;
			bucket.textureSmooth = s;
			bucket.texture = b.getTexture(glStack.gl);
			bucket.uploadTileBuffer = true;
			var pMatrix;
			if(m == null) pMatrix = new openfl_geom_Matrix(); else pMatrix = new openfl_geom_Matrix(m.a,m.b,m.c,m.d,m.tx,m.ty);
			pMatrix.invert();
			pMatrix.scale(1 / b.width,1 / b.height);
			var tx = pMatrix.tx;
			var ty = pMatrix.ty;
			pMatrix.tx = 0;
			pMatrix.ty = 0;
			bucket.textureTL.x = tx;
			bucket.textureTL.y = ty;
			bucket.textureBR.x = tx + 1;
			bucket.textureBR.y = ty + 1;
			bucket.textureMatrix = pMatrix;
			break;
		default:
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.Line);
			bucket.uploadTileBuffer = false;
		}
	}
	{
		var _g1 = path.type;
		switch(_g1[1]) {
		case 4:
			bucket.mode = openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles;
			bucket.uploadTileBuffer = false;
			break;
		case 5:
			bucket.mode = openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles;
			bucket.uploadTileBuffer = false;
			break;
		default:
		}
	}
	bucket.graphicType = path.type;
	bucket.overrideMatrix = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix;
	return bucket;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.getBucket = function(glStack,mode) {
	var b = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool.pop();
	if(b == null) b = new openfl__$internal_renderer_opengl_utils_GLBucket(glStack.gl);
	b.mode = mode;
	glStack.buckets.push(b);
	return b;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket = function(fillIndex,glStack,mode) {
	var bucket = null;
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.fillIndex == fillIndex) {
			bucket = b;
			break;
		}
	}
	if(bucket == null) bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.getBucket(glStack,mode);
	bucket.dirty = true;
	bucket.fillIndex = fillIndex;
	return bucket;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader = function(bucket,renderSession,object,translationMatrix) {
	var gl = renderSession.gl;
	var shader = null;
	var _g = bucket.mode;
	switch(_g[1]) {
	case 1:
		shader = renderSession.shaderManager.fillShader;
		break;
	case 2:
		shader = renderSession.shaderManager.patternFillShader;
		break;
	case 5:
		shader = renderSession.shaderManager.drawTrianglesShader;
		break;
	default:
		shader = null;
	}
	if(shader == null) return null;
	var newShader = renderSession.shaderManager.setShader(shader);
	gl.uniform1f(shader.getUniformLocation("openfl_uAlpha"),object.__worldAlpha);
	gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
	var ct = object.__worldColorTransform;
	gl.uniform4f(shader.getUniformLocation("openfl_uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,ct.alphaMultiplier);
	gl.uniform4f(shader.getUniformLocation("openfl_uColorOffset"),ct.redOffset / 255,ct.greenOffset / 255,ct.blueOffset / 255,ct.alphaOffset / 255);
	var _g1 = bucket.mode;
	switch(_g1[1]) {
	case 1:
		gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uTranslationMatrix"),false,translationMatrix);
		gl.uniform4fv(shader.getUniformLocation("openfl_uColor"),(function($this) {
			var $r;
			var array = bucket.color;
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
		break;
	case 2:
		gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uTranslationMatrix"),false,translationMatrix);
		gl.uniform2f(shader.getUniformLocation("openfl_uPatternTL"),bucket.textureTL.x,bucket.textureTL.y);
		gl.uniform2f(shader.getUniformLocation("openfl_uPatternBR"),bucket.textureBR.x,bucket.textureBR.y);
		gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uPatternMatrix"),false,bucket.textureMatrix.toArray(true));
		break;
	case 5:
		if(bucket.texture != null) gl.uniform1i(shader.getUniformLocation("openfl_uUseTexture"),1); else {
			gl.uniform1i(shader.getUniformLocation("openfl_uUseTexture"),0);
			gl.uniform4fv(shader.getUniformLocation("openfl_uColor"),(function($this) {
				var $r;
				var array1 = bucket.color;
				var this2;
				if(array1 != null) this2 = new Float32Array(array1); else this2 = null;
				$r = this2;
				return $r;
			}(this)));
		}
		break;
	default:
	}
	return shader;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderFill = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	if(bucket.mode == openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill && bucket.texture != null) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture(gl,bucket);
	gl.bindBuffer(gl.ARRAY_BUFFER,bucket.tileBuffer);
	gl.vertexAttribPointer(shader.getAttribLocation("openfl_aPosition"),4,gl.SHORT,false,0,0);
	gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderDrawTriangles = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	var _g = 0;
	var _g1 = bucket.fills;
	while(_g < _g1.length) {
		var fill = _g1[_g];
		++_g;
		if(fill.available) continue;
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture(gl,bucket);
		fill.vertexArray.bind();
		shader.bindVertexArray(fill.vertexArray);
		gl.drawArrays(gl.TRIANGLES,fill.glStart,fill.glLength);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture = function(gl,bucket) {
	gl.bindTexture(gl.TEXTURE_2D,bucket.texture);
	if(bucket.textureRepeat && bucket.bitmap.image.get_powerOfTwo()) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.REPEAT);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	}
	if(bucket.textureSmooth) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgb = function(hex) {
	if(hex == null) return [1,1,1]; else return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255];
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgba = function(hex) {
	if(hex == null) return [1,1,1,1]; else return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255,(hex >> 24 & 255) / 255];
};
var openfl__$internal_renderer_opengl_utils_GLStack = function(gl) {
	this.lastIndex = 0;
	this.gl = gl;
	this.buckets = [];
	this.lastIndex = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLStack"] = openfl__$internal_renderer_opengl_utils_GLStack;
openfl__$internal_renderer_opengl_utils_GLStack.__name__ = ["openfl","_internal","renderer","opengl","utils","GLStack"];
openfl__$internal_renderer_opengl_utils_GLStack.prototype = {
	lastIndex: null
	,buckets: null
	,gl: null
	,reset: function() {
		this.buckets = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		var _g = 0;
		var _g1 = this.buckets;
		while(_g < _g1.length) {
			var bucket = _g1[_g];
			++_g;
			if(bucket.dirty) bucket.upload();
		}
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLStack
};
var openfl__$internal_renderer_opengl_utils_GLBucket = function(gl) {
	this.uploadTileBuffer = true;
	this.textureSmooth = true;
	this.textureRepeat = false;
	this.lines = [];
	this.fills = [];
	this.fillIndex = -1;
	this.gl = gl;
	this.color = [0,0,0];
	this.lastIndex = 0;
	this.alpha = 1;
	this.dirty = true;
	this.mode = openfl__$internal_renderer_opengl_utils_BucketMode.Fill;
	this.textureMatrix = new openfl_geom_Matrix();
	this.textureTL = new openfl_geom_Point();
	this.textureBR = new openfl_geom_Point(1,1);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucket"] = openfl__$internal_renderer_opengl_utils_GLBucket;
openfl__$internal_renderer_opengl_utils_GLBucket.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucket"];
openfl__$internal_renderer_opengl_utils_GLBucket.prototype = {
	gl: null
	,color: null
	,alpha: null
	,dirty: null
	,graphicType: null
	,lastIndex: null
	,fillIndex: null
	,mode: null
	,fills: null
	,lines: null
	,bitmap: null
	,texture: null
	,textureMatrix: null
	,textureRepeat: null
	,textureSmooth: null
	,textureTL: null
	,textureBR: null
	,overrideMatrix: null
	,tileBuffer: null
	,glTile: null
	,tile: null
	,uploadTileBuffer: null
	,getData: function(type) {
		var data;
		switch(type[1]) {
		case 1:
			data = this.fills;
			break;
		default:
			data = this.lines;
		}
		var result = null;
		var remove = false;
		var _g = 0;
		while(_g < data.length) {
			var d = data[_g];
			++_g;
			if(d.available) {
				result = d;
				remove = true;
				break;
			}
		}
		if(result == null) result = new openfl__$internal_renderer_opengl_utils_GLBucketData(this.gl);
		result.available = false;
		result.parent = this;
		result.type = type;
		if(remove) HxOverrides.remove(data,result);
		data.push(result);
		switch(type[1]) {
		case 1:
			var _g1 = this.mode;
			switch(_g1[1]) {
			case 1:case 2:
				result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.fillVertexAttributes;
				break;
			case 5:
				result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.drawTrianglesVertexAttributes.slice();
				result.vertexArray.attributes[2] = result.vertexArray.attributes[2].copy();
				break;
			default:
			}
			break;
		case 0:
			result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.primitiveVertexAttributes;
			break;
		}
		return result;
	}
	,optimize: function() {
		var _g = this;
		var data = this.lines;
		if(data.length > 1) {
			var result = [];
			var tmp = null;
			var last = null;
			var idx = 0;
			var vi = 0;
			var ii = 0;
			var before = data.length;
			var _g1 = 0;
			while(_g1 < data.length) {
				var d = data[_g1];
				++_g1;
				if(d.available || d.rawVerts || d.rawIndices) {
					if(tmp != null) {
						result.push(tmp);
						tmp = null;
					}
					result.push(d);
					last = d;
					continue;
				}
				if(last == null || last.drawMode == d.drawMode) {
					if(tmp == null) tmp = d; else {
						vi = tmp.verts.length;
						ii = tmp.indices.length;
						var _g2 = 0;
						var _g11 = d.verts.length;
						while(_g2 < _g11) {
							var j = _g2++;
							tmp.verts[j + vi] = d.verts[j];
						}
						var _g21 = 0;
						var _g12 = d.indices.length;
						while(_g21 < _g12) {
							var j1 = _g21++;
							tmp.indices[j1 + ii] = d.indices[j1] + idx;
						}
					}
					idx = tmp.indices[tmp.indices.length - 1] + 1;
					last = d;
				} else {
					if(tmp != null) {
						result.push(tmp);
						tmp = null;
					}
					result.push(d);
					last = d;
					continue;
				}
			}
			if(result.length == 0 && tmp != null) result.push(tmp);
			if(result.length > 0) switch(openfl__$internal_renderer_opengl_utils_BucketDataType.Line[1]) {
			case 1:
				_g.fills = result;
				break;
			default:
				_g.lines = result;
			}
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.fills;
		while(_g < _g1.length) {
			var fill = _g1[_g];
			++_g;
			fill.reset();
		}
		var _g2 = 0;
		var _g11 = this.lines;
		while(_g2 < _g11.length) {
			var line = _g11[_g2];
			++_g2;
			line.reset();
		}
		this.fillIndex = -1;
		this.uploadTileBuffer = true;
		this.graphicType = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
	}
	,uploadTile: function(x,y,w,h) {
		if(this.tileBuffer == null) this.tileBuffer = this.gl.createBuffer();
		this.tile = [x,y,0,0,w,y,1,0,x,h,0,1,w,h,1,1];
		var array = this.tile;
		var this1;
		if(array != null) this1 = new Int16Array(array); else this1 = null;
		this.glTile = this1;
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.tileBuffer);
		this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glTile,this.gl.STATIC_DRAW);
	}
	,upload: function() {
		if(this.mode != openfl__$internal_renderer_opengl_utils_BucketMode.Line) {
			var _g = 0;
			var _g1 = this.fills;
			while(_g < _g1.length) {
				var fill = _g1[_g];
				++_g;
				if(!fill.available) fill.upload();
			}
		}
		var _g2 = 0;
		var _g11 = this.lines;
		while(_g2 < _g11.length) {
			var line = _g11[_g2];
			++_g2;
			if(!line.available) line.upload();
		}
		this.dirty = false;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLBucket
};
var openfl__$internal_renderer_opengl_utils_GLBucketData = function(gl) {
	this.available = false;
	this.rawIndices = false;
	this.stride = 0;
	this.rawVerts = false;
	this.lastVertsSize = 0;
	this.glStart = 0;
	this.glLength = 0;
	this.gl = gl;
	this.drawMode = gl.TRIANGLE_STRIP;
	this.verts = [];
	this.indices = [];
	this.vertexArray = new openfl__$internal_renderer_opengl_utils_VertexArray([]);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucketData"] = openfl__$internal_renderer_opengl_utils_GLBucketData;
openfl__$internal_renderer_opengl_utils_GLBucketData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucketData"];
openfl__$internal_renderer_opengl_utils_GLBucketData.prototype = {
	type: null
	,gl: null
	,drawMode: null
	,glLength: null
	,glStart: null
	,vertexArray: null
	,glVerts: null
	,lastVertsSize: null
	,verts: null
	,rawVerts: null
	,stride: null
	,indexBuffer: null
	,glIndices: null
	,indices: null
	,rawIndices: null
	,available: null
	,parent: null
	,reset: function() {
		this.available = true;
		this.verts = [];
		this.indices = [];
		this.glLength = 0;
		this.glStart = 0;
		this.stride = 0;
		this.rawVerts = false;
		this.rawIndices = false;
		this.drawMode = this.gl.TRIANGLE_STRIP;
	}
	,upload: function() {
		if(this.rawVerts && this.glVerts != null && this.glVerts.length > 0 || this.verts.length > 0) {
			if(!this.rawVerts) {
				var array = this.verts;
				var this1;
				if(array != null) this1 = new Float32Array(array); else this1 = null;
				this.glVerts = this1;
			}
			this.vertexArray.buffer = this.glVerts.buffer;
			if(this.glVerts.length <= this.lastVertsSize) {
				this.vertexArray.bind();
				var end = this.glLength * this.stride;
				if(this.glLength > 0 && this.lastVertsSize > end) {
					var view = this.glVerts.subarray(0,end);
					this.vertexArray.upload(view);
				} else this.vertexArray.upload(this.glVerts);
			} else {
				this.vertexArray.setContext(this.gl,this.glVerts);
				this.lastVertsSize = this.glVerts.length;
			}
		}
		if(this.glLength == 0 && (this.rawIndices && this.glIndices != null && this.glIndices.length > 0 || this.indices.length > 0)) {
			if(this.indexBuffer == null) this.indexBuffer = this.gl.createBuffer();
			if(!this.rawIndices) {
				var array1 = this.indices;
				var this2;
				if(array1 != null) this2 = new Uint16Array(array1); else this2 = null;
				this.glIndices = this2;
			}
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
			this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STREAM_DRAW);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLBucketData
};
var openfl__$internal_renderer_opengl_utils_BucketMode = $hxClasses["openfl._internal.renderer.opengl.utils.BucketMode"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","BucketMode"], __constructs__ : ["None","Fill","PatternFill","Line","PatternLine","DrawTriangles","DrawTiles"] };
openfl__$internal_renderer_opengl_utils_BucketMode.None = ["None",0];
openfl__$internal_renderer_opengl_utils_BucketMode.None.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.None.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.Fill = ["Fill",1];
openfl__$internal_renderer_opengl_utils_BucketMode.Fill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.Fill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill = ["PatternFill",2];
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.Line = ["Line",3];
openfl__$internal_renderer_opengl_utils_BucketMode.Line.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.Line.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine = ["PatternLine",4];
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles = ["DrawTriangles",5];
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles = ["DrawTiles",6];
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
var openfl__$internal_renderer_opengl_utils_BucketDataType = $hxClasses["openfl._internal.renderer.opengl.utils.BucketDataType"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","BucketDataType"], __constructs__ : ["Line","Fill"] };
openfl__$internal_renderer_opengl_utils_BucketDataType.Line = ["Line",0];
openfl__$internal_renderer_opengl_utils_BucketDataType.Line.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketDataType.Line.__enum__ = openfl__$internal_renderer_opengl_utils_BucketDataType;
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill = ["Fill",1];
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketDataType;
var openfl__$internal_renderer_opengl_utils_GLGraphicsData = function(gl) {
	this.indices = [];
	this.data = [];
	this.lastIndex = 0;
	this.mode = 0;
	this.dirty = true;
	this.alpha = 1.0;
	this.tint = [1.0,1.0,1.0];
	this.gl = gl;
	this.dataBuffer = gl.createBuffer();
	this.indexBuffer = gl.createBuffer();
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLGraphicsData"] = openfl__$internal_renderer_opengl_utils_GLGraphicsData;
openfl__$internal_renderer_opengl_utils_GLGraphicsData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLGraphicsData"];
openfl__$internal_renderer_opengl_utils_GLGraphicsData.prototype = {
	gl: null
	,tint: null
	,alpha: null
	,dirty: null
	,mode: null
	,lastIndex: null
	,data: null
	,glData: null
	,dataBuffer: null
	,indices: null
	,glIndices: null
	,indexBuffer: null
	,reset: function() {
		this.data = [];
		this.indices = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		var elements = this.data;
		var this1;
		if(elements != null) this1 = new Float32Array(elements); else this1 = null;
		this.glData = this1;
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.dataBuffer);
		this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glData,this.gl.STATIC_DRAW);
		var elements1 = this.indices;
		var this2;
		if(elements1 != null) this2 = new Uint16Array(elements1); else this2 = null;
		this.glIndices = this2;
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STATIC_DRAW);
		this.dirty = false;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLGraphicsData
};
var openfl__$internal_renderer_opengl_utils_GraphicType = $hxClasses["openfl._internal.renderer.opengl.utils.GraphicType"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","GraphicType"], __constructs__ : ["Polygon","Rectangle","Circle","Ellipse","DrawTriangles","DrawTiles","OverrideMatrix"] };
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon = ["Polygon",0];
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle = function(rounded) { var $x = ["Rectangle",1,rounded]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.Circle = ["Circle",2];
openfl__$internal_renderer_opengl_utils_GraphicType.Circle.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Circle.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse = ["Ellipse",3];
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.DrawTriangles = function(vertices,indices,uvtData,culling,colors,blendMode) { var $x = ["DrawTriangles",4,vertices,indices,uvtData,culling,colors,blendMode]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.DrawTiles = function(sheet,tileData,smooth,flags,shader,count) { var $x = ["DrawTiles",5,sheet,tileData,smooth,flags,shader,count]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.OverrideMatrix = function(matrix) { var $x = ["OverrideMatrix",6,matrix]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
var openfl__$internal_renderer_opengl_utils_PingPongTexture = function(gl,width,height,smoothing,powerOfTwo) {
	if(powerOfTwo == null) powerOfTwo = true;
	if(smoothing == null) smoothing = true;
	this.__swapped = false;
	this.powerOfTwo = true;
	this.useOldTexture = false;
	this.gl = gl;
	this.width = width;
	this.height = height;
	this.smoothing = smoothing;
	this.powerOfTwo = powerOfTwo;
	this.set_renderTexture(new openfl__$internal_renderer_opengl_utils_RenderTexture(gl,width,height,smoothing,powerOfTwo));
};
$hxClasses["openfl._internal.renderer.opengl.utils.PingPongTexture"] = openfl__$internal_renderer_opengl_utils_PingPongTexture;
openfl__$internal_renderer_opengl_utils_PingPongTexture.__name__ = ["openfl","_internal","renderer","opengl","utils","PingPongTexture"];
openfl__$internal_renderer_opengl_utils_PingPongTexture.prototype = {
	gl: null
	,width: null
	,height: null
	,smoothing: null
	,useOldTexture: null
	,powerOfTwo: null
	,__swapped: null
	,__texture0: null
	,__texture1: null
	,swap: function() {
		this.__swapped = !this.__swapped;
		if((this.__swapped?this.__texture1:this.__texture0) == null) this.set_renderTexture(new openfl__$internal_renderer_opengl_utils_RenderTexture(this.gl,this.width,this.height,this.smoothing,this.powerOfTwo));
	}
	,clear: function(r,g,b,a,mask) {
		if(a == null) a = 0;
		if(b == null) b = 0;
		if(g == null) g = 0;
		if(r == null) r = 0;
		(this.__swapped?this.__texture1:this.__texture0).clear(r,g,b,a,mask);
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
		(this.__swapped?this.__texture1:this.__texture0).resize(width,height);
	}
	,destroy: function() {
		if(this.__texture0 != null) {
			this.__texture0.destroy();
			this.__texture0 = null;
		}
		if(this.__texture1 != null) {
			this.__texture1.destroy();
			this.__texture1 = null;
		}
		this.__swapped = false;
	}
	,get_renderTexture: function() {
		if(this.__swapped) return this.__texture1; else return this.__texture0;
	}
	,set_renderTexture: function(v) {
		if(this.__swapped) return this.__texture1 = v; else return this.__texture0 = v;
	}
	,get_oldRenderTexture: function() {
		if(this.__swapped) return this.__texture0; else return this.__texture1;
	}
	,set_oldRenderTexture: function(v) {
		if(this.__swapped) return this.__texture0 = v; else return this.__texture1 = v;
	}
	,get_framebuffer: function() {
		return (this.__swapped?this.__texture1:this.__texture0).frameBuffer;
	}
	,get_texture: function() {
		if(this.useOldTexture) return (this.__swapped?this.__texture0:this.__texture1).texture; else return (this.__swapped?this.__texture1:this.__texture0).texture;
	}
	,get___otherTexture: function() {
		if(this.__swapped) return this.__texture0; else return this.__texture1;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_PingPongTexture
	,__properties__: {get___otherTexture:"get___otherTexture",get_texture:"get_texture",get_framebuffer:"get_framebuffer",set_oldRenderTexture:"set_oldRenderTexture",get_oldRenderTexture:"get_oldRenderTexture",set_renderTexture:"set_renderTexture",get_renderTexture:"get_renderTexture"}
};
var openfl__$internal_renderer_opengl_utils_RenderTexture = function(gl,width,height,smoothing,powerOfTwo) {
	if(powerOfTwo == null) powerOfTwo = true;
	if(smoothing == null) smoothing = true;
	this.powerOfTwo = true;
	this.gl = gl;
	this.powerOfTwo = powerOfTwo;
	this.frameBuffer = gl.createFramebuffer();
	this.texture = gl.createTexture();
	gl.bindTexture(gl.TEXTURE_2D,this.texture);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	gl.bindFramebuffer(gl.FRAMEBUFFER,this.frameBuffer);
	gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.texture,0);
	this.renderBuffer = gl.createRenderbuffer();
	gl.bindRenderbuffer(gl.RENDERBUFFER,this.renderBuffer);
	gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.renderBuffer);
	this.resize(width,height);
};
$hxClasses["openfl._internal.renderer.opengl.utils.RenderTexture"] = openfl__$internal_renderer_opengl_utils_RenderTexture;
openfl__$internal_renderer_opengl_utils_RenderTexture.__name__ = ["openfl","_internal","renderer","opengl","utils","RenderTexture"];
openfl__$internal_renderer_opengl_utils_RenderTexture.prototype = {
	gl: null
	,frameBuffer: null
	,renderBuffer: null
	,texture: null
	,smoothing: null
	,width: null
	,height: null
	,powerOfTwo: null
	,__width: null
	,__height: null
	,__uvData: null
	,clear: function(r,g,b,a,mask) {
		if(a == null) a = 0;
		if(b == null) b = 0;
		if(g == null) g = 0;
		if(r == null) r = 0;
		this.gl.clearColor(r,g,b,a);
		this.gl.clear(mask == null?this.gl.COLOR_BUFFER_BIT:mask);
	}
	,destroy: function() {
		if(this.frameBuffer != null) this.gl.deleteFramebuffer(this.frameBuffer);
		if(this.texture != null) this.gl.deleteTexture(this.texture);
		this.frameBuffer = null;
		this.texture = null;
	}
	,resize: function(width,height) {
		if(this.width == width && this.height == height) return;
		this.width = width;
		this.height = height;
		var pow2W = width;
		var pow2H = height;
		if(this.powerOfTwo) {
			pow2W = this.powOfTwo(width);
			pow2H = this.powOfTwo(height);
		}
		var lastW = this.__width;
		var lastH = this.__height;
		this.__width = pow2W;
		this.__height = pow2H;
		this.createUVs();
		if(lastW == pow2W && lastH == pow2H) return;
		this.gl.bindTexture(this.gl.TEXTURE_2D,this.texture);
		this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,this.__width,this.__height,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,null);
		this.gl.bindRenderbuffer(this.gl.RENDERBUFFER,this.renderBuffer);
		this.gl.renderbufferStorage(this.gl.RENDERBUFFER,this.gl.DEPTH_STENCIL,this.__width,this.__height);
	}
	,createUVs: function() {
		if(this.__uvData == null) this.__uvData = new openfl_display_TextureUvs();
		var w = this.width / this.__width;
		var h = this.height / this.__height;
		this.__uvData.x0 = 0;
		this.__uvData.y0 = 0;
		this.__uvData.x1 = w;
		this.__uvData.y1 = 0;
		this.__uvData.x2 = w;
		this.__uvData.y2 = h;
		this.__uvData.x3 = 0;
		this.__uvData.y3 = h;
	}
	,powOfTwo: function(value) {
		var n = 1;
		while(n < value) n <<= 1;
		return n;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_RenderTexture
};
var openfl__$internal_renderer_opengl_utils_ShaderManager = function(gl) {
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.ShaderManager"] = openfl__$internal_renderer_opengl_utils_ShaderManager;
openfl__$internal_renderer_opengl_utils_ShaderManager.__name__ = ["openfl","_internal","renderer","opengl","utils","ShaderManager"];
openfl__$internal_renderer_opengl_utils_ShaderManager.prototype = {
	gl: null
	,currentShader: null
	,defaultShader: null
	,fillShader: null
	,patternFillShader: null
	,drawTrianglesShader: null
	,primitiveShader: null
	,setContext: function(gl) {
		this.gl = gl;
		this.defaultShader = new openfl__$internal_renderer_opengl_shaders2_DefaultShader(gl);
		this.fillShader = new openfl__$internal_renderer_opengl_shaders2_FillShader(gl);
		this.patternFillShader = new openfl__$internal_renderer_opengl_shaders2_PatternFillShader(gl);
		this.drawTrianglesShader = new openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader(gl);
		this.primitiveShader = new openfl__$internal_renderer_opengl_shaders2_PrimitiveShader(gl);
		this.setShader(this.defaultShader,true);
	}
	,destroy: function() {
		this.defaultShader.destroy();
		this.fillShader.destroy();
		this.patternFillShader.destroy();
		this.drawTrianglesShader.destroy();
		this.primitiveShader.destroy();
		this.gl = null;
	}
	,setShader: function(shader,force) {
		if(force == null) force = false;
		if(shader == null) {
			this.currentShader = null;
			this.gl.useProgram(null);
			return true;
		}
		if(this.currentShader != null && !force && this.currentShader.ID == shader.ID) return false;
		this.currentShader = shader;
		this.gl.useProgram(shader.program);
		return true;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_ShaderManager
};
var openfl__$internal_renderer_opengl_utils_SpriteBatch = function(gl,maxSprites) {
	if(maxSprites == null) maxSprites = 2000;
	this.uvs = new openfl_display_TextureUvs();
	this.matrix = new openfl_geom_Matrix();
	this.lastEnableColor = true;
	this.enableColor = true;
	this.attributes = [];
	this.writtenVertexBytes = 0;
	this.drawing = false;
	this.dirty = true;
	this.states = [];
	this.maxSprites = maxSprites;
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aPosition"));
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aTexCoord0"));
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5121,true,"openfl_aColor"));
	var array = [1,1,1,1];
	var this1;
	if(array != null) this1 = new Float32Array(array); else this1 = null;
	this.attributes[2].defaultValue = this1;
	this.maxElementsPerVertex = 0;
	var _g = 0;
	var _g1 = this.attributes;
	while(_g < _g1.length) {
		var a = _g1[_g];
		++_g;
		this.maxElementsPerVertex += Math.floor(a.components * a.getElementsBytes() / 4);
	}
	this.vertexArraySize = maxSprites * this.maxElementsPerVertex * 4 * 4;
	this.indexArraySize = maxSprites * 6;
	this.vertexArray = new openfl__$internal_renderer_opengl_utils_VertexArray(this.attributes,this.vertexArraySize,false);
	var buffer = this.vertexArray.buffer;
	var this2;
	if(buffer != null) this2 = new Float32Array(buffer,0); else this2 = null;
	this.positions = this2;
	var buffer1 = this.vertexArray.buffer;
	var this3;
	if(buffer1 != null) this3 = new Uint32Array(buffer1,0); else this3 = null;
	this.colors = this3;
	var elements = this.indexArraySize;
	var this4;
	if(elements != null) this4 = new Uint16Array(elements); else this4 = null;
	this.indices = this4;
	var i = 0;
	var j = 0;
	while(i < this.indexArraySize) {
		this.indices[i] = j;
		this.indices[i + 1] = j + 1;
		this.indices[i + 2] = j + 2;
		this.indices[i + 3] = j;
		this.indices[i + 4] = j + 2;
		this.indices[i + 5] = j + 3;
		i += 6;
		j += 4;
	}
	this.currentState = new openfl__$internal_renderer_opengl_utils__$SpriteBatch_State();
	this.dirty = true;
	this.drawing = false;
	this.batchedSprites = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.SpriteBatch"] = openfl__$internal_renderer_opengl_utils_SpriteBatch;
openfl__$internal_renderer_opengl_utils_SpriteBatch.__name__ = ["openfl","_internal","renderer","opengl","utils","SpriteBatch"];
openfl__$internal_renderer_opengl_utils_SpriteBatch.prototype = {
	gl: null
	,renderSession: null
	,states: null
	,currentState: null
	,vertexArray: null
	,positions: null
	,colors: null
	,indexBuffer: null
	,indices: null
	,dirty: null
	,drawing: null
	,clipRect: null
	,maxSprites: null
	,batchedSprites: null
	,vertexArraySize: null
	,indexArraySize: null
	,maxElementsPerVertex: null
	,elementsPerVertex: null
	,writtenVertexBytes: null
	,shader: null
	,attributes: null
	,enableColor: null
	,lastEnableColor: null
	,matrix: null
	,uvs: null
	,destroy: function() {
		this.vertexArray.destroy();
		this.vertexArray = null;
		this.indices = null;
		this.gl.deleteBuffer(this.indexBuffer);
		this.currentState.destroy();
		var _g = 0;
		var _g1 = this.states;
		while(_g < _g1.length) {
			var state = _g1[_g];
			++_g;
			state.destroy();
		}
		this.gl = null;
	}
	,begin: function(renderSession,clipRect) {
		this.renderSession = renderSession;
		this.shader = renderSession.shaderManager.defaultShader;
		this.drawing = true;
		this.start(clipRect);
	}
	,finish: function() {
		this.stop();
		this.clipRect = null;
		this.drawing = false;
	}
	,start: function(clipRect) {
		if(!this.drawing) this.stop();
		this.dirty = true;
		this.clipRect = clipRect;
	}
	,stop: function() {
		this.flush();
	}
	,renderBitmapData: function(bitmapData,smoothing,matrix,ct,alpha,blendMode,flashShader,pixelSnapping,bgra) {
		if(bgra == null) bgra = false;
		if(alpha == null) alpha = 1;
		if(bitmapData == null) return;
		var texture = bitmapData.getTexture(this.gl);
		if(this.batchedSprites >= this.maxSprites) this.flush();
		var uvs = bitmapData.__uvData;
		if(uvs == null) return;
		this.prepareShader(flashShader,bitmapData);
		var color = ((alpha * 255 | 0) & 255) << 24 | 16777215;
		this.enableColor = true;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		var index = this.batchedSprites * 4 * this.elementsPerVertex;
		this.fillVertices(index,bitmapData.width,bitmapData.height,matrix,uvs,color,pixelSnapping);
		this.setState(this.batchedSprites,texture,smoothing,blendMode,ct,flashShader,true);
		this.batchedSprites++;
	}
	,renderTiles: function(object,sheet,tileData,smooth,flags,flashShader,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		var texture = sheet.__bitmap.getTexture(this.gl);
		if(texture == null) return;
		var useScale = (flags & 1) > 0;
		var useRotation = (flags & 2) > 0;
		var useTransform = (flags & 16) > 0;
		var useRGB = (flags & 4) > 0;
		var useAlpha = (flags & 8) > 0;
		var useRect = (flags & 32) > 0;
		var useOrigin = (flags & 64) > 0;
		var blendMode;
		var _g = flags & 983040;
		switch(_g) {
		case 65536:
			blendMode = openfl_display_BlendMode.ADD;
			break;
		case 131072:
			blendMode = openfl_display_BlendMode.MULTIPLY;
			break;
		case 262144:
			blendMode = openfl_display_BlendMode.SCREEN;
			break;
		case 524288:
			blendMode = openfl_display_BlendMode.SUBTRACT;
			break;
		default:
			var _g1 = flags & 15728640;
			switch(_g1) {
			case 1048576:
				blendMode = openfl_display_BlendMode.DARKEN;
				break;
			case 2097152:
				blendMode = openfl_display_BlendMode.LIGHTEN;
				break;
			case 4194304:
				blendMode = openfl_display_BlendMode.OVERLAY;
				break;
			case 8388608:
				blendMode = openfl_display_BlendMode.HARDLIGHT;
				break;
			default:
				var _g2 = flags & 251658240;
				switch(_g2) {
				case 16777216:
					blendMode = openfl_display_BlendMode.DIFFERENCE;
					break;
				case 33554432:
					blendMode = openfl_display_BlendMode.INVERT;
					break;
				default:
					blendMode = openfl_display_BlendMode.NORMAL;
				}
			}
		}
		if(useTransform) {
			useScale = false;
			useRotation = false;
		}
		var scaleIndex = 0;
		var rotationIndex = 0;
		var rgbIndex = 0;
		var alphaIndex = 0;
		var transformIndex = 0;
		var numValues = 3;
		if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
		if(useScale) {
			scaleIndex = numValues;
			numValues++;
		}
		if(useRotation) {
			rotationIndex = numValues;
			numValues++;
		}
		if(useTransform) {
			transformIndex = numValues;
			numValues += 4;
		}
		if(useRGB) {
			rgbIndex = numValues;
			numValues += 3;
		}
		if(useAlpha) {
			alphaIndex = numValues;
			numValues++;
		}
		var totalCount = tileData.length;
		if(count >= 0 && totalCount > count) totalCount = count;
		var itemCount = Math.ceil(totalCount / numValues);
		var iIndex = 0;
		var tileID = -1;
		var rect = sheet.__rectTile;
		var tileUV = sheet.__rectUV;
		var center = sheet.__point;
		var x = 0.0;
		var y = 0.0;
		var alpha = 1.0;
		var tint = 16777215;
		var color = -1;
		var scale = 1.0;
		var rotation = 0.0;
		var cosTheta = 1.0;
		var sinTheta = 0.0;
		var a = 0.0;
		var b = 0.0;
		var c = 0.0;
		var d = 0.0;
		var tx = 0.0;
		var ty = 0.0;
		var ox = 0.0;
		var oy = 0.0;
		var oMatrix = object.__worldTransform;
		var bIndex = 0;
		var tMa = 1.0;
		var tMb = 0.0;
		var tMc = 0.0;
		var tMd = 1.0;
		var tMtx = 0.0;
		var tMty = 0.0;
		var oMa = oMatrix.a;
		var oMb = oMatrix.b;
		var oMc = oMatrix.c;
		var oMd = oMatrix.d;
		var oMtx = oMatrix.tx;
		var oMty = oMatrix.ty;
		var rx = 0.0;
		var ry = 0.0;
		var rw = 0.0;
		var rh = 0.0;
		var tuvx = 0.0;
		var tuvy = 0.0;
		var tuvw = 0.0;
		var tuvh = 0.0;
		this.enableColor = true;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		this.prepareShader(flashShader,null);
		while(iIndex < totalCount) {
			if(this.batchedSprites >= this.maxSprites) this.flush();
			x = tileData[iIndex];
			y = tileData[iIndex + 1];
			if(useRect) {
				tileID = -1;
				rect.x = tileData[iIndex + 2];
				rect.y = tileData[iIndex + 3];
				rect.width = tileData[iIndex + 4];
				rect.height = tileData[iIndex + 5];
				if(useOrigin) {
					center.x = tileData[iIndex + 6];
					center.y = tileData[iIndex + 7];
				} else {
					center.x = 0;
					center.y = 0;
				}
				rw = rect.width;
				rh = rect.height;
				tuvx = rect.get_left() / sheet.__bitmap.width;
				tuvy = rect.get_top() / sheet.__bitmap.height;
				tuvw = rect.get_right() / sheet.__bitmap.width;
				tuvh = rect.get_bottom() / sheet.__bitmap.height;
			} else {
				tileID = (tileData[iIndex + 2] == null?0:tileData[iIndex + 2]) | 0;
				rect = sheet.__tileRects[tileID];
				center = sheet.__centerPoints[tileID];
				tileUV = sheet.__tileUVs[tileID];
				if(rect != null) {
					rw = rect.width;
					rh = rect.height;
					tuvx = tileUV.x;
					tuvy = tileUV.y;
					tuvw = tileUV.width;
					tuvh = tileUV.height;
				}
			}
			if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
				alpha = 1;
				tint = 16777215;
				scale = 1.0;
				rotation = 0.0;
				cosTheta = 1.0;
				sinTheta = 0.0;
				if(useAlpha) alpha = tileData[iIndex + alphaIndex] * object.__worldAlpha; else alpha = object.__worldAlpha;
				if(useRGB) tint = (tileData[iIndex + rgbIndex] * 255 | 0) << 16 | (tileData[iIndex + rgbIndex + 1] * 255 | 0) << 8 | (tileData[iIndex + rgbIndex + 2] * 255 | 0);
				if(useScale) scale = tileData[iIndex + scaleIndex];
				if(useRotation) {
					rotation = tileData[iIndex + rotationIndex];
					cosTheta = Math.cos(rotation);
					sinTheta = Math.sin(rotation);
				}
				if(useTransform) {
					a = tileData[iIndex + transformIndex];
					b = tileData[iIndex + transformIndex + 1];
					c = tileData[iIndex + transformIndex + 2];
					d = tileData[iIndex + transformIndex + 3];
				} else {
					a = scale * cosTheta;
					b = scale * sinTheta;
					c = -b;
					d = a;
				}
				ox = center.x * a + center.y * c;
				oy = center.x * b + center.y * d;
				tx = x - ox;
				ty = y - oy;
				tMa = (a * oMa + b * oMc) * rw;
				tMb = (a * oMb + b * oMd) * rw;
				tMc = (c * oMa + d * oMc) * rh;
				tMd = (c * oMb + d * oMd) * rh;
				tMtx = tx * oMa + ty * oMc + oMtx;
				tMty = tx * oMb + ty * oMd + oMty;
				bIndex = this.batchedSprites * 4 * this.elementsPerVertex;
				this.positions[bIndex] = tMtx;
				this.positions[bIndex + 1] = tMty;
				this.positions[bIndex + 5] = tMa + tMtx;
				this.positions[bIndex + 6] = tMb + tMty;
				this.positions[bIndex + 10] = tMa + tMc + tMtx;
				this.positions[bIndex + 11] = tMd + tMb + tMty;
				this.positions[bIndex + 15] = tMc + tMtx;
				this.positions[bIndex + 16] = tMd + tMty;
				var val;
				var val1;
				var val2 = this.colors[bIndex + 19] = ((alpha * 255 | 0) & 255) << 24 | tint;
				val1 = this.colors[bIndex + 14] = val2;
				val = this.colors[bIndex + 9] = val1;
				this.colors[bIndex + 4] = val;
				this.positions[bIndex + 2] = tuvx;
				this.positions[bIndex + 3] = tuvy;
				this.positions[bIndex + 7] = tuvw;
				this.positions[bIndex + 8] = tuvy;
				this.positions[bIndex + 12] = tuvw;
				this.positions[bIndex + 13] = tuvh;
				this.positions[bIndex + 17] = tuvx;
				this.positions[bIndex + 18] = tuvh;
				this.writtenVertexBytes = bIndex + 20;
				this.setState(this.batchedSprites,texture,smooth,blendMode,object.__worldColorTransform,flashShader,false);
				this.batchedSprites++;
			}
			iIndex += numValues;
		}
	}
	,fillVertices: function(index,width,height,matrix,uvs,color,pixelSnapping) {
		if(color == null) color = -1;
		var a = matrix.a;
		var b = matrix.b;
		var c = matrix.c;
		var d = matrix.d;
		var tx = matrix.tx;
		var ty = matrix.ty;
		if(pixelSnapping == null || pixelSnapping == openfl_display_PixelSnapping.NEVER) {
			this.positions[index] = tx;
			this.positions[index + 1] = ty;
			this.positions[index + 5] = a * width + tx;
			this.positions[index + 6] = b * width + ty;
			this.positions[index + 10] = a * width + c * height + tx;
			this.positions[index + 11] = d * height + b * width + ty;
			this.positions[index + 15] = c * height + tx;
			this.positions[index + 16] = d * height + ty;
		} else {
			var val = Math.round(tx);
			this.positions[index] = val;
			var val1 = Math.round(ty);
			this.positions[index + 1] = val1;
			var val2 = Math.round(a * width + tx);
			this.positions[index + 5] = val2;
			var val3 = Math.round(b * width + ty);
			this.positions[index + 6] = val3;
			var val4 = Math.round(a * width + c * height + tx);
			this.positions[index + 10] = val4;
			var val5 = Math.round(d * height + b * width + ty);
			this.positions[index + 11] = val5;
			var val6 = Math.round(c * height + tx);
			this.positions[index + 15] = val6;
			var val7 = Math.round(d * height + ty);
			this.positions[index + 16] = val7;
		}
		if(this.enableColor) {
			var val8;
			var val9;
			var val10 = this.colors[index + 19] = color;
			val9 = this.colors[index + 14] = val10;
			val8 = this.colors[index + 9] = val9;
			this.colors[index + 4] = val8;
		}
		this.positions[index + 2] = uvs.x0;
		this.positions[index + 3] = uvs.y0;
		this.positions[index + 7] = uvs.x1;
		this.positions[index + 8] = uvs.y1;
		this.positions[index + 12] = uvs.x2;
		this.positions[index + 13] = uvs.y2;
		this.positions[index + 17] = uvs.x3;
		this.positions[index + 18] = uvs.y3;
		this.writtenVertexBytes = index + 20;
	}
	,enableAttributes: function(color) {
		if(color == null) color = -1;
		this.enableColor = color != -1;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
	}
	,flush: function() {
		if(this.batchedSprites == 0) return;
		if(this.clipRect != null) {
			this.gl.enable(this.gl.SCISSOR_TEST);
			this.gl.scissor(Math.floor(this.clipRect.x),Math.floor(this.clipRect.y),Math.ceil(this.clipRect.width),Math.ceil(this.clipRect.height));
		}
		if(this.dirty) {
			this.dirty = false;
			this.renderSession.activeTextures = 1;
			this.vertexArray.bind();
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		}
		if(this.writtenVertexBytes > this.vertexArraySize * 0.5) this.vertexArray.upload(this.positions); else {
			var view = this.positions.subarray(0,this.writtenVertexBytes);
			this.vertexArray.upload(view);
		}
		var nextState;
		var batchSize = 0;
		var start = 0;
		this.currentState.shader = null;
		this.currentState.shaderData = null;
		this.currentState.texture = null;
		this.currentState.textureSmooth = false;
		this.currentState.blendMode = this.renderSession.blendModeManager.currentBlendMode;
		this.currentState.colorTransform = null;
		this.currentState.skipColorTransformAlpha = false;
		var _g1 = 0;
		var _g = this.batchedSprites;
		while(_g1 < _g) {
			var i = _g1++;
			nextState = this.states[i];
			this.currentState.skipColorTransformAlpha = nextState.skipColorTransformAlpha;
			if(!nextState.equals(this.currentState)) {
				this.renderBatch(this.currentState,batchSize,start);
				start = i;
				batchSize = 0;
				this.currentState.shader = nextState.shader;
				this.currentState.shaderData = nextState.shaderData;
				this.currentState.texture = nextState.texture;
				this.currentState.textureSmooth = nextState.textureSmooth;
				this.currentState.blendMode = nextState.blendMode;
				this.currentState.colorTransform = nextState.colorTransform;
			}
			batchSize++;
		}
		this.renderBatch(this.currentState,batchSize,start);
		this.batchedSprites = 0;
		this.writtenVertexBytes = 0;
		if(this.clipRect != null) this.gl.disable(this.gl.SCISSOR_TEST);
	}
	,renderBatch: function(state,size,start) {
		if(size == 0 || state.texture == null) return;
		var shader;
		if(state.shader == null) shader = this.renderSession.shaderManager.defaultShader; else shader = state.shader;
		this.renderSession.shaderManager.setShader(shader);
		shader.bindVertexArray(this.vertexArray);
		this.renderSession.blendModeManager.setBlendMode(shader.blendMode != null?shader.blendMode:state.blendMode);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uProjectionMatrix"),false,this.renderSession.projectionMatrix.toArray(true));
		if(state.colorTransform != null) {
			this.gl.uniform1i(shader.getUniformLocation("openfl_uUseColorTransform"),1);
			var ct = state.colorTransform;
			this.gl.uniform4f(shader.getUniformLocation("openfl_uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,state.skipColorTransformAlpha?1:ct.alphaMultiplier);
			this.gl.uniform4f(shader.getUniformLocation("openfl_uColorOffset"),ct.redOffset / 255.,ct.greenOffset / 255.,ct.blueOffset / 255.,ct.alphaOffset / 255.);
		} else {
			this.gl.uniform1i(shader.getUniformLocation("openfl_uUseColorTransform"),0);
			this.gl.uniform4f(shader.getUniformLocation("openfl_uColorMultiplier"),1,1,1,1);
			this.gl.uniform4f(shader.getUniformLocation("openfl_uColorOffset"),0,0,0,0);
		}
		this.gl.activeTexture(this.gl.TEXTURE0);
		this.gl.bindTexture(this.gl.TEXTURE_2D,state.texture);
		this.gl.uniform1i(shader.getUniformLocation("openfl_uSampler0"),0);
		if(shader.smooth != null && shader.smooth || state.textureSmooth) {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR);
		} else {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);
		}
		this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,shader.wrapS);
		this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,shader.wrapT);
		shader.applyData(state.shaderData,this.renderSession);
		this.gl.drawElements(this.gl.TRIANGLES,size * 6,this.gl.UNSIGNED_SHORT,start * 6 * 2);
		this.renderSession.drawCount++;
	}
	,setState: function(index,texture,smooth,blendMode,colorTransform,shader,skipAlpha) {
		if(skipAlpha == null) skipAlpha = false;
		if(smooth == null) smooth = false;
		var state = this.states[index];
		if(state == null) state = this.states[index] = new openfl__$internal_renderer_opengl_utils__$SpriteBatch_State();
		state.texture = texture;
		state.textureSmooth = smooth;
		state.blendMode = blendMode;
		if(colorTransform != null && colorTransform.__isDefault()) state.colorTransform = null; else state.colorTransform = colorTransform;
		state.skipColorTransformAlpha = skipAlpha;
		if(shader == null) {
			state.shader = null;
			state.shaderData = null;
		} else {
			state.shader = shader.__shader;
			state.shaderData = shader.data;
		}
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.vertexArray.setContext(gl,this.positions);
		this.indexBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,this.indices,gl.STATIC_DRAW);
	}
	,prepareShader: function(flashShader,bd) {
		if(flashShader != null) {
			flashShader.__init(this.gl);
			flashShader.__shader.wrapS = flashShader.repeatX;
			flashShader.__shader.wrapT = flashShader.repeatY;
			flashShader.__shader.smooth = flashShader.smooth;
			flashShader.__shader.blendMode = flashShader.blendMode;
			var objSize = flashShader.data.get(openfl_display_Shader.uObjectSize);
			var texSize = flashShader.data.get(openfl_display_Shader.uTextureSize);
			if(bd != null) {
				objSize.value[0] = bd.width;
				objSize.value[1] = bd.height;
				if(bd.__pingPongTexture != null) {
					texSize.value[0] = bd.__pingPongTexture.get_renderTexture().__width;
					texSize.value[1] = bd.__pingPongTexture.get_renderTexture().__height;
				} else {
					texSize.value[0] = bd.width;
					texSize.value[1] = bd.height;
				}
			} else {
				objSize.value[0] = 0;
				objSize.value[1] = 0;
				texSize.value[0] = 0;
				texSize.value[1] = 0;
			}
		}
	}
	,getElementsPerVertex: function() {
		var r = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) r += Math.floor(a.components * a.getElementsBytes() / 4);
		}
		return r;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_SpriteBatch
};
var openfl__$internal_renderer_opengl_utils__$SpriteBatch_State = function() {
	this.skipColorTransformAlpha = false;
	this.textureSmooth = true;
};
$hxClasses["openfl._internal.renderer.opengl.utils._SpriteBatch.State"] = openfl__$internal_renderer_opengl_utils__$SpriteBatch_State;
openfl__$internal_renderer_opengl_utils__$SpriteBatch_State.__name__ = ["openfl","_internal","renderer","opengl","utils","_SpriteBatch","State"];
openfl__$internal_renderer_opengl_utils__$SpriteBatch_State.prototype = {
	texture: null
	,textureSmooth: null
	,blendMode: null
	,colorTransform: null
	,skipColorTransformAlpha: null
	,shader: null
	,shaderData: null
	,equals: function(other) {
		return (this.shader == null && other.shader == null || this.shader != null && other.shader != null && this.shader.ID == other.shader.ID) && this.texture == other.texture && this.textureSmooth == other.textureSmooth && this.blendMode == other.blendMode && (this.colorTransform == null && other.colorTransform == null || this.colorTransform != null && other.colorTransform != null && this.colorTransform.__equals(other.colorTransform,this.skipColorTransformAlpha));
	}
	,destroy: function() {
		this.texture = null;
		this.colorTransform = null;
	}
	,__class__: openfl__$internal_renderer_opengl_utils__$SpriteBatch_State
};
var openfl__$internal_renderer_opengl_utils_StencilManager = function(gl) {
	this.stencilMask = 0;
	this.stencilStack = [];
	this.setContext(gl);
	this.reverse = true;
	this.count = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.StencilManager"] = openfl__$internal_renderer_opengl_utils_StencilManager;
openfl__$internal_renderer_opengl_utils_StencilManager.__name__ = ["openfl","_internal","renderer","opengl","utils","StencilManager"];
openfl__$internal_renderer_opengl_utils_StencilManager.prototype = {
	count: null
	,gl: null
	,reverse: null
	,stencilStack: null
	,stencilMask: null
	,prepareGraphics: function(fill,renderSession,translationMatrix) {
		var shader = renderSession.shaderManager.fillShader;
		renderSession.shaderManager.setShader(shader);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uTranslationMatrix"),false,translationMatrix);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
		fill.vertexArray.bind();
		shader.bindVertexArray(fill.vertexArray);
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,fill.indexBuffer);
	}
	,pushBucket: function(bucket,renderSession,translationMatrix,isMask) {
		if(isMask == null) isMask = false;
		if(!isMask) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.gl.stencilMask(255);
			this.gl.colorMask(false,false,false,false);
			this.gl.stencilFunc(this.gl.NEVER,1,255);
			this.gl.stencilOp(this.gl.INVERT,this.gl.KEEP,this.gl.KEEP);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		var _g = 0;
		var _g1 = bucket.fills;
		while(_g < _g1.length) {
			var fill = _g1[_g];
			++_g;
			if(fill.available) continue;
			this.prepareGraphics(fill,renderSession,translationMatrix);
			this.gl.drawElements(fill.drawMode,fill.glIndices.length,this.gl.UNSIGNED_SHORT,0);
		}
		if(!isMask) {
			this.gl.colorMask(true,true,true,renderSession.renderer.transparent);
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
			this.gl.stencilFunc(this.gl.EQUAL,255,255);
		}
	}
	,popBucket: function(object,bucket,renderSession) {
		this.gl.disable(this.gl.STENCIL_TEST);
	}
	,pushMask: function(object,renderSession) {
		var maskGraphics = object.__maskGraphics;
		if(maskGraphics == null || maskGraphics.__commands.get_length() <= 0) return;
		if(this.stencilMask == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		this.stencilMask++;
		if(maskGraphics.__dirty) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics(object,maskGraphics,renderSession.gl);
		var func;
		if(this.stencilMask == 1) func = this.gl.NEVER; else func = this.gl.EQUAL;
		var ref = this.stencilMask;
		var mask = 255 - this.stencilMask;
		this.gl.stencilMask(255);
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(func,ref,mask);
		this.gl.stencilOp(this.gl.REPLACE,this.gl.KEEP,this.gl.KEEP);
		var glStack = maskGraphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
		var bucket;
		var translationMatrix = object.__worldTransform;
		var _g1 = 0;
		var _g = glStack.buckets.length;
		while(_g1 < _g) {
			var i = _g1++;
			bucket = glStack.buckets[i];
			if(bucket.overrideMatrix != null) translationMatrix = bucket.overrideMatrix; else translationMatrix = object.__worldTransform;
			var _g2 = bucket.mode;
			switch(_g2[1]) {
			case 1:case 2:
				this.pushBucket(bucket,renderSession,translationMatrix.toArray(true),true);
				break;
			default:
			}
		}
		this.gl.colorMask(true,true,true,renderSession.renderer.transparent);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.gl.stencilFunc(this.gl.EQUAL,this.stencilMask,255);
	}
	,popMask: function(object,renderSession) {
		this.stencilMask--;
		if(this.stencilMask <= 0) {
			this.gl.disable(this.gl.STENCIL_TEST);
			this.stencilMask = 0;
		}
	}
	,bindGraphics: function(object,glData,renderSession) {
	}
	,destroy: function() {
		this.stencilStack = null;
		this.gl = null;
	}
	,popStencil: function(object,glData,renderSession) {
		this.stencilStack.pop();
		this.count--;
		if(this.stencilStack.length == 0) this.gl.disable(this.gl.STENCIL_TEST); else {
			var level = this.count;
			this.bindGraphics(object,glData,renderSession);
			this.gl.colorMask(false,false,false,false);
			if(glData.mode == 1) {
				this.reverse = !this.reverse;
				if(this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_FAN,4,this.gl.UNSIGNED_SHORT,(glData.indices.length - 4) * 2);
				this.gl.stencilFunc(this.gl.ALWAYS,0,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INVERT);
				this.gl.drawElements(this.gl.TRIANGLE_FAN,glData.indices.length - 4,this.gl.UNSIGNED_SHORT,0);
				if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - level,255); else this.gl.stencilFunc(this.gl.EQUAL,level,255);
			} else {
				if(!this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_STRIP,glData.indices.length,this.gl.UNSIGNED_SHORT,0);
				if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - level,255); else this.gl.stencilFunc(this.gl.EQUAL,level,255);
			}
			this.gl.colorMask(true,true,true,true);
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		}
	}
	,pushStencil: function(object,glData,renderSession) {
		this.bindGraphics(object,glData,renderSession);
		if(this.stencilStack.length == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.reverse = true;
			this.count = 0;
		}
		this.stencilStack.push(glData);
		var level = this.count;
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(this.gl.ALWAYS,0,255);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INVERT);
		if(glData.mode == 1) {
			this.gl.drawElements(this.gl.TRIANGLE_FAN,glData.indices.length - 4,this.gl.UNSIGNED_SHORT,0);
			if(this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
			}
			this.gl.drawElements(this.gl.TRIANGLE_FAN,4,this.gl.UNSIGNED_SHORT,(glData.indices.length - 4) * 2);
			if(this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255); else this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
			this.reverse = !this.reverse;
		} else {
			if(!this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
			}
			this.gl.drawElements(this.gl.TRIANGLE_STRIP,glData.indices.length,this.gl.UNSIGNED_SHORT,0);
			if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255); else this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
		}
		this.gl.colorMask(true,true,true,true);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.count++;
	}
	,setContext: function(gl) {
		this.gl = gl;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_StencilManager
};
var openfl__$internal_renderer_opengl_utils_VertexArray = function(attributes,size,isStatic) {
	if(isStatic == null) isStatic = false;
	if(size == null) size = 0;
	this.isStatic = false;
	this.size = 0;
	this.attributes = [];
	this.size = size;
	this.attributes = attributes;
	if(size > 0) this.buffer = new ArrayBuffer(size);
	this.isStatic = isStatic;
};
$hxClasses["openfl._internal.renderer.opengl.utils.VertexArray"] = openfl__$internal_renderer_opengl_utils_VertexArray;
openfl__$internal_renderer_opengl_utils_VertexArray.__name__ = ["openfl","_internal","renderer","opengl","utils","VertexArray"];
openfl__$internal_renderer_opengl_utils_VertexArray.prototype = {
	gl: null
	,glBuffer: null
	,attributes: null
	,buffer: null
	,size: null
	,isStatic: null
	,bind: function() {
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.glBuffer);
	}
	,unbind: function() {
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null);
	}
	,upload: function(view) {
		this.gl.bufferSubData(this.gl.ARRAY_BUFFER,0,view);
	}
	,destroy: function() {
		this.gl.deleteBuffer(this.glBuffer);
		this.buffer = null;
	}
	,setContext: function(gl,view) {
		this.gl = gl;
		this.glBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER,this.glBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,view,this.isStatic?gl.STATIC_DRAW:gl.DYNAMIC_DRAW);
	}
	,get_stride: function() {
		var s = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) s += Math.floor(a.components * a.getElementsBytes() / 4) * 4;
		}
		return s;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_VertexArray
	,__properties__: {get_stride:"get_stride"}
};
var openfl__$internal_text_TextEngine = function(textField) {
	this.textField = textField;
	this.width = 100;
	this.height = 100;
	this.text = "";
	this.bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.type = openfl_text_TextFieldType.DYNAMIC;
	this.autoSize = openfl_text_TextFieldAutoSize.NONE;
	this.displayAsPassword = false;
	this.embedFonts = false;
	this.selectable = true;
	this.borderColor = 0;
	this.border = false;
	this.backgroundColor = 16777215;
	this.background = false;
	this.gridFitType = openfl_text_GridFitType.PIXEL;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.wordWrap = false;
	this.lineAscents = [];
	this.lineBreaks = [];
	this.lineDescents = [];
	this.lineLeadings = [];
	this.lineHeights = [];
	this.lineWidths = [];
	this.layoutGroups = [];
	this.textFormatRanges = [];
	openfl__$internal_text_TextEngine.__canvas = window.document.createElement("canvas");
	openfl__$internal_text_TextEngine.__context = openfl__$internal_text_TextEngine.__canvas.getContext("2d");
};
$hxClasses["openfl._internal.text.TextEngine"] = openfl__$internal_text_TextEngine;
openfl__$internal_text_TextEngine.__name__ = ["openfl","_internal","text","TextEngine"];
openfl__$internal_text_TextEngine.__canvas = null;
openfl__$internal_text_TextEngine.__context = null;
openfl__$internal_text_TextEngine.findFont = function(name) {
	return null;
};
openfl__$internal_text_TextEngine.getFont = function(format) {
	var font;
	if(format.italic) font = "italic "; else font = "normal ";
	font += "normal ";
	if(format.bold) font += "bold "; else font += "normal ";
	font += format.size + "px";
	font += "/" + (format.size + format.leading + 6) + "px ";
	font += "" + (function($this) {
		var $r;
		var _g = format.font;
		$r = (function($this) {
			var $r;
			switch(_g) {
			case "_sans":
				$r = "sans-serif";
				break;
			case "_serif":
				$r = "serif";
				break;
			case "_typewriter":
				$r = "monospace";
				break;
			default:
				$r = "'" + format.font + "'";
			}
			return $r;
		}($this));
		return $r;
	}(this));
	return font;
};
openfl__$internal_text_TextEngine.getFontInstance = function(format) {
	return null;
};
openfl__$internal_text_TextEngine.prototype = {
	antiAliasType: null
	,autoSize: null
	,background: null
	,backgroundColor: null
	,border: null
	,borderColor: null
	,bottomScrollV: null
	,bounds: null
	,caretIndex: null
	,displayAsPassword: null
	,embedFonts: null
	,gridFitType: null
	,height: null
	,layoutGroups: null
	,lineAscents: null
	,lineBreaks: null
	,lineDescents: null
	,lineLeadings: null
	,lineHeights: null
	,lineWidths: null
	,maxChars: null
	,maxScrollH: null
	,maxScrollV: null
	,multiline: null
	,numLines: null
	,restrict: null
	,scrollH: null
	,scrollV: null
	,selectable: null
	,sharpness: null
	,text: null
	,textHeight: null
	,textFormatRanges: null
	,textWidth: null
	,type: null
	,width: null
	,wordWrap: null
	,textField: null
	,__cursorPosition: null
	,__cursorTimer: null
	,__hasFocus: null
	,__isKeyDown: null
	,__measuredHeight: null
	,__measuredWidth: null
	,__selectionStart: null
	,__showCursor: null
	,__textFormat: null
	,__textLayout: null
	,__texture: null
	,__tileData: null
	,__tileDataLength: null
	,__tilesheets: null
	,__cairoFont: null
	,__font: null
	,__hiddenInput: null
	,getBounds: function() {
		var padding;
		if(this.border) padding = 1; else padding = 0;
		this.bounds.width = this.width + padding;
		this.bounds.height = this.height + padding;
	}
	,getLine: function(index) {
		if(index < 0 || index > this.lineBreaks.length + 1) return null;
		if(this.lineBreaks.length == 0) return this.text; else return this.text.substring(index > 0?this.lineBreaks[index - 1]:0,this.lineBreaks[index]);
	}
	,getLineMeasurements: function() {
		this.lineAscents.splice(0,this.lineAscents.length);
		this.lineDescents.splice(0,this.lineDescents.length);
		this.lineLeadings.splice(0,this.lineLeadings.length);
		this.lineHeights.splice(0,this.lineHeights.length);
		this.lineWidths.splice(0,this.lineWidths.length);
		var currentLineAscent = 0.0;
		var currentLineDescent = 0.0;
		var currentLineLeading = null;
		var currentLineHeight = 0.0;
		var currentLineWidth = 0.0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.numLines = 1;
		this.bottomScrollV = 0;
		this.maxScrollH = 0;
		var _g = 0;
		var _g1 = this.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			while(group.lineIndex > this.numLines - 1) {
				this.lineAscents.push(currentLineAscent);
				this.lineDescents.push(currentLineDescent);
				this.lineLeadings.push(currentLineLeading != null?currentLineLeading:0);
				this.lineHeights.push(currentLineHeight);
				this.lineWidths.push(currentLineWidth);
				currentLineAscent = 0;
				currentLineDescent = 0;
				currentLineLeading = null;
				currentLineHeight = 0;
				currentLineWidth = 0;
				this.numLines++;
				if(this.textHeight <= this.height - 2) this.bottomScrollV++;
			}
			currentLineAscent = Math.max(currentLineAscent,group.ascent);
			currentLineDescent = Math.max(currentLineDescent,group.descent);
			if(currentLineLeading == null) currentLineLeading = group.leading; else currentLineLeading = Std["int"](Math.max(currentLineLeading,group.leading));
			currentLineHeight = Math.max(currentLineHeight,group.height);
			currentLineWidth = group.offsetX - 2 + group.width;
			if(currentLineWidth > this.textWidth) this.textWidth = currentLineWidth;
			this.textHeight = group.offsetY - 2 + group.ascent + group.descent;
		}
		this.lineAscents.push(currentLineAscent);
		this.lineDescents.push(currentLineDescent);
		this.lineLeadings.push(currentLineLeading != null?currentLineLeading:0);
		this.lineHeights.push(currentLineHeight);
		this.lineWidths.push(currentLineWidth);
		if(this.numLines == 1) {
			this.bottomScrollV = 1;
			if(currentLineLeading > 0) this.textHeight += currentLineLeading;
		} else if(this.textHeight <= this.height - 2) this.bottomScrollV++;
		if(this.textWidth > this.width - 4) this.maxScrollH = this.textWidth - this.width + 4 | 0; else this.maxScrollH = 0;
		this.maxScrollV = this.numLines - this.bottomScrollV + 1;
	}
	,getLayoutGroups: function() {
		var _g = this;
		this.layoutGroups.splice(0,this.layoutGroups.length);
		var rangeIndex = -1;
		var formatRange = null;
		var font = null;
		var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
		var leading = 0;
		var ascent = 0.0;
		var descent = 0.0;
		var layoutGroup;
		var advances;
		var widthValue;
		var heightValue = 0.0;
		var spaceWidth = 0.0;
		var previousSpaceIndex = 0;
		var spaceIndex = this.text.indexOf(" ");
		var breakIndex = this.text.indexOf("\n");
		var marginRight = 0.0;
		var offsetX = 2.0;
		var offsetY = 2.0;
		var textIndex = 0;
		var lineIndex = 0;
		var lineFormat = null;
		if(rangeIndex < _g.textFormatRanges.length - 1) {
			rangeIndex++;
			formatRange = _g.textFormatRanges[rangeIndex];
			currentFormat.__merge(formatRange.format);
			openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
			ascent = currentFormat.size;
			descent = currentFormat.size * 0.185;
			leading = currentFormat.leading;
			heightValue = ascent + descent + leading;
			if(spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
		}
		lineFormat = formatRange.format;
		var wrap;
		while(textIndex < this.text.length) if(breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex) && formatRange.end >= breakIndex) {
			layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,breakIndex);
			var text = this.text;
			var advances1 = [];
			var _g1 = textIndex;
			while(_g1 < breakIndex) {
				var i = _g1++;
				advances1.push(openfl__$internal_text_TextEngine.__context.measureText(text.charAt(i)).width);
			}
			layoutGroup.advances = advances1;
			layoutGroup.offsetX = offsetX;
			layoutGroup.ascent = ascent;
			layoutGroup.descent = descent;
			layoutGroup.leading = leading;
			layoutGroup.lineIndex = lineIndex;
			layoutGroup.offsetY = offsetY;
			var advances2 = layoutGroup.advances;
			var width = 0.0;
			var _g2 = 0;
			while(_g2 < advances2.length) {
				var advance = advances2[_g2];
				++_g2;
				width += advance;
			}
			layoutGroup.width = width;
			layoutGroup.height = heightValue;
			this.layoutGroups.push(layoutGroup);
			offsetY += heightValue;
			offsetX = 2;
			if(this.wordWrap && layoutGroup.offsetX + layoutGroup.width > this.width - 2) {
				layoutGroup.offsetY = offsetY;
				layoutGroup.offsetX = offsetX;
				offsetY += heightValue;
				lineIndex++;
			}
			textIndex = breakIndex + 1;
			breakIndex = this.text.indexOf("\n",textIndex);
			lineIndex++;
			if(formatRange.end == breakIndex) {
				if(rangeIndex < _g.textFormatRanges.length - 1) {
					rangeIndex++;
					formatRange = _g.textFormatRanges[rangeIndex];
					currentFormat.__merge(formatRange.format);
					openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
					ascent = currentFormat.size;
					descent = currentFormat.size * 0.185;
					leading = currentFormat.leading;
					heightValue = ascent + descent + leading;
					if(spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
				}
				lineFormat = formatRange.format;
			}
		} else if(formatRange.end >= spaceIndex && spaceIndex > -1) {
			layoutGroup = null;
			wrap = false;
			while(true) {
				if(spaceIndex == -1) spaceIndex = formatRange.end;
				var text1 = this.text;
				var advances3 = [];
				var _g3 = textIndex;
				while(_g3 < spaceIndex) {
					var i1 = _g3++;
					advances3.push(openfl__$internal_text_TextEngine.__context.measureText(text1.charAt(i1)).width);
				}
				advances = advances3;
				var width1 = 0.0;
				var _g4 = 0;
				while(_g4 < advances.length) {
					var advance1 = advances[_g4];
					++_g4;
					width1 += advance1;
				}
				widthValue = width1;
				if(this.wordWrap) {
					if(offsetX + widthValue > this.width - 2) wrap = true;
				}
				if(wrap) {
					offsetY += heightValue;
					var i2 = this.layoutGroups.length - 1;
					var offsetCount = 0;
					while(true) {
						layoutGroup = this.layoutGroups[i2];
						if(i2 > 0 && layoutGroup.startIndex > previousSpaceIndex) offsetCount++; else break;
						i2--;
					}
					lineIndex++;
					offsetX = 2;
					if(offsetCount > 0) {
						var bumpX = this.layoutGroups[this.layoutGroups.length - offsetCount].offsetX;
						var _g11 = this.layoutGroups.length - offsetCount;
						var _g5 = this.layoutGroups.length;
						while(_g11 < _g5) {
							var i3 = _g11++;
							layoutGroup = this.layoutGroups[i3];
							layoutGroup.offsetX -= bumpX;
							layoutGroup.offsetY = offsetY;
							layoutGroup.lineIndex = lineIndex;
							offsetX += layoutGroup.width;
						}
					}
					layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,spaceIndex);
					layoutGroup.advances = advances;
					layoutGroup.offsetX = offsetX;
					layoutGroup.ascent = ascent;
					layoutGroup.descent = descent;
					layoutGroup.leading = leading;
					layoutGroup.lineIndex = lineIndex;
					layoutGroup.offsetY = offsetY;
					layoutGroup.width = widthValue;
					layoutGroup.height = heightValue;
					this.layoutGroups.push(layoutGroup);
					offsetX = widthValue + spaceWidth;
					marginRight = spaceWidth;
					wrap = false;
				} else {
					if(layoutGroup != null && textIndex == spaceIndex) {
						if(formatRange.format.align != openfl_text_TextFormatAlign.JUSTIFY) layoutGroup.endIndex = spaceIndex;
						layoutGroup.advances.push(spaceWidth);
						marginRight += spaceWidth;
					} else if(layoutGroup == null || lineFormat.align == openfl_text_TextFormatAlign.JUSTIFY) {
						layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,spaceIndex);
						layoutGroup.advances = advances;
						layoutGroup.offsetX = offsetX;
						layoutGroup.ascent = ascent;
						layoutGroup.descent = descent;
						layoutGroup.leading = leading;
						layoutGroup.lineIndex = lineIndex;
						layoutGroup.offsetY = offsetY;
						layoutGroup.width = widthValue;
						layoutGroup.height = heightValue;
						this.layoutGroups.push(layoutGroup);
						layoutGroup.advances.push(spaceWidth);
						marginRight = spaceWidth;
					} else {
						layoutGroup.endIndex = spaceIndex;
						layoutGroup.advances = layoutGroup.advances.concat(advances);
						layoutGroup.width += marginRight + widthValue;
						layoutGroup.advances.push(spaceWidth);
						marginRight = spaceWidth;
					}
					offsetX += widthValue + spaceWidth;
				}
				textIndex = spaceIndex + 1;
				previousSpaceIndex = spaceIndex;
				spaceIndex = this.text.indexOf(" ",previousSpaceIndex + 1);
				if(formatRange.end <= previousSpaceIndex) {
					layoutGroup = null;
					if(rangeIndex < _g.textFormatRanges.length - 1) {
						rangeIndex++;
						formatRange = _g.textFormatRanges[rangeIndex];
						currentFormat.__merge(formatRange.format);
						openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
						ascent = currentFormat.size;
						descent = currentFormat.size * 0.185;
						leading = currentFormat.leading;
						heightValue = ascent + descent + leading;
						if(spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
					}
				}
				if(spaceIndex > breakIndex && breakIndex > -1 || textIndex > this.text.length || spaceIndex > formatRange.end || spaceIndex == -1 && breakIndex > -1) break;
			}
		} else {
			if(textIndex >= formatRange.end) break;
			layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,formatRange.end);
			var text2 = this.text;
			var advances4 = [];
			var _g6 = textIndex;
			while(_g6 < formatRange.end) {
				var i4 = _g6++;
				advances4.push(openfl__$internal_text_TextEngine.__context.measureText(text2.charAt(i4)).width);
			}
			layoutGroup.advances = advances4;
			layoutGroup.offsetX = offsetX;
			layoutGroup.ascent = ascent;
			layoutGroup.descent = descent;
			layoutGroup.leading = leading;
			layoutGroup.lineIndex = lineIndex;
			layoutGroup.offsetY = offsetY;
			var advances5 = layoutGroup.advances;
			var width2 = 0.0;
			var _g7 = 0;
			while(_g7 < advances5.length) {
				var advance2 = advances5[_g7];
				++_g7;
				width2 += advance2;
			}
			layoutGroup.width = width2;
			layoutGroup.height = heightValue;
			this.layoutGroups.push(layoutGroup);
			offsetX += layoutGroup.width;
			textIndex = formatRange.end;
			if(rangeIndex < _g.textFormatRanges.length - 1) {
				rangeIndex++;
				formatRange = _g.textFormatRanges[rangeIndex];
				currentFormat.__merge(formatRange.format);
				openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
				leading = currentFormat.leading;
				heightValue = ascent + descent + leading;
				if(spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
			}
		}
	}
	,setTextAlignment: function() {
		var lineIndex = -1;
		var offsetX = 0.0;
		var group;
		var lineLength;
		var _g1 = 0;
		var _g = this.layoutGroups.length;
		while(_g1 < _g) {
			var i = _g1++;
			group = this.layoutGroups[i];
			if(group.lineIndex != lineIndex) {
				lineIndex = group.lineIndex;
				var _g2 = group.format.align;
				switch(_g2[1]) {
				case 3:
					if(this.lineWidths[lineIndex] < this.width - 4) offsetX = Math.round((this.width - 4 - this.lineWidths[lineIndex]) / 2); else offsetX = 0;
					break;
				case 1:
					if(this.lineWidths[lineIndex] < this.width - 4) offsetX = Math.round(this.width - 4 - this.lineWidths[lineIndex]); else offsetX = 0;
					break;
				case 2:
					if(this.lineWidths[lineIndex] < this.width - 4) {
						lineLength = 1;
						var _g4 = i + 1;
						var _g3 = this.layoutGroups.length;
						while(_g4 < _g3) {
							var j = _g4++;
							if(this.layoutGroups[j].lineIndex == lineIndex) lineLength++; else break;
						}
						if(lineLength > 1) {
							group = this.layoutGroups[i + lineLength - 1];
							if(group.endIndex < this.text.length && this.text.charAt(group.endIndex) != "\n") {
								offsetX = (this.width - 4 - this.lineWidths[lineIndex]) / (lineLength - 1);
								var _g31 = 1;
								while(_g31 < lineLength) {
									var j1 = _g31++;
									this.layoutGroups[i + j1].offsetX += offsetX * j1;
								}
							}
						}
					}
					offsetX = 0;
					break;
				default:
					offsetX = 0;
				}
			}
			if(offsetX > 0) group.offsetX += offsetX;
		}
	}
	,update: function() {
		if(this.text == null || StringTools.trim(this.text) == "" || this.textFormatRanges.length == 0) {
			this.lineAscents.splice(0,this.lineAscents.length);
			this.lineBreaks.splice(0,this.lineBreaks.length);
			this.lineDescents.splice(0,this.lineDescents.length);
			this.lineLeadings.splice(0,this.lineLeadings.length);
			this.lineHeights.splice(0,this.lineHeights.length);
			this.lineWidths.splice(0,this.lineWidths.length);
			this.layoutGroups.splice(0,this.layoutGroups.length);
			this.textWidth = 0;
			this.textHeight = 0;
			this.numLines = 1;
			this.maxScrollH = 0;
			this.maxScrollV = 1;
			this.bottomScrollV = 1;
		} else {
			this.getLayoutGroups();
			this.getLineMeasurements();
			this.setTextAlignment();
		}
		this.getBounds();
	}
	,__class__: openfl__$internal_text_TextEngine
};
var openfl__$internal_text_TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl._internal.text.TextFormatRange"] = openfl__$internal_text_TextFormatRange;
openfl__$internal_text_TextFormatRange.__name__ = ["openfl","_internal","text","TextFormatRange"];
openfl__$internal_text_TextFormatRange.prototype = {
	end: null
	,format: null
	,start: null
	,__class__: openfl__$internal_text_TextFormatRange
};
var openfl__$internal_text_TextLayoutGroup = function(format,startIndex,endIndex) {
	this.format = format;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
};
$hxClasses["openfl._internal.text.TextLayoutGroup"] = openfl__$internal_text_TextLayoutGroup;
openfl__$internal_text_TextLayoutGroup.__name__ = ["openfl","_internal","text","TextLayoutGroup"];
openfl__$internal_text_TextLayoutGroup.prototype = {
	advances: null
	,ascent: null
	,descent: null
	,endIndex: null
	,format: null
	,height: null
	,leading: null
	,lineIndex: null
	,offsetX: null
	,offsetY: null
	,startIndex: null
	,width: null
	,__class__: openfl__$internal_text_TextLayoutGroup
};
var openfl_display_Application = function() {
	lime_app_Application.call(this);
	if(openfl_Lib.application == null) openfl_Lib.application = this;
};
$hxClasses["openfl.display.Application"] = openfl_display_Application;
openfl_display_Application.__name__ = ["openfl","display","Application"];
openfl_display_Application.__super__ = lime_app_Application;
openfl_display_Application.prototype = $extend(lime_app_Application.prototype,{
	create: function(config) {
		this.config = config;
		this.backend.create(config);
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) this.backend.setFrameRate(config.fps);
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g = 0;
				var _g1 = config.windows;
				while(_g < _g1.length) {
					var windowConfig = _g1[_g];
					++_g;
					var $window = new openfl_display_Window(windowConfig);
					this.createWindow($window);
					break;
				}
			}
			if(this.preloader == null || this.preloader.complete) this.onPreloadComplete();
		}
	}
	,__class__: openfl_display_Application
});
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) smoothing = false;
	openfl_display_DisplayObject.call(this);
	this.bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) this.pixelSnapping = openfl_display_PixelSnapping.AUTO;
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	bitmapData: null
	,pixelSnapping: null
	,smoothing: null
	,__image: null
	,__getBounds: function(rect,matrix) {
		if(this.bitmapData != null) {
			var bounds = openfl_geom_Rectangle.__temp;
			bounds.setTo(0,0,this.bitmapData.width,this.bitmapData.height);
			bounds.__transform(bounds,matrix);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || this.bitmapData == null) return false;
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
		this.__getWorldTransform();
		var px = this.__worldTransform.__transformInverseX(x,y);
		var py = this.__worldTransform.__transformInverseY(x,y);
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) {
			if(stack != null && !interactiveOnly) stack.push(hitObject);
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.bitmapData == null) return false;
		this.__getWorldTransform();
		var px = this.__worldTransform.__transformInverseX(x,y);
		var py = this.__worldTransform.__transformInverseY(x,y);
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) return true;
		return false;
	}
	,__renderCairo: function(renderSession) {
		openfl__$internal_renderer_cairo_CairoBitmap.render(this,renderSession);
	}
	,__renderCairoMask: function(renderSession) {
		renderSession.cairo.rectangle(0,0,this.get_width(),this.get_height());
	}
	,__renderCanvas: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasBitmap.render(this,renderSession);
	}
	,__renderCanvasMask: function(renderSession) {
		renderSession.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable && this.bitmapData != null && this.bitmapData.__isValid) {
			if(this.bitmapData.image.buffer.__srcImage != null) openfl__$internal_renderer_dom_DOMBitmap.renderImage(this,renderSession); else openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(this,renderSession);
		} else {
			if(this.__image != null) {
				renderSession.element.removeChild(this.__image);
				this.__image = null;
				this.__style = null;
			}
			if(this.__canvas != null) {
				renderSession.element.removeChild(this.__canvas);
				this.__canvas = null;
				this.__style = null;
			}
		}
	}
	,__renderGL: function(renderSession) {
		if(this.__cacheAsBitmap) {
			this.__cacheGL(renderSession);
			return;
		}
		if(this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
		if(!this.__renderable || this.__worldAlpha <= 0 || this.bitmapData == null || !this.bitmapData.__isValid) null; else renderSession.spriteBatch.renderBitmapData(this.bitmapData,this.smoothing,this.__renderTransform,this.__worldColorTransform,this.__worldAlpha,this.__blendMode,this.__shader,this.pixelSnapping);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
		if(this.__scrollRect != null) renderSession.maskManager.popRect();
	}
	,__updateMask: function(maskGraphics) {
		maskGraphics.__commands.overrideMatrix(this.__worldTransform);
		maskGraphics.beginFill(0);
		maskGraphics.drawRect(0,0,this.bitmapData.width,this.bitmapData.height);
		if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl_geom_Rectangle();
		this.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		openfl_display_DisplayObject.prototype.__updateMask.call(this,maskGraphics);
	}
	,get_height: function() {
		if(this.bitmapData != null) return this.bitmapData.height * this.get_scaleY();
		return 0;
	}
	,set_height: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.height) this.set_scaleY(value / this.bitmapData.height);
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.bitmapData != null) return this.bitmapData.width * this.get_scaleX();
		return 0;
	}
	,set_width: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.width) this.set_scaleX(value / this.bitmapData.width);
			return value;
		}
		return 0;
	}
	,__class__: openfl_display_Bitmap
});
var openfl_display_TextureUvs = function() {
	this.y3 = 0;
	this.y2 = 0;
	this.y1 = 0;
	this.y0 = 0;
	this.x3 = 0;
	this.x2 = 0;
	this.x1 = 0;
	this.x0 = 0;
};
$hxClasses["openfl.display.TextureUvs"] = openfl_display_TextureUvs;
openfl_display_TextureUvs.__name__ = ["openfl","display","TextureUvs"];
openfl_display_TextureUvs.prototype = {
	x0: null
	,x1: null
	,x2: null
	,x3: null
	,y0: null
	,y1: null
	,y2: null
	,y3: null
	,reset: function() {
		this.x0 = this.x1 = this.x2 = this.x3 = this.y0 = this.y1 = this.y2 = this.y3 = 0;
	}
	,__class__: openfl_display_TextureUvs
};
var openfl_display_BitmapDataChannel = function() { };
$hxClasses["openfl.display.BitmapDataChannel"] = openfl_display_BitmapDataChannel;
openfl_display_BitmapDataChannel.__name__ = ["openfl","display","BitmapDataChannel"];
var openfl_display_BlendMode = $hxClasses["openfl.display.BlendMode"] = { __ename__ : ["openfl","display","BlendMode"], __constructs__ : ["ADD","ALPHA","DARKEN","DIFFERENCE","ERASE","HARDLIGHT","INVERT","LAYER","LIGHTEN","MULTIPLY","NORMAL","OVERLAY","SCREEN","SHADER","SUBTRACT"] };
openfl_display_BlendMode.ADD = ["ADD",0];
openfl_display_BlendMode.ADD.toString = $estr;
openfl_display_BlendMode.ADD.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.ALPHA = ["ALPHA",1];
openfl_display_BlendMode.ALPHA.toString = $estr;
openfl_display_BlendMode.ALPHA.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.DARKEN = ["DARKEN",2];
openfl_display_BlendMode.DARKEN.toString = $estr;
openfl_display_BlendMode.DARKEN.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.DIFFERENCE = ["DIFFERENCE",3];
openfl_display_BlendMode.DIFFERENCE.toString = $estr;
openfl_display_BlendMode.DIFFERENCE.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.ERASE = ["ERASE",4];
openfl_display_BlendMode.ERASE.toString = $estr;
openfl_display_BlendMode.ERASE.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.HARDLIGHT = ["HARDLIGHT",5];
openfl_display_BlendMode.HARDLIGHT.toString = $estr;
openfl_display_BlendMode.HARDLIGHT.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.INVERT = ["INVERT",6];
openfl_display_BlendMode.INVERT.toString = $estr;
openfl_display_BlendMode.INVERT.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.LAYER = ["LAYER",7];
openfl_display_BlendMode.LAYER.toString = $estr;
openfl_display_BlendMode.LAYER.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.LIGHTEN = ["LIGHTEN",8];
openfl_display_BlendMode.LIGHTEN.toString = $estr;
openfl_display_BlendMode.LIGHTEN.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.MULTIPLY = ["MULTIPLY",9];
openfl_display_BlendMode.MULTIPLY.toString = $estr;
openfl_display_BlendMode.MULTIPLY.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.NORMAL = ["NORMAL",10];
openfl_display_BlendMode.NORMAL.toString = $estr;
openfl_display_BlendMode.NORMAL.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.OVERLAY = ["OVERLAY",11];
openfl_display_BlendMode.OVERLAY.toString = $estr;
openfl_display_BlendMode.OVERLAY.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.SCREEN = ["SCREEN",12];
openfl_display_BlendMode.SCREEN.toString = $estr;
openfl_display_BlendMode.SCREEN.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.SHADER = ["SHADER",13];
openfl_display_BlendMode.SHADER.toString = $estr;
openfl_display_BlendMode.SHADER.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.SUBTRACT = ["SUBTRACT",14];
openfl_display_BlendMode.SUBTRACT.toString = $estr;
openfl_display_BlendMode.SUBTRACT.__enum__ = openfl_display_BlendMode;
var openfl_display_CapsStyle = $hxClasses["openfl.display.CapsStyle"] = { __ename__ : ["openfl","display","CapsStyle"], __constructs__ : ["NONE","ROUND","SQUARE"] };
openfl_display_CapsStyle.NONE = ["NONE",0];
openfl_display_CapsStyle.NONE.toString = $estr;
openfl_display_CapsStyle.NONE.__enum__ = openfl_display_CapsStyle;
openfl_display_CapsStyle.ROUND = ["ROUND",1];
openfl_display_CapsStyle.ROUND.toString = $estr;
openfl_display_CapsStyle.ROUND.__enum__ = openfl_display_CapsStyle;
openfl_display_CapsStyle.SQUARE = ["SQUARE",2];
openfl_display_CapsStyle.SQUARE.toString = $estr;
openfl_display_CapsStyle.SQUARE.__enum__ = openfl_display_CapsStyle;
var openfl_display_DirectRenderer = function(type) {
	if(type == null) type = "DirectRenderer";
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.DirectRenderer"] = openfl_display_DirectRenderer;
openfl_display_DirectRenderer.__name__ = ["openfl","display","DirectRenderer"];
openfl_display_DirectRenderer.__super__ = openfl_display_DisplayObject;
openfl_display_DirectRenderer.prototype = $extend(openfl_display_DisplayObject.prototype,{
	__render: null
	,get_render: function() {
		return this.__render;
	}
	,set_render: function(value) {
		return this.__render = value;
	}
	,__class__: openfl_display_DirectRenderer
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_render:"set_render",get_render:"get_render"})
});
var openfl_text_TextField = function() {
	openfl_display_InteractiveObject.call(this);
	this.__caretIndex = -1;
	this.__graphics = new openfl_display_Graphics();
	this.__textEngine = new openfl__$internal_text_TextEngine(this);
	this.__layoutDirty = true;
	this.__tabEnabled = true;
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",openfl_text_TextFormatAlign.LEFT,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
	this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,0,0));
	this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.this_onMouseDown));
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = ["openfl","text","TextField"];
openfl_text_TextField.__defaultTextFormat = null;
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	bottomScrollV: null
	,caretIndex: null
	,length: null
	,maxScrollH: null
	,maxScrollV: null
	,numLines: null
	,selectionBeginIndex: null
	,selectionEndIndex: null
	,textHeight: null
	,textWidth: null
	,__bounds: null
	,__caretIndex: null
	,__cursorTimer: null
	,__dirty: null
	,__inputEnabled: null
	,__isHTML: null
	,__layoutDirty: null
	,__selectionIndex: null
	,__showCursor: null
	,__textEngine: null
	,__textFormat: null
	,__div: null
	,appendText: function(text) {
		this.__textEngine.text += text;
		this.__textEngine.textFormatRanges[this.__textEngine.textFormatRanges.length - 1].end = this.__textEngine.text.length;
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,getCharBoundaries: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__textEngine.text.length - 1) return null;
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(charIndex >= group.startIndex && charIndex <= group.endIndex) {
				var x = group.offsetX;
				var _g3 = 0;
				var _g2 = charIndex - group.startIndex;
				while(_g3 < _g2) {
					var i = _g3++;
					x += group.advances[i];
				}
				return new openfl_geom_Rectangle(x,group.offsetY,group.advances[charIndex - group.startIndex],group.ascent + group.descent);
			}
		}
		return null;
	}
	,getCharIndexAtPoint: function(x,y) {
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) return -1;
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights[i];
		}
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.length) {
			var group = _g11[_g2];
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) {
				if(x >= group.offsetX && x <= group.offsetX + group.width) {
					var advance = 0.0;
					var _g3 = 0;
					var _g21 = group.advances.length;
					while(_g3 < _g21) {
						var i1 = _g3++;
						advance += group.advances[i1];
						if(x <= group.offsetX + advance) return group.startIndex + i1;
					}
					return group.endIndex;
				}
			}
		}
		return -1;
	}
	,getFirstCharInParagraph: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__textEngine.text.length - 1) return 0;
		var index = this.__textEngine.text.indexOf("\n");
		var startIndex = 0;
		while(index > -1) {
			if(index <= charIndex) startIndex = index + 1; else if(index > charIndex) break;
			index = this.__textEngine.text.indexOf("\n",index + 1);
		}
		return startIndex;
	}
	,getLineIndexAtPoint: function(x,y) {
		this.__updateLayout();
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) return -1;
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights[i];
		}
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.length) {
			var group = _g11[_g2];
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) return group.lineIndex;
		}
		return -1;
	}
	,getLineIndexOfChar: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__textEngine.text.length - 1) return -1;
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.startIndex <= charIndex && group.endIndex >= charIndex) return group.lineIndex;
		}
		return -1;
	}
	,getLineLength: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) return 0;
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) startIndex = group.startIndex;
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) endIndex = this.__textEngine.text.length;
		return endIndex - startIndex;
	}
	,getLineMetrics: function(lineIndex) {
		this.__updateLayout();
		var ascender = this.__textEngine.lineAscents[lineIndex];
		var descender = this.__textEngine.lineDescents[lineIndex];
		var leading = this.__textEngine.lineLeadings[lineIndex];
		var lineHeight = this.__textEngine.lineHeights[lineIndex];
		var lineWidth = this.__textEngine.lineWidths[lineIndex];
		var margin;
		var _g = this.__textFormat.align;
		switch(_g[1]) {
		case 0:case 2:
			margin = 2;
			break;
		case 1:
			margin = this.__textEngine.width - lineWidth - 2;
			break;
		case 3:
			margin = (this.__textEngine.width - lineWidth) / 2;
			break;
		}
		return new openfl_text_TextLineMetrics(margin,lineWidth,lineHeight,ascender,descender,leading);
	}
	,getLineOffset: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) return -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.lineIndex == lineIndex) return group.startIndex;
		}
		return 0;
	}
	,getLineText: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) return null;
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) startIndex = group.startIndex;
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) endIndex = this.__textEngine.text.length;
		return this.__textEngine.text.substring(startIndex,endIndex);
	}
	,getParagraphLength: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__textEngine.text.length - 1) return 0;
		var startIndex = this.getFirstCharInParagraph(charIndex);
		var endIndex = this.__textEngine.text.indexOf("\n",charIndex) + 1;
		if(endIndex == 0) endIndex = this.__textEngine.text.length;
		return endIndex - startIndex;
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		var format = null;
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.start <= beginIndex && group.end >= beginIndex || group.start <= endIndex && group.end >= endIndex) {
				if(format == null) format = group.format.clone(); else {
					if(group.format.font != format.font) format.font = null;
					if(group.format.size != format.size) format.size = null;
					if(group.format.color != format.color) format.color = null;
					if(group.format.bold != format.bold) format.bold = null;
					if(group.format.italic != format.italic) format.italic = null;
					if(group.format.underline != format.underline) format.underline = null;
					if(group.format.url != format.url) format.url = null;
					if(group.format.target != format.target) format.target = null;
					if(group.format.align != format.align) format.align = null;
					if(group.format.leftMargin != format.leftMargin) format.leftMargin = null;
					if(group.format.rightMargin != format.rightMargin) format.rightMargin = null;
					if(group.format.indent != format.indent) format.indent = null;
					if(group.format.leading != format.leading) format.leading = null;
					if(group.format.blockIndent != format.blockIndent) format.blockIndent = null;
					if(group.format.bullet != format.bullet) format.bullet = null;
					if(group.format.kerning != format.kerning) format.kerning = null;
					if(group.format.letterSpacing != format.letterSpacing) format.letterSpacing = null;
					if(group.format.tabStops != format.tabStops) format.tabStops = null;
				}
			}
		}
		return format;
	}
	,replaceSelectedText: function(value) {
		if(value == "" && this.__selectionIndex == this.__caretIndex) return;
		var startIndex;
		if(this.__caretIndex < this.__selectionIndex) startIndex = this.__caretIndex; else startIndex = this.__selectionIndex;
		var endIndex;
		if(this.__caretIndex > this.__selectionIndex) endIndex = this.__caretIndex; else endIndex = this.__selectionIndex;
		this.replaceText(startIndex,endIndex,value);
		this.__caretIndex = startIndex + value.length;
		this.__selectionIndex = this.__caretIndex;
	}
	,replaceText: function(beginIndex,endIndex,newText) {
		if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__textEngine.text.length || newText == null) return;
		this.__textEngine.text = this.__textEngine.text.substring(0,beginIndex) + newText + this.__textEngine.text.substring(endIndex);
		var offset = newText.length - (endIndex - beginIndex);
		var i = 0;
		var range;
		while(i < this.__textEngine.textFormatRanges.length) {
			range = this.__textEngine.textFormatRanges[i];
			if(range.start <= beginIndex && range.end >= endIndex) {
				range.end += offset;
				i++;
			} else if(range.start >= beginIndex && range.end <= endIndex) {
				this.__textEngine.textFormatRanges.splice(i,1);
				offset -= range.end - range.start;
			} else if(range.start > beginIndex && range.start <= endIndex) {
				range.start += offset;
				i++;
			} else i++;
		}
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,setSelection: function(beginIndex,endIndex) {
		this.__selectionIndex = beginIndex;
		this.__caretIndex = endIndex;
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		if(format.font != null) this.__textFormat.font = format.font;
		if(format.size != null) this.__textFormat.size = format.size;
		if(format.color != null) this.__textFormat.color = format.color;
		if(format.bold != null) this.__textFormat.bold = format.bold;
		if(format.italic != null) this.__textFormat.italic = format.italic;
		if(format.underline != null) this.__textFormat.underline = format.underline;
		if(format.url != null) this.__textFormat.url = format.url;
		if(format.target != null) this.__textFormat.target = format.target;
		if(format.align != null) this.__textFormat.align = format.align;
		if(format.leftMargin != null) this.__textFormat.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.__textFormat.rightMargin = format.rightMargin;
		if(format.indent != null) this.__textFormat.indent = format.indent;
		if(format.leading != null) this.__textFormat.leading = format.leading;
		if(format.blockIndent != null) this.__textFormat.blockIndent = format.blockIndent;
		if(format.bullet != null) this.__textFormat.bullet = format.bullet;
		if(format.kerning != null) this.__textFormat.kerning = format.kerning;
		if(format.letterSpacing != null) this.__textFormat.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.__textFormat.tabStops = format.tabStops;
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,__getBounds: function(rect,matrix) {
		this.__updateLayout();
		var bounds = openfl_geom_Rectangle.__temp;
		this.__textEngine.bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__getCursor: function() {
		if(this.__textEngine.selectable) return lime_ui_MouseCursor.TEXT; else return null;
	}
	,__getPosition: function(x,y) {
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights[i];
		}
		if(y > this.__textEngine.textHeight) y = this.__textEngine.textHeight;
		var firstGroup = true;
		var group;
		var nextGroup;
		var _g11 = 0;
		var _g2 = this.__textEngine.layoutGroups.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			group = this.__textEngine.layoutGroups[i1];
			if(i1 < this.__textEngine.layoutGroups.length - 1) nextGroup = this.__textEngine.layoutGroups[i1 + 1]; else nextGroup = null;
			if(firstGroup) {
				if(y < group.offsetY) y = group.offsetY;
				if(x < group.offsetX) x = group.offsetX;
				firstGroup = false;
			}
			if(y >= group.offsetY && y <= group.offsetY + group.height || nextGroup == null) {
				if(x >= group.offsetX && x <= group.offsetX + group.width || (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) {
					var advance = 0.0;
					var _g3 = 0;
					var _g21 = group.advances.length;
					while(_g3 < _g21) {
						var i2 = _g3++;
						advance += group.advances[i2];
						if(x <= group.offsetX + advance) {
							if(x <= group.offsetX + (advance - group.advances[i2]) + group.advances[i2] / 2) return group.startIndex + i2; else if(group.startIndex + i2 < group.endIndex) return group.startIndex + i2 + 1; else return group.endIndex;
						}
					}
					return group.endIndex;
				}
			}
		}
		return this.__textEngine.text.length;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) return false;
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
		this.__getWorldTransform();
		this.__updateLayout();
		var px = this.__worldTransform.__transformInverseX(x,y);
		var py = this.__worldTransform.__transformInverseY(x,y);
		if(this.__textEngine.bounds.contains(px,py)) {
			if(stack != null) stack.push(hitObject);
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		this.__getWorldTransform();
		this.__updateLayout();
		var px = this.__worldTransform.__transformInverseX(x,y);
		var py = this.__worldTransform.__transformInverseY(x,y);
		if(this.__textEngine.bounds.contains(px,py)) return true;
		return false;
	}
	,__renderCairo: function(renderSession) {
		openfl__$internal_renderer_cairo_CairoTextField.render(this,renderSession);
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
	}
	,__renderCanvas: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderSession);
		if(this.__textEngine.antiAliasType == openfl_text_AntiAliasType.ADVANCED && this.__textEngine.gridFitType == openfl_text_GridFitType.PIXEL) {
			var smoothingEnabled = renderSession.context.imageSmoothingEnabled;
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = false;
				renderSession.context.msImageSmoothingEnabled = false;
				renderSession.context.imageSmoothingEnabled = false;
			}
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = true;
				renderSession.context.msImageSmoothingEnabled = true;
				renderSession.context.imageSmoothingEnabled = true;
			}
		} else openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		openfl__$internal_renderer_dom_DOMTextField.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		if(this.__cacheAsBitmap) {
			this.__cacheGL(renderSession);
			return;
		}
		if(this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderSession);
		openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession,this.__textEngine.antiAliasType != openfl_text_AntiAliasType.ADVANCED || this.__textEngine.gridFitType != openfl_text_GridFitType.PIXEL);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
		if(this.__scrollRect != null) renderSession.maskManager.popRect();
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe_Timer.delay($bind(this,this.__startCursorTimer),600);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
	}
	,__startTextInput: function() {
		if(this.__caretIndex < 0) {
			this.__caretIndex = this.__textEngine.text.length;
			this.__selectionIndex = this.__caretIndex;
		}
		if(this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(true);
			if(!this.__inputEnabled) {
				this.stage.window.backend.setEnableTextEvents(true);
				if(!this.stage.window.onTextInput.has($bind(this,this.window_onTextInput))) {
					this.stage.window.onTextInput.add($bind(this,this.window_onTextInput));
					this.stage.window.onKeyDown.add($bind(this,this.window_onKeyDown));
				}
				this.__inputEnabled = true;
				this.__startCursorTimer();
			}
		}
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) {
			this.__cursorTimer.stop();
			this.__cursorTimer = null;
		}
		if(this.__showCursor) {
			this.__showCursor = false;
			this.__dirty = true;
		}
	}
	,__stopTextInput: function() {
		if(this.__inputEnabled && this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(false);
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
			this.__stopCursorTimer();
		}
	}
	,__updateLayout: function() {
		if(this.__layoutDirty) {
			this.__textEngine.update();
			if(this.__textEngine.autoSize != openfl_text_TextFieldAutoSize.NONE) {
				var cacheWidth = this.__textEngine.width;
				var cacheHeight = this.__textEngine.height;
				var _g = this.__textEngine.autoSize;
				switch(_g[1]) {
				case 1:case 3:case 0:
					if(!this.__textEngine.wordWrap) this.__textEngine.width = this.__textEngine.textWidth + 4;
					this.__textEngine.height = this.__textEngine.textHeight + 4;
					break;
				default:
				}
				if(this.__textEngine.width != cacheWidth) {
					var _g1 = this.__textEngine.autoSize;
					switch(_g1[1]) {
					case 3:
						var _g11 = this;
						_g11.set_x(_g11.get_x() + (cacheWidth - this.__textEngine.width));
						break;
					case 0:
						var _g12 = this;
						_g12.set_x(_g12.get_x() + (cacheWidth - this.__textEngine.width) / 2);
						break;
					default:
					}
				}
				this.__textEngine.getBounds();
			}
			this.__layoutDirty = false;
		}
	}
	,get_antiAliasType: function() {
		return this.__textEngine.antiAliasType;
	}
	,set_antiAliasType: function(value) {
		if(value != this.__textEngine.antiAliasType) {
		}
		return this.__textEngine.antiAliasType = value;
	}
	,get_autoSize: function() {
		return this.__textEngine.autoSize;
	}
	,set_autoSize: function(value) {
		if(value != this.__textEngine.autoSize) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.autoSize = value;
	}
	,get_background: function() {
		return this.__textEngine.background;
	}
	,set_background: function(value) {
		if(value != this.__textEngine.background) this.__dirty = true;
		return this.__textEngine.background = value;
	}
	,get_backgroundColor: function() {
		return this.__textEngine.backgroundColor;
	}
	,set_backgroundColor: function(value) {
		if(value != this.__textEngine.backgroundColor) this.__dirty = true;
		return this.__textEngine.backgroundColor = value;
	}
	,get_border: function() {
		return this.__textEngine.border;
	}
	,set_border: function(value) {
		if(value != this.__textEngine.border) this.__dirty = true;
		return this.__textEngine.border = value;
	}
	,get_borderColor: function() {
		return this.__textEngine.borderColor;
	}
	,set_borderColor: function(value) {
		if(value != this.__textEngine.borderColor) this.__dirty = true;
		return this.__textEngine.borderColor = value;
	}
	,get_bottomScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.bottomScrollV;
	}
	,get_caretIndex: function() {
		return this.__caretIndex;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		this.__layoutDirty = true;
		this.__dirty = true;
		return value;
	}
	,get_displayAsPassword: function() {
		return this.__textEngine.displayAsPassword;
	}
	,set_displayAsPassword: function(value) {
		if(value != this.__textEngine.displayAsPassword) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.displayAsPassword = value;
	}
	,get_embedFonts: function() {
		return this.__textEngine.embedFonts;
	}
	,set_embedFonts: function(value) {
		return this.__textEngine.embedFonts = value;
	}
	,get_gridFitType: function() {
		return this.__textEngine.gridFitType;
	}
	,set_gridFitType: function(value) {
		return this.__textEngine.gridFitType = value;
	}
	,get_height: function() {
		this.__updateLayout();
		return this.__textEngine.height;
	}
	,set_height: function(value) {
		if(this.get_scaleY() != 1 || value != this.__textEngine.height) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.set_scaleY(1);
		return this.__textEngine.height = value;
	}
	,get_htmlText: function() {
		return this.__textEngine.text;
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__textEngine.text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.__isHTML = true;
		if(this.__div == null) {
			value = new EReg("<br>","g").replace(value,"\n");
			value = new EReg("<br/>","g").replace(value,"\n");
			var segments = value.split("<font");
			if(segments.length == 1) {
				value = new EReg("<.*?>","g").replace(value,"");
				if(this.__textEngine.textFormatRanges.length > 1) this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.length - 1);
				var range = this.__textEngine.textFormatRanges[0];
				range.format = this.__textFormat;
				range.start = 0;
				range.end = value.length;
				return this.__textEngine.text = value;
			} else {
				this.__textEngine.textFormatRanges.splice(0,this.__textEngine.textFormatRanges.length);
				value = "";
				var _g = 0;
				while(_g < segments.length) {
					var segment = segments[_g];
					++_g;
					if(segment == "") continue;
					var closeFontIndex = segment.indexOf("</font>");
					if(closeFontIndex > -1) {
						var start = segment.indexOf(">") + 1;
						var end = closeFontIndex;
						var format = this.__textFormat.clone();
						var faceIndex = segment.indexOf("face=");
						var colorIndex = segment.indexOf("color=");
						var sizeIndex = segment.indexOf("size=");
						if(faceIndex > -1 && faceIndex < start) {
							var len = segment.indexOf("\"",faceIndex);
							format.font = HxOverrides.substr(segment,faceIndex + 6,len);
						}
						if(colorIndex > -1 && colorIndex < start) format.color = Std.parseInt("0x" + HxOverrides.substr(segment,colorIndex + 8,6));
						if(sizeIndex > -1 && sizeIndex < start) format.size = Std.parseInt((function($this) {
							var $r;
							var len1 = segment.indexOf("\"",sizeIndex);
							$r = HxOverrides.substr(segment,sizeIndex + 6,len1);
							return $r;
						}(this)));
						var sub = segment.substring(start,end);
						sub = new EReg("<.*?>","g").replace(sub,"");
						this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length));
						value += sub;
						if(closeFontIndex + 7 < segment.length) {
							sub = HxOverrides.substr(segment,closeFontIndex + 7,null);
							this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,value.length,value.length + sub.length));
							value += sub;
						}
					} else {
						this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,value.length,value.length + segment.length));
						value += segment;
					}
				}
			}
		}
		return this.__textEngine.text = value;
	}
	,get_length: function() {
		if(this.__textEngine.text != null) return this.__textEngine.text.length;
		return 0;
	}
	,get_maxChars: function() {
		return this.__textEngine.maxChars;
	}
	,set_maxChars: function(value) {
		if(value != this.__textEngine.maxChars) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.maxChars = value;
	}
	,get_maxScrollH: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollH;
	}
	,get_maxScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollV;
	}
	,get_multiline: function() {
		return this.__textEngine.multiline;
	}
	,set_multiline: function(value) {
		if(value != this.__textEngine.multiline) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.multiline = value;
	}
	,get_numLines: function() {
		this.__updateLayout();
		return this.__textEngine.numLines;
	}
	,get_restrict: function() {
		return this.__textEngine.restrict;
	}
	,set_restrict: function(value) {
		return this.__textEngine.restrict = value;
	}
	,get_scrollH: function() {
		return this.__textEngine.scrollH;
	}
	,set_scrollH: function(value) {
		if(value > this.__textEngine.maxScrollH) value = this.__textEngine.maxScrollH;
		if(value < 0) value = 0;
		if(value != this.__textEngine.scrollH) this.__dirty = true;
		return this.__textEngine.scrollH = value;
	}
	,get_scrollV: function() {
		return this.__textEngine.scrollV;
	}
	,set_scrollV: function(value) {
		if(value > this.__textEngine.maxScrollV) value = this.__textEngine.maxScrollV;
		if(value < 1) value = 1;
		if(value != this.__textEngine.scrollV) this.__dirty = true;
		return this.__textEngine.scrollV = value;
	}
	,get_selectable: function() {
		return this.__textEngine.selectable;
	}
	,set_selectable: function(value) {
		if(value != this.__textEngine.selectable && this.get_type() == openfl_text_TextFieldType.INPUT) {
			if(this.stage != null && this.stage.get_focus() == this) this.__startTextInput(); else if(!value) this.__stopTextInput();
		}
		return this.__textEngine.selectable = value;
	}
	,get_selectionBeginIndex: function() {
		return Std["int"](Math.min(this.__caretIndex,this.__selectionIndex));
	}
	,get_selectionEndIndex: function() {
		return Std["int"](Math.max(this.__caretIndex,this.__selectionIndex));
	}
	,get_sharpness: function() {
		return this.__textEngine.sharpness;
	}
	,set_sharpness: function(value) {
		if(value != this.__textEngine.sharpness) this.__dirty = true;
		return this.__textEngine.sharpness = value;
	}
	,get_text: function() {
		return this.__textEngine.text;
	}
	,set_text: function(value) {
		if(this.__isHTML || this.__textEngine.text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
		} else return value;
		if(this.__textEngine.textFormatRanges.length > 1) this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.length - 1);
		var range = this.__textEngine.textFormatRanges[0];
		range.format = this.__textFormat;
		range.start = 0;
		range.end = value.length;
		this.__isHTML = false;
		return this.__textEngine.text = value;
	}
	,get_textColor: function() {
		return this.__textFormat.color;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) this.__dirty = true;
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.length) {
			var range = _g1[_g];
			++_g;
			range.format.color = value;
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		this.__updateLayout();
		return this.__textEngine.textWidth;
	}
	,get_textHeight: function() {
		this.__updateLayout();
		return this.__textEngine.textHeight;
	}
	,get_type: function() {
		return this.__textEngine.type;
	}
	,set_type: function(value) {
		if(value != this.__textEngine.type) {
			if(value == openfl_text_TextFieldType.INPUT) {
				this.addEventListener(openfl_events_FocusEvent.FOCUS_IN,$bind(this,this.this_onFocusIn));
				this.addEventListener(openfl_events_FocusEvent.FOCUS_OUT,$bind(this,this.this_onFocusOut));
				this.addEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.this_onAddedToStage));
				this.this_onFocusIn(null);
			} else {
				this.removeEventListener(openfl_events_FocusEvent.FOCUS_IN,$bind(this,this.this_onFocusIn));
				this.removeEventListener(openfl_events_FocusEvent.FOCUS_OUT,$bind(this,this.this_onFocusOut));
				this.removeEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.this_onAddedToStage));
				this.__stopTextInput();
			}
			this.__dirty = true;
		}
		return this.__textEngine.type = value;
	}
	,get_width: function() {
		this.__updateLayout();
		return this.__textEngine.width;
	}
	,set_width: function(value) {
		if(this.get_scaleX() != 1 || this.__textEngine.width != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.set_scaleX(1);
		return this.__textEngine.width = value;
	}
	,get_wordWrap: function() {
		return this.__textEngine.wordWrap;
	}
	,set_wordWrap: function(value) {
		if(value != this.__textEngine.wordWrap) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.wordWrap = value;
	}
	,stage_onMouseMove: function(event) {
		if(this.stage == null) return;
		if(this.__textEngine.selectable && this.__selectionIndex >= 0) {
			this.__updateLayout();
			var position = this.__getPosition(this.get_mouseX(),this.get_mouseY());
			if(position != this.__caretIndex) {
				this.__caretIndex = position;
				this.__dirty = true;
			}
		}
	}
	,stage_onMouseUp: function(event) {
		if(this.stage == null) return;
		this.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			this.__getWorldTransform();
			this.__updateLayout();
			var px = this.__worldTransform.__transformInverseX(this.get_x(),this.get_y());
			var py = this.__worldTransform.__transformInverseY(this.get_x(),this.get_y());
			var upPos = this.__getPosition(this.get_mouseX(),this.get_mouseY());
			var leftPos;
			var rightPos;
			leftPos = Std["int"](Math.min(this.__selectionIndex,upPos));
			rightPos = Std["int"](Math.max(this.__selectionIndex,upPos));
			this.__selectionIndex = leftPos;
			this.__caretIndex = rightPos;
			if(this.__inputEnabled) {
				this.this_onFocusIn(null);
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
		}
	}
	,this_onAddedToStage: function(event) {
		this.this_onFocusIn(null);
	}
	,this_onFocusIn: function(event) {
		if(this.get_selectable() && this.get_type() == openfl_text_TextFieldType.INPUT && this.stage != null && this.stage.get_focus() == this) this.__startTextInput();
	}
	,this_onFocusOut: function(event) {
		this.__stopTextInput();
	}
	,this_onMouseDown: function(event) {
		if(!this.get_selectable()) return;
		this.__updateLayout();
		this.__caretIndex = this.__getPosition(this.get_mouseX(),this.get_mouseY());
		this.__selectionIndex = this.__caretIndex;
		this.__dirty = true;
		this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
	}
	,window_onKeyDown: function(key,modifier) {
		switch(key) {
		case 8:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) this.__selectionIndex = this.__caretIndex - 1;
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE,true));
			}
			break;
		case 127:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex < this.__textEngine.text.length) this.__selectionIndex = this.__caretIndex + 1;
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE,true));
			}
			break;
		case 1073741904:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				if(this.__caretIndex > 0) this.__caretIndex--;
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					if(this.__caretIndex > 0) this.__caretIndex--;
				} else this.__caretIndex = Std["int"](Math.min(this.__caretIndex,this.__selectionIndex));
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741903:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				if(this.__caretIndex < this.__textEngine.text.length) this.__caretIndex++;
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					if(this.__caretIndex < this.__textEngine.text.length) this.__caretIndex++;
				} else this.__caretIndex = Std["int"](Math.max(this.__caretIndex,this.__selectionIndex));
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 99:
			if(modifier == 64 || modifier == 128) lime_system_Clipboard.set_text(this.__textEngine.text.substring(this.__caretIndex,this.__selectionIndex));
			break;
		case 120:
			if(modifier == 64 || modifier == 128) {
				lime_system_Clipboard.set_text(this.__textEngine.text.substring(this.__caretIndex,this.__selectionIndex));
				if(this.__caretIndex != this.__selectionIndex) {
					this.replaceSelectedText("");
					this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE,true));
				}
			}
			break;
		case 118:
			if(modifier == 64 || modifier == 128) {
				var text = lime_system_Clipboard.get_text();
				if(text != null) this.replaceSelectedText(text); else this.replaceSelectedText("");
				this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE,true));
			}
			break;
		default:
		}
	}
	,window_onTextInput: function(value) {
		this.replaceSelectedText(value);
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE,true));
	}
	,__class__: openfl_text_TextField
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_type:"get_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_textColor:"set_textColor",get_textColor:"get_textColor",set_text:"set_text",get_text:"get_text",set_sharpness:"set_sharpness",get_sharpness:"get_sharpness",get_selectionEndIndex:"get_selectionEndIndex",get_selectionBeginIndex:"get_selectionBeginIndex",set_selectable:"set_selectable",get_selectable:"get_selectable",set_scrollV:"set_scrollV",get_scrollV:"get_scrollV",set_scrollH:"set_scrollH",get_scrollH:"get_scrollH",set_restrict:"set_restrict",get_restrict:"get_restrict",get_numLines:"get_numLines",set_multiline:"set_multiline",get_multiline:"get_multiline",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",get_length:"get_length",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_gridFitType:"set_gridFitType",get_gridFitType:"get_gridFitType",set_embedFonts:"set_embedFonts",get_embedFonts:"get_embedFonts",set_displayAsPassword:"set_displayAsPassword",get_displayAsPassword:"get_displayAsPassword",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretIndex:"get_caretIndex",get_bottomScrollV:"get_bottomScrollV",set_borderColor:"set_borderColor",get_borderColor:"get_borderColor",set_border:"set_border",get_border:"get_border",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_background:"set_background",get_background:"get_background",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_antiAliasType:"set_antiAliasType",get_antiAliasType:"get_antiAliasType"})
});
var openfl_display_FPS = function(x,y,color) {
	if(color == null) color = 0;
	if(y == null) y = 10;
	if(x == null) x = 10;
	openfl_text_TextField.call(this);
	this.set_x(x);
	this.set_y(y);
	this.currentFPS = 0;
	this.set_selectable(false);
	this.mouseEnabled = false;
	this.set_defaultTextFormat(new openfl_text_TextFormat("_sans",12,color));
	this.set_text("FPS: ");
	this.cacheCount = 0;
	this.times = [];
	this.addEventListener(openfl_events_Event.ENTER_FRAME,$bind(this,this.this_onEnterFrame));
};
$hxClasses["openfl.display.FPS"] = openfl_display_FPS;
openfl_display_FPS.__name__ = ["openfl","display","FPS"];
openfl_display_FPS.__super__ = openfl_text_TextField;
openfl_display_FPS.prototype = $extend(openfl_text_TextField.prototype,{
	currentFPS: null
	,cacheCount: null
	,times: null
	,this_onEnterFrame: function(event) {
		var currentTime = haxe_Timer.stamp();
		this.times.push(currentTime);
		while(this.times[0] < currentTime - 1) this.times.shift();
		var currentCount = this.times.length;
		this.currentFPS = Math.round((currentCount + this.cacheCount) / 2);
		if(currentCount != this.cacheCount) this.set_text("FPS: " + this.currentFPS);
		this.cacheCount = currentCount;
	}
	,__class__: openfl_display_FPS
});
var openfl_display_FrameLabel = function(name,frame) {
	openfl_events_EventDispatcher.call(this);
	this.__name = name;
	this.__frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
openfl_display_FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	frame: null
	,name: null
	,__frame: null
	,__name: null
	,get_frame: function() {
		return this.__frame;
	}
	,get_name: function() {
		return this.__name;
	}
	,__class__: openfl_display_FrameLabel
	,__properties__: {get_name:"get_name",get_frame:"get_frame"}
});
var openfl_display_GradientType = $hxClasses["openfl.display.GradientType"] = { __ename__ : ["openfl","display","GradientType"], __constructs__ : ["RADIAL","LINEAR"] };
openfl_display_GradientType.RADIAL = ["RADIAL",0];
openfl_display_GradientType.RADIAL.toString = $estr;
openfl_display_GradientType.RADIAL.__enum__ = openfl_display_GradientType;
openfl_display_GradientType.LINEAR = ["LINEAR",1];
openfl_display_GradientType.LINEAR.toString = $estr;
openfl_display_GradientType.LINEAR.__enum__ = openfl_display_GradientType;
var openfl_display_Graphics = function() {
	this.__glStack = [];
	this.__dirty = true;
	this.__commands = new openfl__$internal_renderer_DrawCommandBuffer();
	this.__strokePadding = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__hardware = true;
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = ["openfl","display","Graphics"];
openfl_display_Graphics.prototype = {
	__hardware: null
	,__bounds: null
	,__commands: null
	,__dirty: null
	,__glStack: null
	,__drawPaths: null
	,__image: null
	,__positionX: null
	,__positionY: null
	,__strokePadding: null
	,__transformDirty: null
	,__visible: null
	,__cachedTexture: null
	,__owner: null
	,__canvas: null
	,__context: null
	,__bitmap: null
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		this.__commands.beginBitmapFill(bitmap,matrix != null?new openfl_geom_Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty):null,repeat,smooth);
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) alpha = 1;
		if(color == null) color = 0;
		this.__commands.beginFill(color & 16777215,alpha);
		if(alpha > 0) this.__visible = true;
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.__commands.beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
		this.__hardware = false;
		var _g = 0;
		while(_g < alphas.length) {
			var alpha = alphas[_g];
			++_g;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,clear: function() {
		this.__commands.clear();
		this.__strokePadding = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.__hardware = true;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		this.__bounds = sourceGraphics.__bounds.clone();
		this.__commands = sourceGraphics.__commands.copy();
		this.set___dirty(true);
		this.__strokePadding = sourceGraphics.__strokePadding;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix1;
		var iy1;
		var ix2;
		var iy2;
		ix1 = anchorX;
		ix2 = anchorX;
		if(!((controlX1 < anchorX && controlX1 > this.__positionX || controlX1 > anchorX && controlX1 < this.__positionX) && (controlX2 < anchorX && controlX2 > this.__positionX || controlX2 > anchorX && controlX2 < this.__positionX))) {
			var u = 2 * this.__positionX - 4 * controlX1 + 2 * controlX2;
			var v = controlX1 - this.__positionX;
			var w = -this.__positionX + 3 * controlX1 + anchorX - 3 * controlX2;
			var t1 = (-u + Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			var t2 = (-u - Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			if(t1 > 0 && t1 < 1) ix1 = this.__calculateBezierCubicPoint(t1,this.__positionX,controlX1,controlX2,anchorX);
			if(t2 > 0 && t2 < 1) ix2 = this.__calculateBezierCubicPoint(t2,this.__positionX,controlX1,controlX2,anchorX);
		}
		iy1 = anchorY;
		iy2 = anchorY;
		if(!((controlY1 < anchorY && controlY1 > this.__positionX || controlY1 > anchorY && controlY1 < this.__positionX) && (controlY2 < anchorY && controlY2 > this.__positionX || controlY2 > anchorY && controlY2 < this.__positionX))) {
			var u1 = 2 * this.__positionX - 4 * controlY1 + 2 * controlY2;
			var v1 = controlY1 - this.__positionX;
			var w1 = -this.__positionX + 3 * controlY1 + anchorY - 3 * controlY2;
			var t11 = (-u1 + Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			var t21 = (-u1 - Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			if(t11 > 0 && t11 < 1) iy1 = this.__calculateBezierCubicPoint(t11,this.__positionX,controlY1,controlY2,anchorY);
			if(t21 > 0 && t21 < 1) iy2 = this.__calculateBezierCubicPoint(t21,this.__positionX,controlY1,controlY2,anchorY);
		}
		this.__inflateBounds(ix1 - this.__strokePadding,iy1 - this.__strokePadding);
		this.__inflateBounds(ix1 + this.__strokePadding,iy1 + this.__strokePadding);
		this.__inflateBounds(ix2 - this.__strokePadding,iy2 - this.__strokePadding);
		this.__inflateBounds(ix2 + this.__strokePadding,iy2 + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.cubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix;
		var iy;
		if(controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) ix = anchorX; else {
			var tx = (this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX);
			ix = this.__calculateBezierQuadPoint(tx,this.__positionX,controlX,anchorX);
		}
		if(controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) iy = anchorY; else {
			var ty = (this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY);
			iy = this.__calculateBezierQuadPoint(ty,this.__positionY,controlY,anchorY);
		}
		this.__inflateBounds(ix - this.__strokePadding,iy - this.__strokePadding);
		this.__inflateBounds(ix + this.__strokePadding,iy + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.curveTo(controlX,controlY,anchorX,anchorY);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) return;
		this.__inflateBounds(x - radius - this.__strokePadding,y - radius - this.__strokePadding);
		this.__inflateBounds(x + radius + this.__strokePadding,y + radius + this.__strokePadding);
		this.__commands.drawCircle(x,y,radius);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawEllipse(x,y,width,height);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawGraphicsData: function(graphicsData) {
		var fill;
		var bitmapFill;
		var gradientFill;
		var stroke;
		var path;
		var _g = 0;
		while(_g < graphicsData.length) {
			var graphics = graphicsData.data[_g];
			++_g;
			if(js_Boot.__instanceof(graphics,openfl_display_GraphicsSolidFill)) {
				fill = graphics;
				this.beginFill(fill.color,fill.alpha);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsBitmapFill)) {
				bitmapFill = graphics;
				this.beginBitmapFill(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsGradientFill)) {
				gradientFill = graphics;
				this.beginGradientFill(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsStroke)) {
				stroke = graphics;
				if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsSolidFill)) {
					fill = stroke.fill;
					this.lineStyle(stroke.thickness,fill.color,fill.alpha,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
				} else {
					this.lineStyle(stroke.thickness,0,1,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
					if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsBitmapFill)) {
						bitmapFill = stroke.fill;
						this.lineBitmapStyle(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
					} else if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsGradientFill)) {
						gradientFill = stroke.fill;
						this.lineGradientStyle(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
					}
				}
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsPath)) {
				path = graphics;
				this.drawPath(path.commands,path.data,path.winding);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsEndFill)) this.endFill();
		}
	}
	,drawPath: function(commands,data,winding) {
		var dataIndex = 0;
		var _g = 0;
		try {
			while(_g < commands.length) {
				var command = commands.data[_g];
				++_g;
				if(command != null) switch(command) {
				case 1:
					this.moveTo(data.data[dataIndex],data.data[dataIndex + 1]);
					dataIndex += 2;
					break;
				case 2:
					this.lineTo(data.data[dataIndex],data.data[dataIndex + 1]);
					dataIndex += 2;
					break;
				case 4:
					this.moveTo(data.data[dataIndex + 2],data.data[dataIndex + 3]);
					throw "__break__";
					dataIndex += 4;
					break;
				case 5:
					this.lineTo(data.data[dataIndex + 2],data.data[dataIndex + 3]);
					throw "__break__";
					dataIndex += 4;
					break;
				case 3:
					this.curveTo(data.data[dataIndex],data.data[dataIndex + 1],data.data[dataIndex + 2],data.data[dataIndex + 3]);
					dataIndex += 4;
					break;
				case 6:
					this.cubicCurveTo(data.data[dataIndex],data.data[dataIndex + 1],data.data[dataIndex + 2],data.data[dataIndex + 3],data.data[dataIndex + 4],data.data[dataIndex + 5]);
					dataIndex += 6;
					break;
				default:
				} else {
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRect(x,y,width,height);
		this.set___dirty(true);
	}
	,drawRoundRect: function(x,y,width,height,rx,ry) {
		if(ry == null) ry = -1;
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRoundRect(x,y,width,height,rx,ry);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawRoundRectComplex: function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		openfl_Lib.notImplemented("Graphics.drawRoundRectComplex");
	}
	,drawTiles: function(sheet,tileData,smooth,flags,shader,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		var useScale = (flags & 1) > 0;
		var useRotation = (flags & 2) > 0;
		var useRGB = (flags & 4) > 0;
		var useAlpha = (flags & 8) > 0;
		var useTransform = (flags & 16) > 0;
		var useRect = (flags & 32) > 0;
		var useOrigin = (flags & 64) > 0;
		var rect = openfl_geom_Rectangle.__temp;
		var matrix = openfl_geom_Matrix.__temp;
		var numValues = 3;
		var totalCount = count;
		if(count < 0) totalCount = tileData.length;
		if(useTransform || useScale || useRotation || useRGB || useAlpha) {
			var scaleIndex = 0;
			var rotationIndex = 0;
			var transformIndex = 0;
			if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
			if(useScale) {
				scaleIndex = numValues;
				numValues++;
			}
			if(useRotation) {
				rotationIndex = numValues;
				numValues++;
			}
			if(useTransform) {
				transformIndex = numValues;
				numValues += 4;
			}
			if(useRGB) numValues += 3;
			if(useAlpha) numValues++;
			var itemCount = totalCount / numValues | 0;
			var index = 0;
			var cacheID = -1;
			var x;
			var y;
			var id;
			var scale;
			var rotation;
			var tileWidth;
			var tileHeight;
			var originX;
			var originY;
			var tile = null;
			var tilePoint = null;
			while(index < totalCount) {
				x = tileData[index];
				y = tileData[index + 1];
				if(!useRect) id = tileData[index + 2] | 0; else id = -1;
				scale = 1.0;
				rotation = 0.0;
				if(useScale) scale = tileData[index + scaleIndex];
				if(useRotation) rotation = tileData[index + rotationIndex];
				if(id < 0) tile = null; else if(!useRect && cacheID != id) {
					cacheID = id;
					tile = sheet.__tileRects[id];
					tilePoint = sheet.__centerPoints[id];
				} else if(useRect) {
					tile = sheet.__rectTile;
					tile.setTo(tileData[index + 2],tileData[index + 3],tileData[index + 4],tileData[index + 5]);
					tilePoint = sheet.__point;
					if(useOrigin) {
						tilePoint.x = tileData[index + 6] / tile.width;
						tilePoint.y = tileData[index + 7] / tile.height;
					} else {
						tilePoint.x = 0;
						tilePoint.y = 0;
					}
				}
				if(tile != null) {
					if(useTransform) {
						rect.setTo(0,0,tile.width,tile.height);
						matrix.setTo(tileData[index + transformIndex],tileData[index + transformIndex + 1],tileData[index + transformIndex + 2],tileData[index + transformIndex + 3],0,0);
						originX = tilePoint.x * scale;
						originY = tilePoint.y * scale;
						matrix.translate(x - (originX * matrix.a + originY * matrix.c + matrix.tx),y - (originX * matrix.b + originY * matrix.d + matrix.ty));
						rect.__transform(rect,matrix);
						this.__inflateBounds(rect.x,rect.y);
						this.__inflateBounds(rect.get_right(),rect.get_bottom());
					} else {
						tileWidth = tile.width * scale;
						tileHeight = tile.height * scale;
						x -= tilePoint.x * tileWidth;
						y -= tilePoint.y * tileHeight;
						if(rotation != 0) {
							rect.setTo(0,0,tileWidth,tileHeight);
							matrix.identity();
							matrix.rotate(rotation);
							matrix.translate(x,y);
							rect.__transform(rect,matrix);
							this.__inflateBounds(rect.x,rect.y);
							this.__inflateBounds(rect.get_right(),rect.get_bottom());
						} else {
							this.__inflateBounds(x,y);
							this.__inflateBounds(x + tileWidth,y + tileHeight);
						}
					}
				}
				index += numValues;
			}
		} else {
			var x1;
			var y1;
			var id1;
			var tile1;
			var centerPoint;
			var originX1;
			var originY1;
			var rect1 = openfl_geom_Rectangle.__temp;
			var index1 = 0;
			while(index1 < totalCount) {
				x1 = tileData[index1++];
				y1 = tileData[index1++];
				if(!useRect) id1 = Std["int"](tileData[index1++]); else id1 = -1;
				originX1 = 0.0;
				originY1 = 0.0;
				if(useRect) {
					rect1.setTo(tileData[index1++],tileData[index1++],tileData[index1++],tileData[index1++]);
					if(useOrigin) {
						originX1 = tileData[index1++];
						originY1 = tileData[index1++];
					}
					this.__inflateBounds(x1 - originX1,y1 - originY1);
					this.__inflateBounds(x1 - originX1 + rect1.width,y1 - originY1 + rect1.height);
				} else {
					tile1 = sheet.__tileRects[id1];
					if(tile1 != null) {
						centerPoint = sheet.__centerPoints[id1];
						originX1 = centerPoint.x * tile1.width;
						originY1 = centerPoint.y * tile1.height;
						this.__inflateBounds(x1 - originX1,y1 - originY1);
						this.__inflateBounds(x1 - originX1 + tile1.width,y1 - originY1 + tile1.height);
					}
				}
			}
		}
		this.__commands.drawTiles(sheet,tileData,smooth,flags,shader,count);
		this.set___dirty(true);
		this.__visible = true;
	}
	,drawTriangles: function(vertices,indices,uvtData,culling,colors,blendMode) {
		if(blendMode == null) blendMode = 0;
		var vlen = vertices.length / 2 | 0;
		if(culling == null) culling = openfl_display_TriangleCulling.NONE;
		if(indices == null) {
			if(vlen % 3 != 0) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Not enough vertices to close a triangle."));
			var this1;
			this1 = new openfl_VectorData();
			var this2;
			this2 = new Array(0);
			this1.data = this2;
			this1.length = 0;
			this1.fixed = false;
			indices = this1;
			var _g = 0;
			while(_g < vlen) {
				var i = _g++;
				if(!indices.fixed) {
					indices.length++;
					if(indices.data.length < indices.length) {
						var data;
						var this3;
						this3 = new Array(indices.data.length + 10);
						data = this3;
						haxe_ds__$Vector_Vector_$Impl_$.blit(indices.data,0,data,0,indices.data.length);
						indices.data = data;
					}
					indices.data[indices.length - 1] = i;
				}
				indices.length;
			}
		}
		this.__inflateBounds(0,0);
		var tmpx = -Infinity;
		var tmpy = -Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var _g1 = 0;
		while(_g1 < vlen) {
			var i1 = _g1++;
			tmpx = vertices.data[i1 * 2];
			tmpy = vertices.data[i1 * 2 + 1];
			if(maxX < tmpx) maxX = tmpx;
			if(maxY < tmpy) maxY = tmpy;
		}
		this.__inflateBounds(maxX,maxY);
		this.__commands.drawTriangles(vertices,indices,uvtData,culling,colors,blendMode);
		this.set___dirty(true);
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.endFill();
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		this.__commands.lineBitmapStyle(bitmap,matrix != null?new openfl_geom_Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty):null,repeat,smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.__commands.lineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(thickness != null) {
			if(joints == openfl_display_JointStyle.MITER) {
				if(thickness > this.__strokePadding) this.__strokePadding = thickness;
			} else if(thickness / 2 > this.__strokePadding) this.__strokePadding = thickness / 2;
		}
		this.__commands.lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
		if(thickness != null) this.__visible = true;
	}
	,lineTo: function(x,y) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding * 2,this.__positionY + this.__strokePadding);
		this.__commands.lineTo(x,y);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.moveTo(x,y);
	}
	,__calculateBezierCubicPoint: function(t,p1,p2,p3,p4) {
		var iT = 1 - t;
		return p1 * (iT * iT * iT) + 3 * p2 * t * (iT * iT) + 3 * p3 * iT * (t * t) + p4 * (t * t * t);
	}
	,__calculateBezierQuadPoint: function(t,p1,p2,p3) {
		var iT = 1 - t;
		return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) return;
		var bounds = openfl_geom_Rectangle.__temp;
		this.__bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) return false;
		var px = matrix.__transformInverseX(x,y);
		var py = matrix.__transformInverseY(x,y);
		if(px > this.__bounds.x && py > this.__bounds.y && this.__bounds.contains(px,py)) {
			if(shapeFlag) return openfl__$internal_renderer_canvas_CanvasGraphics.hitTest(this,px,py);
			return true;
		}
		return false;
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) this.__bounds.width = x - this.__bounds.x;
		if(y > this.__bounds.y + this.__bounds.height) this.__bounds.height = y - this.__bounds.y;
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) this.__owner.__setRenderDirty();
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
var openfl_display_IGraphicsFill = function() { };
$hxClasses["openfl.display.IGraphicsFill"] = openfl_display_IGraphicsFill;
openfl_display_IGraphicsFill.__name__ = ["openfl","display","IGraphicsFill"];
openfl_display_IGraphicsFill.prototype = {
	__graphicsFillType: null
	,__class__: openfl_display_IGraphicsFill
};
var openfl_display_IGraphicsData = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl_display_IGraphicsData;
openfl_display_IGraphicsData.__name__ = ["openfl","display","IGraphicsData"];
openfl_display_IGraphicsData.prototype = {
	__graphicsDataType: null
	,__class__: openfl_display_IGraphicsData
};
var openfl_display_GraphicsBitmapFill = function(bitmapData,matrix,repeat,smooth) {
	if(smooth == null) smooth = false;
	if(repeat == null) repeat = true;
	this.bitmapData = bitmapData;
	this.matrix = matrix;
	this.repeat = repeat;
	this.smooth = smooth;
	this.__graphicsDataType = openfl_display_GraphicsDataType.BITMAP;
	this.__graphicsFillType = openfl_display_GraphicsFillType.BITMAP_FILL;
};
$hxClasses["openfl.display.GraphicsBitmapFill"] = openfl_display_GraphicsBitmapFill;
openfl_display_GraphicsBitmapFill.__name__ = ["openfl","display","GraphicsBitmapFill"];
openfl_display_GraphicsBitmapFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsBitmapFill.prototype = {
	bitmapData: null
	,matrix: null
	,repeat: null
	,smooth: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsBitmapFill
};
var openfl_display_GraphicsEndFill = function() {
	this.__graphicsDataType = openfl_display_GraphicsDataType.END;
	this.__graphicsFillType = openfl_display_GraphicsFillType.END_FILL;
};
$hxClasses["openfl.display.GraphicsEndFill"] = openfl_display_GraphicsEndFill;
openfl_display_GraphicsEndFill.__name__ = ["openfl","display","GraphicsEndFill"];
openfl_display_GraphicsEndFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsEndFill.prototype = {
	__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsEndFill
};
var openfl_display_GraphicsGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	if(focalPointRatio == null) focalPointRatio = 0;
	if(type == null) type = openfl_display_GradientType.LINEAR;
	if(spreadMethod == null) spreadMethod = openfl_display_SpreadMethod.PAD;
	if(interpolationMethod == null) interpolationMethod = openfl_display_InterpolationMethod.RGB;
	this.type = type;
	this.colors = colors;
	this.alphas = alphas;
	this.ratios = ratios;
	this.matrix = matrix;
	this.spreadMethod = spreadMethod;
	this.interpolationMethod = interpolationMethod;
	this.focalPointRatio = focalPointRatio;
	this.__graphicsDataType = openfl_display_GraphicsDataType.GRADIENT;
	this.__graphicsFillType = openfl_display_GraphicsFillType.GRADIENT_FILL;
};
$hxClasses["openfl.display.GraphicsGradientFill"] = openfl_display_GraphicsGradientFill;
openfl_display_GraphicsGradientFill.__name__ = ["openfl","display","GraphicsGradientFill"];
openfl_display_GraphicsGradientFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsGradientFill.prototype = {
	alphas: null
	,colors: null
	,focalPointRatio: null
	,interpolationMethod: null
	,matrix: null
	,ratios: null
	,spreadMethod: null
	,type: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsGradientFill
};
var openfl_display_IGraphicsPath = function() { };
$hxClasses["openfl.display.IGraphicsPath"] = openfl_display_IGraphicsPath;
openfl_display_IGraphicsPath.__name__ = ["openfl","display","IGraphicsPath"];
var openfl_display_GraphicsPath = function(commands,data,winding) {
	if(winding == null) winding = openfl_display_GraphicsPathWinding.EVEN_ODD;
	this.commands = commands;
	this.data = data;
	this.winding = winding;
	this.__graphicsDataType = openfl_display_GraphicsDataType.PATH;
};
$hxClasses["openfl.display.GraphicsPath"] = openfl_display_GraphicsPath;
openfl_display_GraphicsPath.__name__ = ["openfl","display","GraphicsPath"];
openfl_display_GraphicsPath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsPath.prototype = {
	commands: null
	,data: null
	,winding: null
	,__graphicsDataType: null
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		if(this.commands != null && this.data != null) {
			var this1 = this.commands;
			if(!this1.fixed) {
				this1.length++;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
				this1.data[this1.length - 1] = 3;
			}
			this1.length;
			var this3 = this.data;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
				this3.data[this3.length - 1] = anchorX;
			}
			this3.length;
			var this5 = this.data;
			if(!this5.fixed) {
				this5.length++;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
				this5.data[this5.length - 1] = anchorY;
			}
			this5.length;
			var this7 = this.data;
			if(!this7.fixed) {
				this7.length++;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
				this7.data[this7.length - 1] = controlX;
			}
			this7.length;
			var this9 = this.data;
			if(!this9.fixed) {
				this9.length++;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
				this9.data[this9.length - 1] = controlY;
			}
			this9.length;
		}
	}
	,lineTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			var this1 = this.commands;
			if(!this1.fixed) {
				this1.length++;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
				this1.data[this1.length - 1] = 2;
			}
			this1.length;
			var this3 = this.data;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
				this3.data[this3.length - 1] = x;
			}
			this3.length;
			var this5 = this.data;
			if(!this5.fixed) {
				this5.length++;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
				this5.data[this5.length - 1] = y;
			}
			this5.length;
		}
	}
	,moveTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			var this1 = this.commands;
			if(!this1.fixed) {
				this1.length++;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
				this1.data[this1.length - 1] = 1;
			}
			this1.length;
			var this3 = this.data;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
				this3.data[this3.length - 1] = x;
			}
			this3.length;
			var this5 = this.data;
			if(!this5.fixed) {
				this5.length++;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
				this5.data[this5.length - 1] = y;
			}
			this5.length;
		}
	}
	,wideLineTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			var this1 = this.commands;
			if(!this1.fixed) {
				this1.length++;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
				this1.data[this1.length - 1] = 2;
			}
			this1.length;
			var this3 = this.data;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
				this3.data[this3.length - 1] = x;
			}
			this3.length;
			var this5 = this.data;
			if(!this5.fixed) {
				this5.length++;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
				this5.data[this5.length - 1] = y;
			}
			this5.length;
		}
	}
	,wideMoveTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			var this1 = this.commands;
			if(!this1.fixed) {
				this1.length++;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
				this1.data[this1.length - 1] = 1;
			}
			this1.length;
			var this3 = this.data;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
				this3.data[this3.length - 1] = x;
			}
			this3.length;
			var this5 = this.data;
			if(!this5.fixed) {
				this5.length++;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
				this5.data[this5.length - 1] = y;
			}
			this5.length;
		}
	}
	,__class__: openfl_display_GraphicsPath
};
var openfl_display_GraphicsPathCommand = function() { };
$hxClasses["openfl.display.GraphicsPathCommand"] = openfl_display_GraphicsPathCommand;
openfl_display_GraphicsPathCommand.__name__ = ["openfl","display","GraphicsPathCommand"];
var openfl_display_GraphicsPathWinding = $hxClasses["openfl.display.GraphicsPathWinding"] = { __ename__ : ["openfl","display","GraphicsPathWinding"], __constructs__ : ["EVEN_ODD","NON_ZERO"] };
openfl_display_GraphicsPathWinding.EVEN_ODD = ["EVEN_ODD",0];
openfl_display_GraphicsPathWinding.EVEN_ODD.toString = $estr;
openfl_display_GraphicsPathWinding.EVEN_ODD.__enum__ = openfl_display_GraphicsPathWinding;
openfl_display_GraphicsPathWinding.NON_ZERO = ["NON_ZERO",1];
openfl_display_GraphicsPathWinding.NON_ZERO.toString = $estr;
openfl_display_GraphicsPathWinding.NON_ZERO.__enum__ = openfl_display_GraphicsPathWinding;
var openfl_display_GraphicsSolidFill = function(color,alpha) {
	if(alpha == null) alpha = 1;
	if(color == null) color = 0;
	this.alpha = alpha;
	this.color = color;
	this.__graphicsDataType = openfl_display_GraphicsDataType.SOLID;
	this.__graphicsFillType = openfl_display_GraphicsFillType.SOLID_FILL;
};
$hxClasses["openfl.display.GraphicsSolidFill"] = openfl_display_GraphicsSolidFill;
openfl_display_GraphicsSolidFill.__name__ = ["openfl","display","GraphicsSolidFill"];
openfl_display_GraphicsSolidFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsSolidFill.prototype = {
	alpha: null
	,color: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsSolidFill
};
var openfl_display_IGraphicsStroke = function() { };
$hxClasses["openfl.display.IGraphicsStroke"] = openfl_display_IGraphicsStroke;
openfl_display_IGraphicsStroke.__name__ = ["openfl","display","IGraphicsStroke"];
var openfl_display_GraphicsStroke = function(thickness,pixelHinting,scaleMode,caps,joints,miterLimit,fill) {
	if(miterLimit == null) miterLimit = 3;
	if(pixelHinting == null) pixelHinting = false;
	if(thickness == null) thickness = 0.0;
	if(caps != null) this.caps = caps; else this.caps = openfl_display_CapsStyle.NONE;
	this.fill = fill;
	if(joints != null) this.joints = joints; else this.joints = openfl_display_JointStyle.ROUND;
	this.miterLimit = miterLimit;
	this.pixelHinting = pixelHinting;
	if(scaleMode != null) this.scaleMode = scaleMode; else this.scaleMode = openfl_display_LineScaleMode.NORMAL;
	this.thickness = thickness;
	this.__graphicsDataType = openfl_display_GraphicsDataType.STROKE;
};
$hxClasses["openfl.display.GraphicsStroke"] = openfl_display_GraphicsStroke;
openfl_display_GraphicsStroke.__name__ = ["openfl","display","GraphicsStroke"];
openfl_display_GraphicsStroke.__interfaces__ = [openfl_display_IGraphicsStroke,openfl_display_IGraphicsData];
openfl_display_GraphicsStroke.prototype = {
	caps: null
	,fill: null
	,joints: null
	,miterLimit: null
	,pixelHinting: null
	,scaleMode: null
	,thickness: null
	,__graphicsDataType: null
	,__class__: openfl_display_GraphicsStroke
};
var openfl_display_GraphicsDataType = $hxClasses["openfl.display.GraphicsDataType"] = { __ename__ : ["openfl","display","GraphicsDataType"], __constructs__ : ["STROKE","SOLID","GRADIENT","PATH","BITMAP","END"] };
openfl_display_GraphicsDataType.STROKE = ["STROKE",0];
openfl_display_GraphicsDataType.STROKE.toString = $estr;
openfl_display_GraphicsDataType.STROKE.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.SOLID = ["SOLID",1];
openfl_display_GraphicsDataType.SOLID.toString = $estr;
openfl_display_GraphicsDataType.SOLID.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.GRADIENT = ["GRADIENT",2];
openfl_display_GraphicsDataType.GRADIENT.toString = $estr;
openfl_display_GraphicsDataType.GRADIENT.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.PATH = ["PATH",3];
openfl_display_GraphicsDataType.PATH.toString = $estr;
openfl_display_GraphicsDataType.PATH.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.BITMAP = ["BITMAP",4];
openfl_display_GraphicsDataType.BITMAP.toString = $estr;
openfl_display_GraphicsDataType.BITMAP.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.END = ["END",5];
openfl_display_GraphicsDataType.END.toString = $estr;
openfl_display_GraphicsDataType.END.__enum__ = openfl_display_GraphicsDataType;
var openfl_display_GraphicsFillType = $hxClasses["openfl.display.GraphicsFillType"] = { __ename__ : ["openfl","display","GraphicsFillType"], __constructs__ : ["SOLID_FILL","GRADIENT_FILL","BITMAP_FILL","END_FILL"] };
openfl_display_GraphicsFillType.SOLID_FILL = ["SOLID_FILL",0];
openfl_display_GraphicsFillType.SOLID_FILL.toString = $estr;
openfl_display_GraphicsFillType.SOLID_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.GRADIENT_FILL = ["GRADIENT_FILL",1];
openfl_display_GraphicsFillType.GRADIENT_FILL.toString = $estr;
openfl_display_GraphicsFillType.GRADIENT_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.BITMAP_FILL = ["BITMAP_FILL",2];
openfl_display_GraphicsFillType.BITMAP_FILL.toString = $estr;
openfl_display_GraphicsFillType.BITMAP_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.END_FILL = ["END_FILL",3];
openfl_display_GraphicsFillType.END_FILL.toString = $estr;
openfl_display_GraphicsFillType.END_FILL.__enum__ = openfl_display_GraphicsFillType;
var openfl_display_InterpolationMethod = $hxClasses["openfl.display.InterpolationMethod"] = { __ename__ : ["openfl","display","InterpolationMethod"], __constructs__ : ["RGB","LINEAR_RGB"] };
openfl_display_InterpolationMethod.RGB = ["RGB",0];
openfl_display_InterpolationMethod.RGB.toString = $estr;
openfl_display_InterpolationMethod.RGB.__enum__ = openfl_display_InterpolationMethod;
openfl_display_InterpolationMethod.LINEAR_RGB = ["LINEAR_RGB",1];
openfl_display_InterpolationMethod.LINEAR_RGB.toString = $estr;
openfl_display_InterpolationMethod.LINEAR_RGB.__enum__ = openfl_display_InterpolationMethod;
var openfl_display_JPEGEncoderOptions = function(quality) {
	if(quality == null) quality = 80;
	this.quality = quality;
};
$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl_display_JPEGEncoderOptions;
openfl_display_JPEGEncoderOptions.__name__ = ["openfl","display","JPEGEncoderOptions"];
openfl_display_JPEGEncoderOptions.prototype = {
	quality: null
	,__class__: openfl_display_JPEGEncoderOptions
};
var openfl_display_JointStyle = $hxClasses["openfl.display.JointStyle"] = { __ename__ : ["openfl","display","JointStyle"], __constructs__ : ["MITER","ROUND","BEVEL"] };
openfl_display_JointStyle.MITER = ["MITER",0];
openfl_display_JointStyle.MITER.toString = $estr;
openfl_display_JointStyle.MITER.__enum__ = openfl_display_JointStyle;
openfl_display_JointStyle.ROUND = ["ROUND",1];
openfl_display_JointStyle.ROUND.toString = $estr;
openfl_display_JointStyle.ROUND.__enum__ = openfl_display_JointStyle;
openfl_display_JointStyle.BEVEL = ["BEVEL",2];
openfl_display_JointStyle.BEVEL.toString = $estr;
openfl_display_JointStyle.BEVEL.__enum__ = openfl_display_JointStyle;
var openfl_display_LineScaleMode = $hxClasses["openfl.display.LineScaleMode"] = { __ename__ : ["openfl","display","LineScaleMode"], __constructs__ : ["HORIZONTAL","NONE","NORMAL","VERTICAL"] };
openfl_display_LineScaleMode.HORIZONTAL = ["HORIZONTAL",0];
openfl_display_LineScaleMode.HORIZONTAL.toString = $estr;
openfl_display_LineScaleMode.HORIZONTAL.__enum__ = openfl_display_LineScaleMode;
openfl_display_LineScaleMode.NONE = ["NONE",1];
openfl_display_LineScaleMode.NONE.toString = $estr;
openfl_display_LineScaleMode.NONE.__enum__ = openfl_display_LineScaleMode;
openfl_display_LineScaleMode.NORMAL = ["NORMAL",2];
openfl_display_LineScaleMode.NORMAL.toString = $estr;
openfl_display_LineScaleMode.NORMAL.__enum__ = openfl_display_LineScaleMode;
openfl_display_LineScaleMode.VERTICAL = ["VERTICAL",3];
openfl_display_LineScaleMode.VERTICAL.toString = $estr;
openfl_display_LineScaleMode.VERTICAL.__enum__ = openfl_display_LineScaleMode;
var openfl_display_Loader = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
};
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = ["openfl","display","Loader"];
openfl_display_Loader.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Loader.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	content: null
	,contentLoaderInfo: null
	,mImage: null
	,mShape: null
	,close: function() {
		openfl_Lib.notImplemented("Loader.close");
	}
	,load: function(request,context) {
		var extension = "";
		var parts = request.url.split(".");
		if(parts.length > 0) extension = parts[parts.length - 1].toLowerCase();
		if(extension.indexOf("?") != -1) extension = extension.split("?")[0];
		var transparent = true;
		this.contentLoaderInfo.url = request.url;
		if(request.contentType == null && request.contentType != "") switch(extension) {
		case "swf":
			this.contentLoaderInfo.contentType = "application/x-shockwave-flash";
			break;
		case "jpg":case "jpeg":
			transparent = false;
			this.contentLoaderInfo.contentType = "image/jpeg";
			break;
		case "png":
			this.contentLoaderInfo.contentType = "image/png";
			break;
		case "gif":
			this.contentLoaderInfo.contentType = "image/gif";
			break;
		default:
			this.contentLoaderInfo.contentType = "application/x-www-form-urlencoded";
		} else this.contentLoaderInfo.contentType = request.contentType;
		var worker = new lime_system_BackgroundWorker();
		worker.doWork.add(function(_) {
			var path = request.url;
			openfl_display_BitmapData.fromFile(path,function(bitmapData) {
				worker.sendComplete(bitmapData);
			},function() {
				worker.sendError(openfl_events_IOErrorEvent.IO_ERROR);
			});
		});
		worker.onError.add($bind(this,this.BitmapData_onError));
		worker.onComplete.add($bind(this,this.BitmapData_onLoad));
		worker.run();
	}
	,loadBytes: function(buffer,context) {
		var worker = new lime_system_BackgroundWorker();
		worker.doWork.add(function(_) {
			openfl_display_BitmapData.fromBytes(buffer,null,function(bitmapData) {
				worker.sendComplete(bitmapData);
			});
		});
		worker.onComplete.add($bind(this,this.BitmapData_onLoad));
		worker.run();
	}
	,unload: function() {
		if(this.get_numChildren() > 0) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			var event = new openfl_events_Event(openfl_events_Event.UNLOAD);
			event.currentTarget = this;
			this.__dispatchEvent(event);
		}
	}
	,unloadAndStop: function(gc) {
		if(gc == null) gc = true;
		openfl_Lib.notImplemented("Loader.unloadAndStop");
	}
	,BitmapData_onLoad: function(bitmapData) {
		this.contentLoaderInfo.content = new openfl_display_Bitmap(bitmapData);
		this.content = this.contentLoaderInfo.content;
		this.addChild(this.contentLoaderInfo.content);
		var event = new openfl_events_Event(openfl_events_Event.COMPLETE);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,BitmapData_onError: function(_) {
		var event = new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl_display_Loader
});
var openfl_display_OpenGLView = function() {
	openfl_display_DirectRenderer.call(this,"OpenGLView");
};
$hxClasses["openfl.display.OpenGLView"] = openfl_display_OpenGLView;
openfl_display_OpenGLView.__name__ = ["openfl","display","OpenGLView"];
openfl_display_OpenGLView.__properties__ = {get_isSupported:"get_isSupported"}
openfl_display_OpenGLView.isSupported = null;
openfl_display_OpenGLView.get_isSupported = function() {
	if(!window.WebGLRenderingContext) return false;
	if(lime_graphics_opengl_GL.context != null) return true; else {
		var canvas = window.document.createElement("canvas");
		var context = canvas.getContext("webgl");
		if(context == null) context = canvas.getContext("experimental-webgl");
		return context != null;
	}
};
openfl_display_OpenGLView.__super__ = openfl_display_DirectRenderer;
openfl_display_OpenGLView.prototype = $extend(openfl_display_DirectRenderer.prototype,{
	__added: null
	,__initialized: null
	,__renderCanvas: function(renderSession) {
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable) {
			if(!this.__added) {
				renderSession.element.appendChild(this.__canvas);
				this.__added = true;
				openfl__$internal_renderer_dom_DOMRenderer.initializeElement(this,this.__canvas,renderSession);
			}
			if(this.__context != null) {
				var rect = null;
				if(this.get_scrollRect() == null) rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl_geom_Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
				if(this.__render != null) this.__render(rect);
			}
		} else if(this.__added) {
			renderSession.element.removeChild(this.__canvas);
			this.__added = false;
		}
	}
	,__renderGL: function(renderSession) {
		if(this.stage != null && this.__renderable) {
			var rect = null;
			if(this.get_scrollRect() == null) rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl_geom_Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
			if(this.__render != null) this.__render(rect);
			renderSession.shaderManager.setShader(null);
			renderSession.blendModeManager.setBlendMode(null);
		}
	}
	,__class__: openfl_display_OpenGLView
});
var openfl_display_PNGEncoderOptions = function(fastCompression) {
	if(fastCompression == null) fastCompression = false;
	this.fastCompression = fastCompression;
};
$hxClasses["openfl.display.PNGEncoderOptions"] = openfl_display_PNGEncoderOptions;
openfl_display_PNGEncoderOptions.__name__ = ["openfl","display","PNGEncoderOptions"];
openfl_display_PNGEncoderOptions.prototype = {
	fastCompression: null
	,__class__: openfl_display_PNGEncoderOptions
};
var openfl_display_PixelSnapping = $hxClasses["openfl.display.PixelSnapping"] = { __ename__ : ["openfl","display","PixelSnapping"], __constructs__ : ["NEVER","AUTO","ALWAYS"] };
openfl_display_PixelSnapping.NEVER = ["NEVER",0];
openfl_display_PixelSnapping.NEVER.toString = $estr;
openfl_display_PixelSnapping.NEVER.__enum__ = openfl_display_PixelSnapping;
openfl_display_PixelSnapping.AUTO = ["AUTO",1];
openfl_display_PixelSnapping.AUTO.toString = $estr;
openfl_display_PixelSnapping.AUTO.__enum__ = openfl_display_PixelSnapping;
openfl_display_PixelSnapping.ALWAYS = ["ALWAYS",2];
openfl_display_PixelSnapping.ALWAYS.toString = $estr;
openfl_display_PixelSnapping.ALWAYS.__enum__ = openfl_display_PixelSnapping;
var openfl_display_Preloader = function(display) {
	lime_app_Preloader.call(this);
	if(display != null) {
		this.display = display;
		openfl_Lib.current.addChild(display);
		if(js_Boot.__instanceof(display,NMEPreloader)) (js_Boot.__cast(display , NMEPreloader)).onInit();
	}
};
$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
openfl_display_Preloader.__name__ = ["openfl","display","Preloader"];
openfl_display_Preloader.__super__ = lime_app_Preloader;
openfl_display_Preloader.prototype = $extend(lime_app_Preloader.prototype,{
	display: null
	,displayComplete: null
	,load: function(urls,types) {
		var sounds = [];
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "MUSIC":case "SOUND":
				var sound = haxe_io_Path.withoutExtension(url);
				if(!HxOverrides.remove(sounds,sound)) this.total++;
				sounds.push(sound);
				break;
			default:
			}
		}
		var _g3 = 0;
		while(_g3 < sounds.length) {
			var soundName = sounds[_g3];
			++_g3;
			var sound1 = new openfl_media_Sound();
			sound1.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this.sound_onComplete));
			sound1.addEventListener(openfl_events_IOErrorEvent.IO_ERROR,$bind(this,this.sound_onIOError));
			sound1.load(new openfl_net_URLRequest(soundName + ".ogg"));
		}
		lime_app_Preloader.prototype.load.call(this,urls,types);
	}
	,start: function() {
		if(this.display != null && js_Boot.__instanceof(this.display,NMEPreloader)) {
			this.display.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this.display_onComplete));
			(js_Boot.__cast(this.display , NMEPreloader)).onLoaded();
		} else lime_app_Preloader.prototype.start.call(this);
	}
	,update: function(loaded,total) {
		if(this.display != null && js_Boot.__instanceof(this.display,NMEPreloader)) (js_Boot.__cast(this.display , NMEPreloader)).onUpdate(loaded,total);
	}
	,display_onComplete: function(event) {
		this.display.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this.display_onComplete));
		openfl_Lib.current.removeChild(this.display);
		openfl_Lib.current.stage.set_focus(null);
		this.display = null;
		lime_app_Preloader.prototype.start.call(this);
	}
	,sound_onComplete: function(event) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,sound_onIOError: function(event) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: openfl_display_Preloader
});
var openfl_display_Shader = function(precision) {
	if(precision == null) precision = 1;
	this.__dirty = true;
	this.repeatY = 33071;
	this.repeatX = 33071;
	this.precision = 1;
	this.precision = precision;
	this.data = new haxe_ds_StringMap();
	var value = new openfl_display_GLShaderParameter("vec2");
	this.data.set(openfl_display_Shader.uObjectSize,value);
	var value1 = new openfl_display_GLShaderParameter("vec2");
	this.data.set(openfl_display_Shader.uTextureSize,value1);
};
$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
openfl_display_Shader.__name__ = ["openfl","display","Shader"];
openfl_display_Shader.prototype = {
	precision: null
	,data: null
	,repeatX: null
	,repeatY: null
	,smooth: null
	,blendMode: null
	,__dirty: null
	,__fragmentCode: null
	,__vertexCode: null
	,__shader: null
	,__init: function(gl) {
		var dirty = this.__dirty;
		if(dirty) {
			if(this.__shader != null) this.__shader.destroy();
			this.__shader = new openfl__$internal_renderer_opengl_shaders2_Shader(gl);
			if(this.__vertexCode != null) this.__shader.vertexString = this.__vertexCode; else this.__shader.vertexString = openfl__$internal_renderer_opengl_shaders2_DefaultShader.VERTEX_SRC.join("\n");
			this.__shader.fragmentString = this.__fragmentCode;
			this.__dirty = false;
		}
		this.__shader.init(dirty);
	}
	,__buildFragmentCode: function(code) {
		var output = [];
		output.push("#ifdef GL_ES");
		output.push((function($this) {
			var $r;
			var _g = $this.precision;
			$r = (function($this) {
				var $r;
				switch(_g) {
				case 2:
					$r = "precision highp float;";
					break;
				case 1:
					$r = "precision mediump float;";
					break;
				default:
					$r = "precision lowp float;";
				}
				return $r;
			}($this));
			return $r;
		}(this)));
		output.push("#endif");
		output = output.concat(openfl_display_Shader.fragmentHeader);
		output.push(code);
		this.__fragmentCode = output.join("\n");
	}
	,__buildVertexCode: function(code) {
		var output = [];
		output.push("#ifdef GL_ES");
		output.push((function($this) {
			var $r;
			var _g = $this.precision;
			$r = (function($this) {
				var $r;
				switch(_g) {
				case 2:
					$r = "precision highp float;";
					break;
				case 1:
					$r = "precision mediump float;";
					break;
				default:
					$r = "precision lowp float;";
				}
				return $r;
			}($this));
			return $r;
		}(this)));
		output.push("#endif");
		output = output.concat(openfl_display_Shader.vertexHeader);
		output.push(code);
		this.__vertexCode = output.join("\n");
	}
	,__class__: openfl_display_Shader
};
var openfl_display_GLShaderParameter = function(type,arraySize) {
	this.internalType = 0;
	this.transpose = false;
	this.repeatY = 33071;
	this.repeatX = 33071;
	this.smooth = false;
	this.arraySize = 0;
	this.size = 0;
	this.type = type;
	if(arraySize == null) this.arraySize = 0; else this.arraySize = arraySize;
	this.__init();
};
$hxClasses["openfl.display.GLShaderParameter"] = openfl_display_GLShaderParameter;
openfl_display_GLShaderParameter.__name__ = ["openfl","display","GLShaderParameter"];
openfl_display_GLShaderParameter.prototype = {
	type: null
	,size: null
	,arraySize: null
	,value: null
	,bitmap: null
	,smooth: null
	,repeatX: null
	,repeatY: null
	,transpose: null
	,internalType: null
	,__init: function() {
		var _g = this.type;
		var v = _g;
		var m = _g;
		switch(_g) {
		case "bool":
			this.internalType = 1;
			this.size = 1;
			if(this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
			this.value = [0.0];
			break;
		case "int":
			this.internalType = 1;
			this.size = 1;
			if(this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
			this.value = [0.0];
			break;
		case "float":
			this.internalType = 2;
			this.size = 1;
			if(this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
			this.value = [0.0];
			break;
		case "sampler2D":
			if(v.indexOf("vec") > -1) {
				if(StringTools.startsWith(this.type,"b") || StringTools.startsWith(this.type,"i")) this.internalType = 1; else this.internalType = 2;
				var s = Std.parseInt(this.type.charAt(this.type.length - 1));
				this.size = s;
				this.set_value((function($this) {
					var $r;
					var _g1 = [];
					{
						var _g3 = 0;
						var _g2 = $this.size;
						while(_g3 < _g2) {
							var i = _g3++;
							_g1.push(0.0);
						}
					}
					$r = _g1;
					return $r;
				}(this)));
			} else if(m.indexOf("mat") > -1) {
				this.internalType = 3;
				var s1 = Std.parseInt(this.type.charAt(this.type.length - 1));
				this.size = s1;
				if(this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
				var _g11 = this.size;
				switch(_g11) {
				case 2:
					this.value = [1,0,1,0];
					break;
				case 3:
					this.value = [1,0,0,0,1,0,0,0,1];
					break;
				case 4:
					this.value = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
					break;
				default:
					this.value = [0];
				}
			} else {
				this.internalType = 4;
				this.size = 0;
			}
			break;
		case "samplerCube":
			if(v.indexOf("vec") > -1) {
				if(StringTools.startsWith(this.type,"b") || StringTools.startsWith(this.type,"i")) this.internalType = 1; else this.internalType = 2;
				var s2 = Std.parseInt(this.type.charAt(this.type.length - 1));
				this.size = s2;
				this.set_value((function($this) {
					var $r;
					var _g12 = [];
					{
						var _g31 = 0;
						var _g21 = $this.size;
						while(_g31 < _g21) {
							var i1 = _g31++;
							_g12.push(0.0);
						}
					}
					$r = _g12;
					return $r;
				}(this)));
			} else if(m.indexOf("mat") > -1) {
				this.internalType = 3;
				var s3 = Std.parseInt(this.type.charAt(this.type.length - 1));
				this.size = s3;
				if(this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
				var _g13 = this.size;
				switch(_g13) {
				case 2:
					this.value = [1,0,1,0];
					break;
				case 3:
					this.value = [1,0,0,0,1,0,0,0,1];
					break;
				case 4:
					this.value = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
					break;
				default:
					this.value = [0];
				}
			} else {
				this.internalType = 4;
				this.size = 0;
			}
			break;
		default:
			if(v.indexOf("vec") > -1) {
				if(StringTools.startsWith(this.type,"b") || StringTools.startsWith(this.type,"i")) this.internalType = 1; else this.internalType = 2;
				var s4 = Std.parseInt(this.type.charAt(this.type.length - 1));
				this.size = s4;
				this.set_value((function($this) {
					var $r;
					var _g14 = [];
					{
						var _g32 = 0;
						var _g22 = $this.size;
						while(_g32 < _g22) {
							var i2 = _g32++;
							_g14.push(0.0);
						}
					}
					$r = _g14;
					return $r;
				}(this)));
			} else if(m.indexOf("mat") > -1) {
				this.internalType = 3;
				var s5 = Std.parseInt(this.type.charAt(this.type.length - 1));
				this.size = s5;
				if(this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
				var _g15 = this.size;
				switch(_g15) {
				case 2:
					this.value = [1,0,1,0];
					break;
				case 3:
					this.value = [1,0,0,0,1,0,0,0,1];
					break;
				case 4:
					this.value = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
					break;
				default:
					this.value = [0];
				}
			} else {
				this.internalType = 0;
				haxe_Log.trace("Can't initialize value for type " + this.type,{ fileName : "Shader.hx", lineNumber : 307, className : "openfl.display.GLShaderParameter", methodName : "__init"});
			}
		}
	}
	,set_value: function(v) {
		if(this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
		return this.value = v;
	}
	,set_bitmap: function(v) {
		if(this.internalType != 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a bitmap, use value instead");
		return this.bitmap = v;
	}
	,__class__: openfl_display_GLShaderParameter
	,__properties__: {set_bitmap:"set_bitmap",set_value:"set_value"}
};
var openfl_display_Shape = function() {
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
openfl_display_Shape.__name__ = ["openfl","display","Shape"];
openfl_display_Shape.__super__ = openfl_display_DisplayObject;
openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype,{
	graphics: null
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics();
			this.__graphics.__owner = this;
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Shape
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
var openfl_display_SpreadMethod = $hxClasses["openfl.display.SpreadMethod"] = { __ename__ : ["openfl","display","SpreadMethod"], __constructs__ : ["REPEAT","REFLECT","PAD"] };
openfl_display_SpreadMethod.REPEAT = ["REPEAT",0];
openfl_display_SpreadMethod.REPEAT.toString = $estr;
openfl_display_SpreadMethod.REPEAT.__enum__ = openfl_display_SpreadMethod;
openfl_display_SpreadMethod.REFLECT = ["REFLECT",1];
openfl_display_SpreadMethod.REFLECT.toString = $estr;
openfl_display_SpreadMethod.REFLECT.__enum__ = openfl_display_SpreadMethod;
openfl_display_SpreadMethod.PAD = ["PAD",2];
openfl_display_SpreadMethod.PAD.toString = $estr;
openfl_display_SpreadMethod.PAD.__enum__ = openfl_display_SpreadMethod;
var openfl_display_Stage = function(window,color) {
	openfl_display_DisplayObjectContainer.call(this);
	this.application = window.application;
	this.window = window;
	if(color == null) {
		this.__transparent = true;
		this.set_color(0);
	} else this.set_color(color);
	this.set_name(null);
	this.__deltaTime = 0;
	this.__displayState = openfl_display_StageDisplayState.NORMAL;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.stageWidth = window.__width * window.__scale | 0;
	this.stageHeight = window.__height * window.__scale | 0;
	this.stage = this;
	this.align = openfl_display_StageAlign.TOP_LEFT;
	this.allowsFullScreen = false;
	this.allowsFullScreenInteractive = false;
	this.quality = openfl_display_StageQuality.HIGH;
	this.scaleMode = openfl_display_StageScaleMode.NO_SCALE;
	this.stageFocusRect = true;
	this.__macKeyboard = /AppleWebKit/.test (navigator.userAgent) && /Mobile\/\w+/.test (navigator.userAgent) || /Mac/.test (navigator.platform);
	this.__clearBeforeRender = true;
	this.__stack = [];
	this.__mouseOutStack = [];
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.stage3Ds = this1;
	var this3 = this.stage3Ds;
	var x = new openfl_display_Stage3D();
	if(!this3.fixed) {
		this3.length++;
		if(this3.data.length < this3.length) {
			var data;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data = this4;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data,0,this3.data.length);
			this3.data = data;
		}
		this3.data[this3.length - 1] = x;
	}
	this3.length;
	if(openfl_Lib.current.stage == null) this.stage.addChild(openfl_Lib.current);
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = ["openfl","display","Stage"];
openfl_display_Stage.__interfaces__ = [lime_app_IModule];
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	align: null
	,allowsFullScreen: null
	,allowsFullScreenInteractive: null
	,application: null
	,quality: null
	,scaleMode: null
	,stage3Ds: null
	,stageFocusRect: null
	,stageHeight: null
	,stageWidth: null
	,window: null
	,__clearBeforeRender: null
	,__color: null
	,__colorSplit: null
	,__colorString: null
	,__deltaTime: null
	,__dirty: null
	,__displayState: null
	,__dragBounds: null
	,__dragObject: null
	,__dragOffsetX: null
	,__dragOffsetY: null
	,__focus: null
	,__fullscreen: null
	,__invalidated: null
	,__lastClickTime: null
	,__macKeyboard: null
	,__mouseOutStack: null
	,__mouseX: null
	,__mouseY: null
	,__originalWidth: null
	,__originalHeight: null
	,__renderer: null
	,__rendering: null
	,__stack: null
	,__transparent: null
	,__wasDirty: null
	,globalToLocal: function(pos) {
		return pos.clone();
	}
	,invalidate: function() {
		this.__invalidated = true;
	}
	,localToGlobal: function(pos) {
		return pos.clone();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
	}
	,onGamepadButtonDown: function(gamepad,button) {
		openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
	}
	,onGamepadButtonUp: function(gamepad,button) {
		openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
	}
	,onGamepadConnect: function(gamepad) {
		openfl_ui_GameInput.__onGamepadConnect(gamepad);
	}
	,onGamepadDisconnect: function(gamepad) {
		openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) return;
		this.__onKey(openfl_events_KeyboardEvent.KEY_DOWN,keyCode,modifier);
	}
	,onKeyUp: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) return;
		this.__onKey(openfl_events_KeyboardEvent.KEY_UP,keyCode,modifier);
	}
	,onModuleExit: function(code) {
		if(this.window != null) {
			var event = new openfl_events_Event(openfl_events_Event.DEACTIVATE);
			this.__broadcast(event,true);
		}
	}
	,onMouseDown: function(window,x,y,button) {
		if(this.window == null || this.window != window) return;
		var type;
		switch(button) {
		case 1:
			type = openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN;
			break;
		case 2:
			type = openfl_events_MouseEvent.RIGHT_MOUSE_DOWN;
			break;
		default:
			type = openfl_events_MouseEvent.MOUSE_DOWN;
		}
		this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
	}
	,onMouseMove: function(window,x,y) {
		if(this.window == null || this.window != window) return;
		this.__onMouse(openfl_events_MouseEvent.MOUSE_MOVE,x * window.__scale | 0,y * window.__scale | 0,0);
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
		if(this.window == null || this.window != window) return;
		var type;
		switch(button) {
		case 1:
			type = openfl_events_MouseEvent.MIDDLE_MOUSE_UP;
			break;
		case 2:
			type = openfl_events_MouseEvent.RIGHT_MOUSE_UP;
			break;
		default:
			type = openfl_events_MouseEvent.MOUSE_UP;
		}
		this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
		if(this.window == null || this.window != window) return;
		this.__onMouseWheel(deltaX * window.__scale | 0,deltaY * window.__scale | 0);
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
		if(this.window == null || this.window != window) return;
		var stack = [];
		if(this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
		var event = new openfl_events_TextEvent(openfl_events_TextEvent.TEXT_INPUT,true,false,text);
		if(stack.length > 0) {
			stack.reverse();
			this.__fireEvent(event,stack);
		} else this.__broadcast(event,true);
	}
	,onTouchMove: function(touch) {
		this.__onTouch("touchMove",touch);
	}
	,onTouchEnd: function(touch) {
		this.__onTouch("touchEnd",touch);
	}
	,onTouchStart: function(touch) {
		this.__onTouch("touchBegin",touch);
	}
	,onWindowActivate: function(window) {
		if(this.window == null || this.window != window) return;
		var event = new openfl_events_Event(openfl_events_Event.ACTIVATE);
		this.__broadcast(event,true);
	}
	,onWindowClose: function(window) {
		if(this.window == window) this.window = null;
	}
	,onWindowCreate: function(window) {
		if(this.window == null || this.window != window) return;
		if(window.renderer != null) {
			var _g = window.renderer.context;
			switch(_g[1]) {
			case 0:
				var gl = _g[2];
				this.__renderer = new openfl__$internal_renderer_opengl_GLRenderer(this.stageWidth,this.stageHeight,gl);
				break;
			case 1:
				var context = _g[2];
				this.__renderer = new openfl__$internal_renderer_canvas_CanvasRenderer(this.stageWidth,this.stageHeight,context);
				break;
			case 2:
				var element = _g[2];
				this.__renderer = new openfl__$internal_renderer_dom_DOMRenderer(this.stageWidth,this.stageHeight,element);
				break;
			case 4:
				var cairo = _g[2];
				this.__renderer = new openfl__$internal_renderer_cairo_CairoRenderer(this.stageWidth,this.stageHeight,cairo);
				break;
			case 5:
				var ctx = _g[2];
				this.__renderer = new openfl__$internal_renderer_console_ConsoleRenderer(this.stageWidth,this.stageHeight,ctx);
				break;
			default:
			}
		}
	}
	,onWindowDeactivate: function(window) {
		if(this.window == null || this.window != window) return;
		var event = new openfl_events_Event(openfl_events_Event.DEACTIVATE);
		this.__broadcast(event,true);
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
		if(this.window == null || this.window != window) return;
		var event = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_IN,true,false,null,false,0);
		this.__broadcast(event,true);
	}
	,onWindowFocusOut: function(window) {
		if(this.window == null || this.window != window) return;
		var event = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_OUT,true,false,null,false,0);
		this.__broadcast(event,true);
	}
	,onWindowFullscreen: function(window) {
	}
	,onWindowLeave: function(window) {
		if(this.window == null || this.window != window) return;
		this.__dispatchEvent(new openfl_events_Event(openfl_events_Event.MOUSE_LEAVE));
	}
	,onWindowMinimize: function(window) {
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowResize: function(window,width,height) {
		if(this.window == null || this.window != window) return;
		this.stageWidth = width * window.__scale | 0;
		this.stageHeight = height * window.__scale | 0;
		if(this.__renderer != null) this.__renderer.resize(this.stageWidth,this.stageHeight);
		var event = new openfl_events_Event(openfl_events_Event.RESIZE);
		this.__broadcast(event,false);
	}
	,onWindowRestore: function(window) {
	}
	,render: function(renderer) {
		if(renderer.window == null || renderer.window != this.window) return;
		if(this.application != null && this.application.windows.length > 0) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__rendering) return;
		this.__rendering = true;
		this.__broadcast(new openfl_events_Event(openfl_events_Event.ENTER_FRAME),true);
		if(this.__invalidated) {
			this.__invalidated = false;
			this.__broadcast(new openfl_events_Event(openfl_events_Event.RENDER),true);
		}
		this.__renderable = true;
		this.__enterFrame(this.__deltaTime);
		this.__deltaTime = 0;
		this.__update(false,true);
		if(this.__renderer != null) {
			{
				var _g = renderer.context;
				switch(_g[1]) {
				case 4:
					var cairo = _g[2];
					(js_Boot.__cast(this.__renderer , openfl__$internal_renderer_cairo_CairoRenderer)).cairo = cairo;
					this.__renderer.renderSession.cairo = cairo;
					break;
				default:
				}
			}
			this.__renderer.render(this);
		}
		this.__rendering = false;
	}
	,update: function(deltaTime) {
		this.__deltaTime = deltaTime;
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) mouse = parent.globalToLocal(mouse);
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) x = this.__dragBounds.x; else if(x > this.__dragBounds.get_right()) x = this.__dragBounds.get_right();
			if(y < this.__dragBounds.y) y = this.__dragBounds.y; else if(y > this.__dragBounds.get_bottom()) y = this.__dragBounds.get_bottom();
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__fireEvent: function(event,stack) {
		var length = stack.length;
		if(length == 0) {
			event.eventPhase = openfl_events_EventPhase.AT_TARGET;
			event.target.__broadcast(event,false);
		} else {
			event.eventPhase = openfl_events_EventPhase.CAPTURING_PHASE;
			event.target = stack[stack.length - 1];
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				stack[i].__broadcast(event,false);
				if(event.__isCanceled) return;
			}
			event.eventPhase = openfl_events_EventPhase.AT_TARGET;
			event.target.__broadcast(event,false);
			if(event.__isCanceled) return;
			if(event.bubbles) {
				event.eventPhase = openfl_events_EventPhase.BUBBLING_PHASE;
				var i1 = length - 2;
				while(i1 >= 0) {
					stack[i1].__broadcast(event,false);
					if(event.__isCanceled) return;
					i1--;
				}
			}
		}
	}
	,__getInteractive: function(stack) {
		if(stack != null) stack.push(this);
		return true;
	}
	,__onKey: function(type,keyCode,modifier) {
		openfl_events_MouseEvent.__altKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
		if(stack.length > 0) {
			var keyLocation;
			switch(keyCode) {
			case 1073742048:case 1073742049:case 1073742050:case 1073742051:
				keyLocation = 1;
				break;
			case 1073742052:case 1073742053:case 1073742054:case 1073742055:
				keyLocation = 2;
				break;
			case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
				keyLocation = 3;
				break;
			default:
				keyLocation = 0;
			}
			var keyCode1;
			switch(keyCode) {
			case 8:
				keyCode1 = 8;
				break;
			case 9:
				keyCode1 = 9;
				break;
			case 13:
				keyCode1 = 13;
				break;
			case 27:
				keyCode1 = 27;
				break;
			case 32:
				keyCode1 = 32;
				break;
			case 33:
				keyCode1 = 49;
				break;
			case 34:
				keyCode1 = 222;
				break;
			case 35:
				keyCode1 = 51;
				break;
			case 36:
				keyCode1 = 52;
				break;
			case 37:
				keyCode1 = 53;
				break;
			case 38:
				keyCode1 = 55;
				break;
			case 39:
				keyCode1 = 222;
				break;
			case 40:
				keyCode1 = 57;
				break;
			case 41:
				keyCode1 = 48;
				break;
			case 42:
				keyCode1 = 56;
				break;
			case 44:
				keyCode1 = 188;
				break;
			case 45:
				keyCode1 = 189;
				break;
			case 46:
				keyCode1 = 190;
				break;
			case 47:
				keyCode1 = 191;
				break;
			case 48:
				keyCode1 = 48;
				break;
			case 49:
				keyCode1 = 49;
				break;
			case 50:
				keyCode1 = 50;
				break;
			case 51:
				keyCode1 = 51;
				break;
			case 52:
				keyCode1 = 52;
				break;
			case 53:
				keyCode1 = 53;
				break;
			case 54:
				keyCode1 = 54;
				break;
			case 55:
				keyCode1 = 55;
				break;
			case 56:
				keyCode1 = 56;
				break;
			case 57:
				keyCode1 = 57;
				break;
			case 58:
				keyCode1 = 186;
				break;
			case 59:
				keyCode1 = 186;
				break;
			case 60:
				keyCode1 = 60;
				break;
			case 61:
				keyCode1 = 187;
				break;
			case 62:
				keyCode1 = 190;
				break;
			case 63:
				keyCode1 = 191;
				break;
			case 64:
				keyCode1 = 50;
				break;
			case 91:
				keyCode1 = 219;
				break;
			case 92:
				keyCode1 = 220;
				break;
			case 93:
				keyCode1 = 221;
				break;
			case 94:
				keyCode1 = 54;
				break;
			case 95:
				keyCode1 = 189;
				break;
			case 96:
				keyCode1 = 192;
				break;
			case 97:
				keyCode1 = 65;
				break;
			case 98:
				keyCode1 = 66;
				break;
			case 99:
				keyCode1 = 67;
				break;
			case 100:
				keyCode1 = 68;
				break;
			case 101:
				keyCode1 = 69;
				break;
			case 102:
				keyCode1 = 70;
				break;
			case 103:
				keyCode1 = 71;
				break;
			case 104:
				keyCode1 = 72;
				break;
			case 105:
				keyCode1 = 73;
				break;
			case 106:
				keyCode1 = 74;
				break;
			case 107:
				keyCode1 = 75;
				break;
			case 108:
				keyCode1 = 76;
				break;
			case 109:
				keyCode1 = 77;
				break;
			case 110:
				keyCode1 = 78;
				break;
			case 111:
				keyCode1 = 79;
				break;
			case 112:
				keyCode1 = 80;
				break;
			case 113:
				keyCode1 = 81;
				break;
			case 114:
				keyCode1 = 82;
				break;
			case 115:
				keyCode1 = 83;
				break;
			case 116:
				keyCode1 = 84;
				break;
			case 117:
				keyCode1 = 85;
				break;
			case 118:
				keyCode1 = 86;
				break;
			case 119:
				keyCode1 = 87;
				break;
			case 120:
				keyCode1 = 88;
				break;
			case 121:
				keyCode1 = 89;
				break;
			case 122:
				keyCode1 = 90;
				break;
			case 127:
				keyCode1 = 46;
				break;
			case 1073741881:
				keyCode1 = 20;
				break;
			case 1073741882:
				keyCode1 = 112;
				break;
			case 1073741883:
				keyCode1 = 113;
				break;
			case 1073741884:
				keyCode1 = 114;
				break;
			case 1073741885:
				keyCode1 = 115;
				break;
			case 1073741886:
				keyCode1 = 116;
				break;
			case 1073741887:
				keyCode1 = 117;
				break;
			case 1073741888:
				keyCode1 = 118;
				break;
			case 1073741889:
				keyCode1 = 119;
				break;
			case 1073741890:
				keyCode1 = 120;
				break;
			case 1073741891:
				keyCode1 = 121;
				break;
			case 1073741892:
				keyCode1 = 122;
				break;
			case 1073741893:
				keyCode1 = 123;
				break;
			case 1073741894:
				keyCode1 = 301;
				break;
			case 1073741895:
				keyCode1 = 145;
				break;
			case 1073741896:
				keyCode1 = 19;
				break;
			case 1073741897:
				keyCode1 = 45;
				break;
			case 1073741898:
				keyCode1 = 36;
				break;
			case 1073741899:
				keyCode1 = 33;
				break;
			case 1073741901:
				keyCode1 = 35;
				break;
			case 1073741902:
				keyCode1 = 34;
				break;
			case 1073741903:
				keyCode1 = 39;
				break;
			case 1073741904:
				keyCode1 = 37;
				break;
			case 1073741905:
				keyCode1 = 40;
				break;
			case 1073741906:
				keyCode1 = 38;
				break;
			case 1073741907:
				keyCode1 = 144;
				break;
			case 1073741908:
				keyCode1 = 111;
				break;
			case 1073741909:
				keyCode1 = 106;
				break;
			case 1073741910:
				keyCode1 = 109;
				break;
			case 1073741911:
				keyCode1 = 107;
				break;
			case 1073741912:
				keyCode1 = 108;
				break;
			case 1073741913:
				keyCode1 = 97;
				break;
			case 1073741914:
				keyCode1 = 98;
				break;
			case 1073741915:
				keyCode1 = 99;
				break;
			case 1073741916:
				keyCode1 = 100;
				break;
			case 1073741917:
				keyCode1 = 101;
				break;
			case 1073741918:
				keyCode1 = 102;
				break;
			case 1073741919:
				keyCode1 = 103;
				break;
			case 1073741920:
				keyCode1 = 104;
				break;
			case 1073741921:
				keyCode1 = 105;
				break;
			case 1073741922:
				keyCode1 = 96;
				break;
			case 1073741923:
				keyCode1 = 110;
				break;
			case 1073741925:
				keyCode1 = 302;
				break;
			case 1073741928:
				keyCode1 = 124;
				break;
			case 1073741929:
				keyCode1 = 125;
				break;
			case 1073741930:
				keyCode1 = 126;
				break;
			case 1073741982:
				keyCode1 = 13;
				break;
			case 1073742044:
				keyCode1 = 110;
				break;
			case 1073742048:
				keyCode1 = 17;
				break;
			case 1073742049:
				keyCode1 = 16;
				break;
			case 1073742050:
				keyCode1 = 18;
				break;
			case 1073742051:
				keyCode1 = 15;
				break;
			case 1073742052:
				keyCode1 = 17;
				break;
			case 1073742053:
				keyCode1 = 16;
				break;
			case 1073742054:
				keyCode1 = 18;
				break;
			case 1073742055:
				keyCode1 = 15;
				break;
			default:
				keyCode1 = keyCode;
			}
			var charCode = openfl_ui_Keyboard.__getCharCode(keyCode1,lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier));
			var event = new openfl_events_KeyboardEvent(type,true,false,charCode,keyCode1,keyLocation,this.__macKeyboard?lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier):lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier));
			stack.reverse();
			this.__fireEvent(event,stack);
			if(event.__isCanceled) {
				if(type == openfl_events_KeyboardEvent.KEY_DOWN) this.window.onKeyDown.cancel(); else this.window.onKeyUp.cancel();
			}
		}
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) return;
		this.__mouseX = x;
		this.__mouseY = y;
		var stack = [];
		var target = null;
		var targetPoint = new openfl_geom_Point(x,y);
		if(this.__hitTest(x,y,true,stack,true,this)) target = stack[stack.length - 1]; else {
			target = this;
			stack = [this];
		}
		if(target == null) target = this;
		if(type == openfl_events_MouseEvent.MOUSE_DOWN) {
			if(target.get_tabEnabled()) this.set_focus(target); else this.set_focus(null);
		}
		this.__fireEvent(openfl_events_MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
		var clickType;
		switch(type) {
		case "mouseUp":
			clickType = openfl_events_MouseEvent.CLICK;
			break;
		case "middleMouseUp":
			clickType = openfl_events_MouseEvent.MIDDLE_CLICK;
			break;
		case "rightMouseUp":
			clickType = openfl_events_MouseEvent.RIGHT_CLICK;
			break;
		default:
			clickType = null;
		}
		if(clickType != null) {
			this.__fireEvent(openfl_events_MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
			if(type == openfl_events_MouseEvent.MOUSE_UP && (js_Boot.__cast(target , openfl_display_InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.__fireEvent(openfl_events_MouseEvent.__create(openfl_events_MouseEvent.DOUBLE_CLICK,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
					this.__lastClickTime = 0;
				} else this.__lastClickTime = currentTime;
			}
		}
		var cursor = null;
		var _g = 0;
		while(_g < stack.length) {
			var target1 = stack[_g];
			++_g;
			cursor = target1.__getCursor();
			if(cursor != null) {
				lime_ui_Mouse.set_cursor(cursor);
				break;
			}
		}
		if(cursor == null) lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
		var _g1 = 0;
		var _g11 = this.__mouseOutStack;
		while(_g1 < _g11.length) {
			var target2 = _g11[_g1];
			++_g1;
			if(HxOverrides.indexOf(stack,target2,0) == -1) {
				HxOverrides.remove(this.__mouseOutStack,target2);
				var localPoint = target2.globalToLocal(targetPoint);
				target2.__dispatchEvent(new openfl_events_MouseEvent(openfl_events_MouseEvent.MOUSE_OUT,false,false,localPoint.x,localPoint.y,target2));
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target3 = stack[_g2];
			++_g2;
			if(HxOverrides.indexOf(this.__mouseOutStack,target3,0) == -1) {
				if(target3.hasEventListener(openfl_events_MouseEvent.MOUSE_OVER)) {
					var localPoint1 = target3.globalToLocal(targetPoint);
					target3.__dispatchEvent(new openfl_events_MouseEvent(openfl_events_MouseEvent.MOUSE_OVER,false,false,localPoint1.x,localPoint1.y,target3));
				}
				if(target3.hasEventListener(openfl_events_MouseEvent.MOUSE_OUT)) this.__mouseOutStack.push(target3);
			}
		}
		if(this.__dragObject != null) this.__drag(targetPoint);
	}
	,__onMouseWheel: function(deltaX,deltaY) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		if(!this.__hitTest(x,y,false,stack,true,this)) stack = [this];
		var target = stack[stack.length - 1];
		var targetPoint = new openfl_geom_Point(x,y);
		var delta = deltaY | 0;
		this.__fireEvent(openfl_events_MouseEvent.__create(openfl_events_MouseEvent.MOUSE_WHEEL,0,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target,delta),stack);
	}
	,__onTouch: function(type,touch) {
		var point = new openfl_geom_Point(touch.x * this.stageWidth,touch.y * this.stageHeight);
		this.__mouseX = point.x;
		this.__mouseY = point.y;
		var __stack = [];
		if(this.__hitTest(this.__mouseX,this.__mouseY,false,__stack,true,this)) {
			var target = __stack[__stack.length - 1];
			if(target == null) target = this;
			var localPoint = target.globalToLocal(point);
			var touchEvent = openfl_events_TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,localPoint,target);
			touchEvent.touchPointID = touch.id;
			touchEvent.isPrimaryTouchPoint = true;
			this.__fireEvent(touchEvent,__stack);
		} else {
			var touchEvent1 = openfl_events_TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,point,this);
			touchEvent1.touchPointID = touch.id;
			touchEvent1.isPrimaryTouchPoint = true;
			this.__fireEvent(touchEvent1,[this.stage]);
		}
	}
	,__resize: function() {
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		if(bounds == null) this.__dragBounds = null; else this.__dragBounds = bounds.clone();
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = -this.__dragObject.get_width() / 2;
				this.__dragOffsetY = -this.__dragObject.get_height() / 2;
			} else {
				var mouse = new openfl_geom_Point(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) mouse = parent.globalToLocal(mouse);
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__update: function(transformOnly,updateChildren,maskGrahpics) {
		if(transformOnly) {
			if(openfl_display_DisplayObject.__worldTransformDirty > 0) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren,maskGrahpics);
				if(updateChildren) {
					openfl_display_DisplayObject.__worldTransformDirty = 0;
					this.__dirty = true;
				}
			}
		} else if(openfl_display_DisplayObject.__worldTransformDirty > 0 || this.__dirty || openfl_display_DisplayObject.__worldRenderDirty > 0) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGrahpics);
			if(updateChildren) {
				openfl_display_DisplayObject.__worldTransformDirty = 0;
				openfl_display_DisplayObject.__worldRenderDirty = 0;
				this.__dirty = false;
			}
		}
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,canvas_onContextLost: function(event) {
	}
	,canvas_onContextRestored: function(event) {
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		var r = (value & 16711680) >>> 16;
		var g = (value & 65280) >>> 8;
		var b = value & 255;
		this.__colorSplit = [r / 255,g / 255,b / 255];
		this.__colorString = "#" + StringTools.hex(value,6);
		return this.__color = value;
	}
	,get_displayState: function() {
		return this.__displayState;
	}
	,set_displayState: function(value) {
		if(this.window != null) switch(value[1]) {
		case 0:
			if(this.window.__fullscreen) {
				this.window.set_fullscreen(false);
				this.dispatchEvent(new openfl_events_FullScreenEvent(openfl_events_FullScreenEvent.FULL_SCREEN,false,false,false,true));
			}
			break;
		default:
			if(!this.window.__fullscreen) {
				this.window.set_fullscreen(true);
				this.dispatchEvent(new openfl_events_FullScreenEvent(openfl_events_FullScreenEvent.FULL_SCREEN,false,false,true,true));
			}
		}
		return this.__displayState = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			var oldFocus = this.__focus;
			this.__focus = value;
			if(oldFocus != null) {
				var event = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_OUT,true,false,this.__focus,false,0);
				this.__stack = [];
				oldFocus.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event,this.__stack);
			}
			if(this.__focus != null) {
				var event1 = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_IN,true,false,oldFocus,false,0);
				this.__stack = [];
				value.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event1,this.__stack);
			}
		}
		return this.__focus;
	}
	,get_frameRate: function() {
		if(this.application != null) return this.application.backend.getFrameRate();
		return 0;
	}
	,set_frameRate: function(value) {
		if(this.application != null) return this.application.backend.setFrameRate(value);
		return value;
	}
	,__class__: openfl_display_Stage
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",get_displayState:"get_displayState",set_color:"set_color",get_color:"get_color"})
});
var openfl_display_Stage3D = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	context3D: null
	,visible: null
	,x: null
	,y: null
	,requestContext3D: function(context3DRenderMode) {
		if(context3DRenderMode == null) context3DRenderMode = "";
		var _g = this;
		if(openfl_display_OpenGLView.get_isSupported()) haxe_Timer.delay(function() {
			_g.context3D = new openfl_display3D_Context3D();
			_g.dispatchEvent(new openfl_events_Event(openfl_events_Event.CONTEXT3D_CREATE));
		},1); else haxe_Timer.delay(function() {
			_g.dispatchEvent(new openfl_events_ErrorEvent(openfl_events_ErrorEvent.ERROR));
		},1);
	}
	,__class__: openfl_display_Stage3D
});
var openfl_display_StageAlign = $hxClasses["openfl.display.StageAlign"] = { __ename__ : ["openfl","display","StageAlign"], __constructs__ : ["TOP_RIGHT","TOP_LEFT","TOP","RIGHT","LEFT","BOTTOM_RIGHT","BOTTOM_LEFT","BOTTOM"] };
openfl_display_StageAlign.TOP_RIGHT = ["TOP_RIGHT",0];
openfl_display_StageAlign.TOP_RIGHT.toString = $estr;
openfl_display_StageAlign.TOP_RIGHT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.TOP_LEFT = ["TOP_LEFT",1];
openfl_display_StageAlign.TOP_LEFT.toString = $estr;
openfl_display_StageAlign.TOP_LEFT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.TOP = ["TOP",2];
openfl_display_StageAlign.TOP.toString = $estr;
openfl_display_StageAlign.TOP.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.RIGHT = ["RIGHT",3];
openfl_display_StageAlign.RIGHT.toString = $estr;
openfl_display_StageAlign.RIGHT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.LEFT = ["LEFT",4];
openfl_display_StageAlign.LEFT.toString = $estr;
openfl_display_StageAlign.LEFT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.BOTTOM_RIGHT = ["BOTTOM_RIGHT",5];
openfl_display_StageAlign.BOTTOM_RIGHT.toString = $estr;
openfl_display_StageAlign.BOTTOM_RIGHT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.BOTTOM_LEFT = ["BOTTOM_LEFT",6];
openfl_display_StageAlign.BOTTOM_LEFT.toString = $estr;
openfl_display_StageAlign.BOTTOM_LEFT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.BOTTOM = ["BOTTOM",7];
openfl_display_StageAlign.BOTTOM.toString = $estr;
openfl_display_StageAlign.BOTTOM.__enum__ = openfl_display_StageAlign;
var openfl_display_StageDisplayState = $hxClasses["openfl.display.StageDisplayState"] = { __ename__ : ["openfl","display","StageDisplayState"], __constructs__ : ["NORMAL","FULL_SCREEN","FULL_SCREEN_INTERACTIVE"] };
openfl_display_StageDisplayState.NORMAL = ["NORMAL",0];
openfl_display_StageDisplayState.NORMAL.toString = $estr;
openfl_display_StageDisplayState.NORMAL.__enum__ = openfl_display_StageDisplayState;
openfl_display_StageDisplayState.FULL_SCREEN = ["FULL_SCREEN",1];
openfl_display_StageDisplayState.FULL_SCREEN.toString = $estr;
openfl_display_StageDisplayState.FULL_SCREEN.__enum__ = openfl_display_StageDisplayState;
openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE = ["FULL_SCREEN_INTERACTIVE",2];
openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE.toString = $estr;
openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE.__enum__ = openfl_display_StageDisplayState;
var openfl_display_StageQuality = $hxClasses["openfl.display.StageQuality"] = { __ename__ : ["openfl","display","StageQuality"], __constructs__ : ["BEST","HIGH","MEDIUM","LOW"] };
openfl_display_StageQuality.BEST = ["BEST",0];
openfl_display_StageQuality.BEST.toString = $estr;
openfl_display_StageQuality.BEST.__enum__ = openfl_display_StageQuality;
openfl_display_StageQuality.HIGH = ["HIGH",1];
openfl_display_StageQuality.HIGH.toString = $estr;
openfl_display_StageQuality.HIGH.__enum__ = openfl_display_StageQuality;
openfl_display_StageQuality.MEDIUM = ["MEDIUM",2];
openfl_display_StageQuality.MEDIUM.toString = $estr;
openfl_display_StageQuality.MEDIUM.__enum__ = openfl_display_StageQuality;
openfl_display_StageQuality.LOW = ["LOW",3];
openfl_display_StageQuality.LOW.toString = $estr;
openfl_display_StageQuality.LOW.__enum__ = openfl_display_StageQuality;
var openfl_display_StageScaleMode = $hxClasses["openfl.display.StageScaleMode"] = { __ename__ : ["openfl","display","StageScaleMode"], __constructs__ : ["SHOW_ALL","NO_SCALE","NO_BORDER","EXACT_FIT"] };
openfl_display_StageScaleMode.SHOW_ALL = ["SHOW_ALL",0];
openfl_display_StageScaleMode.SHOW_ALL.toString = $estr;
openfl_display_StageScaleMode.SHOW_ALL.__enum__ = openfl_display_StageScaleMode;
openfl_display_StageScaleMode.NO_SCALE = ["NO_SCALE",1];
openfl_display_StageScaleMode.NO_SCALE.toString = $estr;
openfl_display_StageScaleMode.NO_SCALE.__enum__ = openfl_display_StageScaleMode;
openfl_display_StageScaleMode.NO_BORDER = ["NO_BORDER",2];
openfl_display_StageScaleMode.NO_BORDER.toString = $estr;
openfl_display_StageScaleMode.NO_BORDER.__enum__ = openfl_display_StageScaleMode;
openfl_display_StageScaleMode.EXACT_FIT = ["EXACT_FIT",3];
openfl_display_StageScaleMode.EXACT_FIT.toString = $estr;
openfl_display_StageScaleMode.EXACT_FIT.__enum__ = openfl_display_StageScaleMode;
var openfl_display_TriangleCulling = $hxClasses["openfl.display.TriangleCulling"] = { __ename__ : ["openfl","display","TriangleCulling"], __constructs__ : ["NEGATIVE","NONE","POSITIVE"] };
openfl_display_TriangleCulling.NEGATIVE = ["NEGATIVE",0];
openfl_display_TriangleCulling.NEGATIVE.toString = $estr;
openfl_display_TriangleCulling.NEGATIVE.__enum__ = openfl_display_TriangleCulling;
openfl_display_TriangleCulling.NONE = ["NONE",1];
openfl_display_TriangleCulling.NONE.toString = $estr;
openfl_display_TriangleCulling.NONE.__enum__ = openfl_display_TriangleCulling;
openfl_display_TriangleCulling.POSITIVE = ["POSITIVE",2];
openfl_display_TriangleCulling.POSITIVE.toString = $estr;
openfl_display_TriangleCulling.POSITIVE.__enum__ = openfl_display_TriangleCulling;
var openfl_display_Window = function(config) {
	lime_ui_Window.call(this,config);
};
$hxClasses["openfl.display.Window"] = openfl_display_Window;
openfl_display_Window.__name__ = ["openfl","display","Window"];
openfl_display_Window.__super__ = lime_ui_Window;
openfl_display_Window.prototype = $extend(lime_ui_Window.prototype,{
	create: function(application) {
		lime_ui_Window.prototype.create.call(this,application);
		this.stage = new openfl_display_Stage(this,Object.prototype.hasOwnProperty.call(this.config,"background")?this.config.background:16777215);
		application.addModule(this.stage);
	}
	,__class__: openfl_display_Window
});
var openfl_display3D_Context3D = function() {
	this.disposed = false;
	this.stencilCompareMode = 519;
	this.stencilRef = 0;
	this.stencilReadMask = 255;
	this._yFlip = 1;
	this.vertexBuffersCreated = [];
	this.indexBuffersCreated = [];
	this.programsCreated = [];
	this.texturesCreated = [];
	this.samplerParameters = [];
	var _g1 = 0;
	var _g = openfl_display3D_Context3D.MAX_SAMPLERS;
	while(_g1 < _g) {
		var i = _g1++;
		this.samplerParameters[i] = new openfl_display3D__$Context3D_SamplerState();
		this.samplerParameters[i].wrap = openfl_display3D_Context3DWrapMode.CLAMP;
		this.samplerParameters[i].filter = openfl_display3D_Context3DTextureFilter.LINEAR;
		this.samplerParameters[i].mipfilter = openfl_display3D_Context3DMipFilter.MIPNONE;
	}
	var stage = openfl_Lib.current.stage;
	this.ogl = new openfl_display_OpenGLView();
	this.ogl.set_scrollRect(new openfl_geom_Rectangle(0,0,stage.stageWidth,stage.stageHeight));
	this.scrollRect = this.ogl.get_scrollRect().clone();
	this.ogl.set_width(stage.stageWidth);
	this.ogl.set_height(stage.stageHeight);
	stage.addChildAt(this.ogl,0);
};
$hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
openfl_display3D_Context3D.__name__ = ["openfl","display3D","Context3D"];
openfl_display3D_Context3D.prototype = {
	driverInfo: null
	,enableErrorChecking: null
	,blendDestinationFactor: null
	,blendEnabled: null
	,blendSourceFactor: null
	,currentProgram: null
	,disposed: null
	,drawing: null
	,framebuffer: null
	,indexBuffersCreated: null
	,ogl: null
	,programsCreated: null
	,renderbuffer: null
	,samplerParameters: null
	,scrollRect: null
	,stencilbuffer: null
	,stencilCompareMode: null
	,stencilRef: null
	,stencilReadMask: null
	,texturesCreated: null
	,vertexBuffersCreated: null
	,_yFlip: null
	,clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) mask = 17664;
		if(stencil == null) stencil = 0;
		if(depth == null) depth = 1;
		if(alpha == null) alpha = 1;
		if(blue == null) blue = 0;
		if(green == null) green = 0;
		if(red == null) red = 0;
		if(!this.drawing) {
			this.__updateBlendStatus();
			this.drawing = true;
		}
		lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
		lime_graphics_opengl_GL.context.clearDepth(depth);
		lime_graphics_opengl_GL.context.clearStencil(stencil);
		lime_graphics_opengl_GL.context.clear(mask);
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil) {
		if(enableDepthAndStencil == null) enableDepthAndStencil = true;
		if(enableDepthAndStencil) {
			lime_graphics_opengl_GL.context.enable(2929);
			lime_graphics_opengl_GL.context.enable(2960);
		}
		this.ogl.set_scrollRect(new openfl_geom_Rectangle(0,0,width,height));
		this.ogl.set_width(width);
		this.ogl.set_height(height);
		this.scrollRect = this.ogl.get_scrollRect().clone();
		lime_graphics_opengl_GL.context.viewport(this.scrollRect.x | 0,this.scrollRect.y | 0,this.scrollRect.width | 0,this.scrollRect.height | 0);
	}
	,createCubeTexture: function(size,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		var texture = new openfl_display3D_textures_CubeTexture(this,lime_graphics_opengl_GL.context.createTexture(),size);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createIndexBuffer: function(numIndices,bufferUsage) {
		if(bufferUsage == null) bufferUsage = openfl_display3D_Context3DBufferUsage.STATIC_DRAW;
		var indexBuffer = new openfl_display3D_IndexBuffer3D(this,lime_graphics_opengl_GL.context.createBuffer(),numIndices,bufferUsage == openfl_display3D_Context3DBufferUsage.STATIC_DRAW?35044:35048);
		this.indexBuffersCreated.push(indexBuffer);
		return indexBuffer;
	}
	,createProgram: function() {
		var program = new openfl_display3D_Program3D(this,lime_graphics_opengl_GL.context.createProgram());
		this.programsCreated.push(program);
		return program;
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		var texture = new openfl_display3D_textures_RectangleTexture(this,lime_graphics_opengl_GL.context.createTexture(),optimizeForRenderToTexture,width,height);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createTexture: function(width,height,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		var texture = new openfl_display3D_textures_Texture(this,lime_graphics_opengl_GL.context.createTexture(),optimizeForRenderToTexture,width,height);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createVertexBuffer: function(numVertices,data32PerVertex,bufferUsage) {
		if(bufferUsage == null) bufferUsage = openfl_display3D_Context3DBufferUsage.STATIC_DRAW;
		var vertexBuffer = new openfl_display3D_VertexBuffer3D(this,lime_graphics_opengl_GL.context.createBuffer(),numVertices,data32PerVertex,bufferUsage == openfl_display3D_Context3DBufferUsage.STATIC_DRAW?35044:35048);
		this.vertexBuffersCreated.push(vertexBuffer);
		return vertexBuffer;
	}
	,__deleteTexture: function(texture) {
		if(texture.glTexture == null) return;
		HxOverrides.remove(this.texturesCreated,texture);
		lime_graphics_opengl_GL.context.deleteTexture(texture.glTexture);
		texture.glTexture = null;
	}
	,__deleteVertexBuffer: function(buffer) {
		if(buffer.glBuffer == null) return;
		HxOverrides.remove(this.vertexBuffersCreated,buffer);
		lime_graphics_opengl_GL.context.deleteBuffer(buffer.glBuffer);
		buffer.glBuffer = null;
	}
	,__deleteIndexBuffer: function(buffer) {
		if(buffer.glBuffer == null) return;
		HxOverrides.remove(this.indexBuffersCreated,buffer);
		lime_graphics_opengl_GL.context.deleteBuffer(buffer.glBuffer);
		buffer.glBuffer = null;
	}
	,__deleteProgram: function(program) {
		if(program.glProgram == null) return;
		HxOverrides.remove(this.programsCreated,program);
		lime_graphics_opengl_GL.context.deleteProgram(program.glProgram);
		program.glProgram = null;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.vertexBuffersCreated;
		while(_g < _g1.length) {
			var vertexBuffer = _g1[_g];
			++_g;
			vertexBuffer.dispose();
		}
		this.vertexBuffersCreated = null;
		var _g2 = 0;
		var _g11 = this.indexBuffersCreated;
		while(_g2 < _g11.length) {
			var indexBuffer = _g11[_g2];
			++_g2;
			indexBuffer.dispose();
		}
		this.indexBuffersCreated = null;
		var _g3 = 0;
		var _g12 = this.programsCreated;
		while(_g3 < _g12.length) {
			var program = _g12[_g3];
			++_g3;
			program.dispose();
		}
		this.programsCreated = null;
		this.samplerParameters = null;
		var _g4 = 0;
		var _g13 = this.texturesCreated;
		while(_g4 < _g13.length) {
			var texture = _g13[_g4];
			++_g4;
			texture.dispose();
		}
		this.texturesCreated = null;
		if(this.framebuffer != null) {
			lime_graphics_opengl_GL.context.deleteFramebuffer(this.framebuffer);
			this.framebuffer = null;
		}
		if(this.renderbuffer != null) {
			lime_graphics_opengl_GL.context.deleteRenderbuffer(this.renderbuffer);
			this.renderbuffer = null;
		}
		this.disposed = true;
	}
	,drawToBitmapData: function(destination) {
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) numTriangles = -1;
		if(firstIndex == null) firstIndex = 0;
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,"yflip");
		lime_graphics_opengl_GL.context.uniform1f(location,this._yFlip);
		if(!this.drawing) throw new js__$Boot_HaxeError(new openfl_errors_Error("Need to clear before drawing if the buffer has not been cleared since the last present() call."));
		var numIndices;
		if(numTriangles == -1) numIndices = indexBuffer.numIndices; else numIndices = numTriangles * 3;
		var byteOffset = firstIndex * 2;
		lime_graphics_opengl_GL.context.bindBuffer(34963,indexBuffer.glBuffer);
		lime_graphics_opengl_GL.context.drawElements(4,numIndices,5123,byteOffset);
	}
	,present: function() {
		this.drawing = false;
		lime_graphics_opengl_GL.context.useProgram(null);
		lime_graphics_opengl_GL.context.bindBuffer(34962,null);
		lime_graphics_opengl_GL.context.disable(2884);
		if(this.framebuffer != null) lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
		if(this.renderbuffer != null) lime_graphics_opengl_GL.context.bindRenderbuffer(36161,null);
	}
	,removeRenderMethod: function(func) {
		this.ogl.set_render(null);
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		this.blendEnabled = true;
		this.blendSourceFactor = sourceFactor;
		this.blendDestinationFactor = destinationFactor;
		this.__updateBlendStatus();
	}
	,setColorMask: function(red,green,blue,alpha) {
		lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
	}
	,setCulling: function(triangleFaceToCull) {
		if(triangleFaceToCull == 0) lime_graphics_opengl_GL.context.disable(2884); else {
			lime_graphics_opengl_GL.context.enable(2884);
			switch(triangleFaceToCull) {
			case 1029:
				lime_graphics_opengl_GL.context.cullFace(1029);
				break;
			case 1028:
				lime_graphics_opengl_GL.context.cullFace(1028);
				break;
			case 1032:
				lime_graphics_opengl_GL.context.cullFace(1032);
				break;
			default:
				throw new js__$Boot_HaxeError("Unknown Context3DTriangleFace type.");
			}
		}
		switch(triangleFaceToCull) {
		case 1029:
			this._yFlip = -1;
			break;
		case 1028:
			this._yFlip = 1;
			break;
		case 1032:
			this._yFlip = 1;
			break;
		case 0:
			this._yFlip = 1;
			break;
		default:
			throw new js__$Boot_HaxeError("Unknown culling mode " + triangleFaceToCull + ".");
		}
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		lime_graphics_opengl_GL.context.depthFunc(passCompareMode);
		lime_graphics_opengl_GL.context.depthMask(depthMask);
	}
	,setGLSLProgramConstantsFromByteArray: function(locationName,data,byteArrayOffset) {
		if(byteArrayOffset == null) byteArrayOffset = 0;
		data.position = byteArrayOffset;
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime_graphics_opengl_GL.uniform4f(location,data.readFloat(),data.readFloat(),data.readFloat(),data.readFloat());
	}
	,setGLSLProgramConstantsFromMatrix: function(locationName,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime_graphics_opengl_GL.uniformMatrix4fv(location,!transposedMatrix,(function($this) {
			var $r;
			var array;
			{
				var this2 = matrix.rawData;
				var value = [];
				var _g1 = 0;
				var _g = this2.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value.push(this2.data[i]);
				}
				array = value;
			}
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
	}
	,setGLSLProgramConstantsFromVector4: function(locationName,data,startIndex) {
		if(startIndex == null) startIndex = 0;
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime_graphics_opengl_GL.context.uniform4f(location,data[startIndex],data[startIndex + 1],data[startIndex + 2],data[startIndex + 3]);
	}
	,setGLSLTextureAt: function(locationName,texture,textureIndex) {
		switch(textureIndex) {
		case 0:
			lime_graphics_opengl_GL.context.activeTexture(33984);
			break;
		case 1:
			lime_graphics_opengl_GL.context.activeTexture(33985);
			break;
		case 2:
			lime_graphics_opengl_GL.context.activeTexture(33986);
			break;
		case 3:
			lime_graphics_opengl_GL.context.activeTexture(33987);
			break;
		case 4:
			lime_graphics_opengl_GL.context.activeTexture(33988);
			break;
		case 5:
			lime_graphics_opengl_GL.context.activeTexture(33989);
			break;
		case 6:
			lime_graphics_opengl_GL.context.activeTexture(33990);
			break;
		case 7:
			lime_graphics_opengl_GL.context.activeTexture(33991);
			break;
		default:
			throw new js__$Boot_HaxeError("Does not support texture8 or more");
		}
		if(texture == null) {
			lime_graphics_opengl_GL.context.bindTexture(3553,null);
			lime_graphics_opengl_GL.context.bindTexture(34067,null);
			return;
		}
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		if(js_Boot.__instanceof(texture,openfl_display3D_textures_Texture)) {
			lime_graphics_opengl_GL.bindTexture(3553,(js_Boot.__cast(texture , openfl_display3D_textures_Texture)).glTexture);
			lime_graphics_opengl_GL.context.uniform1i(location,textureIndex);
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_RectangleTexture)) {
			lime_graphics_opengl_GL.bindTexture(3553,(js_Boot.__cast(texture , openfl_display3D_textures_RectangleTexture)).glTexture);
			lime_graphics_opengl_GL.context.uniform1i(location,textureIndex);
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_CubeTexture)) {
			lime_graphics_opengl_GL.bindTexture(34067,(js_Boot.__cast(texture , openfl_display3D_textures_CubeTexture)).glTexture);
			lime_graphics_opengl_GL.context.uniform1i(location,textureIndex);
		} else throw new js__$Boot_HaxeError("Texture of type " + Type.getClassName(texture == null?null:js_Boot.getClass(texture)) + " not supported yet");
		var parameters = this.samplerParameters[textureIndex];
		if(parameters != null) this.setTextureParameters(texture,parameters.wrap,parameters.filter,parameters.mipfilter); else this.setTextureParameters(texture,openfl_display3D_Context3DWrapMode.CLAMP,openfl_display3D_Context3DTextureFilter.NEAREST,openfl_display3D_Context3DMipFilter.MIPNONE);
	}
	,setGLSLVertexBufferAt: function(locationName,buffer,bufferOffset,format) {
		if(bufferOffset == null) bufferOffset = 0;
		var location;
		if(this.currentProgram != null && this.currentProgram.glProgram != null) location = lime_graphics_opengl_GL.context.getAttribLocation(this.currentProgram.glProgram,locationName); else location = -1;
		if(buffer == null) {
			if(location > -1) lime_graphics_opengl_GL.context.disableVertexAttribArray(location);
			return;
		}
		lime_graphics_opengl_GL.context.bindBuffer(34962,buffer.glBuffer);
		var dimension = 4;
		var type = 5126;
		var numBytes = 4;
		if(format == openfl_display3D_Context3DVertexBufferFormat.BYTES_4) {
			dimension = 4;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_1) {
			dimension = 1;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_2) {
			dimension = 2;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_3) {
			dimension = 3;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_4) {
			dimension = 4;
			type = 5126;
			numBytes = 4;
		} else throw new js__$Boot_HaxeError("Buffer format " + Std.string(format) + " is not supported");
		lime_graphics_opengl_GL.context.enableVertexAttribArray(location);
		lime_graphics_opengl_GL.context.vertexAttribPointer(location,dimension,type,false,buffer.data32PerVertex * numBytes,bufferOffset * numBytes);
	}
	,setProgram: function(program3D) {
		var glProgram = null;
		if(program3D != null) glProgram = program3D.glProgram;
		lime_graphics_opengl_GL.context.useProgram(glProgram);
		this.currentProgram = program3D;
	}
	,setProgramConstantsFromByteArray: function(programType,firstRegister,numRegisters,data,byteArrayOffset) {
		data.position = byteArrayOffset;
		var _g = 0;
		while(_g < numRegisters) {
			var i = _g++;
			var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + i);
			this.setGLSLProgramConstantsFromByteArray(locationName,data);
		}
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var d = matrix.rawData;
		if(transposedMatrix) {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[4],d.data[8],d.data[12]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[1],d.data[5],d.data[9],d.data[13]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[2],d.data[6],d.data[10],d.data[14]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[3],d.data[7],d.data[11],d.data[15]],1);
		} else {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[1],d.data[2],d.data[3]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[4],d.data[5],d.data[6],d.data[7]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[8],d.data[9],d.data[10],d.data[11]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[12],d.data[13],d.data[14],d.data[15]],1);
		}
	}
	,setProgramConstantsFromVector: function(programType,firstRegister,data,numRegisters) {
		if(numRegisters == null) numRegisters = 1;
		var _g = 0;
		while(_g < numRegisters) {
			var i = _g++;
			var currentIndex = i * 4;
			var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + i);
			this.setGLSLProgramConstantsFromVector4(locationName,data,currentIndex);
		}
	}
	,setRenderMethod: function(func) {
		this.ogl.set_render(function(rect) {
			func(null);
		});
	}
	,setRenderToBackBuffer: function() {
		lime_graphics_opengl_GL.context.disable(2929);
		lime_graphics_opengl_GL.context.disable(2960);
		lime_graphics_opengl_GL.context.disable(3089);
		if(this.framebuffer != null) lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
		if(this.renderbuffer != null) lime_graphics_opengl_GL.context.bindRenderbuffer(36161,null);
		lime_graphics_opengl_GL.context.viewport(this.scrollRect.x | 0,this.scrollRect.y | 0,this.scrollRect.width | 0,this.scrollRect.height | 0);
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		if(antiAlias == null) antiAlias = 0;
		if(enableDepthAndStencil == null) enableDepthAndStencil = false;
		if(this.framebuffer == null) this.framebuffer = lime_graphics_opengl_GL.context.createFramebuffer();
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,this.framebuffer);
		if(this.renderbuffer == null) this.renderbuffer = lime_graphics_opengl_GL.context.createRenderbuffer();
		lime_graphics_opengl_GL.context.bindRenderbuffer(36161,this.renderbuffer);
		lime_graphics_opengl_GL.context.renderbufferStorage(36161,6408,texture.width,texture.height);
		lime_graphics_opengl_GL.context.framebufferTexture2D(36160,36064,3553,texture.glTexture,0);
		lime_graphics_opengl_GL.context.renderbufferStorage(36161,34041,texture.width,texture.height);
		lime_graphics_opengl_GL.context.framebufferRenderbuffer(36160,33306,36161,this.renderbuffer);
		if(enableDepthAndStencil) {
			lime_graphics_opengl_GL.context.enable(2929);
			lime_graphics_opengl_GL.context.enable(2960);
		}
		lime_graphics_opengl_GL.context.bindTexture(3553,texture.glTexture);
		lime_graphics_opengl_GL.context.texImage2D(3553,0,6408,texture.width,texture.height,0,6408,5121,null);
		lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
		lime_graphics_opengl_GL.context.texParameteri(3553,10241,9985);
		lime_graphics_opengl_GL.context.viewport(0,0,texture.width,texture.height);
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		if(0 <= sampler && sampler < openfl_display3D_Context3D.MAX_SAMPLERS) {
			this.samplerParameters[sampler].wrap = wrap;
			this.samplerParameters[sampler].filter = filter;
			this.samplerParameters[sampler].mipfilter = mipfilter;
		} else throw new js__$Boot_HaxeError("Sampler is out of bounds.");
	}
	,setScissorRectangle: function(rectangle) {
		if(rectangle == null) {
			lime_graphics_opengl_GL.context.disable(3089);
			return;
		}
		lime_graphics_opengl_GL.context.enable(3089);
		lime_graphics_opengl_GL.context.scissor(rectangle.x | 0,rectangle.y | 0,rectangle.width | 0,rectangle.height | 0);
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		this.stencilCompareMode = compareMode;
		lime_graphics_opengl_GL.context.stencilOp(actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail);
		lime_graphics_opengl_GL.context.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) writeMask = 255;
		if(readMask == null) readMask = 255;
		this.stencilReadMask = readMask;
		this.stencilRef = referenceValue;
		lime_graphics_opengl_GL.context.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
		lime_graphics_opengl_GL.context.stencilMask(writeMask);
	}
	,setTextureAt: function(sampler,texture) {
		var locationName = "fs" + sampler;
		this.setGLSLTextureAt(locationName,texture,sampler);
	}
	,setTextureParameters: function(texture,wrap,filter,mipfilter) {
		if(!openfl_display3D_Context3D.anisotropySupportTested) {
			var ext = lime_graphics_opengl_GL.context.getExtension("EXT_texture_filter_anisotropic");
			if(ext == null || Reflect.field(ext,"MAX_TEXTURE_MAX_ANISOTROPY_EXT") == null) ext = lime_graphics_opengl_GL.context.getExtension("MOZ_EXT_texture_filter_anisotropic");
			if(ext == null || Reflect.field(ext,"MAX_TEXTURE_MAX_ANISOTROPY_EXT") == null) ext = lime_graphics_opengl_GL.context.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
			openfl_display3D_Context3D.supportsAnisotropy = ext != null;
			if(openfl_display3D_Context3D.supportsAnisotropy) {
				openfl_display3D_Context3D.maxSupportedAnisotropy = lime_graphics_opengl_GL.getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
				lime_graphics_opengl_GL.context.texParameteri(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,openfl_display3D_Context3D.maxSupportedAnisotropy);
			}
			openfl_display3D_Context3D.anisotropySupportTested = true;
		}
		if(js_Boot.__instanceof(texture,openfl_display3D_textures_Texture)) {
			switch(wrap[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
				lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(3553,10242,10497);
				lime_graphics_opengl_GL.context.texParameteri(3553,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 4:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(2,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):2);
				break;
			case 1:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(4,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):4);
				break;
			case 2:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(8,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):8);
				break;
			case 3:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(16,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):16);
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(3553,10241,9987);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(3553,10241,9984);
				break;
			case 2:
				lime_graphics_opengl_GL.context.texParameteri(3553,10241,filter == openfl_display3D_Context3DTextureFilter.NEAREST?9728:9729);
				break;
			}
			var tex = texture;
			if(mipfilter != openfl_display3D_Context3DMipFilter.MIPNONE && !tex.mipmapsGenerated) {
				lime_graphics_opengl_GL.context.generateMipmap(3553);
				tex.mipmapsGenerated = true;
			}
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_RectangleTexture)) {
			lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
			lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
			switch(filter[1]) {
			case 4:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(2,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):2);
				break;
			case 1:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(4,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):4);
				break;
			case 2:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(8,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):8);
				break;
			case 3:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(16,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):16);
				break;
			}
			lime_graphics_opengl_GL.context.texParameteri(3553,10241,filter == openfl_display3D_Context3DTextureFilter.NEAREST?9728:9729);
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_CubeTexture)) {
			switch(wrap[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(34067,10242,33071);
				lime_graphics_opengl_GL.context.texParameteri(34067,10243,33071);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(34067,10242,10497);
				lime_graphics_opengl_GL.context.texParameteri(34067,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 4:
				lime_graphics_opengl_GL.context.texParameteri(34067,10240,9729);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime_graphics_opengl_GL.context.texParameteri(34067,10240,9728);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(2,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):2);
				break;
			case 1:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(4,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):4);
				break;
			case 2:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(8,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):8);
				break;
			case 3:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(16,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):16);
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(34067,10241,9987);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(34067,10241,9984);
				break;
			case 2:
				lime_graphics_opengl_GL.context.texParameteri(34067,10241,filter == openfl_display3D_Context3DTextureFilter.NEAREST?9728:9729);
				break;
			}
			var cubetex = texture;
			if(mipfilter != openfl_display3D_Context3DMipFilter.MIPNONE && !cubetex.mipmapsGenerated) {
				lime_graphics_opengl_GL.context.generateMipmap(34067);
				cubetex.mipmapsGenerated = true;
			}
		} else throw new js__$Boot_HaxeError("Texture of type " + Type.getClassName(texture == null?null:js_Boot.getClass(texture)) + " not supported yet");
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(bufferOffset == null) bufferOffset = 0;
		var locationName = "va" + index;
		this.setGLSLVertexBufferAt(locationName,buffer,bufferOffset,format);
	}
	,__getUniformLocationNameFromAgalRegisterIndex: function(programType,firstRegister) {
		if(programType == openfl_display3D_Context3DProgramType.VERTEX) return "vc" + firstRegister; else if(programType == openfl_display3D_Context3DProgramType.FRAGMENT) return "fc" + firstRegister;
		throw new js__$Boot_HaxeError("Program Type " + Std.string(programType) + " not supported");
	}
	,__updateBlendStatus: function() {
		if(this.blendEnabled) {
			lime_graphics_opengl_GL.context.enable(3042);
			lime_graphics_opengl_GL.context.blendEquation(32774);
			lime_graphics_opengl_GL.context.blendFunc(this.blendSourceFactor,this.blendDestinationFactor);
		} else lime_graphics_opengl_GL.context.disable(3042);
	}
	,__class__: openfl_display3D_Context3D
};
var openfl_display3D__$Context3D_SamplerState = function() {
};
$hxClasses["openfl.display3D._Context3D.SamplerState"] = openfl_display3D__$Context3D_SamplerState;
openfl_display3D__$Context3D_SamplerState.__name__ = ["openfl","display3D","_Context3D","SamplerState"];
openfl_display3D__$Context3D_SamplerState.prototype = {
	wrap: null
	,filter: null
	,mipfilter: null
	,__class__: openfl_display3D__$Context3D_SamplerState
};
var openfl_display3D_Context3DBufferUsage = $hxClasses["openfl.display3D.Context3DBufferUsage"] = { __ename__ : ["openfl","display3D","Context3DBufferUsage"], __constructs__ : ["STATIC_DRAW","DYNAMIC_DRAW"] };
openfl_display3D_Context3DBufferUsage.STATIC_DRAW = ["STATIC_DRAW",0];
openfl_display3D_Context3DBufferUsage.STATIC_DRAW.toString = $estr;
openfl_display3D_Context3DBufferUsage.STATIC_DRAW.__enum__ = openfl_display3D_Context3DBufferUsage;
openfl_display3D_Context3DBufferUsage.DYNAMIC_DRAW = ["DYNAMIC_DRAW",1];
openfl_display3D_Context3DBufferUsage.DYNAMIC_DRAW.toString = $estr;
openfl_display3D_Context3DBufferUsage.DYNAMIC_DRAW.__enum__ = openfl_display3D_Context3DBufferUsage;
var openfl_display3D_Context3DClearMask = function() { };
$hxClasses["openfl.display3D.Context3DClearMask"] = openfl_display3D_Context3DClearMask;
openfl_display3D_Context3DClearMask.__name__ = ["openfl","display3D","Context3DClearMask"];
var openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_"] = openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DCompareMode","Context3DCompareMode_Impl_"];
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$._new = function(a) {
	return a;
};
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.fromInt = function(s) {
	return s;
};
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.toInt = function(this1) {
	return this1;
};
var openfl_display3D_Context3DMipFilter = $hxClasses["openfl.display3D.Context3DMipFilter"] = { __ename__ : ["openfl","display3D","Context3DMipFilter"], __constructs__ : ["MIPLINEAR","MIPNEAREST","MIPNONE"] };
openfl_display3D_Context3DMipFilter.MIPLINEAR = ["MIPLINEAR",0];
openfl_display3D_Context3DMipFilter.MIPLINEAR.toString = $estr;
openfl_display3D_Context3DMipFilter.MIPLINEAR.__enum__ = openfl_display3D_Context3DMipFilter;
openfl_display3D_Context3DMipFilter.MIPNEAREST = ["MIPNEAREST",1];
openfl_display3D_Context3DMipFilter.MIPNEAREST.toString = $estr;
openfl_display3D_Context3DMipFilter.MIPNEAREST.__enum__ = openfl_display3D_Context3DMipFilter;
openfl_display3D_Context3DMipFilter.MIPNONE = ["MIPNONE",2];
openfl_display3D_Context3DMipFilter.MIPNONE.toString = $estr;
openfl_display3D_Context3DMipFilter.MIPNONE.__enum__ = openfl_display3D_Context3DMipFilter;
var openfl_display3D_Context3DProgramType = $hxClasses["openfl.display3D.Context3DProgramType"] = { __ename__ : ["openfl","display3D","Context3DProgramType"], __constructs__ : ["VERTEX","FRAGMENT"] };
openfl_display3D_Context3DProgramType.VERTEX = ["VERTEX",0];
openfl_display3D_Context3DProgramType.VERTEX.toString = $estr;
openfl_display3D_Context3DProgramType.VERTEX.__enum__ = openfl_display3D_Context3DProgramType;
openfl_display3D_Context3DProgramType.FRAGMENT = ["FRAGMENT",1];
openfl_display3D_Context3DProgramType.FRAGMENT.toString = $estr;
openfl_display3D_Context3DProgramType.FRAGMENT.__enum__ = openfl_display3D_Context3DProgramType;
var openfl_display3D_Context3DTextureFilter = $hxClasses["openfl.display3D.Context3DTextureFilter"] = { __ename__ : ["openfl","display3D","Context3DTextureFilter"], __constructs__ : ["ANISOTROPIC2X","ANISOTROPIC4X","ANISOTROPIC8X","ANISOTROPIC16X","LINEAR","NEAREST"] };
openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X = ["ANISOTROPIC2X",0];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X = ["ANISOTROPIC4X",1];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X = ["ANISOTROPIC8X",2];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X = ["ANISOTROPIC16X",3];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.LINEAR = ["LINEAR",4];
openfl_display3D_Context3DTextureFilter.LINEAR.toString = $estr;
openfl_display3D_Context3DTextureFilter.LINEAR.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.NEAREST = ["NEAREST",5];
openfl_display3D_Context3DTextureFilter.NEAREST.toString = $estr;
openfl_display3D_Context3DTextureFilter.NEAREST.__enum__ = openfl_display3D_Context3DTextureFilter;
var openfl_display3D_Context3DTextureFormat = $hxClasses["openfl.display3D.Context3DTextureFormat"] = { __ename__ : ["openfl","display3D","Context3DTextureFormat"], __constructs__ : ["BGRA","COMPRESSED","COMPRESSED_ALPHA"] };
openfl_display3D_Context3DTextureFormat.BGRA = ["BGRA",0];
openfl_display3D_Context3DTextureFormat.BGRA.toString = $estr;
openfl_display3D_Context3DTextureFormat.BGRA.__enum__ = openfl_display3D_Context3DTextureFormat;
openfl_display3D_Context3DTextureFormat.COMPRESSED = ["COMPRESSED",1];
openfl_display3D_Context3DTextureFormat.COMPRESSED.toString = $estr;
openfl_display3D_Context3DTextureFormat.COMPRESSED.__enum__ = openfl_display3D_Context3DTextureFormat;
openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA = ["COMPRESSED_ALPHA",2];
openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA.toString = $estr;
openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA.__enum__ = openfl_display3D_Context3DTextureFormat;
var openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_"] = openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.__name__ = ["openfl","display3D","_Context3DTriangleFace","Context3DTriangleFace_Impl_"];
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$._new = function(a) {
	return a;
};
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.fromInt = function(s) {
	return s;
};
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.toInt = function(this1) {
	return this1;
};
var openfl_display3D_Context3DVertexBufferFormat = $hxClasses["openfl.display3D.Context3DVertexBufferFormat"] = { __ename__ : ["openfl","display3D","Context3DVertexBufferFormat"], __constructs__ : ["BYTES_4","FLOAT_1","FLOAT_2","FLOAT_3","FLOAT_4"] };
openfl_display3D_Context3DVertexBufferFormat.BYTES_4 = ["BYTES_4",0];
openfl_display3D_Context3DVertexBufferFormat.BYTES_4.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.BYTES_4.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_1 = ["FLOAT_1",1];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_1.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_1.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_2 = ["FLOAT_2",2];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_2.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_2.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_3 = ["FLOAT_3",3];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_3.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_3.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_4 = ["FLOAT_4",4];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_4.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_4.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
var openfl_display3D_Context3DWrapMode = $hxClasses["openfl.display3D.Context3DWrapMode"] = { __ename__ : ["openfl","display3D","Context3DWrapMode"], __constructs__ : ["CLAMP","REPEAT"] };
openfl_display3D_Context3DWrapMode.CLAMP = ["CLAMP",0];
openfl_display3D_Context3DWrapMode.CLAMP.toString = $estr;
openfl_display3D_Context3DWrapMode.CLAMP.__enum__ = openfl_display3D_Context3DWrapMode;
openfl_display3D_Context3DWrapMode.REPEAT = ["REPEAT",1];
openfl_display3D_Context3DWrapMode.REPEAT.toString = $estr;
openfl_display3D_Context3DWrapMode.REPEAT.__enum__ = openfl_display3D_Context3DWrapMode;
var openfl_display3D_IndexBuffer3D = function(context,glBuffer,numIndices,bufferUsage) {
	this.context = context;
	this.glBuffer = glBuffer;
	this.numIndices = numIndices;
	this.bufferUsage = bufferUsage;
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl_display3D_IndexBuffer3D;
openfl_display3D_IndexBuffer3D.__name__ = ["openfl","display3D","IndexBuffer3D"];
openfl_display3D_IndexBuffer3D.prototype = {
	context: null
	,glBuffer: null
	,numIndices: null
	,bufferUsage: null
	,dispose: function() {
		this.context.__deleteIndexBuffer(this);
	}
	,uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		var bytesPerIndex = 2;
		lime_graphics_opengl_GL.context.bindBuffer(34963,this.glBuffer);
		var length = count * bytesPerIndex;
		var offset = byteArrayOffset + startOffset * bytesPerIndex;
		var indices;
		var this1;
		if(length != null) this1 = new Int16Array(length); else this1 = null;
		indices = this1;
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			var val = byteArray.readUnsignedByte();
			indices[i] = val;
			i++;
		}
		lime_graphics_opengl_GL.context.bufferData(34963,indices,this.bufferUsage);
	}
	,uploadFromVector: function(data,startOffset,count) {
		lime_graphics_opengl_GL.context.bindBuffer(34963,this.glBuffer);
		var indices;
		var this1;
		if(count != null) this1 = new Int16Array(count); else this1 = null;
		indices = this1;
		var _g1 = startOffset;
		var _g = startOffset + count;
		while(_g1 < _g) {
			var i = _g1++;
			indices[i] = data.data[i];
		}
		lime_graphics_opengl_GL.context.bufferData(34963,indices,this.bufferUsage);
	}
	,uploadFromInt16Array: function(data) {
		lime_graphics_opengl_GL.context.bindBuffer(34963,this.glBuffer);
		lime_graphics_opengl_GL.context.bufferData(34963,data,this.bufferUsage);
	}
	,__class__: openfl_display3D_IndexBuffer3D
};
var openfl_display3D_Program3D = function(context,program) {
	this.context = context;
	this.glProgram = program;
};
$hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
openfl_display3D_Program3D.__name__ = ["openfl","display3D","Program3D"];
openfl_display3D_Program3D.prototype = {
	context: null
	,glProgram: null
	,dispose: function() {
		this.context.__deleteProgram(this);
	}
	,upload: function(vertexShader,fragmentShader) {
		lime_graphics_opengl_GL.context.attachShader(this.glProgram,vertexShader);
		lime_graphics_opengl_GL.context.attachShader(this.glProgram,fragmentShader);
		lime_graphics_opengl_GL.context.linkProgram(this.glProgram);
		if(lime_graphics_opengl_GL.context.getProgramParameter(this.glProgram,35714) == 0) {
			var result = lime_graphics_opengl_GL.context.getProgramInfoLog(this.glProgram);
			if(result != "") throw new js__$Boot_HaxeError(result);
		}
	}
	,__class__: openfl_display3D_Program3D
};
var openfl_display3D_VertexBuffer3D = function(context,glBuffer,numVertices,data32PerVertex,bufferUsage) {
	this.context = context;
	this.glBuffer = glBuffer;
	this.numVertices = numVertices;
	this.data32PerVertex = data32PerVertex;
	this.bufferUsage = bufferUsage;
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl_display3D_VertexBuffer3D;
openfl_display3D_VertexBuffer3D.__name__ = ["openfl","display3D","VertexBuffer3D"];
openfl_display3D_VertexBuffer3D.prototype = {
	context: null
	,data32PerVertex: null
	,glBuffer: null
	,numVertices: null
	,bufferUsage: null
	,dispose: function() {
		this.context.__deleteVertexBuffer(this);
	}
	,uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		var bytesPerVertex = this.data32PerVertex * 4;
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.glBuffer);
		var length = count * bytesPerVertex;
		var offset = byteArrayOffset + startOffset * bytesPerVertex;
		var float32Array;
		var this1;
		if(length != null) this1 = new Float32Array(length); else this1 = null;
		float32Array = this1;
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			var val = byteArray.readUnsignedByte();
			float32Array[i] = val;
			i++;
		}
		lime_graphics_opengl_GL.context.bufferData(34962,float32Array,this.bufferUsage);
	}
	,uploadFromFloat32Array: function(data) {
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.glBuffer);
		lime_graphics_opengl_GL.context.bufferData(34962,data,this.bufferUsage);
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		var bytesPerVertex = this.data32PerVertex * 4;
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.glBuffer);
		var length = numVertices * this.data32PerVertex;
		var offset = startVertex;
		var float32Array;
		var this1;
		if(length != null) this1 = new Float32Array(length); else this1 = null;
		float32Array = this1;
		var _g1 = startVertex;
		var _g = startVertex + length;
		while(_g1 < _g) {
			var i = _g1++;
			float32Array[i] = data.data[i];
		}
		lime_graphics_opengl_GL.context.bufferData(34962,float32Array,this.bufferUsage);
		float32Array = null;
	}
	,__class__: openfl_display3D_VertexBuffer3D
};
var openfl_display3D_textures_TextureBase = function(context,glTexture,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	openfl_events_EventDispatcher.call(this);
	this.context = context;
	this.width = width;
	this.height = height;
	this.glTexture = glTexture;
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_TextureBase.__name__ = ["openfl","display3D","textures","TextureBase"];
openfl_display3D_textures_TextureBase.__super__ = openfl_events_EventDispatcher;
openfl_display3D_textures_TextureBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	context: null
	,height: null
	,frameBuffer: null
	,glTexture: null
	,width: null
	,dispose: function() {
		this.context.__deleteTexture(this);
	}
	,__class__: openfl_display3D_textures_TextureBase
});
var openfl_display3D_textures_CubeTexture = function(context,glTexture,size) {
	openfl_display3D_textures_TextureBase.call(this,context,glTexture,size,size);
	this.size = size;
	this.mipmapsGenerated = false;
	this._textures = [];
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		this._textures[i] = lime_graphics_opengl_GL.context.createTexture();
	}
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl_display3D_textures_CubeTexture;
openfl_display3D_textures_CubeTexture.__name__ = ["openfl","display3D","textures","CubeTexture"];
openfl_display3D_textures_CubeTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_CubeTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	size: null
	,_textures: null
	,mipmapsGenerated: null
	,glTextureAt: function(index) {
		return this._textures[index];
	}
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
	}
	,uploadFromBitmapData: function(bitmapData,side,miplevel) {
		if(miplevel == null) miplevel = 0;
		var source = bitmapData.image.get_data();
		lime_graphics_opengl_GL.context.bindTexture(34067,this.glTexture);
		switch(side) {
		case 0:
			lime_graphics_opengl_GL.context.texImage2D(34069,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 1:
			lime_graphics_opengl_GL.context.texImage2D(34070,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 2:
			lime_graphics_opengl_GL.context.texImage2D(34071,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 3:
			lime_graphics_opengl_GL.context.texImage2D(34072,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 4:
			lime_graphics_opengl_GL.context.texImage2D(34073,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 5:
			lime_graphics_opengl_GL.context.texImage2D(34074,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		default:
			throw new js__$Boot_HaxeError("unknown side type");
		}
		lime_graphics_opengl_GL.context.bindTexture(34067,null);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,side,miplevel) {
		if(miplevel == null) miplevel = 0;
	}
	,__class__: openfl_display3D_textures_CubeTexture
});
var openfl_display3D_textures_RectangleTexture = function(context,glTexture,optimize,width,height) {
	this.optimizeForRenderToTexture = optimize;
	if(this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
	openfl_display3D_textures_TextureBase.call(this,context,glTexture,width,height);
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl_display3D_textures_RectangleTexture;
openfl_display3D_textures_RectangleTexture.__name__ = ["openfl","display3D","textures","RectangleTexture"];
openfl_display3D_textures_RectangleTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_RectangleTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	optimizeForRenderToTexture: null
	,uploadFromBitmapData: function(bitmapData,miplevel) {
		if(miplevel == null) miplevel = 0;
		var p = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer(bitmapData.image.get_data().buffer);
		this.width = bitmapData.width;
		this.height = bitmapData.height;
		this.uploadFromByteArray(p,0);
	}
	,uploadFromByteArray: function(data,byteArrayOffset) {
		lime_graphics_opengl_GL.context.bindTexture(3553,this.glTexture);
		if(this.optimizeForRenderToTexture) lime_graphics_opengl_GL.context.pixelStorei(37440,1);
		lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
		lime_graphics_opengl_GL.context.texParameteri(3553,10241,9728);
		lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
		lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
		var source;
		var elements = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data);
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		source = this1;
		data.position = byteArrayOffset;
		var i = 0;
		while(data.position < openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data)) {
			var val = data.readUnsignedByte();
			source[i] = val;
			i++;
		}
		lime_graphics_opengl_GL.context.texImage2D(3553,0,6408,this.width,this.height,0,6408,5121,source);
		lime_graphics_opengl_GL.context.bindTexture(3553,null);
	}
	,__class__: openfl_display3D_textures_RectangleTexture
});
var openfl_display3D_textures_Texture = function(context,glTexture,optimize,width,height) {
	this.optimizeForRenderToTexture = optimize;
	this.mipmapsGenerated = false;
	if(this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
	openfl_display3D_textures_TextureBase.call(this,context,glTexture,width,height);
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl_display3D_textures_Texture;
openfl_display3D_textures_Texture.__name__ = ["openfl","display3D","textures","Texture"];
openfl_display3D_textures_Texture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_Texture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	optimizeForRenderToTexture: null
	,mipmapsGenerated: null
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
	}
	,uploadFromBitmapData: function(bitmapData,miplevel) {
		if(miplevel == null) miplevel = 0;
		var image = bitmapData.image;
		if(!image.get_premultiplied() && image.get_transparent()) {
			image = image.clone();
			image.set_premultiplied(true);
		}
		this.width = image.width;
		this.height = image.height;
		this.uploadFromUInt8Array(image.get_data(),miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,miplevel) {
		if(miplevel == null) miplevel = 0;
		var source;
		var elements = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data);
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		source = this1;
		data.position = byteArrayOffset;
		var i = 0;
		while(data.position < openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data)) {
			var val = data.readUnsignedByte();
			source[i] = val;
			i++;
		}
		this.uploadFromUInt8Array(source,miplevel);
	}
	,uploadFromUInt8Array: function(data,miplevel) {
		if(miplevel == null) miplevel = 0;
		lime_graphics_opengl_GL.context.bindTexture(3553,this.glTexture);
		if(this.optimizeForRenderToTexture) {
			lime_graphics_opengl_GL.context.pixelStorei(37440,1);
			lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
			lime_graphics_opengl_GL.context.texParameteri(3553,10241,9728);
			lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
			lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
		}
		lime_graphics_opengl_GL.context.texImage2D(3553,miplevel,6408,this.width,this.height,0,6408,5121,data);
		lime_graphics_opengl_GL.context.bindTexture(3553,null);
	}
	,__class__: openfl_display3D_textures_Texture
});
var openfl_errors_Error = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "";
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
openfl_errors_Error.__name__ = ["openfl","errors","Error"];
openfl_errors_Error.prototype = {
	errorID: null
	,message: null
	,name: null
	,getStackTrace: function() {
		return haxe_CallStack.toString(haxe_CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) return this.message; else return "Error";
	}
	,__class__: openfl_errors_Error
};
var openfl_errors_ArgumentError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message);
	this.name = "ArgumentError";
};
$hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
openfl_errors_ArgumentError.__name__ = ["openfl","errors","ArgumentError"];
openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_ArgumentError
});
var openfl_errors_IOError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message);
	this.name = "IOError";
};
$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
openfl_errors_IOError.__name__ = ["openfl","errors","IOError"];
openfl_errors_IOError.__super__ = openfl_errors_Error;
openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IOError
});
var openfl_errors_EOFError = function() {
	openfl_errors_IOError.call(this,"End of file was encountered");
	this.name = "EOFError";
	this.errorID = 2030;
};
$hxClasses["openfl.errors.EOFError"] = openfl_errors_EOFError;
openfl_errors_EOFError.__name__ = ["openfl","errors","EOFError"];
openfl_errors_EOFError.__super__ = openfl_errors_IOError;
openfl_errors_EOFError.prototype = $extend(openfl_errors_IOError.prototype,{
	__class__: openfl_errors_EOFError
});
var openfl_errors_RangeError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message,0);
	this.name = "RangeError";
};
$hxClasses["openfl.errors.RangeError"] = openfl_errors_RangeError;
openfl_errors_RangeError.__name__ = ["openfl","errors","RangeError"];
openfl_errors_RangeError.__super__ = openfl_errors_Error;
openfl_errors_RangeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_RangeError
});
var openfl_errors_TypeError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message,0);
	this.name = "TypeError";
};
$hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
openfl_errors_TypeError.__name__ = ["openfl","errors","TypeError"];
openfl_errors_TypeError.__super__ = openfl_errors_Error;
openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_TypeError
});
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = openfl_events_EventPhase.AT_TARGET;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = ["openfl","events","Event"];
openfl_events_Event.prototype = {
	bubbles: null
	,cancelable: null
	,currentTarget: null
	,eventPhase: null
	,target: null
	,type: null
	,__isCanceled: null
	,__isCanceledNow: null
	,__preventDefault: null
	,clone: function() {
		var event = new openfl_events_Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,formatToString: function(className,p1,p2,p3,p4,p5) {
		var parameters = [];
		if(p1 != null) parameters.push(p1);
		if(p2 != null) parameters.push(p2);
		if(p3 != null) parameters.push(p3);
		if(p4 != null) parameters.push(p4);
		if(p5 != null) parameters.push(p5);
		return $bind(this,this.__formatToString).apply(this,[className,parameters]);
	}
	,isDefaultPrevented: function() {
		return this.__preventDefault;
	}
	,preventDefault: function() {
		if(this.cancelable) this.__preventDefault = true;
	}
	,stopImmediatePropagation: function() {
		this.__isCanceled = true;
		this.__isCanceledNow = true;
	}
	,stopPropagation: function() {
		this.__isCanceled = true;
	}
	,toString: function() {
		return this.__formatToString("Event",["type","bubbles","cancelable"]);
	}
	,__formatToString: function(className,parameters) {
		var output = "[" + className;
		var arg = null;
		var _g = 0;
		while(_g < parameters.length) {
			var param = parameters[_g];
			++_g;
			arg = Reflect.field(this,param);
			if(typeof(arg) == "string") output += " " + param + "=\"" + Std.string(arg) + "\""; else output += " " + param + "=" + Std.string(arg);
		}
		output += "]";
		return output;
	}
	,__class__: openfl_events_Event
};
var openfl_events_ActivityEvent = function(type,bubbles,cancelable,activating) {
	if(activating == null) activating = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.activating = activating;
};
$hxClasses["openfl.events.ActivityEvent"] = openfl_events_ActivityEvent;
openfl_events_ActivityEvent.__name__ = ["openfl","events","ActivityEvent"];
openfl_events_ActivityEvent.__super__ = openfl_events_Event;
openfl_events_ActivityEvent.prototype = $extend(openfl_events_Event.prototype,{
	activating: null
	,clone: function() {
		var event = new openfl_events_ActivityEvent(this.type,this.bubbles,this.cancelable,this.activating);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ActivityEvent",["type","bubbles","cancelable","activating"]);
	}
	,__class__: openfl_events_ActivityEvent
});
var openfl_events_TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	text: null
	,clone: function() {
		var event = new openfl_events_TextEvent(this.type,this.bubbles,this.cancelable,this.text);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TextEvent",["type","bubbles","cancelable","text"]);
	}
	,__class__: openfl_events_TextEvent
});
var openfl_events_ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	errorID: null
	,clone: function() {
		var event = new openfl_events_ErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_ErrorEvent
});
var openfl_events__$EventDispatcher_Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl_events__$EventDispatcher_Listener.prototype = {
	callback: null
	,priority: null
	,useCapture: null
	,match: function(callback,useCapture) {
		return Reflect.compareMethods(this.callback,callback) && this.useCapture == useCapture;
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_EventPhase = $hxClasses["openfl.events.EventPhase"] = { __ename__ : ["openfl","events","EventPhase"], __constructs__ : ["CAPTURING_PHASE","AT_TARGET","BUBBLING_PHASE"] };
openfl_events_EventPhase.CAPTURING_PHASE = ["CAPTURING_PHASE",0];
openfl_events_EventPhase.CAPTURING_PHASE.toString = $estr;
openfl_events_EventPhase.CAPTURING_PHASE.__enum__ = openfl_events_EventPhase;
openfl_events_EventPhase.AT_TARGET = ["AT_TARGET",1];
openfl_events_EventPhase.AT_TARGET.toString = $estr;
openfl_events_EventPhase.AT_TARGET.__enum__ = openfl_events_EventPhase;
openfl_events_EventPhase.BUBBLING_PHASE = ["BUBBLING_PHASE",2];
openfl_events_EventPhase.BUBBLING_PHASE.toString = $estr;
openfl_events_EventPhase.BUBBLING_PHASE.__enum__ = openfl_events_EventPhase;
var openfl_events_FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) keyCode = 0;
	if(shiftKey == null) shiftKey = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	keyCode: null
	,relatedObject: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_FocusEvent(this.type,this.bubbles,this.cancelable,this.relatedObject,this.shiftKey,this.keyCode);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FocusEvent",["type","bubbles","cancelable","relatedObject","shiftKey","keyCode"]);
	}
	,__class__: openfl_events_FocusEvent
});
var openfl_events_FullScreenEvent = function(type,bubbles,cancelable,fullScreen,interactive) {
	if(interactive == null) interactive = false;
	if(fullScreen == null) fullScreen = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_ActivityEvent.call(this,type,bubbles,cancelable);
	this.fullScreen = fullScreen;
	this.interactive = interactive;
};
$hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
openfl_events_FullScreenEvent.__name__ = ["openfl","events","FullScreenEvent"];
openfl_events_FullScreenEvent.__super__ = openfl_events_ActivityEvent;
openfl_events_FullScreenEvent.prototype = $extend(openfl_events_ActivityEvent.prototype,{
	fullScreen: null
	,interactive: null
	,clone: function() {
		var event = new openfl_events_FullScreenEvent(this.type,this.bubbles,this.cancelable,this.fullScreen,this.interactive);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FullscreenEvent",["type","bubbles","cancelable","fullscreen","interactive"]);
	}
	,__class__: openfl_events_FullScreenEvent
});
var openfl_events_GameInputEvent = function(type,bubbles,cancelable,device) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = ["openfl","events","GameInputEvent"];
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	device: null
	,clone: function() {
		var event = new openfl_events_GameInputEvent(this.type,this.bubbles,this.cancelable,this.device);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("GameInputEvent",["type","bubbles","cancelable","device"]);
	}
	,__class__: openfl_events_GameInputEvent
});
var openfl_events_HTTPStatusEvent = function(type,bubbles,cancelable,status,redirected) {
	if(redirected == null) redirected = false;
	if(status == null) status = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.status = status;
	this.redirected = redirected;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
openfl_events_HTTPStatusEvent.__name__ = ["openfl","events","HTTPStatusEvent"];
openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	redirected: null
	,responseHeaders: null
	,responseURL: null
	,status: null
	,clone: function() {
		var event = new openfl_events_HTTPStatusEvent(this.type,this.bubbles,null,this.status,this.redirected);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("HTTPStatusEvent",["type","bubbles","cancelable","status","redirected"]);
	}
	,__class__: openfl_events_HTTPStatusEvent
});
var openfl_events_IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_IOErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("IOErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) commandKeyValue = false;
	if(controlKeyValue == null) controlKeyValue = false;
	if(shiftKeyValue == null) shiftKeyValue = false;
	if(altKeyValue == null) altKeyValue = false;
	if(ctrlKeyValue == null) ctrlKeyValue = false;
	if(keyCodeValue == null) keyCodeValue = 0;
	if(charCodeValue == null) charCodeValue = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	if(keyLocationValue != null) this.keyLocation = keyLocationValue; else this.keyLocation = 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,charCode: null
	,ctrlKey: null
	,commandKey: null
	,controlKey: null
	,keyCode: null
	,keyLocation: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_KeyboardEvent(this.type,this.bubbles,this.cancelable,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey,this.controlKey,this.commandKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("KeyboardEvent",["type","bubbles","cancelable","charCode","keyCode","keyLocation","ctrlKey","altKey","shiftKey"]);
	}
	,__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl_events_MouseEvent.__altKey = null;
openfl_events_MouseEvent.__buttonDown = null;
openfl_events_MouseEvent.__commandKey = null;
openfl_events_MouseEvent.__ctrlKey = null;
openfl_events_MouseEvent.__shiftKey = null;
openfl_events_MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) delta = 0;
	switch(type) {
	case "mouseDown":
		openfl_events_MouseEvent.__buttonDown = true;
		break;
	case "mouseUp":
		openfl_events_MouseEvent.__buttonDown = false;
		break;
	default:
	}
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,buttonDown: null
	,commandKey: null
	,clickCount: null
	,ctrlKey: null
	,delta: null
	,localX: null
	,localY: null
	,relatedObject: null
	,shiftKey: null
	,stageX: null
	,stageY: null
	,clone: function() {
		var event = new openfl_events_MouseEvent(this.type,this.bubbles,this.cancelable,this.localX,this.localY,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("MouseEvent",["type","bubbles","cancelable","localX","localY","relatedObject","ctrlKey","altKey","shiftKey","buttonDown","delta"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_MouseEvent
});
var openfl_events_NetStatusEvent = function(type,bubbles,cancelable,info) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.info = info;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.NetStatusEvent"] = openfl_events_NetStatusEvent;
openfl_events_NetStatusEvent.__name__ = ["openfl","events","NetStatusEvent"];
openfl_events_NetStatusEvent.__super__ = openfl_events_Event;
openfl_events_NetStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	info: null
	,clone: function() {
		var event = new openfl_events_NetStatusEvent(this.type,this.bubbles,this.cancelable,this.info);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("NetStatusEvent",["type","bubbles","cancelable","info"]);
	}
	,__class__: openfl_events_NetStatusEvent
});
var openfl_events_ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) bytesTotal = 0;
	if(bytesLoaded == null) bytesLoaded = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
openfl_events_ProgressEvent.__name__ = ["openfl","events","ProgressEvent"];
openfl_events_ProgressEvent.__super__ = openfl_events_Event;
openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,clone: function() {
		var event = new openfl_events_ProgressEvent(this.type,this.bubbles,this.cancelable,this.bytesLoaded,this.bytesTotal);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ProgressEvent",["type","bubbles","cancelable","bytesLoaded","bytesTotal"]);
	}
	,__class__: openfl_events_ProgressEvent
});
var openfl_events_SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
openfl_events_SecurityErrorEvent.__name__ = ["openfl","events","SecurityErrorEvent"];
openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_SecurityErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("SecurityErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_SecurityErrorEvent
});
var openfl_events_TouchEvent = function(type,bubbles,cancelable,touchPointID,isPrimaryTouchPoint,localX,localY,sizeX,sizeY,pressure,relatedObject,ctrlKey,altKey,shiftKey,commandKey,controlKey,timestamp,touchIntent,samples,isTouchPointCanceled) {
	if(isTouchPointCanceled == null) isTouchPointCanceled = false;
	if(timestamp == null) timestamp = 0;
	if(controlKey == null) controlKey = false;
	if(commandKey == null) commandKey = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(pressure == null) pressure = 0;
	if(sizeY == null) sizeY = 0;
	if(sizeX == null) sizeX = 0;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(isPrimaryTouchPoint == null) isPrimaryTouchPoint = false;
	if(touchPointID == null) touchPointID = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.touchPointID = touchPointID;
	this.isPrimaryTouchPoint = isPrimaryTouchPoint;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.pressure = pressure;
	this.relatedObject = relatedObject;
	this.ctrlKey = ctrlKey;
	this.altKey = altKey;
	this.shiftKey = shiftKey;
	this.commandKey = commandKey;
	this.controlKey = controlKey;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl_events_TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,0,true,local.x,local.y,1,1,1);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,commandKey: null
	,controlKey: null
	,ctrlKey: null
	,delta: null
	,isPrimaryTouchPoint: null
	,localX: null
	,localY: null
	,pressure: null
	,relatedObject: null
	,shiftKey: null
	,sizeX: null
	,sizeY: null
	,stageX: null
	,stageY: null
	,touchPointID: null
	,clone: function() {
		var event = new openfl_events_TouchEvent(this.type,this.bubbles,this.cancelable,this.touchPointID,this.isPrimaryTouchPoint,this.localX,this.localY,this.sizeX,this.sizeY,this.pressure,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.commandKey,this.controlKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TouchEvent",["type","bubbles","cancelable","touchPointID","isPrimaryTouchPoint","localX","localY","sizeX","sizeY","pressure","relatedObject","ctrlKey","altKey","shiftKey","commandKey","controlKey"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_TouchEvent
});
var openfl_filters_BitmapFilter = function() {
	this.__saveLastFilter = false;
	this.__passes = 0;
	this.__dirty = true;
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl_filters_BitmapFilter.__tmpRenderTexture = null;
openfl_filters_BitmapFilter.__applyFilters = function(filters,renderSession,source,target,sourceRect,destPoint) {
	var same = target == source && target.__usingPingPongTexture;
	if(same) target.__pingPongTexture.useOldTexture = true;
	if(sourceRect == null) sourceRect = source.rect;
	var lastFilterOutput = null;
	var useLastFilter = false;
	var srcShader = source.__shader;
	var _g = 0;
	while(_g < filters.length) {
		var filter = filters[_g];
		++_g;
		useLastFilter = false;
		if(filter.__saveLastFilter) {
			target.__pingPongTexture.swap();
			target.__drawGL(renderSession,source,null,null,null,sourceRect,true,!target.__usingPingPongTexture,true);
			lastFilterOutput = target.__pingPongTexture.get_oldRenderTexture();
			target.__pingPongTexture.set_oldRenderTexture(openfl_filters_BitmapFilter.__tmpRenderTexture);
		}
		var _g2 = 0;
		var _g1 = filter.__passes;
		while(_g2 < _g1) {
			var pass = _g2++;
			useLastFilter = filter.__saveLastFilter && filter.__useLastFilter(pass);
			if(same && !useLastFilter) target.__pingPongTexture.swap();
			if(useLastFilter) {
				openfl_filters_BitmapFilter.__tmpRenderTexture = target.__pingPongTexture.get_oldRenderTexture();
				target.__pingPongTexture.set_oldRenderTexture(lastFilterOutput);
			}
			source.__shader = filter.__preparePass(pass);
			target.__drawGL(renderSession,source,null,null,null,sourceRect,true,!target.__usingPingPongTexture,!useLastFilter);
		}
	}
	source.__shader = srcShader;
	if(same) target.__pingPongTexture.useOldTexture = false;
};
openfl_filters_BitmapFilter.__expandBounds = function(filters,rect,matrix) {
	var r = openfl_geom_Rectangle.__temp;
	r.setEmpty();
	var _g = 0;
	while(_g < filters.length) {
		var filter = filters[_g];
		++_g;
		filter.__growBounds(r);
	}
	r.__transform(r,matrix);
	rect.__expand(r.x,r.y,r.width,r.height);
};
openfl_filters_BitmapFilter.prototype = {
	__dirty: null
	,__passes: null
	,__saveLastFilter: null
	,clone: function() {
		return new openfl_filters_BitmapFilter();
	}
	,__applyFilter: function(sourceData,targetData,sourceRect,destPoint) {
	}
	,__growBounds: function(rect) {
	}
	,__preparePass: function(pass) {
		return null;
	}
	,__useLastFilter: function(pass) {
		return false;
	}
	,__class__: openfl_filters_BitmapFilter
};
var openfl_geom_Matrix3D = function(v) {
	if(v != null && v.length == 16) this.rawData = v; else {
		var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this.rawData = vectorData;
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl_geom_Matrix3D.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return new openfl_geom_Matrix3D((function($this) {
		var $r;
		var value = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl_geom_Matrix3D.createABCD = function(a,b,c,d,tx,ty) {
	return new openfl_geom_Matrix3D((function($this) {
		var $r;
		var value = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl_geom_Matrix3D.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return new openfl_geom_Matrix3D((function($this) {
		var $r;
		var value = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl_geom_Matrix3D.interpolate = function(thisMat,toMat,percent) {
	var m = new openfl_geom_Matrix3D();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var this1 = m.rawData;
		if(!this1.fixed) {
			if(i >= this1.length) this1.length = i + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[i] = thisMat.rawData.data[i] + (toMat.rawData.data[i] - thisMat.rawData.data[i]) * percent;
	}
	return m;
};
openfl_geom_Matrix3D.__getAxisRotation = function(x,y,z,degrees) {
	var m = new openfl_geom_Matrix3D();
	var a1 = new openfl_geom_Vector3D(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	var this1 = m.rawData;
	if(!this1.fixed) {
		if(0 >= this1.length) this1.length = 1;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	this1.data[0] = c + a1.x * a1.x * t;
	var this3 = m.rawData;
	if(!this3.fixed) {
		if(5 >= this3.length) this3.length = 6;
		if(this3.data.length < this3.length) {
			var data1;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data1 = this4;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
			this3.data = data1;
		}
	}
	this3.data[5] = c + a1.y * a1.y * t;
	var this5 = m.rawData;
	if(!this5.fixed) {
		if(10 >= this5.length) this5.length = 11;
		if(this5.data.length < this5.length) {
			var data2;
			var this6;
			this6 = new Array(this5.data.length + 10);
			data2 = this6;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
			this5.data = data2;
		}
	}
	this5.data[10] = c + a1.z * a1.z * t;
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	var this7 = m.rawData;
	if(!this7.fixed) {
		if(4 >= this7.length) this7.length = 5;
		if(this7.data.length < this7.length) {
			var data3;
			var this8;
			this8 = new Array(this7.data.length + 10);
			data3 = this8;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
			this7.data = data3;
		}
	}
	this7.data[4] = tmp1 + tmp2;
	var this9 = m.rawData;
	if(!this9.fixed) {
		if(1 >= this9.length) this9.length = 2;
		if(this9.data.length < this9.length) {
			var data4;
			var this10;
			this10 = new Array(this9.data.length + 10);
			data4 = this10;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
			this9.data = data4;
		}
	}
	this9.data[1] = tmp1 - tmp2;
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	var this11 = m.rawData;
	if(!this11.fixed) {
		if(8 >= this11.length) this11.length = 9;
		if(this11.data.length < this11.length) {
			var data5;
			var this12;
			this12 = new Array(this11.data.length + 10);
			data5 = this12;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
			this11.data = data5;
		}
	}
	this11.data[8] = tmp1 - tmp2;
	var this13 = m.rawData;
	if(!this13.fixed) {
		if(2 >= this13.length) this13.length = 3;
		if(this13.data.length < this13.length) {
			var data6;
			var this14;
			this14 = new Array(this13.data.length + 10);
			data6 = this14;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
			this13.data = data6;
		}
	}
	this13.data[2] = tmp1 + tmp2;
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	var this15 = m.rawData;
	if(!this15.fixed) {
		if(9 >= this15.length) this15.length = 10;
		if(this15.data.length < this15.length) {
			var data7;
			var this16;
			this16 = new Array(this15.data.length + 10);
			data7 = this16;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
			this15.data = data7;
		}
	}
	this15.data[9] = tmp1 + tmp2;
	var this17 = m.rawData;
	if(!this17.fixed) {
		if(6 >= this17.length) this17.length = 7;
		if(this17.data.length < this17.length) {
			var data8;
			var this18;
			this18 = new Array(this17.data.length + 10);
			data8 = this18;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
			this17.data = data8;
		}
	}
	this17.data[6] = tmp1 - tmp2;
	return m;
};
openfl_geom_Matrix3D.prototype = {
	determinant: null
	,rawData: null
	,append: function(lhs) {
		var m111 = this.rawData.data[0];
		var m121 = this.rawData.data[4];
		var m131 = this.rawData.data[8];
		var m141 = this.rawData.data[12];
		var m112 = this.rawData.data[1];
		var m122 = this.rawData.data[5];
		var m132 = this.rawData.data[9];
		var m142 = this.rawData.data[13];
		var m113 = this.rawData.data[2];
		var m123 = this.rawData.data[6];
		var m133 = this.rawData.data[10];
		var m143 = this.rawData.data[14];
		var m114 = this.rawData.data[3];
		var m124 = this.rawData.data[7];
		var m134 = this.rawData.data[11];
		var m144 = this.rawData.data[15];
		var m211 = lhs.rawData.data[0];
		var m221 = lhs.rawData.data[4];
		var m231 = lhs.rawData.data[8];
		var m241 = lhs.rawData.data[12];
		var m212 = lhs.rawData.data[1];
		var m222 = lhs.rawData.data[5];
		var m232 = lhs.rawData.data[9];
		var m242 = lhs.rawData.data[13];
		var m213 = lhs.rawData.data[2];
		var m223 = lhs.rawData.data[6];
		var m233 = lhs.rawData.data[10];
		var m243 = lhs.rawData.data[14];
		var m214 = lhs.rawData.data[3];
		var m224 = lhs.rawData.data[7];
		var m234 = lhs.rawData.data[11];
		var m244 = lhs.rawData.data[15];
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(6 >= this13.length) this13.length = 7;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(7 >= this15.length) this15.length = 8;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(8 >= this17.length) this17.length = 9;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(9 >= this19.length) this19.length = 10;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(11 >= this23.length) this23.length = 12;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(12 >= this25.length) this25.length = 13;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(13 >= this27.length) this27.length = 14;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(14 >= this29.length) this29.length = 15;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,appendRotation: function(degrees,axis,pivotPoint) {
		var m = openfl_geom_Matrix3D.__getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			var p = pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.append(m);
	}
	,appendScale: function(xScale,yScale,zScale) {
		this.append(new openfl_geom_Matrix3D((function($this) {
			var $r;
			var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl_VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this))));
	}
	,appendTranslation: function(x,y,z) {
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(12 >= this1.length) this1.length = 13;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[12] = this.rawData.data[12] + x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(13 >= this3.length) this3.length = 14;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[13] = this.rawData.data[13] + y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(14 >= this5.length) this5.length = 15;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[14] = this.rawData.data[14] + z;
	}
	,clone: function() {
		return new openfl_geom_Matrix3D((function($this) {
			var $r;
			var this1 = $this.rawData;
			var vectorData = new openfl_VectorData();
			vectorData.length = this1.length;
			vectorData.fixed = this1.fixed;
			{
				var this2;
				this2 = new Array(this1.length);
				vectorData.data = this2;
			}
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
			$r = vectorData;
			return $r;
		}(this)));
	}
	,copyColumnFrom: function(column,vector3D) {
		switch(column) {
		case 0:
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = vector3D.x;
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = vector3D.y;
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = vector3D.z;
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = vector3D.w;
			break;
		case 1:
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = vector3D.x;
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = vector3D.y;
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = vector3D.z;
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = vector3D.w;
			break;
		case 2:
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = vector3D.x;
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = vector3D.y;
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = vector3D.z;
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = vector3D.w;
			break;
		case 3:
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = vector3D.x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = vector3D.y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = vector3D.z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = vector3D.w;
			break;
		default:
		}
	}
	,copyColumnTo: function(column,vector3D) {
		switch(column) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[1];
			vector3D.z = this.rawData.data[2];
			vector3D.w = this.rawData.data[3];
			break;
		case 1:
			vector3D.x = this.rawData.data[4];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[6];
			vector3D.w = this.rawData.data[7];
			break;
		case 2:
			vector3D.x = this.rawData.data[8];
			vector3D.y = this.rawData.data[9];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[11];
			break;
		case 3:
			vector3D.x = this.rawData.data[12];
			vector3D.y = this.rawData.data[13];
			vector3D.z = this.rawData.data[14];
			vector3D.w = this.rawData.data[15];
			break;
		default:
		}
	}
	,copyFrom: function(other) {
		var this1 = other.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
		this.rawData = vectorData;
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var length = vector.length - index;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(i >= this1.length) this1.length = i + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = vector.data[i + index];
		}
		if(transpose) this.transpose();
	}
	,copyRawDataTo: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var _g1 = 0;
		var _g = this.rawData.length;
		while(_g1 < _g) {
			var i = _g1++;
			var key = i + index;
			if(!vector.fixed) {
				if(key >= vector.length) vector.length = key + 1;
				if(vector.data.length < vector.length) {
					var data;
					var this1;
					this1 = new Array(vector.data.length + 10);
					data = this1;
					haxe_ds__$Vector_Vector_$Impl_$.blit(vector.data,0,data,0,vector.data.length);
					vector.data = data;
				}
			}
			vector.data[key] = this.rawData.data[i];
		}
		if(transpose) this.transpose();
	}
	,copyRowFrom: function(row,vector3D) {
		switch(row) {
		case 0:
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = vector3D.x;
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(4 >= this3.length) this3.length = 5;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[4] = vector3D.y;
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(8 >= this5.length) this5.length = 9;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[8] = vector3D.z;
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(12 >= this7.length) this7.length = 13;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[12] = vector3D.w;
			break;
		case 1:
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(1 >= this9.length) this9.length = 2;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[1] = vector3D.x;
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = vector3D.y;
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(9 >= this13.length) this13.length = 10;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[9] = vector3D.z;
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(13 >= this15.length) this15.length = 14;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[13] = vector3D.w;
			break;
		case 2:
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(2 >= this17.length) this17.length = 3;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[2] = vector3D.x;
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(6 >= this19.length) this19.length = 7;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[6] = vector3D.y;
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = vector3D.z;
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(14 >= this23.length) this23.length = 15;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[14] = vector3D.w;
			break;
		case 3:
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(3 >= this25.length) this25.length = 4;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[3] = vector3D.x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(7 >= this27.length) this27.length = 8;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[7] = vector3D.y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(11 >= this29.length) this29.length = 12;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[11] = vector3D.z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = vector3D.w;
			break;
		default:
		}
	}
	,copyRowTo: function(row,vector3D) {
		switch(row) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[4];
			vector3D.z = this.rawData.data[8];
			vector3D.w = this.rawData.data[12];
			break;
		case 1:
			vector3D.x = this.rawData.data[1];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[9];
			vector3D.w = this.rawData.data[13];
			break;
		case 2:
			vector3D.x = this.rawData.data[2];
			vector3D.y = this.rawData.data[6];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[14];
			break;
		case 3:
			vector3D.x = this.rawData.data[3];
			vector3D.y = this.rawData.data[7];
			vector3D.z = this.rawData.data[11];
			vector3D.w = this.rawData.data[15];
			break;
		default:
		}
	}
	,copyToMatrix3D: function(other) {
		var this1 = this.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
		other.rawData = vectorData;
	}
	,decompose: function(orientationStyle) {
		if(orientationStyle == null) orientationStyle = openfl_geom_Orientation3D.EULER_ANGLES;
		var vec;
		var this1;
		this1 = new openfl_VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		vec = this1;
		var m = this.clone();
		var mr;
		var this3 = m.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this3.length;
		vectorData.fixed = this3.fixed;
		var this4;
		this4 = new Array(this3.length);
		vectorData.data = this4;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,vectorData.data,0,this3.length);
		mr = vectorData;
		var pos = new openfl_geom_Vector3D(mr.data[12],mr.data[13],mr.data[14]);
		{
			if(!mr.fixed) {
				if(12 >= mr.length) mr.length = 13;
				if(mr.data.length < mr.length) {
					var data;
					var this5;
					this5 = new Array(mr.data.length + 10);
					data = this5;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data,0,mr.data.length);
					mr.data = data;
				}
			}
			mr.data[12] = 0;
		}
		{
			if(!mr.fixed) {
				if(13 >= mr.length) mr.length = 14;
				if(mr.data.length < mr.length) {
					var data1;
					var this6;
					this6 = new Array(mr.data.length + 10);
					data1 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data1,0,mr.data.length);
					mr.data = data1;
				}
			}
			mr.data[13] = 0;
		}
		{
			if(!mr.fixed) {
				if(14 >= mr.length) mr.length = 15;
				if(mr.data.length < mr.length) {
					var data2;
					var this7;
					this7 = new Array(mr.data.length + 10);
					data2 = this7;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data2,0,mr.data.length);
					mr.data = data2;
				}
			}
			mr.data[14] = 0;
		}
		var scale = new openfl_geom_Vector3D();
		scale.x = Math.sqrt(mr.data[0] * mr.data[0] + mr.data[1] * mr.data[1] + mr.data[2] * mr.data[2]);
		scale.y = Math.sqrt(mr.data[4] * mr.data[4] + mr.data[5] * mr.data[5] + mr.data[6] * mr.data[6]);
		scale.z = Math.sqrt(mr.data[8] * mr.data[8] + mr.data[9] * mr.data[9] + mr.data[10] * mr.data[10]);
		if(mr.data[0] * (mr.data[5] * mr.data[10] - mr.data[6] * mr.data[9]) - mr.data[1] * (mr.data[4] * mr.data[10] - mr.data[6] * mr.data[8]) + mr.data[2] * (mr.data[4] * mr.data[9] - mr.data[5] * mr.data[8]) < 0) scale.z = -scale.z;
		{
			if(!mr.fixed) {
				if(0 >= mr.length) mr.length = 1;
				if(mr.data.length < mr.length) {
					var data3;
					var this8;
					this8 = new Array(mr.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data3,0,mr.data.length);
					mr.data = data3;
				}
			}
			mr.data[0] = mr.data[0] / scale.x;
		}
		{
			if(!mr.fixed) {
				if(1 >= mr.length) mr.length = 2;
				if(mr.data.length < mr.length) {
					var data4;
					var this9;
					this9 = new Array(mr.data.length + 10);
					data4 = this9;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data4,0,mr.data.length);
					mr.data = data4;
				}
			}
			mr.data[1] = mr.data[1] / scale.x;
		}
		{
			if(!mr.fixed) {
				if(2 >= mr.length) mr.length = 3;
				if(mr.data.length < mr.length) {
					var data5;
					var this10;
					this10 = new Array(mr.data.length + 10);
					data5 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data5,0,mr.data.length);
					mr.data = data5;
				}
			}
			mr.data[2] = mr.data[2] / scale.x;
		}
		{
			if(!mr.fixed) {
				if(4 >= mr.length) mr.length = 5;
				if(mr.data.length < mr.length) {
					var data6;
					var this11;
					this11 = new Array(mr.data.length + 10);
					data6 = this11;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data6,0,mr.data.length);
					mr.data = data6;
				}
			}
			mr.data[4] = mr.data[4] / scale.y;
		}
		{
			if(!mr.fixed) {
				if(5 >= mr.length) mr.length = 6;
				if(mr.data.length < mr.length) {
					var data7;
					var this12;
					this12 = new Array(mr.data.length + 10);
					data7 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data7,0,mr.data.length);
					mr.data = data7;
				}
			}
			mr.data[5] = mr.data[5] / scale.y;
		}
		{
			if(!mr.fixed) {
				if(6 >= mr.length) mr.length = 7;
				if(mr.data.length < mr.length) {
					var data8;
					var this13;
					this13 = new Array(mr.data.length + 10);
					data8 = this13;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data8,0,mr.data.length);
					mr.data = data8;
				}
			}
			mr.data[6] = mr.data[6] / scale.y;
		}
		{
			if(!mr.fixed) {
				if(8 >= mr.length) mr.length = 9;
				if(mr.data.length < mr.length) {
					var data9;
					var this14;
					this14 = new Array(mr.data.length + 10);
					data9 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data9,0,mr.data.length);
					mr.data = data9;
				}
			}
			mr.data[8] = mr.data[8] / scale.z;
		}
		{
			if(!mr.fixed) {
				if(9 >= mr.length) mr.length = 10;
				if(mr.data.length < mr.length) {
					var data10;
					var this15;
					this15 = new Array(mr.data.length + 10);
					data10 = this15;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data10,0,mr.data.length);
					mr.data = data10;
				}
			}
			mr.data[9] = mr.data[9] / scale.z;
		}
		{
			if(!mr.fixed) {
				if(10 >= mr.length) mr.length = 11;
				if(mr.data.length < mr.length) {
					var data11;
					var this16;
					this16 = new Array(mr.data.length + 10);
					data11 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data11,0,mr.data.length);
					mr.data = data11;
				}
			}
			mr.data[10] = mr.data[10] / scale.z;
		}
		var rot = new openfl_geom_Vector3D();
		if(orientationStyle != null) switch(orientationStyle[1]) {
		case 0:
			rot.w = Math.acos((mr.data[0] + mr.data[5] + mr.data[10] - 1) / 2);
			var len = Math.sqrt((mr.data[6] - mr.data[9]) * (mr.data[6] - mr.data[9]) + (mr.data[8] - mr.data[2]) * (mr.data[8] - mr.data[2]) + (mr.data[1] - mr.data[4]) * (mr.data[1] - mr.data[4]));
			if(len != 0) {
				rot.x = (mr.data[6] - mr.data[9]) / len;
				rot.y = (mr.data[8] - mr.data[2]) / len;
				rot.z = (mr.data[1] - mr.data[4]) / len;
			} else rot.x = rot.y = rot.z = 0;
			break;
		case 2:
			var tr = mr.data[0] + mr.data[5] + mr.data[10];
			if(tr > 0) {
				rot.w = Math.sqrt(1 + tr) / 2;
				rot.x = (mr.data[6] - mr.data[9]) / (4 * rot.w);
				rot.y = (mr.data[8] - mr.data[2]) / (4 * rot.w);
				rot.z = (mr.data[1] - mr.data[4]) / (4 * rot.w);
			} else if(mr.data[0] > mr.data[5] && mr.data[0] > mr.data[10]) {
				rot.x = Math.sqrt(1 + mr.data[0] - mr.data[5] - mr.data[10]) / 2;
				rot.w = (mr.data[6] - mr.data[9]) / (4 * rot.x);
				rot.y = (mr.data[1] + mr.data[4]) / (4 * rot.x);
				rot.z = (mr.data[8] + mr.data[2]) / (4 * rot.x);
			} else if(mr.data[5] > mr.data[10]) {
				rot.y = Math.sqrt(1 + mr.data[5] - mr.data[0] - mr.data[10]) / 2;
				rot.x = (mr.data[1] + mr.data[4]) / (4 * rot.y);
				rot.w = (mr.data[8] - mr.data[2]) / (4 * rot.y);
				rot.z = (mr.data[6] + mr.data[9]) / (4 * rot.y);
			} else {
				rot.z = Math.sqrt(1 + mr.data[10] - mr.data[0] - mr.data[5]) / 2;
				rot.x = (mr.data[8] + mr.data[2]) / (4 * rot.z);
				rot.y = (mr.data[6] + mr.data[9]) / (4 * rot.z);
				rot.w = (mr.data[1] - mr.data[4]) / (4 * rot.z);
			}
			break;
		case 1:
			rot.y = Math.asin(-mr.data[2]);
			if(mr.data[2] != 1 && mr.data[2] != -1) {
				rot.x = Math.atan2(mr.data[6],mr.data[10]);
				rot.z = Math.atan2(mr.data[1],mr.data[0]);
			} else {
				rot.z = 0;
				rot.x = Math.atan2(mr.data[4],mr.data[5]);
			}
			break;
		}
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data12;
				var this17;
				this17 = new Array(vec.data.length + 10);
				data12 = this17;
				haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data,0,data12,0,vec.data.length);
				vec.data = data12;
			}
			vec.data[vec.length - 1] = pos;
		}
		vec.length;
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data13;
				var this18;
				this18 = new Array(vec.data.length + 10);
				data13 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data,0,data13,0,vec.data.length);
				vec.data = data13;
			}
			vec.data[vec.length - 1] = rot;
		}
		vec.length;
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data14;
				var this19;
				this19 = new Array(vec.data.length + 10);
				data14 = this19;
				haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data,0,data14,0,vec.data.length);
				vec.data = data14;
			}
			vec.data[vec.length - 1] = scale;
		}
		vec.length;
		return vec;
	}
	,deltaTransformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[3],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[7],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[11],0);
	}
	,identity: function() {
		{
			var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl_VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
			this.rawData = vectorData;
		}
	}
	,interpolateTo: function(toMat,percent) {
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(i >= this1.length) this1.length = i + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = this.rawData.data[i] + (toMat.rawData.data[i] - this.rawData.data[i]) * percent;
		}
	}
	,invert: function() {
		var d = (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
		var invertable = Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData.data[0];
			var m21 = this.rawData.data[4];
			var m31 = this.rawData.data[8];
			var m41 = this.rawData.data[12];
			var m12 = this.rawData.data[1];
			var m22 = this.rawData.data[5];
			var m32 = this.rawData.data[9];
			var m42 = this.rawData.data[13];
			var m13 = this.rawData.data[2];
			var m23 = this.rawData.data[6];
			var m33 = this.rawData.data[10];
			var m43 = this.rawData.data[14];
			var m14 = this.rawData.data[3];
			var m24 = this.rawData.data[7];
			var m34 = this.rawData.data[11];
			var m44 = this.rawData.data[15];
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
		}
		return invertable;
	}
	,pointAt: function(pos,at,up) {
		if(at == null) at = new openfl_geom_Vector3D(0,0,-1);
		if(up == null) up = new openfl_geom_Vector3D(0,-1,0);
		var dir = new openfl_geom_Vector3D(at.x - pos.x,at.y - pos.y,at.z - pos.z);
		var vup = new openfl_geom_Vector3D(up.x,up.y,up.z,up.w);
		var right;
		dir.normalize();
		vup.normalize();
		var dir2 = new openfl_geom_Vector3D(dir.x,dir.y,dir.z,dir.w);
		dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
		vup = new openfl_geom_Vector3D(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
		if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if(dir.x != 0) vup = new openfl_geom_Vector3D(-dir.y,dir.x,0); else vup = new openfl_geom_Vector3D(1,0,0);
		right = new openfl_geom_Vector3D(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
		right.normalize();
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = right.x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(4 >= this3.length) this3.length = 5;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[4] = right.y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(8 >= this5.length) this5.length = 9;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[8] = right.z;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(12 >= this7.length) this7.length = 13;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[12] = 0.0;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(1 >= this9.length) this9.length = 2;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[1] = vup.x;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = vup.y;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(9 >= this13.length) this13.length = 10;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[9] = vup.z;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(13 >= this15.length) this15.length = 14;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[13] = 0.0;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(2 >= this17.length) this17.length = 3;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[2] = dir.x;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(6 >= this19.length) this19.length = 7;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[6] = dir.y;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = dir.z;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(14 >= this23.length) this23.length = 15;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[14] = 0.0;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(3 >= this25.length) this25.length = 4;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[3] = pos.x;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(7 >= this27.length) this27.length = 8;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[7] = pos.y;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(11 >= this29.length) this29.length = 12;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[11] = pos.z;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = 1.0;
	}
	,prepend: function(rhs) {
		var m111 = rhs.rawData.data[0];
		var m121 = rhs.rawData.data[4];
		var m131 = rhs.rawData.data[8];
		var m141 = rhs.rawData.data[12];
		var m112 = rhs.rawData.data[1];
		var m122 = rhs.rawData.data[5];
		var m132 = rhs.rawData.data[9];
		var m142 = rhs.rawData.data[13];
		var m113 = rhs.rawData.data[2];
		var m123 = rhs.rawData.data[6];
		var m133 = rhs.rawData.data[10];
		var m143 = rhs.rawData.data[14];
		var m114 = rhs.rawData.data[3];
		var m124 = rhs.rawData.data[7];
		var m134 = rhs.rawData.data[11];
		var m144 = rhs.rawData.data[15];
		var m211 = this.rawData.data[0];
		var m221 = this.rawData.data[4];
		var m231 = this.rawData.data[8];
		var m241 = this.rawData.data[12];
		var m212 = this.rawData.data[1];
		var m222 = this.rawData.data[5];
		var m232 = this.rawData.data[9];
		var m242 = this.rawData.data[13];
		var m213 = this.rawData.data[2];
		var m223 = this.rawData.data[6];
		var m233 = this.rawData.data[10];
		var m243 = this.rawData.data[14];
		var m214 = this.rawData.data[3];
		var m224 = this.rawData.data[7];
		var m234 = this.rawData.data[11];
		var m244 = this.rawData.data[15];
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(6 >= this13.length) this13.length = 7;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(7 >= this15.length) this15.length = 8;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(8 >= this17.length) this17.length = 9;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(9 >= this19.length) this19.length = 10;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(11 >= this23.length) this23.length = 12;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(12 >= this25.length) this25.length = 13;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(13 >= this27.length) this27.length = 14;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(14 >= this29.length) this29.length = 15;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,prependRotation: function(degrees,axis,pivotPoint) {
		var m = openfl_geom_Matrix3D.__getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			var p = pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.prepend(m);
	}
	,prependScale: function(xScale,yScale,zScale) {
		this.prepend(new openfl_geom_Matrix3D((function($this) {
			var $r;
			var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl_VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this))));
	}
	,prependTranslation: function(x,y,z) {
		var m = new openfl_geom_Matrix3D();
		m.set_position(new openfl_geom_Vector3D(x,y,z));
		this.prepend(m);
	}
	,recompose: function(components,orientationStyle) {
		if(components.length < 3 || components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].z == 0) return false;
		if(orientationStyle == null) orientationStyle = openfl_geom_Orientation3D.EULER_ANGLES;
		this.identity();
		var scale = [];
		scale[0] = scale[1] = scale[2] = components.data[2].x;
		scale[4] = scale[5] = scale[6] = components.data[2].y;
		scale[8] = scale[9] = scale[10] = components.data[2].z;
		if(orientationStyle != null) switch(orientationStyle[1]) {
		case 1:
			var cx = Math.cos(components.data[1].x);
			var cy = Math.cos(components.data[1].y);
			var cz = Math.cos(components.data[1].z);
			var sx = Math.sin(components.data[1].x);
			var sy = Math.sin(components.data[1].y);
			var sz = Math.sin(components.data[1].z);
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = cy * cz * scale[0];
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = cy * sz * scale[1];
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = -sy * scale[2];
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = 0;
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = (sx * sy * cz - cx * sz) * scale[4];
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = (sx * sy * sz + cx * cz) * scale[5];
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = sx * cy * scale[6];
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = 0;
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = (cx * sy * cz + sx * sz) * scale[8];
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = (cx * sy * sz - sx * cz) * scale[9];
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = cx * cy * scale[10];
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = 0;
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = components.data[0].x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = components.data[0].y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = components.data[0].z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = 1;
			break;
		default:
			var x = components.data[1].x;
			var y = components.data[1].y;
			var z = components.data[1].z;
			var w = components.data[1].w;
			if(Type.enumEq(orientationStyle,openfl_geom_Orientation3D.AXIS_ANGLE)) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			var this33 = this.rawData;
			if(!this33.fixed) {
				if(0 >= this33.length) this33.length = 1;
				if(this33.data.length < this33.length) {
					var data16;
					var this34;
					this34 = new Array(this33.data.length + 10);
					data16 = this34;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this33.data,0,data16,0,this33.data.length);
					this33.data = data16;
				}
			}
			this33.data[0] = (1 - 2 * y * y - 2 * z * z) * scale[0];
			var this35 = this.rawData;
			if(!this35.fixed) {
				if(1 >= this35.length) this35.length = 2;
				if(this35.data.length < this35.length) {
					var data17;
					var this36;
					this36 = new Array(this35.data.length + 10);
					data17 = this36;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this35.data,0,data17,0,this35.data.length);
					this35.data = data17;
				}
			}
			this35.data[1] = (2 * x * y + 2 * w * z) * scale[1];
			var this37 = this.rawData;
			if(!this37.fixed) {
				if(2 >= this37.length) this37.length = 3;
				if(this37.data.length < this37.length) {
					var data18;
					var this38;
					this38 = new Array(this37.data.length + 10);
					data18 = this38;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this37.data,0,data18,0,this37.data.length);
					this37.data = data18;
				}
			}
			this37.data[2] = (2 * x * z - 2 * w * y) * scale[2];
			var this39 = this.rawData;
			if(!this39.fixed) {
				if(3 >= this39.length) this39.length = 4;
				if(this39.data.length < this39.length) {
					var data19;
					var this40;
					this40 = new Array(this39.data.length + 10);
					data19 = this40;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this39.data,0,data19,0,this39.data.length);
					this39.data = data19;
				}
			}
			this39.data[3] = 0;
			var this41 = this.rawData;
			if(!this41.fixed) {
				if(4 >= this41.length) this41.length = 5;
				if(this41.data.length < this41.length) {
					var data20;
					var this42;
					this42 = new Array(this41.data.length + 10);
					data20 = this42;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this41.data,0,data20,0,this41.data.length);
					this41.data = data20;
				}
			}
			this41.data[4] = (2 * x * y - 2 * w * z) * scale[4];
			var this43 = this.rawData;
			if(!this43.fixed) {
				if(5 >= this43.length) this43.length = 6;
				if(this43.data.length < this43.length) {
					var data21;
					var this44;
					this44 = new Array(this43.data.length + 10);
					data21 = this44;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this43.data,0,data21,0,this43.data.length);
					this43.data = data21;
				}
			}
			this43.data[5] = (1 - 2 * x * x - 2 * z * z) * scale[5];
			var this45 = this.rawData;
			if(!this45.fixed) {
				if(6 >= this45.length) this45.length = 7;
				if(this45.data.length < this45.length) {
					var data22;
					var this46;
					this46 = new Array(this45.data.length + 10);
					data22 = this46;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this45.data,0,data22,0,this45.data.length);
					this45.data = data22;
				}
			}
			this45.data[6] = (2 * y * z + 2 * w * x) * scale[6];
			var this47 = this.rawData;
			if(!this47.fixed) {
				if(7 >= this47.length) this47.length = 8;
				if(this47.data.length < this47.length) {
					var data23;
					var this48;
					this48 = new Array(this47.data.length + 10);
					data23 = this48;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this47.data,0,data23,0,this47.data.length);
					this47.data = data23;
				}
			}
			this47.data[7] = 0;
			var this49 = this.rawData;
			if(!this49.fixed) {
				if(8 >= this49.length) this49.length = 9;
				if(this49.data.length < this49.length) {
					var data24;
					var this50;
					this50 = new Array(this49.data.length + 10);
					data24 = this50;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this49.data,0,data24,0,this49.data.length);
					this49.data = data24;
				}
			}
			this49.data[8] = (2 * x * z + 2 * w * y) * scale[8];
			var this51 = this.rawData;
			if(!this51.fixed) {
				if(9 >= this51.length) this51.length = 10;
				if(this51.data.length < this51.length) {
					var data25;
					var this52;
					this52 = new Array(this51.data.length + 10);
					data25 = this52;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this51.data,0,data25,0,this51.data.length);
					this51.data = data25;
				}
			}
			this51.data[9] = (2 * y * z - 2 * w * x) * scale[9];
			var this53 = this.rawData;
			if(!this53.fixed) {
				if(10 >= this53.length) this53.length = 11;
				if(this53.data.length < this53.length) {
					var data26;
					var this54;
					this54 = new Array(this53.data.length + 10);
					data26 = this54;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this53.data,0,data26,0,this53.data.length);
					this53.data = data26;
				}
			}
			this53.data[10] = (1 - 2 * x * x - 2 * y * y) * scale[10];
			var this55 = this.rawData;
			if(!this55.fixed) {
				if(11 >= this55.length) this55.length = 12;
				if(this55.data.length < this55.length) {
					var data27;
					var this56;
					this56 = new Array(this55.data.length + 10);
					data27 = this56;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this55.data,0,data27,0,this55.data.length);
					this55.data = data27;
				}
			}
			this55.data[11] = 0;
			var this57 = this.rawData;
			if(!this57.fixed) {
				if(12 >= this57.length) this57.length = 13;
				if(this57.data.length < this57.length) {
					var data28;
					var this58;
					this58 = new Array(this57.data.length + 10);
					data28 = this58;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this57.data,0,data28,0,this57.data.length);
					this57.data = data28;
				}
			}
			this57.data[12] = components.data[0].x;
			var this59 = this.rawData;
			if(!this59.fixed) {
				if(13 >= this59.length) this59.length = 14;
				if(this59.data.length < this59.length) {
					var data29;
					var this60;
					this60 = new Array(this59.data.length + 10);
					data29 = this60;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this59.data,0,data29,0,this59.data.length);
					this59.data = data29;
				}
			}
			this59.data[13] = components.data[0].y;
			var this61 = this.rawData;
			if(!this61.fixed) {
				if(14 >= this61.length) this61.length = 15;
				if(this61.data.length < this61.length) {
					var data30;
					var this62;
					this62 = new Array(this61.data.length + 10);
					data30 = this62;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this61.data,0,data30,0,this61.data.length);
					this61.data = data30;
				}
			}
			this61.data[14] = components.data[0].z;
			var this63 = this.rawData;
			if(!this63.fixed) {
				if(15 >= this63.length) this63.length = 16;
				if(this63.data.length < this63.length) {
					var data31;
					var this64;
					this64 = new Array(this63.data.length + 10);
					data31 = this64;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this63.data,0,data31,0,this63.data.length);
					this63.data = data31;
				}
			}
			this63.data[15] = 1;
		} else {
			var x = components.data[1].x;
			var y = components.data[1].y;
			var z = components.data[1].z;
			var w = components.data[1].w;
			if(Type.enumEq(orientationStyle,openfl_geom_Orientation3D.AXIS_ANGLE)) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			var this33 = this.rawData;
			if(!this33.fixed) {
				if(0 >= this33.length) this33.length = 1;
				if(this33.data.length < this33.length) {
					var data16;
					var this34;
					this34 = new Array(this33.data.length + 10);
					data16 = this34;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this33.data,0,data16,0,this33.data.length);
					this33.data = data16;
				}
			}
			this33.data[0] = (1 - 2 * y * y - 2 * z * z) * scale[0];
			var this35 = this.rawData;
			if(!this35.fixed) {
				if(1 >= this35.length) this35.length = 2;
				if(this35.data.length < this35.length) {
					var data17;
					var this36;
					this36 = new Array(this35.data.length + 10);
					data17 = this36;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this35.data,0,data17,0,this35.data.length);
					this35.data = data17;
				}
			}
			this35.data[1] = (2 * x * y + 2 * w * z) * scale[1];
			var this37 = this.rawData;
			if(!this37.fixed) {
				if(2 >= this37.length) this37.length = 3;
				if(this37.data.length < this37.length) {
					var data18;
					var this38;
					this38 = new Array(this37.data.length + 10);
					data18 = this38;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this37.data,0,data18,0,this37.data.length);
					this37.data = data18;
				}
			}
			this37.data[2] = (2 * x * z - 2 * w * y) * scale[2];
			var this39 = this.rawData;
			if(!this39.fixed) {
				if(3 >= this39.length) this39.length = 4;
				if(this39.data.length < this39.length) {
					var data19;
					var this40;
					this40 = new Array(this39.data.length + 10);
					data19 = this40;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this39.data,0,data19,0,this39.data.length);
					this39.data = data19;
				}
			}
			this39.data[3] = 0;
			var this41 = this.rawData;
			if(!this41.fixed) {
				if(4 >= this41.length) this41.length = 5;
				if(this41.data.length < this41.length) {
					var data20;
					var this42;
					this42 = new Array(this41.data.length + 10);
					data20 = this42;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this41.data,0,data20,0,this41.data.length);
					this41.data = data20;
				}
			}
			this41.data[4] = (2 * x * y - 2 * w * z) * scale[4];
			var this43 = this.rawData;
			if(!this43.fixed) {
				if(5 >= this43.length) this43.length = 6;
				if(this43.data.length < this43.length) {
					var data21;
					var this44;
					this44 = new Array(this43.data.length + 10);
					data21 = this44;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this43.data,0,data21,0,this43.data.length);
					this43.data = data21;
				}
			}
			this43.data[5] = (1 - 2 * x * x - 2 * z * z) * scale[5];
			var this45 = this.rawData;
			if(!this45.fixed) {
				if(6 >= this45.length) this45.length = 7;
				if(this45.data.length < this45.length) {
					var data22;
					var this46;
					this46 = new Array(this45.data.length + 10);
					data22 = this46;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this45.data,0,data22,0,this45.data.length);
					this45.data = data22;
				}
			}
			this45.data[6] = (2 * y * z + 2 * w * x) * scale[6];
			var this47 = this.rawData;
			if(!this47.fixed) {
				if(7 >= this47.length) this47.length = 8;
				if(this47.data.length < this47.length) {
					var data23;
					var this48;
					this48 = new Array(this47.data.length + 10);
					data23 = this48;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this47.data,0,data23,0,this47.data.length);
					this47.data = data23;
				}
			}
			this47.data[7] = 0;
			var this49 = this.rawData;
			if(!this49.fixed) {
				if(8 >= this49.length) this49.length = 9;
				if(this49.data.length < this49.length) {
					var data24;
					var this50;
					this50 = new Array(this49.data.length + 10);
					data24 = this50;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this49.data,0,data24,0,this49.data.length);
					this49.data = data24;
				}
			}
			this49.data[8] = (2 * x * z + 2 * w * y) * scale[8];
			var this51 = this.rawData;
			if(!this51.fixed) {
				if(9 >= this51.length) this51.length = 10;
				if(this51.data.length < this51.length) {
					var data25;
					var this52;
					this52 = new Array(this51.data.length + 10);
					data25 = this52;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this51.data,0,data25,0,this51.data.length);
					this51.data = data25;
				}
			}
			this51.data[9] = (2 * y * z - 2 * w * x) * scale[9];
			var this53 = this.rawData;
			if(!this53.fixed) {
				if(10 >= this53.length) this53.length = 11;
				if(this53.data.length < this53.length) {
					var data26;
					var this54;
					this54 = new Array(this53.data.length + 10);
					data26 = this54;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this53.data,0,data26,0,this53.data.length);
					this53.data = data26;
				}
			}
			this53.data[10] = (1 - 2 * x * x - 2 * y * y) * scale[10];
			var this55 = this.rawData;
			if(!this55.fixed) {
				if(11 >= this55.length) this55.length = 12;
				if(this55.data.length < this55.length) {
					var data27;
					var this56;
					this56 = new Array(this55.data.length + 10);
					data27 = this56;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this55.data,0,data27,0,this55.data.length);
					this55.data = data27;
				}
			}
			this55.data[11] = 0;
			var this57 = this.rawData;
			if(!this57.fixed) {
				if(12 >= this57.length) this57.length = 13;
				if(this57.data.length < this57.length) {
					var data28;
					var this58;
					this58 = new Array(this57.data.length + 10);
					data28 = this58;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this57.data,0,data28,0,this57.data.length);
					this57.data = data28;
				}
			}
			this57.data[12] = components.data[0].x;
			var this59 = this.rawData;
			if(!this59.fixed) {
				if(13 >= this59.length) this59.length = 14;
				if(this59.data.length < this59.length) {
					var data29;
					var this60;
					this60 = new Array(this59.data.length + 10);
					data29 = this60;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this59.data,0,data29,0,this59.data.length);
					this59.data = data29;
				}
			}
			this59.data[13] = components.data[0].y;
			var this61 = this.rawData;
			if(!this61.fixed) {
				if(14 >= this61.length) this61.length = 15;
				if(this61.data.length < this61.length) {
					var data30;
					var this62;
					this62 = new Array(this61.data.length + 10);
					data30 = this62;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this61.data,0,data30,0,this61.data.length);
					this61.data = data30;
				}
			}
			this61.data[14] = components.data[0].z;
			var this63 = this.rawData;
			if(!this63.fixed) {
				if(15 >= this63.length) this63.length = 16;
				if(this63.data.length < this63.length) {
					var data31;
					var this64;
					this64 = new Array(this63.data.length + 10);
					data31 = this64;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this63.data,0,data31,0,this63.data.length);
					this63.data = data31;
				}
			}
			this63.data[15] = 1;
		}
		if(components.data[2].x == 0) {
			var this65 = this.rawData;
			if(!this65.fixed) {
				if(0 >= this65.length) this65.length = 1;
				if(this65.data.length < this65.length) {
					var data32;
					var this66;
					this66 = new Array(this65.data.length + 10);
					data32 = this66;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this65.data,0,data32,0,this65.data.length);
					this65.data = data32;
				}
			}
			this65.data[0] = 1e-15;
		}
		if(components.data[2].y == 0) {
			var this67 = this.rawData;
			if(!this67.fixed) {
				if(5 >= this67.length) this67.length = 6;
				if(this67.data.length < this67.length) {
					var data33;
					var this68;
					this68 = new Array(this67.data.length + 10);
					data33 = this68;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this67.data,0,data33,0,this67.data.length);
					this67.data = data33;
				}
			}
			this67.data[5] = 1e-15;
		}
		if(components.data[2].z == 0) {
			var this69 = this.rawData;
			if(!this69.fixed) {
				if(10 >= this69.length) this69.length = 11;
				if(this69.data.length < this69.length) {
					var data34;
					var this70;
					this70 = new Array(this69.data.length + 10);
					data34 = this70;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this69.data,0,data34,0,this69.data.length);
					this69.data = data34;
				}
			}
			this69.data[10] = 1e-15;
		}
		return !(components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].y == 0);
	}
	,transformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14],x * this.rawData.data[3] + y * this.rawData.data[7] + z * this.rawData.data[11] + this.rawData.data[15]);
	}
	,transformVectors: function(vin,vout) {
		var i = 0;
		var x;
		var y;
		var z;
		while(i + 3 <= vin.length) {
			x = vin.data[i];
			y = vin.data[i + 1];
			z = vin.data[i + 2];
			{
				if(!vout.fixed) {
					if(i >= vout.length) vout.length = i + 1;
					if(vout.data.length < vout.length) {
						var data;
						var this1;
						this1 = new Array(vout.data.length + 10);
						data = this1;
						haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data,0,data,0,vout.data.length);
						vout.data = data;
					}
				}
				vout.data[i] = x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12];
			}
			var key = i + 1;
			if(!vout.fixed) {
				if(key >= vout.length) vout.length = key + 1;
				if(vout.data.length < vout.length) {
					var data1;
					var this2;
					this2 = new Array(vout.data.length + 10);
					data1 = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data,0,data1,0,vout.data.length);
					vout.data = data1;
				}
			}
			vout.data[key] = x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13];
			var key1 = i + 2;
			if(!vout.fixed) {
				if(key1 >= vout.length) vout.length = key1 + 1;
				if(vout.data.length < vout.length) {
					var data2;
					var this3;
					this3 = new Array(vout.data.length + 10);
					data2 = this3;
					haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data,0,data2,0,vout.data.length);
					vout.data = data2;
				}
			}
			vout.data[key1] = x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14];
			i += 3;
		}
	}
	,transpose: function() {
		var oRawData;
		var this1 = this.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
		oRawData = vectorData;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data,0,this3.data.length);
				this3.data = data;
			}
		}
		this3.data[1] = oRawData.data[4];
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data1;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data1 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data1,0,this5.data.length);
				this5.data = data1;
			}
		}
		this5.data[2] = oRawData.data[8];
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data2;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data2 = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data2,0,this7.data.length);
				this7.data = data2;
			}
		}
		this7.data[3] = oRawData.data[12];
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data3;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data3 = this10;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data3,0,this9.data.length);
				this9.data = data3;
			}
		}
		this9.data[4] = oRawData.data[1];
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(6 >= this11.length) this11.length = 7;
			if(this11.data.length < this11.length) {
				var data4;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data4 = this12;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data4,0,this11.data.length);
				this11.data = data4;
			}
		}
		this11.data[6] = oRawData.data[9];
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(7 >= this13.length) this13.length = 8;
			if(this13.data.length < this13.length) {
				var data5;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data5 = this14;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data5,0,this13.data.length);
				this13.data = data5;
			}
		}
		this13.data[7] = oRawData.data[13];
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(8 >= this15.length) this15.length = 9;
			if(this15.data.length < this15.length) {
				var data6;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data6 = this16;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data6,0,this15.data.length);
				this15.data = data6;
			}
		}
		this15.data[8] = oRawData.data[2];
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(9 >= this17.length) this17.length = 10;
			if(this17.data.length < this17.length) {
				var data7;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data7 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data7,0,this17.data.length);
				this17.data = data7;
			}
		}
		this17.data[9] = oRawData.data[6];
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(11 >= this19.length) this19.length = 12;
			if(this19.data.length < this19.length) {
				var data8;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data8 = this20;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data8,0,this19.data.length);
				this19.data = data8;
			}
		}
		this19.data[11] = oRawData.data[14];
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(12 >= this21.length) this21.length = 13;
			if(this21.data.length < this21.length) {
				var data9;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data9 = this22;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data9,0,this21.data.length);
				this21.data = data9;
			}
		}
		this21.data[12] = oRawData.data[3];
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(13 >= this23.length) this23.length = 14;
			if(this23.data.length < this23.length) {
				var data10;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data10 = this24;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data10,0,this23.data.length);
				this23.data = data10;
			}
		}
		this23.data[13] = oRawData.data[7];
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(14 >= this25.length) this25.length = 15;
			if(this25.data.length < this25.length) {
				var data11;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data11 = this26;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data11,0,this25.data.length);
				this25.data = data11;
			}
		}
		this25.data[14] = oRawData.data[11];
	}
	,get_determinant: function() {
		return (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
	}
	,get_position: function() {
		return new openfl_geom_Vector3D(this.rawData.data[12],this.rawData.data[13],this.rawData.data[14]);
	}
	,set_position: function(val) {
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(12 >= this1.length) this1.length = 13;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[12] = val.x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(13 >= this3.length) this3.length = 14;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[13] = val.y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(14 >= this5.length) this5.length = 15;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[14] = val.z;
		return val;
	}
	,__class__: openfl_geom_Matrix3D
	,__properties__: {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
};
var openfl_geom_Orientation3D = $hxClasses["openfl.geom.Orientation3D"] = { __ename__ : ["openfl","geom","Orientation3D"], __constructs__ : ["AXIS_ANGLE","EULER_ANGLES","QUATERNION"] };
openfl_geom_Orientation3D.AXIS_ANGLE = ["AXIS_ANGLE",0];
openfl_geom_Orientation3D.AXIS_ANGLE.toString = $estr;
openfl_geom_Orientation3D.AXIS_ANGLE.__enum__ = openfl_geom_Orientation3D;
openfl_geom_Orientation3D.EULER_ANGLES = ["EULER_ANGLES",1];
openfl_geom_Orientation3D.EULER_ANGLES.toString = $estr;
openfl_geom_Orientation3D.EULER_ANGLES.__enum__ = openfl_geom_Orientation3D;
openfl_geom_Orientation3D.QUATERNION = ["QUATERNION",2];
openfl_geom_Orientation3D.QUATERNION.toString = $estr;
openfl_geom_Orientation3D.QUATERNION.__enum__ = openfl_geom_Orientation3D;
var openfl_geom_Transform = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = ["openfl","geom","Transform"];
openfl_geom_Transform.prototype = {
	concatenatedColorTransform: null
	,pixelBounds: null
	,__colorTransform: null
	,__displayObject: null
	,__hasMatrix: null
	,__hasMatrix3D: null
	,get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		if(!this.__colorTransform.__equals(value)) {
			this.__colorTransform = value;
			if(value != null) this.__displayObject.set_alpha(value.alphaMultiplier);
			this.__displayObject.__setRenderDirty();
		}
		return this.__colorTransform;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) return this.__displayObject.__transform.clone();
		return null;
	}
	,get_concatenatedMatrix: function() {
		if(this.__hasMatrix) return this.__displayObject.__getWorldTransform().clone();
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			var rotation = 180 / Math.PI * Math.atan2(value.d,value.c) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			this.__displayObject.__transform.copyFrom(value);
			this.__displayObject.__setTransformDirty();
		}
		return value;
	}
	,get_matrix3D: function() {
		if(this.__hasMatrix3D) {
			var matrix = this.__displayObject.__transform;
			return new openfl_geom_Matrix3D((function($this) {
				var $r;
				var value = [matrix.a,matrix.b,0.0,0.0,matrix.c,matrix.d,0.0,0.0,0.0,0.0,1.0,0.0,matrix.tx,matrix.ty,0.0,1.0];
				var vectorData = new openfl_VectorData();
				vectorData.length = value.length;
				vectorData.fixed = true;
				{
					var vec;
					var this1;
					this1 = new Array(value.length);
					vec = this1;
					var _g1 = 0;
					var _g = value.length;
					while(_g1 < _g) {
						var i = _g1++;
						vec[i] = value[i];
					}
					vectorData.data = vec;
				}
				$r = vectorData;
				return $r;
			}(this)));
		}
		return null;
	}
	,set_matrix3D: function(value) {
		if(value == null) {
			this.__hasMatrix3D = false;
			return null;
		}
		this.__hasMatrix = false;
		this.__hasMatrix3D = true;
		if(this.__displayObject != null) {
			var rotation = 180 / Math.PI * Math.atan2(value.rawData.data[5],value.rawData.data[4]) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			this.__displayObject.__transform.a = value.rawData.data[0];
			this.__displayObject.__transform.b = value.rawData.data[1];
			this.__displayObject.__transform.c = value.rawData.data[5];
			this.__displayObject.__transform.d = value.rawData.data[6];
			this.__displayObject.__transform.tx = value.rawData.data[12];
			this.__displayObject.__transform.ty = value.rawData.data[13];
			this.__displayObject.__setTransformDirty();
		}
		return value;
	}
	,__class__: openfl_geom_Transform
	,__properties__: {set_matrix3D:"set_matrix3D",get_matrix3D:"get_matrix3D",set_matrix:"set_matrix",get_matrix:"get_matrix",get_concatenatedMatrix:"get_concatenatedMatrix",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
var openfl_geom_Vector3D = function(x,y,z,w) {
	if(w == null) w = 0;
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
openfl_geom_Vector3D.__name__ = ["openfl","geom","Vector3D"];
openfl_geom_Vector3D.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
openfl_geom_Vector3D.X_AXIS = null;
openfl_geom_Vector3D.Y_AXIS = null;
openfl_geom_Vector3D.Z_AXIS = null;
openfl_geom_Vector3D.angleBetween = function(a,b) {
	var la = Math.sqrt(a.x * a.x + a.y * a.y + a.z * a.z);
	var lb = Math.sqrt(b.x * b.x + b.y * b.y + b.z * b.z);
	var dot = a.x * b.x + a.y * b.y + a.z * b.z;
	if(la != 0) dot /= la;
	if(lb != 0) dot /= lb;
	return Math.acos(dot);
};
openfl_geom_Vector3D.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
openfl_geom_Vector3D.get_X_AXIS = function() {
	return new openfl_geom_Vector3D(1,0,0);
};
openfl_geom_Vector3D.get_Y_AXIS = function() {
	return new openfl_geom_Vector3D(0,1,0);
};
openfl_geom_Vector3D.get_Z_AXIS = function() {
	return new openfl_geom_Vector3D(0,0,1);
};
openfl_geom_Vector3D.prototype = {
	length: null
	,lengthSquared: null
	,w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new openfl_geom_Vector3D(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new openfl_geom_Vector3D(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector3D) {
		this.x = sourceVector3D.x;
		this.y = sourceVector3D.y;
		this.z = sourceVector3D.z;
	}
	,crossProduct: function(a) {
		return new openfl_geom_Vector3D(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new openfl_geom_Vector3D(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: openfl_geom_Vector3D
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var openfl_media_ID3Info = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
openfl_media_ID3Info.__name__ = ["openfl","media","ID3Info"];
openfl_media_ID3Info.prototype = {
	album: null
	,artist: null
	,comment: null
	,genre: null
	,songName: null
	,track: null
	,year: null
	,__class__: openfl_media_ID3Info
};
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.id3 = null;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) this.load(stream,context);
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = ["openfl","media","Sound"];
openfl_media_Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl_media_Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl_media_Sound.fromFile = function(path) {
	return openfl_media_Sound.fromAudioBuffer(lime_audio_AudioBuffer.fromFile(path));
};
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,id3: null
	,isBuffering: null
	,url: null
	,__buffer: null
	,__sound: null
	,__soundID: null
	,close: function() {
		if(openfl_media_Sound.__registeredSounds.exists(this.__soundID)) createjs.Sound.removeSound(this.__soundID);
	}
	,load: function(stream,context) {
		this.url = stream.url;
		this.__soundID = haxe_io_Path.withoutExtension(stream.url);
		if(!openfl_media_Sound.__registeredSounds.exists(this.__soundID)) {
			openfl_media_Sound.__registeredSounds.set(this.__soundID,true);
			createjs.Sound.addEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.addEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			createjs.Sound.registerSound(this.url,this.__soundID);
		} else this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength,forcePlayAsMusic) {
		if(forcePlayAsMusic == null) forcePlayAsMusic = false;
		openfl_Lib.notImplemented("Sound.loadCompressedDataFromByteArray");
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
		openfl_Lib.notImplemented("Sound.loadPCMFromByteArray");
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0.0;
		if(sndTransform == null) sndTransform = new openfl_media_SoundTransform(1,0);
		var pan = sndTransform.pan;
		if(pan == 0) pan = -0.0000001;
		var instance;
		if(loops > 1) instance = createjs.Sound.play(this.__soundID,"any",0,startTime | 0,loops - 1,sndTransform.volume,pan); else instance = createjs.Sound.play(this.__soundID,"any",0,startTime | 0,0,sndTransform.volume,pan);
		return new openfl_media_SoundChannel(instance);
	}
	,get_id3: function() {
		return new openfl_media_ID3Info();
	}
	,get_length: function() {
		if(this.__buffer != null) {
		}
		return 0;
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		if(buffer == null) this.dispatchEvent(new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR)); else {
			this.__buffer = buffer;
			this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
		}
	}
	,SoundJS_onFileLoad: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
		}
	}
	,SoundJS_onFileError: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR));
		}
	}
	,__class__: openfl_media_Sound
	,__properties__: {get_length:"get_length",get_id3:"get_id3"}
});
var openfl_media_SoundChannel = function(soundInstance) {
	openfl_events_EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundInstance != null) {
		this.__soundInstance = soundInstance;
		this.__soundInstance.addEventListener("complete",$bind(this,this.source_onComplete));
		this.__isValid = true;
	}
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	leftPeak: null
	,rightPeak: null
	,__isValid: null
	,__source: null
	,__soundInstance: null
	,stop: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
	}
	,__dispose: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
		this.__soundInstance = null;
		this.__isValid = false;
	}
	,get_position: function() {
		if(!this.__isValid) return 0;
		return this.__soundInstance.getPosition();
	}
	,set_position: function(value) {
		if(!this.__isValid) return 0;
		this.__soundInstance.setPosition(value | 0);
		return this.__soundInstance.getPosition();
	}
	,get_soundTransform: function() {
		if(!this.__isValid) return new openfl_media_SoundTransform();
		return new openfl_media_SoundTransform(this.__soundInstance.getVolume(),this.__soundInstance.getPan());
	}
	,set_soundTransform: function(value) {
		if(!this.__isValid) return value;
		this.__soundInstance.setVolume(value.volume);
		this.__soundInstance.setPan(value.pan);
		return value;
	}
	,soundInstance_onComplete: function(_) {
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.SOUND_COMPLETE));
	}
	,source_onComplete: function() {
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.SOUND_COMPLETE));
	}
	,__class__: openfl_media_SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
var openfl_media_SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	if(bufferTime == null) bufferTime = 1000;
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
openfl_media_SoundLoaderContext.prototype = {
	bufferTime: null
	,checkPolicyFile: null
	,__class__: openfl_media_SoundLoaderContext
};
var openfl_media_SoundTransform = function(vol,panning) {
	if(panning == null) panning = 0;
	if(vol == null) vol = 1;
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl_media_SoundTransform.prototype = {
	leftToLeft: null
	,leftToRight: null
	,pan: null
	,rightToLeft: null
	,rightToRight: null
	,volume: null
	,clone: function() {
		return new openfl_media_SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl_media_SoundTransform
};
var openfl_net_NetConnection = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.net.NetConnection"] = openfl_net_NetConnection;
openfl_net_NetConnection.__name__ = ["openfl","net","NetConnection"];
openfl_net_NetConnection.__super__ = openfl_events_EventDispatcher;
openfl_net_NetConnection.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	connect: function(command,_,_1,_2,_3,_4) {
		if(command != null) throw new js__$Boot_HaxeError("Error: Can only connect in \"HTTP streaming\" mode");
		this.dispatchEvent(new openfl_events_NetStatusEvent(openfl_events_NetStatusEvent.NET_STATUS,false,true,{ code : "connectSuccess"}));
	}
	,__class__: openfl_net_NetConnection
});
var openfl_net_SharedObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.client = this;
	this.objectEncoding = 3;
};
$hxClasses["openfl.net.SharedObject"] = openfl_net_SharedObject;
openfl_net_SharedObject.__name__ = ["openfl","net","SharedObject"];
openfl_net_SharedObject.__sharedObjects = null;
openfl_net_SharedObject.getLocal = function(name,localPath,secure) {
	if(secure == null) secure = false;
	if(localPath == null) localPath = window.location.href;
	if(openfl_net_SharedObject.__sharedObjects == null) {
		openfl_net_SharedObject.__sharedObjects = new haxe_ds_StringMap();
		openfl_Lib.application.onExit.add(openfl_net_SharedObject.application_onExit);
	}
	var id = localPath + "/" + name;
	if(!openfl_net_SharedObject.__sharedObjects.exists(id)) {
		var sharedObject = new openfl_net_SharedObject();
		sharedObject.data = { };
		sharedObject.__localPath = localPath;
		sharedObject.__name = name;
		var encodedData = null;
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) encodedData = storage.getItem(localPath + ":" + name);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
		}
		if(encodedData != null && encodedData != "") try {
			var unserializer = new haxe_Unserializer(encodedData);
			unserializer.setResolver({ resolveEnum : Type.resolveEnum, resolveClass : openfl_net_SharedObject.__resolveClass});
			sharedObject.data = unserializer.unserialize();
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
		}
		openfl_net_SharedObject.__sharedObjects.set(id,sharedObject);
	}
	return openfl_net_SharedObject.__sharedObjects.get(id);
};
openfl_net_SharedObject.getRemote = function(name,remotePath,persistence,secure) {
	if(secure == null) secure = false;
	if(persistence == null) persistence = false;
	openfl_Lib.notImplemented("SharedObject.getRemote");
	return null;
};
openfl_net_SharedObject.__mkdir = function(directory) {
};
openfl_net_SharedObject.__resolveClass = function(name) {
	if(name != null) {
		if(StringTools.startsWith(name,"neash.")) name = StringTools.replace(name,"neash.","openfl.");
		if(StringTools.startsWith(name,"native.")) name = StringTools.replace(name,"native.","openfl.");
		if(StringTools.startsWith(name,"flash.")) name = StringTools.replace(name,"flash.","openfl.");
		if(StringTools.startsWith(name,"openfl._v2.")) name = StringTools.replace(name,"openfl._v2.","openfl.");
		if(StringTools.startsWith(name,"openfl._legacy.")) name = StringTools.replace(name,"openfl._legacy.","openfl.");
		return Type.resolveClass(name);
	}
	return null;
};
openfl_net_SharedObject.application_onExit = function(_) {
	var $it0 = openfl_net_SharedObject.__sharedObjects.iterator();
	while( $it0.hasNext() ) {
		var sharedObject = $it0.next();
		sharedObject.flush();
	}
};
openfl_net_SharedObject.__super__ = openfl_events_EventDispatcher;
openfl_net_SharedObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	client: null
	,data: null
	,fps: null
	,objectEncoding: null
	,__localPath: null
	,__name: null
	,clear: function() {
		this.data = { };
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) storage.removeItem(this.__localPath + ":" + this.__name);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
		}
	}
	,close: function() {
	}
	,connect: function(myConnection,params) {
		openfl_Lib.notImplemented("SharedObject.connect");
	}
	,flush: function(minDiskSpace) {
		if(minDiskSpace == null) minDiskSpace = 0;
		if(Reflect.fields(this.data).length == 0) return openfl_net_SharedObjectFlushStatus.FLUSHED;
		var encodedData = haxe_Serializer.run(this.data);
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				storage.removeItem(this.__localPath + ":" + this.__name);
				storage.setItem(this.__localPath + ":" + this.__name,encodedData);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return openfl_net_SharedObjectFlushStatus.PENDING;
		}
		return openfl_net_SharedObjectFlushStatus.FLUSHED;
	}
	,send: function($arguments) {
		openfl_Lib.notImplemented("SharedObject.send");
	}
	,setDirty: function(propertyName) {
	}
	,setProperty: function(propertyName,value) {
		if(this.data != null) this.data[propertyName] = value;
	}
	,get_size: function() {
		try {
			var d = haxe_Serializer.run(this.data);
			return haxe_io_Bytes.ofString(d).length;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return 0;
		}
	}
	,__class__: openfl_net_SharedObject
	,__properties__: {get_size:"get_size"}
});
var openfl_net_SharedObjectFlushStatus = $hxClasses["openfl.net.SharedObjectFlushStatus"] = { __ename__ : ["openfl","net","SharedObjectFlushStatus"], __constructs__ : ["FLUSHED","PENDING"] };
openfl_net_SharedObjectFlushStatus.FLUSHED = ["FLUSHED",0];
openfl_net_SharedObjectFlushStatus.FLUSHED.toString = $estr;
openfl_net_SharedObjectFlushStatus.FLUSHED.__enum__ = openfl_net_SharedObjectFlushStatus;
openfl_net_SharedObjectFlushStatus.PENDING = ["PENDING",1];
openfl_net_SharedObjectFlushStatus.PENDING.toString = $estr;
openfl_net_SharedObjectFlushStatus.PENDING.__enum__ = openfl_net_SharedObjectFlushStatus;
var openfl_net_URLLoader = function(request) {
	openfl_events_EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(openfl_net_URLLoaderDataFormat.TEXT);
	if(request != null) this.load(request);
};
$hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
openfl_net_URLLoader.__name__ = ["openfl","net","URLLoader"];
openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,data: null
	,dataFormat: null
	,close: function() {
	}
	,getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.onProgress),false);
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				s = null;
			}
			if(s == undefined) s = null;
			if(s != null) self.onStatus(s);
			if(s != null && s >= 200 && s < 400) self.onData(subject.response); else if(s == null) self.onError("Failed to connect or resolve host"); else if(s == 12029) self.onError("Failed to connect to host"); else if(s == 12007) self.onError("Unknown host"); else if(s == 0) {
				self.onError("Unable to make request (may be blocked due to cross-domain permissions)");
				self.onSecurityError("Unable to make request (may be blocked due to cross-domain permissions)");
			} else self.onError("Http Error #" + subject.status);
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js_Boot.__instanceof(data,openfl_utils_ByteArrayData)) {
			var data1 = data;
			var _g = this.dataFormat;
			switch(_g[1]) {
			case 0:
				uri = js_Boot.__cast(data1 , ArrayBuffer);
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js_Boot.__instanceof(data,openfl_net_URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) uri += "&";
				uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open(method,url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(method,url,true);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.onError(e.toString());
			return;
		}
		var _g2 = this.dataFormat;
		switch(_g2[1]) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g3 = 0;
		while(_g3 < requestHeaders.length) {
			var header = requestHeaders[_g3];
			++_g3;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		this.onOpen();
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,onData: function(_) {
		var content = this.getData();
		var _g = this.dataFormat;
		switch(_g[1]) {
		case 0:
			this.data = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		var evt = new openfl_events_Event(openfl_events_Event.COMPLETE);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onError: function(msg) {
		var evt = new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onOpen: function() {
		var evt = new openfl_events_Event(openfl_events_Event.OPEN);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onProgress: function(event) {
		var evt = new openfl_events_ProgressEvent(openfl_events_ProgressEvent.PROGRESS);
		evt.currentTarget = this;
		evt.bytesLoaded = event.loaded;
		evt.bytesTotal = event.total;
		this.dispatchEvent(evt);
	}
	,onSecurityError: function(msg) {
		var evt = new openfl_events_SecurityErrorEvent(openfl_events_SecurityErrorEvent.SECURITY_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onStatus: function(status) {
		var evt = new openfl_events_HTTPStatusEvent(openfl_events_HTTPStatusEvent.HTTP_STATUS,false,false,status);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == openfl_net_URLLoaderDataFormat.BINARY && !Reflect.hasField(window,"ArrayBuffer")) this.dataFormat = openfl_net_URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,__class__: openfl_net_URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
});
var openfl_net_URLLoaderDataFormat = $hxClasses["openfl.net.URLLoaderDataFormat"] = { __ename__ : ["openfl","net","URLLoaderDataFormat"], __constructs__ : ["BINARY","TEXT","VARIABLES"] };
openfl_net_URLLoaderDataFormat.BINARY = ["BINARY",0];
openfl_net_URLLoaderDataFormat.BINARY.toString = $estr;
openfl_net_URLLoaderDataFormat.BINARY.__enum__ = openfl_net_URLLoaderDataFormat;
openfl_net_URLLoaderDataFormat.TEXT = ["TEXT",1];
openfl_net_URLLoaderDataFormat.TEXT.toString = $estr;
openfl_net_URLLoaderDataFormat.TEXT.__enum__ = openfl_net_URLLoaderDataFormat;
openfl_net_URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
openfl_net_URLLoaderDataFormat.VARIABLES.toString = $estr;
openfl_net_URLLoaderDataFormat.VARIABLES.__enum__ = openfl_net_URLLoaderDataFormat;
var openfl_net_URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = "GET";
	this.contentType = null;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl_net_URLRequest.prototype = {
	contentType: null
	,data: null
	,method: null
	,requestHeaders: null
	,url: null
	,userAgent: null
	,formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == "GET" || this.data == null) return res;
		if(typeof(this.data) == "string" || js_Boot.__instanceof(this.data,openfl_utils_ByteArrayData)) {
			res = res.slice();
			res.push(new openfl_net_URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl_net_URLRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: openfl_net_URLRequestHeader
};
var openfl_net_URLVariables = function(source) {
	if(source != null) this.decode(source);
};
$hxClasses["openfl.net.URLVariables"] = openfl_net_URLVariables;
openfl_net_URLVariables.__name__ = ["openfl","net","URLVariables"];
openfl_net_URLVariables.prototype = {
	decode: function(source) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = source.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) Reflect.setField(this,StringTools.urlDecode(HxOverrides.substr(f1,0,eq)),StringTools.urlDecode(HxOverrides.substr(f1,eq + 1,null))); else if(eq != 0) Reflect.setField(this,decodeURIComponent(f1.split("+").join(" ")),"");
		}
	}
	,toString: function() {
		var result = [];
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,__class__: openfl_net_URLVariables
};
var openfl_system_LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	this.applicationDomain = applicationDomain;
	this.allowCodeImport = true;
	this.allowLoadBytesCodeExecution = true;
};
$hxClasses["openfl.system.LoaderContext"] = openfl_system_LoaderContext;
openfl_system_LoaderContext.__name__ = ["openfl","system","LoaderContext"];
openfl_system_LoaderContext.prototype = {
	allowCodeImport: null
	,allowLoadBytesCodeExecution: null
	,applicationDomain: null
	,checkPolicyFile: null
	,securityDomain: null
	,__class__: openfl_system_LoaderContext
};
var openfl_system_SecurityDomain = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl_system_SecurityDomain;
openfl_system_SecurityDomain.__name__ = ["openfl","system","SecurityDomain"];
openfl_system_SecurityDomain.prototype = {
	__class__: openfl_system_SecurityDomain
};
var openfl_system_System = function() { };
$hxClasses["openfl.system.System"] = openfl_system_System;
openfl_system_System.__name__ = ["openfl","system","System"];
openfl_system_System.__properties__ = {get_vmVersion:"get_vmVersion",get_totalMemory:"get_totalMemory"}
openfl_system_System.totalMemory = null;
openfl_system_System.vmVersion = null;
openfl_system_System.exit = function(code) {
	lime_system_System.exit(code);
};
openfl_system_System.gc = function() {
};
openfl_system_System.pause = function() {
	openfl_Lib.notImplemented("System.pause");
};
openfl_system_System.resume = function() {
	openfl_Lib.notImplemented("System.resume");
};
openfl_system_System.setClipboard = function(string) {
	lime_system_Clipboard.set_text(string);
};
openfl_system_System.get_totalMemory = function() {
	return (window.performance && window.performance.memory) ? window.performance.memory.usedJSHeapSize : 0;
};
openfl_system_System.get_vmVersion = function() {
	return "1.0.0";
};
var openfl_text_AntiAliasType = $hxClasses["openfl.text.AntiAliasType"] = { __ename__ : ["openfl","text","AntiAliasType"], __constructs__ : ["ADVANCED","NORMAL"] };
openfl_text_AntiAliasType.ADVANCED = ["ADVANCED",0];
openfl_text_AntiAliasType.ADVANCED.toString = $estr;
openfl_text_AntiAliasType.ADVANCED.__enum__ = openfl_text_AntiAliasType;
openfl_text_AntiAliasType.NORMAL = ["NORMAL",1];
openfl_text_AntiAliasType.NORMAL.toString = $estr;
openfl_text_AntiAliasType.NORMAL.__enum__ = openfl_text_AntiAliasType;
var openfl_text_FontStyle = $hxClasses["openfl.text.FontStyle"] = { __ename__ : ["openfl","text","FontStyle"], __constructs__ : ["REGULAR","ITALIC","BOLD_ITALIC","BOLD"] };
openfl_text_FontStyle.REGULAR = ["REGULAR",0];
openfl_text_FontStyle.REGULAR.toString = $estr;
openfl_text_FontStyle.REGULAR.__enum__ = openfl_text_FontStyle;
openfl_text_FontStyle.ITALIC = ["ITALIC",1];
openfl_text_FontStyle.ITALIC.toString = $estr;
openfl_text_FontStyle.ITALIC.__enum__ = openfl_text_FontStyle;
openfl_text_FontStyle.BOLD_ITALIC = ["BOLD_ITALIC",2];
openfl_text_FontStyle.BOLD_ITALIC.toString = $estr;
openfl_text_FontStyle.BOLD_ITALIC.__enum__ = openfl_text_FontStyle;
openfl_text_FontStyle.BOLD = ["BOLD",3];
openfl_text_FontStyle.BOLD.toString = $estr;
openfl_text_FontStyle.BOLD.__enum__ = openfl_text_FontStyle;
var openfl_text_FontType = $hxClasses["openfl.text.FontType"] = { __ename__ : ["openfl","text","FontType"], __constructs__ : ["DEVICE","EMBEDDED","EMBEDDED_CFF"] };
openfl_text_FontType.DEVICE = ["DEVICE",0];
openfl_text_FontType.DEVICE.toString = $estr;
openfl_text_FontType.DEVICE.__enum__ = openfl_text_FontType;
openfl_text_FontType.EMBEDDED = ["EMBEDDED",1];
openfl_text_FontType.EMBEDDED.toString = $estr;
openfl_text_FontType.EMBEDDED.__enum__ = openfl_text_FontType;
openfl_text_FontType.EMBEDDED_CFF = ["EMBEDDED_CFF",2];
openfl_text_FontType.EMBEDDED_CFF.toString = $estr;
openfl_text_FontType.EMBEDDED_CFF.__enum__ = openfl_text_FontType;
var openfl_text_GridFitType = $hxClasses["openfl.text.GridFitType"] = { __ename__ : ["openfl","text","GridFitType"], __constructs__ : ["NONE","PIXEL","SUBPIXEL"] };
openfl_text_GridFitType.NONE = ["NONE",0];
openfl_text_GridFitType.NONE.toString = $estr;
openfl_text_GridFitType.NONE.__enum__ = openfl_text_GridFitType;
openfl_text_GridFitType.PIXEL = ["PIXEL",1];
openfl_text_GridFitType.PIXEL.toString = $estr;
openfl_text_GridFitType.PIXEL.__enum__ = openfl_text_GridFitType;
openfl_text_GridFitType.SUBPIXEL = ["SUBPIXEL",2];
openfl_text_GridFitType.SUBPIXEL.toString = $estr;
openfl_text_GridFitType.SUBPIXEL.__enum__ = openfl_text_GridFitType;
var openfl_text_TextFieldAutoSize = $hxClasses["openfl.text.TextFieldAutoSize"] = { __ename__ : ["openfl","text","TextFieldAutoSize"], __constructs__ : ["CENTER","LEFT","NONE","RIGHT"] };
openfl_text_TextFieldAutoSize.CENTER = ["CENTER",0];
openfl_text_TextFieldAutoSize.CENTER.toString = $estr;
openfl_text_TextFieldAutoSize.CENTER.__enum__ = openfl_text_TextFieldAutoSize;
openfl_text_TextFieldAutoSize.LEFT = ["LEFT",1];
openfl_text_TextFieldAutoSize.LEFT.toString = $estr;
openfl_text_TextFieldAutoSize.LEFT.__enum__ = openfl_text_TextFieldAutoSize;
openfl_text_TextFieldAutoSize.NONE = ["NONE",2];
openfl_text_TextFieldAutoSize.NONE.toString = $estr;
openfl_text_TextFieldAutoSize.NONE.__enum__ = openfl_text_TextFieldAutoSize;
openfl_text_TextFieldAutoSize.RIGHT = ["RIGHT",3];
openfl_text_TextFieldAutoSize.RIGHT.toString = $estr;
openfl_text_TextFieldAutoSize.RIGHT.__enum__ = openfl_text_TextFieldAutoSize;
var openfl_text_TextFieldType = $hxClasses["openfl.text.TextFieldType"] = { __ename__ : ["openfl","text","TextFieldType"], __constructs__ : ["DYNAMIC","INPUT"] };
openfl_text_TextFieldType.DYNAMIC = ["DYNAMIC",0];
openfl_text_TextFieldType.DYNAMIC.toString = $estr;
openfl_text_TextFieldType.DYNAMIC.__enum__ = openfl_text_TextFieldType;
openfl_text_TextFieldType.INPUT = ["INPUT",1];
openfl_text_TextFieldType.INPUT.toString = $estr;
openfl_text_TextFieldType.INPUT.__enum__ = openfl_text_TextFieldType;
var openfl_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl_text_TextFormat.prototype = {
	align: null
	,blockIndent: null
	,bold: null
	,bullet: null
	,color: null
	,font: null
	,indent: null
	,italic: null
	,kerning: null
	,leading: null
	,leftMargin: null
	,letterSpacing: null
	,rightMargin: null
	,size: null
	,tabStops: null
	,target: null
	,underline: null
	,url: null
	,clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) this.font = format.font;
		if(format.size != null) this.size = format.size;
		if(format.color != null) this.color = format.color;
		if(format.bold != null) this.bold = format.bold;
		if(format.italic != null) this.italic = format.italic;
		if(format.underline != null) this.underline = format.underline;
		if(format.url != null) this.url = format.url;
		if(format.target != null) this.target = format.target;
		if(format.align != null) this.align = format.align;
		if(format.leftMargin != null) this.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.rightMargin = format.rightMargin;
		if(format.indent != null) this.indent = format.indent;
		if(format.leading != null) this.leading = format.leading;
		if(format.blockIndent != null) this.blockIndent = format.blockIndent;
		if(format.bullet != null) this.bullet = format.bullet;
		if(format.kerning != null) this.kerning = format.kerning;
		if(format.letterSpacing != null) this.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.tabStops = format.tabStops;
	}
	,__class__: openfl_text_TextFormat
};
var openfl_text_TextFormatAlign = $hxClasses["openfl.text.TextFormatAlign"] = { __ename__ : ["openfl","text","TextFormatAlign"], __constructs__ : ["LEFT","RIGHT","JUSTIFY","CENTER"] };
openfl_text_TextFormatAlign.LEFT = ["LEFT",0];
openfl_text_TextFormatAlign.LEFT.toString = $estr;
openfl_text_TextFormatAlign.LEFT.__enum__ = openfl_text_TextFormatAlign;
openfl_text_TextFormatAlign.RIGHT = ["RIGHT",1];
openfl_text_TextFormatAlign.RIGHT.toString = $estr;
openfl_text_TextFormatAlign.RIGHT.__enum__ = openfl_text_TextFormatAlign;
openfl_text_TextFormatAlign.JUSTIFY = ["JUSTIFY",2];
openfl_text_TextFormatAlign.JUSTIFY.toString = $estr;
openfl_text_TextFormatAlign.JUSTIFY.__enum__ = openfl_text_TextFormatAlign;
openfl_text_TextFormatAlign.CENTER = ["CENTER",3];
openfl_text_TextFormatAlign.CENTER.toString = $estr;
openfl_text_TextFormatAlign.CENTER.__enum__ = openfl_text_TextFormatAlign;
var openfl_text_TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl_text_TextLineMetrics;
openfl_text_TextLineMetrics.__name__ = ["openfl","text","TextLineMetrics"];
openfl_text_TextLineMetrics.prototype = {
	ascent: null
	,descent: null
	,height: null
	,leading: null
	,width: null
	,x: null
	,__class__: openfl_text_TextLineMetrics
};
var openfl_ui_GameInput = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_ui_GameInput.__instances.push(this);
};
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = ["openfl","ui","GameInput"];
openfl_ui_GameInput.getDeviceAt = function(index) {
	if(index >= 0 && index < openfl_ui_GameInput.__deviceList.length) return openfl_ui_GameInput.__deviceList[index];
	return null;
};
openfl_ui_GameInput.__getDevice = function(gamepad) {
	if(gamepad == null) return null;
	if(!(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null)) {
		var device = new openfl_ui_GameInputDevice(gamepad.get_guid(),gamepad.get_name());
		openfl_ui_GameInput.__deviceList.push(device);
		openfl_ui_GameInput.__devices.set(gamepad,device);
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
	}
	return openfl_ui_GameInput.__devices.h[gamepad.__id__];
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	if(device.enabled) {
		if(!device.__axis.h.hasOwnProperty(axis)) {
			var control1 = new openfl_ui_GameInputControl(device,"AXIS_" + (function($this) {
				var $r;
				switch(axis) {
				case 0:
					$r = "LEFT_X";
					break;
				case 1:
					$r = "LEFT_Y";
					break;
				case 2:
					$r = "RIGHT_X";
					break;
				case 3:
					$r = "RIGHT_Y";
					break;
				case 4:
					$r = "TRIGGER_LEFT";
					break;
				case 5:
					$r = "TRIGGER_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + axis + ")";
				}
				return $r;
			}(this)),-1,1);
			device.__axis.h[axis] = control1;
			device.__controls.push(control1);
		}
		var control = device.__axis.h[axis];
		control.value = value;
		control.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + (function($this) {
				var $r;
				switch(button) {
				case 0:
					$r = "A";
					break;
				case 1:
					$r = "B";
					break;
				case 2:
					$r = "X";
					break;
				case 3:
					$r = "Y";
					break;
				case 4:
					$r = "BACK";
					break;
				case 5:
					$r = "GUIDE";
					break;
				case 6:
					$r = "START";
					break;
				case 7:
					$r = "LEFT_STICK";
					break;
				case 8:
					$r = "RIGHT_STICK";
					break;
				case 9:
					$r = "LEFT_SHOULDER";
					break;
				case 10:
					$r = "RIGHT_SHOULDER";
					break;
				case 11:
					$r = "DPAD_UP";
					break;
				case 12:
					$r = "DPAD_DOWN";
					break;
				case 13:
					$r = "DPAD_LEFT";
					break;
				case 14:
					$r = "DPAD_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + button + ")";
				}
				return $r;
			}(this)),0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 1;
		control.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + (function($this) {
				var $r;
				switch(button) {
				case 0:
					$r = "A";
					break;
				case 1:
					$r = "B";
					break;
				case 2:
					$r = "X";
					break;
				case 3:
					$r = "Y";
					break;
				case 4:
					$r = "BACK";
					break;
				case 5:
					$r = "GUIDE";
					break;
				case 6:
					$r = "START";
					break;
				case 7:
					$r = "LEFT_STICK";
					break;
				case 8:
					$r = "RIGHT_STICK";
					break;
				case 9:
					$r = "LEFT_SHOULDER";
					break;
				case 10:
					$r = "RIGHT_SHOULDER";
					break;
				case 11:
					$r = "DPAD_UP";
					break;
				case 12:
					$r = "DPAD_DOWN";
					break;
				case 13:
					$r = "DPAD_LEFT";
					break;
				case 14:
					$r = "DPAD_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + button + ")";
				}
				return $r;
			}(this)),0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 0;
		control.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent(openfl_events_GameInputEvent.DEVICE_ADDED,null,null,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device != null) {
		if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null) {
			var x = openfl_ui_GameInput.__devices.h[gamepad.__id__];
			HxOverrides.remove(openfl_ui_GameInput.__deviceList,x);
			openfl_ui_GameInput.__devices.remove(gamepad);
		}
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent(openfl_events_GameInputEvent.DEVICE_REMOVED,null,null,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_ui_GameInput
});
var openfl_ui_GameInputControl = function(device,id,minValue,maxValue,value) {
	if(value == null) value = 0;
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = ["openfl","ui","GameInputControl"];
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	device: null
	,id: null
	,maxValue: null
	,minValue: null
	,value: null
	,__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = function(id,name) {
	this.__controls = [];
	this.__button = new haxe_ds_IntMap();
	this.__axis = new haxe_ds_IntMap();
	this.id = id;
	this.name = name;
	var control;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"AXIS_" + i,-1,1);
		this.__axis.h[i] = control;
		this.__controls.push(control);
	}
	var _g1 = 0;
	while(_g1 < 15) {
		var i1 = _g1++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i1,0,1);
		this.__button.h[i1] = control;
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = ["openfl","ui","GameInputDevice"];
openfl_ui_GameInputDevice.prototype = {
	enabled: null
	,id: null
	,name: null
	,sampleInterval: null
	,__axis: null
	,__button: null
	,__controls: null
	,__gamepad: null
	,getCachedSamples: function(data,append) {
		if(append == null) append = false;
		return 0;
	}
	,getControlAt: function(i) {
		if(i >= 0 && i < this.__controls.length) return this.__controls[i];
		return null;
	}
	,startCachingSamples: function(numSamples,controls) {
	}
	,stopCachingSamples: function() {
	}
	,get_numControls: function() {
		return this.__controls.length;
	}
	,__class__: openfl_ui_GameInputDevice
	,__properties__: {get_numControls:"get_numControls"}
};
var openfl_ui_Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl_ui_Keyboard.capsLock = null;
openfl_ui_Keyboard.numLock = null;
openfl_ui_Keyboard.isAccessible = function() {
	return false;
};
openfl_ui_Keyboard.__convertKeyCode = function(key) {
	switch(key) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 49;
	case 34:
		return 222;
	case 35:
		return 51;
	case 36:
		return 52;
	case 37:
		return 53;
	case 38:
		return 55;
	case 39:
		return 222;
	case 40:
		return 57;
	case 41:
		return 48;
	case 42:
		return 56;
	case 44:
		return 188;
	case 45:
		return 189;
	case 46:
		return 190;
	case 47:
		return 191;
	case 48:
		return 48;
	case 49:
		return 49;
	case 50:
		return 50;
	case 51:
		return 51;
	case 52:
		return 52;
	case 53:
		return 53;
	case 54:
		return 54;
	case 55:
		return 55;
	case 56:
		return 56;
	case 57:
		return 57;
	case 58:
		return 186;
	case 59:
		return 186;
	case 60:
		return 60;
	case 61:
		return 187;
	case 62:
		return 190;
	case 63:
		return 191;
	case 64:
		return 50;
	case 91:
		return 219;
	case 92:
		return 220;
	case 93:
		return 221;
	case 94:
		return 54;
	case 95:
		return 189;
	case 96:
		return 192;
	case 97:
		return 65;
	case 98:
		return 66;
	case 99:
		return 67;
	case 100:
		return 68;
	case 101:
		return 69;
	case 102:
		return 70;
	case 103:
		return 71;
	case 104:
		return 72;
	case 105:
		return 73;
	case 106:
		return 74;
	case 107:
		return 75;
	case 108:
		return 76;
	case 109:
		return 77;
	case 110:
		return 78;
	case 111:
		return 79;
	case 112:
		return 80;
	case 113:
		return 81;
	case 114:
		return 82;
	case 115:
		return 83;
	case 116:
		return 84;
	case 117:
		return 85;
	case 118:
		return 86;
	case 119:
		return 87;
	case 120:
		return 88;
	case 121:
		return 89;
	case 122:
		return 90;
	case 127:
		return 46;
	case 1073741881:
		return 20;
	case 1073741882:
		return 112;
	case 1073741883:
		return 113;
	case 1073741884:
		return 114;
	case 1073741885:
		return 115;
	case 1073741886:
		return 116;
	case 1073741887:
		return 117;
	case 1073741888:
		return 118;
	case 1073741889:
		return 119;
	case 1073741890:
		return 120;
	case 1073741891:
		return 121;
	case 1073741892:
		return 122;
	case 1073741893:
		return 123;
	case 1073741894:
		return 301;
	case 1073741895:
		return 145;
	case 1073741896:
		return 19;
	case 1073741897:
		return 45;
	case 1073741898:
		return 36;
	case 1073741899:
		return 33;
	case 1073741901:
		return 35;
	case 1073741902:
		return 34;
	case 1073741903:
		return 39;
	case 1073741904:
		return 37;
	case 1073741905:
		return 40;
	case 1073741906:
		return 38;
	case 1073741907:
		return 144;
	case 1073741908:
		return 111;
	case 1073741909:
		return 106;
	case 1073741910:
		return 109;
	case 1073741911:
		return 107;
	case 1073741912:
		return 108;
	case 1073741913:
		return 97;
	case 1073741914:
		return 98;
	case 1073741915:
		return 99;
	case 1073741916:
		return 100;
	case 1073741917:
		return 101;
	case 1073741918:
		return 102;
	case 1073741919:
		return 103;
	case 1073741920:
		return 104;
	case 1073741921:
		return 105;
	case 1073741922:
		return 96;
	case 1073741923:
		return 110;
	case 1073741925:
		return 302;
	case 1073741928:
		return 124;
	case 1073741929:
		return 125;
	case 1073741930:
		return 126;
	case 1073741982:
		return 13;
	case 1073742044:
		return 110;
	case 1073742048:
		return 17;
	case 1073742049:
		return 16;
	case 1073742050:
		return 18;
	case 1073742051:
		return 15;
	case 1073742052:
		return 17;
	case 1073742053:
		return 16;
	case 1073742054:
		return 18;
	case 1073742055:
		return 15;
	default:
		return key;
	}
};
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) shift = false;
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) return key - 48 + 48;
		if(key >= 65 && key <= 90) return key - 65 + 97;
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) return key - 65 + 65;
	}
	if(key >= 96 && key <= 105) return key - 96 + 48;
	switch(key) {
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	case 46:
		return 127;
	case 13:
		return 13;
	case 8:
		return 8;
	}
	return 0;
};
openfl_ui_Keyboard.__getKeyLocation = function(key) {
	switch(key) {
	case 1073742048:case 1073742049:case 1073742050:case 1073742051:
		return 1;
	case 1073742052:case 1073742053:case 1073742054:case 1073742055:
		return 2;
	case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
		return 3;
	default:
		return 0;
	}
};
var openfl_ui_Mouse = function() { };
$hxClasses["openfl.ui.Mouse"] = openfl_ui_Mouse;
openfl_ui_Mouse.__name__ = ["openfl","ui","Mouse"];
openfl_ui_Mouse.hide = function() {
	lime_ui_Mouse.hide();
};
openfl_ui_Mouse.show = function() {
	lime_ui_Mouse.show();
};
var openfl_ui_Multitouch = function() { };
$hxClasses["openfl.ui.Multitouch"] = openfl_ui_Multitouch;
openfl_ui_Multitouch.__name__ = ["openfl","ui","Multitouch"];
openfl_ui_Multitouch.__properties__ = {get_supportsTouchEvents:"get_supportsTouchEvents",set_inputMode:"set_inputMode",get_inputMode:"get_inputMode"}
openfl_ui_Multitouch.maxTouchPoints = null;
openfl_ui_Multitouch.supportedGestures = null;
openfl_ui_Multitouch.supportsGestureEvents = null;
openfl_ui_Multitouch.supportsTouchEvents = null;
openfl_ui_Multitouch.get_inputMode = function() {
	return openfl_ui_MultitouchInputMode.TOUCH_POINT;
};
openfl_ui_Multitouch.set_inputMode = function(inMode) {
	if(inMode == openfl_ui_MultitouchInputMode.GESTURE) return openfl_ui_Multitouch.get_inputMode();
	return inMode;
};
openfl_ui_Multitouch.get_supportsTouchEvents = function() {
	if(('ontouchstart' in document.documentElement) || (window.DocumentTouch && document instanceof DocumentTouch)) return true;
	return false;
};
var openfl_ui_MultitouchInputMode = $hxClasses["openfl.ui.MultitouchInputMode"] = { __ename__ : ["openfl","ui","MultitouchInputMode"], __constructs__ : ["NONE","TOUCH_POINT","GESTURE"] };
openfl_ui_MultitouchInputMode.NONE = ["NONE",0];
openfl_ui_MultitouchInputMode.NONE.toString = $estr;
openfl_ui_MultitouchInputMode.NONE.__enum__ = openfl_ui_MultitouchInputMode;
openfl_ui_MultitouchInputMode.TOUCH_POINT = ["TOUCH_POINT",1];
openfl_ui_MultitouchInputMode.TOUCH_POINT.toString = $estr;
openfl_ui_MultitouchInputMode.TOUCH_POINT.__enum__ = openfl_ui_MultitouchInputMode;
openfl_ui_MultitouchInputMode.GESTURE = ["GESTURE",2];
openfl_ui_MultitouchInputMode.GESTURE.toString = $estr;
openfl_ui_MultitouchInputMode.GESTURE.__enum__ = openfl_ui_MultitouchInputMode;
var openfl_utils__$ByteArray_ByteArray_$Impl_$ = {};
$hxClasses["openfl.utils._ByteArray.ByteArray_Impl_"] = openfl_utils__$ByteArray_ByteArray_$Impl_$;
openfl_utils__$ByteArray_ByteArray_$Impl_$.__name__ = ["openfl","utils","_ByteArray","ByteArray_Impl_"];
openfl_utils__$ByteArray_ByteArray_$Impl_$.__properties__ = {set_length:"set_length",get_length:"get_length"}
openfl_utils__$ByteArray_ByteArray_$Impl_$.defaultObjectEncoding = null;
openfl_utils__$ByteArray_ByteArray_$Impl_$._new = function(length) {
	if(length == null) length = 0;
	return new openfl_utils_ByteArrayData(length);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get = function(this1,index) {
	return this1.b[index];
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set = function(this1,index,value) {
	this1.b[index] = value & 255;
	return value;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer = function(buffer) {
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(buffer));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes = function(bytes) {
	if(js_Boot.__instanceof(bytes,openfl_utils_ByteArrayData)) return bytes; else return openfl_utils_ByteArrayData.fromBytes(bytes);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytesData = function(bytesData) {
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(bytesData));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes = function(byteArray) {
	return byteArray;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytesData = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toLimeBytes = function(byteArray) {
	return new lime_utils_Bytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(byteArray),byteArray.b.bufferValue);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length = function(this1) {
	return this1.__length;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length = function(this1,value) {
	if(value > 0) this1.__resize(value);
	this1.__length = value;
	return value;
};
var openfl_utils_IDataOutput = function() { };
$hxClasses["openfl.utils.IDataOutput"] = openfl_utils_IDataOutput;
openfl_utils_IDataOutput.__name__ = ["openfl","utils","IDataOutput"];
openfl_utils_IDataOutput.prototype = {
	get_endian: null
	,set_endian: null
	,objectEncoding: null
	,writeBoolean: null
	,writeByte: null
	,writeBytes: null
	,writeDouble: null
	,writeFloat: null
	,writeInt: null
	,writeMultiByte: null
	,writeShort: null
	,writeUTF: null
	,writeUTFBytes: null
	,writeUnsignedInt: null
	,__class__: openfl_utils_IDataOutput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian"}
};
var openfl_utils_IDataInput = function() { };
$hxClasses["openfl.utils.IDataInput"] = openfl_utils_IDataInput;
openfl_utils_IDataInput.__name__ = ["openfl","utils","IDataInput"];
openfl_utils_IDataInput.prototype = {
	get_bytesAvailable: null
	,get_endian: null
	,set_endian: null
	,objectEncoding: null
	,readBoolean: null
	,readByte: null
	,readBytes: null
	,readDouble: null
	,readFloat: null
	,readInt: null
	,readMultiByte: null
	,readShort: null
	,readUnsignedByte: null
	,readUnsignedInt: null
	,readUnsignedShort: null
	,readUTF: null
	,readUTFBytes: null
	,__class__: openfl_utils_IDataInput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
var openfl_utils_ByteArrayData = function(length) {
	if(length == null) length = 0;
	var bytes = haxe_io_Bytes.alloc(length);
	haxe_io_Bytes.call(this,bytes.b.buffer);
	this.__length = length;
	this.__endian = "bigEndian";
	this.position = 0;
};
$hxClasses["openfl.utils.ByteArrayData"] = openfl_utils_ByteArrayData;
openfl_utils_ByteArrayData.__name__ = ["openfl","utils","ByteArrayData"];
openfl_utils_ByteArrayData.__interfaces__ = [openfl_utils_IDataOutput,openfl_utils_IDataInput];
openfl_utils_ByteArrayData.fromBytes = function(bytes) {
	var result = new openfl_utils_ByteArrayData();
	result.__fromBytes(bytes);
	return result;
};
openfl_utils_ByteArrayData.__super__ = haxe_io_Bytes;
openfl_utils_ByteArrayData.prototype = $extend(haxe_io_Bytes.prototype,{
	objectEncoding: null
	,position: null
	,__endian: null
	,__length: null
	,clear: function() {
		this.__length = 0;
		this.position = 0;
	}
	,compress: function(algorithm) {
		this.__length = this.length;
		this.position = this.__length;
	}
	,deflate: function() {
		this.compress(openfl_utils_CompressionAlgorithm.DEFLATE);
	}
	,inflate: function() {
		this.uncompress(openfl_utils_CompressionAlgorithm.DEFLATE);
	}
	,readBoolean: function() {
		if(this.position < this.length) return this.get(this.position++) != 0; else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
			return false;
		}
	}
	,readByte: function() {
		var value = this.readUnsignedByte();
		if((value & 128) != 0) return value - 256; else return value;
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(length == 0) length = this.__length - this.position;
		if(this.position + length > this.__length) throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		if(bytes.__length < offset + length) bytes.__resize(offset + length);
		bytes.blit(offset,this,this.position,length);
		this.position += length;
	}
	,readDouble: function() {
		if(this.position + 8 > this.__length) throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		this.position += 8;
		return this.getDouble(this.position - 8);
	}
	,readFloat: function() {
		if(this.position + 4 > this.__length) throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		this.position += 4;
		return this.getFloat(this.position - 4);
	}
	,readInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == "littleEndian") return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1; else return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var value;
		if(this.__endian == "littleEndian") value = ch2 << 8 | ch1; else value = ch1 << 8 | ch2;
		if((value & 32768) != 0) return value - 65536; else return value;
	}
	,readUnsignedByte: function() {
		if(this.position < this.__length) return this.get(this.position++); else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
			return 0;
		}
	}
	,readUnsignedInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == "littleEndian") return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1; else return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
	}
	,readUnsignedShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		if(this.__endian == "littleEndian") return (ch2 << 8) + ch1; else return ch1 << 8 | ch2;
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(length) {
		if(this.position + length > this.__length) throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		this.position += length;
		return this.getString(this.position - length,length);
	}
	,uncompress: function(algorithm) {
		this.__length = this.length;
		this.position = 0;
	}
	,writeBoolean: function(value) {
		this.writeByte(value?1:0);
	}
	,writeByte: function(value) {
		this.__resize(this.position + 1);
		this.set(this.position++,value & 255);
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) == 0) return;
		if(length == 0) {
			var a = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes);
			length = a - offset;
		}
		this.__resize(this.position + length);
		this.blit(this.position,bytes,offset,length);
		this.position = this.position + length;
	}
	,writeDouble: function(value) {
		this.__resize(this.position + 8);
		this.setDouble(this.position,value);
		this.position += 8;
	}
	,writeFloat: function(value) {
		this.__resize(this.position + 4);
		this.setFloat(this.position,value);
		this.position += 4;
	}
	,writeInt: function(value) {
		this.__resize(this.position + 4);
		if(this.__endian == "littleEndian") {
			this.set(this.position++,value);
			this.set(this.position++,value >> 8);
			this.set(this.position++,value >> 16);
			this.set(this.position++,value >> 24);
		} else {
			this.set(this.position++,value >> 24);
			this.set(this.position++,value >> 16);
			this.set(this.position++,value >> 8);
			this.set(this.position++,value);
		}
	}
	,writeMultiByte: function(value,charSet) {
		this.writeUTFBytes(value);
	}
	,writeShort: function(value) {
		this.__resize(this.position + 2);
		if(this.__endian == "littleEndian") {
			this.set(this.position++,value);
			this.set(this.position++,value >> 8);
		} else {
			this.set(this.position++,value >> 8);
			this.set(this.position++,value);
		}
	}
	,writeUnsignedInt: function(value) {
		this.writeInt(value);
	}
	,writeUTF: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeShort(bytes.length);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
	}
	,writeUTFBytes: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(haxe_io_Bytes.ofString(value)));
	}
	,__fromBytes: function(bytes) {
		this.b = bytes.b;
		this.length = bytes.length;
		this.data = bytes.data;
		this.__length = bytes.length;
	}
	,__resize: function(size) {
		if(size > this.length) {
			var bytes = haxe_io_Bytes.alloc((size + 1) * 3 >> 1);
			bytes.blit(0,this,0,this.length);
			this.b = bytes.b;
			this.length = bytes.length;
			this.data = bytes.data;
		}
		if(this.__length < size) this.__length = size;
	}
	,__setData: function(bytes) {
		this.b = bytes.b;
		this.length = bytes.length;
		this.data = bytes.data;
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		return this.__endian;
	}
	,set_endian: function(value) {
		return this.__endian = value;
	}
	,__class__: openfl_utils_ByteArrayData
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
});
var openfl_utils_CompressionAlgorithm = $hxClasses["openfl.utils.CompressionAlgorithm"] = { __ename__ : ["openfl","utils","CompressionAlgorithm"], __constructs__ : ["DEFLATE","ZLIB","LZMA","GZIP"] };
openfl_utils_CompressionAlgorithm.DEFLATE = ["DEFLATE",0];
openfl_utils_CompressionAlgorithm.DEFLATE.toString = $estr;
openfl_utils_CompressionAlgorithm.DEFLATE.__enum__ = openfl_utils_CompressionAlgorithm;
openfl_utils_CompressionAlgorithm.ZLIB = ["ZLIB",1];
openfl_utils_CompressionAlgorithm.ZLIB.toString = $estr;
openfl_utils_CompressionAlgorithm.ZLIB.__enum__ = openfl_utils_CompressionAlgorithm;
openfl_utils_CompressionAlgorithm.LZMA = ["LZMA",2];
openfl_utils_CompressionAlgorithm.LZMA.toString = $estr;
openfl_utils_CompressionAlgorithm.LZMA.__enum__ = openfl_utils_CompressionAlgorithm;
openfl_utils_CompressionAlgorithm.GZIP = ["GZIP",3];
openfl_utils_CompressionAlgorithm.GZIP.toString = $estr;
openfl_utils_CompressionAlgorithm.GZIP.__enum__ = openfl_utils_CompressionAlgorithm;
var openfl_utils__$Object_Object_$Impl_$ = {};
$hxClasses["openfl.utils._Object.Object_Impl_"] = openfl_utils__$Object_Object_$Impl_$;
openfl_utils__$Object_Object_$Impl_$.__name__ = ["openfl","utils","_Object","Object_Impl_"];
openfl_utils__$Object_Object_$Impl_$._new = function() {
	return { };
};
openfl_utils__$Object_Object_$Impl_$.hasOwnProperty = function(this1,name) {
	return this1 != null && Object.prototype.hasOwnProperty.call(this1,name);
};
openfl_utils__$Object_Object_$Impl_$.isPrototypeOf = function(this1,theClass) {
	var c;
	if(this1 == null) c = null; else c = js_Boot.getClass(this1);
	while(c != null) {
		if(c == theClass) return true;
		c = Type.getSuperClass(c);
	}
	return false;
};
openfl_utils__$Object_Object_$Impl_$.iterator = function(this1) {
	var fields = Reflect.fields(this1);
	if(fields == null) fields = [];
	return HxOverrides.iter(fields);
};
openfl_utils__$Object_Object_$Impl_$.propertyIsEnumerable = function(this1,name) {
	return this1 != null && Object.prototype.hasOwnProperty.call(this1,name) && Std["is"](Reflect.field(this1,name),haxe_lang_Iterable);
};
openfl_utils__$Object_Object_$Impl_$.toLocaleString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.toString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.valueOf = function(this1) {
	return this1;
};
openfl_utils__$Object_Object_$Impl_$.__get = function(this1,key) {
	return Reflect.field(this1,key);
};
openfl_utils__$Object_Object_$Impl_$.__set = function(this1,key,value) {
	this1[key] = value;
	return value;
};
var haxe_lang_Iterator = function() { };
$hxClasses["haxe.lang.Iterator"] = haxe_lang_Iterator;
haxe_lang_Iterator.__name__ = ["haxe","lang","Iterator"];
haxe_lang_Iterator.prototype = {
	hasNext: null
	,next: null
	,__class__: haxe_lang_Iterator
};
var haxe_lang_Iterable = function() { };
$hxClasses["haxe.lang.Iterable"] = haxe_lang_Iterable;
haxe_lang_Iterable.__name__ = ["haxe","lang","Iterable"];
haxe_lang_Iterable.prototype = {
	iterator: null
	,__class__: haxe_lang_Iterable
};
var samples_BasicScene = function(scene) {
	var camera = new com_babylonhx_cameras_FreeCamera("camera1",new com_babylonhx_math_Vector3(0,5,-10),scene);
	camera.setTarget(new com_babylonhx_math_Vector3(0,0,0));
	camera.attachControl();
	var light = new com_babylonhx_lights_HemisphericLight("light1",new com_babylonhx_math_Vector3(0,1,0),scene);
	light.intensity = 0.7;
	var sphere = com_babylonhx_mesh_Mesh.CreateSphere("sphere1",16,2,scene);
	sphere.set_material(new com_babylonhx_materials_StandardMaterial("sm",scene));
	sphere.position.y = 1;
	var ground = com_babylonhx_mesh_Mesh.CreateGround("ground1",6,6,2,scene);
	scene._engine.runRenderLoop(function() {
		scene.render();
	});
};
$hxClasses["samples.BasicScene"] = samples_BasicScene;
samples_BasicScene.__name__ = ["samples","BasicScene"];
samples_BasicScene.prototype = {
	__class__: samples_BasicScene
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
if(Array.prototype.indexOf) HxOverrides.indexOf = function(a,o,i) {
	return Array.prototype.indexOf.call(a,o,i);
};
$hxClasses.Math = Math;
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
$hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
haxe_Resource.content = [{ name : "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicStop", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQUlBQUFBbXp1QnhBQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQUJkSlJFRlVlTnBpL1AvL1B3TmV3RGlxZ3VvcUFBSU1BUHVuSU92R0dSTk9BQUFBQUVsRlRrU3VRbUND"},{ name : "__ASSET__:bitmap_flixel_system_debug__Stats_GraphicMinimizeButton", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFvQUFBQUtDQVlBQUFDTk1zKzlBQUFBQm1KTFIwUUEvd0QvQVArZ3ZhZVRBQUFBQ1hCSVdYTUFBQUIyQUFBQWRnRk9leVlJQUFBQUIzUkpUVVVIM2dNSkNSMDFlRVp4RlFBQUFEOUpSRUZVR05OaitQLy8vMzhHQWdDdUJzWkExb1JOREM2QnJoQ1p6L1QvLzM4bWZOWVQ0elR5QUNPNjhZeU1qRmpGbUpBbHNacUVMRWRVOEJBYjRBQzRjRkxGc3d1SW53QUFBQUJKUlU1RXJrSmdnZz09"},{ name : "__ASSET__:bitmap_flixel_tile_GraphicAutoAlt", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUlBQUFBQUlDQU1BQUFBR0F3ZE1BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBS1QybERRMUJRYUc5MGIzTm9iM0FnU1VORElIQnliMlpwYkdVQUFIamFuVk5uVkZQcEZqMzMzdlJDUzRpQWxFdHZVaFVJSUZKQ2k0QVVrU1lxSVFrUVNvZ2hvZGtWVWNFUlJVVUVHOGlnaUFPT2pvQ01GVkVzRElvSzJBZmtJYUtPZzZPSWlzcjc0WHVqYTlhODkrYk4vclhYUHVlczg1Mnp6d2ZBQ0F5V1NETlJOWUFNcVVJZUVlQ0R4OFRHNGVRdVFJRUtKSEFBRUFpelpDRnovU01CQVBoK1BEd3JJc0FIdmdBQmVOTUxDQURBVFp2QU1CeUgvdy9xUXBsY0FZQ0VBY0Iwa1RoTENJQVVBRUI2amtLbUFFQkdBWUNkbUNaVEFLQUVBR0RMWTJMakFGQXRBR0FuZitiVEFJQ2QrSmw3QVFCYmxDRVZBYUNSQUNBVFpZaEVBR2c3QUt6UFZvcEZBRmd3QUJSbVM4UTVBTmd0QURCSlYyWklBTEMzQU1ET0VBdXlBQWdNQURCUmlJVXBBQVI3QUdESUl5TjRBSVNaQUJSRzhsYzg4U3V1RU9jcUFBQjRtYkk4dVNRNVJZRmJDQzF4QjFkWExoNG96a2tYS3hRMllRSmhta0F1d25tWkdUS0JOQS9nODh3QUFLQ1JGUkhnZy9QOWVNNE9yczdPTm82MkRsOHQ2cjhHL3lKaVl1UCs1YytyY0VBQUFPRjBmdEgrTEMrekdvQTdCb0J0L3FJbDdnUm9YZ3VnZGZlTFpySVBRTFVBb09uYVYvTncrSDQ4UEVXaGtMbloyZVhrNU5oS3hFSmJZY3BYZmY1bndsL0FWLzFzK1g0OC9QZjE0TDdpSklFeVhZRkhCUGpnd3N6MFRLVWN6NUlKaEdMYzVvOUgvTGNMLy93ZDB5TEVTV0s1V0NvVTQxRVNjWTVFbW96ek1xVWlpVUtTS2NVbDB2OWs0dDhzK3dNKzN6VUFzR28rQVh1UkxhaGRZd1AyU3ljUVdIVEE0dmNBQVBLN2I4SFVLQWdEZ0dpRDRjOTMvKzgvL1VlZ0pRQ0Faa21TY1FBQVhrUWtMbFRLc3ovSENBQUFSS0NCS3JCQkcvVEJHQ3pBQmh6QkJkekJDL3hnTm9SQ0pNVENRaEJDQ21TQUhISmdLYXlDUWlpR3piQWRLbUF2MUVBZE5NQlJhSWFUY0E0dXdsVzREajF3RC9waENKN0JLTHlCQ1FSQnlBZ1RZU0hhaUFGaWlsZ2pqZ2dYbVlYNEljRklCQktMSkNESmlCUlJJa3VSTlVneFVvcFVJRlZJSGZJOWNnSTVoMXhHdXBFN3lBQXlndnlHdkVjeGxJR3lVVDNVRExWRHVhZzNHb1JHb2d2UVpIUXhtbzhXb0p2UWNyUWFQWXcyb2VmUXEyZ1AybzgrUThjd3dPZ1lCelBFYkRBdXhzTkNzVGdzQ1pOank3RWlyQXlyeGhxd1Zxd0R1NG4xWTgreGR3UVNnVVhBQ1RZRWQwSWdZUjVCU0ZoTVdFN1lTS2dnSENRMEVkb0pOd2tEaEZIQ0p5S1RxRXUwSnJvUitjUVlZakl4aDFoSUxDUFdFbzhUTHhCN2lFUEVOeVFTaVVNeUo3bVFBa214cEZUU0V0SkcwbTVTSStrc3FaczBTQm9qazhuYVpHdXlCem1VTENBcnlJWGtuZVRENURQa0crUWg4bHNLbldKQWNhVDRVK0lvVXNwcVNobmxFT1UwNVFabG1ESkJWYU9hVXQyb29WUVJOWTlhUXEyaHRsS3ZVWWVvRXpSMW1qbk5neFpKUzZXdG9wWFRHbWdYYVBkcHIraDB1aEhkbFI1T2w5Qlgwc3ZwUitpWDZBUDBkd3dOaGhXRHg0aG5LQm1iR0FjWVp4bDNHSytZVEtZWjA0c1p4MVF3TnpIcm1PZVpENWx2VlZncXRpcDhGWkhLQ3BWS2xTYVZHeW92VkttcXBxcmVxZ3RWODFYTFZJK3BYbE45cmtaVk0xUGpxUW5VbHF0VnFwMVE2MU1iVTJlcE82aUhxbWVvYjFRL3BINVovWWtHV2NOTXcwOURwRkdnc1YvanZNWWdDMk1aczNnc0lXc05xNFoxZ1RYRUpySE4yWHgyS3J1WS9SMjdpejJxcWFFNVF6TktNMWV6VXZPVVpqOEg0NWh4K0p4MFRnbm5LS2VYODM2SzNoVHZLZUlwRzZZMFRMa3haVnhycXBhWGxsaXJTS3RScTBmcnZUYXU3YWVkcHIxRnUxbjdnUTVCeDBvblhDZEhaNC9PQlozblU5bFQzYWNLcHhaTlBUcjFyaTZxYTZVYm9idEVkNzl1cCs2WW5yNWVnSjVNYjZmZWViM24raHg5TC8xVS9XMzZwL1ZIREZnR3N3d2tCdHNNemhnOHhUVnhiendkTDhmYjhWRkRYY05BUTZWaGxXR1g0WVNSdWRFOG85VkdqVVlQakduR1hPTWs0MjNHYmNhakpnWW1JU1pMVGVwTjdwcFNUYm1tS2FZN1REdE14ODNNemFMTjFwazFtejB4MXpMbm0rZWIxNXZmdDJCYWVGb3N0cWkydUdWSnN1UmFwbG51dHJ4dWhWbzVXYVZZVlZwZHMwYXRuYTBsMXJ1dHU2Y1JwN2xPazA2cm50Wm53N0R4dHNtMnFiY1pzT1hZQnR1dXRtMjJmV0ZuWWhkbnQ4V3V3KzZUdlpOOXVuMk4vVDBIRFlmWkRxc2RXaDErYzdSeUZEcFdPdDZhenB6dVAzM0Y5SmJwTDJkWXp4RFAyRFBqdGhQTEtjUnBuVk9iMDBkbkYyZTVjNFB6aUl1SlM0TExMcGMrTHBzYnh0M0l2ZVJLZFBWeFhlRjYwdldkbTdPYnd1Mm8yNi91TnU1cDdvZmNuOHcwbnltZVdUTnowTVBJUStCUjVkRS9DNStWTUd2ZnJINVBRMCtCWjdYbkl5OWpMNUZYcmRld3Q2VjNxdmRoN3hjKzlqNXluK00rNHp3MzNqTGVXVi9NTjhDM3lMZkxUOE52bmwrRjMwTi9JLzlrLzNyLzBRQ25nQ1VCWndPSmdVR0JXd0w3K0hwOEliK09QenJiWmZheTJlMUJqS0M1UVJWQmo0S3RndVhCclNGb3lPeVFyU0gzNTVqT2tjNXBEb1ZRZnVqVzBBZGg1bUdMdzM0TUo0V0hoVmVHUDQ1d2lGZ2EwVEdYTlhmUjNFTnozMFQ2UkpaRTNwdG5NVTg1cnkxS05TbytxaTVxUE5vM3VqUzZQOFl1WmxuTTFWaWRXRWxzU3h3NUxpcXVObTVzdnQvODdmT0g0cDNpQytON0Y1Z3Z5RjF3ZWFIT3d2U0ZweGFwTGhJc09wWkFUSWhPT0pUd1FSQXFxQmFNSmZJVGR5V09Dbm5DSGNKbklpL1JOdEdJMkVOY0toNU84a2dxVFhxUzdKRzhOWGtreFRPbExPVzVoQ2Vwa0x4TURVemRtenFlRnBwMklHMHlQVHE5TVlPU2taQnhRcW9oVFpPMlorcG41bVoyeTZ4bGhiTCt4VzZMdHk4ZWxRZkphN09RckFWWkxRcTJRcWJvVkZvbzF5b0hzbWRsVjJhL3pZbktPWmFybml2TjdjeXp5dHVRTjV6dm4vL3RFc0lTNFpLMnBZWkxWeTBkV09hOXJHbzVzanh4ZWRzSzR4VUZLNFpXQnF3OHVJcTJLbTNWVDZ2dFY1ZXVmcjBtZWsxcmdWN0J5b0xCdFFGcjZ3dFZDdVdGZmV2YzErMWRUMWd2V2QrMVlmcUduUnMrRlltS3JoVGJGNWNWZjlnbzNIamxHNGR2eXIrWjNKUzBxYXZFdVdUUFp0Sm02ZWJlTFo1YkRwYXFsK2FYRG00TjJkcTBEZDlXdE8zMTlrWGJMNWZOS051N2c3WkR1YU8vUExpOFphZkp6czA3UDFTa1ZQUlUrbFEyN3RMZHRXSFgrRzdSN2h0N3ZQWTA3TlhiVzd6My9UN0p2dHRWQVZWTjFXYlZaZnRKKzdQM1A2NkpxdW40bHZ0dFhhMU9iWEh0eHdQU0EvMEhJdzYyMTduVTFSM1NQVlJTajlZcjYwY094eCsrL3AzdmR5ME5OZzFWalp6RzRpTndSSG5rNmZjSjMvY2VEVHJhZG94N3JPRUgweDkySFdjZEwycENtdkthUnB0VG12dGJZbHU2VDh3KzBkYnEzbnI4UjlzZkQ1dzBQRmw1U3ZOVXlXbmE2WUxUazJmeXo0eWRsWjE5Zmk3NTNHRGJvclo3NTJQTzMyb1BiKys2RUhUaDBrWC9pK2M3dkR2T1hQSzRkUEt5MitVVFY3aFhtcTg2WDIzcWRPbzgvcFBUVDhlN25MdWFycmxjYTdudWVyMjFlMmIzNlJ1ZU44N2Q5TDE1OFJiLzF0V2VPVDNkdmZONmIvZkY5L1hmRnQxK2NpZjl6c3U3MlhjbjdxMjhUN3hmOUVEdFFkbEQzWWZWUDF2KzNOanYzSDlxd0hlZzg5SGNSL2NHaFlQUC9wSDFqdzlEQlkrWmo4dUdEWWJybmpnK09UbmlQM0w5NmZ5blE4OWt6eWFlRi82aS9zdXVGeFl2ZnZqVjY5Zk8wWmpSb1pmeWw1Ty9iWHlsL2VyQTZ4bXYyOGJDeGg2K3lYZ3pNVjcwVnZ2dHdYZmNkeDN2bzk4UFQrUjhJSDhvLzJqNXNmVlQwS2Y3a3htVGsvOEVBNWp6L0dNekxkc0FBQUFnWTBoU1RRQUFlaVVBQUlDREFBRDUvd0FBZ09rQUFIVXdBQURxWUFBQU9wZ0FBQmR2a2wvRlJnQUFBd0JRVEZSRkFBQUFYbDVlQUFBQUF3TURCQVFFQlFVRkJnWUdCd2NIQ0FnSUNRa0pDZ29LQ3dzTERBd01EUTBORGc0T0R3OFBFQkFRRVJFUkVoSVNFeE1URkJRVUZSVVZGaFlXRnhjWEdCZ1lHUmtaR2hvYUd4c2JIQndjSFIwZEhoNGVIeDhmSUNBZ0lTRWhJaUlpSXlNakpDUWtKU1VsSmlZbUp5Y25LQ2dvS1NrcEtpb3FLeXNyTEN3c0xTMHRMaTR1THk4dk1EQXdNVEV4TWpJeU16TXpORFEwTlRVMU5qWTJOemMzT0RnNE9UazVPam82T3pzN1BEdzhQVDA5UGo0K1B6OC9RRUJBUVVGQlFrSkNRME5EUkVSRVJVVkZSa1pHUjBkSFNFaElTVWxKU2twS1MwdExURXhNVFUxTlRrNU9UMDlQVUZCUVVWRlJVbEpTVTFOVFZGUlVWVlZWVmxaV1YxZFhXRmhZV1ZsWldscGFXMXRiWEZ4Y1hWMWRYbDVlWDE5ZllHQmdZV0ZoWW1KaVkyTmpaR1JrWldWbFptWm1aMmRuYUdob2FXbHBhbXBxYTJ0cmJHeHNiVzF0Ym01dWIyOXZjSEJ3Y1hGeGNuSnljM056ZEhSMGRYVjFkbloyZDNkM2VIaDRlWGw1ZW5wNmUzdDdmSHg4ZlgxOWZuNStmMzkvZ0lDQWdZR0Jnb0tDZzRPRGhJU0VoWVdGaG9hR2g0ZUhpSWlJaVltSmlvcUtpNHVMakl5TWpZMk5qbzZPajQrUGtKQ1FrWkdSa3BLU2s1T1RsSlNVbFpXVmxwYVdsNWVYbUppWW1abVptcHFhbTV1Ym5KeWNuWjJkbnA2ZW41K2ZvS0Nnb2FHaG9xS2lvNk9qcEtTa3BhV2xwcWFtcDZlbnFLaW9xYW1wcXFxcXE2dXJyS3lzcmEydHJxNnVyNit2c0xDd3NiR3hzckt5czdPenRMUzB0YlcxdHJhMnQ3ZTN1TGk0dWJtNXVycTZ1N3U3dkx5OHZiMjl2cjYrdjcrL3dNREF3Y0hCd3NMQ3c4UER4TVRFeGNYRnhzYkd4OGZIeU1qSXljbkp5c3JLeTh2THpNek16YzNOenM3T3o4L1AwTkRRMGRIUjB0TFMwOVBUMU5UVTFkWFYxdGJXMTlmWDJOalkyZG5aMnRyYTI5dmIzTnpjM2QzZDN0N2UzOS9mNE9EZzRlSGg0dUxpNCtQajVPVGs1ZVhsNXVibTUrZm42T2pvNmVucDZ1cnE2K3ZyN096czdlM3Q3dTd1NysvdjhQRHc4Zkh4OHZMeTgvUHo5UFQwOWZYMTl2YjI5L2YzK1BqNCtmbjUrdnI2Ky92Ny9QejgvZjM5L3Y3Ky8vLy9Ra3FmSXdBQUFBTjBVazVULy84QTE4b05RUUFBQUhaSlJFRlVlTnJzVTBrU3dDQUlTeGovLzJUcFFSaGJOZHBiTC9VQ1lRa09Dd3dBZ0JBQU9NZ0ViTkt3OG0rTk4vN1pYMnF6MVFNRlBaU0loNHRLbWU5UFhKVy9OTFdYWFJPNzBQZVJIV3Qrdzhmdi8wREorWENhRGw5TWZGNWRIblpDdGNER1RGdldvRDdUYlVjcGIrd0NBQUQvL3dNQXl5QVNLMkFhNkV3QUFBQUFTVVZPUks1Q1lJST0"},{ name : "__ASSET__:bitmap_flixel_system_debug_GraphicArrowRight", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQUQ1SlJFRlVlTnBpK1AvLy96SWdqZ1JpQmtJWVJNQUFRVTNJaWdscXdxWVlweVo4aWpFME1mNEhheUVLTENmSlpJcmRURlJvRUJYT1JNY2dRSUFCQU1xdGZ6aUhGZ2JoQUFBQUFFbEZUa1N1UW1DQw"},{ name : "__ASSET__:bitmap_flixel_system_debug_GraphicWatch", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUlHTklVazBBQUhvbEFBQ0Fnd0FBK2Y4QUFJRHBBQUIxTUFBQTZtQUFBRHFZQUFBWGI1SmZ4VVlBQUFEY1NVUkJWSGphakpBaFM4TmhHTVIvZTFGWkdNSmd3U2FyVnNPS1dSSGJtcGo4Qkg0Q205L0JabDJ3R3NSZ0U5Um1GbHcwQ0NKWUxIZG44UDF2KzZ1SUIwOTU3cmk3NStrazRiOG9BTmdGZXhmN0d2c0ZlNHA5Z2oxb3FaTVFhVDlTSXQxSE9vNTBGdWs5MG1Xa2ZoS1N6TVRUU0xlUnVnMFI2VENTSXgwMHUxSUQxb0VIU3ZsWUNMMEJYb0ZodS9NWHNZYzlxamVzQWtkQXQzS3R6cHVSSGlPOVJicUtkRmR2T0krMDFOVG96RjVuYndEakd0c0hkb0JuWUp0U251Yk9peU90Uk9wRk9xM3VGeitkdjhOZUF5YkFNcVZzQVgrSWY4SG5BTlI0d3BRazlwRnhBQUFBQUVsRlRrU3VRbUND"},{ name : "__ASSET__:bitmap_flixel_system_debug_GraphicArrowLeft", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQm1KTFIwUUFBQUFBQUFENVE3dC9BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUIzUkpUVVVIM2dRWkVqQTAzU0hjY2dBQUFFQkpSRUZVR05Oai9QLy9Qd01SSUpLQmdjR1g0Zi8vLy9odzVQLy8vNWY5aHdLaUZPRlNqRlVSdW1LOGlwQVZFMVJFdHNra3U1bXMwTUNyaVpHVUdBUUFzOU5wbXo4SWloRUFBQUFBU1VWT1JLNUNZSUk9"},{ name : "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicOpen", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQUZSSlJFRlVlTnFVa0ZFT3dDQUlRd3UzM0FXNVpyY2xVNWxXM1Y0Q0lhUzhENHdrdnVKcGpxdTRxTEJrdmdkYmlPbkppSm14eFVjT3NVTnRYUkRpWUFpWElNU0JOTWV6QzJWMi9FRllacnordk9VVVlBQURCZWdXcGc5L1hBQUFBQUJKUlU1RXJrSmdnZz09"},{ name : "__ASSET__:bitmap_flixel_system_debug__Window_GraphicCloseButton", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFnQUFBQUlDQVlBQUFERUQ3NkxBQUFBQkhOQ1NWUUlDQWdJZkFoa2lBQUFBQWx3U0ZsekFBQUFkZ0FBQUhZQlRuc21DQUFBQUJsMFJWaDBVMjltZEhkaGNtVUFkM2QzTG1sdWEzTmpZWEJsTG05eVo1dnVQQm9BQUFCL1NVUkJWQmlWVFkweENzSlFFQVhIYnlTZXdNdWxUV2R2YTZPbGxXSnBDQ0syaWsxT1krY3RRc1lpcS9rREM4dnM3bHZVU3UzVXBVcFdPN1ZDM1RqU3FXVU1EK0dldisxdGlKZDZ5dm95ajl3NzhWQVhLb21SR2JCaW9nY0dBTlNrTm5GNVY0L1IzOVNFMm9hNHF2TjRkdzUzS1lBMzBBRDFQeGJXUUFGOHZwYVlyTldBYU5WMEFBQUFBRWxGVGtTdVFtQ0M"},{ name : "__ASSET__:bitmap_flixel_system_debug_GraphicBitmapLog", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQm1KTFIwUUFBQUFBQUFENVE3dC9BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUIzUkpUVVVIM2dRWkV4c2Fka1ZHNHdBQUFFRkpSRUZVR05PVnpjc0pBREFJQk5FdDFUSnl0UFBKS2VSbnhBd3NlSGlnOUJOUW1mRURBU3REUUdXWTRRdStjQWhQN013cytqaU94cDR5dk9ZWkxrRkFIVzZYWUMwODhkcWRBQUFBQUVsRlRrU3VRbUND"},{ name : "__ASSET__:bitmap_flixel_system_debug_GraphicStats", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUlHTklVazBBQUhvbEFBQ0Fnd0FBK2Y4QUFJRHBBQUIxTUFBQTZtQUFBRHFZQUFBWGI1SmZ4VVlBQUFBeFNVUkJWSGphWXZ6Ly96OERzWUNKZ1FSQWpPTC9VRXdkaytHbTBkVE5XQlZqdFpvK3ptQWtKUVlCQUFBQS8vOERBTDhIREFscWRHWVJBQUFBQUVsRlRrU3VRbUND"},{ name : "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicRestart", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQUU1SlJFRlVlTnBpK1AvLy96SWdaa0REV01WQXhIOHNDckdLb1N1R0tjUXFocXdZV1NGV01aaGlkSVZZeFJqQk9vZ0VURkI2T1JZNVRERnkzRXh5YUJBTVp4WXNib3ZDNG42d0dFQ0FBUUFHbVQrVFE1cWdGQUFBQUFCSlJVNUVya0pnZ2c9PQ"},{ name : "__ASSET__:bitmap_flixel_system_debug__Window_GraphicWindowHandle", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFvQUFBQUtDQVlBQUFDTk1zKzlBQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQUZCSlJFRlVlTnFNandFS0FDQUlBeFgyeWg3b055MmpRa3lwUWJUMGRFU3FTblllRXZoWE5zRE1ZblhlelZHNHdBME5OVlJaSGpLUEgyaDYvNWwxVzBPaXgzTlRFbDFDSjdxS0MvNExraTdBQUQ1WWZydllMZlJQQUFBQUFFbEZUa1N1UW1DQw"},{ name : "__ASSET__:bitmap_flixel_system_debug_GraphicLog", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUlHTklVazBBQUhvbEFBQ0Fnd0FBK2Y4QUFJRHBBQUIxTUFBQTZtQUFBRHFZQUFBWGI1SmZ4VVlBQUFBa1NVUkJWSGphWXZ6Ly96OERzWUFGaVkxUEZ5TzZZc1pSa3dlSHlRQUFBQUQvL3dNQStmWUlMQWhqbnhZQUFBQUFTVVZPUks1Q1lJST0"},{ name : "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicPause", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQUI1SlJFRlVlTnBpL0E4RURLaUFFWW1OSXNmRVFBSVlWVHdJRlFNRUdBQ1JGUVVTVTBxVk1RQUFBQUJKUlU1RXJrSmdnZz09"},{ name : "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicStep", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQUVWSlJFRlVlTnBpK1AvLy96SWdqZ1JpQmdKNEdZaUFBVUthL2lNckpxUUpxMkpjbXZBcVJ0ZjBueEdzZzBqQVJJU2E1VUFjQldaUjZtYWlRb09vY0NZNkJnRUNEQUF3WUY0RDlrNTlxUUFBQUFCSlJVNUVya0pnZ2c9PQ"},{ name : "__ASSET__:bitmap_flixel_system_debug__Stats_GraphicMaximizeButton", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFvQUFBQUtDQVlBQUFDTk1zKzlBQUFBQm1KTFIwUUEvd0QvQVArZ3ZhZVRBQUFBQ1hCSVdYTUFBQUIyQUFBQWRnRk9leVlJQUFBQUIzUkpUVVVIM2dNSkNSOFVCaGtEeVFBQUFFOUpSRUZVR05PdGtFRVN3REFJQW92Ly8vUDJvb2FhOUJaUFpvQXdxd0NlTlpMVUQ5ZkNIVzc2VFkyZmR3MklVOVVwZUhlVU5kMVlBRm5kTUFGUW1ndTV0eGFWM202VDV5bW9EL0gwT3ZrTFNBOUI4bis0Y2pvQUFBQUFTVVZPUks1Q1lJST0"},{ name : "__ASSET__:bitmap_flixel_ui__FlxTypedButton_GraphicButton", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUZBQUFBQThDQVlBQUFEeEp6Mk1BQUFBQVhOU1IwSUFyczRjNlFBQUFBUm5RVTFCQUFDeGp3djhZUVVBQUFBSmNFaFpjd0FBRHNNQUFBN0RBY2R2cUdRQUFBQWFkRVZZZEZOdlpuUjNZWEpsQUZCaGFXNTBMazVGVkNCMk15NDFMakV3TVBSeW9RQUFBWFpKUkVGVWVGN3RtMEVLZzBBTVJlZGVYc3M3ZUE0RjcrRUozSGdUdHk3U3BraWhNbU5tU0FjY2VFSUs3Y0xGNC84NHpUZEJSTUw3MGcrcWtNSEpMc2k2cmpKTkUxWEFRSm1kb2d2Uzk3MTBYWWNDTXhXb3JKVFpEMEQ5b3RlKzc5UU5BMldrcktJQWwyVVJ5bVlBUUtkUUFBaEEyMlkxV3hFS1JJRW9zT21uUFJiR3dsZ1lDOWM4Smp6OTN2VEFXajF3R0FhaGJBWlJCVExPeWg4b1I4ZForaU9WeitBN3ptS2tuNis4YSt6eFlRZEFKMENsU2laU25nZVJpV1RtSDdHMDhqWVRPWTVEcURTRDIweGsyemFoYkFiSmZ5TEFzK0VwSXdBNm5RWkFBT1paclZaTFFvRW9FQVUyZlZ6Q3dsZ1lDMlBoV2tlRUZ1NmI3SUh6UEF0bE15QVRjWXl5RkI2WnlCL3lIeklScHdyUGQ4ckpSRHo3TWV5SkZPeUZYUGRveUVRY0ZrNW1JdG9ZS1p0QjhodzRqcU5RTmdNQU9vVUNRQURhTnF2WmlsQWdDa1NCVFQvdHNUQVd4c0pZdU9ZeDRlbjNwZ2ZTQXgvWUE5a1R5WC9aUERyT1lveGxqN0d1akQ3VGJOWWM4cFVYMnhONUFRa0dlQlBxNStCakFBQUFBRWxGVGtTdVFtQ0M"},{ name : "__ASSET__:bitmap_flixel_input_mouse__FlxMouse_GraphicCursor", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUJnQUFBQWdDQVlBQUFBSVhyZzRBQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQW1SSlJFRlVlTnEwbHM5ckUwRVV4Nzg3MllTZ0psVFNTaVdwVnZyRElxaEZVSUtnK0NlSUlncWVGRS9pVFJDOHBMUVhqeUwwNGc5Q29tWFRKSVcwT1ZVRU1UZEJSSWs1VzZXdGtLSlNiR25EcHNuNlprMlczVFFicytua3dkdVpuVm0rbjMwenczc2pCVUxCQ0lBcGRNbGMrL3orZDlScTVMbHVBT1JhTzhrZkR5ZW5XMGJ5YU9LZVl3RGpEMDNUZEFnSlJFUkhJTkVlYUpWS0ZZeEprQ1NKajAzWVJYTC85bVZib2Q2QmtIMEV1bWxTdlNjMEVnTnc1ZXAxakE2UENJY1lnQU0rUDU0OG5zYXh3VUdoRUdaKzJTaFZNSjlLNCtqQUVXRVFDMkM3cEVKakhpeWswd2dGZzBJZ3JIRmdhYm1vaTJkbWt6amMzNzlueUM3QW44MHQvRjdmMFBlQ1F3NzE5UmtRT29xUlBRTzRmVjBwNnUzdzBCQXl5U1FDZ1VESGtLYUE0czkxYkc2VjlQN3hrVkU5a29NOVBSMUJtTjNFVWkwS2JpZkd4akNuS1BEN2ZJNGh0b0RWNGkrbzVSM2ovZlRKVXdSSk9JYllBbmgrK3I2NlpoazdNejRPSlI2SDErdHRHOEphVFg3N3NZWkt0V29aQzU4OWg5U3JtYlloTFFHcXVxTXZWYU9kRDRjeEU0M0M0M2JEVkU4aWpnR05tMjIyU3hjdUl2Nzh4WDhoY2l2eFdTV0dmUDRUYmV4K0VtcitLVjhxdFZ3MlEyQ3U4YmFBVk9JbEZ1YlQvejZTWFdBdTF1N1J0MENhQXJJa25Na2t3UXVjTE11UW1PUTBReGlRWFlEWGkxa2thR2tZWTVEZExqNzBsdnhCaDhuVVl3SGtjbThRaXo0MUw4a2lMM1pVbzdjN3Jja0c0T09IOXlnVThuQVRzMWI4cytUWFNGd1ZVbkMrRkQ3VFh4czNpemtSNGtZRUx1c0o0ZUkzbTRuYkxZT1RWS0dRM3hEeDU1YUxWNjBmSTcvRDg1ekltMTA5Z21ma3QwU0wxMi9YdmRUZTdkYjEvYThBQXdDWlVNUU16UW9keXdBQUFBQkpSVTVFcmtKZ2dnPT0"},{ name : "__ASSET__:bitmap_flixel_tile_GraphicAuto", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUlBQUFBQUlDQU1BQUFBR0F3ZE1BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBS1QybERRMUJRYUc5MGIzTm9iM0FnU1VORElIQnliMlpwYkdVQUFIamFuVk5uVkZQcEZqMzMzdlJDUzRpQWxFdHZVaFVJSUZKQ2k0QVVrU1lxSVFrUVNvZ2hvZGtWVWNFUlJVVUVHOGlnaUFPT2pvQ01GVkVzRElvSzJBZmtJYUtPZzZPSWlzcjc0WHVqYTlhODkrYk4vclhYUHVlczg1Mnp6d2ZBQ0F5V1NETlJOWUFNcVVJZUVlQ0R4OFRHNGVRdVFJRUtKSEFBRUFpelpDRnovU01CQVBoK1BEd3JJc0FIdmdBQmVOTUxDQURBVFp2QU1CeUgvdy9xUXBsY0FZQ0VBY0Iwa1RoTENJQVVBRUI2amtLbUFFQkdBWUNkbUNaVEFLQUVBR0RMWTJMakFGQXRBR0FuZitiVEFJQ2QrSmw3QVFCYmxDRVZBYUNSQUNBVFpZaEVBR2c3QUt6UFZvcEZBRmd3QUJSbVM4UTVBTmd0QURCSlYyWklBTEMzQU1ET0VBdXlBQWdNQURCUmlJVXBBQVI3QUdESUl5TjRBSVNaQUJSRzhsYzg4U3V1RU9jcUFBQjRtYkk4dVNRNVJZRmJDQzF4QjFkWExoNG96a2tYS3hRMllRSmhta0F1d25tWkdUS0JOQS9nODh3QUFLQ1JGUkhnZy9QOWVNNE9yczdPTm82MkRsOHQ2cjhHL3lKaVl1UCs1YytyY0VBQUFPRjBmdEgrTEMrekdvQTdCb0J0L3FJbDdnUm9YZ3VnZGZlTFpySVBRTFVBb09uYVYvTncrSDQ4UEVXaGtMbloyZVhrNU5oS3hFSmJZY3BYZmY1bndsL0FWLzFzK1g0OC9QZjE0TDdpSklFeVhZRkhCUGpnd3N6MFRLVWN6NUlKaEdMYzVvOUgvTGNMLy93ZDB5TEVTV0s1V0NvVTQxRVNjWTVFbW96ek1xVWlpVUtTS2NVbDB2OWs0dDhzK3dNKzN6VUFzR28rQVh1UkxhaGRZd1AyU3ljUVdIVEE0dmNBQVBLN2I4SFVLQWdEZ0dpRDRjOTMvKzgvL1VlZ0pRQ0Faa21TY1FBQVhrUWtMbFRLc3ovSENBQUFSS0NCS3JCQkcvVEJHQ3pBQmh6QkJkekJDL3hnTm9SQ0pNVENRaEJDQ21TQUhISmdLYXlDUWlpR3piQWRLbUF2MUVBZE5NQlJhSWFUY0E0dXdsVzREajF3RC9waENKN0JLTHlCQ1FSQnlBZ1RZU0hhaUFGaWlsZ2pqZ2dYbVlYNEljRklCQktMSkNESmlCUlJJa3VSTlVneFVvcFVJRlZJSGZJOWNnSTVoMXhHdXBFN3lBQXlndnlHdkVjeGxJR3lVVDNVRExWRHVhZzNHb1JHb2d2UVpIUXhtbzhXb0p2UWNyUWFQWXcyb2VmUXEyZ1AybzgrUThjd3dPZ1lCelBFYkRBdXhzTkNzVGdzQ1pOank3RWlyQXlyeGhxd1Zxd0R1NG4xWTgreGR3UVNnVVhBQ1RZRWQwSWdZUjVCU0ZoTVdFN1lTS2dnSENRMEVkb0pOd2tEaEZIQ0p5S1RxRXUwSnJvUitjUVlZakl4aDFoSUxDUFdFbzhUTHhCN2lFUEVOeVFTaVVNeUo3bVFBa214cEZUU0V0SkcwbTVTSStrc3FaczBTQm9qazhuYVpHdXlCem1VTENBcnlJWGtuZVRENURQa0crUWg4bHNLbldKQWNhVDRVK0lvVXNwcVNobmxFT1UwNVFabG1ESkJWYU9hVXQyb29WUVJOWTlhUXEyaHRsS3ZVWWVvRXpSMW1qbk5neFpKUzZXdG9wWFRHbWdYYVBkcHIraDB1aEhkbFI1T2w5Qlgwc3ZwUitpWDZBUDBkd3dOaGhXRHg0aG5LQm1iR0FjWVp4bDNHSytZVEtZWjA0c1p4MVF3TnpIcm1PZVpENWx2VlZncXRpcDhGWkhLQ3BWS2xTYVZHeW92VkttcXBxcmVxZ3RWODFYTFZJK3BYbE45cmtaVk0xUGpxUW5VbHF0VnFwMVE2MU1iVTJlcE82aUhxbWVvYjFRL3BINVovWWtHV2NOTXcwOURwRkdnc1YvanZNWWdDMk1aczNnc0lXc05xNFoxZ1RYRUpySE4yWHgyS3J1WS9SMjdpejJxcWFFNVF6TktNMWV6VXZPVVpqOEg0NWh4K0p4MFRnbm5LS2VYODM2SzNoVHZLZUlwRzZZMFRMa3haVnhycXBhWGxsaXJTS3RScTBmcnZUYXU3YWVkcHIxRnUxbjdnUTVCeDBvblhDZEhaNC9PQlozblU5bFQzYWNLcHhaTlBUcjFyaTZxYTZVYm9idEVkNzl1cCs2WW5yNWVnSjVNYjZmZWViM24raHg5TC8xVS9XMzZwL1ZIREZnR3N3d2tCdHNNemhnOHhUVnhiendkTDhmYjhWRkRYY05BUTZWaGxXR1g0WVNSdWRFOG85VkdqVVlQakduR1hPTWs0MjNHYmNhakpnWW1JU1pMVGVwTjdwcFNUYm1tS2FZN1REdE14ODNNemFMTjFwazFtejB4MXpMbm0rZWIxNXZmdDJCYWVGb3N0cWkydUdWSnN1UmFwbG51dHJ4dWhWbzVXYVZZVlZwZHMwYXRuYTBsMXJ1dHU2Y1JwN2xPazA2cm50Wm53N0R4dHNtMnFiY1pzT1hZQnR1dXRtMjJmV0ZuWWhkbnQ4V3V3KzZUdlpOOXVuMk4vVDBIRFlmWkRxc2RXaDErYzdSeUZEcFdPdDZhenB6dVAzM0Y5SmJwTDJkWXp4RFAyRFBqdGhQTEtjUnBuVk9iMDBkbkYyZTVjNFB6aUl1SlM0TExMcGMrTHBzYnh0M0l2ZVJLZFBWeFhlRjYwdldkbTdPYnd1Mm8yNi91TnU1cDdvZmNuOHcwbnltZVdUTnowTVBJUStCUjVkRS9DNStWTUd2ZnJINVBRMCtCWjdYbkl5OWpMNUZYcmRld3Q2VjNxdmRoN3hjKzlqNXluK00rNHp3MzNqTGVXVi9NTjhDM3lMZkxUOE52bmwrRjMwTi9JLzlrLzNyLzBRQ25nQ1VCWndPSmdVR0JXd0w3K0hwOEliK09QenJiWmZheTJlMUJqS0M1UVJWQmo0S3RndVhCclNGb3lPeVFyU0gzNTVqT2tjNXBEb1ZRZnVqVzBBZGg1bUdMdzM0TUo0V0hoVmVHUDQ1d2lGZ2EwVEdYTlhmUjNFTnozMFQ2UkpaRTNwdG5NVTg1cnkxS05TbytxaTVxUE5vM3VqUzZQOFl1WmxuTTFWaWRXRWxzU3h3NUxpcXVObTVzdnQvODdmT0g0cDNpQytON0Y1Z3Z5RjF3ZWFIT3d2U0ZweGFwTGhJc09wWkFUSWhPT0pUd1FSQXFxQmFNSmZJVGR5V09Dbm5DSGNKbklpL1JOdEdJMkVOY0toNU84a2dxVFhxUzdKRzhOWGtreFRPbExPVzVoQ2Vwa0x4TURVemRtenFlRnBwMklHMHlQVHE5TVlPU2taQnhRcW9oVFpPMlorcG41bVoyeTZ4bGhiTCt4VzZMdHk4ZWxRZkphN09RckFWWkxRcTJRcWJvVkZvbzF5b0hzbWRsVjJhL3pZbktPWmFybml2TjdjeXp5dHVRTjV6dm4vL3RFc0lTNFpLMnBZWkxWeTBkV09hOXJHbzVzanh4ZWRzSzR4VUZLNFpXQnF3OHVJcTJLbTNWVDZ2dFY1ZXVmcjBtZWsxcmdWN0J5b0xCdFFGcjZ3dFZDdVdGZmV2YzErMWRUMWd2V2QrMVlmcUduUnMrRlltS3JoVGJGNWNWZjlnbzNIamxHNGR2eXIrWjNKUzBxYXZFdVdUUFp0Sm02ZWJlTFo1YkRwYXFsK2FYRG00TjJkcTBEZDlXdE8zMTlrWGJMNWZOS051N2c3WkR1YU8vUExpOFphZkp6czA3UDFTa1ZQUlUrbFEyN3RMZHRXSFgrRzdSN2h0N3ZQWTA3TlhiVzd6My9UN0p2dHRWQVZWTjFXYlZaZnRKKzdQM1A2NkpxdW40bHZ0dFhhMU9iWEh0eHdQU0EvMEhJdzYyMTduVTFSM1NQVlJTajlZcjYwY094eCsrL3AzdmR5ME5OZzFWalp6RzRpTndSSG5rNmZjSjMvY2VEVHJhZG94N3JPRUgweDkySFdjZEwycENtdkthUnB0VG12dGJZbHU2VDh3KzBkYnEzbnI4UjlzZkQ1dzBQRmw1U3ZOVXlXbmE2WUxUazJmeXo0eWRsWjE5Zmk3NTNHRGJvclo3NTJQTzMyb1BiKys2RUhUaDBrWC9pK2M3dkR2T1hQSzRkUEt5MitVVFY3aFhtcTg2WDIzcWRPbzgvcFBUVDhlN25MdWFycmxjYTdudWVyMjFlMmIzNlJ1ZU44N2Q5TDE1OFJiLzF0V2VPVDNkdmZONmIvZkY5L1hmRnQxK2NpZjl6c3U3MlhjbjdxMjhUN3hmOUVEdFFkbEQzWWZWUDF2KzNOanYzSDlxd0hlZzg5SGNSL2NHaFlQUC9wSDFqdzlEQlkrWmo4dUdEWWJybmpnK09UbmlQM0w5NmZ5blE4OWt6eWFlRi82aS9zdXVGeFl2ZnZqVjY5Zk8wWmpSb1pmeWw1Ty9iWHlsL2VyQTZ4bXYyOGJDeGg2K3lYZ3pNVjcwVnZ2dHdYZmNkeDN2bzk4UFQrUjhJSDhvLzJqNXNmVlQwS2Y3a3htVGsvOEVBNWp6L0dNekxkc0FBQUFnWTBoU1RRQUFlaVVBQUlDREFBRDUvd0FBZ09rQUFIVXdBQURxWUFBQU9wZ0FBQmR2a2wvRlJnQUFBd0JRVEZSRkFBQUFYbDVlQUFBQUF3TURCQVFFQlFVRkJnWUdCd2NIQ0FnSUNRa0pDZ29LQ3dzTERBd01EUTBORGc0T0R3OFBFQkFRRVJFUkVoSVNFeE1URkJRVUZSVVZGaFlXRnhjWEdCZ1lHUmtaR2hvYUd4c2JIQndjSFIwZEhoNGVIeDhmSUNBZ0lTRWhJaUlpSXlNakpDUWtKU1VsSmlZbUp5Y25LQ2dvS1NrcEtpb3FLeXNyTEN3c0xTMHRMaTR1THk4dk1EQXdNVEV4TWpJeU16TXpORFEwTlRVMU5qWTJOemMzT0RnNE9UazVPam82T3pzN1BEdzhQVDA5UGo0K1B6OC9RRUJBUVVGQlFrSkNRME5EUkVSRVJVVkZSa1pHUjBkSFNFaElTVWxKU2twS1MwdExURXhNVFUxTlRrNU9UMDlQVUZCUVVWRlJVbEpTVTFOVFZGUlVWVlZWVmxaV1YxZFhXRmhZV1ZsWldscGFXMXRiWEZ4Y1hWMWRYbDVlWDE5ZllHQmdZV0ZoWW1KaVkyTmpaR1JrWldWbFptWm1aMmRuYUdob2FXbHBhbXBxYTJ0cmJHeHNiVzF0Ym01dWIyOXZjSEJ3Y1hGeGNuSnljM056ZEhSMGRYVjFkbloyZDNkM2VIaDRlWGw1ZW5wNmUzdDdmSHg4ZlgxOWZuNStmMzkvZ0lDQWdZR0Jnb0tDZzRPRGhJU0VoWVdGaG9hR2g0ZUhpSWlJaVltSmlvcUtpNHVMakl5TWpZMk5qbzZPajQrUGtKQ1FrWkdSa3BLU2s1T1RsSlNVbFpXVmxwYVdsNWVYbUppWW1abVptcHFhbTV1Ym5KeWNuWjJkbnA2ZW41K2ZvS0Nnb2FHaG9xS2lvNk9qcEtTa3BhV2xwcWFtcDZlbnFLaW9xYW1wcXFxcXE2dXJyS3lzcmEydHJxNnVyNit2c0xDd3NiR3hzckt5czdPenRMUzB0YlcxdHJhMnQ3ZTN1TGk0dWJtNXVycTZ1N3U3dkx5OHZiMjl2cjYrdjcrL3dNREF3Y0hCd3NMQ3c4UER4TVRFeGNYRnhzYkd4OGZIeU1qSXljbkp5c3JLeTh2THpNek16YzNOenM3T3o4L1AwTkRRMGRIUjB0TFMwOVBUMU5UVTFkWFYxdGJXMTlmWDJOalkyZG5aMnRyYTI5dmIzTnpjM2QzZDN0N2UzOS9mNE9EZzRlSGg0dUxpNCtQajVPVGs1ZVhsNXVibTUrZm42T2pvNmVucDZ1cnE2K3ZyN096czdlM3Q3dTd1NysvdjhQRHc4Zkh4OHZMeTgvUHo5UFQwOWZYMTl2YjI5L2YzK1BqNCtmbjUrdnI2Ky92Ny9QejgvZjM5L3Y3Ky8vLy9Ra3FmSXdBQUFBTjBVazVULy84QTE4b05RUUFBQUcxSlJFRlVlTnJzazdFU3dDQUlRMS84LzQ5MlVEeUJWdHk2MUNVWEVnVTVvQUZBUXdCaWNnYUhTc2ZaZlBCT2x5UUpTekM1bHJmUWpWb0MrVUNwYncvdlNNQ0RuczFQdnp6b2Z3SGZGMkJENWxCKzJONExTUFp3eWdKc3pRS0dkYXM2UUxwMjI0RU9BQUQvL3dNQTlQY0E4YU9wY3lVQUFBQUFTVVZPUks1Q1lJST0"},{ name : "__ASSET__:bitmap_flixel__FlxSprite_GraphicDefault", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUJBQUFBQVFDQVlBQUFBZjgvOWhBQUFBQkdkQlRVRUFBTEdPZlB0Umt3QUFBQ0JqU0ZKTkFBQ0hEd0FBakE4QUFQMVNBQUNCUUFBQWZYa0FBT21MQUFBODVRQUFHY3h6UElWM0FBQUtPV2xEUTFCUWFHOTBiM05vYjNBZ1NVTkRJSEJ5YjJacGJHVUFBRWpIblpaM1ZGVFhGb2ZQdlhkNm9jMHdBbEtHM3J2QUFOSjdrMTVGWVpnWllDZ0REak0wc1NHaUFoRkZSSm9pU0ZERWdORlFKRlpFc1JBVVZMQUhKQWdvTVJoRlZDeHZSdGFMcnF5ODkvTHkrK09zYisyejk3bjc3TDNQV2hjQWtxY3ZsNWNHU3dHUXloUHdnenljNlJHUlVYVHNBSUFCSG1DQUtRQk1Wa2E2WDdCN0NCREp5ODJGbmlGeUFsOEVBZkI2V0x3Q2NOUFFNNEJPQi8rZnBGbnBmSUhvbUFBUm03TTVHU3dSRjRnNEpVdVFMcmJQaXBnYWx5eG1HQ1ZtdmloQkVjdUpPV0dSRFQ3N0xMS2ptTm1wUExhSXhUbW5zMVBaWXU0VjhiWk1JVWZFaUsrSUN6TzVuQ3dSM3hLeFJvb3dsU3ZpTitMWVZBNHpBd0FVU1d3WGNGaUpJallSTVlrZkV1UWk0dVVBNEVnSlgzSGNWeXpnWkF2RWwzSkpTOC9oY3hNU0JYUWRsaTdkMU5xYVFmZmtaS1Z3QkFMREFDWXJtY2xuMDEzU1V0T1p2QndBRnUvOFdUTGkydEpGUmJZMHRiYTBORFF6TXYycVVQOTE4MjlLM050RmVobjR1V2NRcmYrTDdhLzgwaG9BWU15SmFyUHppeTJ1Q29ET0xRREkzZnRpMHpnQWdLU29ieDNYdjdvUFRUd3ZpUUpCdW8yeGNWWldsaEdYd3pJU0YvUVAvVStIdjZHdnZtY2tQdTZQOHRCZE9mRk1ZWXFBTHE0Ykt5MGxUY2luWjZReldSeTY0WitIK0I4SC9uVWVCa0djZUE2Znd4TkZoSW1tak10TEVMV2J4K1lLdUdrOE9wZjNuNXI0RDhQK3BNVzVGb25TK0JGUVk0eUExSFVxUUg3dEJ5Z0tFU0RSKzhWZC82TnZ2dmd3SUg1NTRTcVRpM1AvN3pmOVo4R2w0aVdEbS9BNXppVW9oTTRTOGpNWDk4VFBFcUFCQVVnQ0twQUh5a0FkNkFCRFlBYXNnQzF3Qkc3QUcvaURFQkFKVmdNV1NBU3BnQSt5UUI3WUJBcEJNZGdKOW9CcVVBY2FRVE5vQmNkQkp6Z0Z6b05MNEJxNEFXNkQrMkFVVElCbllCYThCZ3NRQkdFaE1rU0I1Q0VWU0JQU2g4d2dCbVFQdVVHK1VCQVVDY1ZDQ1JBUEVrSjUwR2FvR0NxRHFxRjZxQm42SGpvSm5ZZXVRSVBRWFdnTW1vWitoOTdCQ0V5Q3FiQVNyQVVid3d6WUNmYUJRK0JWY0FLOEJzNkZDK0FkY0NYY0FCK0ZPK0R6OERYNE5qd0tQNFBuRUlBUUVScWlpaGdpRE1RRjhVZWlrSGlFajZ4SGlwQUtwQUZwUmJxUlB1UW1Nb3JNSUc5UkdCUUZSVWNab214Um5xaFFGQXUxQnJVZVZZS3FSaDFHZGFCNlVUZFJZNmhaMUVjMEdhMkkxa2Zib0wzUUVlZ0VkQmE2RUYyQmJrSzNveStpYjZNbjBLOHhHQXdObzQyeHduaGlJakZKbUxXWUVzdytUQnZtSEdZUU00Nlp3Mkt4OGxoOXJCM1dIOHZFQ3JDRjJDcnNVZXhaN0JCMkF2c0dSOFNwNE14dzdyZ29IQStYajZ2QUhjR2R3UTNoSm5FTGVDbThKdDRHNzQ5bjQzUHdwZmhHZkRmK09uNEN2MENRSm1nVDdBZ2hoQ1RDSmtJbG9aVndrZkNBOEpKSUpLb1JyWW1CUkM1eEk3R1NlSXg0bVRoR2ZFdVNJZW1SWEVqUkpDRnBCK2tRNlJ6cEx1a2xtVXpXSWp1U284Z0M4ZzV5TS9rQytSSDVqUVJGd2tqQ1M0SXRzVUdpUnFKRFlraml1U1JlVWxQU1NYSzFaSzVraGVRSnlldVNNMUo0S1MwcEZ5bW0xSHFwR3FtVFVpTlNjOUlVYVZOcGYrbFU2UkxwSTlKWHBLZGtzREphTW00eWJKa0NtWU15RjJUR0tRaEZuZUpDWVZFMlV4b3BGeWtUVkF4Vm0rcEZUYUlXVTcrakRsQm5aV1ZrbDhtR3lXYkwxc2llbGgybElUUXRtaGN0aFZaS08wNGJwcjFib3JURWFRbG55ZllsclV1R2xzekxMWlZ6bE9QSUZjbTF5ZDJXZXlkUGwzZVRUNWJmSmQ4cC8xQUJwYUNuRUtpUXBiQmY0YUxDekZMcVV0dWxyS1ZGUzQ4dnZhY0lLK29wQmltdVZUeW8ySzg0cDZTczVLR1VybFNsZEVGcFJwbW03S2ljcEZ5dWZFWjVXb1dpWXEvQ1ZTbFhPYXZ5bEM1TGQ2S24wQ3ZwdmZSWlZVVlZUMVdoYXIzcWdPcUNtclphcUZxK1dwdmFRM1dDT2tNOVhyMWN2VWQ5VmtORncwOGpUNk5GNDU0bVhwT2htYWk1VjdOUGMxNUxXeXRjYTZ0V3A5YVV0cHkybDNhdWRvdjJBeDJ5am9QT0dwMEduVnU2R0YyR2JyTHVQdDBiZXJDZWhWNmlYbzNlZFgxWTMxS2ZxNzlQZjlBQWJXQnR3RE5vTUJneEpCazZHV1lhdGhpT0dkR01mSTN5alRxTm5odHJHRWNaN3pMdU0vNW9ZbUdTWXRKb2N0OVV4dFRiTk4rMDIvUjNNejB6bGxtTjJTMXpzcm03K1Fiekx2TVh5L1NYY1pidFgzYkhnbUxoWjdIVm9zZmlnNldWSmQreTFYTGFTc01xMXFyV2FvUkJaUVF3U2hpWHJkSFd6dFlickU5WnY3V3h0QkhZSExmNXpkYlFOdG4yaU8zVWN1M2xuT1dOeThmdDFPeVlkdlYyby9aMCsxajdBL2FqRHFvT1RJY0doOGVPNm81c3h5YkhTU2RkcHlTbm8wN1BuVTJjK2M3dHp2TXVOaTdyWE02NUlxNGVya1d1QTI0eWJxRnUxVzZQM05YY0U5eGIzR2M5TER6V2VwenpSSHY2ZU83eUhQRlM4bUo1Tlh2TmVsdDVyL1B1OVNINUJQdFUrenoyMWZQbCszYjd3WDdlZnJ2OUhxelFYTUZiMGVrUC9MMzhkL3MvRE5BT1dCUHdZeUFtTUNDd0p2QkprR2xRWGxCZk1DVTRKdmhJOE9zUTU1RFNrUHVoT3FIQzBKNHd5YkRvc09hdytYRFg4TEx3MFFqamlIVVIxeUlWSXJtUlhWSFlxTENvcHFpNWxXNHI5NnljaUxhSUxvd2VYcVc5S252VmxkVUtxMU5XbjQ2UmpHSEduSWhGeDRiSEhvbDl6L1JuTmpEbjRyemlhdU5tV1M2c3ZheG5iRWQyT1h1YVk4Y3A0MHpHMjhXWHhVOGwyQ1hzVHBoT2RFaXNTSnpodW5DcnVTK1NQSlBxa3VhVC9aTVBKWDlLQ1U5cFM4V2x4cWFlNU1ud2tubTlhY3BwMldtRDZmcnBoZW1qYTJ6VzdGa3p5L2ZoTjJWQUdhc3l1Z1JVMGM5VXYxQkh1RVU0bG1tZldaUDVKaXNzNjBTMmREWXZ1ejlITDJkN3ptU3VlKzYzYTFGcldXdDc4bFR6TnVXTnJYTmFWNzhlV2grM3ZtZUQrb2FDRFJNYlBUWWUza1RZbEx6cHAzeVQvTEw4VjV2RE4zY1hLQlZzTEJqZjRyR2xwVkNpa0Y4NHN0VjJhOTAyMURidXRvSHQ1dHVydG44c1loZGRMVFlwcmloK1g4SXF1ZnFONlRlVjMzemFFYjlqb05TeWRQOU96RTdlenVGZERyc09sMG1YNVphTjcvYmIzVkZPTHk4cWY3VW5acytWaW1VVmRYc0plNFY3Unl0OUs3dXFOS3AyVnIydlRxeStYZU5jMDFhcldMdTlkbjRmZTkvUWZzZjlyWFZLZGNWMTd3NXdEOXlwOTZqdmFOQnFxRGlJT1poNThFbGpXR1BmdDR4dm01c1Vtb3FiUGh6aUhSbzlISFM0dDltcXVmbUk0cEhTRnJoRjJESjlOUHJvamU5Y3YrdHFOV3l0YjZPMUZSOER4NFRIbm40ZisvM3djWi9qUFNjWUoxcC8wUHlodHAzU1h0UUJkZVIwekhZbWRvNTJSWFlObnZRKzJkTnQyOTMrbzlHUGgwNnBucW81TFh1NjlBemhUTUdaVDJkeno4NmRTejgzY3o3aC9IaFBUTS85Q3hFWGJ2VUc5ZzVjOUxsNCtaTDdwUXQ5VG4xbkw5dGRQblhGNXNySnE0eXJuZGNzcjNYMFcvUzMvMlR4VS91QTVVREhkYXZyWFRlc2IzUVBMaDg4TStRd2RQNm02ODFMdDd4dVhidTk0dmJnY09qd25aSG9rZEU3N0R0VGQxUHV2cmlYZVcvaC9zWUg2QWRGRDZVZVZqeFNmTlR3cys3UGJhT1dvNmZIWE1mNkh3Yy92ai9PR24vMlM4WXY3eWNLbnBDZlZFeXFURFpQbVUyZG1uYWZ2dkYwNWRPSlorblBGbVlLZjVYK3RmYTV6dk1mZm5QOHJYODJZbmJpQmYvRnA5OUxYc3EvUFBScTJhdWV1WUM1UjY5VFh5L01GNzJSZjNQNExlTnQzN3Z3ZDVNTFdlK3g3eXMvNkg3by91ano4Y0duMUUrZi9nVURtUFA4dXNUbzB3QUFBQWx3U0ZsekFBQU93Z0FBRHNJQkZTaEtnQUFBQUJwMFJWaDBVMjltZEhkaGNtVUFVR0ZwYm5RdVRrVlVJSFl6TGpVdU1UQXc5SEtoQUFBQjIwbEVRVlE0VDMzVHZVOFRZUURIOGVmbEFJbEpnN0hhOUtoS3IwSmJpb0FscGhyRWhNaE00dUtnTVVhZ0pjWEpRVWNUYzRZQllwZ2NpQTY0WUl3MnZnUmJyVkVQUnRERkR0VTQ5eDhncVFvTVA1N255blB0NVdxSFgyNzZmcDU3eVJGeldxL2tUQU5xajI2SDBPMXZBeUhFdFVPVVk3WXJqT2ZkNTV6ZDk4Y3FSSVpZVDdxMlhSakNmRWJIVVorR05rcHgzWGNDSmVNeXF0RkoxeVRXRkZEZzF0c0JQSndjOFlRS2Fnbjhzb2JSVXp5Tjlud0VLOWN1TlVWczRPbTlVNTVIK0NuaWtJakpSOE9lVm9oZytlYVlCMW5WQmRBYjZrQzFPT3dnUDZ3aEJJc1JKMVlJLzJEZzhhMkxMaVI3SkN4Zk5NRjhXcmVCa29nRFRXS0ZNSUVzemRTUXNqR0JUdkZsYk1CM21PUE5pemlPdFlnYmtZWFpVYVM3ZXRSbkptQ3NBMzFYWG9HL0cvVGN1Z29icit4ckJscHF2QTRFZ3RNWUhRZk8zTmdFWDB1MFJLaVZoZmF0Q3Y3a0N3aGxJUEwwa2ZPL2JVQXVNYlVCOXI2L0tVS3RPV2pmLzRydENXUVhORGtHRWdoT09iRkMrdE9mQkJKekliWDRUeTArR0RlZmdjUUdjaDVBUXZGTUVTeGZRNmgxcDM1eUk3RDQ4ditBUktMWk5iRFBkMFg4ejNXeWN3ZXRnR1NxRFAveHE2RFJzK0JMcjZGdDdYZ1FMb0dUWWJNaUg2TnhBVDBOeXRycnY3UDRJK25nQlRCekJUSlNZM01QS3Z0ZUJpU2RVNUVBV3dBQUFBQkpSVTVFcmtKZ2dnPT0"},{ name : "__ASSET__:bitmap_flixel_system_debug__FlxDebugger_GraphicFlixel", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUF3QUFBQU1DQVlBQUFCV2RWem5BQUFBQkdkQlRVRUFBTEdPZlB0Umt3QUFBQ0JqU0ZKTkFBQ0hEd0FBakE4QUFQMVNBQUNCUUFBQWZYa0FBT21MQUFBODVRQUFHY3h6UElWM0FBQUtPV2xEUTFCUWFHOTBiM05vYjNBZ1NVTkRJSEJ5YjJacGJHVUFBRWpIblpaM1ZGVFhGb2ZQdlhkNm9jMHdBbEtHM3J2QUFOSjdrMTVGWVpnWllDZ0REak0wc1NHaUFoRkZSSm9pU0ZERWdORlFKRlpFc1JBVVZMQUhKQWdvTVJoRlZDeHZSdGFMcnF5ODkvTHkrK09zYisyejk3bjc3TDNQV2hjQWtxY3ZsNWNHU3dHUXloUHdnenljNlJHUlVYVHNBSUFCSG1DQUtRQk1Wa2E2WDdCN0NCREp5ODJGbmlGeUFsOEVBZkI2V0x3Q2NOUFFNNEJPQi8rZnBGbnBmSUhvbUFBUm03TTVHU3dSRjRnNEpVdVFMcmJQaXBnYWx5eG1HQ1ZtdmloQkVjdUpPV0dSRFQ3N0xMS2ptTm1wUExhSXhUbW5zMVBaWXU0VjhiWk1JVWZFaUsrSUN6TzVuQ3dSM3hLeFJvb3dsU3ZpTitMWVZBNHpBd0FVU1d3WGNGaUpJallSTVlrZkV1UWk0dVVBNEVnSlgzSGNWeXpnWkF2RWwzSkpTOC9oY3hNU0JYUWRsaTdkMU5xYVFmZmtaS1Z3QkFMREFDWXJtY2xuMDEzU1V0T1p2QndBRnUvOFdUTGkydEpGUmJZMHRiYTBORFF6TXYycVVQOTE4MjlLM050RmVobjR1V2NRcmYrTDdhLzgwaG9BWU15SmFyUHppeTJ1Q29ET0xRREkzZnRpMHpnQWdLU29ieDNYdjdvUFRUd3ZpUUpCdW8yeGNWWldsaEdYd3pJU0YvUVAvVStIdjZHdnZtY2tQdTZQOHRCZE9mRk1ZWXFBTHE0Ykt5MGxUY2luWjZReldSeTY0WitIK0I4SC9uVWVCa0djZUE2Znd4TkZoSW1tak10TEVMV2J4K1lLdUdrOE9wZjNuNXI0RDhQK3BNVzVGb25TK0JGUVk0eUExSFVxUUg3dEJ5Z0tFU0RSKzhWZC82TnZ2dmd3SUg1NTRTcVRpM1AvN3pmOVo4R2w0aVdEbS9BNXppVW9oTTRTOGpNWDk4VFBFcUFCQVVnQ0twQUh5a0FkNkFCRFlBYXNnQzF3Qkc3QUcvaURFQkFKVmdNV1NBU3BnQSt5UUI3WUJBcEJNZGdKOW9CcVVBY2FRVE5vQmNkQkp6Z0Z6b05MNEJxNEFXNkQrMkFVVElCbllCYThCZ3NRQkdFaE1rU0I1Q0VWU0JQU2g4d2dCbVFQdVVHK1VCQVVDY1ZDQ1JBUEVrSjUwR2FvR0NxRHFxRjZxQm42SGpvSm5ZZXVRSVBRWFdnTW1vWitoOTdCQ0V5Q3FiQVNyQVVid3d6WUNmYUJRK0JWY0FLOEJzNkZDK0FkY0NYY0FCK0ZPK0R6OERYNE5qd0tQNFBuRUlBUUVScWlpaGdpRE1RRjhVZWlrSGlFajZ4SGlwQUtwQUZwUmJxUlB1UW1Nb3JNSUc5UkdCUUZSVWNab214Um5xaFFGQXUxQnJVZVZZS3FSaDFHZGFCNlVUZFJZNmhaMUVjMEdhMkkxa2Zib0wzUUVlZ0VkQmE2RUYyQmJrSzNveStpYjZNbjBLOHhHQXdObzQyeHduaGlJakZKbUxXWUVzdytUQnZtSEdZUU00Nlp3Mkt4OGxoOXJCM1dIOHZFQ3JDRjJDcnNVZXhaN0JCMkF2c0dSOFNwNE14dzdyZ29IQStYajZ2QUhjR2R3UTNoSm5FTGVDbThKdDRHNzQ5bjQzUHdwZmhHZkRmK09uNEN2MENRSm1nVDdBZ2hoQ1RDSmtJbG9aVndrZkNBOEpKSUpLb1JyWW1CUkM1eEk3R1NlSXg0bVRoR2ZFdVNJZW1SWEVqUkpDRnBCK2tRNlJ6cEx1a2xtVXpXSWp1U284Z0M4ZzV5TS9rQytSSDVqUVJGd2tqQ1M0SXRzVUdpUnFKRFlraml1U1JlVWxQU1NYSzFaSzVraGVRSnlldVNNMUo0S1MwcEZ5bW0xSHFwR3FtVFVpTlNjOUlVYVZOcGYrbFU2UkxwSTlKWHBLZGtzREphTW00eWJKa0NtWU15RjJUR0tRaEZuZUpDWVZFMlV4b3BGeWtUVkF4Vm0rcEZUYUlXVTcrakRsQm5aV1ZrbDhtR3lXYkwxc2llbGgybElUUXRtaGN0aFZaS08wNGJwcjFib3JURWFRbG55ZllsclV1R2xzekxMWlZ6bE9QSUZjbTF5ZDJXZXlkUGwzZVRUNWJmSmQ4cC8xQUJwYUNuRUtpUXBiQmY0YUxDekZMcVV0dWxyS1ZGUzQ4dnZhY0lLK29wQmltdVZUeW8ySzg0cDZTczVLR1VybFNsZEVGcFJwbW03S2ljcEZ5dWZFWjVXb1dpWXEvQ1ZTbFhPYXZ5bEM1TGQ2S24wQ3ZwdmZSWlZVVlZUMVdoYXIzcWdPcUNtclphcUZxK1dwdmFRM1dDT2tNOVhyMWN2VWQ5VmtORncwOGpUNk5GNDU0bVhwT2htYWk1VjdOUGMxNUxXeXRjYTZ0V3A5YVV0cHkybDNhdWRvdjJBeDJ5am9QT0dwMEduVnU2R0YyR2JyTHVQdDBiZXJDZWhWNmlYbzNlZFgxWTMxS2ZxNzlQZjlBQWJXQnR3RE5vTUJneEpCazZHV1lhdGhpT0dkR01mSTN5alRxTm5odHJHRWNaN3pMdU0vNW9ZbUdTWXRKb2N0OVV4dFRiTk4rMDIvUjNNejB6bGxtTjJTMXpzcm03K1Fiekx2TVh5L1NYY1pidFgzYkhnbUxoWjdIVm9zZmlnNldWSmQreTFYTGFTc01xMXFyV2FvUkJaUVF3U2hpWHJkSFd6dFlickU5WnY3V3h0QkhZSExmNXpkYlFOdG4yaU8zVWN1M2xuT1dOeThmdDFPeVlkdlYyby9aMCsxajdBL2FqRHFvT1RJY0doOGVPNm81c3h5YkhTU2RkcHlTbm8wN1BuVTJjK2M3dHp2TXVOaTdyWE02NUlxNGVya1d1QTI0eWJxRnUxVzZQM05YY0U5eGIzR2M5TER6V2VwenpSSHY2ZU83eUhQRlM4bUo1Tlh2TmVsdDVyL1B1OVNINUJQdFUrenoyMWZQbCszYjd3WDdlZnJ2OUhxelFYTUZiMGVrUC9MMzhkL3MvRE5BT1dCUHdZeUFtTUNDd0p2QkprR2xRWGxCZk1DVTRKdmhJOE9zUTU1RFNrUHVoT3FIQzBKNHd5YkRvc09hdytYRFg4TEx3MFFqamlIVVIxeUlWSXJtUlhWSFlxTENvcHFpNWxXNHI5NnljaUxhSUxvd2VYcVc5S252VmxkVUtxMU5XbjQ2UmpHSEduSWhGeDRiSEhvbDl6L1JuTmpEbjRyemlhdU5tV1M2c3ZheG5iRWQyT1h1YVk4Y3A0MHpHMjhXWHhVOGwyQ1hzVHBoT2RFaXNTSnpodW5DcnVTK1NQSlBxa3VhVC9aTVBKWDlLQ1U5cFM4V2x4cWFlNU1ud2tubTlhY3BwMldtRDZmcnBoZW1qYTJ6VzdGa3p5L2ZoTjJWQUdhc3l1Z1JVMGM5VXYxQkh1RVU0bG1tZldaUDVKaXNzNjBTMmREWXZ1ejlITDJkN3ptU3VlKzYzYTFGcldXdDc4bFR6TnVXTnJYTmFWNzhlV2grM3ZtZUQrb2FDRFJNYlBUWWUza1RZbEx6cHAzeVQvTEw4VjV2RE4zY1hLQlZzTEJqZjRyR2xwVkNpa0Y4NHN0VjJhOTAyMURidXRvSHQ1dHVydG44c1loZGRMVFlwcmloK1g4SXF1ZnFONlRlVjMzemFFYjlqb05TeWRQOU96RTdlenVGZERyc09sMG1YNVphTjcvYmIzVkZPTHk4cWY3VW5acytWaW1VVmRYc0plNFY3Unl0OUs3dXFOS3AyVnIydlRxeStYZU5jMDFhcldMdTlkbjRmZTkvUWZzZjlyWFZLZGNWMTd3NXdEOXlwOTZqdmFOQnFxRGlJT1poNThFbGpXR1BmdDR4dm01c1Vtb3FiUGh6aUhSbzlISFM0dDltcXVmbUk0cEhTRnJoRjJESjlOUHJvamU5Y3YrdHFOV3l0YjZPMUZSOER4NFRIbm40ZisvM3djWi9qUFNjWUoxcC8wUHlodHAzU1h0UUJkZVIwekhZbWRvNTJSWFlObnZRKzJkTnQyOTMrbzlHUGgwNnBucW81TFh1NjlBemhUTUdaVDJkeno4NmRTejgzY3o3aC9IaFBUTS85Q3hFWGJ2VUc5ZzVjOUxsNCtaTDdwUXQ5VG4xbkw5dGRQblhGNXNySnE0eXJuZGNzcjNYMFcvUzMvMlR4VS91QTVVREhkYXZyWFRlc2IzUVBMaDg4TStRd2RQNm02ODFMdDd4dVhidTk0dmJnY09qd25aSG9rZEU3N0R0VGQxUHV2cmlYZVcvaC9zWUg2QWRGRDZVZVZqeFNmTlR3cys3UGJhT1dvNmZIWE1mNkh3Yy92ai9PR24vMlM4WXY3eWNLbnBDZlZFeXFURFpQbVUyZG1uYWZ2dkYwNWRPSlorblBGbVlLZjVYK3RmYTV6dk1mZm5QOHJYODJZbmJpQmYvRnA5OUxYc3EvUFBScTJhdWV1WUM1UjY5VFh5L01GNzJSZjNQNExlTnQzN3Z3ZDVNTFdlK3g3eXMvNkg3by91ano4Y0duMUUrZi9nVURtUFA4dXNUbzB3QUFBQWx3U0ZsekFBQUxFZ0FBQ3hJQjB0MSsvQUFBQUJwMFJWaDBVMjltZEhkaGNtVUFVR0ZwYm5RdVRrVlVJSFl6TGpVdU1UQXc5SEtoQUFBQkxFbEVRVlFvVTJQNGY5RG9QeEkrRG1RNy9qOWt4QUFDWDlYOVZJRjRHUkQvQStML0lNeUFwZ0drK2QvSEE0WTdqcnE1emdJcStBbFRpRlBENTRPRy94MTNxLzJYWHFuKy80S3RPOWhVWkF5eTRTck1sbzlBeFhaQXhRdzdsY0JZY3BYYS96TU9LSnErZ1RTNGdaenhBYWpZRWtreFRKUFlHclgvSjV6Y1lMYjBNL3cvWXNUdzdJREJPclBkcW5DVFlZcGh0TWhhdGYrSFhGMi9BSjBtQVE0TjQ0REhDN21XZXVEVXdMQlQ5VC9yNGFYUFdNNys1bVN3ZHZ5dkJzUy9USDFlLytkYzdveEZrOXAvNW1NYi93TVZnM0FPU01NQ0lQNFB3aVorei85enJIUkEwZ1JTdkFtbUdFUS9BbW40RGRNQTFoVHcrRC83S3R2L0RMczBnSXEzSUNzR3MwRWF3S1lqWTZPUXUyK1lqMnk0QlhVR2lpWjBEVitBR3R1QVdCQ29tQldJazRINEFiSkdBSlFUU2ZzMmF1VnlBQUFBQUVsRlRrU3VRbUND"},{ name : "__ASSET__:bitmap_flixel_system_debug_GraphicConsole", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUlHTklVazBBQUhvbEFBQ0Fnd0FBK2Y4QUFJRHBBQUIxTUFBQTZtQUFBRHFZQUFBWGI1SmZ4VVlBQUFCVVNVUkJWSGphdEpIUkNVQWhEQVBqRzhVVjNNbmhuTVZaWE9IOFVTaFBoSW9ZeUUrNXRJRUdRRjU5T3BDRm82UXFLVzFwd0RvRERTaS91WUFGbmk0amxEM3d2SUlOWEcxMmQ0NUFCZEt1V25qMmxENEFLVWJYUXNkOGx3a0FBQUFBU1VWT1JLNUNZSUk9"},{ name : "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicRecordOff", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQUdoSlJFRlVlTnBpK1AvL1B3TVUyd0J4SHhCZkFPS2ZVTG9QS2c1V0ExTVlBOFRYLzJNSDE2SHlEREFUY1NsRTFtRER4TURBRUFURUdnejRBVWcrQ0tUWWlZRTQ0TVFJOGd5UXdVYUU0bDhnazY4VGFmSjFrT0o5UkNyZVIxSm9rQnpPUk1jZ1FJQUJBUHdDK0RaNDFKa0NBQUFBQUVsRlRrU3VRbUND"},{ name : "__ASSET__:bitmap_flixel_system_debug__FlxDebugger_GraphicDrawDebug", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQUU5SlJFRlVlTnEwa01zTkFDQUlRNnRic3FCcjF2Z25haFFQTnVrRlhna3BTS0phZUZhWVFWSGg1WWdWbEFiZjFJN1E1UVRnc0pmZTBlTkJYMkFwajR4V2RxWnV4QUwzUnRJZ0dLdERGR0FBNGg0Vk01NWl5QnNBQUFBQVNVVk9SSzVDWUlJPQ"},{ name : "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicRecordOn", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQUoxSlJFRlVlTnAwVWNrUkF5RU1zL0pJTFZ1RXE5ajMxcFNTdGdaKzFKSjhpSHlFQ2V1RUdZRVBHWVF0QXlKREhFbzg2RGVlVDZLNUgzRXhubS9Fd1VBbnhnU21iZkVqeUZZSnJNU0tUckxleU4vcGJtS1YvOWZHVzNkeGJTaFBoNDNGYnJEUHNQTHU5YW1yMkxGZUpxUC9USTRpcFJ2NUxFbGNQaER1YVczVDJiWkZKNzQxVzE0bEcxNzdMSmMrZjE3UEFzMkpyUk5FVHBCNEN6QUFFNHFQMnhEMkYyNEFBQUFBU1VWT1JLNUNZSUk9"}];
var __map_reserved = {}
var ArrayBuffer = (Function("return typeof ArrayBuffer != 'undefined' ? ArrayBuffer : null"))() || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
var DataView = (Function("return typeof DataView != 'undefined' ? DataView : null"))() || js_html_compat_DataView;
var Uint8Array = (Function("return typeof Uint8Array != 'undefined' ? Uint8Array : null"))() || js_html_compat_Uint8Array._new;
var this1;
this1 = new Uint32Array(256);
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	var val = Math.ceil(i * 257.003921568627447);
	lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[i] = val;
}
var this2;
this2 = new Uint8Array(510);
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i2] = 255;
}
lime_system_CFFI.available = false;
lime_system_CFFI.enabled = false;
if(window.createjs != null) createjs.Sound.alternateExtensions = ["ogg","mp3","wav"];
openfl_ui_Multitouch.maxTouchPoints = 2;
openfl_ui_Multitouch.supportedGestures = null;
openfl_ui_Multitouch.supportsGestureEvents = false;
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__worldRenderDirty = 0;
openfl_display_DisplayObject.__worldTransformDirty = 0;
openfl_display_DisplayObject.__cacheAsBitmapMode = false;
openfl_text_Font.__registeredFonts = [];
flixel_FlxBasic._ACTIVECOUNT = 0;
flixel_FlxBasic._VISIBLECOUNT = 0;
PlayState.BAT_SPEED = 350;
Xml.Element = 0;
Xml.Document = 6;
com_babylonhx_Engine.ALPHA_DISABLE = 0;
com_babylonhx_Engine.ALPHA_ADD = 1;
com_babylonhx_Engine.ALPHA_COMBINE = 2;
com_babylonhx_Engine.ALPHA_SUBTRACT = 3;
com_babylonhx_Engine.ALPHA_MULTIPLY = 4;
com_babylonhx_Engine.ALPHA_MAXIMIZED = 5;
com_babylonhx_Engine.ALPHA_ONEONE = 6;
com_babylonhx_Engine.DELAYLOADSTATE_NONE = 0;
com_babylonhx_Engine.DELAYLOADSTATE_LOADED = 1;
com_babylonhx_Engine.DELAYLOADSTATE_LOADING = 2;
com_babylonhx_Engine.DELAYLOADSTATE_NOTLOADED = 4;
com_babylonhx_Engine.TEXTUREFORMAT_ALPHA = 0;
com_babylonhx_Engine.TEXTUREFORMAT_LUMINANCE = 1;
com_babylonhx_Engine.TEXTUREFORMAT_LUMINANCE_ALPHA = 2;
com_babylonhx_Engine.TEXTUREFORMAT_RGB = 3;
com_babylonhx_Engine.TEXTUREFORMAT_RGBA = 4;
com_babylonhx_Engine.TEXTURETYPE_UNSIGNED_INT = 0;
com_babylonhx_Engine.TEXTURETYPE_FLOAT = 1;
com_babylonhx_Engine.Version = "2.0.0";
com_babylonhx_Engine.Epsilon = 0.001;
com_babylonhx_Engine.CollisionsEpsilon = 0.001;
com_babylonhx_Engine.ShadersRepository = "../assets/shaders/";
com_babylonhx_Engine.mouseDown = [];
com_babylonhx_Engine.mouseUp = [];
com_babylonhx_Engine.mouseMove = [];
com_babylonhx_Engine.mouseWheel = [];
com_babylonhx_Engine.touchDown = [];
com_babylonhx_Engine.touchUp = [];
com_babylonhx_Engine.touchMove = [];
com_babylonhx_Engine.keyUp = [];
com_babylonhx_Engine.keyDown = [];
com_babylonhx_Scene.FOGMODE_NONE = 0;
com_babylonhx_Scene.FOGMODE_EXP = 1;
com_babylonhx_Scene.FOGMODE_EXP2 = 2;
com_babylonhx_Scene.FOGMODE_LINEAR = 3;
com_babylonhx_Scene.MinDeltaTime = 1.0;
com_babylonhx_Scene.MaxDeltaTime = 1000.0;
com_babylonhx_Scene._activeMeshes_ = [];
com_babylonhx_Scene._activeMesh_ = null;
com_babylonhx_actions_ActionManager.NothingTrigger = 0;
com_babylonhx_actions_ActionManager.OnPickTrigger = 1;
com_babylonhx_actions_ActionManager.OnLeftPickTrigger = 2;
com_babylonhx_actions_ActionManager.OnRightPickTrigger = 3;
com_babylonhx_actions_ActionManager.OnCenterPickTrigger = 4;
com_babylonhx_actions_ActionManager.OnPointerOverTrigger = 5;
com_babylonhx_actions_ActionManager.OnPointerOutTrigger = 6;
com_babylonhx_actions_ActionManager.OnEveryFrameTrigger = 7;
com_babylonhx_actions_ActionManager.OnIntersectionEnterTrigger = 8;
com_babylonhx_actions_ActionManager.OnIntersectionExitTrigger = 9;
com_babylonhx_actions_ActionManager.OnKeyDownTrigger = 10;
com_babylonhx_actions_ActionManager.OnKeyUpTrigger = 11;
com_babylonhx_actions_ActionManager.OnPickUpTrigger = 12;
com_babylonhx_actions_ValueCondition.IsEqual = 0;
com_babylonhx_actions_ValueCondition.IsDifferent = 1;
com_babylonhx_actions_ValueCondition.IsGreater = 2;
com_babylonhx_actions_ValueCondition.IsLesser = 3;
com_babylonhx_animations_Animation.ANIMATIONTYPE_FLOAT = 0;
com_babylonhx_animations_Animation.ANIMATIONTYPE_VECTOR3 = 1;
com_babylonhx_animations_Animation.ANIMATIONTYPE_QUATERNION = 2;
com_babylonhx_animations_Animation.ANIMATIONTYPE_MATRIX = 3;
com_babylonhx_animations_Animation.ANIMATIONTYPE_COLOR3 = 4;
com_babylonhx_animations_Animation.ANIMATIONTYPE_VECTOR2 = 5;
com_babylonhx_animations_Animation.ANIMATIONLOOPMODE_RELATIVE = 0;
com_babylonhx_animations_Animation.ANIMATIONLOOPMODE_CYCLE = 1;
com_babylonhx_animations_Animation.ANIMATIONLOOPMODE_CONSTANT = 2;
com_babylonhx_animations_Animation.matrixInterpolateFunction_startScale = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_animations_Animation.matrixInterpolateFunction_startRotation = new com_babylonhx_math_Quaternion();
com_babylonhx_animations_Animation.matrixInterpolateFunction_startTranslation = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_animations_Animation.matrixInterpolateFunction_endScale = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_animations_Animation.matrixInterpolateFunction_endRotation = new com_babylonhx_math_Quaternion();
com_babylonhx_animations_Animation.matrixInterpolateFunction_endTranslation = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_animations_easing_EasingFunction.EASINGMODE_EASEIN = 0;
com_babylonhx_animations_easing_EasingFunction.EASINGMODE_EASEOUT = 1;
com_babylonhx_animations_easing_EasingFunction.EASINGMODE_EASEINOUT = 2;
com_babylonhx_cameras_Camera.PERSPECTIVE_CAMERA = 0;
com_babylonhx_cameras_Camera.ORTHOGRAPHIC_CAMERA = 1;
com_babylonhx_cameras_Camera.FOVMODE_VERTICAL_FIXED = 0;
com_babylonhx_cameras_Camera.FOVMODE_HORIZONTAL_FIXED = 1;
com_babylonhx_cameras_Camera.RIG_MODE_NONE = 0;
com_babylonhx_cameras_Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH = 10;
com_babylonhx_cameras_Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL = 11;
com_babylonhx_cameras_Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED = 12;
com_babylonhx_cameras_Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER = 13;
com_babylonhx_cameras_Camera.RIG_MODE_VR = 20;
com_babylonhx_cameras_TargetCamera.zUpVector = new com_babylonhx_math_Vector3(0,1.0,0);
com_babylonhx_cameras_TargetCamera.vDir = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_culling_BoundingBox.IntersectsSphere_vector = new com_babylonhx_math_Vector3();
com_babylonhx_lights_shadows_ShadowGenerator.FILTER_NONE = 0;
com_babylonhx_lights_shadows_ShadowGenerator.FILTER_VARIANCESHADOWMAP = 1;
com_babylonhx_lights_shadows_ShadowGenerator.FILTER_POISSONSAMPLING = 2;
com_babylonhx_lights_shadows_ShadowGenerator.FILTER_BLURVARIANCESHADOWMAP = 3;
com_babylonhx_loading_SceneLoader.ForceFullSceneLoadingForIncremental = false;
com_babylonhx_loading_SceneLoader.ShowLoadingScreen = true;
com_babylonhx_loading_SceneLoader._registeredPlugins = [];
com_babylonhx_mesh_Geometry.UID_CHARS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
com_babylonhx_tools_Tools.BaseUrl = "";
com_babylonhx_tools_Tools.__startTime = haxe_Timer.stamp();
js_Boot.__toStr = {}.toString;
com_babylonhx_math_Matrix._tempQuaternion = new com_babylonhx_math_Quaternion();
com_babylonhx_math_Matrix._xAxis = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_math_Matrix._yAxis = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_math_Matrix._zAxis = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_mesh_VertexData.transformed = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_materials_Material.TriangleFillMode = 0;
com_babylonhx_materials_Material.WireFrameFillMode = 1;
com_babylonhx_materials_Material.PointFillMode = 2;
com_babylonhx_materials_Material.ClockWiseSideOrientation = 0;
com_babylonhx_materials_Material.CounterClockWiseSideOrientation = 1;
com_babylonhx_materials_Material.maxSimultaneousLights = 4;
com_babylonhx_math_Color3.ToGammaSpace = 0.45454545454545453;
com_babylonhx_math_Color3.ToLinearSpace = 2.2;
com_babylonhx_materials_StandardMaterial.DiffuseTextureEnabled = true;
com_babylonhx_materials_StandardMaterial.AmbientTextureEnabled = true;
com_babylonhx_materials_StandardMaterial.OpacityTextureEnabled = true;
com_babylonhx_materials_StandardMaterial.ReflectionTextureEnabled = true;
com_babylonhx_materials_StandardMaterial.EmissiveTextureEnabled = true;
com_babylonhx_materials_StandardMaterial.SpecularTextureEnabled = true;
com_babylonhx_materials_StandardMaterial.BumpTextureEnabled = true;
com_babylonhx_materials_StandardMaterial.FresnelEnabled = true;
com_babylonhx_materials_StandardMaterial.LightmapEnabled = true;
com_babylonhx_materials_StandardMaterial._scaledDiffuse = new com_babylonhx_math_Color3();
com_babylonhx_materials_StandardMaterial._scaledSpecular = new com_babylonhx_math_Color3();
com_babylonhx_materials_textures_Texture.NEAREST_SAMPLINGMODE = 1;
com_babylonhx_materials_textures_Texture.BILINEAR_SAMPLINGMODE = 2;
com_babylonhx_materials_textures_Texture.TRILINEAR_SAMPLINGMODE = 3;
com_babylonhx_materials_textures_Texture.EXPLICIT_MODE = 0;
com_babylonhx_materials_textures_Texture.SPHERICAL_MODE = 1;
com_babylonhx_materials_textures_Texture.PLANAR_MODE = 2;
com_babylonhx_materials_textures_Texture.CUBIC_MODE = 3;
com_babylonhx_materials_textures_Texture.PROJECTION_MODE = 4;
com_babylonhx_materials_textures_Texture.SKYBOX_MODE = 5;
com_babylonhx_materials_textures_Texture.INVCUBIC_MODE = 6;
com_babylonhx_materials_textures_Texture.EQUIRECTANGULAR_MODE = 7;
com_babylonhx_materials_textures_Texture.CLAMP_ADDRESSMODE = 0;
com_babylonhx_materials_textures_Texture.WRAP_ADDRESSMODE = 1;
com_babylonhx_materials_textures_Texture.MIRROR_ADDRESSMODE = 2;
com_babylonhx_materials_textures_RenderTargetTexture.REFRESHRATE_RENDER_ONCE = 0;
com_babylonhx_materials_textures_RenderTargetTexture.REFRESHRATE_RENDER_ONEVERYFRAME = 1;
com_babylonhx_materials_textures_RenderTargetTexture.REFRESHRATE_RENDER_ONEVERYTWOFRAMES = 2;
com_babylonhx_rendering_RenderingManager.MAX_RENDERINGGROUPS = 4;
com_babylonhx_math_Plane.transposedMatrix = new com_babylonhx_math_Matrix();
com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_NONE = 0;
com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_X = 1;
com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_Y = 2;
com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_Z = 4;
com_babylonhx_mesh_AbstractMesh.BILLBOARDMODE_ALL = 7;
com_babylonhx_mesh_AbstractMesh.cameraGlobalPosition = new com_babylonhx_math_Vector3();
com_babylonhx_mesh_Mesh.FRONTSIDE = 0;
com_babylonhx_mesh_Mesh.BACKSIDE = 1;
com_babylonhx_mesh_Mesh.DOUBLESIDE = 2;
com_babylonhx_mesh_Mesh.DEFAULTSIDE = 0;
com_babylonhx_mesh_Mesh.NO_CAP = 0;
com_babylonhx_mesh_Mesh.CAP_START = 1;
com_babylonhx_mesh_Mesh.CAP_END = 2;
com_babylonhx_mesh_Mesh.CAP_ALL = 3;
com_babylonhx_particles_ParticleSystem.BLENDMODE_ONEONE = 0;
com_babylonhx_particles_ParticleSystem.BLENDMODE_STANDARD = 1;
com_babylonhx_loading_plugins_BabylonFileLoader._plugin = { extensions : ".babylon", importMesh : function(meshesNames,scene,data,rootUrl,meshes,particleSystems,skeletons) {
	var parsedData = JSON.parse(data);
	var loadedSkeletonsIds = [];
	var loadedMaterialsIds = [];
	var hierarchyIds = [];
	var pdm = parsedData.meshes;
	var _g1 = 0;
	var _g = pdm.length;
	while(_g1 < _g) {
		var index = _g1++;
		var parsedMesh = pdm[index];
		if(meshesNames == null || meshesNames == "" || com_babylonhx_loading_plugins_BabylonFileLoader.isDescendantOf(parsedMesh,meshesNames,hierarchyIds)) {
			if((meshesNames instanceof Array) && meshesNames.__enum__ == null) meshesNames.splice(meshesNames.indexOf(parsedMesh.name),1);
			if(parsedMesh.geometryId != null) {
				if(parsedData.geometries != null) {
					var found = false;
					var _g2 = 0;
					var _g3 = ["boxes","spheres","cylinders","toruses","grounds","planes","torusKnots","vertexData"];
					while(_g2 < _g3.length) {
						var geometryType = _g3[_g2];
						++_g2;
						if(found || Reflect.getProperty(parsedData.geometries,geometryType) == null || !((Reflect.getProperty(parsedData.geometries,geometryType) instanceof Array) && Reflect.getProperty(parsedData.geometries,geometryType).__enum__ == null)) continue; else {
							var geomData = Reflect.getProperty(parsedData.geometries,geometryType);
							var _g4 = 0;
							while(_g4 < geomData.length) {
								var parsedGeometryData = geomData[_g4];
								++_g4;
								if(parsedGeometryData.id == parsedMesh.geometryId) {
									switch(geometryType) {
									case "boxes":
										com_babylonhx_loading_plugins_BabylonFileLoader.parseBox(parsedGeometryData,scene);
										break;
									case "spheres":
										com_babylonhx_loading_plugins_BabylonFileLoader.parseSphere(parsedGeometryData,scene);
										break;
									case "cylinders":
										com_babylonhx_loading_plugins_BabylonFileLoader.parseCylinder(parsedGeometryData,scene);
										break;
									case "toruses":
										com_babylonhx_loading_plugins_BabylonFileLoader.parseTorus(parsedGeometryData,scene);
										break;
									case "grounds":
										com_babylonhx_loading_plugins_BabylonFileLoader.parseGround(parsedGeometryData,scene);
										break;
									case "planes":
										com_babylonhx_loading_plugins_BabylonFileLoader.parsePlane(parsedGeometryData,scene);
										break;
									case "torusKnots":
										com_babylonhx_loading_plugins_BabylonFileLoader.parseTorusKnot(parsedGeometryData,scene);
										break;
									case "vertexData":
										com_babylonhx_loading_plugins_BabylonFileLoader.parseVertexData(parsedGeometryData,scene,rootUrl);
										break;
									}
									found = true;
								}
							}
						}
					}
					if(!found) haxe_Log.trace("Geometry not found for mesh " + parsedMesh.id,{ fileName : "BabylonFileLoader.hx", lineNumber : 149, className : "com.babylonhx.loading.plugins.BabylonFileLoader", methodName : "_plugin"});
				}
			}
			if(Object.prototype.hasOwnProperty.call(parsedMesh,"materialId")) {
				var materialFound = HxOverrides.indexOf(loadedMaterialsIds,parsedMesh.materialId,0) != -1;
				if(!materialFound && parsedData.multiMaterials != null) {
					var pdmm = parsedData.multiMaterials;
					var _g31 = 0;
					var _g21 = pdmm.length;
					while(_g31 < _g21) {
						var multimatIndex = _g31++;
						var parsedMultiMaterial = pdmm[multimatIndex];
						if(parsedMultiMaterial.id == parsedMesh.materialId) {
							var pdmmm = parsedMultiMaterial.materials;
							var _g5 = 0;
							var _g41 = pdmmm.length;
							while(_g5 < _g41) {
								var matIndex = _g5++;
								var subMatId = pdmmm[matIndex];
								loadedMaterialsIds.push(subMatId);
								com_babylonhx_loading_plugins_BabylonFileLoader.parseMaterialById(subMatId == null?"null":"" + subMatId,parsedData,scene,rootUrl);
							}
							loadedMaterialsIds.push(parsedMultiMaterial.id);
							com_babylonhx_loading_plugins_BabylonFileLoader.parseMultiMaterial(parsedMultiMaterial,scene);
							materialFound = true;
							break;
						}
					}
				}
				if(!materialFound) {
					loadedMaterialsIds.push(parsedMesh.materialId);
					com_babylonhx_loading_plugins_BabylonFileLoader.parseMaterialById(parsedMesh.materialId,parsedData,scene,rootUrl);
				}
			}
			if(parsedMesh.skeletonId > -1 && scene.skeletons != null) {
				var skeletonAlreadyLoaded = HxOverrides.indexOf(loadedSkeletonsIds,parsedMesh.skeletonId,0) > -1;
				if(!skeletonAlreadyLoaded) {
					var pds = parsedData.skeletons;
					var _g32 = 0;
					var _g22 = pds.length;
					while(_g32 < _g22) {
						var skeletonIndex = _g32++;
						var parsedSkeleton = pds[skeletonIndex];
						if(parsedSkeleton.id == parsedMesh.skeletonId) {
							skeletons.push(com_babylonhx_loading_plugins_BabylonFileLoader.parseSkeleton(parsedSkeleton,scene));
							loadedSkeletonsIds.push(parsedSkeleton.id);
						}
					}
				}
			}
			var mesh = com_babylonhx_loading_plugins_BabylonFileLoader.parseMesh(parsedMesh,scene,rootUrl);
			meshes.push(mesh);
		}
	}
	var _g11 = 0;
	var _g6 = scene.meshes.length;
	while(_g11 < _g6) {
		var index1 = _g11++;
		var currentMesh = scene.meshes[index1];
		if(currentMesh._waitingParentId != null) {
			currentMesh.parent = scene.getLastEntryByID(currentMesh._waitingParentId);
			currentMesh._waitingParentId = null;
		}
	}
	if(parsedData.particleSystems != null) {
		var pdp = parsedData.particleSystems;
		var _g12 = 0;
		var _g7 = pdp.length;
		while(_g12 < _g7) {
			var index2 = _g12++;
			var parsedParticleSystem = pdp[index2];
			if(HxOverrides.indexOf(hierarchyIds,parsedParticleSystem.emitterId,0) != -1) particleSystems.push(com_babylonhx_loading_plugins_BabylonFileLoader.parseParticleSystem(parsedParticleSystem,scene,rootUrl));
		}
	}
	return true;
}, load : function(scene1,data1,rootUrl1) {
	if(data1 == null) {
		haxe_Log.trace("error: no data!",{ fileName : "BabylonFileLoader.hx", lineNumber : 230, className : "com.babylonhx.loading.plugins.BabylonFileLoader", methodName : "_plugin"});
		return false;
	}
	var parsedData1 = JSON.parse(data1);
	scene1.useDelayedTextureLoading = parsedData1.useDelayedTextureLoading && !com_babylonhx_loading_SceneLoader.ForceFullSceneLoadingForIncremental;
	scene1.autoClear = parsedData1.autoClear;
	scene1.clearColor = com_babylonhx_math_Color3.FromArray(parsedData1.clearColor,null);
	scene1.ambientColor = com_babylonhx_math_Color3.FromArray(parsedData1.ambientColor,null);
	scene1.gravity = com_babylonhx_math_Vector3.FromArray(parsedData1.gravity,null);
	if(parsedData1.fogMode != null && parsedData1.fogMode != 0) {
		scene1.fogMode = parsedData1.fogMode;
		scene1.fogColor = com_babylonhx_math_Color3.FromArray(parsedData1.fogColor,null);
		scene1.fogStart = parsedData1.fogStart;
		scene1.fogEnd = parsedData1.fogEnd;
		scene1.fogDensity = parsedData1.fogDensity;
	}
	var _g13 = 0;
	var _g8 = parsedData1.lights.length;
	while(_g13 < _g8) {
		var index3 = _g13++;
		var parsedLight = parsedData1.lights[index3];
		com_babylonhx_loading_plugins_BabylonFileLoader.parseLight(parsedLight,scene1);
	}
	if(parsedData1.materials != null) {
		var _g14 = 0;
		var _g9 = parsedData1.materials.length;
		while(_g14 < _g9) {
			var index4 = _g14++;
			var parsedMaterial = parsedData1.materials[index4];
			com_babylonhx_loading_plugins_BabylonFileLoader.parseMaterial(parsedMaterial,scene1,rootUrl1);
		}
	}
	if(parsedData1.multiMaterials != null) {
		var _g15 = 0;
		var _g10 = parsedData1.multiMaterials.length;
		while(_g15 < _g10) {
			var index5 = _g15++;
			var parsedMultiMaterial1 = parsedData1.multiMaterials[index5];
			com_babylonhx_loading_plugins_BabylonFileLoader.parseMultiMaterial(parsedMultiMaterial1,scene1);
		}
	}
	if(parsedData1.skeletons != null) {
		var _g16 = 0;
		var _g17 = parsedData1.skeletons.length;
		while(_g16 < _g17) {
			var index6 = _g16++;
			var parsedSkeleton1 = parsedData1.skeletons[index6];
			com_babylonhx_loading_plugins_BabylonFileLoader.parseSkeleton(parsedSkeleton1,scene1);
		}
	}
	var geometries = parsedData1.geometries;
	if(geometries != null) {
		var boxes = geometries.boxes;
		if(boxes != null) {
			var _g18 = 0;
			var _g19 = boxes.length;
			while(_g18 < _g19) {
				var index7 = _g18++;
				var parsedBox = boxes[index7];
				com_babylonhx_loading_plugins_BabylonFileLoader.parseBox(parsedBox,scene1);
			}
		}
		var spheres = geometries.spheres;
		if(spheres != null) {
			var _g110 = 0;
			var _g20 = spheres.length;
			while(_g110 < _g20) {
				var index8 = _g110++;
				var parsedSphere = spheres[index8];
				com_babylonhx_loading_plugins_BabylonFileLoader.parseSphere(parsedSphere,scene1);
			}
		}
		var cylinders = geometries.cylinders;
		if(cylinders != null) {
			var _g111 = 0;
			var _g23 = cylinders.length;
			while(_g111 < _g23) {
				var index9 = _g111++;
				var parsedCylinder = cylinders[index9];
				com_babylonhx_loading_plugins_BabylonFileLoader.parseCylinder(parsedCylinder,scene1);
			}
		}
		var toruses = geometries.toruses;
		if(toruses != null) {
			var _g112 = 0;
			var _g24 = toruses.length;
			while(_g112 < _g24) {
				var index10 = _g112++;
				var parsedTorus = toruses[index10];
				com_babylonhx_loading_plugins_BabylonFileLoader.parseTorus(parsedTorus,scene1);
			}
		}
		var grounds = geometries.grounds;
		if(grounds != null) {
			var _g113 = 0;
			var _g25 = grounds.length;
			while(_g113 < _g25) {
				var index11 = _g113++;
				var parsedGround = grounds[index11];
				com_babylonhx_loading_plugins_BabylonFileLoader.parseGround(parsedGround,scene1);
			}
		}
		var planes = geometries.planes;
		if(planes != null) {
			var _g114 = 0;
			var _g26 = planes.length;
			while(_g114 < _g26) {
				var index12 = _g114++;
				var parsedPlane = planes[index12];
				com_babylonhx_loading_plugins_BabylonFileLoader.parsePlane(parsedPlane,scene1);
			}
		}
		var torusKnots = geometries.torusKnots;
		if(torusKnots != null) {
			var _g115 = 0;
			var _g27 = torusKnots.length;
			while(_g115 < _g27) {
				var index13 = _g115++;
				var parsedTorusKnot = torusKnots[index13];
				com_babylonhx_loading_plugins_BabylonFileLoader.parseTorusKnot(parsedTorusKnot,scene1);
			}
		}
		var vertexData = geometries.vertexData;
		if(vertexData != null) {
			var _g116 = 0;
			var _g28 = vertexData.length;
			while(_g116 < _g28) {
				var index14 = _g116++;
				var parsedVertexData = vertexData[index14];
				com_babylonhx_loading_plugins_BabylonFileLoader.parseVertexData(parsedVertexData,scene1,rootUrl1);
			}
		}
	}
	var pdm1 = parsedData1.meshes;
	var _g117 = 0;
	var _g29 = pdm1.length;
	while(_g117 < _g29) {
		var index15 = _g117++;
		var parsedMesh1 = pdm1[index15];
		com_babylonhx_loading_plugins_BabylonFileLoader.parseMesh(parsedMesh1,scene1,rootUrl1);
	}
	var pdc = parsedData1.cameras;
	var _g118 = 0;
	var _g30 = parsedData1.cameras.length;
	while(_g118 < _g30) {
		var index16 = _g118++;
		var parsedCamera = parsedData1.cameras[index16];
		com_babylonhx_loading_plugins_BabylonFileLoader.parseCamera(parsedCamera,scene1);
	}
	if(parsedData1.activeCameraID != null) scene1.setActiveCameraByID(parsedData1.activeCameraID);
	var _g119 = 0;
	var _g33 = scene1.cameras.length;
	while(_g119 < _g33) {
		var index17 = _g119++;
		var camera = scene1.cameras[index17];
		if(camera._waitingParentId != null) {
			camera.parent = scene1.getLastEntryByID(camera._waitingParentId);
			camera._waitingParentId = null;
		}
	}
	var _g120 = 0;
	var _g34 = scene1.lights.length;
	while(_g120 < _g34) {
		var index18 = _g120++;
		var light = scene1.lights[index18];
		if(light._waitingParentId != null) {
			light.parent = scene1.getLastEntryByID(light._waitingParentId);
			light._waitingParentId = null;
		}
	}
	var _g121 = 0;
	var _g35 = scene1.meshes.length;
	while(_g121 < _g35) {
		var index19 = _g121++;
		var mesh1 = scene1.meshes[index19];
		if(mesh1._waitingParentId != null) {
			mesh1.parent = scene1.getLastEntryByID(mesh1._waitingParentId);
			mesh1._waitingParentId = null;
		}
		if(mesh1._waitingActions != null) {
			com_babylonhx_loading_plugins_BabylonFileLoader.parseActions(mesh1._waitingActions,mesh1,scene1);
			mesh1._waitingActions = null;
		}
	}
	if(parsedData1.particleSystems != null) {
		var _g122 = 0;
		var _g36 = parsedData1.particleSystems.length;
		while(_g122 < _g36) {
			var index20 = _g122++;
			var parsedParticleSystem1 = parsedData1.particleSystems[index20];
			com_babylonhx_loading_plugins_BabylonFileLoader.parseParticleSystem(parsedParticleSystem1,scene1,rootUrl1);
		}
	}
	if(parsedData1.lensFlareSystems != null) {
		var _g123 = 0;
		var _g37 = parsedData1.lensFlareSystems.length;
		while(_g123 < _g37) {
			var index21 = _g123++;
			var parsedLensFlareSystem = parsedData1.lensFlareSystems[index21];
			com_babylonhx_loading_plugins_BabylonFileLoader.parseLensFlareSystem(parsedLensFlareSystem,scene1,rootUrl1);
		}
	}
	if(parsedData1.shadowGenerators != null) {
		var _g124 = 0;
		var _g38 = parsedData1.shadowGenerators.length;
		while(_g124 < _g38) {
			var index22 = _g124++;
			var parsedShadowGenerator = parsedData1.shadowGenerators[index22];
			com_babylonhx_loading_plugins_BabylonFileLoader.parseShadowGenerator(parsedShadowGenerator,scene1);
		}
	}
	if(parsedData1.actions != null) com_babylonhx_loading_plugins_BabylonFileLoader.parseActions(parsedData1.actions,null,scene1);
	return true;
}};
com_babylonhx_materials_ShadersStore.Shaders = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["anaglyph.fragment"] != null) _g.setReserved("anaglyph.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D leftSampler;\r\n\r\nvoid main(void)\r\n{\r\n    vec4 leftFrag = texture2D(leftSampler, vUV);\r\n    leftFrag = vec4(1.0, leftFrag.g, leftFrag.b, 1.0);\r\n\r\n\tvec4 rightFrag = texture2D(textureSampler, vUV);\r\n    rightFrag = vec4(rightFrag.r, 1.0, 1.0, 1.0);\r\n\r\n    gl_FragColor = vec4(rightFrag.rgb * leftFrag.rgb, 1.0);\r\n}"); else _g.h["anaglyph.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D leftSampler;\r\n\r\nvoid main(void)\r\n{\r\n    vec4 leftFrag = texture2D(leftSampler, vUV);\r\n    leftFrag = vec4(1.0, leftFrag.g, leftFrag.b, 1.0);\r\n\r\n\tvec4 rightFrag = texture2D(textureSampler, vUV);\r\n    rightFrag = vec4(rightFrag.r, 1.0, 1.0, 1.0);\r\n\r\n    gl_FragColor = vec4(rightFrag.rgb * leftFrag.rgb, 1.0);\r\n}";
	if(__map_reserved["blackAndWhite.fragment"] != null) _g.setReserved("blackAndWhite.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\nvoid main(void) \r\n{\r\n\tfloat luminance = dot(texture2D(textureSampler, vUV).rgb, vec3(0.3, 0.59, 0.11));\r\n\tgl_FragColor = vec4(luminance, luminance, luminance, 1.0);\r\n}"); else _g.h["blackAndWhite.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\nvoid main(void) \r\n{\r\n\tfloat luminance = dot(texture2D(textureSampler, vUV).rgb, vec3(0.3, 0.59, 0.11));\r\n\tgl_FragColor = vec4(luminance, luminance, luminance, 1.0);\r\n}";
	if(__map_reserved["blur.fragment"] != null) _g.setReserved("blur.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Parameters\r\nuniform vec2 screenSize;\r\nuniform vec2 direction;\r\nuniform float blurWidth;\r\n\r\nvoid main(void)\r\n{\r\n\tfloat weights[7];\r\n\tweights[0] = 0.05;\r\n\tweights[1] = 0.1;\r\n\tweights[2] = 0.2;\r\n\tweights[3] = 0.3;\r\n\tweights[4] = 0.2;\r\n\tweights[5] = 0.1;\r\n\tweights[6] = 0.05;\r\n\r\n\tvec2 texelSize = vec2(1.0 / screenSize.x, 1.0 / screenSize.y);\r\n\tvec2 texelStep = texelSize * direction * blurWidth;\r\n\tvec2 start = vUV - 3.0 * texelStep;\r\n\r\n\tvec4 baseColor = vec4(0., 0., 0., 0.);\r\n\tvec2 texelOffset = vec2(0., 0.);\r\n\r\n\tfor (int i = 0; i < 7; i++)\r\n\t{\r\n\t\tbaseColor += texture2D(textureSampler, start + texelOffset) * weights[i];\r\n\t\ttexelOffset += texelStep;\r\n\t}\r\n\r\n\tgl_FragColor = baseColor;\r\n}"); else _g.h["blur.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Parameters\r\nuniform vec2 screenSize;\r\nuniform vec2 direction;\r\nuniform float blurWidth;\r\n\r\nvoid main(void)\r\n{\r\n\tfloat weights[7];\r\n\tweights[0] = 0.05;\r\n\tweights[1] = 0.1;\r\n\tweights[2] = 0.2;\r\n\tweights[3] = 0.3;\r\n\tweights[4] = 0.2;\r\n\tweights[5] = 0.1;\r\n\tweights[6] = 0.05;\r\n\r\n\tvec2 texelSize = vec2(1.0 / screenSize.x, 1.0 / screenSize.y);\r\n\tvec2 texelStep = texelSize * direction * blurWidth;\r\n\tvec2 start = vUV - 3.0 * texelStep;\r\n\r\n\tvec4 baseColor = vec4(0., 0., 0., 0.);\r\n\tvec2 texelOffset = vec2(0., 0.);\r\n\r\n\tfor (int i = 0; i < 7; i++)\r\n\t{\r\n\t\tbaseColor += texture2D(textureSampler, start + texelOffset) * weights[i];\r\n\t\ttexelOffset += texelStep;\r\n\t}\r\n\r\n\tgl_FragColor = baseColor;\r\n}";
	if(__map_reserved["bricktexture.fragment"] != null) _g.setReserved("bricktexture.fragment","precision highp float;\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform float numberOfBricksHeight;\r\nuniform float numberOfBricksWidth;\r\nuniform vec3 brickColor;\r\nuniform vec3 jointColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nfloat round(float number){\r\n\treturn sign(number)*floor(abs(number) + 0.5);\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tfloat brickW = 1.0 / numberOfBricksWidth;\r\n\tfloat brickH = 1.0 / numberOfBricksHeight;\r\n\tfloat jointWPercentage = 0.01;\r\n\tfloat jointHPercentage = 0.05;\r\n\tvec3 color = brickColor;\r\n\tfloat yi = vUV.y / brickH;\r\n\tfloat nyi = round(yi);\r\n\tfloat xi = vUV.x / brickW;\r\n\r\n\tif (mod(floor(yi), 2.0) == 0.0){\r\n\t\txi = xi - 0.5;\r\n\t}\r\n\r\n\tfloat nxi = round(xi);\r\n\tvec2 brickvUV = vec2((xi - floor(xi)) / brickH, (yi - floor(yi)) /  brickW);\r\n\r\n\tif (yi < nyi + jointHPercentage && yi > nyi - jointHPercentage){\r\n\t\tcolor = mix(jointColor, vec3(0.37, 0.25, 0.25), (yi - nyi) / jointHPercentage + 0.2);\r\n\t}\r\n\telse if (xi < nxi + jointWPercentage && xi > nxi - jointWPercentage){\r\n\t\tcolor = mix(jointColor, vec3(0.44, 0.44, 0.44), (xi - nxi) / jointWPercentage + 0.2);\r\n\t}\r\n\telse {\r\n\t\tfloat brickColorSwitch = mod(floor(yi) + floor(xi), 3.0);\r\n\r\n\t\tif (brickColorSwitch == 0.0)\r\n\t\t\tcolor = mix(color, vec3(0.33, 0.33, 0.33), 0.3);\r\n\t\telse if (brickColorSwitch == 2.0)\r\n\t\t\tcolor = mix(color, vec3(0.11, 0.11, 0.11), 0.3);\r\n\t}\r\n\r\n\tgl_FragColor = vec4(color, 1.0);\r\n}"); else _g.h["bricktexture.fragment"] = "precision highp float;\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform float numberOfBricksHeight;\r\nuniform float numberOfBricksWidth;\r\nuniform vec3 brickColor;\r\nuniform vec3 jointColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nfloat round(float number){\r\n\treturn sign(number)*floor(abs(number) + 0.5);\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tfloat brickW = 1.0 / numberOfBricksWidth;\r\n\tfloat brickH = 1.0 / numberOfBricksHeight;\r\n\tfloat jointWPercentage = 0.01;\r\n\tfloat jointHPercentage = 0.05;\r\n\tvec3 color = brickColor;\r\n\tfloat yi = vUV.y / brickH;\r\n\tfloat nyi = round(yi);\r\n\tfloat xi = vUV.x / brickW;\r\n\r\n\tif (mod(floor(yi), 2.0) == 0.0){\r\n\t\txi = xi - 0.5;\r\n\t}\r\n\r\n\tfloat nxi = round(xi);\r\n\tvec2 brickvUV = vec2((xi - floor(xi)) / brickH, (yi - floor(yi)) /  brickW);\r\n\r\n\tif (yi < nyi + jointHPercentage && yi > nyi - jointHPercentage){\r\n\t\tcolor = mix(jointColor, vec3(0.37, 0.25, 0.25), (yi - nyi) / jointHPercentage + 0.2);\r\n\t}\r\n\telse if (xi < nxi + jointWPercentage && xi > nxi - jointWPercentage){\r\n\t\tcolor = mix(jointColor, vec3(0.44, 0.44, 0.44), (xi - nxi) / jointWPercentage + 0.2);\r\n\t}\r\n\telse {\r\n\t\tfloat brickColorSwitch = mod(floor(yi) + floor(xi), 3.0);\r\n\r\n\t\tif (brickColorSwitch == 0.0)\r\n\t\t\tcolor = mix(color, vec3(0.33, 0.33, 0.33), 0.3);\r\n\t\telse if (brickColorSwitch == 2.0)\r\n\t\t\tcolor = mix(color, vec3(0.11, 0.11, 0.11), 0.3);\r\n\t}\r\n\r\n\tgl_FragColor = vec4(color, 1.0);\r\n}";
	if(__map_reserved["chromaticAberration.fragment"] != null) _g.setReserved("chromaticAberration.fragment","// BABYLON.JS Chromatic Aberration GLSL Shader\r\n// Author: Olivier Guyot\r\n// Separates very slightly R, G and B colors on the edges of the screen\r\n// Inspired by Francois Tarlier & Martins Upitis\r\n\r\nprecision highp float;\r\n\r\n// samplers\r\nuniform sampler2D textureSampler;\t// original color\r\n\r\n// uniforms\r\nuniform float chromatic_aberration;\r\nuniform float screen_width;\r\nuniform float screen_height;\r\n\r\n// varyings\r\nvarying vec2 vUV;\r\n\r\nvoid main(void)\r\n{\r\n\tvec2 centered_screen_pos = vec2(vUV.x - 0.5, vUV.y - 0.5);\r\n\tfloat radius2 = centered_screen_pos.x*centered_screen_pos.x\r\n\t\t+ centered_screen_pos.y*centered_screen_pos.y;\r\n\tfloat radius = sqrt(radius2);\r\n\r\n\tvec4 original = texture2D(textureSampler, vUV);\r\n\r\n\tif (chromatic_aberration > 0.0) {\r\n\t\t//index of refraction of each color channel, causing chromatic dispersion\r\n\t\tvec3 ref_indices = vec3(-0.3, 0.0, 0.3);\r\n\t\tfloat ref_shiftX = chromatic_aberration * radius * 17.0 / screen_width;\r\n\t\tfloat ref_shiftY = chromatic_aberration * radius * 17.0 / screen_height;\r\n\r\n\t\t// shifts for red, green & blue\r\n\t\tvec2 ref_coords_r = vec2(vUV.x + ref_indices.r*ref_shiftX, vUV.y + ref_indices.r*ref_shiftY*0.5);\r\n\t\tvec2 ref_coords_g = vec2(vUV.x + ref_indices.g*ref_shiftX, vUV.y + ref_indices.g*ref_shiftY*0.5);\r\n\t\tvec2 ref_coords_b = vec2(vUV.x + ref_indices.b*ref_shiftX, vUV.y + ref_indices.b*ref_shiftY*0.5);\r\n\r\n\t\toriginal.r = texture2D(textureSampler, ref_coords_r).r;\r\n\t\toriginal.g = texture2D(textureSampler, ref_coords_g).g;\r\n\t\toriginal.b = texture2D(textureSampler, ref_coords_b).b;\r\n\t}\r\n\r\n\tgl_FragColor = original;\r\n}"); else _g.h["chromaticAberration.fragment"] = "// BABYLON.JS Chromatic Aberration GLSL Shader\r\n// Author: Olivier Guyot\r\n// Separates very slightly R, G and B colors on the edges of the screen\r\n// Inspired by Francois Tarlier & Martins Upitis\r\n\r\nprecision highp float;\r\n\r\n// samplers\r\nuniform sampler2D textureSampler;\t// original color\r\n\r\n// uniforms\r\nuniform float chromatic_aberration;\r\nuniform float screen_width;\r\nuniform float screen_height;\r\n\r\n// varyings\r\nvarying vec2 vUV;\r\n\r\nvoid main(void)\r\n{\r\n\tvec2 centered_screen_pos = vec2(vUV.x - 0.5, vUV.y - 0.5);\r\n\tfloat radius2 = centered_screen_pos.x*centered_screen_pos.x\r\n\t\t+ centered_screen_pos.y*centered_screen_pos.y;\r\n\tfloat radius = sqrt(radius2);\r\n\r\n\tvec4 original = texture2D(textureSampler, vUV);\r\n\r\n\tif (chromatic_aberration > 0.0) {\r\n\t\t//index of refraction of each color channel, causing chromatic dispersion\r\n\t\tvec3 ref_indices = vec3(-0.3, 0.0, 0.3);\r\n\t\tfloat ref_shiftX = chromatic_aberration * radius * 17.0 / screen_width;\r\n\t\tfloat ref_shiftY = chromatic_aberration * radius * 17.0 / screen_height;\r\n\r\n\t\t// shifts for red, green & blue\r\n\t\tvec2 ref_coords_r = vec2(vUV.x + ref_indices.r*ref_shiftX, vUV.y + ref_indices.r*ref_shiftY*0.5);\r\n\t\tvec2 ref_coords_g = vec2(vUV.x + ref_indices.g*ref_shiftX, vUV.y + ref_indices.g*ref_shiftY*0.5);\r\n\t\tvec2 ref_coords_b = vec2(vUV.x + ref_indices.b*ref_shiftX, vUV.y + ref_indices.b*ref_shiftY*0.5);\r\n\r\n\t\toriginal.r = texture2D(textureSampler, ref_coords_r).r;\r\n\t\toriginal.g = texture2D(textureSampler, ref_coords_g).g;\r\n\t\toriginal.b = texture2D(textureSampler, ref_coords_b).b;\r\n\t}\r\n\r\n\tgl_FragColor = original;\r\n}";
	if(__map_reserved["cloudtexture.fragment"] != null) _g.setReserved("cloudtexture.fragment","precision highp float;\r\n\r\nvarying vec2 vUV;\r\n\r\nuniform vec4 skyColor;\r\nuniform vec4 cloudColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main() {\r\n\r\n\tvec2 p = vUV * 12.0;\r\n\tvec4 c = mix(skyColor, cloudColor, fbm(p));\r\n\tgl_FragColor = c;\r\n\r\n}\r\n\r\n"); else _g.h["cloudtexture.fragment"] = "precision highp float;\r\n\r\nvarying vec2 vUV;\r\n\r\nuniform vec4 skyColor;\r\nuniform vec4 cloudColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main() {\r\n\r\n\tvec2 p = vUV * 12.0;\r\n\tvec4 c = mix(skyColor, cloudColor, fbm(p));\r\n\tgl_FragColor = c;\r\n\r\n}\r\n\r\n";
	if(__map_reserved["color.fragment"] != null) _g.setReserved("color.fragment","precision highp float;\r\n\r\nuniform vec4 color;\r\n\r\nvoid main(void) {\r\n\tgl_FragColor = color;\r\n}"); else _g.h["color.fragment"] = "precision highp float;\r\n\r\nuniform vec4 color;\r\n\r\nvoid main(void) {\r\n\tgl_FragColor = color;\r\n}";
	if(__map_reserved["color.vertex"] != null) _g.setReserved("color.vertex","precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\n\r\n// Uniforms\r\nuniform mat4 worldViewProjection;\r\n\r\nvoid main(void) {\r\n\tgl_Position = worldViewProjection * vec4(position, 1.0);\r\n}"); else _g.h["color.vertex"] = "precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\n\r\n// Uniforms\r\nuniform mat4 worldViewProjection;\r\n\r\nvoid main(void) {\r\n\tgl_Position = worldViewProjection * vec4(position, 1.0);\r\n}";
	if(__map_reserved["colorCorrection.fragment"] != null) _g.setReserved("colorCorrection.fragment","precision highp float;\r\n\r\n// samplers\r\nuniform sampler2D textureSampler;\t// screen render\r\nuniform sampler2D colorTable;\t\t// color table with modified colors\r\n\r\n// varyings\r\nvarying vec2 vUV;\r\n\r\n// constants\r\nconst float SLICE_COUNT = 16.0;\t\t// how many slices in the color cube; 1 slice = 1 pixel\r\n// it means the image is 256x16 pixels\r\n\r\nvec4 sampleAs3DTexture(sampler2D texture, vec3 uv, float width) {\r\n\tfloat sliceSize = 1.0 / width;              // space of 1 slice\r\n\tfloat slicePixelSize = sliceSize / width;           // space of 1 pixel\r\n\tfloat sliceInnerSize = slicePixelSize * (width - 1.0);  // space of width pixels\r\n\tfloat zSlice0 = min(floor(uv.z * width), width - 1.0);\r\n\tfloat zSlice1 = min(zSlice0 + 1.0, width - 1.0);\r\n\tfloat xOffset = slicePixelSize * 0.5 + uv.x * sliceInnerSize;\r\n\tfloat s0 = xOffset + (zSlice0 * sliceSize);\r\n\tfloat s1 = xOffset + (zSlice1 * sliceSize);\r\n\tvec4 slice0Color = texture2D(texture, vec2(s0, uv.y));\r\n\tvec4 slice1Color = texture2D(texture, vec2(s1, uv.y));\r\n\tfloat zOffset = mod(uv.z * width, 1.0);\r\n\tvec4 result = mix(slice0Color, slice1Color, zOffset);\r\n\treturn result;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tvec4 screen_color = texture2D(textureSampler, vUV);\r\n\tgl_FragColor = sampleAs3DTexture(colorTable, screen_color.rgb, SLICE_COUNT);\r\n\r\n}"); else _g.h["colorCorrection.fragment"] = "precision highp float;\r\n\r\n// samplers\r\nuniform sampler2D textureSampler;\t// screen render\r\nuniform sampler2D colorTable;\t\t// color table with modified colors\r\n\r\n// varyings\r\nvarying vec2 vUV;\r\n\r\n// constants\r\nconst float SLICE_COUNT = 16.0;\t\t// how many slices in the color cube; 1 slice = 1 pixel\r\n// it means the image is 256x16 pixels\r\n\r\nvec4 sampleAs3DTexture(sampler2D texture, vec3 uv, float width) {\r\n\tfloat sliceSize = 1.0 / width;              // space of 1 slice\r\n\tfloat slicePixelSize = sliceSize / width;           // space of 1 pixel\r\n\tfloat sliceInnerSize = slicePixelSize * (width - 1.0);  // space of width pixels\r\n\tfloat zSlice0 = min(floor(uv.z * width), width - 1.0);\r\n\tfloat zSlice1 = min(zSlice0 + 1.0, width - 1.0);\r\n\tfloat xOffset = slicePixelSize * 0.5 + uv.x * sliceInnerSize;\r\n\tfloat s0 = xOffset + (zSlice0 * sliceSize);\r\n\tfloat s1 = xOffset + (zSlice1 * sliceSize);\r\n\tvec4 slice0Color = texture2D(texture, vec2(s0, uv.y));\r\n\tvec4 slice1Color = texture2D(texture, vec2(s1, uv.y));\r\n\tfloat zOffset = mod(uv.z * width, 1.0);\r\n\tvec4 result = mix(slice0Color, slice1Color, zOffset);\r\n\treturn result;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tvec4 screen_color = texture2D(textureSampler, vUV);\r\n\tgl_FragColor = sampleAs3DTexture(colorTable, screen_color.rgb, SLICE_COUNT);\r\n\r\n}";
	if(__map_reserved["convolution.fragment"] != null) _g.setReserved("convolution.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\nuniform vec2 screenSize;\r\nuniform float kernel[9];\r\n\r\nvoid main(void)\r\n{\r\n\tvec2 onePixel = vec2(1.0, 1.0) / screenSize;\r\n\tvec4 colorSum =\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(-1, -1)) * kernel[0] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(0, -1)) * kernel[1] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(1, -1)) * kernel[2] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(-1, 0)) * kernel[3] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(0, 0)) * kernel[4] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(1, 0)) * kernel[5] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(-1, 1)) * kernel[6] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(0, 1)) * kernel[7] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(1, 1)) * kernel[8];\r\n\r\n\tfloat kernelWeight =\r\n\t\tkernel[0] +\r\n\t\tkernel[1] +\r\n\t\tkernel[2] +\r\n\t\tkernel[3] +\r\n\t\tkernel[4] +\r\n\t\tkernel[5] +\r\n\t\tkernel[6] +\r\n\t\tkernel[7] +\r\n\t\tkernel[8];\r\n\r\n\tif (kernelWeight <= 0.0) {\r\n\t\tkernelWeight = 1.0;\r\n\t}\r\n\r\n\tgl_FragColor = vec4((colorSum / kernelWeight).rgb, 1);\r\n}"); else _g.h["convolution.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\nuniform vec2 screenSize;\r\nuniform float kernel[9];\r\n\r\nvoid main(void)\r\n{\r\n\tvec2 onePixel = vec2(1.0, 1.0) / screenSize;\r\n\tvec4 colorSum =\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(-1, -1)) * kernel[0] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(0, -1)) * kernel[1] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(1, -1)) * kernel[2] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(-1, 0)) * kernel[3] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(0, 0)) * kernel[4] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(1, 0)) * kernel[5] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(-1, 1)) * kernel[6] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(0, 1)) * kernel[7] +\r\n\t\ttexture2D(textureSampler, vUV + onePixel * vec2(1, 1)) * kernel[8];\r\n\r\n\tfloat kernelWeight =\r\n\t\tkernel[0] +\r\n\t\tkernel[1] +\r\n\t\tkernel[2] +\r\n\t\tkernel[3] +\r\n\t\tkernel[4] +\r\n\t\tkernel[5] +\r\n\t\tkernel[6] +\r\n\t\tkernel[7] +\r\n\t\tkernel[8];\r\n\r\n\tif (kernelWeight <= 0.0) {\r\n\t\tkernelWeight = 1.0;\r\n\t}\r\n\r\n\tgl_FragColor = vec4((colorSum / kernelWeight).rgb, 1);\r\n}";
	if(__map_reserved["default.fragment"] != null) _g.setReserved("default.fragment","#ifdef BUMP\r\n#extension GL_OES_standard_derivatives : enable\r\n#endif\r\n\r\n#ifdef LOGARITHMICDEPTH\r\n#extension GL_EXT_frag_depth : enable\r\n#endif\r\n\r\nprecision highp float;\r\n\r\n// Constants\r\n#define RECIPROCAL_PI2 0.15915494\r\n\r\nuniform vec3 vEyePosition;\r\nuniform vec3 vAmbientColor;\r\nuniform vec4 vDiffuseColor;\r\n#ifdef SPECULARTERM\r\nuniform vec4 vSpecularColor;\r\n#endif\r\nuniform vec3 vEmissiveColor;\r\n\r\n// Input\r\nvarying vec3 vPositionW;\r\n\r\n#ifdef NORMAL\r\nvarying vec3 vNormalW;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n// Lights\r\n#ifdef LIGHT0\r\nuniform vec4 vLightData0;\r\nuniform vec4 vLightDiffuse0;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular0;\r\n#endif\r\n#ifdef SHADOW0\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\nvarying vec4 vPositionFromLight0;\r\nuniform sampler2D shadowSampler0;\r\n#else\r\nuniform samplerCube shadowSampler0;\r\n#endif\r\nuniform vec3 shadowsInfo0;\r\n#endif\r\n#ifdef SPOTLIGHT0\r\nuniform vec4 vLightDirection0;\r\n#endif\r\n#ifdef HEMILIGHT0\r\nuniform vec3 vLightGround0;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\nuniform vec4 vLightData1;\r\nuniform vec4 vLightDiffuse1;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular1;\r\n#endif\r\n#ifdef SHADOW1\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\nvarying vec4 vPositionFromLight1;\r\nuniform sampler2D shadowSampler1;\r\n#else\r\nuniform samplerCube shadowSampler1;\r\n#endif\r\nuniform vec3 shadowsInfo1;\r\n#endif\r\n#ifdef SPOTLIGHT1\r\nuniform vec4 vLightDirection1;\r\n#endif\r\n#ifdef HEMILIGHT1\r\nuniform vec3 vLightGround1;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\nuniform vec4 vLightData2;\r\nuniform vec4 vLightDiffuse2;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular2;\r\n#endif\r\n#ifdef SHADOW2\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\nvarying vec4 vPositionFromLight2;\r\nuniform sampler2D shadowSampler2;\r\n#else\r\nuniform samplerCube shadowSampler2;\r\n#endif\r\nuniform vec3 shadowsInfo2;\r\n#endif\r\n#ifdef SPOTLIGHT2\r\nuniform vec4 vLightDirection2;\r\n#endif\r\n#ifdef HEMILIGHT2\r\nuniform vec3 vLightGround2;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\nuniform vec4 vLightData3;\r\nuniform vec4 vLightDiffuse3;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular3;\r\n#endif\r\n#ifdef SHADOW3\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\nvarying vec4 vPositionFromLight3;\r\nuniform sampler2D shadowSampler3;\r\n#else\r\nuniform samplerCube shadowSampler3;\r\n#endif\r\nuniform vec3 shadowsInfo3;\r\n#endif\r\n#ifdef SPOTLIGHT3\r\nuniform vec4 vLightDirection3;\r\n#endif\r\n#ifdef HEMILIGHT3\r\nuniform vec3 vLightGround3;\r\n#endif\r\n#endif\r\n\r\n// Samplers\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform sampler2D diffuseSampler;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#ifdef AMBIENT\r\nvarying vec2 vAmbientUV;\r\nuniform sampler2D ambientSampler;\r\nuniform vec2 vAmbientInfos;\r\n#endif\r\n\r\n#ifdef OPACITY\t\r\nvarying vec2 vOpacityUV;\r\nuniform sampler2D opacitySampler;\r\nuniform vec2 vOpacityInfos;\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\nvarying vec2 vEmissiveUV;\r\nuniform vec2 vEmissiveInfos;\r\nuniform sampler2D emissiveSampler;\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\nvarying vec2 vLightmapUV;\r\nuniform vec2 vLightmapInfos;\r\nuniform sampler2D lightmapSampler;\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\nvarying vec2 vSpecularUV;\r\nuniform vec2 vSpecularInfos;\r\nuniform sampler2D specularSampler;\r\n#endif\r\n\r\n// Fresnel\r\n#ifdef FRESNEL\r\nfloat computeFresnelTerm(vec3 viewDirection, vec3 worldNormal, float bias, float power)\r\n{\r\n\tfloat fresnelTerm = pow(bias + abs(dot(viewDirection, worldNormal)), power);\r\n\treturn clamp(fresnelTerm, 0., 1.);\r\n}\r\n#endif\r\n\r\n#ifdef DIFFUSEFRESNEL\r\nuniform vec4 diffuseLeftColor;\r\nuniform vec4 diffuseRightColor;\r\n#endif\r\n\r\n#ifdef OPACITYFRESNEL\r\nuniform vec4 opacityParts;\r\n#endif\r\n\r\n#ifdef EMISSIVEFRESNEL\r\nuniform vec4 emissiveLeftColor;\r\nuniform vec4 emissiveRightColor;\r\n#endif\r\n\r\n// Reflection\r\n#ifdef REFLECTION\r\nuniform vec2 vReflectionInfos;\r\n\r\n#ifdef REFLECTIONMAP_3D\r\nuniform samplerCube reflectionCubeSampler;\r\n#else\r\nuniform sampler2D reflection2DSampler;\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_SKYBOX\r\nvarying vec3 vPositionUVW;\r\n#else\r\n#ifdef REFLECTIONMAP_EQUIRECTANGULAR\r\nvarying vec3 vDirectionW;\r\n#endif\r\n\r\n#if defined(REFLECTIONMAP_PLANAR) || defined(REFLECTIONMAP_CUBIC) || defined(REFLECTIONMAP_PROJECTION)\r\nuniform mat4 reflectionMatrix;\r\n#endif\r\n#if defined(REFLECTIONMAP_SPHERICAL) || defined(REFLECTIONMAP_PROJECTION)\r\nuniform mat4 view;\r\n#endif\r\n#endif\r\n\r\nvec3 computeReflectionCoords(vec4 worldPos, vec3 worldNormal)\r\n{\r\n#ifdef REFLECTIONMAP_EQUIRECTANGULAR\r\n\tvec3 direction = normalize(vDirectionW);\r\n\r\n\tfloat t = clamp(direction.y * -0.5 + 0.5, 0., 1.0);\r\n\tfloat s = atan(direction.z, direction.x) * RECIPROCAL_PI2 + 0.5;\r\n\r\n\treturn vec3(s, t, 0);\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_SPHERICAL\r\n\tvec3 viewDir = normalize(vec3(view * worldPos));\r\n\tvec3 viewNormal = normalize(vec3(view * vec4(worldNormal, 0.0)));\r\n\r\n\tvec3 r = reflect(viewDir, viewNormal);\r\n\tr.z = r.z - 1.0;\r\n\r\n\tfloat m = 2.0 * length(r);\r\n\r\n\treturn vec3(r.x / m + 0.5, 1.0 - r.y / m - 0.5, 0);\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_PLANAR\r\n\tvec3 viewDir = worldPos.xyz - vEyePosition;\r\n\tvec3 coords = normalize(reflect(viewDir, worldNormal));\r\n\r\n\treturn vec3(reflectionMatrix * vec4(coords, 1));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_CUBIC\r\n\tvec3 viewDir = worldPos.xyz - vEyePosition;\r\n\tvec3 coords = reflect(viewDir, worldNormal);\r\n#ifdef INVERTCUBICMAP\r\n\tcoords.y = 1.0 - coords.y;\r\n#endif\r\n\treturn vec3(reflectionMatrix * vec4(coords, 0));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_PROJECTION\r\n\treturn vec3(reflectionMatrix * (view * worldPos));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_SKYBOX\r\n\treturn vPositionUVW;\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_EXPLICIT\r\n\treturn vec3(0, 0, 0);\r\n#endif\r\n}\r\n\r\n#ifdef REFLECTIONFRESNEL\r\nuniform vec4 reflectionLeftColor;\r\nuniform vec4 reflectionRightColor;\r\n#endif\r\n\r\n#endif\r\n\r\n// Shadows\r\n#ifdef SHADOWS\r\n\r\nfloat unpack(vec4 color)\r\n{\r\n\tconst vec4 bit_shift = vec4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\r\n\treturn dot(color, bit_shift);\r\n}\r\n\r\n#if defined(POINTLIGHT0) || defined(POINTLIGHT1) || defined(POINTLIGHT2) || defined(POINTLIGHT3)\r\nfloat computeShadowCube(vec3 lightPosition, samplerCube shadowSampler, float darkness, float bias)\r\n{\r\n\tvec3 directionToLight = vPositionW - lightPosition;\r\n\tfloat depth = length(directionToLight);\r\n\r\n\tdepth = clamp(depth, 0., 1.);\r\n\r\n\tdirectionToLight.y = 1.0 - directionToLight.y;\r\n\r\n\tfloat shadow = unpack(textureCube(shadowSampler, directionToLight)) + bias;\r\n\r\n\tif (depth > shadow)\r\n\t{\r\n\t\treturn darkness;\r\n\t}\r\n\treturn 1.0;\r\n}\r\n\r\nfloat computeShadowWithPCFCube(vec3 lightPosition, samplerCube shadowSampler, float mapSize, float bias, float darkness)\r\n{\r\n\tvec3 directionToLight = vPositionW - lightPosition;\r\n\tfloat depth = length(directionToLight);\r\n\tfloat diskScale = (1.0 - (1.0 + depth * 3.0)) / mapSize;\r\n\r\n\tdepth = clamp(depth, 0., 1.);\r\n\r\n\tdirectionToLight.y = 1.0 - directionToLight.y;\r\n\r\n\tfloat visibility = 1.;\r\n\r\n\tvec3 poissonDisk[4];\r\n\tpoissonDisk[0] = vec3(-1.0, 1.0, -1.0);\r\n\tpoissonDisk[1] = vec3(1.0, -1.0, -1.0);\r\n\tpoissonDisk[2] = vec3(-1.0, -1.0, -1.0);\r\n\tpoissonDisk[3] = vec3(1.0, -1.0, 1.0);\r\n\r\n\t// Poisson Sampling\r\n\tfloat biasedDepth = depth - bias;\r\n\r\n\tif (unpack(textureCube(shadowSampler, directionToLight + poissonDisk[0] * diskScale)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(textureCube(shadowSampler, directionToLight + poissonDisk[1] * diskScale)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(textureCube(shadowSampler, directionToLight + poissonDisk[2] * diskScale)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(textureCube(shadowSampler, directionToLight + poissonDisk[3] * diskScale)) < biasedDepth) visibility -= 0.25;\r\n\r\n\treturn  min(1.0, visibility + darkness);\r\n}\r\n#endif\r\n\r\n#if defined(SPOTLIGHT0) || defined(SPOTLIGHT1) || defined(SPOTLIGHT2) || defined(SPOTLIGHT3) ||  defined(DIRLIGHT0) || defined(DIRLIGHT1) || defined(DIRLIGHT2) || defined(DIRLIGHT3)\r\nfloat computeShadow(vec4 vPositionFromLight, sampler2D shadowSampler, float darkness, float bias)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tfloat shadow = unpack(texture2D(shadowSampler, uv)) + bias;\r\n\r\n\tif (depth.z > shadow)\r\n\t{\r\n\t\treturn darkness;\r\n\t}\r\n\treturn 1.;\r\n}\r\n\r\nfloat computeShadowWithPCF(vec4 vPositionFromLight, sampler2D shadowSampler, float mapSize, float bias, float darkness)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tfloat visibility = 1.;\r\n\r\n\tvec2 poissonDisk[4];\r\n\tpoissonDisk[0] = vec2(-0.94201624, -0.39906216);\r\n\tpoissonDisk[1] = vec2(0.94558609, -0.76890725);\r\n\tpoissonDisk[2] = vec2(-0.094184101, -0.92938870);\r\n\tpoissonDisk[3] = vec2(0.34495938, 0.29387760);\r\n\r\n\t// Poisson Sampling\r\n\tfloat biasedDepth = depth.z - bias;\r\n\r\n\tif (unpack(texture2D(shadowSampler, uv + poissonDisk[0] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(texture2D(shadowSampler, uv + poissonDisk[1] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(texture2D(shadowSampler, uv + poissonDisk[2] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(texture2D(shadowSampler, uv + poissonDisk[3] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\r\n\treturn  min(1.0, visibility + darkness);\r\n}\r\n\r\n// Thanks to http://devmaster.net/\r\nfloat unpackHalf(vec2 color)\r\n{\r\n\treturn color.x + (color.y / 255.0);\r\n}\r\n\r\nfloat linstep(float low, float high, float v) {\r\n\treturn clamp((v - low) / (high - low), 0.0, 1.0);\r\n}\r\n\r\nfloat ChebychevInequality(vec2 moments, float compare, float bias)\r\n{\r\n\tfloat p = smoothstep(compare - bias, compare, moments.x);\r\n\tfloat variance = max(moments.y - moments.x * moments.x, 0.02);\r\n\tfloat d = compare - moments.x;\r\n\tfloat p_max = linstep(0.2, 1.0, variance / (variance + d * d));\r\n\r\n\treturn clamp(max(p, p_max), 0.0, 1.0);\r\n}\r\n\r\nfloat computeShadowWithVSM(vec4 vPositionFromLight, sampler2D shadowSampler, float bias, float darkness)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0 || depth.z >= 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tvec4 texel = texture2D(shadowSampler, uv);\r\n\r\n\tvec2 moments = vec2(unpackHalf(texel.xy), unpackHalf(texel.zw));\r\n\treturn min(1.0, 1.0 - ChebychevInequality(moments, depth.z, bias) + darkness);\r\n}\r\n#endif\r\n#endif\r\n\r\n// Bump\r\n#ifdef BUMP\r\nvarying vec2 vBumpUV;\r\nuniform vec2 vBumpInfos;\r\nuniform sampler2D bumpSampler;\r\n\r\n// Thanks to http://www.thetenthplanet.de/archives/1180\r\nmat3 cotangent_frame(vec3 normal, vec3 p, vec2 uv)\r\n{\r\n\t// get edge vectors of the pixel triangle\r\n\tvec3 dp1 = dFdx(p);\r\n\tvec3 dp2 = dFdy(p);\r\n\tvec2 duv1 = dFdx(uv);\r\n\tvec2 duv2 = dFdy(uv);\r\n\r\n\t// solve the linear system\r\n\tvec3 dp2perp = cross(dp2, normal);\r\n\tvec3 dp1perp = cross(normal, dp1);\r\n\tvec3 tangent = dp2perp * duv1.x + dp1perp * duv2.x;\r\n\tvec3 binormal = dp2perp * duv1.y + dp1perp * duv2.y;\r\n\r\n\t// construct a scale-invariant frame \r\n\tfloat invmax = inversesqrt(max(dot(tangent, tangent), dot(binormal, binormal)));\r\n\treturn mat3(tangent * invmax, binormal * invmax, normal);\r\n}\r\n\r\nvec3 perturbNormal(vec3 viewDir)\r\n{\r\n\tvec3 map = texture2D(bumpSampler, vBumpUV).xyz;\r\n\tmap = map * 255. / 127. - 128. / 127.;\r\n\tmat3 TBN = cotangent_frame(vNormalW * vBumpInfos.y, -viewDir, vBumpUV);\r\n\treturn normalize(TBN * map);\r\n}\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n#ifdef LOGARITHMICDEPTH\r\nuniform float logarithmicDepthConstant;\r\nvarying float vFragmentDepth;\r\n#endif\r\n\r\n// Fog\r\n#ifdef FOG\r\n\r\n#define FOGMODE_NONE    0.\r\n#define FOGMODE_EXP     1.\r\n#define FOGMODE_EXP2    2.\r\n#define FOGMODE_LINEAR  3.\r\n#define E 2.71828\r\n\r\nuniform vec4 vFogInfos;\r\nuniform vec3 vFogColor;\r\nvarying float fFogDistance;\r\n\r\nfloat CalcFogFactor()\r\n{\r\n\tfloat fogCoeff = 1.0;\r\n\tfloat fogStart = vFogInfos.y;\r\n\tfloat fogEnd = vFogInfos.z;\r\n\tfloat fogDensity = vFogInfos.w;\r\n\r\n\tif (FOGMODE_LINEAR == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = (fogEnd - fFogDistance) / (fogEnd - fogStart);\r\n\t}\r\n\telse if (FOGMODE_EXP == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fogDensity);\r\n\t}\r\n\telse if (FOGMODE_EXP2 == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fFogDistance * fogDensity * fogDensity);\r\n\t}\r\n\r\n\treturn clamp(fogCoeff, 0.0, 1.0);\r\n}\r\n#endif\r\n\r\n// Light Computing\r\nstruct lightingInfo\r\n{\r\n\tvec3 diffuse;\r\n#ifdef SPECULARTERM\r\n\tvec3 specular;\r\n#endif\r\n};\r\n\r\nlightingInfo computeLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec3 diffuseColor, vec3 specularColor, float range, float glossiness) {\r\n\tlightingInfo result;\r\n\r\n\tvec3 lightVectorW;\r\n\tfloat attenuation = 1.0;\r\n\tif (lightData.w == 0.)\r\n\t{\r\n\t\tvec3 direction = lightData.xyz - vPositionW;\r\n\r\n\t\tattenuation = max(0., 1.0 - length(direction) / range);\r\n\t\tlightVectorW = normalize(direction);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tlightVectorW = normalize(-lightData.xyz);\r\n\t}\r\n\r\n\t// diffuse\r\n\tfloat ndl = max(0., dot(vNormal, lightVectorW));\r\n\tresult.diffuse = ndl * diffuseColor * attenuation;\r\n\r\n#ifdef SPECULARTERM\r\n\t// Specular\r\n\tvec3 angleW = normalize(viewDirectionW + lightVectorW);\r\n\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\tspecComp = pow(specComp, max(1., glossiness));\r\n\r\n\tresult.specular = specComp * specularColor * attenuation;\r\n#endif\r\n\treturn result;\r\n}\r\n\r\nlightingInfo computeSpotLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 lightDirection, vec3 diffuseColor, vec3 specularColor, float range, float glossiness) {\r\n\tlightingInfo result;\r\n\r\n\tvec3 direction = lightData.xyz - vPositionW;\r\n\tvec3 lightVectorW = normalize(direction);\r\n\tfloat attenuation = max(0., 1.0 - length(direction) / range);\r\n\r\n\t// diffuse\r\n\tfloat cosAngle = max(0., dot(-lightDirection.xyz, lightVectorW));\r\n\tfloat spotAtten = 0.0;\r\n\r\n\tif (cosAngle >= lightDirection.w)\r\n\t{\r\n\t\tcosAngle = max(0., pow(cosAngle, lightData.w));\r\n\t\tspotAtten = clamp((cosAngle - lightDirection.w) / (1. - cosAngle), 0.0, 1.0);\r\n\r\n\t\t// Diffuse\r\n\t\tfloat ndl = max(0., dot(vNormal, -lightDirection.xyz));\r\n\t\tresult.diffuse = ndl * spotAtten * diffuseColor * attenuation;\r\n\r\n#ifdef SPECULARTERM\r\n\t\t// Specular\r\n\t\tvec3 angleW = normalize(viewDirectionW - lightDirection.xyz);\r\n\t\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\t\tspecComp = pow(specComp, max(1., glossiness));\r\n\r\n\t\tresult.specular = specComp * specularColor * spotAtten * attenuation;\r\n#endif\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tresult.diffuse = vec3(0.);\r\n#ifdef SPECULARTERM\r\n\tresult.specular = vec3(0.);\r\n#endif\r\n\r\n\treturn result;\r\n}\r\n\r\nlightingInfo computeHemisphericLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec3 diffuseColor, vec3 specularColor, vec3 groundColor, float glossiness) {\r\n\tlightingInfo result;\r\n\r\n\t// Diffuse\r\n\tfloat ndl = dot(vNormal, lightData.xyz) * 0.5 + 0.5;\r\n\tresult.diffuse = mix(groundColor, diffuseColor, ndl);\r\n\r\n#ifdef SPECULARTERM\r\n\t// Specular\r\n\tvec3 angleW = normalize(viewDirectionW + lightData.xyz);\r\n\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\tspecComp = pow(specComp, max(1., glossiness));\r\n\r\n\tresult.specular = specComp * specularColor;\r\n#endif\r\n\r\n\treturn result;\r\n}\r\n\r\nvoid main(void) {\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tif (fClipDistance > 0.0)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tvec3 viewDirectionW = normalize(vEyePosition - vPositionW);\r\n\r\n\t// Base color\r\n\tvec4 baseColor = vec4(1., 1., 1., 1.);\r\n\tvec3 diffuseColor = vDiffuseColor.rgb;\r\n\r\n\t// Alpha\r\n\tfloat alpha = vDiffuseColor.a;\r\n\r\n#ifdef DIFFUSE\r\n\tbaseColor = texture2D(diffuseSampler, vDiffuseUV);\r\n\r\n#ifdef ALPHATEST\r\n\tif (baseColor.a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n#ifdef ALPHAFROMDIFFUSE\r\n\talpha *= baseColor.a;\r\n#endif\r\n\r\n\tbaseColor.rgb *= vDiffuseInfos.y;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\n\tbaseColor.rgb *= vColor.rgb;\r\n#endif\r\n\r\n\t// Bump\r\n#ifdef NORMAL\r\n\tvec3 normalW = normalize(vNormalW);\r\n#else\r\n\tvec3 normalW = vec3(1.0, 1.0, 1.0);\r\n#endif\r\n\r\n\r\n#ifdef BUMP\r\n\tnormalW = perturbNormal(viewDirectionW);\r\n#endif\r\n\r\n\t// Ambient color\r\n\tvec3 baseAmbientColor = vec3(1., 1., 1.);\r\n\r\n#ifdef AMBIENT\r\n\tbaseAmbientColor = texture2D(ambientSampler, vAmbientUV).rgb * vAmbientInfos.y;\r\n#endif\r\n\r\n\r\n\t// Specular map\r\n#ifdef SPECULARTERM\r\n\tfloat glossiness = vSpecularColor.a;\r\n\tvec3 specularColor = vSpecularColor.rgb;\r\n\r\n#ifdef SPECULAR\r\n\tvec4 specularMapColor = texture2D(specularSampler, vSpecularUV);\r\n\tspecularColor = specularMapColor.rgb;\r\n#ifdef GLOSSINESS\r\n\tglossiness = glossiness * specularMapColor.a;\r\n#endif\r\n#endif\r\n#else\r\n\tfloat glossiness = 0.;\r\n#endif\r\n\r\n\t// Lighting\r\n\tvec3 diffuseBase = vec3(0., 0., 0.);\r\n#ifdef SPECULARTERM\r\n\tvec3 specularBase = vec3(0., 0., 0.);\r\n#endif\r\n\tfloat shadow = 1.;\r\n\r\n#ifdef LIGHT0\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular0 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT0\r\n\tlightingInfo info = computeSpotLighting(viewDirectionW, normalW, vLightData0, vLightDirection0, vLightDiffuse0.rgb, vLightSpecular0, vLightDiffuse0.a, glossiness);\r\n#endif\r\n#ifdef HEMILIGHT0\r\n\tlightingInfo info = computeHemisphericLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0.rgb, vLightSpecular0, vLightGround0, glossiness);\r\n#endif\r\n#if defined(POINTLIGHT0) || defined(DIRLIGHT0)\r\n\tlightingInfo info = computeLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0.rgb, vLightSpecular0, vLightDiffuse0.a, glossiness);\r\n#endif\r\n#ifdef SHADOW0\r\n#ifdef SHADOWVSM0\r\n\tshadow = computeShadowWithVSM(vPositionFromLight0, shadowSampler0, shadowsInfo0.z, shadowsInfo0.x);\r\n#else\r\n#ifdef SHADOWPCF0\r\n#if defined(POINTLIGHT0)\r\n\tshadow = computeShadowWithPCFCube(vLightData0.xyz, shadowSampler0, shadowsInfo0.y, shadowsInfo0.z, shadowsInfo0.x);\r\n#else\r\n\tshadow = computeShadowWithPCF(vPositionFromLight0, shadowSampler0, shadowsInfo0.y, shadowsInfo0.z, shadowsInfo0.x);\r\n#endif\r\n#else\r\n#if defined(POINTLIGHT0)\r\n\tshadow = computeShadowCube(vLightData0.xyz, shadowSampler0, shadowsInfo0.x, shadowsInfo0.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight0, shadowSampler0, shadowsInfo0.x, shadowsInfo0.z);\r\n#endif\r\n#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular1 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT1\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData1, vLightDirection1, vLightDiffuse1.rgb, vLightSpecular1, vLightDiffuse1.a, glossiness);\r\n#endif\r\n#ifdef HEMILIGHT1\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1.rgb, vLightSpecular1, vLightGround1, glossiness);\r\n#endif\r\n#if defined(POINTLIGHT1) || defined(DIRLIGHT1)\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1.rgb, vLightSpecular1, vLightDiffuse1.a, glossiness);\r\n#endif\r\n#ifdef SHADOW1\r\n#ifdef SHADOWVSM1\r\n\tshadow = computeShadowWithVSM(vPositionFromLight1, shadowSampler1, shadowsInfo1.z, shadowsInfo1.x);\r\n#else\r\n#ifdef SHADOWPCF1\r\n#if defined(POINTLIGHT1)\r\n\tshadow = computeShadowWithPCFCube(vLightData1.xyz, shadowSampler1, shadowsInfo1.y, shadowsInfo1.z, shadowsInfo1.x);\r\n#else\r\n\tshadow = computeShadowWithPCF(vPositionFromLight1, shadowSampler1, shadowsInfo1.y, shadowsInfo1.z, shadowsInfo1.x);\r\n#endif\r\n#else\r\n#if defined(POINTLIGHT1)\r\n\tshadow = computeShadowCube(vLightData1.xyz, shadowSampler1, shadowsInfo1.x, shadowsInfo1.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight1, shadowSampler1, shadowsInfo1.x, shadowsInfo1.z);\r\n#endif\r\n#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular2 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT2\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData2, vLightDirection2, vLightDiffuse2.rgb, vLightSpecular2, vLightDiffuse2.a, glossiness);\r\n#endif\r\n#ifdef HEMILIGHT2\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2.rgb, vLightSpecular2, vLightGround2, glossiness);\r\n#endif\r\n#if defined(POINTLIGHT2) || defined(DIRLIGHT2)\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2.rgb, vLightSpecular2, vLightDiffuse2.a, glossiness);\r\n#endif\r\n#ifdef SHADOW2\r\n#ifdef SHADOWVSM2\r\n\tshadow = computeShadowWithVSM(vPositionFromLight2, shadowSampler2, shadowsInfo2.z, shadowsInfo2.x);\r\n#else\r\n#ifdef SHADOWPCF2\r\n#if defined(POINTLIGHT2)\r\n\tshadow = computeShadowWithPCFCube(vLightData2.xyz, shadowSampler2, shadowsInfo2.y, shadowsInfo2.z, shadowsInfo2.x);\r\n#else\r\n\tshadow = computeShadowWithPCF(vPositionFromLight2, shadowSampler2, shadowsInfo2.y, shadowsInfo2.z, shadowsInfo2.x);\r\n#endif\r\n#else\r\n#if defined(POINTLIGHT2)\r\n\tshadow = computeShadowCube(vLightData2.xyz, shadowSampler2, shadowsInfo2.x, shadowsInfo2.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight2, shadowSampler2, shadowsInfo2.x, shadowsInfo2.z);\r\n#endif\r\n#endif\t\r\n#endif\t\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular3 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT3\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData3, vLightDirection3, vLightDiffuse3.rgb, vLightSpecular3, vLightDiffuse3.a, glossiness);\r\n#endif\r\n#ifdef HEMILIGHT3\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3.rgb, vLightSpecular3, vLightGround3, glossiness);\r\n#endif\r\n#if defined(POINTLIGHT3) || defined(DIRLIGHT3)\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3.rgb, vLightSpecular3, vLightDiffuse3.a, glossiness);\r\n#endif\r\n#ifdef SHADOW3\r\n#ifdef SHADOWVSM3\r\n\tshadow = computeShadowWithVSM(vPositionFromLight3, shadowSampler3, shadowsInfo3.z, shadowsInfo3.x);\r\n#else\r\n#ifdef SHADOWPCF3\r\n#if defined(POINTLIGHT3)\r\n\tshadow = computeShadowWithPCFCube(vLightData3.xyz, shadowSampler3, shadowsInfo3.y, shadowsInfo3.z, shadowsInfo3.x);\r\n#else\r\n\tshadow = computeShadowWithPCF(vPositionFromLight3, shadowSampler3, shadowsInfo3.y, shadowsInfo3.z, shadowsInfo3.x);\r\n#endif\r\n#else\r\n#if defined(POINTLIGHT3)\r\n\tshadow = computeShadowCube(vLightData3.xyz, shadowSampler3, shadowsInfo3.x, shadowsInfo3.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight3, shadowSampler3, shadowsInfo3.x, shadowsInfo3.z);\r\n#endif\r\n#endif\t\r\n#endif\t\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n\t// Reflection\r\n\tvec3 reflectionColor = vec3(0., 0., 0.);\r\n\r\n\r\n#ifdef REFLECTION\r\n\tvec3 vReflectionUVW = computeReflectionCoords(vec4(vPositionW, 1.0), normalW);\r\n\r\n#ifdef REFLECTIONMAP_3D\r\n#ifdef ROUGHNESS\r\n\t float bias = vReflectionInfos.y;\r\n\r\n\t#ifdef SPECULARTERM\r\n\t#ifdef SPECULAR\r\n\t#ifdef GLOSSINESS\r\n\t\tbias *= (1.0 - specularMapColor.a);\r\n\t#endif\r\n\t#endif\r\n\t#endif\r\n\r\n\treflectionColor = textureCube(reflectionCubeSampler, vReflectionUVW, bias).rgb * vReflectionInfos.x;\r\n#else\r\n\treflectionColor = textureCube(reflectionCubeSampler, vReflectionUVW).rgb * vReflectionInfos.x;\r\n#endif\r\n\r\n#else\r\n\tvec2 coords = vReflectionUVW.xy;\r\n\r\n#ifdef REFLECTIONMAP_PROJECTION\r\n\tcoords /= vReflectionUVW.z;\r\n#endif\r\n\r\n\tcoords.y = 1.0 - coords.y;\r\n\r\n\treflectionColor = texture2D(reflection2DSampler, coords).rgb * vReflectionInfos.x;\r\n#endif\r\n\r\n#ifdef REFLECTIONFRESNEL\r\n\tfloat reflectionFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, reflectionRightColor.a, reflectionLeftColor.a);\r\n\r\n#ifdef REFLECTIONFRESNELFROMSPECULAR\r\n#ifdef SPECULARTERM\r\n\treflectionColor *= specularColor.rgb * (1.0 - reflectionFresnelTerm) + reflectionFresnelTerm * reflectionRightColor.rgb;\r\n#else\r\n\treflectionColor *= reflectionLeftColor.rgb * (1.0 - reflectionFresnelTerm) + reflectionFresnelTerm * reflectionRightColor.rgb;\r\n#endif\r\n#else\r\n\treflectionColor *= reflectionLeftColor.rgb * (1.0 - reflectionFresnelTerm) + reflectionFresnelTerm * reflectionRightColor.rgb;\r\n#endif\r\n#endif\r\n#endif\r\n\r\n\r\n#ifdef OPACITY\r\n\tvec4 opacityMap = texture2D(opacitySampler, vOpacityUV);\r\n\r\n#ifdef OPACITYRGB\r\n\topacityMap.rgb = opacityMap.rgb * vec3(0.3, 0.59, 0.11);\r\n\talpha *= (opacityMap.x + opacityMap.y + opacityMap.z)* vOpacityInfos.y;\r\n#else\r\n\talpha *= opacityMap.a * vOpacityInfos.y;\r\n#endif\r\n\r\n#endif\r\n\r\n#ifdef VERTEXALPHA\r\n\talpha *= vColor.a;\r\n#endif\r\n\r\n#ifdef OPACITYFRESNEL\r\n\tfloat opacityFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, opacityParts.z, opacityParts.w);\r\n\r\n\talpha += opacityParts.x * (1.0 - opacityFresnelTerm) + opacityFresnelTerm * opacityParts.y;\r\n#endif\r\n\r\n\t// Emissive\r\n\tvec3 emissiveColor = vEmissiveColor;\r\n#ifdef EMISSIVE\r\n\temissiveColor += texture2D(emissiveSampler, vEmissiveUV).rgb * vEmissiveInfos.y;\r\n#endif\r\n\r\n#ifdef EMISSIVEFRESNEL\r\n\tfloat emissiveFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, emissiveRightColor.a, emissiveLeftColor.a);\r\n\r\n\temissiveColor *= emissiveLeftColor.rgb * (1.0 - emissiveFresnelTerm) + emissiveFresnelTerm * emissiveRightColor.rgb;\r\n#endif\r\n\r\n\t// Fresnel\r\n#ifdef DIFFUSEFRESNEL\r\n\tfloat diffuseFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, diffuseRightColor.a, diffuseLeftColor.a);\r\n\r\n\tdiffuseBase *= diffuseLeftColor.rgb * (1.0 - diffuseFresnelTerm) + diffuseFresnelTerm * diffuseRightColor.rgb;\r\n#endif\r\n\r\n\t// Composition\r\n#ifdef EMISSIVEASILLUMINATION\r\n\tvec3 finalDiffuse = clamp(diffuseBase * diffuseColor + vAmbientColor, 0.0, 1.0) * baseColor.rgb;\r\n#else\r\n#ifdef LINKEMISSIVEWITHDIFFUSE\r\n\tvec3 finalDiffuse = clamp((diffuseBase + emissiveColor) * diffuseColor + vAmbientColor, 0.0, 1.0) * baseColor.rgb;\r\n#else\r\n\tvec3 finalDiffuse = clamp(diffuseBase * diffuseColor + emissiveColor + vAmbientColor, 0.0, 1.0) * baseColor.rgb;\r\n#endif\r\n#endif\r\n\r\n#ifdef SPECULARTERM\r\n\tvec3 finalSpecular = specularBase * specularColor;\r\n#else\r\n\tvec3 finalSpecular = vec3(0.0);\r\n#endif\r\n\r\n#ifdef SPECULAROVERALPHA\r\n\talpha = clamp(alpha + dot(finalSpecular, vec3(0.3, 0.59, 0.11)), 0., 1.);\r\n#endif\r\n\r\n\t// Composition\r\n#ifdef EMISSIVEASILLUMINATION\r\n\tvec4 color = vec4(clamp(finalDiffuse * baseAmbientColor + finalSpecular + reflectionColor + emissiveColor, 0.0, 1.0), alpha);\r\n#else\r\n\tvec4 color = vec4(finalDiffuse * baseAmbientColor + finalSpecular + reflectionColor, alpha);\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\n\tvec3 lightmapColor = texture2D(lightmapSampler, vLightmapUV).rgb * vLightmapInfos.y;\r\n\r\n#ifdef USELIGHTMAPASSHADOWMAP\r\n\tcolor.rgb *= lightmapColor;\r\n#else\r\n\tcolor.rgb += lightmapColor;\r\n#endif\r\n#endif\r\n\r\n#ifdef LOGARITHMICDEPTH\r\n\tgl_FragDepthEXT = log2(vFragmentDepth) * logarithmicDepthConstant * 0.5;\r\n#endif\r\n\r\n#ifdef FOG\r\n\tfloat fog = CalcFogFactor();\r\n\tcolor.rgb = fog * color.rgb + (1.0 - fog) * vFogColor;\r\n#endif\r\n\r\n\tgl_FragColor = color;\r\n}"); else _g.h["default.fragment"] = "#ifdef BUMP\r\n#extension GL_OES_standard_derivatives : enable\r\n#endif\r\n\r\n#ifdef LOGARITHMICDEPTH\r\n#extension GL_EXT_frag_depth : enable\r\n#endif\r\n\r\nprecision highp float;\r\n\r\n// Constants\r\n#define RECIPROCAL_PI2 0.15915494\r\n\r\nuniform vec3 vEyePosition;\r\nuniform vec3 vAmbientColor;\r\nuniform vec4 vDiffuseColor;\r\n#ifdef SPECULARTERM\r\nuniform vec4 vSpecularColor;\r\n#endif\r\nuniform vec3 vEmissiveColor;\r\n\r\n// Input\r\nvarying vec3 vPositionW;\r\n\r\n#ifdef NORMAL\r\nvarying vec3 vNormalW;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n// Lights\r\n#ifdef LIGHT0\r\nuniform vec4 vLightData0;\r\nuniform vec4 vLightDiffuse0;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular0;\r\n#endif\r\n#ifdef SHADOW0\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\nvarying vec4 vPositionFromLight0;\r\nuniform sampler2D shadowSampler0;\r\n#else\r\nuniform samplerCube shadowSampler0;\r\n#endif\r\nuniform vec3 shadowsInfo0;\r\n#endif\r\n#ifdef SPOTLIGHT0\r\nuniform vec4 vLightDirection0;\r\n#endif\r\n#ifdef HEMILIGHT0\r\nuniform vec3 vLightGround0;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\nuniform vec4 vLightData1;\r\nuniform vec4 vLightDiffuse1;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular1;\r\n#endif\r\n#ifdef SHADOW1\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\nvarying vec4 vPositionFromLight1;\r\nuniform sampler2D shadowSampler1;\r\n#else\r\nuniform samplerCube shadowSampler1;\r\n#endif\r\nuniform vec3 shadowsInfo1;\r\n#endif\r\n#ifdef SPOTLIGHT1\r\nuniform vec4 vLightDirection1;\r\n#endif\r\n#ifdef HEMILIGHT1\r\nuniform vec3 vLightGround1;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\nuniform vec4 vLightData2;\r\nuniform vec4 vLightDiffuse2;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular2;\r\n#endif\r\n#ifdef SHADOW2\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\nvarying vec4 vPositionFromLight2;\r\nuniform sampler2D shadowSampler2;\r\n#else\r\nuniform samplerCube shadowSampler2;\r\n#endif\r\nuniform vec3 shadowsInfo2;\r\n#endif\r\n#ifdef SPOTLIGHT2\r\nuniform vec4 vLightDirection2;\r\n#endif\r\n#ifdef HEMILIGHT2\r\nuniform vec3 vLightGround2;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\nuniform vec4 vLightData3;\r\nuniform vec4 vLightDiffuse3;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular3;\r\n#endif\r\n#ifdef SHADOW3\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\nvarying vec4 vPositionFromLight3;\r\nuniform sampler2D shadowSampler3;\r\n#else\r\nuniform samplerCube shadowSampler3;\r\n#endif\r\nuniform vec3 shadowsInfo3;\r\n#endif\r\n#ifdef SPOTLIGHT3\r\nuniform vec4 vLightDirection3;\r\n#endif\r\n#ifdef HEMILIGHT3\r\nuniform vec3 vLightGround3;\r\n#endif\r\n#endif\r\n\r\n// Samplers\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform sampler2D diffuseSampler;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#ifdef AMBIENT\r\nvarying vec2 vAmbientUV;\r\nuniform sampler2D ambientSampler;\r\nuniform vec2 vAmbientInfos;\r\n#endif\r\n\r\n#ifdef OPACITY\t\r\nvarying vec2 vOpacityUV;\r\nuniform sampler2D opacitySampler;\r\nuniform vec2 vOpacityInfos;\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\nvarying vec2 vEmissiveUV;\r\nuniform vec2 vEmissiveInfos;\r\nuniform sampler2D emissiveSampler;\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\nvarying vec2 vLightmapUV;\r\nuniform vec2 vLightmapInfos;\r\nuniform sampler2D lightmapSampler;\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\nvarying vec2 vSpecularUV;\r\nuniform vec2 vSpecularInfos;\r\nuniform sampler2D specularSampler;\r\n#endif\r\n\r\n// Fresnel\r\n#ifdef FRESNEL\r\nfloat computeFresnelTerm(vec3 viewDirection, vec3 worldNormal, float bias, float power)\r\n{\r\n\tfloat fresnelTerm = pow(bias + abs(dot(viewDirection, worldNormal)), power);\r\n\treturn clamp(fresnelTerm, 0., 1.);\r\n}\r\n#endif\r\n\r\n#ifdef DIFFUSEFRESNEL\r\nuniform vec4 diffuseLeftColor;\r\nuniform vec4 diffuseRightColor;\r\n#endif\r\n\r\n#ifdef OPACITYFRESNEL\r\nuniform vec4 opacityParts;\r\n#endif\r\n\r\n#ifdef EMISSIVEFRESNEL\r\nuniform vec4 emissiveLeftColor;\r\nuniform vec4 emissiveRightColor;\r\n#endif\r\n\r\n// Reflection\r\n#ifdef REFLECTION\r\nuniform vec2 vReflectionInfos;\r\n\r\n#ifdef REFLECTIONMAP_3D\r\nuniform samplerCube reflectionCubeSampler;\r\n#else\r\nuniform sampler2D reflection2DSampler;\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_SKYBOX\r\nvarying vec3 vPositionUVW;\r\n#else\r\n#ifdef REFLECTIONMAP_EQUIRECTANGULAR\r\nvarying vec3 vDirectionW;\r\n#endif\r\n\r\n#if defined(REFLECTIONMAP_PLANAR) || defined(REFLECTIONMAP_CUBIC) || defined(REFLECTIONMAP_PROJECTION)\r\nuniform mat4 reflectionMatrix;\r\n#endif\r\n#if defined(REFLECTIONMAP_SPHERICAL) || defined(REFLECTIONMAP_PROJECTION)\r\nuniform mat4 view;\r\n#endif\r\n#endif\r\n\r\nvec3 computeReflectionCoords(vec4 worldPos, vec3 worldNormal)\r\n{\r\n#ifdef REFLECTIONMAP_EQUIRECTANGULAR\r\n\tvec3 direction = normalize(vDirectionW);\r\n\r\n\tfloat t = clamp(direction.y * -0.5 + 0.5, 0., 1.0);\r\n\tfloat s = atan(direction.z, direction.x) * RECIPROCAL_PI2 + 0.5;\r\n\r\n\treturn vec3(s, t, 0);\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_SPHERICAL\r\n\tvec3 viewDir = normalize(vec3(view * worldPos));\r\n\tvec3 viewNormal = normalize(vec3(view * vec4(worldNormal, 0.0)));\r\n\r\n\tvec3 r = reflect(viewDir, viewNormal);\r\n\tr.z = r.z - 1.0;\r\n\r\n\tfloat m = 2.0 * length(r);\r\n\r\n\treturn vec3(r.x / m + 0.5, 1.0 - r.y / m - 0.5, 0);\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_PLANAR\r\n\tvec3 viewDir = worldPos.xyz - vEyePosition;\r\n\tvec3 coords = normalize(reflect(viewDir, worldNormal));\r\n\r\n\treturn vec3(reflectionMatrix * vec4(coords, 1));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_CUBIC\r\n\tvec3 viewDir = worldPos.xyz - vEyePosition;\r\n\tvec3 coords = reflect(viewDir, worldNormal);\r\n#ifdef INVERTCUBICMAP\r\n\tcoords.y = 1.0 - coords.y;\r\n#endif\r\n\treturn vec3(reflectionMatrix * vec4(coords, 0));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_PROJECTION\r\n\treturn vec3(reflectionMatrix * (view * worldPos));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_SKYBOX\r\n\treturn vPositionUVW;\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_EXPLICIT\r\n\treturn vec3(0, 0, 0);\r\n#endif\r\n}\r\n\r\n#ifdef REFLECTIONFRESNEL\r\nuniform vec4 reflectionLeftColor;\r\nuniform vec4 reflectionRightColor;\r\n#endif\r\n\r\n#endif\r\n\r\n// Shadows\r\n#ifdef SHADOWS\r\n\r\nfloat unpack(vec4 color)\r\n{\r\n\tconst vec4 bit_shift = vec4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\r\n\treturn dot(color, bit_shift);\r\n}\r\n\r\n#if defined(POINTLIGHT0) || defined(POINTLIGHT1) || defined(POINTLIGHT2) || defined(POINTLIGHT3)\r\nfloat computeShadowCube(vec3 lightPosition, samplerCube shadowSampler, float darkness, float bias)\r\n{\r\n\tvec3 directionToLight = vPositionW - lightPosition;\r\n\tfloat depth = length(directionToLight);\r\n\r\n\tdepth = clamp(depth, 0., 1.);\r\n\r\n\tdirectionToLight.y = 1.0 - directionToLight.y;\r\n\r\n\tfloat shadow = unpack(textureCube(shadowSampler, directionToLight)) + bias;\r\n\r\n\tif (depth > shadow)\r\n\t{\r\n\t\treturn darkness;\r\n\t}\r\n\treturn 1.0;\r\n}\r\n\r\nfloat computeShadowWithPCFCube(vec3 lightPosition, samplerCube shadowSampler, float mapSize, float bias, float darkness)\r\n{\r\n\tvec3 directionToLight = vPositionW - lightPosition;\r\n\tfloat depth = length(directionToLight);\r\n\tfloat diskScale = (1.0 - (1.0 + depth * 3.0)) / mapSize;\r\n\r\n\tdepth = clamp(depth, 0., 1.);\r\n\r\n\tdirectionToLight.y = 1.0 - directionToLight.y;\r\n\r\n\tfloat visibility = 1.;\r\n\r\n\tvec3 poissonDisk[4];\r\n\tpoissonDisk[0] = vec3(-1.0, 1.0, -1.0);\r\n\tpoissonDisk[1] = vec3(1.0, -1.0, -1.0);\r\n\tpoissonDisk[2] = vec3(-1.0, -1.0, -1.0);\r\n\tpoissonDisk[3] = vec3(1.0, -1.0, 1.0);\r\n\r\n\t// Poisson Sampling\r\n\tfloat biasedDepth = depth - bias;\r\n\r\n\tif (unpack(textureCube(shadowSampler, directionToLight + poissonDisk[0] * diskScale)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(textureCube(shadowSampler, directionToLight + poissonDisk[1] * diskScale)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(textureCube(shadowSampler, directionToLight + poissonDisk[2] * diskScale)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(textureCube(shadowSampler, directionToLight + poissonDisk[3] * diskScale)) < biasedDepth) visibility -= 0.25;\r\n\r\n\treturn  min(1.0, visibility + darkness);\r\n}\r\n#endif\r\n\r\n#if defined(SPOTLIGHT0) || defined(SPOTLIGHT1) || defined(SPOTLIGHT2) || defined(SPOTLIGHT3) ||  defined(DIRLIGHT0) || defined(DIRLIGHT1) || defined(DIRLIGHT2) || defined(DIRLIGHT3)\r\nfloat computeShadow(vec4 vPositionFromLight, sampler2D shadowSampler, float darkness, float bias)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tfloat shadow = unpack(texture2D(shadowSampler, uv)) + bias;\r\n\r\n\tif (depth.z > shadow)\r\n\t{\r\n\t\treturn darkness;\r\n\t}\r\n\treturn 1.;\r\n}\r\n\r\nfloat computeShadowWithPCF(vec4 vPositionFromLight, sampler2D shadowSampler, float mapSize, float bias, float darkness)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tfloat visibility = 1.;\r\n\r\n\tvec2 poissonDisk[4];\r\n\tpoissonDisk[0] = vec2(-0.94201624, -0.39906216);\r\n\tpoissonDisk[1] = vec2(0.94558609, -0.76890725);\r\n\tpoissonDisk[2] = vec2(-0.094184101, -0.92938870);\r\n\tpoissonDisk[3] = vec2(0.34495938, 0.29387760);\r\n\r\n\t// Poisson Sampling\r\n\tfloat biasedDepth = depth.z - bias;\r\n\r\n\tif (unpack(texture2D(shadowSampler, uv + poissonDisk[0] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(texture2D(shadowSampler, uv + poissonDisk[1] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(texture2D(shadowSampler, uv + poissonDisk[2] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\tif (unpack(texture2D(shadowSampler, uv + poissonDisk[3] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\r\n\treturn  min(1.0, visibility + darkness);\r\n}\r\n\r\n// Thanks to http://devmaster.net/\r\nfloat unpackHalf(vec2 color)\r\n{\r\n\treturn color.x + (color.y / 255.0);\r\n}\r\n\r\nfloat linstep(float low, float high, float v) {\r\n\treturn clamp((v - low) / (high - low), 0.0, 1.0);\r\n}\r\n\r\nfloat ChebychevInequality(vec2 moments, float compare, float bias)\r\n{\r\n\tfloat p = smoothstep(compare - bias, compare, moments.x);\r\n\tfloat variance = max(moments.y - moments.x * moments.x, 0.02);\r\n\tfloat d = compare - moments.x;\r\n\tfloat p_max = linstep(0.2, 1.0, variance / (variance + d * d));\r\n\r\n\treturn clamp(max(p, p_max), 0.0, 1.0);\r\n}\r\n\r\nfloat computeShadowWithVSM(vec4 vPositionFromLight, sampler2D shadowSampler, float bias, float darkness)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0 || depth.z >= 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tvec4 texel = texture2D(shadowSampler, uv);\r\n\r\n\tvec2 moments = vec2(unpackHalf(texel.xy), unpackHalf(texel.zw));\r\n\treturn min(1.0, 1.0 - ChebychevInequality(moments, depth.z, bias) + darkness);\r\n}\r\n#endif\r\n#endif\r\n\r\n// Bump\r\n#ifdef BUMP\r\nvarying vec2 vBumpUV;\r\nuniform vec2 vBumpInfos;\r\nuniform sampler2D bumpSampler;\r\n\r\n// Thanks to http://www.thetenthplanet.de/archives/1180\r\nmat3 cotangent_frame(vec3 normal, vec3 p, vec2 uv)\r\n{\r\n\t// get edge vectors of the pixel triangle\r\n\tvec3 dp1 = dFdx(p);\r\n\tvec3 dp2 = dFdy(p);\r\n\tvec2 duv1 = dFdx(uv);\r\n\tvec2 duv2 = dFdy(uv);\r\n\r\n\t// solve the linear system\r\n\tvec3 dp2perp = cross(dp2, normal);\r\n\tvec3 dp1perp = cross(normal, dp1);\r\n\tvec3 tangent = dp2perp * duv1.x + dp1perp * duv2.x;\r\n\tvec3 binormal = dp2perp * duv1.y + dp1perp * duv2.y;\r\n\r\n\t// construct a scale-invariant frame \r\n\tfloat invmax = inversesqrt(max(dot(tangent, tangent), dot(binormal, binormal)));\r\n\treturn mat3(tangent * invmax, binormal * invmax, normal);\r\n}\r\n\r\nvec3 perturbNormal(vec3 viewDir)\r\n{\r\n\tvec3 map = texture2D(bumpSampler, vBumpUV).xyz;\r\n\tmap = map * 255. / 127. - 128. / 127.;\r\n\tmat3 TBN = cotangent_frame(vNormalW * vBumpInfos.y, -viewDir, vBumpUV);\r\n\treturn normalize(TBN * map);\r\n}\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n#ifdef LOGARITHMICDEPTH\r\nuniform float logarithmicDepthConstant;\r\nvarying float vFragmentDepth;\r\n#endif\r\n\r\n// Fog\r\n#ifdef FOG\r\n\r\n#define FOGMODE_NONE    0.\r\n#define FOGMODE_EXP     1.\r\n#define FOGMODE_EXP2    2.\r\n#define FOGMODE_LINEAR  3.\r\n#define E 2.71828\r\n\r\nuniform vec4 vFogInfos;\r\nuniform vec3 vFogColor;\r\nvarying float fFogDistance;\r\n\r\nfloat CalcFogFactor()\r\n{\r\n\tfloat fogCoeff = 1.0;\r\n\tfloat fogStart = vFogInfos.y;\r\n\tfloat fogEnd = vFogInfos.z;\r\n\tfloat fogDensity = vFogInfos.w;\r\n\r\n\tif (FOGMODE_LINEAR == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = (fogEnd - fFogDistance) / (fogEnd - fogStart);\r\n\t}\r\n\telse if (FOGMODE_EXP == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fogDensity);\r\n\t}\r\n\telse if (FOGMODE_EXP2 == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fFogDistance * fogDensity * fogDensity);\r\n\t}\r\n\r\n\treturn clamp(fogCoeff, 0.0, 1.0);\r\n}\r\n#endif\r\n\r\n// Light Computing\r\nstruct lightingInfo\r\n{\r\n\tvec3 diffuse;\r\n#ifdef SPECULARTERM\r\n\tvec3 specular;\r\n#endif\r\n};\r\n\r\nlightingInfo computeLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec3 diffuseColor, vec3 specularColor, float range, float glossiness) {\r\n\tlightingInfo result;\r\n\r\n\tvec3 lightVectorW;\r\n\tfloat attenuation = 1.0;\r\n\tif (lightData.w == 0.)\r\n\t{\r\n\t\tvec3 direction = lightData.xyz - vPositionW;\r\n\r\n\t\tattenuation = max(0., 1.0 - length(direction) / range);\r\n\t\tlightVectorW = normalize(direction);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tlightVectorW = normalize(-lightData.xyz);\r\n\t}\r\n\r\n\t// diffuse\r\n\tfloat ndl = max(0., dot(vNormal, lightVectorW));\r\n\tresult.diffuse = ndl * diffuseColor * attenuation;\r\n\r\n#ifdef SPECULARTERM\r\n\t// Specular\r\n\tvec3 angleW = normalize(viewDirectionW + lightVectorW);\r\n\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\tspecComp = pow(specComp, max(1., glossiness));\r\n\r\n\tresult.specular = specComp * specularColor * attenuation;\r\n#endif\r\n\treturn result;\r\n}\r\n\r\nlightingInfo computeSpotLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 lightDirection, vec3 diffuseColor, vec3 specularColor, float range, float glossiness) {\r\n\tlightingInfo result;\r\n\r\n\tvec3 direction = lightData.xyz - vPositionW;\r\n\tvec3 lightVectorW = normalize(direction);\r\n\tfloat attenuation = max(0., 1.0 - length(direction) / range);\r\n\r\n\t// diffuse\r\n\tfloat cosAngle = max(0., dot(-lightDirection.xyz, lightVectorW));\r\n\tfloat spotAtten = 0.0;\r\n\r\n\tif (cosAngle >= lightDirection.w)\r\n\t{\r\n\t\tcosAngle = max(0., pow(cosAngle, lightData.w));\r\n\t\tspotAtten = clamp((cosAngle - lightDirection.w) / (1. - cosAngle), 0.0, 1.0);\r\n\r\n\t\t// Diffuse\r\n\t\tfloat ndl = max(0., dot(vNormal, -lightDirection.xyz));\r\n\t\tresult.diffuse = ndl * spotAtten * diffuseColor * attenuation;\r\n\r\n#ifdef SPECULARTERM\r\n\t\t// Specular\r\n\t\tvec3 angleW = normalize(viewDirectionW - lightDirection.xyz);\r\n\t\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\t\tspecComp = pow(specComp, max(1., glossiness));\r\n\r\n\t\tresult.specular = specComp * specularColor * spotAtten * attenuation;\r\n#endif\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tresult.diffuse = vec3(0.);\r\n#ifdef SPECULARTERM\r\n\tresult.specular = vec3(0.);\r\n#endif\r\n\r\n\treturn result;\r\n}\r\n\r\nlightingInfo computeHemisphericLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec3 diffuseColor, vec3 specularColor, vec3 groundColor, float glossiness) {\r\n\tlightingInfo result;\r\n\r\n\t// Diffuse\r\n\tfloat ndl = dot(vNormal, lightData.xyz) * 0.5 + 0.5;\r\n\tresult.diffuse = mix(groundColor, diffuseColor, ndl);\r\n\r\n#ifdef SPECULARTERM\r\n\t// Specular\r\n\tvec3 angleW = normalize(viewDirectionW + lightData.xyz);\r\n\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\tspecComp = pow(specComp, max(1., glossiness));\r\n\r\n\tresult.specular = specComp * specularColor;\r\n#endif\r\n\r\n\treturn result;\r\n}\r\n\r\nvoid main(void) {\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tif (fClipDistance > 0.0)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tvec3 viewDirectionW = normalize(vEyePosition - vPositionW);\r\n\r\n\t// Base color\r\n\tvec4 baseColor = vec4(1., 1., 1., 1.);\r\n\tvec3 diffuseColor = vDiffuseColor.rgb;\r\n\r\n\t// Alpha\r\n\tfloat alpha = vDiffuseColor.a;\r\n\r\n#ifdef DIFFUSE\r\n\tbaseColor = texture2D(diffuseSampler, vDiffuseUV);\r\n\r\n#ifdef ALPHATEST\r\n\tif (baseColor.a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n#ifdef ALPHAFROMDIFFUSE\r\n\talpha *= baseColor.a;\r\n#endif\r\n\r\n\tbaseColor.rgb *= vDiffuseInfos.y;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\n\tbaseColor.rgb *= vColor.rgb;\r\n#endif\r\n\r\n\t// Bump\r\n#ifdef NORMAL\r\n\tvec3 normalW = normalize(vNormalW);\r\n#else\r\n\tvec3 normalW = vec3(1.0, 1.0, 1.0);\r\n#endif\r\n\r\n\r\n#ifdef BUMP\r\n\tnormalW = perturbNormal(viewDirectionW);\r\n#endif\r\n\r\n\t// Ambient color\r\n\tvec3 baseAmbientColor = vec3(1., 1., 1.);\r\n\r\n#ifdef AMBIENT\r\n\tbaseAmbientColor = texture2D(ambientSampler, vAmbientUV).rgb * vAmbientInfos.y;\r\n#endif\r\n\r\n\r\n\t// Specular map\r\n#ifdef SPECULARTERM\r\n\tfloat glossiness = vSpecularColor.a;\r\n\tvec3 specularColor = vSpecularColor.rgb;\r\n\r\n#ifdef SPECULAR\r\n\tvec4 specularMapColor = texture2D(specularSampler, vSpecularUV);\r\n\tspecularColor = specularMapColor.rgb;\r\n#ifdef GLOSSINESS\r\n\tglossiness = glossiness * specularMapColor.a;\r\n#endif\r\n#endif\r\n#else\r\n\tfloat glossiness = 0.;\r\n#endif\r\n\r\n\t// Lighting\r\n\tvec3 diffuseBase = vec3(0., 0., 0.);\r\n#ifdef SPECULARTERM\r\n\tvec3 specularBase = vec3(0., 0., 0.);\r\n#endif\r\n\tfloat shadow = 1.;\r\n\r\n#ifdef LIGHT0\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular0 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT0\r\n\tlightingInfo info = computeSpotLighting(viewDirectionW, normalW, vLightData0, vLightDirection0, vLightDiffuse0.rgb, vLightSpecular0, vLightDiffuse0.a, glossiness);\r\n#endif\r\n#ifdef HEMILIGHT0\r\n\tlightingInfo info = computeHemisphericLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0.rgb, vLightSpecular0, vLightGround0, glossiness);\r\n#endif\r\n#if defined(POINTLIGHT0) || defined(DIRLIGHT0)\r\n\tlightingInfo info = computeLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0.rgb, vLightSpecular0, vLightDiffuse0.a, glossiness);\r\n#endif\r\n#ifdef SHADOW0\r\n#ifdef SHADOWVSM0\r\n\tshadow = computeShadowWithVSM(vPositionFromLight0, shadowSampler0, shadowsInfo0.z, shadowsInfo0.x);\r\n#else\r\n#ifdef SHADOWPCF0\r\n#if defined(POINTLIGHT0)\r\n\tshadow = computeShadowWithPCFCube(vLightData0.xyz, shadowSampler0, shadowsInfo0.y, shadowsInfo0.z, shadowsInfo0.x);\r\n#else\r\n\tshadow = computeShadowWithPCF(vPositionFromLight0, shadowSampler0, shadowsInfo0.y, shadowsInfo0.z, shadowsInfo0.x);\r\n#endif\r\n#else\r\n#if defined(POINTLIGHT0)\r\n\tshadow = computeShadowCube(vLightData0.xyz, shadowSampler0, shadowsInfo0.x, shadowsInfo0.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight0, shadowSampler0, shadowsInfo0.x, shadowsInfo0.z);\r\n#endif\r\n#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular1 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT1\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData1, vLightDirection1, vLightDiffuse1.rgb, vLightSpecular1, vLightDiffuse1.a, glossiness);\r\n#endif\r\n#ifdef HEMILIGHT1\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1.rgb, vLightSpecular1, vLightGround1, glossiness);\r\n#endif\r\n#if defined(POINTLIGHT1) || defined(DIRLIGHT1)\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1.rgb, vLightSpecular1, vLightDiffuse1.a, glossiness);\r\n#endif\r\n#ifdef SHADOW1\r\n#ifdef SHADOWVSM1\r\n\tshadow = computeShadowWithVSM(vPositionFromLight1, shadowSampler1, shadowsInfo1.z, shadowsInfo1.x);\r\n#else\r\n#ifdef SHADOWPCF1\r\n#if defined(POINTLIGHT1)\r\n\tshadow = computeShadowWithPCFCube(vLightData1.xyz, shadowSampler1, shadowsInfo1.y, shadowsInfo1.z, shadowsInfo1.x);\r\n#else\r\n\tshadow = computeShadowWithPCF(vPositionFromLight1, shadowSampler1, shadowsInfo1.y, shadowsInfo1.z, shadowsInfo1.x);\r\n#endif\r\n#else\r\n#if defined(POINTLIGHT1)\r\n\tshadow = computeShadowCube(vLightData1.xyz, shadowSampler1, shadowsInfo1.x, shadowsInfo1.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight1, shadowSampler1, shadowsInfo1.x, shadowsInfo1.z);\r\n#endif\r\n#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular2 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT2\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData2, vLightDirection2, vLightDiffuse2.rgb, vLightSpecular2, vLightDiffuse2.a, glossiness);\r\n#endif\r\n#ifdef HEMILIGHT2\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2.rgb, vLightSpecular2, vLightGround2, glossiness);\r\n#endif\r\n#if defined(POINTLIGHT2) || defined(DIRLIGHT2)\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2.rgb, vLightSpecular2, vLightDiffuse2.a, glossiness);\r\n#endif\r\n#ifdef SHADOW2\r\n#ifdef SHADOWVSM2\r\n\tshadow = computeShadowWithVSM(vPositionFromLight2, shadowSampler2, shadowsInfo2.z, shadowsInfo2.x);\r\n#else\r\n#ifdef SHADOWPCF2\r\n#if defined(POINTLIGHT2)\r\n\tshadow = computeShadowWithPCFCube(vLightData2.xyz, shadowSampler2, shadowsInfo2.y, shadowsInfo2.z, shadowsInfo2.x);\r\n#else\r\n\tshadow = computeShadowWithPCF(vPositionFromLight2, shadowSampler2, shadowsInfo2.y, shadowsInfo2.z, shadowsInfo2.x);\r\n#endif\r\n#else\r\n#if defined(POINTLIGHT2)\r\n\tshadow = computeShadowCube(vLightData2.xyz, shadowSampler2, shadowsInfo2.x, shadowsInfo2.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight2, shadowSampler2, shadowsInfo2.x, shadowsInfo2.z);\r\n#endif\r\n#endif\t\r\n#endif\t\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular3 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT3\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData3, vLightDirection3, vLightDiffuse3.rgb, vLightSpecular3, vLightDiffuse3.a, glossiness);\r\n#endif\r\n#ifdef HEMILIGHT3\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3.rgb, vLightSpecular3, vLightGround3, glossiness);\r\n#endif\r\n#if defined(POINTLIGHT3) || defined(DIRLIGHT3)\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3.rgb, vLightSpecular3, vLightDiffuse3.a, glossiness);\r\n#endif\r\n#ifdef SHADOW3\r\n#ifdef SHADOWVSM3\r\n\tshadow = computeShadowWithVSM(vPositionFromLight3, shadowSampler3, shadowsInfo3.z, shadowsInfo3.x);\r\n#else\r\n#ifdef SHADOWPCF3\r\n#if defined(POINTLIGHT3)\r\n\tshadow = computeShadowWithPCFCube(vLightData3.xyz, shadowSampler3, shadowsInfo3.y, shadowsInfo3.z, shadowsInfo3.x);\r\n#else\r\n\tshadow = computeShadowWithPCF(vPositionFromLight3, shadowSampler3, shadowsInfo3.y, shadowsInfo3.z, shadowsInfo3.x);\r\n#endif\r\n#else\r\n#if defined(POINTLIGHT3)\r\n\tshadow = computeShadowCube(vLightData3.xyz, shadowSampler3, shadowsInfo3.x, shadowsInfo3.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight3, shadowSampler3, shadowsInfo3.x, shadowsInfo3.z);\r\n#endif\r\n#endif\t\r\n#endif\t\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n\t// Reflection\r\n\tvec3 reflectionColor = vec3(0., 0., 0.);\r\n\r\n\r\n#ifdef REFLECTION\r\n\tvec3 vReflectionUVW = computeReflectionCoords(vec4(vPositionW, 1.0), normalW);\r\n\r\n#ifdef REFLECTIONMAP_3D\r\n#ifdef ROUGHNESS\r\n\t float bias = vReflectionInfos.y;\r\n\r\n\t#ifdef SPECULARTERM\r\n\t#ifdef SPECULAR\r\n\t#ifdef GLOSSINESS\r\n\t\tbias *= (1.0 - specularMapColor.a);\r\n\t#endif\r\n\t#endif\r\n\t#endif\r\n\r\n\treflectionColor = textureCube(reflectionCubeSampler, vReflectionUVW, bias).rgb * vReflectionInfos.x;\r\n#else\r\n\treflectionColor = textureCube(reflectionCubeSampler, vReflectionUVW).rgb * vReflectionInfos.x;\r\n#endif\r\n\r\n#else\r\n\tvec2 coords = vReflectionUVW.xy;\r\n\r\n#ifdef REFLECTIONMAP_PROJECTION\r\n\tcoords /= vReflectionUVW.z;\r\n#endif\r\n\r\n\tcoords.y = 1.0 - coords.y;\r\n\r\n\treflectionColor = texture2D(reflection2DSampler, coords).rgb * vReflectionInfos.x;\r\n#endif\r\n\r\n#ifdef REFLECTIONFRESNEL\r\n\tfloat reflectionFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, reflectionRightColor.a, reflectionLeftColor.a);\r\n\r\n#ifdef REFLECTIONFRESNELFROMSPECULAR\r\n#ifdef SPECULARTERM\r\n\treflectionColor *= specularColor.rgb * (1.0 - reflectionFresnelTerm) + reflectionFresnelTerm * reflectionRightColor.rgb;\r\n#else\r\n\treflectionColor *= reflectionLeftColor.rgb * (1.0 - reflectionFresnelTerm) + reflectionFresnelTerm * reflectionRightColor.rgb;\r\n#endif\r\n#else\r\n\treflectionColor *= reflectionLeftColor.rgb * (1.0 - reflectionFresnelTerm) + reflectionFresnelTerm * reflectionRightColor.rgb;\r\n#endif\r\n#endif\r\n#endif\r\n\r\n\r\n#ifdef OPACITY\r\n\tvec4 opacityMap = texture2D(opacitySampler, vOpacityUV);\r\n\r\n#ifdef OPACITYRGB\r\n\topacityMap.rgb = opacityMap.rgb * vec3(0.3, 0.59, 0.11);\r\n\talpha *= (opacityMap.x + opacityMap.y + opacityMap.z)* vOpacityInfos.y;\r\n#else\r\n\talpha *= opacityMap.a * vOpacityInfos.y;\r\n#endif\r\n\r\n#endif\r\n\r\n#ifdef VERTEXALPHA\r\n\talpha *= vColor.a;\r\n#endif\r\n\r\n#ifdef OPACITYFRESNEL\r\n\tfloat opacityFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, opacityParts.z, opacityParts.w);\r\n\r\n\talpha += opacityParts.x * (1.0 - opacityFresnelTerm) + opacityFresnelTerm * opacityParts.y;\r\n#endif\r\n\r\n\t// Emissive\r\n\tvec3 emissiveColor = vEmissiveColor;\r\n#ifdef EMISSIVE\r\n\temissiveColor += texture2D(emissiveSampler, vEmissiveUV).rgb * vEmissiveInfos.y;\r\n#endif\r\n\r\n#ifdef EMISSIVEFRESNEL\r\n\tfloat emissiveFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, emissiveRightColor.a, emissiveLeftColor.a);\r\n\r\n\temissiveColor *= emissiveLeftColor.rgb * (1.0 - emissiveFresnelTerm) + emissiveFresnelTerm * emissiveRightColor.rgb;\r\n#endif\r\n\r\n\t// Fresnel\r\n#ifdef DIFFUSEFRESNEL\r\n\tfloat diffuseFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, diffuseRightColor.a, diffuseLeftColor.a);\r\n\r\n\tdiffuseBase *= diffuseLeftColor.rgb * (1.0 - diffuseFresnelTerm) + diffuseFresnelTerm * diffuseRightColor.rgb;\r\n#endif\r\n\r\n\t// Composition\r\n#ifdef EMISSIVEASILLUMINATION\r\n\tvec3 finalDiffuse = clamp(diffuseBase * diffuseColor + vAmbientColor, 0.0, 1.0) * baseColor.rgb;\r\n#else\r\n#ifdef LINKEMISSIVEWITHDIFFUSE\r\n\tvec3 finalDiffuse = clamp((diffuseBase + emissiveColor) * diffuseColor + vAmbientColor, 0.0, 1.0) * baseColor.rgb;\r\n#else\r\n\tvec3 finalDiffuse = clamp(diffuseBase * diffuseColor + emissiveColor + vAmbientColor, 0.0, 1.0) * baseColor.rgb;\r\n#endif\r\n#endif\r\n\r\n#ifdef SPECULARTERM\r\n\tvec3 finalSpecular = specularBase * specularColor;\r\n#else\r\n\tvec3 finalSpecular = vec3(0.0);\r\n#endif\r\n\r\n#ifdef SPECULAROVERALPHA\r\n\talpha = clamp(alpha + dot(finalSpecular, vec3(0.3, 0.59, 0.11)), 0., 1.);\r\n#endif\r\n\r\n\t// Composition\r\n#ifdef EMISSIVEASILLUMINATION\r\n\tvec4 color = vec4(clamp(finalDiffuse * baseAmbientColor + finalSpecular + reflectionColor + emissiveColor, 0.0, 1.0), alpha);\r\n#else\r\n\tvec4 color = vec4(finalDiffuse * baseAmbientColor + finalSpecular + reflectionColor, alpha);\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\n\tvec3 lightmapColor = texture2D(lightmapSampler, vLightmapUV).rgb * vLightmapInfos.y;\r\n\r\n#ifdef USELIGHTMAPASSHADOWMAP\r\n\tcolor.rgb *= lightmapColor;\r\n#else\r\n\tcolor.rgb += lightmapColor;\r\n#endif\r\n#endif\r\n\r\n#ifdef LOGARITHMICDEPTH\r\n\tgl_FragDepthEXT = log2(vFragmentDepth) * logarithmicDepthConstant * 0.5;\r\n#endif\r\n\r\n#ifdef FOG\r\n\tfloat fog = CalcFogFactor();\r\n\tcolor.rgb = fog * color.rgb + (1.0 - fog) * vFogColor;\r\n#endif\r\n\r\n\tgl_FragColor = color;\r\n}";
	if(__map_reserved["default.vertex"] != null) _g.setReserved("default.vertex","precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\n#ifdef NORMAL\r\nattribute vec3 normal;\r\n#endif\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#ifdef VERTEXCOLOR\r\nattribute vec4 color;\r\n#endif\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tuniform mat4 mBones[BonesPerMesh];\r\n\r\n\tattribute vec4 matricesIndices;\r\n\tattribute vec4 matricesWeights;\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tattribute vec4 matricesIndicesExtra;\r\n\t\tattribute vec4 matricesWeightsExtra;\r\n\t#endif\r\n#endif\r\n\r\n// Uniforms\r\n\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 view;\r\nuniform mat4 viewProjection;\r\n\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform mat4 diffuseMatrix;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#ifdef AMBIENT\r\nvarying vec2 vAmbientUV;\r\nuniform mat4 ambientMatrix;\r\nuniform vec2 vAmbientInfos;\r\n#endif\r\n\r\n#ifdef OPACITY\r\nvarying vec2 vOpacityUV;\r\nuniform mat4 opacityMatrix;\r\nuniform vec2 vOpacityInfos;\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\nvarying vec2 vEmissiveUV;\r\nuniform vec2 vEmissiveInfos;\r\nuniform mat4 emissiveMatrix;\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\nvarying vec2 vLightmapUV;\r\nuniform vec2 vLightmapInfos;\r\nuniform mat4 lightmapMatrix;\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\nvarying vec2 vSpecularUV;\r\nuniform vec2 vSpecularInfos;\r\nuniform mat4 specularMatrix;\r\n#endif\r\n\r\n#ifdef BUMP\r\nvarying vec2 vBumpUV;\r\nuniform vec2 vBumpInfos;\r\nuniform mat4 bumpMatrix;\r\n#endif\r\n\r\n#ifdef POINTSIZE\r\nuniform float pointSize;\r\n#endif\r\n\r\n// Output\r\nvarying vec3 vPositionW;\r\n#ifdef NORMAL\r\nvarying vec3 vNormalW;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nuniform vec4 vClipPlane;\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n#ifdef FOG\r\nvarying float fFogDistance;\r\n#endif\r\n\r\n#ifdef SHADOWS\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\nuniform mat4 lightMatrix0;\r\nvarying vec4 vPositionFromLight0;\r\n#endif\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\nuniform mat4 lightMatrix1;\r\nvarying vec4 vPositionFromLight1;\r\n#endif\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\nuniform mat4 lightMatrix2;\r\nvarying vec4 vPositionFromLight2;\r\n#endif\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\nuniform mat4 lightMatrix3;\r\nvarying vec4 vPositionFromLight3;\r\n#endif\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_SKYBOX\r\nvarying vec3 vPositionUVW;\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_EQUIRECTANGULAR\r\nvarying vec3 vDirectionW;\r\n#endif\r\n\r\n#ifdef LOGARITHMICDEPTH\r\nuniform float logarithmicDepthConstant;\r\nvarying float vFragmentDepth;\r\n#endif\r\n\r\nvoid main(void) {\r\n#ifdef REFLECTIONMAP_SKYBOX\r\n\tvPositionUVW = position;\r\n#endif \r\n\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tmat4 influence;\r\n\tinfluence = mBones[int(matricesIndices[0])] * matricesWeights[0];\r\n\r\n\t#if NUM_BONE_INFLUENCERS > 1\r\n\t\tinfluence += mBones[int(matricesIndices[1])] * matricesWeights[1];\r\n\t#endif \r\n\t#if NUM_BONE_INFLUENCERS > 2\r\n\t\tinfluence += mBones[int(matricesIndices[2])] * matricesWeights[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 3\r\n\t\tinfluence += mBones[int(matricesIndices[3])] * matricesWeights[3];\r\n\t#endif\t\r\n\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[0])] * matricesWeightsExtra[0];\r\n\t#endif\r\n\t#if NUM_BONE_INFLUENCERS > 5\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[1])] * matricesWeightsExtra[1];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 6\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[2])] * matricesWeightsExtra[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 7\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[3])] * matricesWeightsExtra[3];\r\n\t#endif\t\r\n\r\n\tfinalWorld = finalWorld * influence;\r\n#endif\r\n\tgl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n\r\n\tvec4 worldPos = finalWorld * vec4(position, 1.0);\r\n\tvPositionW = vec3(worldPos);\r\n\r\n#ifdef NORMAL\r\n\tvNormalW = normalize(vec3(finalWorld * vec4(normal, 0.0)));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_EQUIRECTANGULAR\r\n\tvDirectionW = normalize(vec3(finalWorld * vec4(position, 0.0)));\r\n#endif\r\n\r\n\t// Texture coordinates\r\n#ifndef UV1\r\n\tvec2 uv = vec2(0., 0.);\r\n#endif\r\n#ifndef UV2\r\n\tvec2 uv2 = vec2(0., 0.);\r\n#endif\r\n\r\n#ifdef DIFFUSE\r\n\tif (vDiffuseInfos.x == 0.)\r\n\t{\r\n\t\tvDiffuseUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvDiffuseUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef AMBIENT\r\n\tif (vAmbientInfos.x == 0.)\r\n\t{\r\n\t\tvAmbientUV = vec2(ambientMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvAmbientUV = vec2(ambientMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef OPACITY\r\n\tif (vOpacityInfos.x == 0.)\r\n\t{\r\n\t\tvOpacityUV = vec2(opacityMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvOpacityUV = vec2(opacityMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\n\tif (vEmissiveInfos.x == 0.)\r\n\t{\r\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\n\tif (vLightmapInfos.x == 0.)\r\n\t{\r\n\t\tvLightmapUV = vec2(lightmapMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvLightmapUV = vec2(lightmapMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\n\tif (vSpecularInfos.x == 0.)\r\n\t{\r\n\t\tvSpecularUV = vec2(specularMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvSpecularUV = vec2(specularMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef BUMP\r\n\tif (vBumpInfos.x == 0.)\r\n\t{\r\n\t\tvBumpUV = vec2(bumpMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvBumpUV = vec2(bumpMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tfClipDistance = dot(worldPos, vClipPlane);\r\n#endif\r\n\r\n\t// Fog\r\n#ifdef FOG\r\n\tfFogDistance = (view * worldPos).z;\r\n#endif\r\n\r\n\t// Shadows\r\n#ifdef SHADOWS\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\n\tvPositionFromLight0 = lightMatrix0 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\n\tvPositionFromLight1 = lightMatrix1 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\n\tvPositionFromLight2 = lightMatrix2 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\n\tvPositionFromLight3 = lightMatrix3 * worldPos;\r\n#endif\r\n#endif\r\n\r\n\t// Vertex color\r\n#ifdef VERTEXCOLOR\r\n\tvColor = color;\r\n#endif\r\n\r\n\t// Point size\r\n#ifdef POINTSIZE\r\n\tgl_PointSize = pointSize;\r\n#endif\r\n\r\n\t// Log. depth\r\n#ifdef LOGARITHMICDEPTH\r\n\tvFragmentDepth = 1.0 + gl_Position.w;\r\n\tgl_Position.z = log2(max(0.000001, vFragmentDepth)) * logarithmicDepthConstant;\r\n#endif\r\n}"); else _g.h["default.vertex"] = "precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\n#ifdef NORMAL\r\nattribute vec3 normal;\r\n#endif\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#ifdef VERTEXCOLOR\r\nattribute vec4 color;\r\n#endif\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tuniform mat4 mBones[BonesPerMesh];\r\n\r\n\tattribute vec4 matricesIndices;\r\n\tattribute vec4 matricesWeights;\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tattribute vec4 matricesIndicesExtra;\r\n\t\tattribute vec4 matricesWeightsExtra;\r\n\t#endif\r\n#endif\r\n\r\n// Uniforms\r\n\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 view;\r\nuniform mat4 viewProjection;\r\n\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform mat4 diffuseMatrix;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#ifdef AMBIENT\r\nvarying vec2 vAmbientUV;\r\nuniform mat4 ambientMatrix;\r\nuniform vec2 vAmbientInfos;\r\n#endif\r\n\r\n#ifdef OPACITY\r\nvarying vec2 vOpacityUV;\r\nuniform mat4 opacityMatrix;\r\nuniform vec2 vOpacityInfos;\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\nvarying vec2 vEmissiveUV;\r\nuniform vec2 vEmissiveInfos;\r\nuniform mat4 emissiveMatrix;\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\nvarying vec2 vLightmapUV;\r\nuniform vec2 vLightmapInfos;\r\nuniform mat4 lightmapMatrix;\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\nvarying vec2 vSpecularUV;\r\nuniform vec2 vSpecularInfos;\r\nuniform mat4 specularMatrix;\r\n#endif\r\n\r\n#ifdef BUMP\r\nvarying vec2 vBumpUV;\r\nuniform vec2 vBumpInfos;\r\nuniform mat4 bumpMatrix;\r\n#endif\r\n\r\n#ifdef POINTSIZE\r\nuniform float pointSize;\r\n#endif\r\n\r\n// Output\r\nvarying vec3 vPositionW;\r\n#ifdef NORMAL\r\nvarying vec3 vNormalW;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nuniform vec4 vClipPlane;\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n#ifdef FOG\r\nvarying float fFogDistance;\r\n#endif\r\n\r\n#ifdef SHADOWS\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\nuniform mat4 lightMatrix0;\r\nvarying vec4 vPositionFromLight0;\r\n#endif\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\nuniform mat4 lightMatrix1;\r\nvarying vec4 vPositionFromLight1;\r\n#endif\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\nuniform mat4 lightMatrix2;\r\nvarying vec4 vPositionFromLight2;\r\n#endif\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\nuniform mat4 lightMatrix3;\r\nvarying vec4 vPositionFromLight3;\r\n#endif\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_SKYBOX\r\nvarying vec3 vPositionUVW;\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_EQUIRECTANGULAR\r\nvarying vec3 vDirectionW;\r\n#endif\r\n\r\n#ifdef LOGARITHMICDEPTH\r\nuniform float logarithmicDepthConstant;\r\nvarying float vFragmentDepth;\r\n#endif\r\n\r\nvoid main(void) {\r\n#ifdef REFLECTIONMAP_SKYBOX\r\n\tvPositionUVW = position;\r\n#endif \r\n\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tmat4 influence;\r\n\tinfluence = mBones[int(matricesIndices[0])] * matricesWeights[0];\r\n\r\n\t#if NUM_BONE_INFLUENCERS > 1\r\n\t\tinfluence += mBones[int(matricesIndices[1])] * matricesWeights[1];\r\n\t#endif \r\n\t#if NUM_BONE_INFLUENCERS > 2\r\n\t\tinfluence += mBones[int(matricesIndices[2])] * matricesWeights[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 3\r\n\t\tinfluence += mBones[int(matricesIndices[3])] * matricesWeights[3];\r\n\t#endif\t\r\n\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[0])] * matricesWeightsExtra[0];\r\n\t#endif\r\n\t#if NUM_BONE_INFLUENCERS > 5\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[1])] * matricesWeightsExtra[1];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 6\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[2])] * matricesWeightsExtra[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 7\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[3])] * matricesWeightsExtra[3];\r\n\t#endif\t\r\n\r\n\tfinalWorld = finalWorld * influence;\r\n#endif\r\n\tgl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n\r\n\tvec4 worldPos = finalWorld * vec4(position, 1.0);\r\n\tvPositionW = vec3(worldPos);\r\n\r\n#ifdef NORMAL\r\n\tvNormalW = normalize(vec3(finalWorld * vec4(normal, 0.0)));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_EQUIRECTANGULAR\r\n\tvDirectionW = normalize(vec3(finalWorld * vec4(position, 0.0)));\r\n#endif\r\n\r\n\t// Texture coordinates\r\n#ifndef UV1\r\n\tvec2 uv = vec2(0., 0.);\r\n#endif\r\n#ifndef UV2\r\n\tvec2 uv2 = vec2(0., 0.);\r\n#endif\r\n\r\n#ifdef DIFFUSE\r\n\tif (vDiffuseInfos.x == 0.)\r\n\t{\r\n\t\tvDiffuseUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvDiffuseUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef AMBIENT\r\n\tif (vAmbientInfos.x == 0.)\r\n\t{\r\n\t\tvAmbientUV = vec2(ambientMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvAmbientUV = vec2(ambientMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef OPACITY\r\n\tif (vOpacityInfos.x == 0.)\r\n\t{\r\n\t\tvOpacityUV = vec2(opacityMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvOpacityUV = vec2(opacityMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\n\tif (vEmissiveInfos.x == 0.)\r\n\t{\r\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\n\tif (vLightmapInfos.x == 0.)\r\n\t{\r\n\t\tvLightmapUV = vec2(lightmapMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvLightmapUV = vec2(lightmapMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\n\tif (vSpecularInfos.x == 0.)\r\n\t{\r\n\t\tvSpecularUV = vec2(specularMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvSpecularUV = vec2(specularMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef BUMP\r\n\tif (vBumpInfos.x == 0.)\r\n\t{\r\n\t\tvBumpUV = vec2(bumpMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvBumpUV = vec2(bumpMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tfClipDistance = dot(worldPos, vClipPlane);\r\n#endif\r\n\r\n\t// Fog\r\n#ifdef FOG\r\n\tfFogDistance = (view * worldPos).z;\r\n#endif\r\n\r\n\t// Shadows\r\n#ifdef SHADOWS\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\n\tvPositionFromLight0 = lightMatrix0 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\n\tvPositionFromLight1 = lightMatrix1 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\n\tvPositionFromLight2 = lightMatrix2 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\n\tvPositionFromLight3 = lightMatrix3 * worldPos;\r\n#endif\r\n#endif\r\n\r\n\t// Vertex color\r\n#ifdef VERTEXCOLOR\r\n\tvColor = color;\r\n#endif\r\n\r\n\t// Point size\r\n#ifdef POINTSIZE\r\n\tgl_PointSize = pointSize;\r\n#endif\r\n\r\n\t// Log. depth\r\n#ifdef LOGARITHMICDEPTH\r\n\tvFragmentDepth = 1.0 + gl_Position.w;\r\n\tgl_Position.z = log2(max(0.000001, vFragmentDepth)) * logarithmicDepthConstant;\r\n#endif\r\n}";
	if(__map_reserved["depth.fragment"] != null) _g.setReserved("depth.fragment","precision highp float;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform sampler2D diffuseSampler;\r\n#endif\r\n\r\nuniform float far;\r\n\r\nvoid main(void)\r\n{\r\n#ifdef ALPHATEST\r\n\tif (texture2D(diffuseSampler, vUV).a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tfloat depth = (gl_FragCoord.z / gl_FragCoord.w) / far;\r\n\tgl_FragColor = vec4(depth, depth * depth, 0.0, 1.0);\r\n}"); else _g.h["depth.fragment"] = "precision highp float;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform sampler2D diffuseSampler;\r\n#endif\r\n\r\nuniform float far;\r\n\r\nvoid main(void)\r\n{\r\n#ifdef ALPHATEST\r\n\tif (texture2D(diffuseSampler, vUV).a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tfloat depth = (gl_FragCoord.z / gl_FragCoord.w) / far;\r\n\tgl_FragColor = vec4(depth, depth * depth, 0.0, 1.0);\r\n}";
	if(__map_reserved["depth.vertex"] != null) _g.setReserved("depth.vertex","precision highp float;\r\n\r\n// Attribute\r\nattribute vec3 position;\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\r\n\t// having bone influencers implies you have bones\r\n\tuniform mat4 mBones[BonesPerMesh];\r\n\r\n\tattribute vec4 matricesIndices;\r\n\tattribute vec4 matricesWeights;\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tattribute vec4 matricesIndicesExtra;\r\n\t\tattribute vec4 matricesWeightsExtra;\r\n\t#endif\r\n#endif\r\n\r\n// Uniform\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 viewProjection;\r\n\r\n#if defined(ALPHATEST) || defined(NEED_UV)\r\nvarying vec2 vUV;\r\nuniform mat4 diffuseMatrix;\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tmat4 influence;\r\n\tinfluence = mBones[int(matricesIndices[0])] * matricesWeights[0];\r\n\r\n\t#if NUM_BONE_INFLUENCERS > 1\r\n\t\tinfluence += mBones[int(matricesIndices[1])] * matricesWeights[1];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 2\r\n\t\tinfluence += mBones[int(matricesIndices[2])] * matricesWeights[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 3\r\n\t\tinfluence += mBones[int(matricesIndices[3])] * matricesWeights[3];\r\n\t#endif\t\r\n\t\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[0])] * matricesWeightsExtra[0];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 5\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[1])] * matricesWeightsExtra[1];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 6\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[2])] * matricesWeightsExtra[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 7\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[3])] * matricesWeightsExtra[3];\r\n\t#endif\t\r\n\r\n\tfinalWorld = finalWorld * influence;\r\n#endif\r\n\tgl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n\r\n#if defined(ALPHATEST) || defined(BASIC_RENDER)\r\n#ifdef UV1\r\n\tvUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n#endif\r\n#ifdef UV2\r\n\tvUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n#endif\r\n#endif\r\n}"); else _g.h["depth.vertex"] = "precision highp float;\r\n\r\n// Attribute\r\nattribute vec3 position;\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\r\n\t// having bone influencers implies you have bones\r\n\tuniform mat4 mBones[BonesPerMesh];\r\n\r\n\tattribute vec4 matricesIndices;\r\n\tattribute vec4 matricesWeights;\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tattribute vec4 matricesIndicesExtra;\r\n\t\tattribute vec4 matricesWeightsExtra;\r\n\t#endif\r\n#endif\r\n\r\n// Uniform\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 viewProjection;\r\n\r\n#if defined(ALPHATEST) || defined(NEED_UV)\r\nvarying vec2 vUV;\r\nuniform mat4 diffuseMatrix;\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tmat4 influence;\r\n\tinfluence = mBones[int(matricesIndices[0])] * matricesWeights[0];\r\n\r\n\t#if NUM_BONE_INFLUENCERS > 1\r\n\t\tinfluence += mBones[int(matricesIndices[1])] * matricesWeights[1];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 2\r\n\t\tinfluence += mBones[int(matricesIndices[2])] * matricesWeights[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 3\r\n\t\tinfluence += mBones[int(matricesIndices[3])] * matricesWeights[3];\r\n\t#endif\t\r\n\t\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[0])] * matricesWeightsExtra[0];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 5\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[1])] * matricesWeightsExtra[1];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 6\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[2])] * matricesWeightsExtra[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 7\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[3])] * matricesWeightsExtra[3];\r\n\t#endif\t\r\n\r\n\tfinalWorld = finalWorld * influence;\r\n#endif\r\n\tgl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n\r\n#if defined(ALPHATEST) || defined(BASIC_RENDER)\r\n#ifdef UV1\r\n\tvUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n#endif\r\n#ifdef UV2\r\n\tvUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n#endif\r\n#endif\r\n}";
	if(__map_reserved["depthBoxBlur.fragment"] != null) _g.setReserved("depthBoxBlur.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Parameters\r\nuniform vec2 screenSize;\r\n\r\nvoid main(void)\r\n{\r\n\tvec4 colorDepth = vec4(0.0);\r\n\r\n\tfor (int x = -OFFSET; x <= OFFSET; x++)\r\n\t\tfor (int y = -OFFSET; y <= OFFSET; y++)\r\n\t\t\tcolorDepth += texture2D(textureSampler, vUV + vec2(x, y) / screenSize);\r\n\r\n\tgl_FragColor = (colorDepth / float((OFFSET * 2 + 1) * (OFFSET * 2 + 1)));\r\n}"); else _g.h["depthBoxBlur.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Parameters\r\nuniform vec2 screenSize;\r\n\r\nvoid main(void)\r\n{\r\n\tvec4 colorDepth = vec4(0.0);\r\n\r\n\tfor (int x = -OFFSET; x <= OFFSET; x++)\r\n\t\tfor (int y = -OFFSET; y <= OFFSET; y++)\r\n\t\t\tcolorDepth += texture2D(textureSampler, vUV + vec2(x, y) / screenSize);\r\n\r\n\tgl_FragColor = (colorDepth / float((OFFSET * 2 + 1) * (OFFSET * 2 + 1)));\r\n}";
	if(__map_reserved["depthOfField.fragment"] != null) _g.setReserved("depthOfField.fragment","// BABYLON.JS Depth-of-field GLSL Shader\r\n// Author: Olivier Guyot\r\n// Does depth-of-field blur, edge blur\r\n// Inspired by Francois Tarlier & Martins Upitis\r\n\r\nprecision highp float;\r\n\r\n\r\n// samplers\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D highlightsSampler;\r\nuniform sampler2D depthSampler;\r\nuniform sampler2D grainSampler;\r\n\r\n// uniforms\r\nuniform float grain_amount;\r\nuniform bool blur_noise;\r\nuniform float screen_width;\r\nuniform float screen_height;\r\nuniform float distortion;\r\nuniform bool dof_enabled;\r\n//uniform float focus_distance;\t\t// not needed; already used to compute screen distance\r\nuniform float screen_distance;\t\t// precomputed screen distance from lens center; based on focal length & desired focus distance\r\nuniform float aperture;\r\nuniform float darken;\r\nuniform float edge_blur;\r\nuniform bool highlights;\r\n\r\n// preconputed uniforms (not effect parameters)\r\nuniform float near;\r\nuniform float far;\r\n\r\n// varyings\r\nvarying vec2 vUV;\r\n\r\n// constants\r\n#define PI \t\t3.14159265\r\n#define TWOPI \t6.28318530\r\n#define inverse_focal_length 0.1\t// a property of the lens used\r\n\r\n// common calculations\r\nvec2 centered_screen_pos;\r\nvec2 distorted_coords;\r\nfloat radius2;\r\nfloat radius;\r\n\r\n\r\n// on-the-fly constant noise\r\nvec2 rand(vec2 co)\r\n{\r\n\tfloat noise1 = (fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453));\r\n\tfloat noise2 = (fract(sin(dot(co, vec2(12.9898, 78.233)*2.0)) * 43758.5453));\r\n\treturn clamp(vec2(noise1, noise2), 0.0, 1.0);\r\n}\r\n\r\n// applies edge distortion on texture coords\r\nvec2 getDistortedCoords(vec2 coords) {\r\n\r\n\tif (distortion == 0.0) { return coords; }\r\n\r\n\tvec2 direction = 1.0 * normalize(centered_screen_pos);\r\n\tvec2 dist_coords = vec2(0.5, 0.5);\r\n\tdist_coords.x = 0.5 + direction.x * radius2 * 1.0;\r\n\tdist_coords.y = 0.5 + direction.y * radius2 * 1.0;\r\n\tfloat dist_amount = clamp(distortion*0.23, 0.0, 1.0);\r\n\r\n\tdist_coords = mix(coords, dist_coords, dist_amount);\r\n\r\n\treturn dist_coords;\r\n}\r\n\r\n// sample screen with an offset (randomize offset angle for better smothness), returns partial sample weight\r\nfloat sampleScreen(inout vec4 color, const in vec2 offset, const in float weight) {\r\n\r\n\t// compute coords with offset (a random angle is added)\r\n\tvec2 coords = distorted_coords;\r\n\tfloat angle = rand(coords * 100.0).x * TWOPI;\r\n\tcoords += vec2(offset.x * cos(angle) - offset.y * sin(angle), offset.x * sin(angle) + offset.y * cos(angle));\r\n\r\n\tcolor += texture2D(textureSampler, coords)*weight;\r\n\r\n\treturn weight;\r\n}\r\n\r\n// returns blur level according to blur size required\r\nfloat getBlurLevel(float size) {\r\n\treturn min(3.0, ceil(size / 1.0));\r\n}\r\n\r\n// returns original screen color after blur\r\nvec4 getBlurColor(float size) {\r\n\r\n\tvec4 col = texture2D(textureSampler, distorted_coords);\r\n\tif (size == 0.0) { return col; }\r\n\r\n\t// there are max. 30 samples; the number of samples chosen is dependant on the blur size\r\n\t// there can be 10, 20 or 30 samples chosen; levels of blur are then 1, 2 or 3\r\n\tfloat blur_level = getBlurLevel(size);\r\n\r\n\tfloat w = (size / screen_width);\r\n\tfloat h = (size / screen_height);\r\n\tfloat total_weight = 1.0;\r\n\tvec2 sample_coords;\r\n\r\n\ttotal_weight += sampleScreen(col, vec2(-0.50*w, 0.24*h), 0.93);\r\n\ttotal_weight += sampleScreen(col, vec2(0.30*w, -0.75*h), 0.90);\r\n\ttotal_weight += sampleScreen(col, vec2(0.36*w, 0.96*h), 0.87);\r\n\ttotal_weight += sampleScreen(col, vec2(-1.08*w, -0.55*h), 0.85);\r\n\ttotal_weight += sampleScreen(col, vec2(1.33*w, -0.37*h), 0.83);\r\n\ttotal_weight += sampleScreen(col, vec2(-0.82*w, 1.31*h), 0.80);\r\n\ttotal_weight += sampleScreen(col, vec2(-0.31*w, -1.67*h), 0.78);\r\n\ttotal_weight += sampleScreen(col, vec2(1.47*w, 1.11*h), 0.76);\r\n\ttotal_weight += sampleScreen(col, vec2(-1.97*w, 0.19*h), 0.74);\r\n\ttotal_weight += sampleScreen(col, vec2(1.42*w, -1.57*h), 0.72);\r\n\r\n\tif (blur_level > 1.0) {\r\n\t\ttotal_weight += sampleScreen(col, vec2(0.01*w, 2.25*h), 0.70);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-1.62*w, -1.74*h), 0.67);\r\n\t\ttotal_weight += sampleScreen(col, vec2(2.49*w, 0.20*h), 0.65);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-2.07*w, 1.61*h), 0.63);\r\n\t\ttotal_weight += sampleScreen(col, vec2(0.46*w, -2.70*h), 0.61);\r\n\t\ttotal_weight += sampleScreen(col, vec2(1.55*w, 2.40*h), 0.59);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-2.88*w, -0.75*h), 0.56);\r\n\t\ttotal_weight += sampleScreen(col, vec2(2.73*w, -1.44*h), 0.54);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-1.08*w, 3.02*h), 0.52);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-1.28*w, -3.05*h), 0.49);\r\n\t}\r\n\r\n\tif (blur_level > 2.0) {\r\n\t\ttotal_weight += sampleScreen(col, vec2(3.11*w, 1.43*h), 0.46);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-3.36*w, 1.08*h), 0.44);\r\n\t\ttotal_weight += sampleScreen(col, vec2(1.80*w, -3.16*h), 0.41);\r\n\t\ttotal_weight += sampleScreen(col, vec2(0.83*w, 3.65*h), 0.38);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-3.16*w, -2.19*h), 0.34);\r\n\t\ttotal_weight += sampleScreen(col, vec2(3.92*w, -0.53*h), 0.31);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-2.59*w, 3.12*h), 0.26);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-0.20*w, -4.15*h), 0.22);\r\n\t\ttotal_weight += sampleScreen(col, vec2(3.02*w, 3.00*h), 0.15);\r\n\t}\r\n\r\n\tcol /= total_weight;\t\t// scales color according to weights\r\n\r\n\t\t\t\t\t\t\t\t// darken if out of focus\r\n\tif (darken > 0.0) {\r\n\t\tcol.rgb *= clamp(0.3, 1.0, 1.05 - size*0.5*darken);\r\n\t}\r\n\r\n\t// blur levels debug\r\n\t// if(blur_level == 1.0) { col.b *= 0.5; }\r\n\t// if(blur_level == 2.0) { col.r *= 0.5; }\r\n\t// if(blur_level == 3.0) { col.g *= 0.5; }\r\n\r\n\treturn col;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\r\n\t// Common calc: position relative to screen center, screen radius, distorted coords, position in texel space\r\n\tcentered_screen_pos = vec2(vUV.x - 0.5, vUV.y - 0.5);\r\n\tradius2 = centered_screen_pos.x*centered_screen_pos.x + centered_screen_pos.y*centered_screen_pos.y;\r\n\tradius = sqrt(radius2);\r\n\tdistorted_coords = getDistortedCoords(vUV);\t\t// we distort the screen coordinates (lens \"magnifying\" effect)\r\n\tvec2 texels_coords = vec2(vUV.x * screen_width, vUV.y * screen_height);\t// varies from 0 to SCREEN_WIDTH or _HEIGHT\r\n\r\n\tfloat depth = texture2D(depthSampler, distorted_coords).r;\t// depth value from DepthRenderer: 0 to 1\r\n\tfloat distance = near + (far - near)*depth;\t\t// actual distance from the lens\r\n\tvec4 color = texture2D(textureSampler, vUV);\t// original raster\r\n\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// compute the circle of confusion size (CoC), i.e. blur radius depending on depth\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// screen_distance is precomputed in code\r\n\tfloat coc = abs(aperture * (screen_distance * (inverse_focal_length - 1.0 / distance) - 1.0));\r\n\r\n\t// disable blur\r\n\tif (dof_enabled == false || coc < 0.07) { coc = 0.0; }\r\n\r\n\t// blur from edge blur effect\r\n\tfloat edge_blur_amount = 0.0;\r\n\tif (edge_blur > 0.0) {\r\n\t\tedge_blur_amount = clamp((radius*2.0 - 1.0 + 0.15*edge_blur) * 1.5, 0.0, 1.0) * 1.3;\r\n\t}\r\n\r\n\t// total blur amount\r\n\tfloat blur_amount = max(edge_blur_amount, coc);\r\n\r\n\t// apply blur if necessary\r\n\tif (blur_amount == 0.0) {\r\n\t\tgl_FragColor = texture2D(textureSampler, distorted_coords);\r\n\t}\r\n\telse {\r\n\r\n\t\t// add blurred color\r\n\t\tgl_FragColor = getBlurColor(blur_amount * 1.7);\r\n\r\n\t\t// if we have computed highlights: enhance highlights\r\n\t\tif (highlights) {\r\n\t\t\tgl_FragColor.rgb += clamp(coc, 0.0, 1.0)*texture2D(highlightsSampler, distorted_coords).rgb;\r\n\t\t}\r\n\r\n\t\tif (blur_noise) {\r\n\t\t\t// we put a slight amount of noise in the blurred color\r\n\t\t\tvec2 noise = rand(distorted_coords) * 0.01 * blur_amount;\r\n\t\t\tvec2 blurred_coord = vec2(distorted_coords.x + noise.x, distorted_coords.y + noise.y);\r\n\t\t\tgl_FragColor = 0.04 * texture2D(textureSampler, blurred_coord) + 0.96 * gl_FragColor;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// apply grain\r\n\tif (grain_amount > 0.0) {\r\n\t\tvec4 grain_color = texture2D(grainSampler, texels_coords*0.003);\r\n\t\tgl_FragColor.rgb += (-0.5 + grain_color.rgb) * 0.30 * grain_amount;\r\n\t}\r\n\r\n}\r\n"); else _g.h["depthOfField.fragment"] = "// BABYLON.JS Depth-of-field GLSL Shader\r\n// Author: Olivier Guyot\r\n// Does depth-of-field blur, edge blur\r\n// Inspired by Francois Tarlier & Martins Upitis\r\n\r\nprecision highp float;\r\n\r\n\r\n// samplers\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D highlightsSampler;\r\nuniform sampler2D depthSampler;\r\nuniform sampler2D grainSampler;\r\n\r\n// uniforms\r\nuniform float grain_amount;\r\nuniform bool blur_noise;\r\nuniform float screen_width;\r\nuniform float screen_height;\r\nuniform float distortion;\r\nuniform bool dof_enabled;\r\n//uniform float focus_distance;\t\t// not needed; already used to compute screen distance\r\nuniform float screen_distance;\t\t// precomputed screen distance from lens center; based on focal length & desired focus distance\r\nuniform float aperture;\r\nuniform float darken;\r\nuniform float edge_blur;\r\nuniform bool highlights;\r\n\r\n// preconputed uniforms (not effect parameters)\r\nuniform float near;\r\nuniform float far;\r\n\r\n// varyings\r\nvarying vec2 vUV;\r\n\r\n// constants\r\n#define PI \t\t3.14159265\r\n#define TWOPI \t6.28318530\r\n#define inverse_focal_length 0.1\t// a property of the lens used\r\n\r\n// common calculations\r\nvec2 centered_screen_pos;\r\nvec2 distorted_coords;\r\nfloat radius2;\r\nfloat radius;\r\n\r\n\r\n// on-the-fly constant noise\r\nvec2 rand(vec2 co)\r\n{\r\n\tfloat noise1 = (fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453));\r\n\tfloat noise2 = (fract(sin(dot(co, vec2(12.9898, 78.233)*2.0)) * 43758.5453));\r\n\treturn clamp(vec2(noise1, noise2), 0.0, 1.0);\r\n}\r\n\r\n// applies edge distortion on texture coords\r\nvec2 getDistortedCoords(vec2 coords) {\r\n\r\n\tif (distortion == 0.0) { return coords; }\r\n\r\n\tvec2 direction = 1.0 * normalize(centered_screen_pos);\r\n\tvec2 dist_coords = vec2(0.5, 0.5);\r\n\tdist_coords.x = 0.5 + direction.x * radius2 * 1.0;\r\n\tdist_coords.y = 0.5 + direction.y * radius2 * 1.0;\r\n\tfloat dist_amount = clamp(distortion*0.23, 0.0, 1.0);\r\n\r\n\tdist_coords = mix(coords, dist_coords, dist_amount);\r\n\r\n\treturn dist_coords;\r\n}\r\n\r\n// sample screen with an offset (randomize offset angle for better smothness), returns partial sample weight\r\nfloat sampleScreen(inout vec4 color, const in vec2 offset, const in float weight) {\r\n\r\n\t// compute coords with offset (a random angle is added)\r\n\tvec2 coords = distorted_coords;\r\n\tfloat angle = rand(coords * 100.0).x * TWOPI;\r\n\tcoords += vec2(offset.x * cos(angle) - offset.y * sin(angle), offset.x * sin(angle) + offset.y * cos(angle));\r\n\r\n\tcolor += texture2D(textureSampler, coords)*weight;\r\n\r\n\treturn weight;\r\n}\r\n\r\n// returns blur level according to blur size required\r\nfloat getBlurLevel(float size) {\r\n\treturn min(3.0, ceil(size / 1.0));\r\n}\r\n\r\n// returns original screen color after blur\r\nvec4 getBlurColor(float size) {\r\n\r\n\tvec4 col = texture2D(textureSampler, distorted_coords);\r\n\tif (size == 0.0) { return col; }\r\n\r\n\t// there are max. 30 samples; the number of samples chosen is dependant on the blur size\r\n\t// there can be 10, 20 or 30 samples chosen; levels of blur are then 1, 2 or 3\r\n\tfloat blur_level = getBlurLevel(size);\r\n\r\n\tfloat w = (size / screen_width);\r\n\tfloat h = (size / screen_height);\r\n\tfloat total_weight = 1.0;\r\n\tvec2 sample_coords;\r\n\r\n\ttotal_weight += sampleScreen(col, vec2(-0.50*w, 0.24*h), 0.93);\r\n\ttotal_weight += sampleScreen(col, vec2(0.30*w, -0.75*h), 0.90);\r\n\ttotal_weight += sampleScreen(col, vec2(0.36*w, 0.96*h), 0.87);\r\n\ttotal_weight += sampleScreen(col, vec2(-1.08*w, -0.55*h), 0.85);\r\n\ttotal_weight += sampleScreen(col, vec2(1.33*w, -0.37*h), 0.83);\r\n\ttotal_weight += sampleScreen(col, vec2(-0.82*w, 1.31*h), 0.80);\r\n\ttotal_weight += sampleScreen(col, vec2(-0.31*w, -1.67*h), 0.78);\r\n\ttotal_weight += sampleScreen(col, vec2(1.47*w, 1.11*h), 0.76);\r\n\ttotal_weight += sampleScreen(col, vec2(-1.97*w, 0.19*h), 0.74);\r\n\ttotal_weight += sampleScreen(col, vec2(1.42*w, -1.57*h), 0.72);\r\n\r\n\tif (blur_level > 1.0) {\r\n\t\ttotal_weight += sampleScreen(col, vec2(0.01*w, 2.25*h), 0.70);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-1.62*w, -1.74*h), 0.67);\r\n\t\ttotal_weight += sampleScreen(col, vec2(2.49*w, 0.20*h), 0.65);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-2.07*w, 1.61*h), 0.63);\r\n\t\ttotal_weight += sampleScreen(col, vec2(0.46*w, -2.70*h), 0.61);\r\n\t\ttotal_weight += sampleScreen(col, vec2(1.55*w, 2.40*h), 0.59);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-2.88*w, -0.75*h), 0.56);\r\n\t\ttotal_weight += sampleScreen(col, vec2(2.73*w, -1.44*h), 0.54);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-1.08*w, 3.02*h), 0.52);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-1.28*w, -3.05*h), 0.49);\r\n\t}\r\n\r\n\tif (blur_level > 2.0) {\r\n\t\ttotal_weight += sampleScreen(col, vec2(3.11*w, 1.43*h), 0.46);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-3.36*w, 1.08*h), 0.44);\r\n\t\ttotal_weight += sampleScreen(col, vec2(1.80*w, -3.16*h), 0.41);\r\n\t\ttotal_weight += sampleScreen(col, vec2(0.83*w, 3.65*h), 0.38);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-3.16*w, -2.19*h), 0.34);\r\n\t\ttotal_weight += sampleScreen(col, vec2(3.92*w, -0.53*h), 0.31);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-2.59*w, 3.12*h), 0.26);\r\n\t\ttotal_weight += sampleScreen(col, vec2(-0.20*w, -4.15*h), 0.22);\r\n\t\ttotal_weight += sampleScreen(col, vec2(3.02*w, 3.00*h), 0.15);\r\n\t}\r\n\r\n\tcol /= total_weight;\t\t// scales color according to weights\r\n\r\n\t\t\t\t\t\t\t\t// darken if out of focus\r\n\tif (darken > 0.0) {\r\n\t\tcol.rgb *= clamp(0.3, 1.0, 1.05 - size*0.5*darken);\r\n\t}\r\n\r\n\t// blur levels debug\r\n\t// if(blur_level == 1.0) { col.b *= 0.5; }\r\n\t// if(blur_level == 2.0) { col.r *= 0.5; }\r\n\t// if(blur_level == 3.0) { col.g *= 0.5; }\r\n\r\n\treturn col;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\r\n\t// Common calc: position relative to screen center, screen radius, distorted coords, position in texel space\r\n\tcentered_screen_pos = vec2(vUV.x - 0.5, vUV.y - 0.5);\r\n\tradius2 = centered_screen_pos.x*centered_screen_pos.x + centered_screen_pos.y*centered_screen_pos.y;\r\n\tradius = sqrt(radius2);\r\n\tdistorted_coords = getDistortedCoords(vUV);\t\t// we distort the screen coordinates (lens \"magnifying\" effect)\r\n\tvec2 texels_coords = vec2(vUV.x * screen_width, vUV.y * screen_height);\t// varies from 0 to SCREEN_WIDTH or _HEIGHT\r\n\r\n\tfloat depth = texture2D(depthSampler, distorted_coords).r;\t// depth value from DepthRenderer: 0 to 1\r\n\tfloat distance = near + (far - near)*depth;\t\t// actual distance from the lens\r\n\tvec4 color = texture2D(textureSampler, vUV);\t// original raster\r\n\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// compute the circle of confusion size (CoC), i.e. blur radius depending on depth\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// screen_distance is precomputed in code\r\n\tfloat coc = abs(aperture * (screen_distance * (inverse_focal_length - 1.0 / distance) - 1.0));\r\n\r\n\t// disable blur\r\n\tif (dof_enabled == false || coc < 0.07) { coc = 0.0; }\r\n\r\n\t// blur from edge blur effect\r\n\tfloat edge_blur_amount = 0.0;\r\n\tif (edge_blur > 0.0) {\r\n\t\tedge_blur_amount = clamp((radius*2.0 - 1.0 + 0.15*edge_blur) * 1.5, 0.0, 1.0) * 1.3;\r\n\t}\r\n\r\n\t// total blur amount\r\n\tfloat blur_amount = max(edge_blur_amount, coc);\r\n\r\n\t// apply blur if necessary\r\n\tif (blur_amount == 0.0) {\r\n\t\tgl_FragColor = texture2D(textureSampler, distorted_coords);\r\n\t}\r\n\telse {\r\n\r\n\t\t// add blurred color\r\n\t\tgl_FragColor = getBlurColor(blur_amount * 1.7);\r\n\r\n\t\t// if we have computed highlights: enhance highlights\r\n\t\tif (highlights) {\r\n\t\t\tgl_FragColor.rgb += clamp(coc, 0.0, 1.0)*texture2D(highlightsSampler, distorted_coords).rgb;\r\n\t\t}\r\n\r\n\t\tif (blur_noise) {\r\n\t\t\t// we put a slight amount of noise in the blurred color\r\n\t\t\tvec2 noise = rand(distorted_coords) * 0.01 * blur_amount;\r\n\t\t\tvec2 blurred_coord = vec2(distorted_coords.x + noise.x, distorted_coords.y + noise.y);\r\n\t\t\tgl_FragColor = 0.04 * texture2D(textureSampler, blurred_coord) + 0.96 * gl_FragColor;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// apply grain\r\n\tif (grain_amount > 0.0) {\r\n\t\tvec4 grain_color = texture2D(grainSampler, texels_coords*0.003);\r\n\t\tgl_FragColor.rgb += (-0.5 + grain_color.rgb) * 0.30 * grain_amount;\r\n\t}\r\n\r\n}\r\n";
	if(__map_reserved["displayPass.fragment"] != null) _g.setReserved("displayPass.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D passSampler;\r\n\r\nvoid main(void)\r\n{\r\n    gl_FragColor = texture2D(passSampler, vUV);\r\n}"); else _g.h["displayPass.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D passSampler;\r\n\r\nvoid main(void)\r\n{\r\n    gl_FragColor = texture2D(passSampler, vUV);\r\n}";
	if(__map_reserved["filter.fragment"] != null) _g.setReserved("filter.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\nuniform mat4 kernelMatrix;\r\n\r\nvoid main(void)\r\n{\r\n\tvec3 baseColor = texture2D(textureSampler, vUV).rgb;\r\n\tvec3 updatedColor = (kernelMatrix * vec4(baseColor, 1.0)).rgb;\r\n\r\n\tgl_FragColor = vec4(updatedColor, 1.0);\r\n}"); else _g.h["filter.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\nuniform mat4 kernelMatrix;\r\n\r\nvoid main(void)\r\n{\r\n\tvec3 baseColor = texture2D(textureSampler, vUV).rgb;\r\n\tvec3 updatedColor = (kernelMatrix * vec4(baseColor, 1.0)).rgb;\r\n\r\n\tgl_FragColor = vec4(updatedColor, 1.0);\r\n}";
	if(__map_reserved["firetexture.fragment"] != null) _g.setReserved("firetexture.fragment","precision highp float;\r\n\r\nuniform float time;\r\nuniform vec3 c1;\r\nuniform vec3 c2;\r\nuniform vec3 c3;\r\nuniform vec3 c4;\r\nuniform vec3 c5;\r\nuniform vec3 c6;\r\nuniform vec2 speed;\r\nuniform float shift;\r\nuniform float alphaThreshold;\r\n\r\nvarying vec2 vUV;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main() {\r\n\tvec2 p = vUV * 8.0;\r\n\tfloat q = fbm(p - time * 0.1);\r\n\tvec2 r = vec2(fbm(p + q + time * speed.x - p.x - p.y), fbm(p + q - time * speed.y));\r\n\tvec3 c = mix(c1, c2, fbm(p + r)) + mix(c3, c4, r.x) - mix(c5, c6, r.y);\r\n\tvec3 color = c * cos(shift * vUV.y);\r\n\tfloat luminance = dot(color.rgb, vec3(0.3, 0.59, 0.11));\r\n\r\n\tgl_FragColor = vec4(color, luminance * alphaThreshold + (1.0 - alphaThreshold));\r\n}"); else _g.h["firetexture.fragment"] = "precision highp float;\r\n\r\nuniform float time;\r\nuniform vec3 c1;\r\nuniform vec3 c2;\r\nuniform vec3 c3;\r\nuniform vec3 c4;\r\nuniform vec3 c5;\r\nuniform vec3 c6;\r\nuniform vec2 speed;\r\nuniform float shift;\r\nuniform float alphaThreshold;\r\n\r\nvarying vec2 vUV;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main() {\r\n\tvec2 p = vUV * 8.0;\r\n\tfloat q = fbm(p - time * 0.1);\r\n\tvec2 r = vec2(fbm(p + q + time * speed.x - p.x - p.y), fbm(p + q - time * speed.y));\r\n\tvec3 c = mix(c1, c2, fbm(p + r)) + mix(c3, c4, r.x) - mix(c5, c6, r.y);\r\n\tvec3 color = c * cos(shift * vUV.y);\r\n\tfloat luminance = dot(color.rgb, vec3(0.3, 0.59, 0.11));\r\n\r\n\tgl_FragColor = vec4(color, luminance * alphaThreshold + (1.0 - alphaThreshold));\r\n}";
	if(__map_reserved["fxaa.fragment"] != null) _g.setReserved("fxaa.fragment","precision highp float;\r\n\r\n#define FXAA_REDUCE_MIN   (1.0/128.0)\r\n#define FXAA_REDUCE_MUL   (1.0/8.0)\r\n#define FXAA_SPAN_MAX     8.0\r\n\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform vec2 texelSize;\r\n\r\nvoid main(){\r\n\tvec2 localTexelSize = texelSize;\r\n\tvec4 rgbNW = texture2D(textureSampler, (vUV + vec2(-1.0, -1.0) * localTexelSize));\r\n\tvec4 rgbNE = texture2D(textureSampler, (vUV + vec2(1.0, -1.0) * localTexelSize));\r\n\tvec4 rgbSW = texture2D(textureSampler, (vUV + vec2(-1.0, 1.0) * localTexelSize));\r\n\tvec4 rgbSE = texture2D(textureSampler, (vUV + vec2(1.0, 1.0) * localTexelSize));\r\n\tvec4 rgbM = texture2D(textureSampler, vUV);\r\n\tvec4 luma = vec4(0.299, 0.587, 0.114, 1.0);\r\n\tfloat lumaNW = dot(rgbNW, luma);\r\n\tfloat lumaNE = dot(rgbNE, luma);\r\n\tfloat lumaSW = dot(rgbSW, luma);\r\n\tfloat lumaSE = dot(rgbSE, luma);\r\n\tfloat lumaM = dot(rgbM, luma);\r\n\tfloat lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\r\n\tfloat lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\r\n\r\n\tvec2 dir = vec2(-((lumaNW + lumaNE) - (lumaSW + lumaSE)), ((lumaNW + lumaSW) - (lumaNE + lumaSE)));\r\n\r\n\tfloat dirReduce = max(\r\n\t\t(lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL),\r\n\t\tFXAA_REDUCE_MIN);\r\n\r\n\tfloat rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\r\n\tdir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\r\n\t\tmax(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\r\n\t\tdir * rcpDirMin)) * localTexelSize;\r\n\r\n\tvec4 rgbA = 0.5 * (\r\n\t\ttexture2D(textureSampler, vUV + dir * (1.0 / 3.0 - 0.5)) +\r\n\t\ttexture2D(textureSampler, vUV + dir * (2.0 / 3.0 - 0.5)));\r\n\r\n\tvec4 rgbB = rgbA * 0.5 + 0.25 * (\r\n\t\ttexture2D(textureSampler, vUV + dir *  -0.5) +\r\n\t\ttexture2D(textureSampler, vUV + dir * 0.5));\r\n\tfloat lumaB = dot(rgbB, luma);\r\n\tif ((lumaB < lumaMin) || (lumaB > lumaMax)) {\r\n\t\tgl_FragColor = rgbA;\r\n\t}\r\n\telse {\r\n\t\tgl_FragColor = rgbB;\r\n\t}\r\n}"); else _g.h["fxaa.fragment"] = "precision highp float;\r\n\r\n#define FXAA_REDUCE_MIN   (1.0/128.0)\r\n#define FXAA_REDUCE_MUL   (1.0/8.0)\r\n#define FXAA_SPAN_MAX     8.0\r\n\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform vec2 texelSize;\r\n\r\nvoid main(){\r\n\tvec2 localTexelSize = texelSize;\r\n\tvec4 rgbNW = texture2D(textureSampler, (vUV + vec2(-1.0, -1.0) * localTexelSize));\r\n\tvec4 rgbNE = texture2D(textureSampler, (vUV + vec2(1.0, -1.0) * localTexelSize));\r\n\tvec4 rgbSW = texture2D(textureSampler, (vUV + vec2(-1.0, 1.0) * localTexelSize));\r\n\tvec4 rgbSE = texture2D(textureSampler, (vUV + vec2(1.0, 1.0) * localTexelSize));\r\n\tvec4 rgbM = texture2D(textureSampler, vUV);\r\n\tvec4 luma = vec4(0.299, 0.587, 0.114, 1.0);\r\n\tfloat lumaNW = dot(rgbNW, luma);\r\n\tfloat lumaNE = dot(rgbNE, luma);\r\n\tfloat lumaSW = dot(rgbSW, luma);\r\n\tfloat lumaSE = dot(rgbSE, luma);\r\n\tfloat lumaM = dot(rgbM, luma);\r\n\tfloat lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\r\n\tfloat lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\r\n\r\n\tvec2 dir = vec2(-((lumaNW + lumaNE) - (lumaSW + lumaSE)), ((lumaNW + lumaSW) - (lumaNE + lumaSE)));\r\n\r\n\tfloat dirReduce = max(\r\n\t\t(lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL),\r\n\t\tFXAA_REDUCE_MIN);\r\n\r\n\tfloat rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\r\n\tdir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\r\n\t\tmax(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\r\n\t\tdir * rcpDirMin)) * localTexelSize;\r\n\r\n\tvec4 rgbA = 0.5 * (\r\n\t\ttexture2D(textureSampler, vUV + dir * (1.0 / 3.0 - 0.5)) +\r\n\t\ttexture2D(textureSampler, vUV + dir * (2.0 / 3.0 - 0.5)));\r\n\r\n\tvec4 rgbB = rgbA * 0.5 + 0.25 * (\r\n\t\ttexture2D(textureSampler, vUV + dir *  -0.5) +\r\n\t\ttexture2D(textureSampler, vUV + dir * 0.5));\r\n\tfloat lumaB = dot(rgbB, luma);\r\n\tif ((lumaB < lumaMin) || (lumaB > lumaMax)) {\r\n\t\tgl_FragColor = rgbA;\r\n\t}\r\n\telse {\r\n\t\tgl_FragColor = rgbB;\r\n\t}\r\n}";
	if(__map_reserved["grasstexture.fragment"] != null) _g.setReserved("grasstexture.fragment","precision highp float;\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform vec3 herb1Color;\r\nuniform vec3 herb2Color;\r\nuniform vec3 herb3Color;\r\nuniform vec3 groundColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main(void) {\r\n\tvec3 color = mix(groundColor, herb1Color, rand(gl_FragCoord.xy * 4.0));\r\n\tcolor = mix(color, herb2Color, rand(gl_FragCoord.xy * 8.0));\r\n\tcolor = mix(color, herb3Color, rand(gl_FragCoord.xy));\r\n\tcolor = mix(color, herb1Color, fbm(gl_FragCoord.xy * 16.0));\r\n\tgl_FragColor = vec4(color, 1.0);\r\n}"); else _g.h["grasstexture.fragment"] = "precision highp float;\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform vec3 herb1Color;\r\nuniform vec3 herb2Color;\r\nuniform vec3 herb3Color;\r\nuniform vec3 groundColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main(void) {\r\n\tvec3 color = mix(groundColor, herb1Color, rand(gl_FragCoord.xy * 4.0));\r\n\tcolor = mix(color, herb2Color, rand(gl_FragCoord.xy * 8.0));\r\n\tcolor = mix(color, herb3Color, rand(gl_FragCoord.xy));\r\n\tcolor = mix(color, herb1Color, fbm(gl_FragCoord.xy * 16.0));\r\n\tgl_FragColor = vec4(color, 1.0);\r\n}";
	if(__map_reserved["hdr.fragment"] != null) _g.setReserved("hdr.fragment","precision highp float;\r\n\r\nuniform sampler2D textureSampler;\r\nvarying vec2 vUV;\r\n\r\n#if defined(GAUSSIAN_BLUR_H) || defined(GAUSSIAN_BLUR_V)\r\nuniform float blurOffsets[9];\r\nuniform float blurWeights[9];\r\nuniform float multiplier;\r\n\r\nvoid main(void) {\r\n\tvec4 color = vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n\tfor (int i = 0; i < 9; i++) {\r\n\t\t#ifdef GAUSSIAN_BLUR_H\r\n\t\tcolor += (texture2D(textureSampler, vUV + vec2(blurOffsets[i] * multiplier, 0.0)) * blurWeights[i]);\r\n\t\t#else\r\n\t\tcolor += (texture2D(textureSampler, vUV + vec2(0.0, blurOffsets[i] * multiplier)) * blurWeights[i]);\r\n\t\t#endif\r\n\t}\r\n\r\n\tcolor.a = 1.0;\r\n\tgl_FragColor = color;\r\n}\r\n#endif\r\n\r\n#if defined(TEXTURE_ADDER)\r\nuniform sampler2D otherSampler;\r\n\r\nvoid main() {\r\n\tvec4 sum = texture2D(textureSampler, vUV) + texture2D(otherSampler, vUV);\r\n\tsum.a = clamp(sum.a, 0.0, 1.0);\r\n\r\n\tgl_FragColor = sum;\r\n}\r\n#endif\r\n\r\n#if defined(LUMINANCE_GENERATOR)\r\nuniform vec2 lumOffsets[4];\r\n\r\nvoid main() {\r\n\tfloat average = 0.0;\r\n\tvec4 color = vec4(0.0, 0.0, 0.0, 0.0);\r\n\tfloat maximum = -1e20;\r\n\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\tcolor = texture2D(textureSampler, vUV + lumOffsets[i]);\r\n\r\n\t\tfloat GreyValue = length(color.rgb);\r\n\r\n\t\tmaximum = max(maximum, GreyValue);\r\n\t\taverage += (0.25 * log(1e-5 + GreyValue));\r\n\t}\r\n\r\n\taverage = exp(average);\r\n\r\n\tgl_FragColor = vec4(average, maximum, 0.0, 1.0);\r\n\r\n}\r\n#endif\r\n\r\n#if defined(DOWN_SAMPLE)\r\nuniform vec2 dsOffsets[9];\r\nuniform float halfDestPixelSize;\r\n\r\n#ifdef FINAL_DOWN_SAMPLE\r\nvec4 pack(float value) {\r\n\tconst vec4 bit_shift = vec4(255.0 * 255.0 * 255.0, 255.0 * 255.0, 255.0, 1.0);\r\n\tconst vec4 bit_mask = vec4(0.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n\r\n\tvec4 res = fract(value * bit_shift);\r\n\tres -= res.xxyz * bit_mask;\r\n\r\n\treturn res;\r\n}\r\n#endif\r\n\r\nvoid main() {\r\n\tvec4 color = vec4(0.0, 0.0, 0.0, 0.0);\r\n\tfloat average = 0.0;\r\n\r\n\tfor (int i = 0; i < 9; i++) {\r\n\t\tcolor = texture2D(textureSampler, vUV + vec2(halfDestPixelSize, halfDestPixelSize) + dsOffsets[i]);\r\n\t\taverage += color.r;\r\n\t}\r\n\r\n\taverage /= 9.0;\r\n\r\n\t#ifndef FINAL_DOWN_SAMPLE\r\n\tgl_FragColor = vec4(average, average, 0.0, 1.0);\r\n\t#else\r\n\tgl_FragColor = pack(average);\r\n\t#endif\r\n}\r\n#endif\r\n\r\n#if defined(BRIGHT_PASS)\r\nuniform vec2 dsOffsets[4];\r\nuniform float brightThreshold;\r\n\r\nvoid main() {\r\n\tvec4 average = vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n\taverage = texture2D(textureSampler, vUV + vec2(dsOffsets[0].x, dsOffsets[0].y));\r\n\taverage += texture2D(textureSampler, vUV + vec2(dsOffsets[1].x, dsOffsets[1].y));\r\n\taverage += texture2D(textureSampler, vUV + vec2(dsOffsets[2].x, dsOffsets[2].y));\r\n\taverage += texture2D(textureSampler, vUV + vec2(dsOffsets[3].x, dsOffsets[3].y));\r\n\r\n\taverage *= 0.25;\r\n\r\n\tfloat luminance = length(average.rgb);\r\n\r\n\tif (luminance < brightThreshold) {\r\n\t\taverage = vec4(0.0, 0.0, 0.0, 1.0);\r\n\t}\r\n\r\n\tgl_FragColor = average;\r\n}\r\n#endif\r\n\r\n#if defined(DOWN_SAMPLE_X4)\r\nuniform vec2 dsOffsets[16];\r\n\r\nvoid main() {\r\n\tvec4 average = vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n\taverage = texture2D(textureSampler, vUV + dsOffsets[0]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[1]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[2]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[3]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[4]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[5]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[6]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[7]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[8]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[9]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[10]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[11]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[12]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[13]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[14]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[15]);\r\n\r\n\taverage /= 16.0;\r\n\r\n\tgl_FragColor = average;\r\n}\r\n#endif\r\n\r\n#if defined(HDR)\r\nuniform sampler2D otherSampler;\r\n\r\nuniform float exposure;\r\nuniform float avgLuminance;\r\n\r\nvoid main() {\r\n\tvec4 color = texture2D(textureSampler, vUV) + texture2D(otherSampler, vUV);\r\n\tvec4 adjustedColor = color / avgLuminance * exposure;\r\n\r\n\tcolor = adjustedColor;\r\n\tcolor.a = 1.0;\r\n\r\n\tgl_FragColor = color;\r\n}\r\n#endif\r\n"); else _g.h["hdr.fragment"] = "precision highp float;\r\n\r\nuniform sampler2D textureSampler;\r\nvarying vec2 vUV;\r\n\r\n#if defined(GAUSSIAN_BLUR_H) || defined(GAUSSIAN_BLUR_V)\r\nuniform float blurOffsets[9];\r\nuniform float blurWeights[9];\r\nuniform float multiplier;\r\n\r\nvoid main(void) {\r\n\tvec4 color = vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n\tfor (int i = 0; i < 9; i++) {\r\n\t\t#ifdef GAUSSIAN_BLUR_H\r\n\t\tcolor += (texture2D(textureSampler, vUV + vec2(blurOffsets[i] * multiplier, 0.0)) * blurWeights[i]);\r\n\t\t#else\r\n\t\tcolor += (texture2D(textureSampler, vUV + vec2(0.0, blurOffsets[i] * multiplier)) * blurWeights[i]);\r\n\t\t#endif\r\n\t}\r\n\r\n\tcolor.a = 1.0;\r\n\tgl_FragColor = color;\r\n}\r\n#endif\r\n\r\n#if defined(TEXTURE_ADDER)\r\nuniform sampler2D otherSampler;\r\n\r\nvoid main() {\r\n\tvec4 sum = texture2D(textureSampler, vUV) + texture2D(otherSampler, vUV);\r\n\tsum.a = clamp(sum.a, 0.0, 1.0);\r\n\r\n\tgl_FragColor = sum;\r\n}\r\n#endif\r\n\r\n#if defined(LUMINANCE_GENERATOR)\r\nuniform vec2 lumOffsets[4];\r\n\r\nvoid main() {\r\n\tfloat average = 0.0;\r\n\tvec4 color = vec4(0.0, 0.0, 0.0, 0.0);\r\n\tfloat maximum = -1e20;\r\n\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\tcolor = texture2D(textureSampler, vUV + lumOffsets[i]);\r\n\r\n\t\tfloat GreyValue = length(color.rgb);\r\n\r\n\t\tmaximum = max(maximum, GreyValue);\r\n\t\taverage += (0.25 * log(1e-5 + GreyValue));\r\n\t}\r\n\r\n\taverage = exp(average);\r\n\r\n\tgl_FragColor = vec4(average, maximum, 0.0, 1.0);\r\n\r\n}\r\n#endif\r\n\r\n#if defined(DOWN_SAMPLE)\r\nuniform vec2 dsOffsets[9];\r\nuniform float halfDestPixelSize;\r\n\r\n#ifdef FINAL_DOWN_SAMPLE\r\nvec4 pack(float value) {\r\n\tconst vec4 bit_shift = vec4(255.0 * 255.0 * 255.0, 255.0 * 255.0, 255.0, 1.0);\r\n\tconst vec4 bit_mask = vec4(0.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n\r\n\tvec4 res = fract(value * bit_shift);\r\n\tres -= res.xxyz * bit_mask;\r\n\r\n\treturn res;\r\n}\r\n#endif\r\n\r\nvoid main() {\r\n\tvec4 color = vec4(0.0, 0.0, 0.0, 0.0);\r\n\tfloat average = 0.0;\r\n\r\n\tfor (int i = 0; i < 9; i++) {\r\n\t\tcolor = texture2D(textureSampler, vUV + vec2(halfDestPixelSize, halfDestPixelSize) + dsOffsets[i]);\r\n\t\taverage += color.r;\r\n\t}\r\n\r\n\taverage /= 9.0;\r\n\r\n\t#ifndef FINAL_DOWN_SAMPLE\r\n\tgl_FragColor = vec4(average, average, 0.0, 1.0);\r\n\t#else\r\n\tgl_FragColor = pack(average);\r\n\t#endif\r\n}\r\n#endif\r\n\r\n#if defined(BRIGHT_PASS)\r\nuniform vec2 dsOffsets[4];\r\nuniform float brightThreshold;\r\n\r\nvoid main() {\r\n\tvec4 average = vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n\taverage = texture2D(textureSampler, vUV + vec2(dsOffsets[0].x, dsOffsets[0].y));\r\n\taverage += texture2D(textureSampler, vUV + vec2(dsOffsets[1].x, dsOffsets[1].y));\r\n\taverage += texture2D(textureSampler, vUV + vec2(dsOffsets[2].x, dsOffsets[2].y));\r\n\taverage += texture2D(textureSampler, vUV + vec2(dsOffsets[3].x, dsOffsets[3].y));\r\n\r\n\taverage *= 0.25;\r\n\r\n\tfloat luminance = length(average.rgb);\r\n\r\n\tif (luminance < brightThreshold) {\r\n\t\taverage = vec4(0.0, 0.0, 0.0, 1.0);\r\n\t}\r\n\r\n\tgl_FragColor = average;\r\n}\r\n#endif\r\n\r\n#if defined(DOWN_SAMPLE_X4)\r\nuniform vec2 dsOffsets[16];\r\n\r\nvoid main() {\r\n\tvec4 average = vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n\taverage = texture2D(textureSampler, vUV + dsOffsets[0]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[1]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[2]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[3]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[4]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[5]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[6]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[7]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[8]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[9]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[10]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[11]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[12]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[13]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[14]);\r\n\taverage += texture2D(textureSampler, vUV + dsOffsets[15]);\r\n\r\n\taverage /= 16.0;\r\n\r\n\tgl_FragColor = average;\r\n}\r\n#endif\r\n\r\n#if defined(HDR)\r\nuniform sampler2D otherSampler;\r\n\r\nuniform float exposure;\r\nuniform float avgLuminance;\r\n\r\nvoid main() {\r\n\tvec4 color = texture2D(textureSampler, vUV) + texture2D(otherSampler, vUV);\r\n\tvec4 adjustedColor = color / avgLuminance * exposure;\r\n\r\n\tcolor = adjustedColor;\r\n\tcolor.a = 1.0;\r\n\r\n\tgl_FragColor = color;\r\n}\r\n#endif\r\n";
	if(__map_reserved["layer.fragment"] != null) _g.setReserved("layer.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Color\r\nuniform vec4 color;\r\n\r\nvoid main(void) {\r\n\tvec4 baseColor = texture2D(textureSampler, vUV);\r\n\r\n\tgl_FragColor = baseColor * color;\r\n}"); else _g.h["layer.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Color\r\nuniform vec4 color;\r\n\r\nvoid main(void) {\r\n\tvec4 baseColor = texture2D(textureSampler, vUV);\r\n\r\n\tgl_FragColor = baseColor * color;\r\n}";
	if(__map_reserved["layer.vertex"] != null) _g.setReserved("layer.vertex","precision highp float;\r\n\r\n// Attributes\r\nattribute vec2 position;\r\n\r\n// Uniforms\r\nuniform mat4 textureMatrix;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\n\r\nconst vec2 madd = vec2(0.5, 0.5);\r\n\r\nvoid main(void) {\t\r\n\r\n\tvUV = vec2(textureMatrix * vec4(position * madd + madd, 1.0, 0.0));\r\n\tgl_Position = vec4(position, 0.0, 1.0);\r\n}"); else _g.h["layer.vertex"] = "precision highp float;\r\n\r\n// Attributes\r\nattribute vec2 position;\r\n\r\n// Uniforms\r\nuniform mat4 textureMatrix;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\n\r\nconst vec2 madd = vec2(0.5, 0.5);\r\n\r\nvoid main(void) {\t\r\n\r\n\tvUV = vec2(textureMatrix * vec4(position * madd + madd, 1.0, 0.0));\r\n\tgl_Position = vec4(position, 0.0, 1.0);\r\n}";
	if(__map_reserved["legacydefault.fragment"] != null) _g.setReserved("legacydefault.fragment","precision highp float;\r\n\r\n#define MAP_PROJECTION\t4.\r\n\r\n// Constants\r\nuniform vec3 vEyePosition;\r\nuniform vec3 vAmbientColor;\r\nuniform vec4 vDiffuseColor;\r\n#ifdef SPECULARTERM\r\nuniform vec4 vSpecularColor;\r\n#endif\r\nuniform vec3 vEmissiveColor;\r\n\r\n// Input\r\nvarying vec3 vPositionW;\r\nvarying vec3 vNormalW;\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n// Lights\r\n#ifdef LIGHT0\r\nuniform vec4 vLightData0;\r\nuniform vec4 vLightDiffuse0;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular0;\r\n#endif\r\n#ifdef SHADOW0\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\nvarying vec4 vPositionFromLight0;\r\nuniform sampler2D shadowSampler0;\r\n#else\r\nuniform samplerCube shadowSampler0;\r\n#endif\r\nuniform vec3 shadowsInfo0;\r\n#endif\r\n#ifdef SPOTLIGHT0\r\nuniform vec4 vLightDirection0;\r\n#endif\r\n#ifdef HEMILIGHT0\r\nuniform vec3 vLightGround0;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\nuniform vec4 vLightData1;\r\nuniform vec4 vLightDiffuse1;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular1;\r\n#endif\r\n#ifdef SHADOW1\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\nvarying vec4 vPositionFromLight1;\r\nuniform sampler2D shadowSampler1;\r\n#else\r\nuniform samplerCube shadowSampler1;\r\n#endif\r\nuniform vec3 shadowsInfo1;\r\n#endif\r\n#ifdef SPOTLIGHT1\r\nuniform vec4 vLightDirection1;\r\n#endif\r\n#ifdef HEMILIGHT1\r\nuniform vec3 vLightGround1;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\nuniform vec4 vLightData2;\r\nuniform vec4 vLightDiffuse2;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular2;\r\n#endif\r\n#ifdef SHADOW2\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\nvarying vec4 vPositionFromLight2;\r\nuniform sampler2D shadowSampler2;\r\n#else\r\nuniform samplerCube shadowSampler2;\r\n#endif\r\nuniform vec3 shadowsInfo2;\r\n#endif\r\n#ifdef SPOTLIGHT2\r\nuniform vec4 vLightDirection2;\r\n#endif\r\n#ifdef HEMILIGHT2\r\nuniform vec3 vLightGround2;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\nuniform vec4 vLightData3;\r\nuniform vec4 vLightDiffuse3;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular3;\r\n#endif\r\n#ifdef SHADOW3\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\nvarying vec4 vPositionFromLight3;\r\nuniform sampler2D shadowSampler3;\r\n#else\r\nuniform samplerCube shadowSampler3;\r\n#endif\r\nuniform vec3 shadowsInfo3;\r\n#endif\r\n#ifdef SPOTLIGHT3\r\nuniform vec4 vLightDirection3;\r\n#endif\r\n#ifdef HEMILIGHT3\r\nuniform vec3 vLightGround3;\r\n#endif\r\n#endif\r\n\r\n// Samplers\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform sampler2D diffuseSampler;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#ifdef AMBIENT\r\nvarying vec2 vAmbientUV;\r\nuniform sampler2D ambientSampler;\r\nuniform vec2 vAmbientInfos;\r\n#endif\r\n\r\n#ifdef OPACITY\t\r\nvarying vec2 vOpacityUV;\r\nuniform sampler2D opacitySampler;\r\nuniform vec2 vOpacityInfos;\r\n#endif\r\n\r\n#ifdef REFLECTION\r\nvarying vec3 vReflectionUVW;\r\n#ifdef REFLECTIONMAP_3D\r\nuniform samplerCube reflectionCubeSampler;\r\n#else\r\nuniform sampler2D reflection2DSampler;\r\n#endif\r\nuniform vec2 vReflectionInfos;\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\nvarying vec2 vEmissiveUV;\r\nuniform vec2 vEmissiveInfos;\r\nuniform sampler2D emissiveSampler;\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\nvarying vec2 vSpecularUV;\r\nuniform vec2 vSpecularInfos;\r\nuniform sampler2D specularSampler;\r\n#endif\r\n\r\n// Fresnel\r\n#ifdef FRESNEL\r\nfloat computeFresnelTerm(vec3 viewDirection, vec3 worldNormal, float bias, float power)\r\n{\r\n\tfloat fresnelTerm = pow(bias + abs(dot(viewDirection, worldNormal)), power);\r\n\treturn clamp(fresnelTerm, 0., 1.);\r\n}\r\n#endif\r\n\r\n#ifdef DIFFUSEFRESNEL\r\nuniform vec4 diffuseLeftColor;\r\nuniform vec4 diffuseRightColor;\r\n#endif\r\n\r\n#ifdef OPACITYFRESNEL\r\nuniform vec4 opacityParts;\r\n#endif\r\n\r\n#ifdef REFLECTIONFRESNEL\r\nuniform vec4 reflectionLeftColor;\r\nuniform vec4 reflectionRightColor;\r\n#endif\r\n\r\n#ifdef EMISSIVEFRESNEL\r\nuniform vec4 emissiveLeftColor;\r\nuniform vec4 emissiveRightColor;\r\n#endif\r\n\r\n// Shadows\r\n#ifdef SHADOWS\r\n\r\nfloat unpack(vec4 color)\r\n{\r\n\tconst vec4 bit_shift = vec4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\r\n\treturn dot(color, bit_shift);\r\n}\r\n\r\n#if defined(POINTLIGHT0) || defined(POINTLIGHT1) || defined(POINTLIGHT2) || defined(POINTLIGHT3)\r\nfloat computeShadowCube(vec3 lightPosition, samplerCube shadowSampler, float darkness, float bias)\r\n{\r\n\tvec3 directionToLight = vPositionW - lightPosition;\r\n\tfloat depth = length(directionToLight);\r\n\r\n\tdepth = clamp(depth, 0., 1.);\r\n\r\n\tdirectionToLight.y = 1.0 - directionToLight.y;\r\n\r\n\tfloat shadow = unpack(textureCube(shadowSampler, directionToLight)) + bias;\r\n\r\n\tif (depth > shadow)\r\n\t{\r\n\t\treturn darkness;\r\n\t}\r\n\treturn 1.0;\r\n}\r\n#endif\r\n\r\n#if defined(SPOTLIGHT0) || defined(SPOTLIGHT1) || defined(SPOTLIGHT2) || defined(SPOTLIGHT3) ||  defined(DIRLIGHT0) || defined(DIRLIGHT1) || defined(DIRLIGHT2) || defined(DIRLIGHT3)\r\nfloat computeShadow(vec4 vPositionFromLight, sampler2D shadowSampler, float darkness, float bias)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tfloat shadow = unpack(texture2D(shadowSampler, uv)) + bias;\r\n\r\n\tif (depth.z > shadow)\r\n\t{\r\n\t\treturn darkness;\r\n\t}\r\n\treturn 1.;\r\n}\r\n\r\n// Thanks to http://devmaster.net/\r\nfloat unpackHalf(vec2 color)\r\n{\r\n\treturn color.x + (color.y / 255.0);\r\n}\r\n\r\nfloat linstep(float low, float high, float v) {\r\n\treturn clamp((v - low) / (high - low), 0.0, 1.0);\r\n}\r\n\r\nfloat ChebychevInequality(vec2 moments, float compare, float bias)\r\n{\r\n\tfloat p = smoothstep(compare - bias, compare, moments.x);\r\n\tfloat variance = max(moments.y - moments.x * moments.x, 0.02);\r\n\tfloat d = compare - moments.x;\r\n\tfloat p_max = linstep(0.2, 1.0, variance / (variance + d * d));\r\n\r\n\treturn clamp(max(p, p_max), 0.0, 1.0);\r\n}\r\n\r\nfloat computeShadowWithVSM(vec4 vPositionFromLight, sampler2D shadowSampler, float bias, float darkness)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0 || depth.z >= 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tvec4 texel = texture2D(shadowSampler, uv);\r\n\r\n\tvec2 moments = vec2(unpackHalf(texel.xy), unpackHalf(texel.zw));\r\n\treturn min(1.0, 1.0 - ChebychevInequality(moments, depth.z, bias) + darkness);\r\n}\r\n#endif\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n// Fog\r\n#ifdef FOG\r\n\r\n#define FOGMODE_NONE    0.\r\n#define FOGMODE_EXP     1.\r\n#define FOGMODE_EXP2    2.\r\n#define FOGMODE_LINEAR  3.\r\n#define E 2.71828\r\n\r\nuniform vec4 vFogInfos;\r\nuniform vec3 vFogColor;\r\nvarying float fFogDistance;\r\n\r\nfloat CalcFogFactor()\r\n{\r\n\tfloat fogCoeff = 1.0;\r\n\tfloat fogStart = vFogInfos.y;\r\n\tfloat fogEnd = vFogInfos.z;\r\n\tfloat fogDensity = vFogInfos.w;\r\n\r\n\tif (FOGMODE_LINEAR == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = (fogEnd - fFogDistance) / (fogEnd - fogStart);\r\n\t}\r\n\telse if (FOGMODE_EXP == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fogDensity);\r\n\t}\r\n\telse if (FOGMODE_EXP2 == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fFogDistance * fogDensity * fogDensity);\r\n\t}\r\n\r\n\treturn clamp(fogCoeff, 0.0, 1.0);\r\n}\r\n#endif\r\n\r\n// Light Computing\r\nmat3 computeLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 diffuseColor, vec3 specularColor) {\r\n\tmat3 result;\r\n\r\n\tvec3 lightVectorW;\r\n\tif (lightData.w == 0.)\r\n\t{\r\n\t\tlightVectorW = normalize(lightData.xyz - vPositionW);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tlightVectorW = normalize(-lightData.xyz);\r\n\t}\r\n\r\n\t// diffuse\r\n\tfloat ndl = max(0., dot(vNormal, lightVectorW));\r\n\r\n\tresult[0] = ndl * diffuseColor.rgb;\r\n\r\n#ifdef SPECULARTERM\r\n\t// Specular\r\n\tvec3 angleW = normalize(viewDirectionW + lightVectorW);\r\n\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\tspecComp = max(0., pow(specComp, max(1.0, vSpecularColor.a)));\r\n\tresult[1] = specComp * specularColor;\r\n#else\r\n\tresult[1] = vec3(0.);\r\n#endif\r\n\r\n\tresult[2] = vec3(0.);\r\n\r\n\treturn result;\r\n}\r\n\r\nmat3 computeSpotLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 lightDirection, vec4 diffuseColor, vec3 specularColor) {\r\n\tmat3 result;\r\n\r\n\tvec3 lightVectorW = normalize(lightData.xyz - vPositionW);\r\n\r\n\t// diffuse\r\n\tfloat cosAngle = max(0., dot(-lightDirection.xyz, lightVectorW));\r\n\tfloat spotAtten = 0.0;\r\n\r\n\tif (cosAngle >= lightDirection.w)\r\n\t{\r\n\t\tcosAngle = max(0., pow(cosAngle, lightData.w));\r\n\t\tspotAtten = max(0., (cosAngle - lightDirection.w) / (1. - cosAngle));\r\n\r\n\t\t// Diffuse\r\n\t\tfloat ndl = max(0., dot(vNormal, -lightDirection.xyz));\r\n\t\tresult[0] = ndl * spotAtten * diffuseColor.rgb;\r\n\r\n#ifdef SPECULARTERM\r\n\t\t// Specular\r\n\t\tvec3 angleW = normalize(viewDirectionW - lightDirection.xyz);\r\n\t\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\t\tspecComp = pow(specComp, vSpecularColor.a);\r\n\t\tresult[1] = specComp * specularColor * spotAtten;\r\n#else\r\n\t\tresult[1] = vec3(0.);\r\n#endif\r\n\t\tresult[2] = vec3(0.);\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tresult[0] = vec3(0.);\r\n\tresult[1] = vec3(0.);\r\n\tresult[2] = vec3(0.);\r\n\r\n\treturn result;\r\n}\r\n\r\nmat3 computeHemisphericLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 diffuseColor, vec3 specularColor, vec3 groundColor) {\r\n\tmat3 result;\r\n\r\n\t// Diffuse\r\n\tfloat ndl = dot(vNormal, lightData.xyz) * 0.5 + 0.5;\r\n\tresult[0] = mix(groundColor, diffuseColor.rgb, ndl);\r\n\r\n#ifdef SPECULARTERM\r\n\t// Specular\r\n\tvec3 angleW = normalize(viewDirectionW + lightData.xyz);\r\n\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\tspecComp = pow(specComp, vSpecularColor.a);\r\n\tresult[1] = specComp * specularColor;\r\n#else\r\n\tresult[1] = vec3(0.);\r\n#endif\r\n\r\n\tresult[2] = vec3(0.);\r\n\r\n\treturn result;\r\n}\r\n\r\nvoid main(void) {\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tif (fClipDistance > 0.0)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tvec3 viewDirectionW = normalize(vEyePosition - vPositionW);\r\n\r\n\t// Base color\r\n\tvec4 baseColor = vec4(1., 1., 1., 1.);\r\n\tvec3 diffuseColor = vDiffuseColor.rgb;\r\n\r\n#ifdef DIFFUSE\r\n\tbaseColor = texture2D(diffuseSampler, vDiffuseUV);\r\n\r\n#ifdef ALPHATEST\r\n\tif (baseColor.a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tbaseColor.rgb *= vDiffuseInfos.y;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\n\tbaseColor.rgb *= vColor.rgb;\r\n#endif\r\n\r\n\t// Bump\r\n\tvec3 normalW = normalize(vNormalW);\r\n\r\n\t// Ambient color\r\n\tvec3 baseAmbientColor = vec3(1., 1., 1.);\r\n\r\n#ifdef AMBIENT\r\n\tbaseAmbientColor = texture2D(ambientSampler, vAmbientUV).rgb * vAmbientInfos.y;\r\n#endif\r\n\r\n\t// Lighting\r\n\tvec3 diffuseBase = vec3(0., 0., 0.);\r\n#ifdef SPECULARTERM\r\n\tvec3 specularBase = vec3(0., 0., 0.);\r\n#endif\r\n\tfloat shadow = 1.;\r\n\r\n#ifdef LIGHT0\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular0 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT0\r\n\tmat3 info = computeSpotLighting(viewDirectionW, normalW, vLightData0, vLightDirection0, vLightDiffuse0, vLightSpecular0);\r\n#endif\r\n#ifdef HEMILIGHT0\r\n\tmat3 info = computeHemisphericLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0, vLightSpecular0, vLightGround0);\r\n#endif\r\n#if defined(POINTLIGHT0) || defined(DIRLIGHT0)\r\n\tmat3 info = computeLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0, vLightSpecular0);\r\n#endif\r\n#ifdef SHADOW0\r\n#ifdef SHADOWVSM0\r\n\tshadow = computeShadowWithVSM(vPositionFromLight0, shadowSampler0, shadowsInfo0.z, shadowsInfo0.x);\r\n#else\r\n#if defined(POINTLIGHT0)\r\n\tshadow = computeShadowCube(vLightData0.xyz, shadowSampler0, shadowsInfo0.x, shadowsInfo0.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight0, shadowSampler0, shadowsInfo0.x, shadowsInfo0.z);\r\n#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info[0] * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info[1] * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular1 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT1\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData1, vLightDirection1, vLightDiffuse1, vLightSpecular1);\r\n#endif\r\n#ifdef HEMILIGHT1\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1, vLightSpecular1, vLightGround1);\r\n#endif\r\n#if defined(POINTLIGHT1) || defined(DIRLIGHT1)\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1, vLightSpecular1);\r\n#endif\r\n#ifdef SHADOW1\r\n#ifdef SHADOWVSM1\r\n\tshadow = computeShadowWithVSM(vPositionFromLight1, shadowSampler1, shadowsInfo1.z, shadowsInfo1.x);\r\n#else\r\n#if defined(POINTLIGHT1)\r\n\tshadow = computeShadowCube(vLightData1.xyz, shadowSampler1, shadowsInfo1.x, shadowsInfo1.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight1, shadowSampler1, shadowsInfo1.x, shadowsInfo1.z);\r\n#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info[0] * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info[1] * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular2 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT2\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData2, vLightDirection2, vLightDiffuse2, vLightSpecular2);\r\n#endif\r\n#ifdef HEMILIGHT2\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2, vLightSpecular2, vLightGround2);\r\n#endif\r\n#if defined(POINTLIGHT2) || defined(DIRLIGHT2)\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2, vLightSpecular2);\r\n#endif\r\n#ifdef SHADOW2\r\n#ifdef SHADOWVSM2\r\n\tshadow = computeShadowWithVSM(vPositionFromLight2, shadowSampler2, shadowsInfo2.z, shadowsInfo2.x);\r\n#else\r\n#if defined(POINTLIGHT2)\r\n\tshadow = computeShadowCube(vLightData2.xyz, shadowSampler2, shadowsInfo2.x, shadowsInfo2.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight2, shadowSampler2, shadowsInfo2.x, shadowsInfo2.z);\r\n#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info[0] * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info[1] * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular3 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT3\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData3, vLightDirection3, vLightDiffuse3, vLightSpecular3);\r\n#endif\r\n#ifdef HEMILIGHT3\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3, vLightSpecular3, vLightGround3);\r\n#endif\r\n#if defined(POINTLIGHT3) || defined(DIRLIGHT3)\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3, vLightSpecular3);\r\n#endif\r\n#ifdef SHADOW3\r\n#ifdef SHADOWVSM3\r\n\tshadow = computeShadowWithVSM(vPositionFromLight3, shadowSampler3, shadowsInfo3.z, shadowsInfo3.x);\r\n#else\r\n#if defined(POINTLIGHT3)\r\n\tshadow = computeShadowCube(vLightData3.xyz, shadowSampler3, shadowsInfo3.x, shadowsInfo3.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight3, shadowSampler3, shadowsInfo3.x, shadowsInfo3.z);\r\n#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info[0] * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info[1] * shadow;\r\n#endif\r\n#endif\r\n\r\n\t// Reflection\r\n\tvec3 reflectionColor = vec3(0., 0., 0.);\r\n\r\n#ifdef REFLECTION\r\n#ifdef REFLECTIONMAP_3D\r\n\t\treflectionColor = textureCube(reflectionCubeSampler, vReflectionUVW).rgb * vReflectionInfos.x;\r\n#else\r\n\t\tvec2 coords = vReflectionUVW.xy;\r\n\r\n#ifdef REFLECTIONMAP_PROJECTION\r\n\t\tcoords /= vReflectionUVW.z;\r\n#endif\r\n\r\n\t\tcoords.y = 1.0 - coords.y;\r\n\r\n\t\treflectionColor = texture2D(reflection2DSampler, coords).rgb * vReflectionInfos.x;\r\n#endif\r\n\r\n#ifdef REFLECTIONFRESNEL\r\n\tfloat reflectionFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, reflectionRightColor.a, reflectionLeftColor.a);\r\n\r\n\treflectionColor *= reflectionLeftColor.rgb * (1.0 - reflectionFresnelTerm) + reflectionFresnelTerm * reflectionRightColor.rgb;\r\n#endif\r\n#endif\r\n\r\n\t// Alpha\r\n\tfloat alpha = vDiffuseColor.a;\r\n\r\n#ifdef OPACITY\r\n\tvec4 opacityMap = texture2D(opacitySampler, vOpacityUV);\r\n#ifdef OPACITYRGB\r\n\topacityMap.rgb = opacityMap.rgb * vec3(0.3, 0.59, 0.11);\r\n\talpha *= (opacityMap.x + opacityMap.y + opacityMap.z)* vOpacityInfos.y;\r\n#else\r\n\talpha *= opacityMap.a * vOpacityInfos.y;\r\n#endif\r\n#endif\r\n\r\n#ifdef VERTEXALPHA\r\n\talpha *= vColor.a;\r\n#endif\r\n\r\n#ifdef OPACITYFRESNEL\r\n\tfloat opacityFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, opacityParts.z, opacityParts.w);\r\n\r\n\talpha += opacityParts.x * (1.0 - opacityFresnelTerm) + opacityFresnelTerm * opacityParts.y;\r\n#endif\r\n\r\n\t// Emissive\r\n\tvec3 emissiveColor = vEmissiveColor;\r\n#ifdef EMISSIVE\r\n\temissiveColor += texture2D(emissiveSampler, vEmissiveUV).rgb * vEmissiveInfos.y;\r\n#endif\r\n\r\n#ifdef EMISSIVEFRESNEL\r\n\tfloat emissiveFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, emissiveRightColor.a, emissiveLeftColor.a);\r\n\r\n\temissiveColor *= emissiveLeftColor.rgb * (1.0 - emissiveFresnelTerm) + emissiveFresnelTerm * emissiveRightColor.rgb;\r\n#endif\r\n\r\n\t// Specular map\r\n#ifdef SPECULARTERM\r\n\tvec3 specularColor = vSpecularColor.rgb;\r\n#ifdef SPECULAR\r\n\tspecularColor = texture2D(specularSampler, vSpecularUV).rgb * vSpecularInfos.y;\r\n#endif\r\n#endif\r\n\r\n\t// Fresnel\r\n#ifdef DIFFUSEFRESNEL\r\n\tfloat diffuseFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, diffuseRightColor.a, diffuseLeftColor.a);\r\n\r\n\tdiffuseBase *= diffuseLeftColor.rgb * (1.0 - diffuseFresnelTerm) + diffuseFresnelTerm * diffuseRightColor.rgb;\r\n#endif\r\n\r\n\t// Composition\r\n\tvec3 finalDiffuse = clamp(diffuseBase * diffuseColor + emissiveColor + vAmbientColor, 0.0, 1.0) * baseColor.rgb;\r\n#ifdef SPECULARTERM\r\n\tvec3 finalSpecular = specularBase * specularColor;\r\n#else\r\n\tvec3 finalSpecular = vec3(0.0);\r\n#endif\r\n\r\n\tvec4 color = vec4(finalDiffuse * baseAmbientColor + finalSpecular + reflectionColor, alpha);\r\n\r\n#ifdef FOG\r\n\tfloat fog = CalcFogFactor();\r\n\tcolor.rgb = fog * color.rgb + (1.0 - fog) * vFogColor;\r\n#endif\r\n\r\n\tgl_FragColor = color;\r\n}"); else _g.h["legacydefault.fragment"] = "precision highp float;\r\n\r\n#define MAP_PROJECTION\t4.\r\n\r\n// Constants\r\nuniform vec3 vEyePosition;\r\nuniform vec3 vAmbientColor;\r\nuniform vec4 vDiffuseColor;\r\n#ifdef SPECULARTERM\r\nuniform vec4 vSpecularColor;\r\n#endif\r\nuniform vec3 vEmissiveColor;\r\n\r\n// Input\r\nvarying vec3 vPositionW;\r\nvarying vec3 vNormalW;\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n// Lights\r\n#ifdef LIGHT0\r\nuniform vec4 vLightData0;\r\nuniform vec4 vLightDiffuse0;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular0;\r\n#endif\r\n#ifdef SHADOW0\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\nvarying vec4 vPositionFromLight0;\r\nuniform sampler2D shadowSampler0;\r\n#else\r\nuniform samplerCube shadowSampler0;\r\n#endif\r\nuniform vec3 shadowsInfo0;\r\n#endif\r\n#ifdef SPOTLIGHT0\r\nuniform vec4 vLightDirection0;\r\n#endif\r\n#ifdef HEMILIGHT0\r\nuniform vec3 vLightGround0;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\nuniform vec4 vLightData1;\r\nuniform vec4 vLightDiffuse1;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular1;\r\n#endif\r\n#ifdef SHADOW1\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\nvarying vec4 vPositionFromLight1;\r\nuniform sampler2D shadowSampler1;\r\n#else\r\nuniform samplerCube shadowSampler1;\r\n#endif\r\nuniform vec3 shadowsInfo1;\r\n#endif\r\n#ifdef SPOTLIGHT1\r\nuniform vec4 vLightDirection1;\r\n#endif\r\n#ifdef HEMILIGHT1\r\nuniform vec3 vLightGround1;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\nuniform vec4 vLightData2;\r\nuniform vec4 vLightDiffuse2;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular2;\r\n#endif\r\n#ifdef SHADOW2\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\nvarying vec4 vPositionFromLight2;\r\nuniform sampler2D shadowSampler2;\r\n#else\r\nuniform samplerCube shadowSampler2;\r\n#endif\r\nuniform vec3 shadowsInfo2;\r\n#endif\r\n#ifdef SPOTLIGHT2\r\nuniform vec4 vLightDirection2;\r\n#endif\r\n#ifdef HEMILIGHT2\r\nuniform vec3 vLightGround2;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\nuniform vec4 vLightData3;\r\nuniform vec4 vLightDiffuse3;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular3;\r\n#endif\r\n#ifdef SHADOW3\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\nvarying vec4 vPositionFromLight3;\r\nuniform sampler2D shadowSampler3;\r\n#else\r\nuniform samplerCube shadowSampler3;\r\n#endif\r\nuniform vec3 shadowsInfo3;\r\n#endif\r\n#ifdef SPOTLIGHT3\r\nuniform vec4 vLightDirection3;\r\n#endif\r\n#ifdef HEMILIGHT3\r\nuniform vec3 vLightGround3;\r\n#endif\r\n#endif\r\n\r\n// Samplers\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform sampler2D diffuseSampler;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#ifdef AMBIENT\r\nvarying vec2 vAmbientUV;\r\nuniform sampler2D ambientSampler;\r\nuniform vec2 vAmbientInfos;\r\n#endif\r\n\r\n#ifdef OPACITY\t\r\nvarying vec2 vOpacityUV;\r\nuniform sampler2D opacitySampler;\r\nuniform vec2 vOpacityInfos;\r\n#endif\r\n\r\n#ifdef REFLECTION\r\nvarying vec3 vReflectionUVW;\r\n#ifdef REFLECTIONMAP_3D\r\nuniform samplerCube reflectionCubeSampler;\r\n#else\r\nuniform sampler2D reflection2DSampler;\r\n#endif\r\nuniform vec2 vReflectionInfos;\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\nvarying vec2 vEmissiveUV;\r\nuniform vec2 vEmissiveInfos;\r\nuniform sampler2D emissiveSampler;\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\nvarying vec2 vSpecularUV;\r\nuniform vec2 vSpecularInfos;\r\nuniform sampler2D specularSampler;\r\n#endif\r\n\r\n// Fresnel\r\n#ifdef FRESNEL\r\nfloat computeFresnelTerm(vec3 viewDirection, vec3 worldNormal, float bias, float power)\r\n{\r\n\tfloat fresnelTerm = pow(bias + abs(dot(viewDirection, worldNormal)), power);\r\n\treturn clamp(fresnelTerm, 0., 1.);\r\n}\r\n#endif\r\n\r\n#ifdef DIFFUSEFRESNEL\r\nuniform vec4 diffuseLeftColor;\r\nuniform vec4 diffuseRightColor;\r\n#endif\r\n\r\n#ifdef OPACITYFRESNEL\r\nuniform vec4 opacityParts;\r\n#endif\r\n\r\n#ifdef REFLECTIONFRESNEL\r\nuniform vec4 reflectionLeftColor;\r\nuniform vec4 reflectionRightColor;\r\n#endif\r\n\r\n#ifdef EMISSIVEFRESNEL\r\nuniform vec4 emissiveLeftColor;\r\nuniform vec4 emissiveRightColor;\r\n#endif\r\n\r\n// Shadows\r\n#ifdef SHADOWS\r\n\r\nfloat unpack(vec4 color)\r\n{\r\n\tconst vec4 bit_shift = vec4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\r\n\treturn dot(color, bit_shift);\r\n}\r\n\r\n#if defined(POINTLIGHT0) || defined(POINTLIGHT1) || defined(POINTLIGHT2) || defined(POINTLIGHT3)\r\nfloat computeShadowCube(vec3 lightPosition, samplerCube shadowSampler, float darkness, float bias)\r\n{\r\n\tvec3 directionToLight = vPositionW - lightPosition;\r\n\tfloat depth = length(directionToLight);\r\n\r\n\tdepth = clamp(depth, 0., 1.);\r\n\r\n\tdirectionToLight.y = 1.0 - directionToLight.y;\r\n\r\n\tfloat shadow = unpack(textureCube(shadowSampler, directionToLight)) + bias;\r\n\r\n\tif (depth > shadow)\r\n\t{\r\n\t\treturn darkness;\r\n\t}\r\n\treturn 1.0;\r\n}\r\n#endif\r\n\r\n#if defined(SPOTLIGHT0) || defined(SPOTLIGHT1) || defined(SPOTLIGHT2) || defined(SPOTLIGHT3) ||  defined(DIRLIGHT0) || defined(DIRLIGHT1) || defined(DIRLIGHT2) || defined(DIRLIGHT3)\r\nfloat computeShadow(vec4 vPositionFromLight, sampler2D shadowSampler, float darkness, float bias)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tfloat shadow = unpack(texture2D(shadowSampler, uv)) + bias;\r\n\r\n\tif (depth.z > shadow)\r\n\t{\r\n\t\treturn darkness;\r\n\t}\r\n\treturn 1.;\r\n}\r\n\r\n// Thanks to http://devmaster.net/\r\nfloat unpackHalf(vec2 color)\r\n{\r\n\treturn color.x + (color.y / 255.0);\r\n}\r\n\r\nfloat linstep(float low, float high, float v) {\r\n\treturn clamp((v - low) / (high - low), 0.0, 1.0);\r\n}\r\n\r\nfloat ChebychevInequality(vec2 moments, float compare, float bias)\r\n{\r\n\tfloat p = smoothstep(compare - bias, compare, moments.x);\r\n\tfloat variance = max(moments.y - moments.x * moments.x, 0.02);\r\n\tfloat d = compare - moments.x;\r\n\tfloat p_max = linstep(0.2, 1.0, variance / (variance + d * d));\r\n\r\n\treturn clamp(max(p, p_max), 0.0, 1.0);\r\n}\r\n\r\nfloat computeShadowWithVSM(vec4 vPositionFromLight, sampler2D shadowSampler, float bias, float darkness)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tdepth = 0.5 * depth + vec3(0.5);\r\n\tvec2 uv = depth.xy;\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0 || depth.z >= 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tvec4 texel = texture2D(shadowSampler, uv);\r\n\r\n\tvec2 moments = vec2(unpackHalf(texel.xy), unpackHalf(texel.zw));\r\n\treturn min(1.0, 1.0 - ChebychevInequality(moments, depth.z, bias) + darkness);\r\n}\r\n#endif\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n// Fog\r\n#ifdef FOG\r\n\r\n#define FOGMODE_NONE    0.\r\n#define FOGMODE_EXP     1.\r\n#define FOGMODE_EXP2    2.\r\n#define FOGMODE_LINEAR  3.\r\n#define E 2.71828\r\n\r\nuniform vec4 vFogInfos;\r\nuniform vec3 vFogColor;\r\nvarying float fFogDistance;\r\n\r\nfloat CalcFogFactor()\r\n{\r\n\tfloat fogCoeff = 1.0;\r\n\tfloat fogStart = vFogInfos.y;\r\n\tfloat fogEnd = vFogInfos.z;\r\n\tfloat fogDensity = vFogInfos.w;\r\n\r\n\tif (FOGMODE_LINEAR == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = (fogEnd - fFogDistance) / (fogEnd - fogStart);\r\n\t}\r\n\telse if (FOGMODE_EXP == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fogDensity);\r\n\t}\r\n\telse if (FOGMODE_EXP2 == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fFogDistance * fogDensity * fogDensity);\r\n\t}\r\n\r\n\treturn clamp(fogCoeff, 0.0, 1.0);\r\n}\r\n#endif\r\n\r\n// Light Computing\r\nmat3 computeLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 diffuseColor, vec3 specularColor) {\r\n\tmat3 result;\r\n\r\n\tvec3 lightVectorW;\r\n\tif (lightData.w == 0.)\r\n\t{\r\n\t\tlightVectorW = normalize(lightData.xyz - vPositionW);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tlightVectorW = normalize(-lightData.xyz);\r\n\t}\r\n\r\n\t// diffuse\r\n\tfloat ndl = max(0., dot(vNormal, lightVectorW));\r\n\r\n\tresult[0] = ndl * diffuseColor.rgb;\r\n\r\n#ifdef SPECULARTERM\r\n\t// Specular\r\n\tvec3 angleW = normalize(viewDirectionW + lightVectorW);\r\n\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\tspecComp = max(0., pow(specComp, max(1.0, vSpecularColor.a)));\r\n\tresult[1] = specComp * specularColor;\r\n#else\r\n\tresult[1] = vec3(0.);\r\n#endif\r\n\r\n\tresult[2] = vec3(0.);\r\n\r\n\treturn result;\r\n}\r\n\r\nmat3 computeSpotLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 lightDirection, vec4 diffuseColor, vec3 specularColor) {\r\n\tmat3 result;\r\n\r\n\tvec3 lightVectorW = normalize(lightData.xyz - vPositionW);\r\n\r\n\t// diffuse\r\n\tfloat cosAngle = max(0., dot(-lightDirection.xyz, lightVectorW));\r\n\tfloat spotAtten = 0.0;\r\n\r\n\tif (cosAngle >= lightDirection.w)\r\n\t{\r\n\t\tcosAngle = max(0., pow(cosAngle, lightData.w));\r\n\t\tspotAtten = max(0., (cosAngle - lightDirection.w) / (1. - cosAngle));\r\n\r\n\t\t// Diffuse\r\n\t\tfloat ndl = max(0., dot(vNormal, -lightDirection.xyz));\r\n\t\tresult[0] = ndl * spotAtten * diffuseColor.rgb;\r\n\r\n#ifdef SPECULARTERM\r\n\t\t// Specular\r\n\t\tvec3 angleW = normalize(viewDirectionW - lightDirection.xyz);\r\n\t\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\t\tspecComp = pow(specComp, vSpecularColor.a);\r\n\t\tresult[1] = specComp * specularColor * spotAtten;\r\n#else\r\n\t\tresult[1] = vec3(0.);\r\n#endif\r\n\t\tresult[2] = vec3(0.);\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tresult[0] = vec3(0.);\r\n\tresult[1] = vec3(0.);\r\n\tresult[2] = vec3(0.);\r\n\r\n\treturn result;\r\n}\r\n\r\nmat3 computeHemisphericLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 diffuseColor, vec3 specularColor, vec3 groundColor) {\r\n\tmat3 result;\r\n\r\n\t// Diffuse\r\n\tfloat ndl = dot(vNormal, lightData.xyz) * 0.5 + 0.5;\r\n\tresult[0] = mix(groundColor, diffuseColor.rgb, ndl);\r\n\r\n#ifdef SPECULARTERM\r\n\t// Specular\r\n\tvec3 angleW = normalize(viewDirectionW + lightData.xyz);\r\n\tfloat specComp = max(0., dot(vNormal, angleW));\r\n\tspecComp = pow(specComp, vSpecularColor.a);\r\n\tresult[1] = specComp * specularColor;\r\n#else\r\n\tresult[1] = vec3(0.);\r\n#endif\r\n\r\n\tresult[2] = vec3(0.);\r\n\r\n\treturn result;\r\n}\r\n\r\nvoid main(void) {\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tif (fClipDistance > 0.0)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tvec3 viewDirectionW = normalize(vEyePosition - vPositionW);\r\n\r\n\t// Base color\r\n\tvec4 baseColor = vec4(1., 1., 1., 1.);\r\n\tvec3 diffuseColor = vDiffuseColor.rgb;\r\n\r\n#ifdef DIFFUSE\r\n\tbaseColor = texture2D(diffuseSampler, vDiffuseUV);\r\n\r\n#ifdef ALPHATEST\r\n\tif (baseColor.a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tbaseColor.rgb *= vDiffuseInfos.y;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\n\tbaseColor.rgb *= vColor.rgb;\r\n#endif\r\n\r\n\t// Bump\r\n\tvec3 normalW = normalize(vNormalW);\r\n\r\n\t// Ambient color\r\n\tvec3 baseAmbientColor = vec3(1., 1., 1.);\r\n\r\n#ifdef AMBIENT\r\n\tbaseAmbientColor = texture2D(ambientSampler, vAmbientUV).rgb * vAmbientInfos.y;\r\n#endif\r\n\r\n\t// Lighting\r\n\tvec3 diffuseBase = vec3(0., 0., 0.);\r\n#ifdef SPECULARTERM\r\n\tvec3 specularBase = vec3(0., 0., 0.);\r\n#endif\r\n\tfloat shadow = 1.;\r\n\r\n#ifdef LIGHT0\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular0 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT0\r\n\tmat3 info = computeSpotLighting(viewDirectionW, normalW, vLightData0, vLightDirection0, vLightDiffuse0, vLightSpecular0);\r\n#endif\r\n#ifdef HEMILIGHT0\r\n\tmat3 info = computeHemisphericLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0, vLightSpecular0, vLightGround0);\r\n#endif\r\n#if defined(POINTLIGHT0) || defined(DIRLIGHT0)\r\n\tmat3 info = computeLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0, vLightSpecular0);\r\n#endif\r\n#ifdef SHADOW0\r\n#ifdef SHADOWVSM0\r\n\tshadow = computeShadowWithVSM(vPositionFromLight0, shadowSampler0, shadowsInfo0.z, shadowsInfo0.x);\r\n#else\r\n#if defined(POINTLIGHT0)\r\n\tshadow = computeShadowCube(vLightData0.xyz, shadowSampler0, shadowsInfo0.x, shadowsInfo0.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight0, shadowSampler0, shadowsInfo0.x, shadowsInfo0.z);\r\n#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info[0] * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info[1] * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular1 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT1\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData1, vLightDirection1, vLightDiffuse1, vLightSpecular1);\r\n#endif\r\n#ifdef HEMILIGHT1\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1, vLightSpecular1, vLightGround1);\r\n#endif\r\n#if defined(POINTLIGHT1) || defined(DIRLIGHT1)\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1, vLightSpecular1);\r\n#endif\r\n#ifdef SHADOW1\r\n#ifdef SHADOWVSM1\r\n\tshadow = computeShadowWithVSM(vPositionFromLight1, shadowSampler1, shadowsInfo1.z, shadowsInfo1.x);\r\n#else\r\n#if defined(POINTLIGHT1)\r\n\tshadow = computeShadowCube(vLightData1.xyz, shadowSampler1, shadowsInfo1.x, shadowsInfo1.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight1, shadowSampler1, shadowsInfo1.x, shadowsInfo1.z);\r\n#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info[0] * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info[1] * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular2 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT2\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData2, vLightDirection2, vLightDiffuse2, vLightSpecular2);\r\n#endif\r\n#ifdef HEMILIGHT2\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2, vLightSpecular2, vLightGround2);\r\n#endif\r\n#if defined(POINTLIGHT2) || defined(DIRLIGHT2)\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2, vLightSpecular2);\r\n#endif\r\n#ifdef SHADOW2\r\n#ifdef SHADOWVSM2\r\n\tshadow = computeShadowWithVSM(vPositionFromLight2, shadowSampler2, shadowsInfo2.z, shadowsInfo2.x);\r\n#else\r\n#if defined(POINTLIGHT2)\r\n\tshadow = computeShadowCube(vLightData2.xyz, shadowSampler2, shadowsInfo2.x, shadowsInfo2.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight2, shadowSampler2, shadowsInfo2.x, shadowsInfo2.z);\r\n#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info[0] * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info[1] * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\n#ifndef SPECULARTERM\r\n\tvec3 vLightSpecular3 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT3\r\n\tinfo = computeSpotLighting(viewDirectionW, normalW, vLightData3, vLightDirection3, vLightDiffuse3, vLightSpecular3);\r\n#endif\r\n#ifdef HEMILIGHT3\r\n\tinfo = computeHemisphericLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3, vLightSpecular3, vLightGround3);\r\n#endif\r\n#if defined(POINTLIGHT3) || defined(DIRLIGHT3)\r\n\tinfo = computeLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3, vLightSpecular3);\r\n#endif\r\n#ifdef SHADOW3\r\n#ifdef SHADOWVSM3\r\n\tshadow = computeShadowWithVSM(vPositionFromLight3, shadowSampler3, shadowsInfo3.z, shadowsInfo3.x);\r\n#else\r\n#if defined(POINTLIGHT3)\r\n\tshadow = computeShadowCube(vLightData3.xyz, shadowSampler3, shadowsInfo3.x, shadowsInfo3.z);\r\n#else\r\n\tshadow = computeShadow(vPositionFromLight3, shadowSampler3, shadowsInfo3.x, shadowsInfo3.z);\r\n#endif\r\n#endif\r\n#else\r\n\tshadow = 1.;\r\n#endif\r\n\tdiffuseBase += info[0] * shadow;\r\n#ifdef SPECULARTERM\r\n\tspecularBase += info[1] * shadow;\r\n#endif\r\n#endif\r\n\r\n\t// Reflection\r\n\tvec3 reflectionColor = vec3(0., 0., 0.);\r\n\r\n#ifdef REFLECTION\r\n#ifdef REFLECTIONMAP_3D\r\n\t\treflectionColor = textureCube(reflectionCubeSampler, vReflectionUVW).rgb * vReflectionInfos.x;\r\n#else\r\n\t\tvec2 coords = vReflectionUVW.xy;\r\n\r\n#ifdef REFLECTIONMAP_PROJECTION\r\n\t\tcoords /= vReflectionUVW.z;\r\n#endif\r\n\r\n\t\tcoords.y = 1.0 - coords.y;\r\n\r\n\t\treflectionColor = texture2D(reflection2DSampler, coords).rgb * vReflectionInfos.x;\r\n#endif\r\n\r\n#ifdef REFLECTIONFRESNEL\r\n\tfloat reflectionFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, reflectionRightColor.a, reflectionLeftColor.a);\r\n\r\n\treflectionColor *= reflectionLeftColor.rgb * (1.0 - reflectionFresnelTerm) + reflectionFresnelTerm * reflectionRightColor.rgb;\r\n#endif\r\n#endif\r\n\r\n\t// Alpha\r\n\tfloat alpha = vDiffuseColor.a;\r\n\r\n#ifdef OPACITY\r\n\tvec4 opacityMap = texture2D(opacitySampler, vOpacityUV);\r\n#ifdef OPACITYRGB\r\n\topacityMap.rgb = opacityMap.rgb * vec3(0.3, 0.59, 0.11);\r\n\talpha *= (opacityMap.x + opacityMap.y + opacityMap.z)* vOpacityInfos.y;\r\n#else\r\n\talpha *= opacityMap.a * vOpacityInfos.y;\r\n#endif\r\n#endif\r\n\r\n#ifdef VERTEXALPHA\r\n\talpha *= vColor.a;\r\n#endif\r\n\r\n#ifdef OPACITYFRESNEL\r\n\tfloat opacityFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, opacityParts.z, opacityParts.w);\r\n\r\n\talpha += opacityParts.x * (1.0 - opacityFresnelTerm) + opacityFresnelTerm * opacityParts.y;\r\n#endif\r\n\r\n\t// Emissive\r\n\tvec3 emissiveColor = vEmissiveColor;\r\n#ifdef EMISSIVE\r\n\temissiveColor += texture2D(emissiveSampler, vEmissiveUV).rgb * vEmissiveInfos.y;\r\n#endif\r\n\r\n#ifdef EMISSIVEFRESNEL\r\n\tfloat emissiveFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, emissiveRightColor.a, emissiveLeftColor.a);\r\n\r\n\temissiveColor *= emissiveLeftColor.rgb * (1.0 - emissiveFresnelTerm) + emissiveFresnelTerm * emissiveRightColor.rgb;\r\n#endif\r\n\r\n\t// Specular map\r\n#ifdef SPECULARTERM\r\n\tvec3 specularColor = vSpecularColor.rgb;\r\n#ifdef SPECULAR\r\n\tspecularColor = texture2D(specularSampler, vSpecularUV).rgb * vSpecularInfos.y;\r\n#endif\r\n#endif\r\n\r\n\t// Fresnel\r\n#ifdef DIFFUSEFRESNEL\r\n\tfloat diffuseFresnelTerm = computeFresnelTerm(viewDirectionW, normalW, diffuseRightColor.a, diffuseLeftColor.a);\r\n\r\n\tdiffuseBase *= diffuseLeftColor.rgb * (1.0 - diffuseFresnelTerm) + diffuseFresnelTerm * diffuseRightColor.rgb;\r\n#endif\r\n\r\n\t// Composition\r\n\tvec3 finalDiffuse = clamp(diffuseBase * diffuseColor + emissiveColor + vAmbientColor, 0.0, 1.0) * baseColor.rgb;\r\n#ifdef SPECULARTERM\r\n\tvec3 finalSpecular = specularBase * specularColor;\r\n#else\r\n\tvec3 finalSpecular = vec3(0.0);\r\n#endif\r\n\r\n\tvec4 color = vec4(finalDiffuse * baseAmbientColor + finalSpecular + reflectionColor, alpha);\r\n\r\n#ifdef FOG\r\n\tfloat fog = CalcFogFactor();\r\n\tcolor.rgb = fog * color.rgb + (1.0 - fog) * vFogColor;\r\n#endif\r\n\r\n\tgl_FragColor = color;\r\n}";
	if(__map_reserved["legacydefault.vertex"] != null) _g.setReserved("legacydefault.vertex","precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#ifdef VERTEXCOLOR\r\nattribute vec4 color;\r\n#endif\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\r\n\t// having bone influencers implies you have bones\r\n\tuniform mat4 mBones[BonesPerMesh];\r\n\r\n\tattribute vec4 matricesIndices;\r\n\tattribute vec4 matricesWeights;\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tattribute vec4 matricesIndicesExtra;\r\n\t\tattribute vec4 matricesWeightsExtra;\r\n\t#endif\r\n#endif\r\n\r\n// Uniforms\r\nuniform mat4 world;\r\nuniform mat4 view;\r\nuniform mat4 viewProjection;\r\n\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform mat4 diffuseMatrix;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#ifdef AMBIENT\r\nvarying vec2 vAmbientUV;\r\nuniform mat4 ambientMatrix;\r\nuniform vec2 vAmbientInfos;\r\n#endif\r\n\r\n#ifdef OPACITY\r\nvarying vec2 vOpacityUV;\r\nuniform mat4 opacityMatrix;\r\nuniform vec2 vOpacityInfos;\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\nvarying vec2 vEmissiveUV;\r\nuniform vec2 vEmissiveInfos;\r\nuniform mat4 emissiveMatrix;\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\nvarying vec2 vSpecularUV;\r\nuniform vec2 vSpecularInfos;\r\nuniform mat4 specularMatrix;\r\n#endif\r\n\r\n#ifdef BUMP\r\nvarying vec2 vBumpUV;\r\nuniform vec2 vBumpInfos;\r\nuniform mat4 bumpMatrix;\r\n#endif\r\n\r\n// Output\r\nvarying vec3 vPositionW;\r\nvarying vec3 vNormalW;\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nuniform vec4 vClipPlane;\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n#ifdef FOG\r\nvarying float fFogDistance;\r\n#endif\r\n\r\n#ifdef SHADOWS\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\nuniform mat4 lightMatrix0;\r\nvarying vec4 vPositionFromLight0;\r\n#endif\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\nuniform mat4 lightMatrix1;\r\nvarying vec4 vPositionFromLight1;\r\n#endif\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\nuniform mat4 lightMatrix2;\r\nvarying vec4 vPositionFromLight2;\r\n#endif\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\nuniform mat4 lightMatrix3;\r\nvarying vec4 vPositionFromLight3;\r\n#endif\r\n#endif\r\n\r\n#ifdef REFLECTION\r\nuniform vec3 vEyePosition;\r\nvarying vec3 vReflectionUVW;\r\nuniform mat4 reflectionMatrix;\r\n\r\nvec3 computeReflectionCoords(vec4 worldPos, vec3 worldNormal)\r\n{\r\n#ifdef REFLECTIONMAP_SPHERICAL\r\n\tvec3 coords = vec3(view * vec4(worldNormal, 0.0));\r\n\r\n\treturn vec3(reflectionMatrix * vec4(coords, 1.0));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_PLANAR\r\n\tvec3 viewDir = worldPos.xyz - vEyePosition;\r\n\tvec3 coords = normalize(reflect(viewDir, worldNormal));\r\n\r\n\treturn vec3(reflectionMatrix * vec4(coords, 1));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_CUBIC\r\n\tvec3 viewDir = worldPos.xyz - vEyePosition;\r\n\tvec3 coords = reflect(viewDir, worldNormal);\r\n#ifdef INVERTCUBICMAP\r\n\tcoords.y = 1.0 - coords.y;\r\n#endif\r\n\treturn vec3(reflectionMatrix * vec4(coords, 0));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_PROJECTION\r\n\treturn vec3(reflectionMatrix * (view * worldPos));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_SKYBOX\r\n\treturn position;\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_EXPLICIT\r\n\treturn vec3(0, 0, 0);\r\n#endif\r\n}\r\n#endif\r\n\r\nvoid main(void) {\r\n\tmat4 finalWorld = world;\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tmat4 influence;\r\n\tinfluence = mBones[int(matricesIndices[0])] * matricesWeights[0];\r\n\r\n\t#if NUM_BONE_INFLUENCERS > 1\r\n\t\tinfluence += mBones[int(matricesIndices[1])] * matricesWeights[1];\r\n\t#endif \r\n\t#if NUM_BONE_INFLUENCERS > 2\r\n\t\tinfluence += mBones[int(matricesIndices[2])] * matricesWeights[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 3\r\n\t\tinfluence += mBones[int(matricesIndices[3])] * matricesWeights[3];\r\n\t#endif\t\r\n\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[0])] * matricesWeightsExtra[0];\r\n\t#endif\r\n\t#if NUM_BONE_INFLUENCERS > 5\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[1])] * matricesWeightsExtra[1];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 6\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[2])] * matricesWeightsExtra[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 7\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[3])] * matricesWeightsExtra[3];\r\n\t#endif\t\r\n\r\n\tfinalWorld = finalWorld * influence;\r\n#endif\r\n\tgl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n\r\n\tvec4 worldPos = finalWorld * vec4(position, 1.0);\r\n\tvPositionW = vec3(worldPos);\r\n\tvNormalW = normalize(vec3(finalWorld * vec4(normal, 0.0)));\r\n\r\n\t// Texture coordinates\r\n#ifndef UV1\r\n\tvec2 uv = vec2(0., 0.);\r\n#endif\r\n#ifndef UV2\r\n\tvec2 uv2 = vec2(0., 0.);\r\n#endif\r\n\r\n#ifdef DIFFUSE\r\n\tif (vDiffuseInfos.x == 0.)\r\n\t{\r\n\t\tvDiffuseUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvDiffuseUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef AMBIENT\r\n\tif (vAmbientInfos.x == 0.)\r\n\t{\r\n\t\tvAmbientUV = vec2(ambientMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvAmbientUV = vec2(ambientMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef OPACITY\r\n\tif (vOpacityInfos.x == 0.)\r\n\t{\r\n\t\tvOpacityUV = vec2(opacityMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvOpacityUV = vec2(opacityMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\t\r\n#ifdef REFLECTION\r\n\tvReflectionUVW = computeReflectionCoords(vec4(vPositionW, 1.0), vNormalW);\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\n\tif (vEmissiveInfos.x == 0.)\r\n\t{\r\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\n\tif (vSpecularInfos.x == 0.)\r\n\t{\r\n\t\tvSpecularUV = vec2(specularMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvSpecularUV = vec2(specularMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef BUMP\r\n\tif (vBumpInfos.x == 0.)\r\n\t{\r\n\t\tvBumpUV = vec2(bumpMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvBumpUV = vec2(bumpMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tfClipDistance = dot(worldPos, vClipPlane);\r\n#endif\r\n\r\n\t// Fog\r\n#ifdef FOG\r\n\tfFogDistance = (view * worldPos).z;\r\n#endif\r\n\r\n\t// Shadows\r\n#ifdef SHADOWS\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\n\tvPositionFromLight0 = lightMatrix0 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\n\tvPositionFromLight1 = lightMatrix1 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\n\tvPositionFromLight2 = lightMatrix2 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\n\tvPositionFromLight3 = lightMatrix3 * worldPos;\r\n#endif\r\n#endif\r\n\r\n\t// Vertex color\r\n#ifdef VERTEXCOLOR\r\n\tvColor = color;\r\n#endif\r\n}"); else _g.h["legacydefault.vertex"] = "precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#ifdef VERTEXCOLOR\r\nattribute vec4 color;\r\n#endif\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\r\n\t// having bone influencers implies you have bones\r\n\tuniform mat4 mBones[BonesPerMesh];\r\n\r\n\tattribute vec4 matricesIndices;\r\n\tattribute vec4 matricesWeights;\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tattribute vec4 matricesIndicesExtra;\r\n\t\tattribute vec4 matricesWeightsExtra;\r\n\t#endif\r\n#endif\r\n\r\n// Uniforms\r\nuniform mat4 world;\r\nuniform mat4 view;\r\nuniform mat4 viewProjection;\r\n\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform mat4 diffuseMatrix;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#ifdef AMBIENT\r\nvarying vec2 vAmbientUV;\r\nuniform mat4 ambientMatrix;\r\nuniform vec2 vAmbientInfos;\r\n#endif\r\n\r\n#ifdef OPACITY\r\nvarying vec2 vOpacityUV;\r\nuniform mat4 opacityMatrix;\r\nuniform vec2 vOpacityInfos;\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\nvarying vec2 vEmissiveUV;\r\nuniform vec2 vEmissiveInfos;\r\nuniform mat4 emissiveMatrix;\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\nvarying vec2 vSpecularUV;\r\nuniform vec2 vSpecularInfos;\r\nuniform mat4 specularMatrix;\r\n#endif\r\n\r\n#ifdef BUMP\r\nvarying vec2 vBumpUV;\r\nuniform vec2 vBumpInfos;\r\nuniform mat4 bumpMatrix;\r\n#endif\r\n\r\n// Output\r\nvarying vec3 vPositionW;\r\nvarying vec3 vNormalW;\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nuniform vec4 vClipPlane;\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n#ifdef FOG\r\nvarying float fFogDistance;\r\n#endif\r\n\r\n#ifdef SHADOWS\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\nuniform mat4 lightMatrix0;\r\nvarying vec4 vPositionFromLight0;\r\n#endif\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\nuniform mat4 lightMatrix1;\r\nvarying vec4 vPositionFromLight1;\r\n#endif\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\nuniform mat4 lightMatrix2;\r\nvarying vec4 vPositionFromLight2;\r\n#endif\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\nuniform mat4 lightMatrix3;\r\nvarying vec4 vPositionFromLight3;\r\n#endif\r\n#endif\r\n\r\n#ifdef REFLECTION\r\nuniform vec3 vEyePosition;\r\nvarying vec3 vReflectionUVW;\r\nuniform mat4 reflectionMatrix;\r\n\r\nvec3 computeReflectionCoords(vec4 worldPos, vec3 worldNormal)\r\n{\r\n#ifdef REFLECTIONMAP_SPHERICAL\r\n\tvec3 coords = vec3(view * vec4(worldNormal, 0.0));\r\n\r\n\treturn vec3(reflectionMatrix * vec4(coords, 1.0));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_PLANAR\r\n\tvec3 viewDir = worldPos.xyz - vEyePosition;\r\n\tvec3 coords = normalize(reflect(viewDir, worldNormal));\r\n\r\n\treturn vec3(reflectionMatrix * vec4(coords, 1));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_CUBIC\r\n\tvec3 viewDir = worldPos.xyz - vEyePosition;\r\n\tvec3 coords = reflect(viewDir, worldNormal);\r\n#ifdef INVERTCUBICMAP\r\n\tcoords.y = 1.0 - coords.y;\r\n#endif\r\n\treturn vec3(reflectionMatrix * vec4(coords, 0));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_PROJECTION\r\n\treturn vec3(reflectionMatrix * (view * worldPos));\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_SKYBOX\r\n\treturn position;\r\n#endif\r\n\r\n#ifdef REFLECTIONMAP_EXPLICIT\r\n\treturn vec3(0, 0, 0);\r\n#endif\r\n}\r\n#endif\r\n\r\nvoid main(void) {\r\n\tmat4 finalWorld = world;\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tmat4 influence;\r\n\tinfluence = mBones[int(matricesIndices[0])] * matricesWeights[0];\r\n\r\n\t#if NUM_BONE_INFLUENCERS > 1\r\n\t\tinfluence += mBones[int(matricesIndices[1])] * matricesWeights[1];\r\n\t#endif \r\n\t#if NUM_BONE_INFLUENCERS > 2\r\n\t\tinfluence += mBones[int(matricesIndices[2])] * matricesWeights[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 3\r\n\t\tinfluence += mBones[int(matricesIndices[3])] * matricesWeights[3];\r\n\t#endif\t\r\n\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[0])] * matricesWeightsExtra[0];\r\n\t#endif\r\n\t#if NUM_BONE_INFLUENCERS > 5\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[1])] * matricesWeightsExtra[1];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 6\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[2])] * matricesWeightsExtra[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 7\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[3])] * matricesWeightsExtra[3];\r\n\t#endif\t\r\n\r\n\tfinalWorld = finalWorld * influence;\r\n#endif\r\n\tgl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n\r\n\tvec4 worldPos = finalWorld * vec4(position, 1.0);\r\n\tvPositionW = vec3(worldPos);\r\n\tvNormalW = normalize(vec3(finalWorld * vec4(normal, 0.0)));\r\n\r\n\t// Texture coordinates\r\n#ifndef UV1\r\n\tvec2 uv = vec2(0., 0.);\r\n#endif\r\n#ifndef UV2\r\n\tvec2 uv2 = vec2(0., 0.);\r\n#endif\r\n\r\n#ifdef DIFFUSE\r\n\tif (vDiffuseInfos.x == 0.)\r\n\t{\r\n\t\tvDiffuseUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvDiffuseUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef AMBIENT\r\n\tif (vAmbientInfos.x == 0.)\r\n\t{\r\n\t\tvAmbientUV = vec2(ambientMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvAmbientUV = vec2(ambientMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef OPACITY\r\n\tif (vOpacityInfos.x == 0.)\r\n\t{\r\n\t\tvOpacityUV = vec2(opacityMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvOpacityUV = vec2(opacityMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\t\r\n#ifdef REFLECTION\r\n\tvReflectionUVW = computeReflectionCoords(vec4(vPositionW, 1.0), vNormalW);\r\n#endif\r\n\r\n#ifdef EMISSIVE\r\n\tif (vEmissiveInfos.x == 0.)\r\n\t{\r\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvEmissiveUV = vec2(emissiveMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#if defined(SPECULAR) && defined(SPECULARTERM)\r\n\tif (vSpecularInfos.x == 0.)\r\n\t{\r\n\t\tvSpecularUV = vec2(specularMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvSpecularUV = vec2(specularMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n#ifdef BUMP\r\n\tif (vBumpInfos.x == 0.)\r\n\t{\r\n\t\tvBumpUV = vec2(bumpMatrix * vec4(uv, 1.0, 0.0));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvBumpUV = vec2(bumpMatrix * vec4(uv2, 1.0, 0.0));\r\n\t}\r\n#endif\r\n\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tfClipDistance = dot(worldPos, vClipPlane);\r\n#endif\r\n\r\n\t// Fog\r\n#ifdef FOG\r\n\tfFogDistance = (view * worldPos).z;\r\n#endif\r\n\r\n\t// Shadows\r\n#ifdef SHADOWS\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\n\tvPositionFromLight0 = lightMatrix0 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\n\tvPositionFromLight1 = lightMatrix1 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\n\tvPositionFromLight2 = lightMatrix2 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\n\tvPositionFromLight3 = lightMatrix3 * worldPos;\r\n#endif\r\n#endif\r\n\r\n\t// Vertex color\r\n#ifdef VERTEXCOLOR\r\n\tvColor = color;\r\n#endif\r\n}";
	if(__map_reserved["lensFlare.fragment"] != null) _g.setReserved("lensFlare.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Color\r\nuniform vec4 color;\r\n\r\nvoid main(void) {\r\n\tvec4 baseColor = texture2D(textureSampler, vUV);\r\n\r\n\tgl_FragColor = baseColor * color;\r\n}"); else _g.h["lensFlare.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Color\r\nuniform vec4 color;\r\n\r\nvoid main(void) {\r\n\tvec4 baseColor = texture2D(textureSampler, vUV);\r\n\r\n\tgl_FragColor = baseColor * color;\r\n}";
	if(__map_reserved["lensFlare.vertex"] != null) _g.setReserved("lensFlare.vertex","precision highp float;\r\n\r\n// Attributes\r\nattribute vec2 position;\r\n\r\n// Uniforms\r\nuniform mat4 viewportMatrix;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\n\r\nconst vec2 madd = vec2(0.5, 0.5);\r\n\r\nvoid main(void) {\t\r\n\r\n\tvUV = position * madd + madd;\r\n\tgl_Position = viewportMatrix * vec4(position, 0.0, 1.0);\r\n}"); else _g.h["lensFlare.vertex"] = "precision highp float;\r\n\r\n// Attributes\r\nattribute vec2 position;\r\n\r\n// Uniforms\r\nuniform mat4 viewportMatrix;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\n\r\nconst vec2 madd = vec2(0.5, 0.5);\r\n\r\nvoid main(void) {\t\r\n\r\n\tvUV = position * madd + madd;\r\n\tgl_Position = viewportMatrix * vec4(position, 0.0, 1.0);\r\n}";
	if(__map_reserved["lensHighlights.fragment"] != null) _g.setReserved("lensHighlights.fragment","#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// samplers\r\nuniform sampler2D textureSampler;\t// original color\r\n\r\n// uniforms\r\nuniform float gain;\r\nuniform float threshold;\r\nuniform bool pentagon;\r\nuniform float screen_width;\r\nuniform float screen_height;\r\n\r\n// varyings\r\nvarying vec2 vUV;\r\n\r\n// apply luminance filter\r\nvec4 highlightColor(vec4 color) {\r\n\tvec4 highlight = color;\r\n\tfloat luminance = dot(highlight.rgb, vec3(0.2125, 0.7154, 0.0721));\r\n\tfloat lum_threshold;\r\n\tif (threshold > 1.0) { lum_threshold = 0.94 + 0.01 * threshold; }\r\n\telse { lum_threshold = 0.5 + 0.44 * threshold; }\r\n\r\n\tluminance = clamp((luminance - lum_threshold) * (1.0 / (1.0 - lum_threshold)), 0.0, 1.0);\r\n\r\n\thighlight *= luminance * gain;\r\n\thighlight.a = 1.0;\r\n\r\n\treturn highlight;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tvec4 original = texture2D(textureSampler, vUV);\r\n\r\n\t// quick exit if no highlight computing\r\n\tif (gain == -1.0) {\r\n\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n\t\treturn;\r\n\t}\r\n\r\n\tfloat w = 2.0 / screen_width;\r\n\tfloat h = 2.0 / screen_height;\r\n\r\n\tfloat weight = 1.0;\r\n\r\n\t// compute blurred color\r\n\tvec4 blurred = vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n\tif (pentagon) {\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.84*w, 0.43*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.48*w, -1.29*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.61*w, 1.51*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.55*w, -0.74*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.71*w, -0.52*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.94*w, 1.59*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.40*w, -1.87*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.62*w, 1.16*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.09*w, 0.25*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.46*w, -1.71*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.08*w, 2.42*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.85*w, -1.89*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.89*w, 0.16*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.29*w, 1.88*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.40*w, -2.81*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.54*w, 2.26*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.60*w, -0.61*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.31*w, -1.30*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.83*w, 2.53*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.12*w, -2.48*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.60*w, 1.11*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.82*w, 0.99*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.50*w, -2.81*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.85*w, 3.33*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.94*w, -1.92*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.27*w, -0.53*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.95*w, 2.48*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.23*w, -3.04*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.17*w, 2.05*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.97*w, -0.04*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.25*w, -2.00*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.31*w, 3.08*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.94*w, -2.59*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.37*w, 0.64*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-3.13*w, 1.93*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.03*w, -3.65*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.60*w, 3.17*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-3.14*w, -1.19*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.00*w, -1.19*h)));\r\n\t}\r\n\telse {\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.85*w, 0.36*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.52*w, -1.14*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.46*w, 1.42*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.46*w, -0.83*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.79*w, -0.42*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.11*w, 1.62*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.29*w, -2.07*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.69*w, 1.39*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.28*w, 0.12*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.65*w, -1.69*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.08*w, 2.44*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.63*w, -1.90*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.55*w, 0.31*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.13*w, 1.52*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.56*w, -2.61*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.38*w, 2.34*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.64*w, -0.81*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.53*w, -1.21*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.06*w, 2.63*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.00*w, -2.69*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.59*w, 1.32*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.82*w, 0.78*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.57*w, -2.50*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.54*w, 2.93*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.39*w, -1.81*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.01*w, -0.28*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.04*w, 2.25*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.02*w, -3.05*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.09*w, 2.25*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-3.07*w, -0.25*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.44*w, -1.90*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.52*w, 3.05*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.68*w, -2.61*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.01*w, 0.79*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.76*w, 1.46*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.05*w, -2.94*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.21*w, 2.88*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.84*w, -1.30*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.98*w, -0.96*h)));\r\n\t}\r\n\r\n\tblurred /= 39.0;\r\n\r\n\tgl_FragColor = blurred;\r\n\r\n\t//if(vUV.x > 0.5) { gl_FragColor.rgb *= 0.0; }\r\n}"); else _g.h["lensHighlights.fragment"] = "#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\n// samplers\r\nuniform sampler2D textureSampler;\t// original color\r\n\r\n// uniforms\r\nuniform float gain;\r\nuniform float threshold;\r\nuniform bool pentagon;\r\nuniform float screen_width;\r\nuniform float screen_height;\r\n\r\n// varyings\r\nvarying vec2 vUV;\r\n\r\n// apply luminance filter\r\nvec4 highlightColor(vec4 color) {\r\n\tvec4 highlight = color;\r\n\tfloat luminance = dot(highlight.rgb, vec3(0.2125, 0.7154, 0.0721));\r\n\tfloat lum_threshold;\r\n\tif (threshold > 1.0) { lum_threshold = 0.94 + 0.01 * threshold; }\r\n\telse { lum_threshold = 0.5 + 0.44 * threshold; }\r\n\r\n\tluminance = clamp((luminance - lum_threshold) * (1.0 / (1.0 - lum_threshold)), 0.0, 1.0);\r\n\r\n\thighlight *= luminance * gain;\r\n\thighlight.a = 1.0;\r\n\r\n\treturn highlight;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tvec4 original = texture2D(textureSampler, vUV);\r\n\r\n\t// quick exit if no highlight computing\r\n\tif (gain == -1.0) {\r\n\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n\t\treturn;\r\n\t}\r\n\r\n\tfloat w = 2.0 / screen_width;\r\n\tfloat h = 2.0 / screen_height;\r\n\r\n\tfloat weight = 1.0;\r\n\r\n\t// compute blurred color\r\n\tvec4 blurred = vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n\tif (pentagon) {\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.84*w, 0.43*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.48*w, -1.29*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.61*w, 1.51*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.55*w, -0.74*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.71*w, -0.52*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.94*w, 1.59*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.40*w, -1.87*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.62*w, 1.16*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.09*w, 0.25*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.46*w, -1.71*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.08*w, 2.42*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.85*w, -1.89*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.89*w, 0.16*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.29*w, 1.88*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.40*w, -2.81*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.54*w, 2.26*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.60*w, -0.61*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.31*w, -1.30*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.83*w, 2.53*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.12*w, -2.48*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.60*w, 1.11*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.82*w, 0.99*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.50*w, -2.81*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.85*w, 3.33*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.94*w, -1.92*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.27*w, -0.53*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.95*w, 2.48*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.23*w, -3.04*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.17*w, 2.05*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.97*w, -0.04*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.25*w, -2.00*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.31*w, 3.08*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.94*w, -2.59*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.37*w, 0.64*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-3.13*w, 1.93*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.03*w, -3.65*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.60*w, 3.17*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-3.14*w, -1.19*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.00*w, -1.19*h)));\r\n\t}\r\n\telse {\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.85*w, 0.36*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.52*w, -1.14*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.46*w, 1.42*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.46*w, -0.83*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.79*w, -0.42*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.11*w, 1.62*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.29*w, -2.07*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.69*w, 1.39*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.28*w, 0.12*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.65*w, -1.69*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.08*w, 2.44*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.63*w, -1.90*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.55*w, 0.31*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.13*w, 1.52*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.56*w, -2.61*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.38*w, 2.34*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.64*w, -0.81*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.53*w, -1.21*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.06*w, 2.63*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.00*w, -2.69*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.59*w, 1.32*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.82*w, 0.78*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.57*w, -2.50*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(0.54*w, 2.93*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.39*w, -1.81*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.01*w, -0.28*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.04*w, 2.25*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.02*w, -3.05*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.09*w, 2.25*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-3.07*w, -0.25*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.44*w, -1.90*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-0.52*w, 3.05*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-1.68*w, -2.61*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(3.01*w, 0.79*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.76*w, 1.46*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.05*w, -2.94*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(1.21*w, 2.88*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(-2.84*w, -1.30*h)));\r\n\t\tblurred += highlightColor(texture2D(textureSampler, vUV + vec2(2.98*w, -0.96*h)));\r\n\t}\r\n\r\n\tblurred /= 39.0;\r\n\r\n\tgl_FragColor = blurred;\r\n\r\n\t//if(vUV.x > 0.5) { gl_FragColor.rgb *= 0.0; }\r\n}";
	if(__map_reserved["line.fragment"] != null) _g.setReserved("line.fragment","precision highp float;\r\n\r\nuniform vec4 color;\r\n\r\nvoid main(void) {\r\n\tgl_FragColor = color;\r\n}"); else _g.h["line.fragment"] = "precision highp float;\r\n\r\nuniform vec4 color;\r\n\r\nvoid main(void) {\r\n\tgl_FragColor = color;\r\n}";
	if(__map_reserved["line.vertex"] != null) _g.setReserved("line.vertex","precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\nattribute vec4 normal;\r\n\r\n// Uniforms\r\nuniform mat4 worldViewProjection;\r\n\r\nuniform float width;\r\nuniform float aspectRatio;\r\n\r\nvoid main(void) {\r\n\tvec4 viewPosition = worldViewProjection * vec4(position, 1.0);\r\n\tvec4 viewPositionNext = worldViewProjection * vec4(normal.xyz, 1.0);\r\n\r\n\tvec2 currentScreen = viewPosition.xy / viewPosition.w;\r\n\tvec2 nextScreen = viewPositionNext.xy / viewPositionNext.w;\r\n\r\n\tcurrentScreen.x *= aspectRatio;\r\n\tnextScreen.x *= aspectRatio;\r\n\r\n\tvec2 dir = normalize(nextScreen - currentScreen);\r\n\tvec2 normalDir = vec2(-dir.y, dir.x);\r\n\r\n\tnormalDir *= width / 2.0;\r\n\tnormalDir.x /= aspectRatio;\r\n\r\n\tvec4 offset = vec4(normalDir * normal.w, 0.0, 0.0);\r\n\tgl_Position = viewPosition + offset;\r\n}"); else _g.h["line.vertex"] = "precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\nattribute vec4 normal;\r\n\r\n// Uniforms\r\nuniform mat4 worldViewProjection;\r\n\r\nuniform float width;\r\nuniform float aspectRatio;\r\n\r\nvoid main(void) {\r\n\tvec4 viewPosition = worldViewProjection * vec4(position, 1.0);\r\n\tvec4 viewPositionNext = worldViewProjection * vec4(normal.xyz, 1.0);\r\n\r\n\tvec2 currentScreen = viewPosition.xy / viewPosition.w;\r\n\tvec2 nextScreen = viewPositionNext.xy / viewPositionNext.w;\r\n\r\n\tcurrentScreen.x *= aspectRatio;\r\n\tnextScreen.x *= aspectRatio;\r\n\r\n\tvec2 dir = normalize(nextScreen - currentScreen);\r\n\tvec2 normalDir = vec2(-dir.y, dir.x);\r\n\r\n\tnormalDir *= width / 2.0;\r\n\tnormalDir.x /= aspectRatio;\r\n\r\n\tvec4 offset = vec4(normalDir * normal.w, 0.0, 0.0);\r\n\tgl_Position = viewPosition + offset;\r\n}";
	if(__map_reserved["marbletexture.fragment"] != null) _g.setReserved("marbletexture.fragment","precision highp float;\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform float numberOfTilesHeight;\r\nuniform float numberOfTilesWidth;\r\nuniform float amplitude;\r\nuniform vec3 brickColor;\r\nuniform vec3 jointColor;\r\n\r\nconst vec3 tileSize = vec3(1.1, 1.0, 1.1);\r\nconst vec3 tilePct = vec3(0.98, 1.0, 0.98);\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat turbulence(vec2 P)\r\n{\r\n\tfloat val = 0.0;\r\n\tfloat freq = 1.0;\r\n\tfor (int i = 0; i < 4; i++)\r\n\t{\r\n\t\tval += abs(noise(P*freq) / freq);\r\n\t\tfreq *= 2.07;\r\n\t}\r\n\treturn val;\r\n}\r\n\r\nfloat round(float number){\r\n\treturn sign(number)*floor(abs(number) + 0.5);\r\n}\r\n\r\nvec3 marble_color(float x)\r\n{\r\n\tvec3 col;\r\n\tx = 0.5*(x + 1.);\r\n\tx = sqrt(x);             \r\n\tx = sqrt(x);\r\n\tx = sqrt(x);\r\n\tcol = vec3(.2 + .75*x);  \r\n\tcol.b *= 0.95;           \r\n\treturn col;\r\n}\r\n\r\nvoid main()\r\n{\r\n\tfloat brickW = 1.0 / numberOfTilesWidth;\r\n\tfloat brickH = 1.0 / numberOfTilesHeight;\r\n\tfloat jointWPercentage = 0.01;\r\n\tfloat jointHPercentage = 0.01;\r\n\tvec3 color = brickColor;\r\n\tfloat yi = vUV.y / brickH;\r\n\tfloat nyi = round(yi);\r\n\tfloat xi = vUV.x / brickW;\r\n\r\n\tif (mod(floor(yi), 2.0) == 0.0){\r\n\t\txi = xi - 0.5;\r\n\t}\r\n\r\n\tfloat nxi = round(xi);\r\n\tvec2 brickvUV = vec2((xi - floor(xi)) / brickH, (yi - floor(yi)) / brickW);\r\n\r\n\tif (yi < nyi + jointHPercentage && yi > nyi - jointHPercentage){\r\n\t\tcolor = mix(jointColor, vec3(0.37, 0.25, 0.25), (yi - nyi) / jointHPercentage + 0.2);\r\n\t}\r\n\telse if (xi < nxi + jointWPercentage && xi > nxi - jointWPercentage){\r\n\t\tcolor = mix(jointColor, vec3(0.44, 0.44, 0.44), (xi - nxi) / jointWPercentage + 0.2);\r\n\t}\r\n\telse {\r\n\t\tfloat t = 6.28 * brickvUV.x / (tileSize.x + noise(vec2(vUV)*6.0));\r\n\t\tt += amplitude * turbulence(brickvUV.xy);\r\n\t\tt = sin(t);\r\n\t\tcolor = marble_color(t);\r\n\t}\r\n\r\n\tgl_FragColor = vec4(color, 0.0);\r\n}"); else _g.h["marbletexture.fragment"] = "precision highp float;\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform float numberOfTilesHeight;\r\nuniform float numberOfTilesWidth;\r\nuniform float amplitude;\r\nuniform vec3 brickColor;\r\nuniform vec3 jointColor;\r\n\r\nconst vec3 tileSize = vec3(1.1, 1.0, 1.1);\r\nconst vec3 tilePct = vec3(0.98, 1.0, 0.98);\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat turbulence(vec2 P)\r\n{\r\n\tfloat val = 0.0;\r\n\tfloat freq = 1.0;\r\n\tfor (int i = 0; i < 4; i++)\r\n\t{\r\n\t\tval += abs(noise(P*freq) / freq);\r\n\t\tfreq *= 2.07;\r\n\t}\r\n\treturn val;\r\n}\r\n\r\nfloat round(float number){\r\n\treturn sign(number)*floor(abs(number) + 0.5);\r\n}\r\n\r\nvec3 marble_color(float x)\r\n{\r\n\tvec3 col;\r\n\tx = 0.5*(x + 1.);\r\n\tx = sqrt(x);             \r\n\tx = sqrt(x);\r\n\tx = sqrt(x);\r\n\tcol = vec3(.2 + .75*x);  \r\n\tcol.b *= 0.95;           \r\n\treturn col;\r\n}\r\n\r\nvoid main()\r\n{\r\n\tfloat brickW = 1.0 / numberOfTilesWidth;\r\n\tfloat brickH = 1.0 / numberOfTilesHeight;\r\n\tfloat jointWPercentage = 0.01;\r\n\tfloat jointHPercentage = 0.01;\r\n\tvec3 color = brickColor;\r\n\tfloat yi = vUV.y / brickH;\r\n\tfloat nyi = round(yi);\r\n\tfloat xi = vUV.x / brickW;\r\n\r\n\tif (mod(floor(yi), 2.0) == 0.0){\r\n\t\txi = xi - 0.5;\r\n\t}\r\n\r\n\tfloat nxi = round(xi);\r\n\tvec2 brickvUV = vec2((xi - floor(xi)) / brickH, (yi - floor(yi)) / brickW);\r\n\r\n\tif (yi < nyi + jointHPercentage && yi > nyi - jointHPercentage){\r\n\t\tcolor = mix(jointColor, vec3(0.37, 0.25, 0.25), (yi - nyi) / jointHPercentage + 0.2);\r\n\t}\r\n\telse if (xi < nxi + jointWPercentage && xi > nxi - jointWPercentage){\r\n\t\tcolor = mix(jointColor, vec3(0.44, 0.44, 0.44), (xi - nxi) / jointWPercentage + 0.2);\r\n\t}\r\n\telse {\r\n\t\tfloat t = 6.28 * brickvUV.x / (tileSize.x + noise(vec2(vUV)*6.0));\r\n\t\tt += amplitude * turbulence(brickvUV.xy);\r\n\t\tt = sin(t);\r\n\t\tcolor = marble_color(t);\r\n\t}\r\n\r\n\tgl_FragColor = vec4(color, 0.0);\r\n}";
	if(__map_reserved["outline.fragment"] != null) _g.setReserved("outline.fragment","precision highp float;\r\n\r\nuniform vec4 color;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform sampler2D diffuseSampler;\r\n#endif\r\n\r\nvoid main(void) {\r\n#ifdef ALPHATEST\r\n\tif (texture2D(diffuseSampler, vUV).a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tgl_FragColor = color;\r\n}"); else _g.h["outline.fragment"] = "precision highp float;\r\n\r\nuniform vec4 color;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform sampler2D diffuseSampler;\r\n#endif\r\n\r\nvoid main(void) {\r\n#ifdef ALPHATEST\r\n\tif (texture2D(diffuseSampler, vUV).a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tgl_FragColor = color;\r\n}";
	if(__map_reserved["outline.vertex"] != null) _g.setReserved("outline.vertex","precision highp float;\r\n\r\n// Attribute\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\nuniform mat4 mBones[BonesPerMesh];\r\n\r\nattribute vec4 matricesIndices;\r\nattribute vec4 matricesWeights;\r\n#if NUM_BONE_INFLUENCERS > 4\r\nattribute vec4 matricesIndicesExtra;\r\nattribute vec4 matricesWeightsExtra;\r\n#endif\r\n#endif\r\n\r\n// Uniform\r\nuniform float offset;\r\n\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 viewProjection;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform mat4 diffuseMatrix;\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n\tvec3 offsetPosition = position + normal * offset;\r\n\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tmat4 influence;\r\n\tinfluence = mBones[int(matricesIndices[0])] * matricesWeights[0];\r\n\r\n#if NUM_BONE_INFLUENCERS > 1\r\n\tinfluence += mBones[int(matricesIndices[1])] * matricesWeights[1];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 2\r\n\tinfluence += mBones[int(matricesIndices[2])] * matricesWeights[2];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 3\r\n\tinfluence += mBones[int(matricesIndices[3])] * matricesWeights[3];\r\n#endif\t\r\n\r\n#if NUM_BONE_INFLUENCERS > 4\r\n\tinfluence += mBones[int(matricesIndicesExtra[0])] * matricesWeightsExtra[0];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 5\r\n\tinfluence += mBones[int(matricesIndicesExtra[1])] * matricesWeightsExtra[1];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 6\r\n\tinfluence += mBones[int(matricesIndicesExtra[2])] * matricesWeightsExtra[2];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 7\r\n\tinfluence += mBones[int(matricesIndicesExtra[3])] * matricesWeightsExtra[3];\r\n#endif\t\r\n\r\n\tfinalWorld = finalWorld * influence;\r\n#endif\r\n\tgl_Position = viewProjection * finalWorld * vec4(offsetPosition, 1.0);\r\n\r\n#ifdef ALPHATEST\r\n#ifdef UV1\r\n\tvUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n#endif\r\n#ifdef UV2\r\n\tvUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n#endif\r\n#endif\r\n}\r\n"); else _g.h["outline.vertex"] = "precision highp float;\r\n\r\n// Attribute\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\nuniform mat4 mBones[BonesPerMesh];\r\n\r\nattribute vec4 matricesIndices;\r\nattribute vec4 matricesWeights;\r\n#if NUM_BONE_INFLUENCERS > 4\r\nattribute vec4 matricesIndicesExtra;\r\nattribute vec4 matricesWeightsExtra;\r\n#endif\r\n#endif\r\n\r\n// Uniform\r\nuniform float offset;\r\n\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 viewProjection;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform mat4 diffuseMatrix;\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n\tvec3 offsetPosition = position + normal * offset;\r\n\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tmat4 influence;\r\n\tinfluence = mBones[int(matricesIndices[0])] * matricesWeights[0];\r\n\r\n#if NUM_BONE_INFLUENCERS > 1\r\n\tinfluence += mBones[int(matricesIndices[1])] * matricesWeights[1];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 2\r\n\tinfluence += mBones[int(matricesIndices[2])] * matricesWeights[2];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 3\r\n\tinfluence += mBones[int(matricesIndices[3])] * matricesWeights[3];\r\n#endif\t\r\n\r\n#if NUM_BONE_INFLUENCERS > 4\r\n\tinfluence += mBones[int(matricesIndicesExtra[0])] * matricesWeightsExtra[0];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 5\r\n\tinfluence += mBones[int(matricesIndicesExtra[1])] * matricesWeightsExtra[1];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 6\r\n\tinfluence += mBones[int(matricesIndicesExtra[2])] * matricesWeightsExtra[2];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 7\r\n\tinfluence += mBones[int(matricesIndicesExtra[3])] * matricesWeightsExtra[3];\r\n#endif\t\r\n\r\n\tfinalWorld = finalWorld * influence;\r\n#endif\r\n\tgl_Position = viewProjection * finalWorld * vec4(offsetPosition, 1.0);\r\n\r\n#ifdef ALPHATEST\r\n#ifdef UV1\r\n\tvUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n#endif\r\n#ifdef UV2\r\n\tvUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n#endif\r\n#endif\r\n}\r\n";
	if(__map_reserved["particles.fragment"] != null) _g.setReserved("particles.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nvarying vec4 vColor;\r\nuniform vec4 textureMask;\r\nuniform sampler2D diffuseSampler;\r\n\r\n#ifdef CLIPPLANE\r\nvarying float fClipDistance;\r\n#endif\r\n\r\nvoid main(void) {\r\n#ifdef CLIPPLANE\r\n\tif (fClipDistance > 0.0)\r\n\t\tdiscard;\r\n#endif\r\n\tvec4 baseColor = texture2D(diffuseSampler, vUV);\r\n\r\n\tgl_FragColor = (baseColor * textureMask + (vec4(1., 1., 1., 1.) - textureMask)) * vColor;\r\n}"); else _g.h["particles.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nvarying vec4 vColor;\r\nuniform vec4 textureMask;\r\nuniform sampler2D diffuseSampler;\r\n\r\n#ifdef CLIPPLANE\r\nvarying float fClipDistance;\r\n#endif\r\n\r\nvoid main(void) {\r\n#ifdef CLIPPLANE\r\n\tif (fClipDistance > 0.0)\r\n\t\tdiscard;\r\n#endif\r\n\tvec4 baseColor = texture2D(diffuseSampler, vUV);\r\n\r\n\tgl_FragColor = (baseColor * textureMask + (vec4(1., 1., 1., 1.) - textureMask)) * vColor;\r\n}";
	if(__map_reserved["particles.vertex"] != null) _g.setReserved("particles.vertex","precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\nattribute vec4 color;\r\nattribute vec4 options;\r\n\r\n// Uniforms\r\nuniform mat4 view;\r\nuniform mat4 projection;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\nvarying vec4 vColor;\r\n\r\n#ifdef CLIPPLANE\r\nuniform vec4 vClipPlane;\r\nuniform mat4 invView;\r\nvarying float fClipDistance;\r\n#endif\r\n\r\nvoid main(void) {\t\r\n\tvec3 viewPos = (view * vec4(position, 1.0)).xyz; \r\n\tvec3 cornerPos;\r\n\tfloat size = options.y;\r\n\tfloat angle = options.x;\r\n\tvec2 offset = options.zw;\r\n\r\n\tcornerPos = vec3(offset.x - 0.5, offset.y  - 0.5, 0.) * size;\r\n\r\n\t// Rotate\r\n\tvec3 rotatedCorner;\r\n\trotatedCorner.x = cornerPos.x * cos(angle) - cornerPos.y * sin(angle);\r\n\trotatedCorner.y = cornerPos.x * sin(angle) + cornerPos.y * cos(angle);\r\n\trotatedCorner.z = 0.;\r\n\r\n\t// Position\r\n\tviewPos += rotatedCorner;\r\n\tgl_Position = projection * vec4(viewPos, 1.0);   \r\n\t\r\n\tvColor = color;\r\n\tvUV = offset;\r\n\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tvec4 worldPos = invView * vec4(viewPos, 1.0);\r\n\tfClipDistance = dot(worldPos, vClipPlane);\r\n#endif\r\n}"); else _g.h["particles.vertex"] = "precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\nattribute vec4 color;\r\nattribute vec4 options;\r\n\r\n// Uniforms\r\nuniform mat4 view;\r\nuniform mat4 projection;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\nvarying vec4 vColor;\r\n\r\n#ifdef CLIPPLANE\r\nuniform vec4 vClipPlane;\r\nuniform mat4 invView;\r\nvarying float fClipDistance;\r\n#endif\r\n\r\nvoid main(void) {\t\r\n\tvec3 viewPos = (view * vec4(position, 1.0)).xyz; \r\n\tvec3 cornerPos;\r\n\tfloat size = options.y;\r\n\tfloat angle = options.x;\r\n\tvec2 offset = options.zw;\r\n\r\n\tcornerPos = vec3(offset.x - 0.5, offset.y  - 0.5, 0.) * size;\r\n\r\n\t// Rotate\r\n\tvec3 rotatedCorner;\r\n\trotatedCorner.x = cornerPos.x * cos(angle) - cornerPos.y * sin(angle);\r\n\trotatedCorner.y = cornerPos.x * sin(angle) + cornerPos.y * cos(angle);\r\n\trotatedCorner.z = 0.;\r\n\r\n\t// Position\r\n\tviewPos += rotatedCorner;\r\n\tgl_Position = projection * vec4(viewPos, 1.0);   \r\n\t\r\n\tvColor = color;\r\n\tvUV = offset;\r\n\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tvec4 worldPos = invView * vec4(viewPos, 1.0);\r\n\tfClipDistance = dot(worldPos, vClipPlane);\r\n#endif\r\n}";
	if(__map_reserved["pass.fragment"] != null) _g.setReserved("pass.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\nvoid main(void) \r\n{\r\n\tgl_FragColor = texture2D(textureSampler, vUV);\r\n}"); else _g.h["pass.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\nvoid main(void) \r\n{\r\n\tgl_FragColor = texture2D(textureSampler, vUV);\r\n}";
	if(__map_reserved["pbr.fragment"] != null) _g.setReserved("pbr.fragment","precision highp float;\r\n\r\n// Constants\r\nuniform vec3 vEyePosition;\r\nuniform vec4 vAlbedoColor;\r\n\r\n// Input\r\nvarying vec3 vPositionW;\r\n\r\n#ifdef NORMAL\r\nvarying vec3 vNormalW;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n// Fog\r\n#ifdef FOG\r\n\r\n#define FOGMODE_NONE    0.\r\n#define FOGMODE_EXP     1.\r\n#define FOGMODE_EXP2    2.\r\n#define FOGMODE_LINEAR  3.\r\n#define E 2.71828\r\n\r\nuniform vec4 vFogInfos;\r\nuniform vec3 vFogColor;\r\nvarying float fFogDistance;\r\n\r\nfloat CalcFogFactor()\r\n{\r\n\tfloat fogCoeff = 1.0;\r\n\tfloat fogStart = vFogInfos.y;\r\n\tfloat fogEnd = vFogInfos.z;\r\n\tfloat fogDensity = vFogInfos.w;\r\n\r\n\tif (FOGMODE_LINEAR == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = (fogEnd - fFogDistance) / (fogEnd - fogStart);\r\n\t}\r\n\telse if (FOGMODE_EXP == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fogDensity);\r\n\t}\r\n\telse if (FOGMODE_EXP2 == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fFogDistance * fogDensity * fogDensity);\r\n\t}\r\n\r\n\treturn clamp(fogCoeff, 0.0, 1.0);\r\n}\r\n#endif\r\n\r\nvoid main(void) {\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tif (fClipDistance > 0.0)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tvec3 viewDirectionW = normalize(vEyePosition - vPositionW);\r\n\r\n\t// Base color\r\n\tvec3 baseColor = vAlbedoColor.rgb;\r\n\r\n\t// Alpha\r\n\tfloat alpha = vAlbedoColor.a;\r\n\r\n#ifdef VERTEXCOLOR\r\n\tbaseColor *= vColor.rgb;\r\n#endif\r\n\r\n#ifdef VERTEXALPHA\r\n\talpha *= vColor.a;\r\n#endif\r\n\r\n\t// Composition\r\n    vec4 color = vec4(clamp(baseColor, 0.0, 1.0), alpha);\r\n\r\n#ifdef FOG\r\n\tfloat fog = CalcFogFactor();\r\n\tcolor.rgb = fog * color.rgb + (1.0 - fog) * vFogColor;\r\n#endif\r\n\r\n\tgl_FragColor = color;\r\n}"); else _g.h["pbr.fragment"] = "precision highp float;\r\n\r\n// Constants\r\nuniform vec3 vEyePosition;\r\nuniform vec4 vAlbedoColor;\r\n\r\n// Input\r\nvarying vec3 vPositionW;\r\n\r\n#ifdef NORMAL\r\nvarying vec3 vNormalW;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n// Fog\r\n#ifdef FOG\r\n\r\n#define FOGMODE_NONE    0.\r\n#define FOGMODE_EXP     1.\r\n#define FOGMODE_EXP2    2.\r\n#define FOGMODE_LINEAR  3.\r\n#define E 2.71828\r\n\r\nuniform vec4 vFogInfos;\r\nuniform vec3 vFogColor;\r\nvarying float fFogDistance;\r\n\r\nfloat CalcFogFactor()\r\n{\r\n\tfloat fogCoeff = 1.0;\r\n\tfloat fogStart = vFogInfos.y;\r\n\tfloat fogEnd = vFogInfos.z;\r\n\tfloat fogDensity = vFogInfos.w;\r\n\r\n\tif (FOGMODE_LINEAR == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = (fogEnd - fFogDistance) / (fogEnd - fogStart);\r\n\t}\r\n\telse if (FOGMODE_EXP == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fogDensity);\r\n\t}\r\n\telse if (FOGMODE_EXP2 == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fFogDistance * fogDensity * fogDensity);\r\n\t}\r\n\r\n\treturn clamp(fogCoeff, 0.0, 1.0);\r\n}\r\n#endif\r\n\r\nvoid main(void) {\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tif (fClipDistance > 0.0)\r\n\t\tdiscard;\r\n#endif\r\n\r\n\tvec3 viewDirectionW = normalize(vEyePosition - vPositionW);\r\n\r\n\t// Base color\r\n\tvec3 baseColor = vAlbedoColor.rgb;\r\n\r\n\t// Alpha\r\n\tfloat alpha = vAlbedoColor.a;\r\n\r\n#ifdef VERTEXCOLOR\r\n\tbaseColor *= vColor.rgb;\r\n#endif\r\n\r\n#ifdef VERTEXALPHA\r\n\talpha *= vColor.a;\r\n#endif\r\n\r\n\t// Composition\r\n    vec4 color = vec4(clamp(baseColor, 0.0, 1.0), alpha);\r\n\r\n#ifdef FOG\r\n\tfloat fog = CalcFogFactor();\r\n\tcolor.rgb = fog * color.rgb + (1.0 - fog) * vFogColor;\r\n#endif\r\n\r\n\tgl_FragColor = color;\r\n}";
	if(__map_reserved["pbr.vertex"] != null) _g.setReserved("pbr.vertex","precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\n#ifdef NORMAL\r\nattribute vec3 normal;\r\n#endif\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#ifdef VERTEXCOLOR\r\nattribute vec4 color;\r\n#endif\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\r\n\t// having bone influencers implies you have bones\r\n\tuniform mat4 mBones[BonesPerMesh];\r\n\r\n\tattribute vec4 matricesIndices;\r\n\tattribute vec4 matricesWeights;\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tattribute vec4 matricesIndicesExtra;\r\n\t\tattribute vec4 matricesWeightsExtra;\r\n\t#endif\r\n#endif\r\n\r\n// Uniforms\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 view;\r\nuniform mat4 viewProjection;\r\n\r\n#ifdef POINTSIZE\r\nuniform float pointSize;\r\n#endif\r\n\r\n// Output\r\nvarying vec3 vPositionW;\r\n#ifdef NORMAL\r\nvarying vec3 vNormalW;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nuniform vec4 vClipPlane;\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n#ifdef FOG\r\nvarying float fFogDistance;\r\n#endif\r\n\r\nvoid main(void) {\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tmat4 influence;\r\n\tinfluence = mBones[int(matricesIndices[0])] * matricesWeights[0];\r\n\r\n\t#if NUM_BONE_INFLUENCERS > 1\r\n\t\tinfluence += mBones[int(matricesIndices[1])] * matricesWeights[1];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 2\r\n\t\tinfluence += mBones[int(matricesIndices[2])] * matricesWeights[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 3\r\n\t\tinfluence += mBones[int(matricesIndices[3])] * matricesWeights[3];\r\n\t#endif\t\r\n\t\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[0])] * matricesWeightsExtra[0];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 5\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[1])] * matricesWeightsExtra[1];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 6\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[2])] * matricesWeightsExtra[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 7\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[3])] * matricesWeightsExtra[3];\r\n\t#endif\t\r\n\r\n\tfinalWorld = finalWorld * influence;\r\n#endif\r\n\tgl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n\r\n\tvec4 worldPos = finalWorld * vec4(position, 1.0);\r\n\tvPositionW = vec3(worldPos);\r\n\r\n#ifdef NORMAL\r\n\tvNormalW = normalize(vec3(finalWorld * vec4(normal, 0.0)));\r\n#endif\r\n\r\n\t// Texture coordinates\r\n#ifndef UV1\r\n\tvec2 uv = vec2(0., 0.);\r\n#endif\r\n#ifndef UV2\r\n\tvec2 uv2 = vec2(0., 0.);\r\n#endif\r\n\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tfClipDistance = dot(worldPos, vClipPlane);\r\n#endif\r\n\r\n\t// Fog\r\n#ifdef FOG\r\n\tfFogDistance = (view * worldPos).z;\r\n#endif\r\n\r\n\t// Vertex color\r\n#ifdef VERTEXCOLOR\r\n\tvColor = color;\r\n#endif\r\n\r\n\t// Point size\r\n#ifdef POINTSIZE\r\n\tgl_PointSize = pointSize;\r\n#endif\r\n}"); else _g.h["pbr.vertex"] = "precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\n#ifdef NORMAL\r\nattribute vec3 normal;\r\n#endif\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#ifdef VERTEXCOLOR\r\nattribute vec4 color;\r\n#endif\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\r\n\t// having bone influencers implies you have bones\r\n\tuniform mat4 mBones[BonesPerMesh];\r\n\r\n\tattribute vec4 matricesIndices;\r\n\tattribute vec4 matricesWeights;\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tattribute vec4 matricesIndicesExtra;\r\n\t\tattribute vec4 matricesWeightsExtra;\r\n\t#endif\r\n#endif\r\n\r\n// Uniforms\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 view;\r\nuniform mat4 viewProjection;\r\n\r\n#ifdef POINTSIZE\r\nuniform float pointSize;\r\n#endif\r\n\r\n// Output\r\nvarying vec3 vPositionW;\r\n#ifdef NORMAL\r\nvarying vec3 vNormalW;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nuniform vec4 vClipPlane;\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n#ifdef FOG\r\nvarying float fFogDistance;\r\n#endif\r\n\r\nvoid main(void) {\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tmat4 influence;\r\n\tinfluence = mBones[int(matricesIndices[0])] * matricesWeights[0];\r\n\r\n\t#if NUM_BONE_INFLUENCERS > 1\r\n\t\tinfluence += mBones[int(matricesIndices[1])] * matricesWeights[1];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 2\r\n\t\tinfluence += mBones[int(matricesIndices[2])] * matricesWeights[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 3\r\n\t\tinfluence += mBones[int(matricesIndices[3])] * matricesWeights[3];\r\n\t#endif\t\r\n\t\r\n\t#if NUM_BONE_INFLUENCERS > 4\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[0])] * matricesWeightsExtra[0];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 5\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[1])] * matricesWeightsExtra[1];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 6\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[2])] * matricesWeightsExtra[2];\r\n\t#endif\t\r\n\t#if NUM_BONE_INFLUENCERS > 7\r\n\t\tinfluence += mBones[int(matricesIndicesExtra[3])] * matricesWeightsExtra[3];\r\n\t#endif\t\r\n\r\n\tfinalWorld = finalWorld * influence;\r\n#endif\r\n\tgl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n\r\n\tvec4 worldPos = finalWorld * vec4(position, 1.0);\r\n\tvPositionW = vec3(worldPos);\r\n\r\n#ifdef NORMAL\r\n\tvNormalW = normalize(vec3(finalWorld * vec4(normal, 0.0)));\r\n#endif\r\n\r\n\t// Texture coordinates\r\n#ifndef UV1\r\n\tvec2 uv = vec2(0., 0.);\r\n#endif\r\n#ifndef UV2\r\n\tvec2 uv2 = vec2(0., 0.);\r\n#endif\r\n\r\n\t// Clip plane\r\n#ifdef CLIPPLANE\r\n\tfClipDistance = dot(worldPos, vClipPlane);\r\n#endif\r\n\r\n\t// Fog\r\n#ifdef FOG\r\n\tfFogDistance = (view * worldPos).z;\r\n#endif\r\n\r\n\t// Vertex color\r\n#ifdef VERTEXCOLOR\r\n\tvColor = color;\r\n#endif\r\n\r\n\t// Point size\r\n#ifdef POINTSIZE\r\n\tgl_PointSize = pointSize;\r\n#endif\r\n}";
	if(__map_reserved["postprocess.vertex"] != null) _g.setReserved("postprocess.vertex","precision highp float;\r\n\r\n// Attributes\r\nattribute vec2 position;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\n\r\nconst vec2 madd = vec2(0.5, 0.5);\r\n\r\nvoid main(void) {\t\r\n\r\n\tvUV = position * madd + madd;\r\n\tgl_Position = vec4(position, 0.0, 1.0);\r\n}"); else _g.h["postprocess.vertex"] = "precision highp float;\r\n\r\n// Attributes\r\nattribute vec2 position;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\n\r\nconst vec2 madd = vec2(0.5, 0.5);\r\n\r\nvoid main(void) {\t\r\n\r\n\tvUV = position * madd + madd;\r\n\tgl_Position = vec4(position, 0.0, 1.0);\r\n}";
	if(__map_reserved["procedural.vertex"] != null) _g.setReserved("procedural.vertex","precision highp float;\r\n\r\n// Attributes\r\nattribute vec2 position;\r\n\r\n// Output\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nconst vec2 madd = vec2(0.5, 0.5);\r\n\r\nvoid main(void) {\t\r\n\tvPosition = position;\r\n\tvUV = position * madd + madd;\r\n\tgl_Position = vec4(position, 0.0, 1.0);\r\n}"); else _g.h["procedural.vertex"] = "precision highp float;\r\n\r\n// Attributes\r\nattribute vec2 position;\r\n\r\n// Output\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nconst vec2 madd = vec2(0.5, 0.5);\r\n\r\nvoid main(void) {\t\r\n\tvPosition = position;\r\n\tvUV = position * madd + madd;\r\n\tgl_Position = vec4(position, 0.0, 1.0);\r\n}";
	if(__map_reserved["refraction.fragment"] != null) _g.setReserved("refraction.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D refractionSampler;\r\n\r\n// Parameters\r\nuniform vec3 baseColor;\r\nuniform float depth;\r\nuniform float colorLevel;\r\n\r\nvoid main() {\r\n\tfloat ref = 1.0 - texture2D(refractionSampler, vUV).r;\r\n\r\n\tvec2 uv = vUV - vec2(0.5);\r\n\tvec2 offset = uv * depth * ref;\r\n\tvec3 sourceColor = texture2D(textureSampler, vUV - offset).rgb;\r\n\r\n\tgl_FragColor = vec4(sourceColor + sourceColor * ref * colorLevel, 1.0);\r\n}"); else _g.h["refraction.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D refractionSampler;\r\n\r\n// Parameters\r\nuniform vec3 baseColor;\r\nuniform float depth;\r\nuniform float colorLevel;\r\n\r\nvoid main() {\r\n\tfloat ref = 1.0 - texture2D(refractionSampler, vUV).r;\r\n\r\n\tvec2 uv = vUV - vec2(0.5);\r\n\tvec2 offset = uv * depth * ref;\r\n\tvec3 sourceColor = texture2D(textureSampler, vUV - offset).rgb;\r\n\r\n\tgl_FragColor = vec4(sourceColor + sourceColor * ref * colorLevel, 1.0);\r\n}";
	if(__map_reserved["roadtexture.fragment"] != null) _g.setReserved("roadtexture.fragment","precision highp float;\r\n\r\nvarying vec2 vUV;                    \r\nuniform vec3 roadColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main(void) {\r\n\tfloat ratioy = mod(gl_FragCoord.y * 100.0 , fbm(vUV * 2.0));\r\n\tvec3 color = roadColor * ratioy;\r\n\tgl_FragColor = vec4(color, 1.0);\r\n}"); else _g.h["roadtexture.fragment"] = "precision highp float;\r\n\r\nvarying vec2 vUV;                    \r\nuniform vec3 roadColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main(void) {\r\n\tfloat ratioy = mod(gl_FragCoord.y * 100.0 , fbm(vUV * 2.0));\r\n\tvec3 color = roadColor * ratioy;\r\n\tgl_FragColor = vec4(color, 1.0);\r\n}";
	if(__map_reserved["shadowMap.fragment"] != null) _g.setReserved("shadowMap.fragment","precision highp float;\r\n\r\nvec4 pack(float depth)\r\n{\r\n\tconst vec4 bit_shift = vec4(255.0 * 255.0 * 255.0, 255.0 * 255.0, 255.0, 1.0);\r\n\tconst vec4 bit_mask = vec4(0.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n\r\n\tvec4 res = fract(depth * bit_shift);\r\n\tres -= res.xxyz * bit_mask;\r\n\r\n\treturn res;\r\n}\r\n\r\n// Thanks to http://devmaster.net/\r\nvec2 packHalf(float depth) \r\n{ \r\n\tconst vec2 bitOffset = vec2(1.0 / 255., 0.);\r\n\tvec2 color = vec2(depth, fract(depth * 255.));\r\n\r\n\treturn color - (color.yy * bitOffset);\r\n}\r\n\r\nvarying vec4 vPosition;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform sampler2D diffuseSampler;\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#ifdef ALPHATEST\r\n\tif (texture2D(diffuseSampler, vUV).a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\tfloat depth = vPosition.z / vPosition.w;\r\n\tdepth = depth * 0.5 + 0.5;\r\n\r\n#ifdef VSM\r\n\tfloat moment1 = depth;\r\n\tfloat moment2 = moment1 * moment1;\r\n\r\n\tgl_FragColor = vec4(packHalf(moment1), packHalf(moment2));\r\n#else\r\n\tgl_FragColor = pack(depth);\r\n#endif\r\n}"); else _g.h["shadowMap.fragment"] = "precision highp float;\r\n\r\nvec4 pack(float depth)\r\n{\r\n\tconst vec4 bit_shift = vec4(255.0 * 255.0 * 255.0, 255.0 * 255.0, 255.0, 1.0);\r\n\tconst vec4 bit_mask = vec4(0.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n\r\n\tvec4 res = fract(depth * bit_shift);\r\n\tres -= res.xxyz * bit_mask;\r\n\r\n\treturn res;\r\n}\r\n\r\n// Thanks to http://devmaster.net/\r\nvec2 packHalf(float depth) \r\n{ \r\n\tconst vec2 bitOffset = vec2(1.0 / 255., 0.);\r\n\tvec2 color = vec2(depth, fract(depth * 255.));\r\n\r\n\treturn color - (color.yy * bitOffset);\r\n}\r\n\r\nvarying vec4 vPosition;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform sampler2D diffuseSampler;\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#ifdef ALPHATEST\r\n\tif (texture2D(diffuseSampler, vUV).a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\tfloat depth = vPosition.z / vPosition.w;\r\n\tdepth = depth * 0.5 + 0.5;\r\n\r\n#ifdef VSM\r\n\tfloat moment1 = depth;\r\n\tfloat moment2 = moment1 * moment1;\r\n\r\n\tgl_FragColor = vec4(packHalf(moment1), packHalf(moment2));\r\n#else\r\n\tgl_FragColor = pack(depth);\r\n#endif\r\n}";
	if(__map_reserved["shadowMap.vertex"] != null) _g.setReserved("shadowMap.vertex","precision highp float;\r\n\r\n// Attribute\r\nattribute vec3 position;\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\r\n// having bone influencers implies you have bones\r\nuniform mat4 mBones[BonesPerMesh];\r\n\r\nattribute vec4 matricesIndices;\r\nattribute vec4 matricesWeights;\r\n#if NUM_BONE_INFLUENCERS > 4\r\nattribute vec4 matricesIndicesExtra;\r\nattribute vec4 matricesWeightsExtra;\r\n#endif\r\n#endif\r\n\r\n// Uniform\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 viewProjection;\r\n\r\nvarying vec4 vPosition;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform mat4 diffuseMatrix;\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tmat4 influence;\r\n\tinfluence = mBones[int(matricesIndices[0])] * matricesWeights[0];\r\n\r\n#if NUM_BONE_INFLUENCERS > 1\r\n\tinfluence += mBones[int(matricesIndices[1])] * matricesWeights[1];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 2\r\n\tinfluence += mBones[int(matricesIndices[2])] * matricesWeights[2];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 3\r\n\tinfluence += mBones[int(matricesIndices[3])] * matricesWeights[3];\r\n#endif\t\r\n\r\n#if NUM_BONE_INFLUENCERS > 4\r\n\tinfluence += mBones[int(matricesIndicesExtra[0])] * matricesWeightsExtra[0];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 5\r\n\tinfluence += mBones[int(matricesIndicesExtra[1])] * matricesWeightsExtra[1];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 6\r\n\tinfluence += mBones[int(matricesIndicesExtra[2])] * matricesWeightsExtra[2];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 7\r\n\tinfluence += mBones[int(matricesIndicesExtra[3])] * matricesWeightsExtra[3];\r\n#endif\t\r\n\r\n\tfinalWorld = finalWorld * influence;\r\n#endif\r\n\tvPosition = viewProjection * finalWorld * vec4(position, 1.0);\r\n\tgl_Position = vPosition;\r\n\r\n#ifdef ALPHATEST\r\n#ifdef UV1\r\n\tvUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n#endif\r\n#ifdef UV2\r\n\tvUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n#endif\r\n#endif\r\n}"); else _g.h["shadowMap.vertex"] = "precision highp float;\r\n\r\n// Attribute\r\nattribute vec3 position;\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\r\n// having bone influencers implies you have bones\r\nuniform mat4 mBones[BonesPerMesh];\r\n\r\nattribute vec4 matricesIndices;\r\nattribute vec4 matricesWeights;\r\n#if NUM_BONE_INFLUENCERS > 4\r\nattribute vec4 matricesIndicesExtra;\r\nattribute vec4 matricesWeightsExtra;\r\n#endif\r\n#endif\r\n\r\n// Uniform\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 viewProjection;\r\n\r\nvarying vec4 vPosition;\r\n\r\n#ifdef ALPHATEST\r\nvarying vec2 vUV;\r\nuniform mat4 diffuseMatrix;\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#ifdef INSTANCES\r\n\tmat4 finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n\tmat4 finalWorld = world;\r\n#endif\r\n\r\n#if NUM_BONE_INFLUENCERS > 0\r\n\tmat4 influence;\r\n\tinfluence = mBones[int(matricesIndices[0])] * matricesWeights[0];\r\n\r\n#if NUM_BONE_INFLUENCERS > 1\r\n\tinfluence += mBones[int(matricesIndices[1])] * matricesWeights[1];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 2\r\n\tinfluence += mBones[int(matricesIndices[2])] * matricesWeights[2];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 3\r\n\tinfluence += mBones[int(matricesIndices[3])] * matricesWeights[3];\r\n#endif\t\r\n\r\n#if NUM_BONE_INFLUENCERS > 4\r\n\tinfluence += mBones[int(matricesIndicesExtra[0])] * matricesWeightsExtra[0];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 5\r\n\tinfluence += mBones[int(matricesIndicesExtra[1])] * matricesWeightsExtra[1];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 6\r\n\tinfluence += mBones[int(matricesIndicesExtra[2])] * matricesWeightsExtra[2];\r\n#endif\t\r\n#if NUM_BONE_INFLUENCERS > 7\r\n\tinfluence += mBones[int(matricesIndicesExtra[3])] * matricesWeightsExtra[3];\r\n#endif\t\r\n\r\n\tfinalWorld = finalWorld * influence;\r\n#endif\r\n\tvPosition = viewProjection * finalWorld * vec4(position, 1.0);\r\n\tgl_Position = vPosition;\r\n\r\n#ifdef ALPHATEST\r\n#ifdef UV1\r\n\tvUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n#endif\r\n#ifdef UV2\r\n\tvUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n#endif\r\n#endif\r\n}";
	if(__map_reserved["sprites.fragment"] != null) _g.setReserved("sprites.fragment","precision highp float;\r\n\r\nuniform bool alphaTest;\r\n\r\nvarying vec4 vColor;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D diffuseSampler;\r\n\r\n// Fog\r\n#ifdef FOG\r\n\r\n#define FOGMODE_NONE    0.\r\n#define FOGMODE_EXP     1.\r\n#define FOGMODE_EXP2    2.\r\n#define FOGMODE_LINEAR  3.\r\n#define E 2.71828\r\n\r\nuniform vec4 vFogInfos;\r\nuniform vec3 vFogColor;\r\nvarying float fFogDistance;\r\n\r\nfloat CalcFogFactor()\r\n{\r\n\tfloat fogCoeff = 1.0;\r\n\tfloat fogStart = vFogInfos.y;\r\n\tfloat fogEnd = vFogInfos.z;\r\n\tfloat fogDensity = vFogInfos.w;\r\n\r\n\tif (FOGMODE_LINEAR == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = (fogEnd - fFogDistance) / (fogEnd - fogStart);\r\n\t}\r\n\telse if (FOGMODE_EXP == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fogDensity);\r\n\t}\r\n\telse if (FOGMODE_EXP2 == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fFogDistance * fogDensity * fogDensity);\r\n\t}\r\n\r\n\treturn min(1., max(0., fogCoeff));\r\n}\r\n#endif\r\n\r\n\r\nvoid main(void) {\r\n\tvec4 baseColor = texture2D(diffuseSampler, vUV);\r\n\r\n\tif (alphaTest) \r\n\t{\r\n\t\tif (baseColor.a < 0.95)\r\n\t\t\tdiscard;\r\n\t}\r\n\r\n\tbaseColor *= vColor;\r\n\r\n#ifdef FOG\r\n\tfloat fog = CalcFogFactor();\r\n\tbaseColor.rgb = fog * baseColor.rgb + (1.0 - fog) * vFogColor;\r\n#endif\r\n\r\n\tgl_FragColor = baseColor;\r\n}"); else _g.h["sprites.fragment"] = "precision highp float;\r\n\r\nuniform bool alphaTest;\r\n\r\nvarying vec4 vColor;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D diffuseSampler;\r\n\r\n// Fog\r\n#ifdef FOG\r\n\r\n#define FOGMODE_NONE    0.\r\n#define FOGMODE_EXP     1.\r\n#define FOGMODE_EXP2    2.\r\n#define FOGMODE_LINEAR  3.\r\n#define E 2.71828\r\n\r\nuniform vec4 vFogInfos;\r\nuniform vec3 vFogColor;\r\nvarying float fFogDistance;\r\n\r\nfloat CalcFogFactor()\r\n{\r\n\tfloat fogCoeff = 1.0;\r\n\tfloat fogStart = vFogInfos.y;\r\n\tfloat fogEnd = vFogInfos.z;\r\n\tfloat fogDensity = vFogInfos.w;\r\n\r\n\tif (FOGMODE_LINEAR == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = (fogEnd - fFogDistance) / (fogEnd - fogStart);\r\n\t}\r\n\telse if (FOGMODE_EXP == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fogDensity);\r\n\t}\r\n\telse if (FOGMODE_EXP2 == vFogInfos.x)\r\n\t{\r\n\t\tfogCoeff = 1.0 / pow(E, fFogDistance * fFogDistance * fogDensity * fogDensity);\r\n\t}\r\n\r\n\treturn min(1., max(0., fogCoeff));\r\n}\r\n#endif\r\n\r\n\r\nvoid main(void) {\r\n\tvec4 baseColor = texture2D(diffuseSampler, vUV);\r\n\r\n\tif (alphaTest) \r\n\t{\r\n\t\tif (baseColor.a < 0.95)\r\n\t\t\tdiscard;\r\n\t}\r\n\r\n\tbaseColor *= vColor;\r\n\r\n#ifdef FOG\r\n\tfloat fog = CalcFogFactor();\r\n\tbaseColor.rgb = fog * baseColor.rgb + (1.0 - fog) * vFogColor;\r\n#endif\r\n\r\n\tgl_FragColor = baseColor;\r\n}";
	if(__map_reserved["sprites.vertex"] != null) _g.setReserved("sprites.vertex","precision highp float;\r\n\r\n// Attributes\r\nattribute vec4 position;\r\nattribute vec4 options;\r\nattribute vec4 cellInfo;\r\nattribute vec4 color;\r\n\r\n// Uniforms\r\nuniform vec2 textureInfos;\r\nuniform mat4 view;\r\nuniform mat4 projection;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\nvarying vec4 vColor;\r\n\r\n#ifdef FOG\r\nvarying float fFogDistance;\r\n#endif\r\n\r\nvoid main(void) {\t\r\n\tvec3 viewPos = (view * vec4(position.xyz, 1.0)).xyz; \r\n\tvec2 cornerPos;\r\n\t\r\n\tfloat angle = position.w;\r\n\tvec2 size = vec2(options.x, options.y);\r\n\tvec2 offset = options.zw;\r\n\tvec2 uvScale = textureInfos.xy;\r\n\r\n\tcornerPos = vec2(offset.x - 0.5, offset.y  - 0.5) * size;\r\n\r\n\t// Rotate\r\n\tvec3 rotatedCorner;\r\n\trotatedCorner.x = cornerPos.x * cos(angle) - cornerPos.y * sin(angle);\r\n\trotatedCorner.y = cornerPos.x * sin(angle) + cornerPos.y * cos(angle);\r\n\trotatedCorner.z = 0.;\r\n\r\n\t// Position\r\n\tviewPos += rotatedCorner;\r\n\tgl_Position = projection * vec4(viewPos, 1.0);   \r\n\r\n\t// Color\r\n\tvColor = color;\r\n\t\r\n\t// Texture\r\n\tvec2 uvOffset = vec2(abs(offset.x - cellInfo.x), 1.0 - abs(offset.y - cellInfo.y));\r\n\r\n\tvUV = (uvOffset + cellInfo.zw) * uvScale;\r\n\r\n\t// Fog\r\n#ifdef FOG\r\n\tfFogDistance = viewPos.z;\r\n#endif\r\n}"); else _g.h["sprites.vertex"] = "precision highp float;\r\n\r\n// Attributes\r\nattribute vec4 position;\r\nattribute vec4 options;\r\nattribute vec4 cellInfo;\r\nattribute vec4 color;\r\n\r\n// Uniforms\r\nuniform vec2 textureInfos;\r\nuniform mat4 view;\r\nuniform mat4 projection;\r\n\r\n// Output\r\nvarying vec2 vUV;\r\nvarying vec4 vColor;\r\n\r\n#ifdef FOG\r\nvarying float fFogDistance;\r\n#endif\r\n\r\nvoid main(void) {\t\r\n\tvec3 viewPos = (view * vec4(position.xyz, 1.0)).xyz; \r\n\tvec2 cornerPos;\r\n\t\r\n\tfloat angle = position.w;\r\n\tvec2 size = vec2(options.x, options.y);\r\n\tvec2 offset = options.zw;\r\n\tvec2 uvScale = textureInfos.xy;\r\n\r\n\tcornerPos = vec2(offset.x - 0.5, offset.y  - 0.5) * size;\r\n\r\n\t// Rotate\r\n\tvec3 rotatedCorner;\r\n\trotatedCorner.x = cornerPos.x * cos(angle) - cornerPos.y * sin(angle);\r\n\trotatedCorner.y = cornerPos.x * sin(angle) + cornerPos.y * cos(angle);\r\n\trotatedCorner.z = 0.;\r\n\r\n\t// Position\r\n\tviewPos += rotatedCorner;\r\n\tgl_Position = projection * vec4(viewPos, 1.0);   \r\n\r\n\t// Color\r\n\tvColor = color;\r\n\t\r\n\t// Texture\r\n\tvec2 uvOffset = vec2(abs(offset.x - cellInfo.x), 1.0 - abs(offset.y - cellInfo.y));\r\n\r\n\tvUV = (uvOffset + cellInfo.zw) * uvScale;\r\n\r\n\t// Fog\r\n#ifdef FOG\r\n\tfFogDistance = viewPos.z;\r\n#endif\r\n}";
	if(__map_reserved["ssao.fragment"] != null) _g.setReserved("ssao.fragment","precision highp float;\r\n\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D randomSampler;\r\n\r\nuniform float randTextureTiles;\r\nuniform float samplesFactor;\r\nuniform vec3 sampleSphere[SAMPLES];\r\n\r\nuniform float totalStrength;\r\nuniform float radius;\r\nuniform float area;\r\nuniform float fallOff;\r\nuniform float base;\r\n\r\nvarying vec2 vUV;\r\n\r\nvec3 normalFromDepth(float depth, vec2 coords) {\r\n\tvec2 offset1 = vec2(0.0, radius);\r\n\tvec2 offset2 = vec2(radius, 0.0);\r\n\r\n\tfloat depth1 = texture2D(textureSampler, coords + offset1).r;\r\n\tfloat depth2 = texture2D(textureSampler, coords + offset2).r;\r\n\r\n    vec3 p1 = vec3(offset1, depth1 - depth);\r\n    vec3 p2 = vec3(offset2, depth2 - depth);\r\n\r\n    vec3 normal = cross(p1, p2);\r\n\tnormal.z = -normal.z;\r\n\r\n    return normalize(normal);\r\n}\r\n\r\nvoid main()\r\n{\r\n\tvec3 random = normalize(texture2D(randomSampler, vUV * randTextureTiles).rgb);\r\n\tfloat depth = texture2D(textureSampler, vUV).r;\r\n\tvec3 position = vec3(vUV, depth);\r\n\tvec3 normal = normalFromDepth(depth, vUV);\r\n\tfloat radiusDepth = radius / depth;\r\n\tfloat occlusion = 0.0;\r\n\r\n\tvec3 ray;\r\n\tvec3 hemiRay;\r\n\tfloat occlusionDepth;\r\n\tfloat difference;\r\n\r\n\tfor (int i = 0; i < SAMPLES; i++)\r\n\t{\r\n\t\tray = radiusDepth * reflect(sampleSphere[i], random);\r\n\t\themiRay = position + sign(dot(ray, normal)) * ray;\r\n\r\n\t\tocclusionDepth = texture2D(textureSampler, clamp(hemiRay.xy, vec2(0.001, 0.001), vec2(0.999, 0.999))).r;\r\n\t\tdifference = depth - occlusionDepth;\r\n\r\n\t\tocclusion += step(fallOff, difference) * (1.0 - smoothstep(fallOff, area, difference));\r\n\t}\r\n\r\n\tfloat ao = 1.0 - totalStrength * occlusion * samplesFactor;\r\n\r\n\tfloat result = clamp(ao + base, 0.0, 1.0);\r\n\tgl_FragColor.r = result;\r\n\tgl_FragColor.g = result;\r\n\tgl_FragColor.b = result;\r\n\tgl_FragColor.a = 1.0;\r\n}\r\n"); else _g.h["ssao.fragment"] = "precision highp float;\r\n\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D randomSampler;\r\n\r\nuniform float randTextureTiles;\r\nuniform float samplesFactor;\r\nuniform vec3 sampleSphere[SAMPLES];\r\n\r\nuniform float totalStrength;\r\nuniform float radius;\r\nuniform float area;\r\nuniform float fallOff;\r\nuniform float base;\r\n\r\nvarying vec2 vUV;\r\n\r\nvec3 normalFromDepth(float depth, vec2 coords) {\r\n\tvec2 offset1 = vec2(0.0, radius);\r\n\tvec2 offset2 = vec2(radius, 0.0);\r\n\r\n\tfloat depth1 = texture2D(textureSampler, coords + offset1).r;\r\n\tfloat depth2 = texture2D(textureSampler, coords + offset2).r;\r\n\r\n    vec3 p1 = vec3(offset1, depth1 - depth);\r\n    vec3 p2 = vec3(offset2, depth2 - depth);\r\n\r\n    vec3 normal = cross(p1, p2);\r\n\tnormal.z = -normal.z;\r\n\r\n    return normalize(normal);\r\n}\r\n\r\nvoid main()\r\n{\r\n\tvec3 random = normalize(texture2D(randomSampler, vUV * randTextureTiles).rgb);\r\n\tfloat depth = texture2D(textureSampler, vUV).r;\r\n\tvec3 position = vec3(vUV, depth);\r\n\tvec3 normal = normalFromDepth(depth, vUV);\r\n\tfloat radiusDepth = radius / depth;\r\n\tfloat occlusion = 0.0;\r\n\r\n\tvec3 ray;\r\n\tvec3 hemiRay;\r\n\tfloat occlusionDepth;\r\n\tfloat difference;\r\n\r\n\tfor (int i = 0; i < SAMPLES; i++)\r\n\t{\r\n\t\tray = radiusDepth * reflect(sampleSphere[i], random);\r\n\t\themiRay = position + sign(dot(ray, normal)) * ray;\r\n\r\n\t\tocclusionDepth = texture2D(textureSampler, clamp(hemiRay.xy, vec2(0.001, 0.001), vec2(0.999, 0.999))).r;\r\n\t\tdifference = depth - occlusionDepth;\r\n\r\n\t\tocclusion += step(fallOff, difference) * (1.0 - smoothstep(fallOff, area, difference));\r\n\t}\r\n\r\n\tfloat ao = 1.0 - totalStrength * occlusion * samplesFactor;\r\n\r\n\tfloat result = clamp(ao + base, 0.0, 1.0);\r\n\tgl_FragColor.r = result;\r\n\tgl_FragColor.g = result;\r\n\tgl_FragColor.b = result;\r\n\tgl_FragColor.a = 1.0;\r\n}\r\n";
	if(__map_reserved["ssaoCombine.fragment"] != null) _g.setReserved("ssaoCombine.fragment","precision highp float;\r\n\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D originalColor;\r\n\r\nvarying vec2 vUV;\r\n\r\nvoid main(void) {\r\n\tvec4 ssaoColor = texture2D(textureSampler, vUV);\r\n\tvec4 sceneColor = texture2D(originalColor, vUV);\r\n\r\n\tgl_FragColor = sceneColor * ssaoColor;\r\n}\r\n"); else _g.h["ssaoCombine.fragment"] = "precision highp float;\r\n\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D originalColor;\r\n\r\nvarying vec2 vUV;\r\n\r\nvoid main(void) {\r\n\tvec4 ssaoColor = texture2D(textureSampler, vUV);\r\n\tvec4 sceneColor = texture2D(originalColor, vUV);\r\n\r\n\tgl_FragColor = sceneColor * ssaoColor;\r\n}\r\n";
	if(__map_reserved["stereoscopicInterlace.fragment"] != null) _g.setReserved("stereoscopicInterlace.fragment","precision highp float;\r\n\r\nconst vec3 TWO = vec3(2.0, 2.0, 2.0);\r\n\r\nvarying vec2 vUV;\r\nuniform sampler2D camASampler;\r\nuniform sampler2D textureSampler;\r\nuniform vec2 stepSize;\r\n\r\nvoid main(void)\r\n{\r\n    bool useCamB;\r\n    vec2 texCoord1;\r\n    vec2 texCoord2;\r\n    \r\n    vec3 frag1;\r\n    vec3 frag2;\r\n    \r\n#ifdef IS_STEREOSCOPIC_HORIZ\r\n\t    useCamB = vUV.x > 0.5;\r\n\t    texCoord1 = vec2(useCamB ? (vUV.x - 0.5) * 2.0 : vUV.x * 2.0, vUV.y);\r\n\t    texCoord2 = vec2(texCoord1.x + stepSize.x, vUV.y);\r\n#else\r\n\t    useCamB = vUV.y > 0.5;\r\n\t    texCoord1 = vec2(vUV.x, useCamB ? (vUV.y - 0.5) * 2.0 : vUV.y * 2.0);\r\n\t    texCoord2 = vec2(vUV.x, texCoord1.y + stepSize.y);\r\n#endif\r\n    \r\n    // cannot assign a sampler to a variable, so must duplicate texture accesses\r\n    if (useCamB){\r\n        frag1 = texture2D(textureSampler, texCoord1).rgb;\r\n        frag2 = texture2D(textureSampler, texCoord2).rgb;\r\n    }else{\r\n        frag1 = texture2D(camASampler   , texCoord1).rgb;\r\n        frag2 = texture2D(camASampler   , texCoord2).rgb;\r\n    }\r\n    \r\n    gl_FragColor = vec4((frag1 + frag2) / TWO, 1.0);\r\n}"); else _g.h["stereoscopicInterlace.fragment"] = "precision highp float;\r\n\r\nconst vec3 TWO = vec3(2.0, 2.0, 2.0);\r\n\r\nvarying vec2 vUV;\r\nuniform sampler2D camASampler;\r\nuniform sampler2D textureSampler;\r\nuniform vec2 stepSize;\r\n\r\nvoid main(void)\r\n{\r\n    bool useCamB;\r\n    vec2 texCoord1;\r\n    vec2 texCoord2;\r\n    \r\n    vec3 frag1;\r\n    vec3 frag2;\r\n    \r\n#ifdef IS_STEREOSCOPIC_HORIZ\r\n\t    useCamB = vUV.x > 0.5;\r\n\t    texCoord1 = vec2(useCamB ? (vUV.x - 0.5) * 2.0 : vUV.x * 2.0, vUV.y);\r\n\t    texCoord2 = vec2(texCoord1.x + stepSize.x, vUV.y);\r\n#else\r\n\t    useCamB = vUV.y > 0.5;\r\n\t    texCoord1 = vec2(vUV.x, useCamB ? (vUV.y - 0.5) * 2.0 : vUV.y * 2.0);\r\n\t    texCoord2 = vec2(vUV.x, texCoord1.y + stepSize.y);\r\n#endif\r\n    \r\n    // cannot assign a sampler to a variable, so must duplicate texture accesses\r\n    if (useCamB){\r\n        frag1 = texture2D(textureSampler, texCoord1).rgb;\r\n        frag2 = texture2D(textureSampler, texCoord2).rgb;\r\n    }else{\r\n        frag1 = texture2D(camASampler   , texCoord1).rgb;\r\n        frag2 = texture2D(camASampler   , texCoord2).rgb;\r\n    }\r\n    \r\n    gl_FragColor = vec4((frag1 + frag2) / TWO, 1.0);\r\n}";
	if(__map_reserved["tonemap.fragment"] != null) _g.setReserved("tonemap.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Constants\r\nuniform float _ExposureAdjustment;\r\n\r\n#if defined(HABLE_TONEMAPPING)\r\n    const float A = 0.15;\r\n    const float B = 0.50;\r\n    const float C = 0.10;\r\n    const float D = 0.20;\r\n    const float E = 0.02;\r\n    const float F = 0.30;\r\n    const float W = 11.2;\r\n#endif\r\n\r\nfloat Luminance(vec3 c)\r\n{\r\n    return dot(c, vec3(0.22, 0.707, 0.071));\r\n}\r\n\r\nvoid main(void) \r\n{\r\n    vec3 colour = texture2D(textureSampler, vUV).rgb;\r\n\r\n#if defined(REINHARD_TONEMAPPING)\r\n\r\n    float lum = Luminance(colour.rgb); \r\n    float lumTm = lum * _ExposureAdjustment;\r\n    float scale = lumTm / (1.0 + lumTm);  \r\n\r\n    colour *= scale / lum;\r\n\r\n#elif defined(HABLE_TONEMAPPING)\r\n\r\n    colour *= _ExposureAdjustment;\r\n\r\n    const float ExposureBias = 2.0;\r\n    vec3 x = ExposureBias * colour;\r\n\r\n    vec3 curr = ((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F;\r\n    \r\n    x = vec3(W, W, W);\r\n    vec3 whiteScale = 1.0 / (((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F);\r\n    colour = curr * whiteScale;\r\n\r\n#elif defined(OPTIMIZED_HEJIDAWSON_TONEMAPPING)\r\n\r\n    colour *= _ExposureAdjustment;\r\n    \r\n    vec3 X = max(vec3(0.0, 0.0, 0.0), colour - 0.004);\r\n    vec3 retColor = (X * (6.2 * X + 0.5)) / (X * (6.2 * X + 1.7) + 0.06);\r\n\r\n    colour = retColor * retColor;\r\n\r\n#elif defined(PHOTOGRAPHIC_TONEMAPPING)\r\n\r\n    colour =  vec3(1.0, 1.0, 1.0) - exp2(-_ExposureAdjustment * colour);\r\n\r\n#endif\r\n\r\n\tgl_FragColor = vec4(colour.rgb, 1.0);\r\n}"); else _g.h["tonemap.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\n\r\n// Constants\r\nuniform float _ExposureAdjustment;\r\n\r\n#if defined(HABLE_TONEMAPPING)\r\n    const float A = 0.15;\r\n    const float B = 0.50;\r\n    const float C = 0.10;\r\n    const float D = 0.20;\r\n    const float E = 0.02;\r\n    const float F = 0.30;\r\n    const float W = 11.2;\r\n#endif\r\n\r\nfloat Luminance(vec3 c)\r\n{\r\n    return dot(c, vec3(0.22, 0.707, 0.071));\r\n}\r\n\r\nvoid main(void) \r\n{\r\n    vec3 colour = texture2D(textureSampler, vUV).rgb;\r\n\r\n#if defined(REINHARD_TONEMAPPING)\r\n\r\n    float lum = Luminance(colour.rgb); \r\n    float lumTm = lum * _ExposureAdjustment;\r\n    float scale = lumTm / (1.0 + lumTm);  \r\n\r\n    colour *= scale / lum;\r\n\r\n#elif defined(HABLE_TONEMAPPING)\r\n\r\n    colour *= _ExposureAdjustment;\r\n\r\n    const float ExposureBias = 2.0;\r\n    vec3 x = ExposureBias * colour;\r\n\r\n    vec3 curr = ((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F;\r\n    \r\n    x = vec3(W, W, W);\r\n    vec3 whiteScale = 1.0 / (((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F);\r\n    colour = curr * whiteScale;\r\n\r\n#elif defined(OPTIMIZED_HEJIDAWSON_TONEMAPPING)\r\n\r\n    colour *= _ExposureAdjustment;\r\n    \r\n    vec3 X = max(vec3(0.0, 0.0, 0.0), colour - 0.004);\r\n    vec3 retColor = (X * (6.2 * X + 0.5)) / (X * (6.2 * X + 1.7) + 0.06);\r\n\r\n    colour = retColor * retColor;\r\n\r\n#elif defined(PHOTOGRAPHIC_TONEMAPPING)\r\n\r\n    colour =  vec3(1.0, 1.0, 1.0) - exp2(-_ExposureAdjustment * colour);\r\n\r\n#endif\r\n\r\n\tgl_FragColor = vec4(colour.rgb, 1.0);\r\n}";
	if(__map_reserved["volumetricLightScattering.fragment"] != null) _g.setReserved("volumetricLightScattering.fragment","precision highp float;\r\n\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D lightScatteringSampler;\r\n\r\nuniform float decay;\r\nuniform float exposure;\r\nuniform float weight;\r\nuniform float density;\r\nuniform vec2 meshPositionOnScreen;\r\n\r\nvarying vec2 vUV;\r\n\r\nvoid main(void) {\r\n    vec2 tc = vUV;\r\n\tvec2 deltaTexCoord = (tc - meshPositionOnScreen.xy);\r\n    deltaTexCoord *= 1.0 / float(NUM_SAMPLES) * density;\r\n\r\n    float illuminationDecay = 1.0;\r\n\r\n\tvec4 color = texture2D(lightScatteringSampler, tc) * 0.4;\r\n\r\n    for(int i=0; i < NUM_SAMPLES; i++) {\r\n        tc -= deltaTexCoord;\r\n\t\tvec4 sample = texture2D(lightScatteringSampler, tc) * 0.4;\r\n        sample *= illuminationDecay * weight;\r\n        color += sample;\r\n        illuminationDecay *= decay;\r\n    }\r\n\r\n    vec4 realColor = texture2D(textureSampler, vUV);\r\n    gl_FragColor = ((vec4((vec3(color.r, color.g, color.b) * exposure), 1)) + (realColor * (1.5 - 0.4)));\r\n}\r\n"); else _g.h["volumetricLightScattering.fragment"] = "precision highp float;\r\n\r\nuniform sampler2D textureSampler;\r\nuniform sampler2D lightScatteringSampler;\r\n\r\nuniform float decay;\r\nuniform float exposure;\r\nuniform float weight;\r\nuniform float density;\r\nuniform vec2 meshPositionOnScreen;\r\n\r\nvarying vec2 vUV;\r\n\r\nvoid main(void) {\r\n    vec2 tc = vUV;\r\n\tvec2 deltaTexCoord = (tc - meshPositionOnScreen.xy);\r\n    deltaTexCoord *= 1.0 / float(NUM_SAMPLES) * density;\r\n\r\n    float illuminationDecay = 1.0;\r\n\r\n\tvec4 color = texture2D(lightScatteringSampler, tc) * 0.4;\r\n\r\n    for(int i=0; i < NUM_SAMPLES; i++) {\r\n        tc -= deltaTexCoord;\r\n\t\tvec4 sample = texture2D(lightScatteringSampler, tc) * 0.4;\r\n        sample *= illuminationDecay * weight;\r\n        color += sample;\r\n        illuminationDecay *= decay;\r\n    }\r\n\r\n    vec4 realColor = texture2D(textureSampler, vUV);\r\n    gl_FragColor = ((vec4((vec3(color.r, color.g, color.b) * exposure), 1)) + (realColor * (1.5 - 0.4)));\r\n}\r\n";
	if(__map_reserved["volumetricLightScatteringPass.fragment"] != null) _g.setReserved("volumetricLightScatteringPass.fragment","precision highp float;\r\n\r\n#if defined(ALPHATEST) || defined(NEED_UV)\r\nvarying vec2 vUV;\r\n#endif\r\n\r\n#if defined(ALPHATEST) || defined(BASIC_RENDER)\r\nuniform sampler2D diffuseSampler;\r\n#endif\r\n\r\n#if defined(DIFFUSE_COLOR_RENDER)\r\nuniform vec3 color;\r\n#endif\r\n\r\n#if defined(OPACITY)\r\nuniform sampler2D opacitySampler;\r\nuniform float opacityLevel;\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#if defined(ALPHATEST) || defined(BASIC_RENDER)\r\n\tvec4 diffuseColor = texture2D(diffuseSampler, vUV);\r\n#endif\r\n\r\n#ifdef ALPHATEST\r\n\tif (diffuseColor.a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n#ifdef OPACITY\r\n\tvec4 opacityColor = texture2D(opacitySampler, vUV);\r\n\tfloat alpha = 1.0;\r\n\r\n\t#ifdef OPACITYRGB\r\n\topacityColor.rgb = opacityColor.rgb * vec3(0.3, 0.59, 0.11);\r\n\talpha *= (opacityColor.x + opacityColor.y + opacityColor.z) * opacityLevel;\r\n\t#else\r\n\talpha *= opacityColor.a * opacityLevel;\r\n\t#endif\r\n\r\n\t#if defined(BASIC_RENDER)\r\n\tgl_FragColor = vec4(diffuseColor.rgb, alpha);\r\n\t#elif defined(DIFFUSE_COLOR_RENDER)\r\n\tgl_FragColor = vec4(color.rgb, alpha);\r\n\t#else\r\n\tgl_FragColor = vec4(0.0, 0.0, 0.0, alpha);\r\n\t#endif\r\n\r\n\tgl_FragColor.a = alpha;\r\n#else\r\n\r\n\t#if defined(BASIC_RENDER)\r\n\tgl_FragColor = diffuseColor;\r\n\t#elif defined(DIFFUSE_COLOR_RENDER)\r\n\tgl_FragColor = vec4(color.rgb, 1.0);\r\n\t#else\r\n\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n\t#endif\r\n#endif\r\n\r\n}\r\n"); else _g.h["volumetricLightScatteringPass.fragment"] = "precision highp float;\r\n\r\n#if defined(ALPHATEST) || defined(NEED_UV)\r\nvarying vec2 vUV;\r\n#endif\r\n\r\n#if defined(ALPHATEST) || defined(BASIC_RENDER)\r\nuniform sampler2D diffuseSampler;\r\n#endif\r\n\r\n#if defined(DIFFUSE_COLOR_RENDER)\r\nuniform vec3 color;\r\n#endif\r\n\r\n#if defined(OPACITY)\r\nuniform sampler2D opacitySampler;\r\nuniform float opacityLevel;\r\n#endif\r\n\r\nvoid main(void)\r\n{\r\n#if defined(ALPHATEST) || defined(BASIC_RENDER)\r\n\tvec4 diffuseColor = texture2D(diffuseSampler, vUV);\r\n#endif\r\n\r\n#ifdef ALPHATEST\r\n\tif (diffuseColor.a < 0.4)\r\n\t\tdiscard;\r\n#endif\r\n\r\n#ifdef OPACITY\r\n\tvec4 opacityColor = texture2D(opacitySampler, vUV);\r\n\tfloat alpha = 1.0;\r\n\r\n\t#ifdef OPACITYRGB\r\n\topacityColor.rgb = opacityColor.rgb * vec3(0.3, 0.59, 0.11);\r\n\talpha *= (opacityColor.x + opacityColor.y + opacityColor.z) * opacityLevel;\r\n\t#else\r\n\talpha *= opacityColor.a * opacityLevel;\r\n\t#endif\r\n\r\n\t#if defined(BASIC_RENDER)\r\n\tgl_FragColor = vec4(diffuseColor.rgb, alpha);\r\n\t#elif defined(DIFFUSE_COLOR_RENDER)\r\n\tgl_FragColor = vec4(color.rgb, alpha);\r\n\t#else\r\n\tgl_FragColor = vec4(0.0, 0.0, 0.0, alpha);\r\n\t#endif\r\n\r\n\tgl_FragColor.a = alpha;\r\n#else\r\n\r\n\t#if defined(BASIC_RENDER)\r\n\tgl_FragColor = diffuseColor;\r\n\t#elif defined(DIFFUSE_COLOR_RENDER)\r\n\tgl_FragColor = vec4(color.rgb, 1.0);\r\n\t#else\r\n\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n\t#endif\r\n#endif\r\n\r\n}\r\n";
	if(__map_reserved["vrDistortionCorrection.fragment"] != null) _g.setReserved("vrDistortionCorrection.fragment","precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform vec2 LensCenter;\r\nuniform vec2 Scale;\r\nuniform vec2 ScaleIn;\r\nuniform vec4 HmdWarpParam;\r\n\r\nvec2 HmdWarp(vec2 in01) {\r\n\r\n\tvec2 theta = (in01 - LensCenter) * ScaleIn; // Scales to [-1, 1]\r\n\tfloat rSq = theta.x * theta.x + theta.y * theta.y;\r\n\tvec2 rvector = theta * (HmdWarpParam.x + HmdWarpParam.y * rSq + HmdWarpParam.z * rSq * rSq + HmdWarpParam.w * rSq * rSq * rSq);\r\n\treturn LensCenter + Scale * rvector;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tvec2 tc = HmdWarp(vUV);\r\n\tif (tc.x <0.0 || tc.x>1.0 || tc.y<0.0 || tc.y>1.0)\r\n\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n\telse{\r\n\t\tgl_FragColor = vec4(texture2D(textureSampler, tc).rgb, 1.0);\r\n\t}\r\n}"); else _g.h["vrDistortionCorrection.fragment"] = "precision highp float;\r\n\r\n// Samplers\r\nvarying vec2 vUV;\r\nuniform sampler2D textureSampler;\r\nuniform vec2 LensCenter;\r\nuniform vec2 Scale;\r\nuniform vec2 ScaleIn;\r\nuniform vec4 HmdWarpParam;\r\n\r\nvec2 HmdWarp(vec2 in01) {\r\n\r\n\tvec2 theta = (in01 - LensCenter) * ScaleIn; // Scales to [-1, 1]\r\n\tfloat rSq = theta.x * theta.x + theta.y * theta.y;\r\n\tvec2 rvector = theta * (HmdWarpParam.x + HmdWarpParam.y * rSq + HmdWarpParam.z * rSq * rSq + HmdWarpParam.w * rSq * rSq * rSq);\r\n\treturn LensCenter + Scale * rvector;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tvec2 tc = HmdWarp(vUV);\r\n\tif (tc.x <0.0 || tc.x>1.0 || tc.y<0.0 || tc.y>1.0)\r\n\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n\telse{\r\n\t\tgl_FragColor = vec4(texture2D(textureSampler, tc).rgb, 1.0);\r\n\t}\r\n}";
	if(__map_reserved["woodtexture.fragment"] != null) _g.setReserved("woodtexture.fragment","precision highp float;\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform float ampScale;\r\nuniform vec3 woodColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main(void) {\r\n\tfloat ratioy = mod(vUV.x * ampScale, 2.0 + fbm(vUV * 0.8));\r\n\tvec3 wood = woodColor * ratioy;\r\n\tgl_FragColor = vec4(wood, 1.0);\r\n}"); else _g.h["woodtexture.fragment"] = "precision highp float;\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform float ampScale;\r\nuniform vec3 woodColor;\r\n\r\nfloat rand(vec2 n) {\r\n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n\tconst vec2 d = vec2(0.0, 1.0);\r\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n\tfloat total = 0.0, amplitude = 1.0;\r\n\tfor (int i = 0; i < 4; i++) {\r\n\t\ttotal += noise(n) * amplitude;\r\n\t\tn += n;\r\n\t\tamplitude *= 0.5;\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nvoid main(void) {\r\n\tfloat ratioy = mod(vUV.x * ampScale, 2.0 + fbm(vUV * 0.8));\r\n\tvec3 wood = woodColor * ratioy;\r\n\tgl_FragColor = vec4(wood, 1.0);\r\n}";
	if(__map_reserved["compose.fragment"] != null) _g.setReserved("compose.fragment","#ifdef GL_ES\nprecision highp float;\n#endif\n\n// Samplers\nvarying vec2 vUV;\nuniform sampler2D textureSampler;\nuniform sampler2D sceneSampler;\n\n// Parameters\nuniform vec2 screenSize;\nuniform float sceneIntensity;\nuniform float glowIntensity;\nuniform float highlightIntensity;\n\nvoid main(void) \n{\n\tvec4 orig = texture2D(sceneSampler, vUV);\n\tvec4 blur = texture2D(textureSampler, vUV);\n\n\tvec4 final = sceneIntensity * orig + glowIntensity * blur + highlightIntensity * blur.a;\n\tfinal.a = 1.0;\n\n\tgl_FragColor = final;\n}"); else _g.h["compose.fragment"] = "#ifdef GL_ES\nprecision highp float;\n#endif\n\n// Samplers\nvarying vec2 vUV;\nuniform sampler2D textureSampler;\nuniform sampler2D sceneSampler;\n\n// Parameters\nuniform vec2 screenSize;\nuniform float sceneIntensity;\nuniform float glowIntensity;\nuniform float highlightIntensity;\n\nvoid main(void) \n{\n\tvec4 orig = texture2D(sceneSampler, vUV);\n\tvec4 blur = texture2D(textureSampler, vUV);\n\n\tvec4 final = sceneIntensity * orig + glowIntensity * blur + highlightIntensity * blur.a;\n\tfinal.a = 1.0;\n\n\tgl_FragColor = final;\n}";
	if(__map_reserved["downsample.fragment"] != null) _g.setReserved("downsample.fragment","#ifdef GL_ES\nprecision highp float;\n#endif\n\n// Samplers\nvarying vec2 vUV;\nuniform sampler2D textureSampler;\n\n// Parameters\nuniform vec2 screenSize;\nuniform float highlightThreshold;\n\nfloat highlights(vec3 color)\n{\n\treturn smoothstep(highlightThreshold, 1.0, dot(color, vec3(0.3, 0.59, 0.11)));\n}\n\nvoid main(void) \n{\n\tvec2 texelSize = vec2(1.0 / screenSize.x, 1.0 / screenSize.y);\n\tvec4 baseColor = texture2D(textureSampler, vUV + vec2(-1.0, -1.0) * texelSize) * 0.25;\n\tbaseColor += texture2D(textureSampler, vUV + vec2(1.0, -1.0) * texelSize) * 0.25;\n\tbaseColor += texture2D(textureSampler, vUV + vec2(1.0, 1.0) * texelSize) * 0.25;\n\tbaseColor += texture2D(textureSampler, vUV + vec2(-1.0, 1.0) * texelSize) * 0.25;\n\t\n\tbaseColor.a = highlights(baseColor.rgb);\n\n\tgl_FragColor = baseColor;\n}"); else _g.h["downsample.fragment"] = "#ifdef GL_ES\nprecision highp float;\n#endif\n\n// Samplers\nvarying vec2 vUV;\nuniform sampler2D textureSampler;\n\n// Parameters\nuniform vec2 screenSize;\nuniform float highlightThreshold;\n\nfloat highlights(vec3 color)\n{\n\treturn smoothstep(highlightThreshold, 1.0, dot(color, vec3(0.3, 0.59, 0.11)));\n}\n\nvoid main(void) \n{\n\tvec2 texelSize = vec2(1.0 / screenSize.x, 1.0 / screenSize.y);\n\tvec4 baseColor = texture2D(textureSampler, vUV + vec2(-1.0, -1.0) * texelSize) * 0.25;\n\tbaseColor += texture2D(textureSampler, vUV + vec2(1.0, -1.0) * texelSize) * 0.25;\n\tbaseColor += texture2D(textureSampler, vUV + vec2(1.0, 1.0) * texelSize) * 0.25;\n\tbaseColor += texture2D(textureSampler, vUV + vec2(-1.0, 1.0) * texelSize) * 0.25;\n\t\n\tbaseColor.a = highlights(baseColor.rgb);\n\n\tgl_FragColor = baseColor;\n}";
	if(__map_reserved["cellShading.vertex"] != null) _g.setReserved("cellShading.vertex","\n #ifdef GL_ES \n precision highp float; \n #endif \n attribute vec3 position; \n attribute vec3 normal; \n attribute vec2 uv; \n uniform mat4 world; \n uniform mat4 viewProjection; \n varying vec3 vPositionW; \n varying vec3 vNormalW; \n varying vec2 vUV; \n void main(void) { \n vec4 outPosition = viewProjection * world * vec4(position, 1.0); \n gl_Position = outPosition; \n vPositionW = vec3(world * vec4(position, 1.0)); \n vNormalW = normalize(vec3(world * vec4(normal, 0.0))); \n vUV = uv; \n } \n"); else _g.h["cellShading.vertex"] = "\n #ifdef GL_ES \n precision highp float; \n #endif \n attribute vec3 position; \n attribute vec3 normal; \n attribute vec2 uv; \n uniform mat4 world; \n uniform mat4 viewProjection; \n varying vec3 vPositionW; \n varying vec3 vNormalW; \n varying vec2 vUV; \n void main(void) { \n vec4 outPosition = viewProjection * world * vec4(position, 1.0); \n gl_Position = outPosition; \n vPositionW = vec3(world * vec4(position, 1.0)); \n vNormalW = normalize(vec3(world * vec4(normal, 0.0))); \n vUV = uv; \n } \n";
	if(__map_reserved["cellShading.fragment"] != null) _g.setReserved("cellShading.fragment","\n #ifdef GL_ES \n precision highp float; \n #endif \n varying vec3 vPositionW; \n varying vec3 vNormalW; \n varying vec2 vUV; \n uniform float ToonThresholds[4]; \n uniform float ToonBrightnessLevels[5]; \n uniform vec3 vLightPosition; \n uniform vec3 vLightColor; \n uniform sampler2D textureSampler; \n void main(void) { \n vec3 lightVectorW = normalize(vLightPosition - vPositionW); \n float ndl = max(0., dot(vNormalW, lightVectorW)); \n vec3 color = texture2D(textureSampler, vUV).rgb * vLightColor; \n if (ndl > ToonThresholds[0]) { color *= ToonBrightnessLevels[0]; } \n else if (ndl > ToonThresholds[1]) { \n color *= ToonBrightnessLevels[1]; } \n else if (ndl > ToonThresholds[2]) { color *= ToonBrightnessLevels[2]; } \n else if (ndl > ToonThresholds[3]) { color *= ToonBrightnessLevels[3]; } \n else { color *= ToonBrightnessLevels[4]; } \n gl_FragColor = vec4(color, 1.); \n } \n"); else _g.h["cellShading.fragment"] = "\n #ifdef GL_ES \n precision highp float; \n #endif \n varying vec3 vPositionW; \n varying vec3 vNormalW; \n varying vec2 vUV; \n uniform float ToonThresholds[4]; \n uniform float ToonBrightnessLevels[5]; \n uniform vec3 vLightPosition; \n uniform vec3 vLightColor; \n uniform sampler2D textureSampler; \n void main(void) { \n vec3 lightVectorW = normalize(vLightPosition - vPositionW); \n float ndl = max(0., dot(vNormalW, lightVectorW)); \n vec3 color = texture2D(textureSampler, vUV).rgb * vLightColor; \n if (ndl > ToonThresholds[0]) { color *= ToonBrightnessLevels[0]; } \n else if (ndl > ToonThresholds[1]) { \n color *= ToonBrightnessLevels[1]; } \n else if (ndl > ToonThresholds[2]) { color *= ToonBrightnessLevels[2]; } \n else if (ndl > ToonThresholds[3]) { color *= ToonBrightnessLevels[3]; } \n else { color *= ToonBrightnessLevels[4]; } \n gl_FragColor = vec4(color, 1.); \n } \n";
	if(__map_reserved["clouds.fragment"] != null) _g.setReserved("clouds.fragment","\n#ifdef GL_ES\nprecision mediump float;\n#endif\nvarying vec2 vUV;\nuniform vec3 fogColor;\nuniform float fogNear;\nuniform float fogFar;\nuniform sampler2D textureSampler;\nvoid main(void) {\n\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\tfloat fogFactor = smoothstep(fogNear, fogFar, depth);\n\tgl_FragColor = texture2D(textureSampler, vUV);\n\tgl_FragColor.w *= pow(abs(gl_FragCoord.z), 20.0);\n\tgl_FragColor = mix(gl_FragColor, vec4(fogColor, gl_FragColor.w), fogFactor);\n}"); else _g.h["clouds.fragment"] = "\n#ifdef GL_ES\nprecision mediump float;\n#endif\nvarying vec2 vUV;\nuniform vec3 fogColor;\nuniform float fogNear;\nuniform float fogFar;\nuniform sampler2D textureSampler;\nvoid main(void) {\n\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\tfloat fogFactor = smoothstep(fogNear, fogFar, depth);\n\tgl_FragColor = texture2D(textureSampler, vUV);\n\tgl_FragColor.w *= pow(abs(gl_FragCoord.z), 20.0);\n\tgl_FragColor = mix(gl_FragColor, vec4(fogColor, gl_FragColor.w), fogFactor);\n}";
	if(__map_reserved["clouds.vertex"] != null) _g.setReserved("clouds.vertex","\n#ifdef GL_ES\nprecision mediump float;\n#endif\nattribute vec3 position;\nattribute vec2 uv;\nuniform mat4 worldViewProjection;\nvarying vec2 vUV;\nvoid main(void) {\n\tgl_Position = worldViewProjection * vec4(position, 1.0);\n\tvUV = uv;\n}"); else _g.h["clouds.vertex"] = "\n#ifdef GL_ES\nprecision mediump float;\n#endif\nattribute vec3 position;\nattribute vec2 uv;\nuniform mat4 worldViewProjection;\nvarying vec2 vUV;\nvoid main(void) {\n\tgl_Position = worldViewProjection * vec4(position, 1.0);\n\tvUV = uv;\n}";
	$r = _g;
	return $r;
}(this));
com_babylonhx_materials_StandardMaterialDefines.DIFFUSE = 0;
com_babylonhx_materials_StandardMaterialDefines.AMBIENT = 1;
com_babylonhx_materials_StandardMaterialDefines.OPACITY = 2;
com_babylonhx_materials_StandardMaterialDefines.OPACITYRGB = 3;
com_babylonhx_materials_StandardMaterialDefines.REFLECTION = 4;
com_babylonhx_materials_StandardMaterialDefines.EMISSIVE = 5;
com_babylonhx_materials_StandardMaterialDefines.SPECULAR = 6;
com_babylonhx_materials_StandardMaterialDefines.BUMP = 7;
com_babylonhx_materials_StandardMaterialDefines.SPECULAROVERALPHA = 8;
com_babylonhx_materials_StandardMaterialDefines.CLIPPLANE = 9;
com_babylonhx_materials_StandardMaterialDefines.ALPHATEST = 10;
com_babylonhx_materials_StandardMaterialDefines.ALPHAFROMDIFFUSE = 11;
com_babylonhx_materials_StandardMaterialDefines.POINTSIZE = 12;
com_babylonhx_materials_StandardMaterialDefines.FOG = 13;
com_babylonhx_materials_StandardMaterialDefines.LIGHT0 = 14;
com_babylonhx_materials_StandardMaterialDefines.LIGHT1 = 15;
com_babylonhx_materials_StandardMaterialDefines.LIGHT2 = 16;
com_babylonhx_materials_StandardMaterialDefines.LIGHT3 = 17;
com_babylonhx_materials_StandardMaterialDefines.SPOTLIGHT0 = 18;
com_babylonhx_materials_StandardMaterialDefines.SPOTLIGHT1 = 19;
com_babylonhx_materials_StandardMaterialDefines.SPOTLIGHT2 = 20;
com_babylonhx_materials_StandardMaterialDefines.SPOTLIGHT3 = 21;
com_babylonhx_materials_StandardMaterialDefines.HEMILIGHT0 = 22;
com_babylonhx_materials_StandardMaterialDefines.HEMILIGHT1 = 23;
com_babylonhx_materials_StandardMaterialDefines.HEMILIGHT2 = 24;
com_babylonhx_materials_StandardMaterialDefines.HEMILIGHT3 = 25;
com_babylonhx_materials_StandardMaterialDefines.POINTLIGHT0 = 26;
com_babylonhx_materials_StandardMaterialDefines.POINTLIGHT1 = 27;
com_babylonhx_materials_StandardMaterialDefines.POINTLIGHT2 = 28;
com_babylonhx_materials_StandardMaterialDefines.POINTLIGHT3 = 29;
com_babylonhx_materials_StandardMaterialDefines.DIRLIGHT0 = 30;
com_babylonhx_materials_StandardMaterialDefines.DIRLIGHT1 = 31;
com_babylonhx_materials_StandardMaterialDefines.DIRLIGHT2 = 32;
com_babylonhx_materials_StandardMaterialDefines.DIRLIGHT3 = 33;
com_babylonhx_materials_StandardMaterialDefines.SPECULARTERM = 34;
com_babylonhx_materials_StandardMaterialDefines.SHADOW0 = 35;
com_babylonhx_materials_StandardMaterialDefines.SHADOW1 = 36;
com_babylonhx_materials_StandardMaterialDefines.SHADOW2 = 37;
com_babylonhx_materials_StandardMaterialDefines.SHADOW3 = 38;
com_babylonhx_materials_StandardMaterialDefines.SHADOWS = 39;
com_babylonhx_materials_StandardMaterialDefines.SHADOWVSM0 = 40;
com_babylonhx_materials_StandardMaterialDefines.SHADOWVSM1 = 41;
com_babylonhx_materials_StandardMaterialDefines.SHADOWVSM2 = 42;
com_babylonhx_materials_StandardMaterialDefines.SHADOWVSM3 = 43;
com_babylonhx_materials_StandardMaterialDefines.SHADOWPCF0 = 44;
com_babylonhx_materials_StandardMaterialDefines.SHADOWPCF1 = 45;
com_babylonhx_materials_StandardMaterialDefines.SHADOWPCF2 = 46;
com_babylonhx_materials_StandardMaterialDefines.SHADOWPCF3 = 47;
com_babylonhx_materials_StandardMaterialDefines.DIFFUSEFRESNEL = 48;
com_babylonhx_materials_StandardMaterialDefines.OPACITYFRESNEL = 49;
com_babylonhx_materials_StandardMaterialDefines.REFLECTIONFRESNEL = 50;
com_babylonhx_materials_StandardMaterialDefines.EMISSIVEFRESNEL = 51;
com_babylonhx_materials_StandardMaterialDefines.FRESNEL = 52;
com_babylonhx_materials_StandardMaterialDefines.NORMAL = 53;
com_babylonhx_materials_StandardMaterialDefines.UV1 = 54;
com_babylonhx_materials_StandardMaterialDefines.UV2 = 55;
com_babylonhx_materials_StandardMaterialDefines.VERTEXCOLOR = 56;
com_babylonhx_materials_StandardMaterialDefines.VERTEXALPHA = 57;
com_babylonhx_materials_StandardMaterialDefines.INSTANCES = 58;
com_babylonhx_materials_StandardMaterialDefines.GLOSSINESS = 59;
com_babylonhx_materials_StandardMaterialDefines.ROUGHNESS = 60;
com_babylonhx_materials_StandardMaterialDefines.EMISSIVEASILLUMINATION = 61;
com_babylonhx_materials_StandardMaterialDefines.LINKEMISSIVEWITHDIFFUSE = 62;
com_babylonhx_materials_StandardMaterialDefines.REFLECTIONFRESNELFROMSPECULAR = 63;
com_babylonhx_materials_StandardMaterialDefines.LIGHTMAP = 64;
com_babylonhx_materials_StandardMaterialDefines.USELIGHTMAPASSHADOWMAP = 65;
com_babylonhx_materials_StandardMaterialDefines.REFLECTIONMAP_3D = 66;
com_babylonhx_materials_StandardMaterialDefines.REFLECTIONMAP_SPHERICAL = 67;
com_babylonhx_materials_StandardMaterialDefines.REFLECTIONMAP_PLANAR = 68;
com_babylonhx_materials_StandardMaterialDefines.REFLECTIONMAP_CUBIC = 69;
com_babylonhx_materials_StandardMaterialDefines.REFLECTIONMAP_PROJECTION = 70;
com_babylonhx_materials_StandardMaterialDefines.REFLECTIONMAP_SKYBOX = 71;
com_babylonhx_materials_StandardMaterialDefines.REFLECTIONMAP_EXPLICIT = 72;
com_babylonhx_materials_StandardMaterialDefines.REFLECTIONMAP_EQUIRECTANGULAR = 73;
com_babylonhx_materials_StandardMaterialDefines.INVERTCUBICMAP = 74;
com_babylonhx_materials_StandardMaterialDefines.LOGARITHMICDEPTH = 75;
com_babylonhx_math_Axis.X = new com_babylonhx_math_Vector3(1,0,0);
com_babylonhx_math_Axis.Y = new com_babylonhx_math_Vector3(0,1,0);
com_babylonhx_math_Axis.Z = new com_babylonhx_math_Vector3(0,0,1);
com_babylonhx_mesh_MeshBuilder.CreateDecal_target = new com_babylonhx_math_Vector3(0,0,1);
com_babylonhx_mesh_MeshBuilder.CreateDecal_cameraWorldTarget = new com_babylonhx_math_Vector3(0,0,0);
com_babylonhx_mesh_MeshBuilder.decalWorldMatrix = new com_babylonhx_math_Matrix();
com_babylonhx_mesh_MeshBuilder.inverseDecalWorldMatrix = new com_babylonhx_math_Matrix();
com_babylonhx_mesh_MeshBuilder.CreateDecal_indices = [];
com_babylonhx_mesh_MeshBuilder.CreateDecal_positions = [];
com_babylonhx_mesh_MeshBuilder.CreateDecal_normals = [];
com_babylonhx_mesh_MeshBuilder.CreateDecal_meshWorldMatrix = new com_babylonhx_math_Matrix();
com_babylonhx_mesh_MeshBuilder.CreateDecal_transformMatrix = new com_babylonhx_math_Matrix();
com_babylonhx_mesh_MeshBuilder.CreateDecal_vertexData = new com_babylonhx_mesh_VertexData();
com_babylonhx_mesh_VertexBuffer.PositionKind = "position";
com_babylonhx_mesh_VertexBuffer.NormalKind = "normal";
com_babylonhx_mesh_VertexBuffer.UVKind = "uv";
com_babylonhx_mesh_VertexBuffer.UV2Kind = "uv2";
com_babylonhx_mesh_VertexBuffer.UV3Kind = "uv3";
com_babylonhx_mesh_VertexBuffer.UV4Kind = "uv4";
com_babylonhx_mesh_VertexBuffer.UV5Kind = "uv5";
com_babylonhx_mesh_VertexBuffer.UV6Kind = "uv6";
com_babylonhx_mesh_VertexBuffer.ColorKind = "color";
com_babylonhx_mesh_VertexBuffer.MatricesIndicesKind = "matricesIndices";
com_babylonhx_mesh_VertexBuffer.MatricesWeightsKind = "matricesWeights";
com_babylonhx_mesh_VertexBuffer.MatricesIndicesExtraKind = "matricesIndicesExtra";
com_babylonhx_mesh_VertexBuffer.MatricesWeightsExtraKind = "matricesWeightsExtra";
com_babylonhx_mesh_VertexBuffer.count = 0;
com_babylonhx_mesh_simplification_SimplificationSettings.QUADRATIC = 0;
com_babylonhx_physics_PhysicsEngine.NoImpostor = 0;
com_babylonhx_physics_PhysicsEngine.SphereImpostor = 1;
com_babylonhx_physics_PhysicsEngine.BoxImpostor = 2;
com_babylonhx_physics_PhysicsEngine.PlaneImpostor = 3;
com_babylonhx_physics_PhysicsEngine.MeshImpostor = 4;
com_babylonhx_physics_PhysicsEngine.CapsuleImpostor = 5;
com_babylonhx_physics_PhysicsEngine.ConeImpostor = 6;
com_babylonhx_physics_PhysicsEngine.CylinderImpostor = 7;
com_babylonhx_physics_PhysicsEngine.ConvexHullImpostor = 8;
com_babylonhx_physics_PhysicsEngine.Epsilon = 0.001;
com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipeline.PASS_EFFECT_NAME = "passEffect";
com_babylonhx_postprocess_renderpipeline_PostProcessRenderPipeline.PASS_SAMPLER_NAME = "passSampler";
com_babylonhx_tools_SmartArray._GlobalId = 0;
com_babylonhx_utils_Scancodes.MASK = 1073741824;
com_babylonhx_utils_Scancodes.unknown = 0;
com_babylonhx_utils_Scancodes.key_a = 4;
com_babylonhx_utils_Scancodes.key_b = 5;
com_babylonhx_utils_Scancodes.key_c = 6;
com_babylonhx_utils_Scancodes.key_d = 7;
com_babylonhx_utils_Scancodes.key_e = 8;
com_babylonhx_utils_Scancodes.key_f = 9;
com_babylonhx_utils_Scancodes.key_g = 10;
com_babylonhx_utils_Scancodes.key_h = 11;
com_babylonhx_utils_Scancodes.key_i = 12;
com_babylonhx_utils_Scancodes.key_j = 13;
com_babylonhx_utils_Scancodes.key_k = 14;
com_babylonhx_utils_Scancodes.key_l = 15;
com_babylonhx_utils_Scancodes.key_m = 16;
com_babylonhx_utils_Scancodes.key_n = 17;
com_babylonhx_utils_Scancodes.key_o = 18;
com_babylonhx_utils_Scancodes.key_p = 19;
com_babylonhx_utils_Scancodes.key_q = 20;
com_babylonhx_utils_Scancodes.key_r = 21;
com_babylonhx_utils_Scancodes.key_s = 22;
com_babylonhx_utils_Scancodes.key_t = 23;
com_babylonhx_utils_Scancodes.key_u = 24;
com_babylonhx_utils_Scancodes.key_v = 25;
com_babylonhx_utils_Scancodes.key_w = 26;
com_babylonhx_utils_Scancodes.key_x = 27;
com_babylonhx_utils_Scancodes.key_y = 28;
com_babylonhx_utils_Scancodes.key_z = 29;
com_babylonhx_utils_Scancodes.key_1 = 30;
com_babylonhx_utils_Scancodes.key_2 = 31;
com_babylonhx_utils_Scancodes.key_3 = 32;
com_babylonhx_utils_Scancodes.key_4 = 33;
com_babylonhx_utils_Scancodes.key_5 = 34;
com_babylonhx_utils_Scancodes.key_6 = 35;
com_babylonhx_utils_Scancodes.key_7 = 36;
com_babylonhx_utils_Scancodes.key_8 = 37;
com_babylonhx_utils_Scancodes.key_9 = 38;
com_babylonhx_utils_Scancodes.key_0 = 39;
com_babylonhx_utils_Scancodes.enter = 40;
com_babylonhx_utils_Scancodes.escape = 41;
com_babylonhx_utils_Scancodes.backspace = 42;
com_babylonhx_utils_Scancodes.tab = 43;
com_babylonhx_utils_Scancodes.space = 44;
com_babylonhx_utils_Scancodes.minus = 45;
com_babylonhx_utils_Scancodes.equals = 46;
com_babylonhx_utils_Scancodes.leftbracket = 47;
com_babylonhx_utils_Scancodes.rightbracket = 48;
com_babylonhx_utils_Scancodes.backslash = 49;
com_babylonhx_utils_Scancodes.nonushash = 50;
com_babylonhx_utils_Scancodes.semicolon = 51;
com_babylonhx_utils_Scancodes.apostrophe = 52;
com_babylonhx_utils_Scancodes.grave = 53;
com_babylonhx_utils_Scancodes.comma = 54;
com_babylonhx_utils_Scancodes.period = 55;
com_babylonhx_utils_Scancodes.slash = 56;
com_babylonhx_utils_Scancodes.capslock = 57;
com_babylonhx_utils_Scancodes.f1 = 58;
com_babylonhx_utils_Scancodes.f2 = 59;
com_babylonhx_utils_Scancodes.f3 = 60;
com_babylonhx_utils_Scancodes.f4 = 61;
com_babylonhx_utils_Scancodes.f5 = 62;
com_babylonhx_utils_Scancodes.f6 = 63;
com_babylonhx_utils_Scancodes.f7 = 64;
com_babylonhx_utils_Scancodes.f8 = 65;
com_babylonhx_utils_Scancodes.f9 = 66;
com_babylonhx_utils_Scancodes.f10 = 67;
com_babylonhx_utils_Scancodes.f11 = 68;
com_babylonhx_utils_Scancodes.f12 = 69;
com_babylonhx_utils_Scancodes.printscreen = 70;
com_babylonhx_utils_Scancodes.scrolllock = 71;
com_babylonhx_utils_Scancodes.pause = 72;
com_babylonhx_utils_Scancodes.insert = 73;
com_babylonhx_utils_Scancodes.home = 74;
com_babylonhx_utils_Scancodes.pageup = 75;
com_babylonhx_utils_Scancodes["delete"] = 76;
com_babylonhx_utils_Scancodes.end = 77;
com_babylonhx_utils_Scancodes.pagedown = 78;
com_babylonhx_utils_Scancodes.right = 79;
com_babylonhx_utils_Scancodes.left = 80;
com_babylonhx_utils_Scancodes.down = 81;
com_babylonhx_utils_Scancodes.up = 82;
com_babylonhx_utils_Scancodes.numlockclear = 83;
com_babylonhx_utils_Scancodes.kp_divide = 84;
com_babylonhx_utils_Scancodes.kp_multiply = 85;
com_babylonhx_utils_Scancodes.kp_minus = 86;
com_babylonhx_utils_Scancodes.kp_plus = 87;
com_babylonhx_utils_Scancodes.kp_enter = 88;
com_babylonhx_utils_Scancodes.kp_1 = 89;
com_babylonhx_utils_Scancodes.kp_2 = 90;
com_babylonhx_utils_Scancodes.kp_3 = 91;
com_babylonhx_utils_Scancodes.kp_4 = 92;
com_babylonhx_utils_Scancodes.kp_5 = 93;
com_babylonhx_utils_Scancodes.kp_6 = 94;
com_babylonhx_utils_Scancodes.kp_7 = 95;
com_babylonhx_utils_Scancodes.kp_8 = 96;
com_babylonhx_utils_Scancodes.kp_9 = 97;
com_babylonhx_utils_Scancodes.kp_0 = 98;
com_babylonhx_utils_Scancodes.kp_period = 99;
com_babylonhx_utils_Scancodes.nonusbackslash = 100;
com_babylonhx_utils_Scancodes.application = 101;
com_babylonhx_utils_Scancodes.power = 102;
com_babylonhx_utils_Scancodes.kp_equals = 103;
com_babylonhx_utils_Scancodes.f13 = 104;
com_babylonhx_utils_Scancodes.f14 = 105;
com_babylonhx_utils_Scancodes.f15 = 106;
com_babylonhx_utils_Scancodes.f16 = 107;
com_babylonhx_utils_Scancodes.f17 = 108;
com_babylonhx_utils_Scancodes.f18 = 109;
com_babylonhx_utils_Scancodes.f19 = 110;
com_babylonhx_utils_Scancodes.f20 = 111;
com_babylonhx_utils_Scancodes.f21 = 112;
com_babylonhx_utils_Scancodes.f22 = 113;
com_babylonhx_utils_Scancodes.f23 = 114;
com_babylonhx_utils_Scancodes.f24 = 115;
com_babylonhx_utils_Scancodes.execute = 116;
com_babylonhx_utils_Scancodes.help = 117;
com_babylonhx_utils_Scancodes.menu = 118;
com_babylonhx_utils_Scancodes.select = 119;
com_babylonhx_utils_Scancodes.stop = 120;
com_babylonhx_utils_Scancodes.again = 121;
com_babylonhx_utils_Scancodes.undo = 122;
com_babylonhx_utils_Scancodes.cut = 123;
com_babylonhx_utils_Scancodes.copy = 124;
com_babylonhx_utils_Scancodes.paste = 125;
com_babylonhx_utils_Scancodes.find = 126;
com_babylonhx_utils_Scancodes.mute = 127;
com_babylonhx_utils_Scancodes.volumeup = 128;
com_babylonhx_utils_Scancodes.volumedown = 129;
com_babylonhx_utils_Scancodes.kp_comma = 133;
com_babylonhx_utils_Scancodes.kp_equalsas400 = 134;
com_babylonhx_utils_Scancodes.international1 = 135;
com_babylonhx_utils_Scancodes.international2 = 136;
com_babylonhx_utils_Scancodes.international3 = 137;
com_babylonhx_utils_Scancodes.international4 = 138;
com_babylonhx_utils_Scancodes.international5 = 139;
com_babylonhx_utils_Scancodes.international6 = 140;
com_babylonhx_utils_Scancodes.international7 = 141;
com_babylonhx_utils_Scancodes.international8 = 142;
com_babylonhx_utils_Scancodes.international9 = 143;
com_babylonhx_utils_Scancodes.lang1 = 144;
com_babylonhx_utils_Scancodes.lang2 = 145;
com_babylonhx_utils_Scancodes.lang3 = 146;
com_babylonhx_utils_Scancodes.lang4 = 147;
com_babylonhx_utils_Scancodes.lang5 = 148;
com_babylonhx_utils_Scancodes.lang6 = 149;
com_babylonhx_utils_Scancodes.lang7 = 150;
com_babylonhx_utils_Scancodes.lang8 = 151;
com_babylonhx_utils_Scancodes.lang9 = 152;
com_babylonhx_utils_Scancodes.alterase = 153;
com_babylonhx_utils_Scancodes.sysreq = 154;
com_babylonhx_utils_Scancodes.cancel = 155;
com_babylonhx_utils_Scancodes.clear = 156;
com_babylonhx_utils_Scancodes.prior = 157;
com_babylonhx_utils_Scancodes.return2 = 158;
com_babylonhx_utils_Scancodes.separator = 159;
com_babylonhx_utils_Scancodes.out = 160;
com_babylonhx_utils_Scancodes.oper = 161;
com_babylonhx_utils_Scancodes.clearagain = 162;
com_babylonhx_utils_Scancodes.crsel = 163;
com_babylonhx_utils_Scancodes.exsel = 164;
com_babylonhx_utils_Scancodes.kp_00 = 176;
com_babylonhx_utils_Scancodes.kp_000 = 177;
com_babylonhx_utils_Scancodes.thousandsseparator = 178;
com_babylonhx_utils_Scancodes.decimalseparator = 179;
com_babylonhx_utils_Scancodes.currencyunit = 180;
com_babylonhx_utils_Scancodes.currencysubunit = 181;
com_babylonhx_utils_Scancodes.kp_leftparen = 182;
com_babylonhx_utils_Scancodes.kp_rightparen = 183;
com_babylonhx_utils_Scancodes.kp_leftbrace = 184;
com_babylonhx_utils_Scancodes.kp_rightbrace = 185;
com_babylonhx_utils_Scancodes.kp_tab = 186;
com_babylonhx_utils_Scancodes.kp_backspace = 187;
com_babylonhx_utils_Scancodes.kp_a = 188;
com_babylonhx_utils_Scancodes.kp_b = 189;
com_babylonhx_utils_Scancodes.kp_c = 190;
com_babylonhx_utils_Scancodes.kp_d = 191;
com_babylonhx_utils_Scancodes.kp_e = 192;
com_babylonhx_utils_Scancodes.kp_f = 193;
com_babylonhx_utils_Scancodes.kp_xor = 194;
com_babylonhx_utils_Scancodes.kp_power = 195;
com_babylonhx_utils_Scancodes.kp_percent = 196;
com_babylonhx_utils_Scancodes.kp_less = 197;
com_babylonhx_utils_Scancodes.kp_greater = 198;
com_babylonhx_utils_Scancodes.kp_ampersand = 199;
com_babylonhx_utils_Scancodes.kp_dblampersand = 200;
com_babylonhx_utils_Scancodes.kp_verticalbar = 201;
com_babylonhx_utils_Scancodes.kp_dblverticalbar = 202;
com_babylonhx_utils_Scancodes.kp_colon = 203;
com_babylonhx_utils_Scancodes.kp_hash = 204;
com_babylonhx_utils_Scancodes.kp_space = 205;
com_babylonhx_utils_Scancodes.kp_at = 206;
com_babylonhx_utils_Scancodes.kp_exclam = 207;
com_babylonhx_utils_Scancodes.kp_memstore = 208;
com_babylonhx_utils_Scancodes.kp_memrecall = 209;
com_babylonhx_utils_Scancodes.kp_memclear = 210;
com_babylonhx_utils_Scancodes.kp_memadd = 211;
com_babylonhx_utils_Scancodes.kp_memsubtract = 212;
com_babylonhx_utils_Scancodes.kp_memmultiply = 213;
com_babylonhx_utils_Scancodes.kp_memdivide = 214;
com_babylonhx_utils_Scancodes.kp_plusminus = 215;
com_babylonhx_utils_Scancodes.kp_clear = 216;
com_babylonhx_utils_Scancodes.kp_clearentry = 217;
com_babylonhx_utils_Scancodes.kp_binary = 218;
com_babylonhx_utils_Scancodes.kp_octal = 219;
com_babylonhx_utils_Scancodes.kp_decimal = 220;
com_babylonhx_utils_Scancodes.kp_hexadecimal = 221;
com_babylonhx_utils_Scancodes.lctrl = 224;
com_babylonhx_utils_Scancodes.lshift = 225;
com_babylonhx_utils_Scancodes.lalt = 226;
com_babylonhx_utils_Scancodes.lmeta = 227;
com_babylonhx_utils_Scancodes.rctrl = 228;
com_babylonhx_utils_Scancodes.rshift = 229;
com_babylonhx_utils_Scancodes.ralt = 230;
com_babylonhx_utils_Scancodes.rmeta = 231;
com_babylonhx_utils_Scancodes.mode = 257;
com_babylonhx_utils_Scancodes.audionext = 258;
com_babylonhx_utils_Scancodes.audioprev = 259;
com_babylonhx_utils_Scancodes.audiostop = 260;
com_babylonhx_utils_Scancodes.audioplay = 261;
com_babylonhx_utils_Scancodes.audiomute = 262;
com_babylonhx_utils_Scancodes.mediaselect = 263;
com_babylonhx_utils_Scancodes.www = 264;
com_babylonhx_utils_Scancodes.mail = 265;
com_babylonhx_utils_Scancodes.calculator = 266;
com_babylonhx_utils_Scancodes.computer = 267;
com_babylonhx_utils_Scancodes.ac_search = 268;
com_babylonhx_utils_Scancodes.ac_home = 269;
com_babylonhx_utils_Scancodes.ac_back = 270;
com_babylonhx_utils_Scancodes.ac_forward = 271;
com_babylonhx_utils_Scancodes.ac_stop = 272;
com_babylonhx_utils_Scancodes.ac_refresh = 273;
com_babylonhx_utils_Scancodes.ac_bookmarks = 274;
com_babylonhx_utils_Scancodes.brightnessdown = 275;
com_babylonhx_utils_Scancodes.brightnessup = 276;
com_babylonhx_utils_Scancodes.displayswitch = 277;
com_babylonhx_utils_Scancodes.kbdillumtoggle = 278;
com_babylonhx_utils_Scancodes.kbdillumdown = 279;
com_babylonhx_utils_Scancodes.kbdillumup = 280;
com_babylonhx_utils_Scancodes.eject = 281;
com_babylonhx_utils_Scancodes.sleep = 282;
com_babylonhx_utils_Scancodes.app1 = 283;
com_babylonhx_utils_Scancodes.app2 = 284;
com_babylonhx_utils_Scancodes.scancode_names = [null,null,null,null,"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","1","2","3","4","5","6","7","8","9","0","Enter","Escape","Backspace","Tab","Space","-","=","[","]","\\","#",";","'","`",",",".","/","CapsLock","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","PrintScreen","ScrollLock","Pause","Insert","Home","PageUp","Delete","End","PageDown","Right","Left","Down","Up","Numlock","Keypad /","Keypad *","Keypad -","Keypad +","Keypad Enter","Keypad 1","Keypad 2","Keypad 3","Keypad 4","Keypad 5","Keypad 6","Keypad 7","Keypad 8","Keypad 9","Keypad 0","Keypad .",null,"Application","Power","Keypad =","F13","F14","F15","F16","F17","F18","F19","F20","F21","F22","F23","F24","Execute","Help","Menu","Select","Stop","Again","Undo","Cut","Copy","Paste","Find","Mute","VolumeUp","VolumeDown",null,null,null,"Keypad ,","Keypad = (AS400)",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"AltErase","SysReq","Cancel","Clear","Prior","Enter","Separator","Out","Oper","Clear / Again","CrSel","ExSel",null,null,null,null,null,null,null,null,null,null,null,"Keypad 00","Keypad 000","ThousandsSeparator","DecimalSeparator","CurrencyUnit","CurrencySubUnit","Keypad (","Keypad )","Keypad {","Keypad }","Keypad Tab","Keypad Backspace","Keypad A","Keypad B","Keypad C","Keypad D","Keypad E","Keypad F","Keypad XOR","Keypad ^","Keypad %","Keypad <","Keypad >","Keypad &","Keypad &&","Keypad |","Keypad ||","Keypad :","Keypad #","Keypad Space","Keypad @","Keypad !","Keypad MemStore","Keypad MemRecall","Keypad MemClear","Keypad MemAdd","Keypad MemSubtract","Keypad MemMultiply","Keypad MemDivide","Keypad +/-","Keypad Clear","Keypad ClearEntry","Keypad Binary","Keypad Octal","Keypad Decimal","Keypad Hexadecimal",null,null,"Left Ctrl","Left Shift","Left Alt","Left Meta","Right Ctrl","Right Shift","Right Alt","Right Meta",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"ModeSwitch","AudioNext","AudioPrev","AudioStop","AudioPlay","AudioMute","MediaSelect","WWW","Mail","Calculator","Computer","AC Search","AC Home","AC Back","AC Forward","AC Stop","AC Refresh","AC Bookmarks","BrightnessDown","BrightnessUp","DisplaySwitch","KBDIllumToggle","KBDIllumDown","KBDIllumUp","Eject","Sleep"];
com_babylonhx_utils_Keycodes.unknown = 0;
com_babylonhx_utils_Keycodes.enter = 13;
com_babylonhx_utils_Keycodes.escape = 27;
com_babylonhx_utils_Keycodes.backspace = 8;
com_babylonhx_utils_Keycodes.tab = 9;
com_babylonhx_utils_Keycodes.space = 32;
com_babylonhx_utils_Keycodes.exclaim = 33;
com_babylonhx_utils_Keycodes.quotedbl = 34;
com_babylonhx_utils_Keycodes.hash = 35;
com_babylonhx_utils_Keycodes.percent = 37;
com_babylonhx_utils_Keycodes.dollar = 36;
com_babylonhx_utils_Keycodes.ampersand = 38;
com_babylonhx_utils_Keycodes.quote = 39;
com_babylonhx_utils_Keycodes.leftparen = 40;
com_babylonhx_utils_Keycodes.rightparen = 41;
com_babylonhx_utils_Keycodes.asterisk = 42;
com_babylonhx_utils_Keycodes.plus = 43;
com_babylonhx_utils_Keycodes.comma = 44;
com_babylonhx_utils_Keycodes.minus = 45;
com_babylonhx_utils_Keycodes.period = 46;
com_babylonhx_utils_Keycodes.slash = 47;
com_babylonhx_utils_Keycodes.key_0 = 48;
com_babylonhx_utils_Keycodes.key_1 = 49;
com_babylonhx_utils_Keycodes.key_2 = 50;
com_babylonhx_utils_Keycodes.key_3 = 51;
com_babylonhx_utils_Keycodes.key_4 = 52;
com_babylonhx_utils_Keycodes.key_5 = 53;
com_babylonhx_utils_Keycodes.key_6 = 54;
com_babylonhx_utils_Keycodes.key_7 = 55;
com_babylonhx_utils_Keycodes.key_8 = 56;
com_babylonhx_utils_Keycodes.key_9 = 57;
com_babylonhx_utils_Keycodes.colon = 58;
com_babylonhx_utils_Keycodes.semicolon = 59;
com_babylonhx_utils_Keycodes.less = 60;
com_babylonhx_utils_Keycodes.equals = 61;
com_babylonhx_utils_Keycodes.greater = 62;
com_babylonhx_utils_Keycodes.question = 63;
com_babylonhx_utils_Keycodes.at = 64;
com_babylonhx_utils_Keycodes.leftbracket = 91;
com_babylonhx_utils_Keycodes.backslash = 92;
com_babylonhx_utils_Keycodes.rightbracket = 93;
com_babylonhx_utils_Keycodes.caret = 94;
com_babylonhx_utils_Keycodes.underscore = 95;
com_babylonhx_utils_Keycodes.backquote = 96;
com_babylonhx_utils_Keycodes.key_a = 97;
com_babylonhx_utils_Keycodes.key_b = 98;
com_babylonhx_utils_Keycodes.key_c = 99;
com_babylonhx_utils_Keycodes.key_d = 100;
com_babylonhx_utils_Keycodes.key_e = 101;
com_babylonhx_utils_Keycodes.key_f = 102;
com_babylonhx_utils_Keycodes.key_g = 103;
com_babylonhx_utils_Keycodes.key_h = 104;
com_babylonhx_utils_Keycodes.key_i = 105;
com_babylonhx_utils_Keycodes.key_j = 106;
com_babylonhx_utils_Keycodes.key_k = 107;
com_babylonhx_utils_Keycodes.key_l = 108;
com_babylonhx_utils_Keycodes.key_m = 109;
com_babylonhx_utils_Keycodes.key_n = 110;
com_babylonhx_utils_Keycodes.key_o = 111;
com_babylonhx_utils_Keycodes.key_p = 112;
com_babylonhx_utils_Keycodes.key_q = 113;
com_babylonhx_utils_Keycodes.key_r = 114;
com_babylonhx_utils_Keycodes.key_s = 115;
com_babylonhx_utils_Keycodes.key_t = 116;
com_babylonhx_utils_Keycodes.key_u = 117;
com_babylonhx_utils_Keycodes.key_v = 118;
com_babylonhx_utils_Keycodes.key_w = 119;
com_babylonhx_utils_Keycodes.key_x = 120;
com_babylonhx_utils_Keycodes.key_y = 121;
com_babylonhx_utils_Keycodes.key_z = 122;
com_babylonhx_utils_Keycodes.capslock = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.capslock);
com_babylonhx_utils_Keycodes.f1 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f1);
com_babylonhx_utils_Keycodes.f2 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f2);
com_babylonhx_utils_Keycodes.f3 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f3);
com_babylonhx_utils_Keycodes.f4 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f4);
com_babylonhx_utils_Keycodes.f5 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f5);
com_babylonhx_utils_Keycodes.f6 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f6);
com_babylonhx_utils_Keycodes.f7 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f7);
com_babylonhx_utils_Keycodes.f8 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f8);
com_babylonhx_utils_Keycodes.f9 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f9);
com_babylonhx_utils_Keycodes.f10 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f10);
com_babylonhx_utils_Keycodes.f11 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f11);
com_babylonhx_utils_Keycodes.f12 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f12);
com_babylonhx_utils_Keycodes.printscreen = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.printscreen);
com_babylonhx_utils_Keycodes.scrolllock = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.scrolllock);
com_babylonhx_utils_Keycodes.pause = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.pause);
com_babylonhx_utils_Keycodes.insert = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.insert);
com_babylonhx_utils_Keycodes.home = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.home);
com_babylonhx_utils_Keycodes.pageup = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.pageup);
com_babylonhx_utils_Keycodes["delete"] = 127;
com_babylonhx_utils_Keycodes.end = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.end);
com_babylonhx_utils_Keycodes.pagedown = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.pagedown);
com_babylonhx_utils_Keycodes.right = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.right);
com_babylonhx_utils_Keycodes.left = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.left);
com_babylonhx_utils_Keycodes.down = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.down);
com_babylonhx_utils_Keycodes.up = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.up);
com_babylonhx_utils_Keycodes.numlockclear = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.numlockclear);
com_babylonhx_utils_Keycodes.kp_divide = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_divide);
com_babylonhx_utils_Keycodes.kp_multiply = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_multiply);
com_babylonhx_utils_Keycodes.kp_minus = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_minus);
com_babylonhx_utils_Keycodes.kp_plus = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_plus);
com_babylonhx_utils_Keycodes.kp_enter = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_enter);
com_babylonhx_utils_Keycodes.kp_1 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_1);
com_babylonhx_utils_Keycodes.kp_2 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_2);
com_babylonhx_utils_Keycodes.kp_3 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_3);
com_babylonhx_utils_Keycodes.kp_4 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_4);
com_babylonhx_utils_Keycodes.kp_5 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_5);
com_babylonhx_utils_Keycodes.kp_6 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_6);
com_babylonhx_utils_Keycodes.kp_7 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_7);
com_babylonhx_utils_Keycodes.kp_8 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_8);
com_babylonhx_utils_Keycodes.kp_9 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_9);
com_babylonhx_utils_Keycodes.kp_0 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_0);
com_babylonhx_utils_Keycodes.kp_period = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_period);
com_babylonhx_utils_Keycodes.application = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.application);
com_babylonhx_utils_Keycodes.power = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.power);
com_babylonhx_utils_Keycodes.kp_equals = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_equals);
com_babylonhx_utils_Keycodes.f13 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f13);
com_babylonhx_utils_Keycodes.f14 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f14);
com_babylonhx_utils_Keycodes.f15 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f15);
com_babylonhx_utils_Keycodes.f16 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f16);
com_babylonhx_utils_Keycodes.f17 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f17);
com_babylonhx_utils_Keycodes.f18 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f18);
com_babylonhx_utils_Keycodes.f19 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f19);
com_babylonhx_utils_Keycodes.f20 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f20);
com_babylonhx_utils_Keycodes.f21 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f21);
com_babylonhx_utils_Keycodes.f22 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f22);
com_babylonhx_utils_Keycodes.f23 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f23);
com_babylonhx_utils_Keycodes.f24 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.f24);
com_babylonhx_utils_Keycodes.execute = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.execute);
com_babylonhx_utils_Keycodes.help = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.help);
com_babylonhx_utils_Keycodes.menu = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.menu);
com_babylonhx_utils_Keycodes.select = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.select);
com_babylonhx_utils_Keycodes.stop = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.stop);
com_babylonhx_utils_Keycodes.again = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.again);
com_babylonhx_utils_Keycodes.undo = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.undo);
com_babylonhx_utils_Keycodes.cut = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.cut);
com_babylonhx_utils_Keycodes.copy = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.copy);
com_babylonhx_utils_Keycodes.paste = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.paste);
com_babylonhx_utils_Keycodes.find = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.find);
com_babylonhx_utils_Keycodes.mute = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.mute);
com_babylonhx_utils_Keycodes.volumeup = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.volumeup);
com_babylonhx_utils_Keycodes.volumedown = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.volumedown);
com_babylonhx_utils_Keycodes.kp_comma = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_comma);
com_babylonhx_utils_Keycodes.kp_equalsas400 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_equalsas400);
com_babylonhx_utils_Keycodes.alterase = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.alterase);
com_babylonhx_utils_Keycodes.sysreq = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.sysreq);
com_babylonhx_utils_Keycodes.cancel = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.cancel);
com_babylonhx_utils_Keycodes.clear = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.clear);
com_babylonhx_utils_Keycodes.prior = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.prior);
com_babylonhx_utils_Keycodes.return2 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.return2);
com_babylonhx_utils_Keycodes.separator = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.separator);
com_babylonhx_utils_Keycodes.out = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.out);
com_babylonhx_utils_Keycodes.oper = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.oper);
com_babylonhx_utils_Keycodes.clearagain = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.clearagain);
com_babylonhx_utils_Keycodes.crsel = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.crsel);
com_babylonhx_utils_Keycodes.exsel = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.exsel);
com_babylonhx_utils_Keycodes.kp_00 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_00);
com_babylonhx_utils_Keycodes.kp_000 = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_000);
com_babylonhx_utils_Keycodes.thousandsseparator = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.thousandsseparator);
com_babylonhx_utils_Keycodes.decimalseparator = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.decimalseparator);
com_babylonhx_utils_Keycodes.currencyunit = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.currencyunit);
com_babylonhx_utils_Keycodes.currencysubunit = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.currencysubunit);
com_babylonhx_utils_Keycodes.kp_leftparen = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_leftparen);
com_babylonhx_utils_Keycodes.kp_rightparen = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_rightparen);
com_babylonhx_utils_Keycodes.kp_leftbrace = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_leftbrace);
com_babylonhx_utils_Keycodes.kp_rightbrace = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_rightbrace);
com_babylonhx_utils_Keycodes.kp_tab = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_tab);
com_babylonhx_utils_Keycodes.kp_backspace = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_backspace);
com_babylonhx_utils_Keycodes.kp_a = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_a);
com_babylonhx_utils_Keycodes.kp_b = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_b);
com_babylonhx_utils_Keycodes.kp_c = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_c);
com_babylonhx_utils_Keycodes.kp_d = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_d);
com_babylonhx_utils_Keycodes.kp_e = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_e);
com_babylonhx_utils_Keycodes.kp_f = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_f);
com_babylonhx_utils_Keycodes.kp_xor = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_xor);
com_babylonhx_utils_Keycodes.kp_power = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_power);
com_babylonhx_utils_Keycodes.kp_percent = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_percent);
com_babylonhx_utils_Keycodes.kp_less = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_less);
com_babylonhx_utils_Keycodes.kp_greater = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_greater);
com_babylonhx_utils_Keycodes.kp_ampersand = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_ampersand);
com_babylonhx_utils_Keycodes.kp_dblampersand = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_dblampersand);
com_babylonhx_utils_Keycodes.kp_verticalbar = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_verticalbar);
com_babylonhx_utils_Keycodes.kp_dblverticalbar = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_dblverticalbar);
com_babylonhx_utils_Keycodes.kp_colon = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_colon);
com_babylonhx_utils_Keycodes.kp_hash = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_hash);
com_babylonhx_utils_Keycodes.kp_space = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_space);
com_babylonhx_utils_Keycodes.kp_at = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_at);
com_babylonhx_utils_Keycodes.kp_exclam = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_exclam);
com_babylonhx_utils_Keycodes.kp_memstore = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_memstore);
com_babylonhx_utils_Keycodes.kp_memrecall = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_memrecall);
com_babylonhx_utils_Keycodes.kp_memclear = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_memclear);
com_babylonhx_utils_Keycodes.kp_memadd = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_memadd);
com_babylonhx_utils_Keycodes.kp_memsubtract = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_memsubtract);
com_babylonhx_utils_Keycodes.kp_memmultiply = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_memmultiply);
com_babylonhx_utils_Keycodes.kp_memdivide = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_memdivide);
com_babylonhx_utils_Keycodes.kp_plusminus = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_plusminus);
com_babylonhx_utils_Keycodes.kp_clear = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_clear);
com_babylonhx_utils_Keycodes.kp_clearentry = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_clearentry);
com_babylonhx_utils_Keycodes.kp_binary = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_binary);
com_babylonhx_utils_Keycodes.kp_octal = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_octal);
com_babylonhx_utils_Keycodes.kp_decimal = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_decimal);
com_babylonhx_utils_Keycodes.kp_hexadecimal = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kp_hexadecimal);
com_babylonhx_utils_Keycodes.lctrl = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.lctrl);
com_babylonhx_utils_Keycodes.lshift = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.lshift);
com_babylonhx_utils_Keycodes.lalt = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.lalt);
com_babylonhx_utils_Keycodes.lmeta = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.lmeta);
com_babylonhx_utils_Keycodes.rctrl = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.rctrl);
com_babylonhx_utils_Keycodes.rshift = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.rshift);
com_babylonhx_utils_Keycodes.ralt = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.ralt);
com_babylonhx_utils_Keycodes.rmeta = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.rmeta);
com_babylonhx_utils_Keycodes.mode = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.mode);
com_babylonhx_utils_Keycodes.audionext = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.audionext);
com_babylonhx_utils_Keycodes.audioprev = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.audioprev);
com_babylonhx_utils_Keycodes.audiostop = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.audiostop);
com_babylonhx_utils_Keycodes.audioplay = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.audioplay);
com_babylonhx_utils_Keycodes.audiomute = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.audiomute);
com_babylonhx_utils_Keycodes.mediaselect = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.mediaselect);
com_babylonhx_utils_Keycodes.www = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.www);
com_babylonhx_utils_Keycodes.mail = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.mail);
com_babylonhx_utils_Keycodes.calculator = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.calculator);
com_babylonhx_utils_Keycodes.computer = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.computer);
com_babylonhx_utils_Keycodes.ac_search = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.ac_search);
com_babylonhx_utils_Keycodes.ac_home = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.ac_home);
com_babylonhx_utils_Keycodes.ac_back = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.ac_back);
com_babylonhx_utils_Keycodes.ac_forward = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.ac_forward);
com_babylonhx_utils_Keycodes.ac_stop = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.ac_stop);
com_babylonhx_utils_Keycodes.ac_refresh = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.ac_refresh);
com_babylonhx_utils_Keycodes.ac_bookmarks = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.ac_bookmarks);
com_babylonhx_utils_Keycodes.brightnessdown = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.brightnessdown);
com_babylonhx_utils_Keycodes.brightnessup = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.brightnessup);
com_babylonhx_utils_Keycodes.displayswitch = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.displayswitch);
com_babylonhx_utils_Keycodes.kbdillumtoggle = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kbdillumtoggle);
com_babylonhx_utils_Keycodes.kbdillumdown = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kbdillumdown);
com_babylonhx_utils_Keycodes.kbdillumup = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.kbdillumup);
com_babylonhx_utils_Keycodes.eject = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.eject);
com_babylonhx_utils_Keycodes.sleep = com_babylonhx_utils_Keycodes.from_scan(com_babylonhx_utils_Scancodes.sleep);
flixel_FlxCamera.STYLE_LOCKON = 0;
flixel_FlxCamera.STYLE_PLATFORMER = 1;
flixel_FlxCamera.STYLE_TOPDOWN = 2;
flixel_FlxCamera.STYLE_TOPDOWN_TIGHT = 3;
flixel_FlxCamera.STYLE_SCREEN_BY_SCREEN = 4;
flixel_FlxCamera.STYLE_NO_DEAD_ZONE = 5;
flixel_FlxCamera.SHAKE_BOTH_AXES = 0;
flixel_FlxCamera.SHAKE_HORIZONTAL_ONLY = 1;
flixel_FlxCamera.SHAKE_VERTICAL_ONLY = 2;
flixel_util_FlxPoint._pool = new flixel_util_FlxPool(flixel_util_FlxPoint);
flixel_system_scaleModes_BaseScaleMode.zoom = flixel_util_FlxPoint.get(null,null);
openfl_geom_Rectangle.__temp = new openfl_geom_Rectangle();
flixel_system_frontEnds_HTML5FrontEnd.INTERNET_EXPLORER = "Internet Explorer";
flixel_system_frontEnds_HTML5FrontEnd.CHROME = "Chrome";
flixel_system_frontEnds_HTML5FrontEnd.FIREFOX = "Firefox";
flixel_system_frontEnds_HTML5FrontEnd.SAFARI = "Safari";
flixel_system_frontEnds_HTML5FrontEnd.OPERA = "Opera";
flixel_util_FlxPath.FORWARD = 0;
flixel_util_FlxPath.BACKWARD = 1;
flixel_util_FlxPath.LOOP_FORWARD = 16;
flixel_util_FlxPath.LOOP_BACKWARD = 256;
flixel_util_FlxPath.YOYO = 4096;
flixel_util_FlxPath.HORIZONTAL_ONLY = 65536;
flixel_util_FlxPath.VERTICAL_ONLY = 1048576;
flixel_util_FlxPath._point = flixel_util_FlxPoint.get(null,null);
flixel_tweens_FlxTween.PERSIST = 1;
flixel_tweens_FlxTween.LOOPING = 2;
flixel_tweens_FlxTween.PINGPONG = 4;
flixel_tweens_FlxTween.ONESHOT = 8;
flixel_tweens_FlxTween.BACKWARD = 16;
flixel_util_FlxSave.SUCCESS = 0;
flixel_util_FlxSave.PENDING = 1;
flixel_util_FlxSave.ERROR = 2;
flixel_util_FlxRect._pool = new flixel_util_FlxPool(flixel_util_FlxRect);
flixel_FlxG.autoPause = true;
flixel_FlxG.fixedTimestep = true;
flixel_FlxG.timeScale = 1;
flixel_FlxG.worldDivisions = 6;
flixel_FlxG.VERSION = new flixel_system_FlxVersion(3,3,12);
flixel_FlxG.elapsed = 0;
flixel_FlxG.maxElapsed = 0.1;
flixel_FlxG.fullscreen = false;
flixel_FlxG.worldBounds = flixel_util_FlxRect.get(null,null,null,null);
flixel_FlxG.save = new flixel_util_FlxSave();
flixel_FlxG.swipes = [];
flixel_FlxG.html5 = new flixel_system_frontEnds_HTML5FrontEnd();
flixel_FlxG.inputs = new flixel_system_frontEnds_InputFrontEnd();
flixel_FlxG.console = new flixel_system_frontEnds_ConsoleFrontEnd();
flixel_FlxG.log = new flixel_system_frontEnds_LogFrontEnd();
flixel_FlxG.bitmapLog = new flixel_system_frontEnds_BitmapLogFrontEnd();
flixel_FlxG.watch = new flixel_system_frontEnds_WatchFrontEnd();
flixel_FlxG["debugger"] = new flixel_system_frontEnds_DebuggerFrontEnd();
flixel_FlxG.vcr = new flixel_system_frontEnds_VCRFrontEnd();
flixel_FlxG.bitmap = new flixel_system_frontEnds_BitmapFrontEnd();
flixel_FlxG.cameras = new flixel_system_frontEnds_CameraFrontEnd();
flixel_FlxG.plugins = new flixel_system_frontEnds_PluginFrontEnd();
flixel_FlxG.sound = new flixel_system_frontEnds_SoundFrontEnd();
flixel_FlxG.signals = new flixel_system_frontEnds_SignalFrontEnd();
flixel_FlxG._scaleMode = new flixel_system_scaleModes_RatioScaleMode();
flixel_FlxObject.SEPARATE_BIAS = 4;
flixel_FlxObject.LEFT = 1;
flixel_FlxObject.RIGHT = 16;
flixel_FlxObject.UP = 256;
flixel_FlxObject.DOWN = 4096;
flixel_FlxObject.NONE = 0;
flixel_FlxObject.CEILING = 256;
flixel_FlxObject.FLOOR = 4096;
flixel_FlxObject.WALL = 17;
flixel_FlxObject.ANY = 4369;
flixel_FlxObject._firstSeparateFlxRect = flixel_util_FlxRect.get(null,null,null,null);
flixel_FlxObject._secondSeparateFlxRect = flixel_util_FlxRect.get(null,null,null,null);
openfl_display_BitmapData.__isGLES = null;
flixel__$FlxSprite_GraphicDefault.resourceType = "image/png";
flixel__$FlxSprite_GraphicDefault.resourceName = "__ASSET__:bitmap_flixel__FlxSprite_GraphicDefault";
flixel_animation_FlxAnimationController.prefixLength = 0;
flixel_animation_FlxAnimationController.postfixLength = 0;
flixel_animation_FlxPrerotatedAnimation.PREROTATED = "prerotated_animation";
flixel_effects_FlxFlicker._pool = new flixel_util_FlxPool(flixel_effects_FlxFlicker);
flixel_effects_FlxFlicker._boundObjects = new haxe_ds_ObjectMap();
flixel_input_gamepad_FlxGamepad.JUST_RELEASED = -1;
flixel_input_gamepad_FlxGamepad.RELEASED = 0;
flixel_input_gamepad_FlxGamepad.PRESSED = 1;
flixel_input_gamepad_FlxGamepad.JUST_PRESSED = 2;
flixel_input_keyboard_FlxKey.JUST_RELEASED = -1;
flixel_input_keyboard_FlxKey.RELEASED = 0;
flixel_input_keyboard_FlxKey.PRESSED = 1;
flixel_input_keyboard_FlxKey.JUST_PRESSED = 2;
flixel_input_keyboard_FlxKey.A = 65;
flixel_input_keyboard_FlxKey.B = 66;
flixel_input_keyboard_FlxKey.C = 67;
flixel_input_keyboard_FlxKey.D = 68;
flixel_input_keyboard_FlxKey.E = 69;
flixel_input_keyboard_FlxKey.F = 70;
flixel_input_keyboard_FlxKey.G = 71;
flixel_input_keyboard_FlxKey.H = 72;
flixel_input_keyboard_FlxKey.I = 73;
flixel_input_keyboard_FlxKey.J = 74;
flixel_input_keyboard_FlxKey.K = 75;
flixel_input_keyboard_FlxKey.L = 76;
flixel_input_keyboard_FlxKey.M = 77;
flixel_input_keyboard_FlxKey.N = 78;
flixel_input_keyboard_FlxKey.O = 79;
flixel_input_keyboard_FlxKey.P = 80;
flixel_input_keyboard_FlxKey.Q = 81;
flixel_input_keyboard_FlxKey.R = 82;
flixel_input_keyboard_FlxKey.S = 83;
flixel_input_keyboard_FlxKey.T = 84;
flixel_input_keyboard_FlxKey.U = 85;
flixel_input_keyboard_FlxKey.V = 86;
flixel_input_keyboard_FlxKey.W = 87;
flixel_input_keyboard_FlxKey.X = 88;
flixel_input_keyboard_FlxKey.Y = 89;
flixel_input_keyboard_FlxKey.Z = 90;
flixel_input_keyboard_FlxKey.ZERO = 48;
flixel_input_keyboard_FlxKey.ONE = 49;
flixel_input_keyboard_FlxKey.TWO = 50;
flixel_input_keyboard_FlxKey.THREE = 51;
flixel_input_keyboard_FlxKey.FOUR = 52;
flixel_input_keyboard_FlxKey.FIVE = 53;
flixel_input_keyboard_FlxKey.SIX = 54;
flixel_input_keyboard_FlxKey.SEVEN = 55;
flixel_input_keyboard_FlxKey.EIGHT = 56;
flixel_input_keyboard_FlxKey.NINE = 57;
flixel_input_keyboard_FlxKey.PAGEUP = 33;
flixel_input_keyboard_FlxKey.PAGEDOWN = 34;
flixel_input_keyboard_FlxKey.HOME = 36;
flixel_input_keyboard_FlxKey.END = 35;
flixel_input_keyboard_FlxKey.INSERT = 45;
flixel_input_keyboard_FlxKey.ESCAPE = 27;
flixel_input_keyboard_FlxKey.MINUS = 189;
flixel_input_keyboard_FlxKey.PLUS = 187;
flixel_input_keyboard_FlxKey.DELETE = 46;
flixel_input_keyboard_FlxKey.BACKSPACE = 8;
flixel_input_keyboard_FlxKey.LBRACKET = 219;
flixel_input_keyboard_FlxKey.RBRACKET = 221;
flixel_input_keyboard_FlxKey.BACKSLASH = 220;
flixel_input_keyboard_FlxKey.CAPSLOCK = 20;
flixel_input_keyboard_FlxKey.SEMICOLON = 186;
flixel_input_keyboard_FlxKey.QUOTE = 222;
flixel_input_keyboard_FlxKey.ENTER = 13;
flixel_input_keyboard_FlxKey.SHIFT = 16;
flixel_input_keyboard_FlxKey.COMMA = 188;
flixel_input_keyboard_FlxKey.PERIOD = 190;
flixel_input_keyboard_FlxKey.SLASH = 191;
flixel_input_keyboard_FlxKey.NUMPADSLASH = 191;
flixel_input_keyboard_FlxKey.GRAVEACCENT = 192;
flixel_input_keyboard_FlxKey.CONTROL = 17;
flixel_input_keyboard_FlxKey.ALT = 18;
flixel_input_keyboard_FlxKey.SPACE = 32;
flixel_input_keyboard_FlxKey.UP = 38;
flixel_input_keyboard_FlxKey.DOWN = 40;
flixel_input_keyboard_FlxKey.LEFT = 37;
flixel_input_keyboard_FlxKey.RIGHT = 39;
flixel_input_keyboard_FlxKey.TAB = 9;
flixel_input_keyboard_FlxKey.PRINTSCREEN = 301;
flixel_input_keyboard_FlxKey.F1 = 112;
flixel_input_keyboard_FlxKey.F2 = 113;
flixel_input_keyboard_FlxKey.F3 = 114;
flixel_input_keyboard_FlxKey.F4 = 115;
flixel_input_keyboard_FlxKey.F5 = 116;
flixel_input_keyboard_FlxKey.F6 = 117;
flixel_input_keyboard_FlxKey.F7 = 118;
flixel_input_keyboard_FlxKey.F8 = 119;
flixel_input_keyboard_FlxKey.F9 = 120;
flixel_input_keyboard_FlxKey.F10 = 121;
flixel_input_keyboard_FlxKey.F11 = 122;
flixel_input_keyboard_FlxKey.F12 = 123;
flixel_input_keyboard_FlxKey.NUMPADZERO = 96;
flixel_input_keyboard_FlxKey.NUMPADONE = 97;
flixel_input_keyboard_FlxKey.NUMPADTWO = 98;
flixel_input_keyboard_FlxKey.NUMPADTHREE = 99;
flixel_input_keyboard_FlxKey.NUMPADFOUR = 100;
flixel_input_keyboard_FlxKey.NUMPADFIVE = 101;
flixel_input_keyboard_FlxKey.NUMPADSIX = 102;
flixel_input_keyboard_FlxKey.NUMPADSEVEN = 103;
flixel_input_keyboard_FlxKey.NUMPADEIGHT = 104;
flixel_input_keyboard_FlxKey.NUMPADNINE = 105;
flixel_input_keyboard_FlxKey.NUMPADMINUS = 109;
flixel_input_keyboard_FlxKey.NUMPADPLUS = 107;
flixel_input_keyboard_FlxKey.NUMPADPERIOD = 110;
flixel_input_keyboard_FlxKey.NUMPADMULTIPLY = 106;
flixel_input_keyboard_FlxKeyboard.TOTAL = 256;
flixel_input_mouse__$FlxMouse_GraphicCursor.resourceType = "image/png";
flixel_input_mouse__$FlxMouse_GraphicCursor.resourceName = "__ASSET__:bitmap_flixel_input_mouse__FlxMouse_GraphicCursor";
flixel_input_mouse_FlxMouseButton.LEFT = -1;
flixel_input_mouse_FlxMouseButton.MIDDLE = -2;
flixel_input_mouse_FlxMouseButton.RIGHT = -3;
flixel_input_mouse_FlxMouseButton.FAST_PRESS_RELEASE = -2;
flixel_input_mouse_FlxMouseButton.JUST_RELEASED = -1;
flixel_input_mouse_FlxMouseButton.RELEASED = 0;
flixel_input_mouse_FlxMouseButton.PRESSED = 1;
flixel_input_mouse_FlxMouseButton.JUST_PRESSED = 2;
flixel_input_touch_FlxTouchManager.maxTouchPoints = 0;
flixel_system_FlxAssets.FONT_DEFAULT = "Nokia Cellphone FC Small";
flixel_system_FlxAssets.FONT_DEBUGGER = "Arial";
flixel_system_FlxList._NUM_CACHED_FLX_LIST = 0;
flixel_system_FlxQuadTree.A_LIST = 0;
flixel_system_FlxQuadTree.B_LIST = 1;
flixel_system_FlxQuadTree._NUM_CACHED_QUAD_TREES = 0;
flixel_system_debug_Window.BG_COLOR = -580952225;
flixel_system_debug_Window.HEADER_COLOR = -1157627904;
flixel_system_debug_Window.HEADER_ALPHA = 0.8;
flixel_system_debug_Window.HEADER_HEIGHT = 15;
flixel_system_debug_Window.WINDOW_AMOUNT = 0;
flixel_system_debug_Console._DEFAULT_TEXT = "(Click here / press [Tab] to enter command. Type 'help' for help.)";
flixel_system_debug_Console._HISTORY_MAX = 25;
flixel_system_debug__$FlxDebugger_GraphicFlixel.resourceType = "image/png";
flixel_system_debug__$FlxDebugger_GraphicFlixel.resourceName = "__ASSET__:bitmap_flixel_system_debug__FlxDebugger_GraphicFlixel";
flixel_system_debug__$FlxDebugger_GraphicDrawDebug.resourceType = "image/png";
flixel_system_debug__$FlxDebugger_GraphicDrawDebug.resourceName = "__ASSET__:bitmap_flixel_system_debug__FlxDebugger_GraphicDrawDebug";
flixel_system_debug_GraphicLog.resourceType = "image/png";
flixel_system_debug_GraphicLog.resourceName = "__ASSET__:bitmap_flixel_system_debug_GraphicLog";
flixel_system_debug_GraphicStats.resourceType = "image/png";
flixel_system_debug_GraphicStats.resourceName = "__ASSET__:bitmap_flixel_system_debug_GraphicStats";
flixel_system_debug_GraphicWatch.resourceType = "image/png";
flixel_system_debug_GraphicWatch.resourceName = "__ASSET__:bitmap_flixel_system_debug_GraphicWatch";
flixel_system_debug_GraphicBitmapLog.resourceType = "image/png";
flixel_system_debug_GraphicBitmapLog.resourceName = "__ASSET__:bitmap_flixel_system_debug_GraphicBitmapLog";
flixel_system_debug_GraphicConsole.resourceType = "image/png";
flixel_system_debug_GraphicConsole.resourceName = "__ASSET__:bitmap_flixel_system_debug_GraphicConsole";
flixel_system_debug_GraphicArrowLeft.resourceType = "image/png";
flixel_system_debug_GraphicArrowLeft.resourceName = "__ASSET__:bitmap_flixel_system_debug_GraphicArrowLeft";
flixel_system_debug_GraphicArrowRight.resourceType = "image/png";
flixel_system_debug_GraphicArrowRight.resourceName = "__ASSET__:bitmap_flixel_system_debug_GraphicArrowRight";
flixel_system_debug_FlxDebugger.GUTTER = 2;
flixel_system_debug_FlxDebugger.TOP_HEIGHT = 20;
flixel_system_debug_Log.MAX_LOG_LINES = 200;
flixel_system_debug_Log.LINE_BREAK = "\n";
flixel_system_debug_LogStyle.NORMAL = new flixel_system_debug_LogStyle();
flixel_system_debug_LogStyle.WARNING = new flixel_system_debug_LogStyle("[WARNING] ","FFFF00",12,true,false,false,"../assets/sounds/beep",true);
flixel_system_debug_LogStyle.ERROR = new flixel_system_debug_LogStyle("[ERROR] ","FF0000",12,true,false,false,"../assets/sounds/beep",true);
flixel_system_debug_LogStyle.NOTICE = new flixel_system_debug_LogStyle("[NOTICE] ","008000",12,true);
flixel_system_debug_LogStyle.CONSOLE = new flixel_system_debug_LogStyle("&#62; ","0000ff",12,true);
flixel_system_debug__$Stats_GraphicMinimizeButton.resourceType = "image/png";
flixel_system_debug__$Stats_GraphicMinimizeButton.resourceName = "__ASSET__:bitmap_flixel_system_debug__Stats_GraphicMinimizeButton";
flixel_system_debug__$Stats_GraphicMaximizeButton.resourceType = "image/png";
flixel_system_debug__$Stats_GraphicMaximizeButton.resourceName = "__ASSET__:bitmap_flixel_system_debug__Stats_GraphicMaximizeButton";
flixel_system_debug_Stats.UPDATE_DELAY = 250;
flixel_system_debug_Stats.INITIAL_WIDTH = 160;
flixel_system_debug_Stats.MIN_HEIGHT = 180;
flixel_system_debug_Stats.FPS_COLOR = -6881536;
flixel_system_debug_Stats.MEMORY_COLOR = -16737025;
flixel_system_debug_Stats.DRAW_TIME_COLOR = -4784128;
flixel_system_debug_Stats.UPDATE_TIME_COLOR = -2305024;
flixel_system_debug_Stats.LABEL_COLOR = -1426063361;
flixel_system_debug_Stats.TEXT_SIZE = 11;
flixel_system_debug_Stats.DECIMALS = 1;
flixel_system_debug_StatsGraph.AXIS_COLOR = 16777215;
flixel_system_debug_StatsGraph.AXIS_ALPHA = 0.5;
flixel_system_debug_StatsGraph.HISTORY_MAX = 30;
flixel_system_debug_Watch.MAX_LOG_LINES = 1024;
flixel_system_debug_Watch.LINE_HEIGHT = 15;
flixel_system_debug_Tracker.objectsBeingTracked = [];
flixel_system_debug_Tracker._numTrackerWindows = 0;
flixel_system_debug__$VCR_GraphicOpen.resourceType = "image/png";
flixel_system_debug__$VCR_GraphicOpen.resourceName = "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicOpen";
flixel_system_debug__$VCR_GraphicPause.resourceType = "image/png";
flixel_system_debug__$VCR_GraphicPause.resourceName = "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicPause";
flixel_system_debug__$VCR_GraphicRecordOff.resourceType = "image/png";
flixel_system_debug__$VCR_GraphicRecordOff.resourceName = "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicRecordOff";
flixel_system_debug__$VCR_GraphicRecordOn.resourceType = "image/png";
flixel_system_debug__$VCR_GraphicRecordOn.resourceName = "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicRecordOn";
flixel_system_debug__$VCR_GraphicRestart.resourceType = "image/png";
flixel_system_debug__$VCR_GraphicRestart.resourceName = "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicRestart";
flixel_system_debug__$VCR_GraphicStep.resourceType = "image/png";
flixel_system_debug__$VCR_GraphicStep.resourceName = "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicStep";
flixel_system_debug__$VCR_GraphicStop.resourceType = "image/png";
flixel_system_debug__$VCR_GraphicStop.resourceName = "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicStop";
flixel_system_debug__$Window_GraphicWindowHandle.resourceType = "image/png";
flixel_system_debug__$Window_GraphicWindowHandle.resourceName = "__ASSET__:bitmap_flixel_system_debug__Window_GraphicWindowHandle";
flixel_system_debug__$Window_GraphicCloseButton.resourceType = "image/png";
flixel_system_debug__$Window_GraphicCloseButton.resourceName = "__ASSET__:bitmap_flixel_system_debug__Window_GraphicCloseButton";
openfl_display_Tilesheet.TILE_SCALE = 1;
openfl_display_Tilesheet.TILE_ROTATION = 2;
openfl_display_Tilesheet.TILE_RGB = 4;
openfl_display_Tilesheet.TILE_ALPHA = 8;
openfl_display_Tilesheet.TILE_TRANS_2x2 = 16;
openfl_display_Tilesheet.TILE_RECT = 32;
openfl_display_Tilesheet.TILE_ORIGIN = 64;
openfl_display_Tilesheet.TILE_BLEND_NORMAL = 0;
openfl_display_Tilesheet.TILE_BLEND_ADD = 65536;
openfl_display_Tilesheet.TILE_BLEND_MULTIPLY = 131072;
openfl_display_Tilesheet.TILE_BLEND_SCREEN = 262144;
openfl_display_Tilesheet.TILE_BLEND_SUBTRACT = 524288;
openfl_display_Tilesheet.TILE_BLEND_DARKEN = 1048576;
openfl_display_Tilesheet.TILE_BLEND_LIGHTEN = 2097152;
openfl_display_Tilesheet.TILE_BLEND_OVERLAY = 4194304;
openfl_display_Tilesheet.TILE_BLEND_HARDLIGHT = 8388608;
openfl_display_Tilesheet.TILE_BLEND_DIFFERENCE = 16777216;
openfl_display_Tilesheet.TILE_BLEND_INVERT = 33554432;
openfl_display_Tilesheet.__defaultPoint = new openfl_geom_Point(0,0);
flixel_system_layer_TileSheetExt._DRAWCALLS = 0;
openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
openfl_geom_Matrix.__temp = new openfl_geom_Matrix();
flixel_system_layer_frames_FlxFrame.POINT = new openfl_geom_Point();
flixel_system_layer_frames_FlxFrame.MATRIX = new openfl_geom_Matrix();
flixel_system_layer_frames_FlxFrame.RECT = new openfl_geom_Rectangle();
flixel_text_FlxText.BORDER_NONE = 0;
flixel_text_FlxText.BORDER_SHADOW = 1;
flixel_text_FlxText.BORDER_OUTLINE = 2;
flixel_text_FlxText.BORDER_OUTLINE_FAST = 3;
flixel_text_pxText_PxBitmapFont._storedFonts = new haxe_ds_StringMap();
flixel_text_pxText_PxBitmapFont.ZERO_POINT = new openfl_geom_Point();
flixel_tile_GraphicAuto.resourceType = "image/png";
flixel_tile_GraphicAuto.resourceName = "__ASSET__:bitmap_flixel_tile_GraphicAuto";
flixel_tile_GraphicAutoAlt.resourceType = "image/png";
flixel_tile_GraphicAutoAlt.resourceName = "__ASSET__:bitmap_flixel_tile_GraphicAutoAlt";
flixel_tile_FlxTilemap.OFF = 0;
flixel_tile_FlxTilemap.AUTO = 1;
flixel_tile_FlxTilemap.ALT = 2;
flixel_tile_FlxTilemap._helperBuffer = Type.createEmptyInstance(flixel_tile_FlxTilemapBuffer);
flixel_tweens_FlxEase.PI2 = Math.PI / 2;
flixel_tweens_FlxEase.EL = 2 * Math.PI / .45;
flixel_tweens_FlxEase.B1 = 0.363636363636363646;
flixel_tweens_FlxEase.B2 = 0.727272727272727293;
flixel_tweens_FlxEase.B3 = 0.545454545454545414;
flixel_tweens_FlxEase.B4 = 0.909090909090909061;
flixel_tweens_FlxEase.B5 = 0.818181818181818232;
flixel_tweens_FlxEase.B6 = 0.954545454545454586;
flixel_tweens_FlxEase.ELASTIC_AMPLITUDE = 1;
flixel_tweens_FlxEase.ELASTIC_PERIOD = 0.4;
flixel_ui_FlxBar.FILL_LEFT_TO_RIGHT = 1;
flixel_ui_FlxBar.FILL_RIGHT_TO_LEFT = 2;
flixel_ui_FlxBar.FILL_TOP_TO_BOTTOM = 3;
flixel_ui_FlxBar.FILL_BOTTOM_TO_TOP = 4;
flixel_ui_FlxBar.FILL_HORIZONTAL_INSIDE_OUT = 5;
flixel_ui_FlxBar.FILL_HORIZONTAL_OUTSIDE_IN = 6;
flixel_ui_FlxBar.FILL_VERTICAL_INSIDE_OUT = 7;
flixel_ui_FlxBar.FILL_VERTICAL_OUTSIDE_IN = 8;
flixel_ui_FlxBar.FRAMES_POSITION_HORIZONTAL = "horizontal";
flixel_ui_FlxBar.FRAMES_POSITION_VERTICAL = "vertical";
flixel_ui_FlxBar.BAR_FILLED = 1;
flixel_ui_FlxBar.BAR_GRADIENT = 2;
flixel_ui_FlxBar.BAR_IMAGE = 3;
flixel_ui_FlxButton.NORMAL = 0;
flixel_ui_FlxButton.HIGHLIGHT = 1;
flixel_ui_FlxButton.PRESSED = 2;
flixel_ui__$FlxTypedButton_GraphicButton.resourceType = "image/png";
flixel_ui__$FlxTypedButton_GraphicButton.resourceName = "__ASSET__:bitmap_flixel_ui__FlxTypedButton_GraphicButton";
flixel_util_FlxAngle.cosTable = [];
flixel_util_FlxAngle.sinTable = [];
flixel_util_FlxBitmapDataPool.maxLength = 8;
flixel_util_FlxBitmapDataPool.$length = 0;
flixel_util_FlxBitmapDataPool._head = null;
flixel_util_FlxBitmapDataPool._tail = null;
flixel_util_FlxBitmapDataPool._rect = new openfl_geom_Rectangle();
flixel_util_FlxCollision.CAMERA_WALL_OUTSIDE = 0;
flixel_util_FlxCollision.CAMERA_WALL_INSIDE = 1;
flixel_util_FlxCollision.pointA = new openfl_geom_Point();
flixel_util_FlxCollision.pointB = new openfl_geom_Point();
flixel_util_FlxCollision.centerA = new openfl_geom_Point();
flixel_util_FlxCollision.centerB = new openfl_geom_Point();
flixel_util_FlxCollision.matrixA = new openfl_geom_Matrix();
flixel_util_FlxCollision.matrixB = new openfl_geom_Matrix();
flixel_util_FlxCollision.testMatrix = new openfl_geom_Matrix();
flixel_util_FlxCollision.boundsA = new openfl_geom_Rectangle();
flixel_util_FlxCollision.boundsB = new openfl_geom_Rectangle();
flixel_util_FlxColor.RED = -65536;
flixel_util_FlxColor.YELLOW = -256;
flixel_util_FlxColor.GREEN = -16744448;
flixel_util_FlxColor.BLUE = -16776961;
flixel_util_FlxColor.PINK = -16181;
flixel_util_FlxColor.PURPLE = -8388480;
flixel_util_FlxColor.WHITE = -1;
flixel_util_FlxColor.BLACK = -16777216;
flixel_util_FlxColor.GRAY = -8355712;
flixel_util_FlxColor.BROWN = -6927616;
flixel_util_FlxColor.TRANSPARENT = 0;
flixel_util_FlxColor.IVORY = -16;
flixel_util_FlxColor.BEIGE = -657956;
flixel_util_FlxColor.WHEAT = -663885;
flixel_util_FlxColor.TAN = -2968436;
flixel_util_FlxColor.KHAKI = -3952495;
flixel_util_FlxColor.SILVER = -4144960;
flixel_util_FlxColor.CHARCOAL = -12171706;
flixel_util_FlxColor.NAVY_BLUE = -16777088;
flixel_util_FlxColor.ROYAL_BLUE = -16233314;
flixel_util_FlxColor.MEDIUM_BLUE = -16777011;
flixel_util_FlxColor.AZURE = -16744449;
flixel_util_FlxColor.CYAN = -16711681;
flixel_util_FlxColor.MAGENTA = -65281;
flixel_util_FlxColor.AQUAMARINE = -8388652;
flixel_util_FlxColor.TEAL = -16744320;
flixel_util_FlxColor.FOREST_GREEN = -14513374;
flixel_util_FlxColor.OLIVE = -8355840;
flixel_util_FlxColor.CHARTREUSE = -8388864;
flixel_util_FlxColor.LIME = -4194560;
flixel_util_FlxColor.GOLDEN = -10496;
flixel_util_FlxColor.GOLDENROD = -2448096;
flixel_util_FlxColor.CORAL = -32944;
flixel_util_FlxColor.SALMON = -360334;
flixel_util_FlxColor.HOT_PINK = -258112;
flixel_util_FlxColor.FUCHSIA = -34817;
flixel_util_FlxColor.PUCE = -3372903;
flixel_util_FlxColor.MAUVE = -2051841;
flixel_util_FlxColor.LAVENDER = -4882724;
flixel_util_FlxColor.PLUM = -8113799;
flixel_util_FlxColor.INDIGO = -11861886;
flixel_util_FlxColor.MAROON = -8388608;
flixel_util_FlxColor.CRIMSON = -2354116;
flixel_util_FlxMath.MIN_VALUE = 0.0000000000000001;
flixel_util_FlxMath.MAX_VALUE = 1.79e+308;
flixel_util_FlxMath.SQUARE_ROOT_OF_TWO = 1.41421356237;
flixel_util_FlxRandom.globalSeed = 1;
flixel_util_FlxRandom._internalSeed = 1;
flixel_util_FlxRandom.MULTIPLIER = 48271;
flixel_util_FlxRandom.MODULUS = 2147483647;
flixel_util_FlxRandom._intHelper = 0;
flixel_util_FlxRandom._intHelper2 = 0;
flixel_util_FlxRandom._intHelper3 = 0;
flixel_util_FlxRandom._floatHelper = 0;
flixel_util_FlxRandom._arrayFloatHelper = null;
flixel_util_FlxRandom._red = 0;
flixel_util_FlxRandom._green = 0;
flixel_util_FlxRandom._blue = 0;
flixel_util_FlxRandom._alpha = 0;
flixel_util_FlxSort.ASCENDING = -1;
flixel_util_FlxSort.DESCENDING = 1;
openfl_display_LoaderInfo.__rootURL = window.document.URL;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
flixel_util_FlxSpriteUtil.flashGfxSprite = new openfl_display_Sprite();
flixel_util_FlxSpriteUtil.flashGfx = flixel_util_FlxSpriteUtil.flashGfxSprite.get_graphics();
flixel_util_LabelValuePair._pool = new flixel_util_FlxPool(flixel_util_LabelValuePair);
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = Type;
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.CODES = null;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var x = new haxe__$Int64__$_$_$Int64(0,0);
	$r = x;
	return $r;
}(this));
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
lime_Assets.cache = new lime_AssetCache();
lime_Assets.libraries = new haxe_ds_StringMap();
lime_Assets.onChange = new lime_app_Event_$Void_$Void();
lime_Assets.initialized = false;
lime__$backend_html5_HTML5Window.windowID = 0;
lime_app_Preloader.images = new haxe_ds_StringMap();
lime_app_Preloader.loaders = new haxe_ds_StringMap();
lime_audio_openal_AL.NONE = 0;
lime_audio_openal_AL.FALSE = 0;
lime_audio_openal_AL.TRUE = 1;
lime_audio_openal_AL.SOURCE_RELATIVE = 514;
lime_audio_openal_AL.CONE_INNER_ANGLE = 4097;
lime_audio_openal_AL.CONE_OUTER_ANGLE = 4098;
lime_audio_openal_AL.PITCH = 4099;
lime_audio_openal_AL.POSITION = 4100;
lime_audio_openal_AL.DIRECTION = 4101;
lime_audio_openal_AL.VELOCITY = 4102;
lime_audio_openal_AL.LOOPING = 4103;
lime_audio_openal_AL.BUFFER = 4105;
lime_audio_openal_AL.GAIN = 4106;
lime_audio_openal_AL.MIN_GAIN = 4109;
lime_audio_openal_AL.MAX_GAIN = 4110;
lime_audio_openal_AL.ORIENTATION = 4111;
lime_audio_openal_AL.SOURCE_STATE = 4112;
lime_audio_openal_AL.INITIAL = 4113;
lime_audio_openal_AL.PLAYING = 4114;
lime_audio_openal_AL.PAUSED = 4115;
lime_audio_openal_AL.STOPPED = 4116;
lime_audio_openal_AL.BUFFERS_QUEUED = 4117;
lime_audio_openal_AL.BUFFERS_PROCESSED = 4118;
lime_audio_openal_AL.REFERENCE_DISTANCE = 4128;
lime_audio_openal_AL.ROLLOFF_FACTOR = 4129;
lime_audio_openal_AL.CONE_OUTER_GAIN = 4130;
lime_audio_openal_AL.MAX_DISTANCE = 4131;
lime_audio_openal_AL.SEC_OFFSET = 4132;
lime_audio_openal_AL.SAMPLE_OFFSET = 4133;
lime_audio_openal_AL.BYTE_OFFSET = 4134;
lime_audio_openal_AL.SOURCE_TYPE = 4135;
lime_audio_openal_AL.STATIC = 4136;
lime_audio_openal_AL.STREAMING = 4137;
lime_audio_openal_AL.UNDETERMINED = 4144;
lime_audio_openal_AL.FORMAT_MONO8 = 4352;
lime_audio_openal_AL.FORMAT_MONO16 = 4353;
lime_audio_openal_AL.FORMAT_STEREO8 = 4354;
lime_audio_openal_AL.FORMAT_STEREO16 = 4355;
lime_audio_openal_AL.FREQUENCY = 8193;
lime_audio_openal_AL.BITS = 8194;
lime_audio_openal_AL.CHANNELS = 8195;
lime_audio_openal_AL.SIZE = 8196;
lime_audio_openal_AL.NO_ERROR = 0;
lime_audio_openal_AL.INVALID_NAME = 40961;
lime_audio_openal_AL.INVALID_ENUM = 40962;
lime_audio_openal_AL.INVALID_VALUE = 40963;
lime_audio_openal_AL.INVALID_OPERATION = 40964;
lime_audio_openal_AL.OUT_OF_MEMORY = 40965;
lime_audio_openal_AL.VENDOR = 45057;
lime_audio_openal_AL.VERSION = 45058;
lime_audio_openal_AL.RENDERER = 45059;
lime_audio_openal_AL.EXTENSIONS = 45060;
lime_audio_openal_AL.DOPPLER_FACTOR = 49152;
lime_audio_openal_AL.SPEED_OF_SOUND = 49155;
lime_audio_openal_AL.DOPPLER_VELOCITY = 49153;
lime_audio_openal_AL.DISTANCE_MODEL = 53248;
lime_audio_openal_AL.INVERSE_DISTANCE = 53249;
lime_audio_openal_AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime_audio_openal_AL.LINEAR_DISTANCE = 53251;
lime_audio_openal_AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime_audio_openal_AL.EXPONENT_DISTANCE = 53253;
lime_audio_openal_AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime_audio_openal_ALC.FALSE = 0;
lime_audio_openal_ALC.TRUE = 1;
lime_audio_openal_ALC.FREQUENCY = 4103;
lime_audio_openal_ALC.REFRESH = 4104;
lime_audio_openal_ALC.SYNC = 4105;
lime_audio_openal_ALC.MONO_SOURCES = 4112;
lime_audio_openal_ALC.STEREO_SOURCES = 4113;
lime_audio_openal_ALC.NO_ERROR = 0;
lime_audio_openal_ALC.INVALID_DEVICE = 40961;
lime_audio_openal_ALC.INVALID_CONTEXT = 40962;
lime_audio_openal_ALC.INVALID_ENUM = 40963;
lime_audio_openal_ALC.INVALID_VALUE = 40964;
lime_audio_openal_ALC.OUT_OF_MEMORY = 40965;
lime_audio_openal_ALC.ATTRIBUTES_SIZE = 4098;
lime_audio_openal_ALC.ALL_ATTRIBUTES = 4099;
lime_audio_openal_ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime_audio_openal_ALC.DEVICE_SPECIFIER = 4101;
lime_audio_openal_ALC.EXTENSIONS = 4102;
lime_audio_openal_ALC.ENUMERATE_ALL_EXT = 1;
lime_audio_openal_ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime_audio_openal_ALC.ALL_DEVICES_SPECIFIER = 4115;
lime_graphics_Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.FT_LOAD_FORCE_AUTOHINT = 32;
lime_graphics_opengl_GL.DEPTH_BUFFER_BIT = 256;
lime_graphics_opengl_GL.STENCIL_BUFFER_BIT = 1024;
lime_graphics_opengl_GL.COLOR_BUFFER_BIT = 16384;
lime_graphics_opengl_GL.POINTS = 0;
lime_graphics_opengl_GL.LINES = 1;
lime_graphics_opengl_GL.LINE_LOOP = 2;
lime_graphics_opengl_GL.LINE_STRIP = 3;
lime_graphics_opengl_GL.TRIANGLES = 4;
lime_graphics_opengl_GL.TRIANGLE_STRIP = 5;
lime_graphics_opengl_GL.TRIANGLE_FAN = 6;
lime_graphics_opengl_GL.ZERO = 0;
lime_graphics_opengl_GL.ONE = 1;
lime_graphics_opengl_GL.SRC_COLOR = 768;
lime_graphics_opengl_GL.ONE_MINUS_SRC_COLOR = 769;
lime_graphics_opengl_GL.SRC_ALPHA = 770;
lime_graphics_opengl_GL.ONE_MINUS_SRC_ALPHA = 771;
lime_graphics_opengl_GL.DST_ALPHA = 772;
lime_graphics_opengl_GL.ONE_MINUS_DST_ALPHA = 773;
lime_graphics_opengl_GL.DST_COLOR = 774;
lime_graphics_opengl_GL.ONE_MINUS_DST_COLOR = 775;
lime_graphics_opengl_GL.SRC_ALPHA_SATURATE = 776;
lime_graphics_opengl_GL.FUNC_ADD = 32774;
lime_graphics_opengl_GL.BLEND_EQUATION = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_RGB = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_ALPHA = 34877;
lime_graphics_opengl_GL.FUNC_SUBTRACT = 32778;
lime_graphics_opengl_GL.FUNC_REVERSE_SUBTRACT = 32779;
lime_graphics_opengl_GL.BLEND_DST_RGB = 32968;
lime_graphics_opengl_GL.BLEND_SRC_RGB = 32969;
lime_graphics_opengl_GL.BLEND_DST_ALPHA = 32970;
lime_graphics_opengl_GL.BLEND_SRC_ALPHA = 32971;
lime_graphics_opengl_GL.CONSTANT_COLOR = 32769;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime_graphics_opengl_GL.CONSTANT_ALPHA = 32771;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime_graphics_opengl_GL.BLEND_COLOR = 32773;
lime_graphics_opengl_GL.ARRAY_BUFFER = 34962;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER = 34963;
lime_graphics_opengl_GL.ARRAY_BUFFER_BINDING = 34964;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime_graphics_opengl_GL.STREAM_DRAW = 35040;
lime_graphics_opengl_GL.STATIC_DRAW = 35044;
lime_graphics_opengl_GL.DYNAMIC_DRAW = 35048;
lime_graphics_opengl_GL.BUFFER_SIZE = 34660;
lime_graphics_opengl_GL.BUFFER_USAGE = 34661;
lime_graphics_opengl_GL.CURRENT_VERTEX_ATTRIB = 34342;
lime_graphics_opengl_GL.FRONT = 1028;
lime_graphics_opengl_GL.BACK = 1029;
lime_graphics_opengl_GL.FRONT_AND_BACK = 1032;
lime_graphics_opengl_GL.CULL_FACE = 2884;
lime_graphics_opengl_GL.BLEND = 3042;
lime_graphics_opengl_GL.DITHER = 3024;
lime_graphics_opengl_GL.STENCIL_TEST = 2960;
lime_graphics_opengl_GL.DEPTH_TEST = 2929;
lime_graphics_opengl_GL.SCISSOR_TEST = 3089;
lime_graphics_opengl_GL.POLYGON_OFFSET_FILL = 32823;
lime_graphics_opengl_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime_graphics_opengl_GL.SAMPLE_COVERAGE = 32928;
lime_graphics_opengl_GL.NO_ERROR = 0;
lime_graphics_opengl_GL.INVALID_ENUM = 1280;
lime_graphics_opengl_GL.INVALID_VALUE = 1281;
lime_graphics_opengl_GL.INVALID_OPERATION = 1282;
lime_graphics_opengl_GL.OUT_OF_MEMORY = 1285;
lime_graphics_opengl_GL.CW = 2304;
lime_graphics_opengl_GL.CCW = 2305;
lime_graphics_opengl_GL.LINE_WIDTH = 2849;
lime_graphics_opengl_GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime_graphics_opengl_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime_graphics_opengl_GL.CULL_FACE_MODE = 2885;
lime_graphics_opengl_GL.FRONT_FACE = 2886;
lime_graphics_opengl_GL.DEPTH_RANGE = 2928;
lime_graphics_opengl_GL.DEPTH_WRITEMASK = 2930;
lime_graphics_opengl_GL.DEPTH_CLEAR_VALUE = 2931;
lime_graphics_opengl_GL.DEPTH_FUNC = 2932;
lime_graphics_opengl_GL.STENCIL_CLEAR_VALUE = 2961;
lime_graphics_opengl_GL.STENCIL_FUNC = 2962;
lime_graphics_opengl_GL.STENCIL_FAIL = 2964;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime_graphics_opengl_GL.STENCIL_REF = 2967;
lime_graphics_opengl_GL.STENCIL_VALUE_MASK = 2963;
lime_graphics_opengl_GL.STENCIL_WRITEMASK = 2968;
lime_graphics_opengl_GL.STENCIL_BACK_FUNC = 34816;
lime_graphics_opengl_GL.STENCIL_BACK_FAIL = 34817;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime_graphics_opengl_GL.STENCIL_BACK_REF = 36003;
lime_graphics_opengl_GL.STENCIL_BACK_VALUE_MASK = 36004;
lime_graphics_opengl_GL.STENCIL_BACK_WRITEMASK = 36005;
lime_graphics_opengl_GL.VIEWPORT = 2978;
lime_graphics_opengl_GL.SCISSOR_BOX = 3088;
lime_graphics_opengl_GL.COLOR_CLEAR_VALUE = 3106;
lime_graphics_opengl_GL.COLOR_WRITEMASK = 3107;
lime_graphics_opengl_GL.UNPACK_ALIGNMENT = 3317;
lime_graphics_opengl_GL.PACK_ALIGNMENT = 3333;
lime_graphics_opengl_GL.MAX_TEXTURE_SIZE = 3379;
lime_graphics_opengl_GL.MAX_VIEWPORT_DIMS = 3386;
lime_graphics_opengl_GL.SUBPIXEL_BITS = 3408;
lime_graphics_opengl_GL.RED_BITS = 3410;
lime_graphics_opengl_GL.GREEN_BITS = 3411;
lime_graphics_opengl_GL.BLUE_BITS = 3412;
lime_graphics_opengl_GL.ALPHA_BITS = 3413;
lime_graphics_opengl_GL.DEPTH_BITS = 3414;
lime_graphics_opengl_GL.STENCIL_BITS = 3415;
lime_graphics_opengl_GL.POLYGON_OFFSET_UNITS = 10752;
lime_graphics_opengl_GL.POLYGON_OFFSET_FACTOR = 32824;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D = 32873;
lime_graphics_opengl_GL.SAMPLE_BUFFERS = 32936;
lime_graphics_opengl_GL.SAMPLES = 32937;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_VALUE = 32938;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_INVERT = 32939;
lime_graphics_opengl_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime_graphics_opengl_GL.DONT_CARE = 4352;
lime_graphics_opengl_GL.FASTEST = 4353;
lime_graphics_opengl_GL.NICEST = 4354;
lime_graphics_opengl_GL.GENERATE_MIPMAP_HINT = 33170;
lime_graphics_opengl_GL.BYTE = 5120;
lime_graphics_opengl_GL.UNSIGNED_BYTE = 5121;
lime_graphics_opengl_GL.SHORT = 5122;
lime_graphics_opengl_GL.UNSIGNED_SHORT = 5123;
lime_graphics_opengl_GL.INT = 5124;
lime_graphics_opengl_GL.UNSIGNED_INT = 5125;
lime_graphics_opengl_GL.FLOAT = 5126;
lime_graphics_opengl_GL.DEPTH_COMPONENT = 6402;
lime_graphics_opengl_GL.ALPHA = 6406;
lime_graphics_opengl_GL.RGB = 6407;
lime_graphics_opengl_GL.RGBA = 6408;
lime_graphics_opengl_GL.BGR_EXT = 32992;
lime_graphics_opengl_GL.BGRA_EXT = 32993;
lime_graphics_opengl_GL.LUMINANCE = 6409;
lime_graphics_opengl_GL.LUMINANCE_ALPHA = 6410;
lime_graphics_opengl_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime_graphics_opengl_GL.FRAGMENT_SHADER = 35632;
lime_graphics_opengl_GL.VERTEX_SHADER = 35633;
lime_graphics_opengl_GL.MAX_VERTEX_ATTRIBS = 34921;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime_graphics_opengl_GL.MAX_VARYING_VECTORS = 36348;
lime_graphics_opengl_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime_graphics_opengl_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime_graphics_opengl_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime_graphics_opengl_GL.SHADER_TYPE = 35663;
lime_graphics_opengl_GL.DELETE_STATUS = 35712;
lime_graphics_opengl_GL.LINK_STATUS = 35714;
lime_graphics_opengl_GL.VALIDATE_STATUS = 35715;
lime_graphics_opengl_GL.ATTACHED_SHADERS = 35717;
lime_graphics_opengl_GL.ACTIVE_UNIFORMS = 35718;
lime_graphics_opengl_GL.ACTIVE_ATTRIBUTES = 35721;
lime_graphics_opengl_GL.SHADING_LANGUAGE_VERSION = 35724;
lime_graphics_opengl_GL.CURRENT_PROGRAM = 35725;
lime_graphics_opengl_GL.NEVER = 512;
lime_graphics_opengl_GL.LESS = 513;
lime_graphics_opengl_GL.EQUAL = 514;
lime_graphics_opengl_GL.LEQUAL = 515;
lime_graphics_opengl_GL.GREATER = 516;
lime_graphics_opengl_GL.NOTEQUAL = 517;
lime_graphics_opengl_GL.GEQUAL = 518;
lime_graphics_opengl_GL.ALWAYS = 519;
lime_graphics_opengl_GL.KEEP = 7680;
lime_graphics_opengl_GL.REPLACE = 7681;
lime_graphics_opengl_GL.INCR = 7682;
lime_graphics_opengl_GL.DECR = 7683;
lime_graphics_opengl_GL.INVERT = 5386;
lime_graphics_opengl_GL.INCR_WRAP = 34055;
lime_graphics_opengl_GL.DECR_WRAP = 34056;
lime_graphics_opengl_GL.VENDOR = 7936;
lime_graphics_opengl_GL.RENDERER = 7937;
lime_graphics_opengl_GL.VERSION = 7938;
lime_graphics_opengl_GL.NEAREST = 9728;
lime_graphics_opengl_GL.LINEAR = 9729;
lime_graphics_opengl_GL.NEAREST_MIPMAP_NEAREST = 9984;
lime_graphics_opengl_GL.LINEAR_MIPMAP_NEAREST = 9985;
lime_graphics_opengl_GL.NEAREST_MIPMAP_LINEAR = 9986;
lime_graphics_opengl_GL.LINEAR_MIPMAP_LINEAR = 9987;
lime_graphics_opengl_GL.TEXTURE_MAG_FILTER = 10240;
lime_graphics_opengl_GL.TEXTURE_MIN_FILTER = 10241;
lime_graphics_opengl_GL.TEXTURE_WRAP_S = 10242;
lime_graphics_opengl_GL.TEXTURE_WRAP_T = 10243;
lime_graphics_opengl_GL.TEXTURE_2D = 3553;
lime_graphics_opengl_GL.TEXTURE = 5890;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP = 34067;
lime_graphics_opengl_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime_graphics_opengl_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime_graphics_opengl_GL.TEXTURE0 = 33984;
lime_graphics_opengl_GL.TEXTURE1 = 33985;
lime_graphics_opengl_GL.TEXTURE2 = 33986;
lime_graphics_opengl_GL.TEXTURE3 = 33987;
lime_graphics_opengl_GL.TEXTURE4 = 33988;
lime_graphics_opengl_GL.TEXTURE5 = 33989;
lime_graphics_opengl_GL.TEXTURE6 = 33990;
lime_graphics_opengl_GL.TEXTURE7 = 33991;
lime_graphics_opengl_GL.TEXTURE8 = 33992;
lime_graphics_opengl_GL.TEXTURE9 = 33993;
lime_graphics_opengl_GL.TEXTURE10 = 33994;
lime_graphics_opengl_GL.TEXTURE11 = 33995;
lime_graphics_opengl_GL.TEXTURE12 = 33996;
lime_graphics_opengl_GL.TEXTURE13 = 33997;
lime_graphics_opengl_GL.TEXTURE14 = 33998;
lime_graphics_opengl_GL.TEXTURE15 = 33999;
lime_graphics_opengl_GL.TEXTURE16 = 34000;
lime_graphics_opengl_GL.TEXTURE17 = 34001;
lime_graphics_opengl_GL.TEXTURE18 = 34002;
lime_graphics_opengl_GL.TEXTURE19 = 34003;
lime_graphics_opengl_GL.TEXTURE20 = 34004;
lime_graphics_opengl_GL.TEXTURE21 = 34005;
lime_graphics_opengl_GL.TEXTURE22 = 34006;
lime_graphics_opengl_GL.TEXTURE23 = 34007;
lime_graphics_opengl_GL.TEXTURE24 = 34008;
lime_graphics_opengl_GL.TEXTURE25 = 34009;
lime_graphics_opengl_GL.TEXTURE26 = 34010;
lime_graphics_opengl_GL.TEXTURE27 = 34011;
lime_graphics_opengl_GL.TEXTURE28 = 34012;
lime_graphics_opengl_GL.TEXTURE29 = 34013;
lime_graphics_opengl_GL.TEXTURE30 = 34014;
lime_graphics_opengl_GL.TEXTURE31 = 34015;
lime_graphics_opengl_GL.ACTIVE_TEXTURE = 34016;
lime_graphics_opengl_GL.REPEAT = 10497;
lime_graphics_opengl_GL.CLAMP_TO_EDGE = 33071;
lime_graphics_opengl_GL.MIRRORED_REPEAT = 33648;
lime_graphics_opengl_GL.FLOAT_VEC2 = 35664;
lime_graphics_opengl_GL.FLOAT_VEC3 = 35665;
lime_graphics_opengl_GL.FLOAT_VEC4 = 35666;
lime_graphics_opengl_GL.INT_VEC2 = 35667;
lime_graphics_opengl_GL.INT_VEC3 = 35668;
lime_graphics_opengl_GL.INT_VEC4 = 35669;
lime_graphics_opengl_GL.BOOL = 35670;
lime_graphics_opengl_GL.BOOL_VEC2 = 35671;
lime_graphics_opengl_GL.BOOL_VEC3 = 35672;
lime_graphics_opengl_GL.BOOL_VEC4 = 35673;
lime_graphics_opengl_GL.FLOAT_MAT2 = 35674;
lime_graphics_opengl_GL.FLOAT_MAT3 = 35675;
lime_graphics_opengl_GL.FLOAT_MAT4 = 35676;
lime_graphics_opengl_GL.SAMPLER_2D = 35678;
lime_graphics_opengl_GL.SAMPLER_CUBE = 35680;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime_graphics_opengl_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime_graphics_opengl_GL.POINT_SPRITE = 34913;
lime_graphics_opengl_GL.COMPILE_STATUS = 35713;
lime_graphics_opengl_GL.LOW_FLOAT = 36336;
lime_graphics_opengl_GL.MEDIUM_FLOAT = 36337;
lime_graphics_opengl_GL.HIGH_FLOAT = 36338;
lime_graphics_opengl_GL.LOW_INT = 36339;
lime_graphics_opengl_GL.MEDIUM_INT = 36340;
lime_graphics_opengl_GL.HIGH_INT = 36341;
lime_graphics_opengl_GL.FRAMEBUFFER = 36160;
lime_graphics_opengl_GL.RENDERBUFFER = 36161;
lime_graphics_opengl_GL.RGBA4 = 32854;
lime_graphics_opengl_GL.RGB5_A1 = 32855;
lime_graphics_opengl_GL.RGB565 = 36194;
lime_graphics_opengl_GL.DEPTH_COMPONENT16 = 33189;
lime_graphics_opengl_GL.STENCIL_INDEX = 6401;
lime_graphics_opengl_GL.STENCIL_INDEX8 = 36168;
lime_graphics_opengl_GL.DEPTH_STENCIL = 34041;
lime_graphics_opengl_GL.RENDERBUFFER_WIDTH = 36162;
lime_graphics_opengl_GL.RENDERBUFFER_HEIGHT = 36163;
lime_graphics_opengl_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime_graphics_opengl_GL.RENDERBUFFER_RED_SIZE = 36176;
lime_graphics_opengl_GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime_graphics_opengl_GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime_graphics_opengl_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime_graphics_opengl_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime_graphics_opengl_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime_graphics_opengl_GL.COLOR_ATTACHMENT0 = 36064;
lime_graphics_opengl_GL.DEPTH_ATTACHMENT = 36096;
lime_graphics_opengl_GL.STENCIL_ATTACHMENT = 36128;
lime_graphics_opengl_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime_graphics_opengl_GL.NONE = 0;
lime_graphics_opengl_GL.FRAMEBUFFER_COMPLETE = 36053;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime_graphics_opengl_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime_graphics_opengl_GL.FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.RENDERBUFFER_BINDING = 36007;
lime_graphics_opengl_GL.MAX_RENDERBUFFER_SIZE = 34024;
lime_graphics_opengl_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime_graphics_opengl_GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime_graphics_opengl_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime_graphics_opengl_GL.CONTEXT_LOST_WEBGL = 37442;
lime_graphics_opengl_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime_graphics_opengl_GL.BROWSER_DEFAULT_WEBGL = 37444;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime_math_Matrix3.__identity = new lime_math_Matrix3();
lime_math__$Matrix4_Matrix4_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_SSL = 1;
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_WIN32 = 2;
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_ALL = 3;
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_NOTHING = 0;
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_DEFAULT = 3;
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_ACK_EINTR = 4;
lime_system_BackgroundWorker.MESSAGE_COMPLETE = "__COMPLETE__";
lime_system_BackgroundWorker.MESSAGE_ERROR = "__ERROR__";
lime_system_CFFI.__moduleNames = null;
lime_system_CFFI.lime_cffi_set_finalizer = lime_system_CFFI.load("lime","lime_cffi_set_finalizer",1,false);
lime_text__$TextDirection_TextDirection_$Impl_$.INVALID = 0;
lime_text__$TextDirection_TextDirection_$Impl_$.LEFT_TO_RIGHT = 4;
lime_text__$TextDirection_TextDirection_$Impl_$.RIGHT_TO_LEFT = 5;
lime_text__$TextDirection_TextDirection_$Impl_$.TOP_TO_BOTTOM = 6;
lime_text__$TextDirection_TextDirection_$Impl_$.BOTTOM_TO_TOP = 7;
lime_text__$TextScript_TextScript_$Impl_$.COMMON = "Zyyy";
lime_text__$TextScript_TextScript_$Impl_$.INHERITED = "Zinh";
lime_text__$TextScript_TextScript_$Impl_$.UNKNOWN = "Zzzz";
lime_text__$TextScript_TextScript_$Impl_$.ARABIC = "Arab";
lime_text__$TextScript_TextScript_$Impl_$.ARMENIAN = "Armn";
lime_text__$TextScript_TextScript_$Impl_$.BENGALI = "Beng";
lime_text__$TextScript_TextScript_$Impl_$.CYRILLIC = "Cyrl";
lime_text__$TextScript_TextScript_$Impl_$.DEVANAGARI = "Deva";
lime_text__$TextScript_TextScript_$Impl_$.GEORGIAN = "Geor";
lime_text__$TextScript_TextScript_$Impl_$.GREEK = "Grek";
lime_text__$TextScript_TextScript_$Impl_$.GUJARATI = "Gujr";
lime_text__$TextScript_TextScript_$Impl_$.GURMUKHI = "Guru";
lime_text__$TextScript_TextScript_$Impl_$.HANGUL = "Hang";
lime_text__$TextScript_TextScript_$Impl_$.HAN = "Hani";
lime_text__$TextScript_TextScript_$Impl_$.HEBREW = "Hebr";
lime_text__$TextScript_TextScript_$Impl_$.HIRAGANA = "Hira";
lime_text__$TextScript_TextScript_$Impl_$.KANNADA = "Knda";
lime_text__$TextScript_TextScript_$Impl_$.KATAKANA = "Kana";
lime_text__$TextScript_TextScript_$Impl_$.LAO = "Laoo";
lime_text__$TextScript_TextScript_$Impl_$.LATIN = "Latn";
lime_text__$TextScript_TextScript_$Impl_$.MALAYALAM = "Mlym";
lime_text__$TextScript_TextScript_$Impl_$.ORIYA = "Orya";
lime_text__$TextScript_TextScript_$Impl_$.TAMIL = "Taml";
lime_text__$TextScript_TextScript_$Impl_$.TELUGA = "Telu";
lime_text__$TextScript_TextScript_$Impl_$.THAI = "Thai";
lime_text__$TextScript_TextScript_$Impl_$.TIBETAN = "Tibt";
lime_text__$TextScript_TextScript_$Impl_$.BOPOMOFO = "Bopo";
lime_text__$TextScript_TextScript_$Impl_$.BRAILLE = "Brai";
lime_text__$TextScript_TextScript_$Impl_$.CANADIAN_SYLLABICS = "Cans";
lime_text__$TextScript_TextScript_$Impl_$.CHEROKEE = "Cher";
lime_text__$TextScript_TextScript_$Impl_$.ETHIOPIC = "Ethi";
lime_text__$TextScript_TextScript_$Impl_$.KHMER = "Khmr";
lime_text__$TextScript_TextScript_$Impl_$.MONGOLIAN = "Mong";
lime_text__$TextScript_TextScript_$Impl_$.MYANMAR = "Mymr";
lime_text__$TextScript_TextScript_$Impl_$.OGHAM = "Ogam";
lime_text__$TextScript_TextScript_$Impl_$.RUNIC = "Runr";
lime_text__$TextScript_TextScript_$Impl_$.SINHALA = "Sinh";
lime_text__$TextScript_TextScript_$Impl_$.SYRIAC = "Syrc";
lime_text__$TextScript_TextScript_$Impl_$.THAANA = "Thaa";
lime_text__$TextScript_TextScript_$Impl_$.YI = "Yiii";
lime_text__$TextScript_TextScript_$Impl_$.DESERET = "Dsrt";
lime_text__$TextScript_TextScript_$Impl_$.GOTHIC = "Goth";
lime_text__$TextScript_TextScript_$Impl_$.OLD_ITALIC = "Ital";
lime_text__$TextScript_TextScript_$Impl_$.BUHID = "Buhd";
lime_text__$TextScript_TextScript_$Impl_$.HANUNOO = "Hano";
lime_text__$TextScript_TextScript_$Impl_$.TAGALOG = "Tglg";
lime_text__$TextScript_TextScript_$Impl_$.TAGBANWA = "Tagb";
lime_text__$TextScript_TextScript_$Impl_$.CYPRIOT = "Cprt";
lime_text__$TextScript_TextScript_$Impl_$.LIMBU = "Limb";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_B = "Linb";
lime_text__$TextScript_TextScript_$Impl_$.OSMANYA = "Osma";
lime_text__$TextScript_TextScript_$Impl_$.SHAVIAN = "Shaw";
lime_text__$TextScript_TextScript_$Impl_$.TAI_LE = "Tale";
lime_text__$TextScript_TextScript_$Impl_$.UGARITIC = "Ugar";
lime_text__$TextScript_TextScript_$Impl_$.BUGINESE = "Bugi";
lime_text__$TextScript_TextScript_$Impl_$.COPTIC = "Copt";
lime_text__$TextScript_TextScript_$Impl_$.GLAGOLITIC = "Glag";
lime_text__$TextScript_TextScript_$Impl_$.KHAROSHTHI = "Khar";
lime_text__$TextScript_TextScript_$Impl_$.NEW_TAI_LUE = "Talu";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERSIAN = "Xpeo";
lime_text__$TextScript_TextScript_$Impl_$.SYLOTI_NAGRI = "Sylo";
lime_text__$TextScript_TextScript_$Impl_$.TIFINAGH = "Tfng";
lime_text__$TextScript_TextScript_$Impl_$.BALINESE = "Bali";
lime_text__$TextScript_TextScript_$Impl_$.CUNEIFORM = "Xsux";
lime_text__$TextScript_TextScript_$Impl_$.NKO = "Nkoo";
lime_text__$TextScript_TextScript_$Impl_$.PHAGS_PA = "Phag";
lime_text__$TextScript_TextScript_$Impl_$.PHOENICIAN = "Phnx";
lime_text__$TextScript_TextScript_$Impl_$.CARIAN = "Cari";
lime_text__$TextScript_TextScript_$Impl_$.CHAM = "Cham";
lime_text__$TextScript_TextScript_$Impl_$.KAYAH_LI = "Kali";
lime_text__$TextScript_TextScript_$Impl_$.LEPCHA = "Lepc";
lime_text__$TextScript_TextScript_$Impl_$.LYCIAN = "Lyci";
lime_text__$TextScript_TextScript_$Impl_$.LYDIAN = "Lydi";
lime_text__$TextScript_TextScript_$Impl_$.OL_CHIKI = "Olck";
lime_text__$TextScript_TextScript_$Impl_$.REJANG = "Rjng";
lime_text__$TextScript_TextScript_$Impl_$.SAURASHTRA = "Saur";
lime_text__$TextScript_TextScript_$Impl_$.SUNDANESE = "Sund";
lime_text__$TextScript_TextScript_$Impl_$.VAI = "Vaii";
lime_text__$TextScript_TextScript_$Impl_$.AVESTAN = "Avst";
lime_text__$TextScript_TextScript_$Impl_$.BAMUM = "Bamu";
lime_text__$TextScript_TextScript_$Impl_$.EGYPTIAN_HIEROGLYPHS = "Egyp";
lime_text__$TextScript_TextScript_$Impl_$.IMPERIAL_ARAMAIC = "Armi";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PAHLAVI = "Phli";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PARTHIAN = "Prti";
lime_text__$TextScript_TextScript_$Impl_$.JAVANESE = "Java";
lime_text__$TextScript_TextScript_$Impl_$.KAITHI = "Kthi";
lime_text__$TextScript_TextScript_$Impl_$.LISU = "Lisu";
lime_text__$TextScript_TextScript_$Impl_$.MEETEI_MAYEK = "Mtei";
lime_text__$TextScript_TextScript_$Impl_$.OLD_SOUTH_ARABIAN = "Sarb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_TURKIC = "Orkh";
lime_text__$TextScript_TextScript_$Impl_$.SAMARITAN = "Samr";
lime_text__$TextScript_TextScript_$Impl_$.TAI_THAM = "Lana";
lime_text__$TextScript_TextScript_$Impl_$.TAI_VIET = "Tavt";
lime_text__$TextScript_TextScript_$Impl_$.BATAK = "Batk";
lime_text__$TextScript_TextScript_$Impl_$.BRAHMI = "Brah";
lime_text__$TextScript_TextScript_$Impl_$.MANDAIC = "Mand";
lime_text__$TextScript_TextScript_$Impl_$.CHAKMA = "Cakm";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_CURSIVE = "Merc";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_HIEROGLYPHS = "Mero";
lime_text__$TextScript_TextScript_$Impl_$.MIAO = "Plrd";
lime_text__$TextScript_TextScript_$Impl_$.SHARADA = "Shrd";
lime_text__$TextScript_TextScript_$Impl_$.SORA_SOMPENG = "Sora";
lime_text__$TextScript_TextScript_$Impl_$.TAKRI = "Takr";
lime_text__$TextScript_TextScript_$Impl_$.BASSA_VAH = "Bass";
lime_text__$TextScript_TextScript_$Impl_$.CAUCASIAN_ALBANIAN = "Aghb";
lime_text__$TextScript_TextScript_$Impl_$.DUPLOYAN = "Dupl";
lime_text__$TextScript_TextScript_$Impl_$.ELBASAN = "Elba";
lime_text__$TextScript_TextScript_$Impl_$.GRANTHA = "Gran";
lime_text__$TextScript_TextScript_$Impl_$.KHOJKI = "Khoj";
lime_text__$TextScript_TextScript_$Impl_$.KHUDAWADI = "Sind";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_A = "Lina";
lime_text__$TextScript_TextScript_$Impl_$.MAHAJANI = "Mahj";
lime_text__$TextScript_TextScript_$Impl_$.MANICHAEAN = "Mani";
lime_text__$TextScript_TextScript_$Impl_$.MENDE_KIKAKUI = "Mend";
lime_text__$TextScript_TextScript_$Impl_$.MODI = "Modi";
lime_text__$TextScript_TextScript_$Impl_$.MRO = "Mroo";
lime_text__$TextScript_TextScript_$Impl_$.NABATAEAN = "Nbat";
lime_text__$TextScript_TextScript_$Impl_$.OLD_NORTH_ARABIAN = "Narb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERMIC = "Perm";
lime_text__$TextScript_TextScript_$Impl_$.PAHAWH_HMONG = "Hmng";
lime_text__$TextScript_TextScript_$Impl_$.PALMYRENE = "Palm";
lime_text__$TextScript_TextScript_$Impl_$.PAU_CIN_HAU = "Pauc";
lime_text__$TextScript_TextScript_$Impl_$.PSALTER_PAHLAVI = "Phlp";
lime_text__$TextScript_TextScript_$Impl_$.SIDDHAM = "Sidd";
lime_text__$TextScript_TextScript_$Impl_$.TIRHUTA = "Tirh";
lime_text__$TextScript_TextScript_$Impl_$.WARANG_CITI = "Wara";
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app_Event_$lime_$ui_$Gamepad_$Void();
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_X = 0;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_Y = 1;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_X = 2;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_Y = 3;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_LEFT = 4;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_RIGHT = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.A = 0;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.B = 1;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.X = 2;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.Y = 3;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.BACK = 4;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.GUIDE = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.START = 6;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_STICK = 7;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_STICK = 8;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_SHOULDER = 9;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_SHOULDER = 10;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_UP = 11;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_DOWN = 12;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_LEFT = 13;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_RIGHT = 14;
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app_Event_$lime_$ui_$Joystick_$Void();
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.CENTER = 0;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN = 4;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.LEFT = 8;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.RIGHT = 2;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP = 1;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_LEFT = 12;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_RIGHT = 6;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_LEFT = 9;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_RIGHT = 3;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNKNOWN = 0;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSPACE = 8;
lime_ui__$KeyCode_KeyCode_$Impl_$.TAB = 9;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN = 13;
lime_ui__$KeyCode_KeyCode_$Impl_$.ESCAPE = 27;
lime_ui__$KeyCode_KeyCode_$Impl_$.SPACE = 32;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXCLAMATION = 33;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUOTE = 34;
lime_ui__$KeyCode_KeyCode_$Impl_$.HASH = 35;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOLLAR = 36;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERCENT = 37;
lime_ui__$KeyCode_KeyCode_$Impl_$.AMPERSAND = 38;
lime_ui__$KeyCode_KeyCode_$Impl_$.SINGLE_QUOTE = 39;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_PARENTHESIS = 40;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_PARENTHESIS = 41;
lime_ui__$KeyCode_KeyCode_$Impl_$.ASTERISK = 42;
lime_ui__$KeyCode_KeyCode_$Impl_$.PLUS = 43;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMMA = 44;
lime_ui__$KeyCode_KeyCode_$Impl_$.MINUS = 45;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERIOD = 46;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLASH = 47;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_0 = 48;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_1 = 49;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_2 = 50;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_3 = 51;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_4 = 52;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_5 = 53;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_6 = 54;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_7 = 55;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_8 = 56;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_9 = 57;
lime_ui__$KeyCode_KeyCode_$Impl_$.COLON = 58;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEMICOLON = 59;
lime_ui__$KeyCode_KeyCode_$Impl_$.LESS_THAN = 60;
lime_ui__$KeyCode_KeyCode_$Impl_$.EQUALS = 61;
lime_ui__$KeyCode_KeyCode_$Impl_$.GREATER_THAN = 62;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUESTION = 63;
lime_ui__$KeyCode_KeyCode_$Impl_$.AT = 64;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_BRACKET = 91;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSLASH = 92;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_BRACKET = 93;
lime_ui__$KeyCode_KeyCode_$Impl_$.CARET = 94;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDERSCORE = 95;
lime_ui__$KeyCode_KeyCode_$Impl_$.GRAVE = 96;
lime_ui__$KeyCode_KeyCode_$Impl_$.A = 97;
lime_ui__$KeyCode_KeyCode_$Impl_$.B = 98;
lime_ui__$KeyCode_KeyCode_$Impl_$.C = 99;
lime_ui__$KeyCode_KeyCode_$Impl_$.D = 100;
lime_ui__$KeyCode_KeyCode_$Impl_$.E = 101;
lime_ui__$KeyCode_KeyCode_$Impl_$.F = 102;
lime_ui__$KeyCode_KeyCode_$Impl_$.G = 103;
lime_ui__$KeyCode_KeyCode_$Impl_$.H = 104;
lime_ui__$KeyCode_KeyCode_$Impl_$.I = 105;
lime_ui__$KeyCode_KeyCode_$Impl_$.J = 106;
lime_ui__$KeyCode_KeyCode_$Impl_$.K = 107;
lime_ui__$KeyCode_KeyCode_$Impl_$.L = 108;
lime_ui__$KeyCode_KeyCode_$Impl_$.M = 109;
lime_ui__$KeyCode_KeyCode_$Impl_$.N = 110;
lime_ui__$KeyCode_KeyCode_$Impl_$.O = 111;
lime_ui__$KeyCode_KeyCode_$Impl_$.P = 112;
lime_ui__$KeyCode_KeyCode_$Impl_$.Q = 113;
lime_ui__$KeyCode_KeyCode_$Impl_$.R = 114;
lime_ui__$KeyCode_KeyCode_$Impl_$.S = 115;
lime_ui__$KeyCode_KeyCode_$Impl_$.T = 116;
lime_ui__$KeyCode_KeyCode_$Impl_$.U = 117;
lime_ui__$KeyCode_KeyCode_$Impl_$.V = 118;
lime_ui__$KeyCode_KeyCode_$Impl_$.W = 119;
lime_ui__$KeyCode_KeyCode_$Impl_$.X = 120;
lime_ui__$KeyCode_KeyCode_$Impl_$.Y = 121;
lime_ui__$KeyCode_KeyCode_$Impl_$.Z = 122;
lime_ui__$KeyCode_KeyCode_$Impl_$.DELETE = 127;
lime_ui__$KeyCode_KeyCode_$Impl_$.CAPS_LOCK = 1073741881;
lime_ui__$KeyCode_KeyCode_$Impl_$.F1 = 1073741882;
lime_ui__$KeyCode_KeyCode_$Impl_$.F2 = 1073741883;
lime_ui__$KeyCode_KeyCode_$Impl_$.F3 = 1073741884;
lime_ui__$KeyCode_KeyCode_$Impl_$.F4 = 1073741885;
lime_ui__$KeyCode_KeyCode_$Impl_$.F5 = 1073741886;
lime_ui__$KeyCode_KeyCode_$Impl_$.F6 = 1073741887;
lime_ui__$KeyCode_KeyCode_$Impl_$.F7 = 1073741888;
lime_ui__$KeyCode_KeyCode_$Impl_$.F8 = 1073741889;
lime_ui__$KeyCode_KeyCode_$Impl_$.F9 = 1073741890;
lime_ui__$KeyCode_KeyCode_$Impl_$.F10 = 1073741891;
lime_ui__$KeyCode_KeyCode_$Impl_$.F11 = 1073741892;
lime_ui__$KeyCode_KeyCode_$Impl_$.F12 = 1073741893;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRINT_SCREEN = 1073741894;
lime_ui__$KeyCode_KeyCode_$Impl_$.SCROLL_LOCK = 1073741895;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAUSE = 1073741896;
lime_ui__$KeyCode_KeyCode_$Impl_$.INSERT = 1073741897;
lime_ui__$KeyCode_KeyCode_$Impl_$.HOME = 1073741898;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_UP = 1073741899;
lime_ui__$KeyCode_KeyCode_$Impl_$.END = 1073741901;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_DOWN = 1073741902;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT = 1073741903;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT = 1073741904;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOWN = 1073741905;
lime_ui__$KeyCode_KeyCode_$Impl_$.UP = 1073741906;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUM_LOCK = 1073741907;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DIVIDE = 1073741908;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MULTIPLY = 1073741909;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MINUS = 1073741910;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS = 1073741911;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_ENTER = 1073741912;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_1 = 1073741913;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_2 = 1073741914;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_3 = 1073741915;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_4 = 1073741916;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_5 = 1073741917;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_6 = 1073741918;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_7 = 1073741919;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_8 = 1073741920;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_9 = 1073741921;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_0 = 1073741922;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERIOD = 1073741923;
lime_ui__$KeyCode_KeyCode_$Impl_$.APPLICATION = 1073741925;
lime_ui__$KeyCode_KeyCode_$Impl_$.POWER = 1073741926;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EQUALS = 1073741927;
lime_ui__$KeyCode_KeyCode_$Impl_$.F13 = 1073741928;
lime_ui__$KeyCode_KeyCode_$Impl_$.F14 = 1073741929;
lime_ui__$KeyCode_KeyCode_$Impl_$.F15 = 1073741930;
lime_ui__$KeyCode_KeyCode_$Impl_$.F16 = 1073741931;
lime_ui__$KeyCode_KeyCode_$Impl_$.F17 = 1073741932;
lime_ui__$KeyCode_KeyCode_$Impl_$.F18 = 1073741933;
lime_ui__$KeyCode_KeyCode_$Impl_$.F19 = 1073741934;
lime_ui__$KeyCode_KeyCode_$Impl_$.F20 = 1073741935;
lime_ui__$KeyCode_KeyCode_$Impl_$.F21 = 1073741936;
lime_ui__$KeyCode_KeyCode_$Impl_$.F22 = 1073741937;
lime_ui__$KeyCode_KeyCode_$Impl_$.F23 = 1073741938;
lime_ui__$KeyCode_KeyCode_$Impl_$.F24 = 1073741939;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXECUTE = 1073741940;
lime_ui__$KeyCode_KeyCode_$Impl_$.HELP = 1073741941;
lime_ui__$KeyCode_KeyCode_$Impl_$.MENU = 1073741942;
lime_ui__$KeyCode_KeyCode_$Impl_$.SELECT = 1073741943;
lime_ui__$KeyCode_KeyCode_$Impl_$.STOP = 1073741944;
lime_ui__$KeyCode_KeyCode_$Impl_$.AGAIN = 1073741945;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDO = 1073741946;
lime_ui__$KeyCode_KeyCode_$Impl_$.CUT = 1073741947;
lime_ui__$KeyCode_KeyCode_$Impl_$.COPY = 1073741948;
lime_ui__$KeyCode_KeyCode_$Impl_$.PASTE = 1073741949;
lime_ui__$KeyCode_KeyCode_$Impl_$.FIND = 1073741950;
lime_ui__$KeyCode_KeyCode_$Impl_$.MUTE = 1073741951;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_UP = 1073741952;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_DOWN = 1073741953;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COMMA = 1073741957;
lime_ui__$KeyCode_KeyCode_$Impl_$.ALT_ERASE = 1073741977;
lime_ui__$KeyCode_KeyCode_$Impl_$.SYSTEM_REQUEST = 1073741978;
lime_ui__$KeyCode_KeyCode_$Impl_$.CANCEL = 1073741979;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR = 1073741980;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRIOR = 1073741981;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN2 = 1073741982;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEPARATOR = 1073741983;
lime_ui__$KeyCode_KeyCode_$Impl_$.OUT = 1073741984;
lime_ui__$KeyCode_KeyCode_$Impl_$.OPER = 1073741985;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR_AGAIN = 1073741986;
lime_ui__$KeyCode_KeyCode_$Impl_$.CRSEL = 1073741987;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXSEL = 1073741988;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_00 = 1073742000;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_000 = 1073742001;
lime_ui__$KeyCode_KeyCode_$Impl_$.THOUSAND_SEPARATOR = 1073742002;
lime_ui__$KeyCode_KeyCode_$Impl_$.DECIMAL_SEPARATOR = 1073742003;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_UNIT = 1073742004;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_SUBUNIT = 1073742005;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_PARENTHESIS = 1073742006;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_BRACE = 1073742008;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_BRACE = 1073742009;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_TAB = 1073742010;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BACKSPACE = 1073742011;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_A = 1073742012;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_B = 1073742013;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_C = 1073742014;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_D = 1073742015;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_E = 1073742016;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_F = 1073742017;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_XOR = 1073742018;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_POWER = 1073742019;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERCENT = 1073742020;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LESS_THAN = 1073742021;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_GREATER_THAN = 1073742022;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AMPERSAND = 1073742023;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_VERTICAL_BAR = 1073742025;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COLON = 1073742027;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HASH = 1073742028;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_SPACE = 1073742029;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AT = 1073742030;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EXCLAMATION = 1073742031;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_STORE = 1073742032;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_RECALL = 1073742033;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_CLEAR = 1073742034;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_ADD = 1073742035;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_SUBTRACT = 1073742036;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_MULTIPLY = 1073742037;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_DIVIDE = 1073742038;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS_MINUS = 1073742039;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR = 1073742040;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR_ENTRY = 1073742041;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BINARY = 1073742042;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_OCTAL = 1073742043;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DECIMAL = 1073742044;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HEXADECIMAL = 1073742045;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_CTRL = 1073742048;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_SHIFT = 1073742049;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_ALT = 1073742050;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_META = 1073742051;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_CTRL = 1073742052;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_SHIFT = 1073742053;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_ALT = 1073742054;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_META = 1073742055;
lime_ui__$KeyCode_KeyCode_$Impl_$.MODE = 1073742081;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_NEXT = 1073742082;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PREVIOUS = 1073742083;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_STOP = 1073742084;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PLAY = 1073742085;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_MUTE = 1073742086;
lime_ui__$KeyCode_KeyCode_$Impl_$.MEDIA_SELECT = 1073742087;
lime_ui__$KeyCode_KeyCode_$Impl_$.WWW = 1073742088;
lime_ui__$KeyCode_KeyCode_$Impl_$.MAIL = 1073742089;
lime_ui__$KeyCode_KeyCode_$Impl_$.CALCULATOR = 1073742090;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMPUTER = 1073742091;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_SEARCH = 1073742092;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_HOME = 1073742093;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BACK = 1073742094;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_FORWARD = 1073742095;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_STOP = 1073742096;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_REFRESH = 1073742097;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BOOKMARKS = 1073742098;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_DOWN = 1073742099;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_UP = 1073742100;
lime_ui__$KeyCode_KeyCode_$Impl_$.DISPLAY_SWITCH = 1073742101;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_TOGGLE = 1073742102;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_DOWN = 1073742103;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_UP = 1073742104;
lime_ui__$KeyCode_KeyCode_$Impl_$.EJECT = 1073742105;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLEEP = 1073742106;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NONE = 0;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_SHIFT = 1;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_SHIFT = 2;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_CTRL = 64;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_CTRL = 128;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_ALT = 256;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_ALT = 512;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_META = 1024;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_META = 2048;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NUM_LOCK = 4096;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CAPS_LOCK = 8192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.MODE = 16384;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CTRL = 192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.SHIFT = 3;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.ALT = 768;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.META = 3072;
lime_ui_Touch.onEnd = new lime_app_Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app_Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app_Event_$lime_$ui_$Touch_$Void();
lime_utils_Bytes.cffi_lime_bytes_from_data_pointer = (function($this) {
	var $r;
	var inValue = lime_system_CFFI.load("lime","lime_bytes_from_data_pointer",2,false);
	$r = inValue;
	return $r;
}(this));
lime_utils_Bytes.cffi_lime_bytes_get_data_pointer = (function($this) {
	var $r;
	var inValue = lime_system_CFFI.load("lime","lime_bytes_get_data_pointer",1,false);
	$r = inValue;
	return $r;
}(this));
lime_utils_Bytes.cffi_lime_bytes_read_file = (function($this) {
	var $r;
	var inValue = lime_system_CFFI.load("lime","lime_bytes_read_file",1,false);
	$r = inValue;
	return $r;
}(this));
lime_utils__$Float32Array_Float32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$Int16Array_Int16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
lime_utils__$Int32Array_Int32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$UInt16Array_UInt16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.BYTES_PER_ELEMENT = 1;
openfl_Assets.cache = new openfl_AssetCache();
openfl_Assets.dispatcher = new openfl_events_EventDispatcher();
openfl_Lib.current = new openfl_display_MovieClip();
openfl_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl__$internal_renderer_GraphicsPaths.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_GraphicsPaths.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_cairo_CairoGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_cairo_CairoGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_cairo_CairoGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_opengl_GLBitmap.fbData = [];
openfl__$internal_renderer_opengl_GLRenderer.glContextId = 0;
openfl__$internal_renderer_opengl_GLRenderer.glContexts = [];
openfl__$internal_renderer_opengl_shaders2_Shader.UID = 0;
openfl__$internal_renderer_opengl_shaders2_DefaultShader.VERTEX_SRC = ["attribute vec2 " + "openfl_aPosition" + ";","attribute vec2 " + "openfl_aTexCoord0" + ";","attribute vec4 " + "openfl_aColor" + ";","uniform mat3 " + "openfl_uProjectionMatrix" + ";","uniform bool " + "openfl_uUseColorTransform" + ";","varying vec2 " + "openfl_vTexCoord" + ";","varying vec4 " + "openfl_vColor" + ";","void main(void) {","   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);","   " + "openfl_vTexCoord" + " = " + "openfl_aTexCoord0" + ";","   if(" + "openfl_uUseColorTransform" + ")","   \t" + "openfl_vColor" + " = " + "openfl_aColor" + ";","   else","   \t" + "openfl_vColor" + " = vec4(" + "openfl_aColor" + ".rgb * " + "openfl_aColor" + ".a, " + "openfl_aColor" + ".a);","}"];
openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex = 0;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.fillVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aPosition")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.drawTrianglesVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aPosition"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aTexCoord0"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5121,true,"openfl_aColor")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.primitiveVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aPosition"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5126,false,"openfl_aColor")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.graphicsDataPool = [];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool = [];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectPosition = new openfl_geom_Point();
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds = new openfl_geom_Rectangle();
openfl__$internal_renderer_opengl_utils_ShaderManager.compiledShadersCache = new haxe_ds_StringMap();
openfl__$internal_renderer_opengl_utils_SpriteBatch.VERTS_PER_SPRITE = 4;
openfl__$internal_text_TextEngine.UTF8_TAB = 9;
openfl__$internal_text_TextEngine.UTF8_ENDLINE = 10;
openfl__$internal_text_TextEngine.UTF8_SPACE = 32;
openfl__$internal_text_TextEngine.UTF8_HYPHEN = 45;
openfl__$internal_text_TextEngine.__defaultFonts = new haxe_ds_StringMap();
openfl_display_BitmapDataChannel.ALPHA = 8;
openfl_display_BitmapDataChannel.BLUE = 4;
openfl_display_BitmapDataChannel.GREEN = 2;
openfl_display_BitmapDataChannel.RED = 1;
openfl_display_Graphics.TILE_SCALE = 1;
openfl_display_Graphics.TILE_ROTATION = 2;
openfl_display_Graphics.TILE_RGB = 4;
openfl_display_Graphics.TILE_ALPHA = 8;
openfl_display_Graphics.TILE_TRANS_2x2 = 16;
openfl_display_Graphics.TILE_RECT = 32;
openfl_display_Graphics.TILE_ORIGIN = 64;
openfl_display_Graphics.TILE_BLEND_NORMAL = 0;
openfl_display_Graphics.TILE_BLEND_ADD = 65536;
openfl_display_Graphics.TILE_BLEND_MULTIPLY = 131072;
openfl_display_Graphics.TILE_BLEND_SCREEN = 262144;
openfl_display_Graphics.TILE_BLEND_SUBTRACT = 524288;
openfl_display_Graphics.TILE_BLEND_DARKEN = 1048576;
openfl_display_Graphics.TILE_BLEND_LIGHTEN = 2097152;
openfl_display_Graphics.TILE_BLEND_OVERLAY = 4194304;
openfl_display_Graphics.TILE_BLEND_HARDLIGHT = 8388608;
openfl_display_Graphics.TILE_BLEND_DIFFERENCE = 16777216;
openfl_display_Graphics.TILE_BLEND_INVERT = 33554432;
openfl_display_GraphicsPathCommand.LINE_TO = 2;
openfl_display_GraphicsPathCommand.MOVE_TO = 1;
openfl_display_GraphicsPathCommand.CURVE_TO = 3;
openfl_display_GraphicsPathCommand.WIDE_LINE_TO = 5;
openfl_display_GraphicsPathCommand.WIDE_MOVE_TO = 4;
openfl_display_GraphicsPathCommand.NO_OP = 0;
openfl_display_GraphicsPathCommand.CUBIC_CURVE_TO = 6;
openfl_display_OpenGLView.CONTEXT_LOST = "glcontextlost";
openfl_display_OpenGLView.CONTEXT_RESTORED = "glcontextrestored";
openfl_display_Shader.uniformRegex = new EReg("^\\s*uniform\\s+(sampler(?:2D|Cube)|[bi]?vec[234]|float|int|bool|mat[234])\\s+(\\w+)\\s*(?:\\[(\\d+)\\])?\\s*;.*$","gmi");
openfl_display_Shader.aPosition = "openfl_aPosition";
openfl_display_Shader.aTexCoord = "openfl_aTexCoord0";
openfl_display_Shader.aColor = "openfl_aColor";
openfl_display_Shader.uSampler = "openfl_uSampler0";
openfl_display_Shader.uProjectionMatrix = "openfl_uProjectionMatrix";
openfl_display_Shader.uColorMultiplier = "openfl_uColorMultiplier";
openfl_display_Shader.uColorOffset = "openfl_uColorOffset";
openfl_display_Shader.uObjectSize = "openfl_uObjectSize";
openfl_display_Shader.uTextureSize = "openfl_uTextureSize";
openfl_display_Shader.vTexCoord = "openfl_vTexCoord";
openfl_display_Shader.vColor = "openfl_vColor";
openfl_display_Shader.vertexHeader = ["attribute vec2 " + openfl_display_Shader.aPosition + ";","attribute vec2 " + openfl_display_Shader.aTexCoord + ";","attribute vec4 " + openfl_display_Shader.aColor + ";","uniform mat3 " + openfl_display_Shader.uProjectionMatrix + ";","uniform vec2 " + openfl_display_Shader.uObjectSize + ";","uniform vec2 " + openfl_display_Shader.uTextureSize + ";","varying vec2 " + openfl_display_Shader.vTexCoord + ";","varying vec4 " + openfl_display_Shader.vColor + ";"];
openfl_display_Shader.fragmentHeader = ["uniform sampler2D " + openfl_display_Shader.uSampler + ";","uniform vec4 " + openfl_display_Shader.uColorMultiplier + ";","uniform vec4 " + openfl_display_Shader.uColorOffset + ";","uniform vec2 " + openfl_display_Shader.uObjectSize + ";","uniform vec2 " + openfl_display_Shader.uTextureSize + ";","varying vec2 " + openfl_display_Shader.vTexCoord + ";","varying vec4 " + openfl_display_Shader.vColor + ";","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}"];
openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT = 34046;
openfl_display3D_Context3D.MAX_SAMPLERS = 8;
openfl_display3D_Context3D.MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
openfl_display3D_Context3D.anisotropySupportTested = false;
openfl_display3D_Context3D.supportsAnisotropy = false;
openfl_display3D_Context3D.maxSupportedAnisotropy = 256;
openfl_display3D_Context3DClearMask.ALL = 17664;
openfl_display3D_Context3DClearMask.COLOR = 16384;
openfl_display3D_Context3DClearMask.DEPTH = 256;
openfl_display3D_Context3DClearMask.STENCIL = 1024;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.ALWAYS = 519;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.EQUAL = 514;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER = 516;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER_EQUAL = 518;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS = 513;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS_EQUAL = 515;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NEVER = 512;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NOT_EQUAL = 517;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.BACK = 1028;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT = 1029;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT_AND_BACK = 1032;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.NONE = 0;
openfl_errors_Error.DEFAULT_TO_STRING = "Error";
openfl_events_Event.ACTIVATE = "activate";
openfl_events_Event.ADDED = "added";
openfl_events_Event.ADDED_TO_STAGE = "addedToStage";
openfl_events_Event.CANCEL = "cancel";
openfl_events_Event.CHANGE = "change";
openfl_events_Event.CLOSE = "close";
openfl_events_Event.COMPLETE = "complete";
openfl_events_Event.CONNECT = "connect";
openfl_events_Event.CONTEXT3D_CREATE = "context3DCreate";
openfl_events_Event.DEACTIVATE = "deactivate";
openfl_events_Event.ENTER_FRAME = "enterFrame";
openfl_events_Event.ID3 = "id3";
openfl_events_Event.INIT = "init";
openfl_events_Event.MOUSE_LEAVE = "mouseLeave";
openfl_events_Event.OPEN = "open";
openfl_events_Event.REMOVED = "removed";
openfl_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl_events_Event.RENDER = "render";
openfl_events_Event.RESIZE = "resize";
openfl_events_Event.SCROLL = "scroll";
openfl_events_Event.SELECT = "select";
openfl_events_Event.SOUND_COMPLETE = "soundComplete";
openfl_events_Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl_events_Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl_events_Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl_events_Event.UNLOAD = "unload";
openfl_events_ActivityEvent.ACTIVITY = "activity";
openfl_events_TextEvent.LINK = "link";
openfl_events_TextEvent.TEXT_INPUT = "textInput";
openfl_events_ErrorEvent.ERROR = "error";
openfl_events_FocusEvent.FOCUS_IN = "focusIn";
openfl_events_FocusEvent.FOCUS_OUT = "focusOut";
openfl_events_FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl_events_FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl_events_FullScreenEvent.FULL_SCREEN = "fullScreen";
openfl_events_FullScreenEvent.FULL_SCREEN_INTERACTIVE_ACCEPTED = "fullScreenInteractiveAccepted";
openfl_events_GameInputEvent.DEVICE_ADDED = "deviceAdded";
openfl_events_GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
openfl_events_GameInputEvent.DEVICE_UNUSABLE = "deviceUnusable";
openfl_events_HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
openfl_events_HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl_events_IOErrorEvent.IO_ERROR = "ioError";
openfl_events_KeyboardEvent.KEY_DOWN = "keyDown";
openfl_events_KeyboardEvent.KEY_UP = "keyUp";
openfl_events_MouseEvent.CLICK = "click";
openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl_events_MouseEvent.ROLL_OUT = "rollOut";
openfl_events_MouseEvent.ROLL_OVER = "rollOver";
openfl_events_NetStatusEvent.NET_STATUS = "netStatus";
openfl_events_ProgressEvent.PROGRESS = "progress";
openfl_events_ProgressEvent.SOCKET_DATA = "socketData";
openfl_events_SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl_events_TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl_events_TouchEvent.TOUCH_END = "touchEnd";
openfl_events_TouchEvent.TOUCH_MOVE = "touchMove";
openfl_events_TouchEvent.TOUCH_OUT = "touchOut";
openfl_events_TouchEvent.TOUCH_OVER = "touchOver";
openfl_events_TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl_events_TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl_events_TouchEvent.TOUCH_TAP = "touchTap";
openfl_media_Sound.__registeredSounds = new haxe_ds_StringMap();
openfl_net_NetConnection.CONNECT_SUCCESS = "connectSuccess";
openfl_net_SharedObject.defaultObjectEncoding = 3;
openfl_system_SecurityDomain.currentDomain = new openfl_system_SecurityDomain();
openfl_system_System.useCodePage = false;
openfl_ui_GameInput.isSupported = true;
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__deviceList = [];
openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
openfl_ui_GameInput.__instances = [];
openfl_ui_GameInputDevice.MAX_BUFFER_SIZE = 32000;
openfl_ui_Keyboard.NUMBER_0 = 48;
openfl_ui_Keyboard.NUMBER_1 = 49;
openfl_ui_Keyboard.NUMBER_2 = 50;
openfl_ui_Keyboard.NUMBER_3 = 51;
openfl_ui_Keyboard.NUMBER_4 = 52;
openfl_ui_Keyboard.NUMBER_5 = 53;
openfl_ui_Keyboard.NUMBER_6 = 54;
openfl_ui_Keyboard.NUMBER_7 = 55;
openfl_ui_Keyboard.NUMBER_8 = 56;
openfl_ui_Keyboard.NUMBER_9 = 57;
openfl_ui_Keyboard.A = 65;
openfl_ui_Keyboard.B = 66;
openfl_ui_Keyboard.C = 67;
openfl_ui_Keyboard.D = 68;
openfl_ui_Keyboard.E = 69;
openfl_ui_Keyboard.F = 70;
openfl_ui_Keyboard.G = 71;
openfl_ui_Keyboard.H = 72;
openfl_ui_Keyboard.I = 73;
openfl_ui_Keyboard.J = 74;
openfl_ui_Keyboard.K = 75;
openfl_ui_Keyboard.L = 76;
openfl_ui_Keyboard.M = 77;
openfl_ui_Keyboard.N = 78;
openfl_ui_Keyboard.O = 79;
openfl_ui_Keyboard.P = 80;
openfl_ui_Keyboard.Q = 81;
openfl_ui_Keyboard.R = 82;
openfl_ui_Keyboard.S = 83;
openfl_ui_Keyboard.T = 84;
openfl_ui_Keyboard.U = 85;
openfl_ui_Keyboard.V = 86;
openfl_ui_Keyboard.W = 87;
openfl_ui_Keyboard.X = 88;
openfl_ui_Keyboard.Y = 89;
openfl_ui_Keyboard.Z = 90;
openfl_ui_Keyboard.NUMPAD_0 = 96;
openfl_ui_Keyboard.NUMPAD_1 = 97;
openfl_ui_Keyboard.NUMPAD_2 = 98;
openfl_ui_Keyboard.NUMPAD_3 = 99;
openfl_ui_Keyboard.NUMPAD_4 = 100;
openfl_ui_Keyboard.NUMPAD_5 = 101;
openfl_ui_Keyboard.NUMPAD_6 = 102;
openfl_ui_Keyboard.NUMPAD_7 = 103;
openfl_ui_Keyboard.NUMPAD_8 = 104;
openfl_ui_Keyboard.NUMPAD_9 = 105;
openfl_ui_Keyboard.NUMPAD_MULTIPLY = 106;
openfl_ui_Keyboard.NUMPAD_ADD = 107;
openfl_ui_Keyboard.NUMPAD_ENTER = 108;
openfl_ui_Keyboard.NUMPAD_SUBTRACT = 109;
openfl_ui_Keyboard.NUMPAD_DECIMAL = 110;
openfl_ui_Keyboard.NUMPAD_DIVIDE = 111;
openfl_ui_Keyboard.F1 = 112;
openfl_ui_Keyboard.F2 = 113;
openfl_ui_Keyboard.F3 = 114;
openfl_ui_Keyboard.F4 = 115;
openfl_ui_Keyboard.F5 = 116;
openfl_ui_Keyboard.F6 = 117;
openfl_ui_Keyboard.F7 = 118;
openfl_ui_Keyboard.F8 = 119;
openfl_ui_Keyboard.F9 = 120;
openfl_ui_Keyboard.F10 = 121;
openfl_ui_Keyboard.F11 = 122;
openfl_ui_Keyboard.F12 = 123;
openfl_ui_Keyboard.F13 = 124;
openfl_ui_Keyboard.F14 = 125;
openfl_ui_Keyboard.F15 = 126;
openfl_ui_Keyboard.BACKSPACE = 8;
openfl_ui_Keyboard.TAB = 9;
openfl_ui_Keyboard.ALTERNATE = 18;
openfl_ui_Keyboard.ENTER = 13;
openfl_ui_Keyboard.COMMAND = 15;
openfl_ui_Keyboard.SHIFT = 16;
openfl_ui_Keyboard.CONTROL = 17;
openfl_ui_Keyboard.BREAK = 19;
openfl_ui_Keyboard.CAPS_LOCK = 20;
openfl_ui_Keyboard.NUMPAD = 21;
openfl_ui_Keyboard.ESCAPE = 27;
openfl_ui_Keyboard.SPACE = 32;
openfl_ui_Keyboard.PAGE_UP = 33;
openfl_ui_Keyboard.PAGE_DOWN = 34;
openfl_ui_Keyboard.END = 35;
openfl_ui_Keyboard.HOME = 36;
openfl_ui_Keyboard.LEFT = 37;
openfl_ui_Keyboard.RIGHT = 39;
openfl_ui_Keyboard.UP = 38;
openfl_ui_Keyboard.DOWN = 40;
openfl_ui_Keyboard.INSERT = 45;
openfl_ui_Keyboard.DELETE = 46;
openfl_ui_Keyboard.NUMLOCK = 144;
openfl_ui_Keyboard.SEMICOLON = 186;
openfl_ui_Keyboard.EQUAL = 187;
openfl_ui_Keyboard.COMMA = 188;
openfl_ui_Keyboard.MINUS = 189;
openfl_ui_Keyboard.PERIOD = 190;
openfl_ui_Keyboard.SLASH = 191;
openfl_ui_Keyboard.BACKQUOTE = 192;
openfl_ui_Keyboard.LEFTBRACKET = 219;
openfl_ui_Keyboard.BACKSLASH = 220;
openfl_ui_Keyboard.RIGHTBRACKET = 221;
openfl_ui_Keyboard.QUOTE = 222;
ApplicationMain.main();
})(typeof console != "undefined" ? console : {log:function(){}}, typeof window != "undefined" ? window : exports);
